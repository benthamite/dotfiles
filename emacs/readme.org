#+TITLE:Pablo's Emacs config
#+AUTHOR: Pablo Stafforini
#+PROPERTY: header-args :tangle ~/Dropbox/dotfiles/emacs/init.el
#+filetags: :project:
:PROPERTIES:
:TOC:      ignore
:END:

* table of contents
:PROPERTIES:
:TOC:      :include all :depth 2 :force ((nothing)) :ignore ((nothing)) :local ((nothing))
:ID:       536D7BF2-AA0D-43D7-8865-601DFB6BB8E6
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:28]--[2021-08-02 Mon 21:29] =>  0:01
:END:
:CONTENTS:
- [[#table-of-contents][table of contents]]
- [[#installation][installation]]
- [[#preface][preface]]
  - [[#profiling][Profiling]]
  - [[#installation][Installation]]
  - [[#other-config-files][Other config files]]
  - [[#archive][Archive]]
- [[#startup][startup]]
  - [[#archive][Archive]]
  - [[#variables][variables]]
  - [[#macros][macros]]
- [[#package-management][package management]]
  - [[#straight][straight]]
  - [[#use-package][Use-package]]
  - [[#paradox][paradox]]
  - [[#archive][Archive]]
- [[#foundational][foundational]]
  - [[#key-bindings][key bindings]]
  - [[#no-littering][no-littering]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#general][general]]
  - [[#el-patch][el-patch]]
  - [[#hydra][hydra]]
  - [[#transient][transient]]
  - [[#elisp-bug-hunter][elisp-bug-hunter]]
  - [[#warnings][warnings]]
  - [[#comp][comp]]
  - [[#bytecomp][bytecomp]]
  - [[#startup][startup]]
  - [[#emacsclient][emacsclient]]
  - [[#server][server]]
  - [[#async][async]]
  - [[#misc][misc.]]
- [[#display][display]]
  - [[#mixed-pitch][mixed-pitch]]
  - [[#face-remap][face-remap]]
  - [[#fringe][fringe]]
  - [[#highlight-parentheses][highlight-parentheses]]
  - [[#prism][prism]]
  - [[#org-modern][org-modern]]
  - [[#org-faces][org-faces]]
  - [[#modus-themes][modus-themes]]
  - [[#emacs-emojify][emacs-emojify]]
  - [[#lin][lin]]
  - [[#image][image]]
  - [[#paren][paren]]
  - [[#modeline][modeline]]
  - [[#doom-modeline][doom-modeline]]
  - [[#tab-bar][tab-bar]]
  - [[#fancy-battery][fancy-battery]]
  - [[#all-the-icons][all-the-icons]]
  - [[#all-the-icons-completion][all-the-icons-completion]]
  - [[#gnuplot-mode][gnuplot-mode]]
  - [[#delsel][delsel]]
  - [[#hl-line][hl-line]]
  - [[#jit-lock][jit-lock]]
- [[#performance][performance]]
  - [[#bidirectional-writing][bidirectional writing]]
  - [[#profiler][profiler]]
  - [[#so-long][so-long]]
  - [[#gcmh][gcmh]]
  - [[#misc][misc.]]
- [[#text-movement][text movement]]
  - [[#characters][characters]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#defuns][defuns]]
  - [[#buffers][buffers]]
  - [[#archive][Archive]]
- [[#text-manipulation][text manipulation]]
  - [[#characters][characters]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#headings][headings]]
  - [[#element][element]]
  - [[#region][region]]
  - [[#misc][misc.]]
  - [[#kill-ring][kill ring]]
- [[#editing][editing]]
  - [[#simple][simple]]
  - [[#repeat][repeat]]
  - [[#view][view]]
  - [[#newcomment][newcomment]]
  - [[#indent][indent]]
  - [[#sort][sort]]
  - [[#outline][outline]]
  - [[#ediff][ediff]]
  - [[#fill][fill]]
  - [[#abbrev][abbrev]]
  - [[#yasnippet][yasnippet]]
  - [[#hippie-expand][hippie-expand]]
  - [[#expand-region][expand-region]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#crux][crux]]
  - [[#button][button]]
  - [[#back-button][back-button]]
  - [[#goto-last-change][goto-last-change]]
  - [[#titlecase][titlecase]]
- [[#registers--bookmarks][registers & bookmarks]]
  - [[#registers][registers]]
  - [[#bookmarks][bookmarks]]
  - [[#archive][Archive]]
- [[#files--buffers][files & buffers]]
  - [[#files][files]]
  - [[#f][f]]
  - [[#locate][locate]]
  - [[#autorevert][autorevert]]
  - [[#real-auto-save][real-auto-save]]
  - [[#dired][dired]]
  - [[#image-dired][image-dired]]
  - [[#dired-undo][dired-undo]]
  - [[#all-the-icons-dired][all-the-icons-dired]]
  - [[#wdired][wdired]]
  - [[#gnus-dired][gnus-dired]]
  - [[#dired-x][dired-x]]
  - [[#dired-subtree][dired-subtree]]
  - [[#dired-quick-sort][dired-quick-sort]]
  - [[#dired-du][dired-du]]
  - [[#minibuffer][minibuffer]]
  - [[#ibuffer][ibuffer]]
  - [[#filenotify][filenotify]]
  - [[#uniquify][uniquify]]
  - [[#reveal-in-osx-finder][reveal-in-osx-finder]]
  - [[#tramp][tramp]]
  - [[#pandoc][pandoc]]
  - [[#curl-to-elisp][curl-to-elisp]]
  - [[#archive][Archive]]
- [[#windows--frames][windows & frames]]
  - [[#window][window]]
  - [[#frame][frame]]
  - [[#winum][winum]]
  - [[#winner][winner]]
  - [[#scroll-bar][scroll-bar]]
  - [[#avy][avy]]
  - [[#iy-go-to-char][iy-go-to-char]]
  - [[#writeroom-mode][writeroom-mode]]
  - [[#ace-link][ace-link]]
- [[#date--time][date & time]]
  - [[#calendar][calendar]]
  - [[#loaddefs][loaddefs]]
  - [[#org-gcal][org-gcal]]
  - [[#gcalcli][gcalcli]]
  - [[#time][time]]
  - [[#tmr][tmr]]
  - [[#hammy][hammy]]
  - [[#display-wttr][display-wttr]]
- [[#history][history]]
  - [[#savehist][savehist]]
  - [[#saveplace][saveplace]]
  - [[#session][session]]
  - [[#recentf][recentf]]
  - [[#persistent-scratch][persistent-scratch]]
  - [[#remember][remember]]
- [[#version-control][version control]]
  - [[#vc][vc]]
  - [[#magit][magit]]
  - [[#ghub][ghub]]
  - [[#forge][forge]]
  - [[#code-review][code-review]]
  - [[#projectile][projectile]]
  - [[#git-timemachine][git-timemachine]]
  - [[#git-auto-commit-mode][git-auto-commit-mode]]
  - [[#git-gutter][git-gutter]]
  - [[#archive][Archive]]
- [[#search--replace][search & replace]]
  - [[#isearch][isearch]]
  - [[#replace][replace]]
  - [[#substitute][substitute]]
  - [[#rg][rg]]
  - [[#visual-regexp][visual-regexp]]
  - [[#visual-regexp-steroids][visual-regexp-steroids]]
  - [[#imenu][imenu]]
  - [[#pcre2el][pcre2el]]
  - [[#wgrep][wgrep]]
  - [[#affe][affe]]
- [[#minibuffer-completion][minibuffer completion]]
  - [[#vertico][vertico]]
  - [[#embark][embark]]
  - [[#embark-consult][embark-consult]]
  - [[#consult][consult]]
  - [[#consult-dir][consult-dir]]
  - [[#consult-notes][consult-notes]]
  - [[#consult-yasnippet][consult-yasnippet]]
  - [[#consult-spotify][consult-spotify]]
  - [[#consult-flyspell][consult-flyspell]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#ido][ido]]
- [[#completion-at-point][completion at point]]
  - [[#corfu][corfu]]
  - [[#corfu-terminal][corfu-terminal]]
  - [[#corfu-doc-terminal][corfu-doc-terminal]]
  - [[#kind-icon][kind-icon]]
  - [[#cape][cape]]
  - [[#cape-yasnippet][cape-yasnippet]]
  - [[#org-block-cafp][org-block-cafp]]
  - [[#company][company]]
- [[#help][help]]
  - [[#help][help]]
  - [[#help-at-pt][help-at-pt]]
  - [[#helpful][helpful]]
  - [[#info][info]]
  - [[#man][man]]
  - [[#shortdoc][shortdoc]]
  - [[#elisp-demos][elisp-demos]]
  - [[#which-key][which-key]]
  - [[#archive][Archive]]
- [[#keyboard-macros][keyboard macros]]
  - [[#kmacro][kmacro]]
  - [[#elmacro][elmacro]]
- [[#shells][shells]]
  - [[#learn-how-to-call-emacs-commands-from-shell][Learn how to call Emacs commands from shell]]
  - [[#simple][simple]]
  - [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#eshell-git-prompt][eshell-git-prompt]]
  - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
  - [[#pcmpl-args][pcmpl-args]]
  - [[#emacs-native-shell-complete][emacs-native-shell-complete]]
  - [[#dwim-shell-command][dwim-shell-command]]
- [[#spelling--grammar][spelling & grammar]]
  - [[#ispell][ispell]]
  - [[#flyspell][flyspell]]
  - [[#flyspell-correct][flyspell-correct]]
  - [[#keytar][keytar]]
  - [[#lsp-grammarly][lsp-grammarly]]
  - [[#aide][aide]]
  - [[#languagetool][languagetool]]
- [[#prose][prose]]
  - [[#text-mode][text-mode]]
  - [[#with-editor][with-editor]]
  - [[#latex-mode][latex-mode]]
  - [[#dictionary][dictionary]]
  - [[#osx-dictionary][osx-dictionary]]
  - [[#check-out-shawcmgoldendict-emacs-lookup-marked-text-by-goldendict-in-emacs][Check out shawcm/goldendict-emacs: Lookup marked text by GoldenDict in Emacs]]
  - [[#powerthesaurus][powerthesaurus]]
  - [[#goldendict][goldendict]]
  - [[#google-translate][google-translate]]
  - [[#txl][txl]]
  - [[#reverso][reverso]]
  - [[#atomic-chrome][atomic-chrome]]
  - [[#markdown][markdown]]
  - [[#mediawiki-el][mediawiki-el]]
  - [[#gdrive][gdrive]]
  - [[#edit-indirect][edit-indirect]]
  - [[#ledger-mode][ledger-mode]]
  - [[#parse-csv][parse-csv]]
  - [[#archive][Archive]]
- [[#pdf][pdf]]
  - [[#tweak-chrome-headless-command-so-that-chrome-authenticates-before-printing-a-pdf][Tweak chrome headless command so that chrome authenticates before printing a pdf]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-view-restore][pdf-view-restore]]
  - [[#org-pdftools][org-pdftools]]
  - [[#org-noter-pdftools][org-noter-pdftools]]
  - [[#archive][Archive]]
- [[#prog-mode][prog-mode]]
  - [[#lsp-mode][lsp-mode]]
  - [[#lsp-ui][lsp-ui]]
  - [[#dap-mode][dap-mode]]
  - [[#dumb-jump][dumb-jump]]
  - [[#elisp-mode][elisp-mode]]
  - [[#debug][debug]]
  - [[#edebug][edebug]]
  - [[#backtrace][backtrace]]
  - [[#macrostep][macrostep]]
  - [[#ess][ESS]]
  - [[#clojure][clojure]]
  - [[#cider][cider]]
  - [[#python][python]]
  - [[#applescript-mode][applescript-mode]]
  - [[#puni][puni]]
  - [[#copilot][copilot]]
  - [[#gpt][gpt]]
  - [[#pen][pen]]
  - [[#elpy][elpy]]
  - [[#epc][epc]]
  - [[#eldoc][eldoc]]
  - [[#bicycle][bicycle]]
- [[#org-mode][org-mode]]
  - [[#create-function-to-compute-the-total-number-of-hours-in-effort-estimates-as-well-as-the-total-number-of-todos-then-check-it-every-evening][Create function to compute the total number of hours in effort estimates, as well as the total number of Todos, then check it every evening]]
  - [[#read-org-manual][Read Org manual]]
  - [[#org][org]]
  - [[#org-agenda][org-agenda]]
  - [[#org-capture][org-capture]]
  - [[#org-clock][org-clock]]
  - [[#org-cycle][org-cycle]]
  - [[#org-archive][org-archive]]
  - [[#org-fold][org-fold]]
  - [[#org-id][org-id]]
  - [[#org-list][org-list]]
  - [[#org-refile][org-refile]]
  - [[#org-keys][org-keys]]
  - [[#ol][ol]]
  - [[#org-protocol][org-protocol]]
  - [[#org-protocol-capture-html][org-protocol-capture-html]]
  - [[#ox][ox]]
  - [[#ox-hugo][ox-hugo]]
  - [[#org-archive][org-archive]]
  - [[#org-babel][org-babel]]
  - [[#org-src][org-src]]
  - [[#org-tempo][org-tempo]]
  - [[#org-table][org-table]]
  - [[#orgtbl-edit][orgtbl-edit]]
  - [[#org-crypt][org-crypt]]
  - [[#org-lint][org-lint]]
  - [[#org-habit][org-habit]]
  - [[#org-contrib][org-contrib]]
  - [[#org-analyzer][org-analyzer]]
  - [[#org-ql][org-ql]]
  - [[#org-make-toc][org-make-toc]]
  - [[#images][images]]
  - [[#org2blog][org2blog]]
  - [[#org-journal][org-journal]]
  - [[#org-autosort][org-autosort]]
  - [[#ox-clip][ox-clip]]
  - [[#ox-pandoc][ox-pandoc]]
  - [[#ox-reveal][ox-reveal]]
  - [[#orgmdb][orgmdb]]
  - [[#org-mime][org-mime]]
  - [[#elgantt][elgantt]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#memacs][memacs]]
- [[#note-taking][note-taking]]
  - [[#add-biblio-tag-to-all-bibliographic-notes][Add biblio tag to all bibliographic notes]]
  - [[#emacs-sqlite3][emacs-sqlite3]]
  - [[#emacsql-sqlite-builtin][emacsql-sqlite-builtin]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-ui][org-roam-ui]]
  - [[#org-roam-browser-extension][org-roam-browser-extension]]
  - [[#org-transclusion][org-transclusion]]
  - [[#vulpea][vulpea]]
  - [[#org-noter][org-noter]]
- [[#reference--citation][reference & citation]]
  - [[#variables][variables]]
  - [[#oc][oc]]
  - [[#oc-basic][oc-basic]]
  - [[#oc-bibtex][oc-bibtex]]
  - [[#oc-biblatex][oc-biblatex]]
  - [[#oc-csl][oc-csl]]
  - [[#citeproc][citeproc]]
  - [[#bibtex][bibtex]]
  - [[#bibtex-completion][bibtex-completion]]
  - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#citar-org-roam][citar-org-roam]]
  - [[#citar][citar]]
  - [[#citar-citeproc][citar-citeproc]]
  - [[#citar-embark][citar-embark]]
  - [[#org-ref][org-ref]]
  - [[#doi-utils][doi-utils]]
  - [[#ebib][ebib]]
  - [[#biblio][biblio]]
  - [[#persid][persid]]
  - [[#zotra][zotra]]
  - [[#scihub][scihub]]
- [[#spaced-repetition][spaced-repetition]]
  - [[#anki-editor][anki-editor]]
  - [[#org-drill][org-drill]]
- [[#email][email]]
  - [[#smtpmail-multi][smtpmail-multi]]
  - [[#sendmail][sendmail]]
  - [[#async-mail-sending][async-mail-sending]]
  - [[#message][message]]
  - [[#mml][mml]]
  - [[#mu4e][mu4e]]
  - [[#mu4e-org][mu4e-org]]
  - [[#mu4e-alert][mu4e-alert]]
  - [[#org-msg][org-msg]]
  - [[#htmlize][htmlize]]
  - [[#archive][Archive]]
- [[#messaging][messaging]]
  - [[#telega][telega]]
  - [[#telega-mnz][telega-mnz]]
  - [[#telega-dired-dwim][telega-dired-dwim]]
  - [[#ol-telega][ol-telega]]
  - [[#slack][slack]]
  - [[#ol-emacs-slack][ol-emacs-slack]]
  - [[#erc][erc]]
  - [[#circe][circe]]
  - [[#accord][accord]]
- [[#web][web]]
  - [[#browse-url][browse-url]]
  - [[#shr][shr]]
  - [[#shr-tag-pre-highlight][shr-tag-pre-highlight]]
  - [[#eww][eww]]
  - [[#w3m][w3m]]
  - [[#elfeed][elfeed]]
  - [[#elfeed-org][elfeed-org]]
  - [[#elfeed-score][elfeed-score]]
  - [[#google-this][google-this]]
  - [[#engine-mode][engine-mode]]
  - [[#emacs-webkit][emacs-webkit]]
  - [[#eaf][eaf]]
  - [[#eaf-browser][eaf-browser]]
  - [[#osm][osm]]
  - [[#twittering-mode][twittering-mode]]
  - [[#mastodon][mastodon]]
  - [[#reddit][reddit]]
  - [[#hugo][hugo]]
  - [[#org-download][org-download]]
  - [[#org-web-tools][org-web-tools]]
  - [[#request][request]]
  - [[#mullvad][mullvad]]
- [[#multimedia][multimedia]]
  - [[#mpv][mpv]]
  - [[#youtube-dl-emacs][youtube-dl-emacs]]
  - [[#mentor][mentor]]
  - [[#espotify][espotify]]
  - [[#smudge][smudge]]
  - [[#read-aloud][read-aloud]]
  - [[#emms][EMMS]]
- [[#passwords][passwords]]
  - [[#plstore][plstore]]
  - [[#epg-config][epg-config]]
  - [[#auth-source][auth-source]]
  - [[#emacs-oauth2-auto][emacs-oauth2-auto]]
  - [[#pass][pass]]
  - [[#auth-source-pass][auth-source-pass]]
  - [[#pass-otp][pass-otp]]
  - [[#archive][Archive]]
- [[#notifications][notifications]]
  - [[#alert][alert]]
  - [[#dbus][dbus]]
- [[#calc][calc]]
  - [[#calc][calc]]
  - [[#constants][constants]]
- [[#games][games]]
  - [[#tetris][tetris]]
- [[#misc][misc.]]
  - [[#unpackaged][unpackaged]]
  - [[#macos][macos]]
  - [[#midnight-mode][midnight-mode]]
  - [[#keycast][keycast]]
  - [[#keyfreq][keyfreq]]
  - [[#custom][custom]]
  - [[#productivity][productivity]]
  - [[#archive][Archive]]
- [[#personal-projects][personal projects]]
  - [[#tlon][Tlon]]
  - [[#keyboard-maestro][Keyboard Maestro]]
- [[#local-variables][Local variables]]
:END:

* installation
:PROPERTIES:
:ID:       D941204B-E22E-43DD-9564-EB49874C8673
:END:
For personal reference: Emacs was last installed [2023-01-27 Fri 23:26]. I used the emacs-plus, with the following flags:

emacs-plus@29 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon

Prior to that, Emacs was installed [2022-12-07 Wed 18:05]. I used the [[https://github.com/railwaycat/homebrew-emacsmacport][Homebrew emacs-mac port]], with the following flags:

~brew install emacs-mac --with-dbus --with-starter --with-natural-title-bar --with-native-comp --with-mac-metal --with-xwidgets --with-imagemagick --with-librsvg  --with-spacemacs-icon~

* preface
:PROPERTIES:
:CUSTOM_ID: introduction
:ID:       A7940400-DD17-4B0B-A9B2-565A207D680C
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 09:25]--[2022-05-29 Sun 10:31] =>  1:13
CLOCK: [2021-07-24 Sat 09:51]--[2021-07-24 Sat 09:58] =>  0:07
CLOCK: [2021-07-14 Wed 22:51]--[2021-07-14 Wed 23:09] =>  0:18
CLOCK: [2021-03-07 Sun 18:52]--[2021-03-07 Sun 18:57] =>  0:05
CLOCK: [2021-03-04 Thu 09:05]--[2021-03-04 Thu 09:22] =>  0:17
CLOCK: [2021-02-03 Wed 16:32]--[2021-02-03 Wed 18:27] =>  1:55
CLOCK: [2021-02-03 Wed 16:01]--[2021-02-03 Wed 16:32] =>  0:31
CLOCK: [2021-02-03 Wed 15:40]--[2021-02-03 Wed 16:01] =>  0:21
CLOCK: [2021-02-03 Wed 13:56]--[2021-02-03 Wed 15:02] =>  1:06
CLOCK: [2021-01-31 Sun 15:22]--[2021-01-31 Sun 16:01] =>  0:39
CLOCK: [2021-01-31 Sun 10:07]--[2021-01-31 Sun 10:28] =>  0:21
CLOCK: [2021-01-24 Sun 11:41]--[2021-01-24 Sun 11:48] =>  0:07
CLOCK: [2021-01-23 Sat 08:40]--[2021-01-23 Sat 08:46] =>  0:06
CLOCK: [2021-01-22 Fri 09:29]--[2021-01-22 Fri 09:32] =>  0:03
CLOCK: [2021-01-12 Tue 19:22]--[2021-01-12 Tue 19:27] =>  0:05
CLOCK: [2021-01-12 Tue 11:41]--[2021-01-12 Tue 12:42] =>  1:01
CLOCK: [2021-01-08 Fri 13:34]--[2021-01-08 Fri 13:34] =>  0:00
CLOCK: [2021-01-06 Wed 22:04]--[2021-01-06 Wed 22:14] =>  0:10
CLOCK: [2021-01-06 Wed 13:46]--[2021-01-06 Wed 13:58] =>  0:12
CLOCK: [2021-01-06 Wed 12:30]--[2021-01-06 Wed 12:53] =>  0:23
CLOCK: [2021-01-06 Wed 11:02]--[2021-01-06 Wed 11:34] =>  0:32
CLOCK: [2021-01-03 Sun 22:11]--[2021-01-03 Sun 22:18] =>  0:07
CLOCK: [2021-01-03 Sun 22:03]--[2021-01-03 Sun 22:07] =>  0:04
CLOCK: [2021-01-02 Sat 14:00]--[2021-01-02 Sat 14:06] =>  0:06
CLOCK: [2020-12-31 Thu 13:56]--[2020-12-31 Thu 14:25] =>  0:29
CLOCK: [2020-12-31 Thu 13:46]--[2020-12-31 Thu 13:52] =>  0:06
CLOCK: [2020-12-29 Tue 15:07]--[2020-12-29 Tue 15:18] =>  0:11
CLOCK: [2020-12-22 Tue 09:57]--[2020-12-22 Tue 10:25] =>  0:28
CLOCK: [2020-12-19 Sat 12:18]--[2020-12-19 Sat 12:22] =>  0:04
CLOCK: [2020-12-14 Mon 18:39]--[2020-12-14 Mon 18:44] =>  0:05
CLOCK: [2020-12-07 Mon 18:15]--[2020-12-07 Mon 18:27] =>  0:12
CLOCK: [2020-10-20 Tue 17:48]--[2020-10-20 Tue 18:10] =>  0:22
CLOCK: [2020-10-20 Tue 17:27]--[2020-10-20 Tue 17:38] =>  0:11
CLOCK: [2020-10-20 Tue 11:30]--[2020-10-20 Tue 11:36] =>  0:06
CLOCK: [2020-10-19 Mon 20:24]--[2020-10-19 Mon 20:39] =>  0:15
CLOCK: [2020-10-15 Thu 20:37]--[2020-10-15 Thu 20:52] =>  0:15
CLOCK: [2020-10-15 Thu 18:56]--[2020-10-15 Thu 19:06] =>  0:10
CLOCK: [2020-10-15 Thu 18:11]--[2020-10-15 Thu 18:26] =>  0:15
CLOCK: [2020-10-14 Wed 07:31]--[2020-10-14 Wed 07:52] =>  0:21
CLOCK: [2020-10-12 Mon 18:15]--[2020-10-12 Mon 19:58] =>  1:43
CLOCK: [2020-10-12 Mon 15:28]--[2020-10-12 Mon 15:29] =>  0:01
CLOCK: [2020-10-11 Sun 21:10]--[2020-10-11 Sun 21:15] =>  0:05
CLOCK: [2020-10-11 Sun 10:05]--[2020-10-11 Sun 10:19] =>  0:14
CLOCK: [2020-10-10 Sat 18:21]--[2020-10-10 Sat 18:25] =>  0:04
CLOCK: [2020-10-05 Mon 18:56]--[2020-10-05 Mon 18:58] =>  0:02
CLOCK: [2020-10-04 Sun 11:27]--[2020-10-04 Sun 11:34] =>  0:07
CLOCK: [2020-10-04 Sun 10:54]--[2020-10-04 Sun 11:22] =>  0:28
CLOCK: [2020-08-19 Wed 13:52]--[2020-08-19 Wed 14:47] =>  0:55
:END:

** Debugging the config file                                      :noexport:
:PROPERTIES:
:ID:       ED2955EA-3BD8-4058-A973-3CC87847D9A5
:END:
:LOGBOOK:
CLOCK: [2021-04-12 Mon 13:20]--[2021-04-12 Mon 13:46] =>  0:26
:END:
- Run ~bug-hunter-init-file~ (from the [[id:0C19171B-8DFA-4E06-9E17-45C1F9158C28][elisp-bug-hunter]] package) and select "automatic error detection" (~e~).
- Run ~emacs -q~ or ~emacs --debug-init~.
- Cut suspected sections of the org file (~org-cut-subtree~), tangle immediately afterwards, then undo the changes. This will generate an init file without the code blocks included in the removed sections, while leaving the literal org file intact.
- Use ~git-timemachine~ to see how a suspected section of the config file compares with versions you know were working correctly.
- Set ~debug-on-error~ to ~t~ to see a backtrace of an error. Or call ~toggle-debug-on-error~ interactively.
- Use Time Machine (on MacOS) to download and try increasingly older versions, to identify the version that introduced the bug. Then diff that version with its immediate successor.
- Bisect the init file until you locate the culprit.
    - Run ~bug-hunter-init-file~ and select "bisect interactively" (~i~).
- You may want to periodically save a stable init file so that you can temporarily use Emacs with all your customizations while debugging your current init file (instead of having to use an external editor or a non-customized Emacs). Say you call this stable file ~stable.el~. Then you can tell Emacs to load this file on startup file with ~emacs -q -l ~/stable.el~.
- Use ~edebug-defun~. See [[https://org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/45?u=pablo][this discussion]].
- For org-related issues (e.g. tangling the config file), use ~org-lint~, which checks the current buffer for syntax mistakes.
- For more ideas, see:
    - [[https://www.emacswiki.org/emacs/DebugEmacs][EmacsWiki: Debug Emacs]]
    - [[https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/][Emacs Debugging Basics - whatacold's space]]
    - [[https://discourse.doomemacs.org/t/how-to-debug-issues/55][How to debug issues - Guides & Tutorials - Doom Emacs Discourse]].
    - [[id:94184DD8-591C-46CD-BFC3-9738113DA640][Debugging Emacs Lisp]]

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       7A45BBD1-33AD-42BE-BCFC-DC8C86E113F7
:END:
:LOGBOOK:
:END:
**** DONE [#5] Speed up the config file
CLOSED: [2021-01-11 Mon 17:46] SCHEDULED: <2021-01-11 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2021-01-23 Sat 12:58
:ID:       708C4822-7763-426B-91BA-11DC2F14D846
:END:
https://tychoish.com/post/towards-faster-emacs-start-times/

**** DONE [#6] Turn config file into org file
CLOSED: [2021-02-04 Thu 12:50]
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-04 Thu 22:02
:ID:       A7576CA1-2504-479D-9EF4-65DA8ECB9B27
:END:
:LOGBOOK:
CLOCK: [2021-02-01 Mon 12:11]--[2021-02-01 Mon 13:02] =>  0:51
CLOCK: [2021-01-26 Tue 15:38]--[2021-01-26 Tue 15:46] =>  0:08
CLOCK: [2021-01-21 Thu 14:27]--[2021-01-21 Thu 14:30] =>  0:03
CLOCK: [2021-01-19 Tue 14:52]--[2021-01-19 Tue 15:06] =>  0:14
CLOCK: [2021-01-19 Tue 14:45]--[2021-01-19 Tue 14:46] =>  0:01
:END:
You may want to auto-tangle the org file after you edit it, rather than make Emacs tangle it when loading, to reduce startup times. [[https://emacs.stackexchange.com/questions/20707/automatically-tangle-org-files-in-a-specific-directory/20733#20733][This Stackechange answer]] explains how.


** Profiling
:PROPERTIES:
:ID:       60B7A58C-A79A-4EEF-A91D-EECC85CFA173
:END:
- If you use ~use-package~, the command ~use-package-report~ displays a table showing the impact of each package on load times.
- You may also want to try [[https://www.emacswiki.org/emacs/ProfileDotEmacs][profile-dotemacs]].

** Installation
:PROPERTIES:
:ID:       6712DA4C-BA45-4E74-8AEF-C903462D9BCB
:END:
:LOGBOOK:
CLOCK: [2021-04-20 Tue 22:00]--[2021-04-20 Tue 23:28] =>  1:28
CLOCK: [2021-04-20 Tue 20:55]--[2021-04-20 Tue 21:26] =>  0:31
CLOCK: [2021-04-03 Sat 14:40]--[2021-04-03 Sat 15:07] =>  0:27
CLOCK: [2021-04-02 Fri 22:15]--[2021-04-02 Fri 22:35] =>  0:20
CLOCK: [2021-03-31 Wed 22:00]--[2021-03-31 Wed 23:00] =>  1:00
CLOCK: [2021-03-31 Wed 21:40]--[2021-03-31 Wed 21:47] =>  0:07
CLOCK: [2021-03-27 Sat 10:08]--[2021-03-27 Sat 13:05] =>  2:57
CLOCK: [2021-03-27 Sat 07:49]--[2021-03-27 Sat 09:10] =>  1:21
CLOCK: [2021-03-27 Sat 16:48]--[2021-03-27 Sat 16:50] =>  0:02
CLOCK: [2021-03-22 Mon 15:46]--[2021-03-22 Mon 15:53] =>  0:07
CLOCK: [2021-03-22 Mon 15:00]--[2021-03-22 Mon 15:20] =>  0:20
CLOCK: [2021-02-27 Sat 17:20]--[2021-02-27 Sat 18:00] =>  0:40
CLOCK: [2021-02-25 Thu 08:30]--[2021-02-25 Thu 11:54] =>  3:24
CLOCK: [2021-02-07 Sun 15:01]--[2021-02-07 Sun 15:18] =>  0:17
CLOCK: [2021-02-07 Sun 14:52]--[2021-02-07 Sun 14:54] =>  0:26
CLOCK: [2021-02-07 Sun 14:30]--[2021-02-07 Sun 14:49] =>  0:19
CLOCK: [2021-02-04 Thu 08:10]--[2021-02-04 Thu 09:25] =>  1:15
CLOCK: [2020-09-22 Tue 12:15]--[2020-09-22 Tue 13:01] =>  0:46
CLOCK: [2020-09-22 Tue 10:50]--[2020-09-22 Tue 12:15] =>  1:25
CLOCK: [2022-04-27 Wed 16:21]--[2022-04-27 Wed 16:44] =>  0:23
CLOCK: [2021-08-15 Sun 17:03]--[2021-08-15 Sun 17:06] =>  0:03
:END:

/latest install/ (~emacs-plus~):

1. ~brew tap d12frosted/emacs-plus~
2. ~brew install emacs-plus --with-no-titlebar --with-native-comp --with-imagemagick --with-spacemacs-icon --with-xwidgets --with-dbus~
3. delete ~emacs.app~ from the ~applications~ folder
4. ~ln -s /usr/local/opt/emacs-plus@27/Emacs.app /Applications~

/previous install/ (~emacs-mac~):
[2022-05-28 Sat 21:07] ~brew install emacs-mac --with-dbus --with-no-title-bars --with-spacemacs-icon~


** Other config files
:PROPERTIES:
:ID:       20E3D45E-D8AB-44BD-A5E2-C6DF9C20744E
:END:
:LOGBOOK:
CLOCK: [2022-06-29 Wed 18:08]--[2022-06-29 Wed 18:18] =>  0:10
CLOCK: [2022-06-17 Fri 21:20]--[2022-06-17 Fri 21:47] =>  0:27
CLOCK: [2021-08-02 Mon 21:29]--[2021-08-02 Mon 21:30] =>  0:01
CLOCK: [2021-06-30 Wed 20:43]--[2021-06-30 Wed 21:15] =>  0:32
CLOCK: [2021-06-30 Wed 19:32]--[2021-06-30 Wed 20:02] =>  0:30
CLOCK: [2021-06-05 Sat 19:34]--[2021-06-05 Sat 19:41] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-03 Thu 13:47]--[2021-06-03 Thu 13:52] =>  0:05
CLOCK: [2021-06-03 Thu 07:21]--[2021-06-03 Thu 07:50] =>  0:29
CLOCK: [2021-06-02 Wed 22:00]--[2021-06-02 Wed 22:11] =>  0:11
CLOCK: [2021-06-02 Wed 21:44]--[2021-06-02 Wed 21:50] =>  0:06
CLOCK: [2021-05-26 Wed 19:32]--[2021-05-26 Wed 19:44] =>  0:12
CLOCK: [2021-05-23 Sun 19:52]--[2021-05-23 Sun 20:02] =>  0:10
CLOCK: [2021-05-22 Sat 16:36]--[2021-05-22 Sat 16:44] =>  0:08
CLOCK: [2021-04-03 Sat 18:21]--[2021-04-03 Sat 18:36] =>  0:15
CLOCK: [2021-03-27 Sat 17:00]--[2021-03-27 Sat 17:32] =>  0:32
CLOCK: [2021-03-26 Fri 13:31]--[2021-03-26 Fri 14:14] =>  0:43
CLOCK: [2021-03-26 Fri 12:47]--[2021-03-26 Fri 13:18] =>  0:00
CLOCK: [2021-03-26 Fri 10:47]--[2021-03-26 Fri 10:57] =>  0:10
CLOCK: [2021-03-23 Tue 14:30]--[2021-03-23 Tue 16:45] =>  2:15
CLOCK: [2021-03-23 Tue 14:10]--[2021-03-23 Tue 14:30] =>  0:20
CLOCK: [2021-03-21 Sun 16:23]--[2021-03-21 Sun 16:32] =>  0:09
CLOCK: [2021-02-28 Sun 10:12]--[2021-02-28 Sun 10:27] =>  0:15
CLOCK: [2021-02-04 Thu 12:49]--[2021-02-04 Thu 14:36] =>  1:47
:END:
The below is a link dump for config files and other related links I have found useful in the past or may want to check out for ideas at some point in the future.

- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A list of useful Emacs packages.
- [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][How to build your own spacemacs · Samuel Barreto]]
- [[https://www.reddit.com/r/emacs/comments/3lt3c6/using_spacemacs_modeline_in_vanilla_emacs/][Using SpaceMacs mode-line in vanilla Emacs : emacs]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does Emacs Doom start so quickly?]] Might be useful for ideas on how to speed up config file.
- [[https://prelude.emacsredux.com/en/latest/][Emacs Prelude]]. I've seen this recommended. Might want to check it out.
- [[https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/][Polishing my Emacs -- who said an old tool can't look modern]]
  [[https://github.com/mbriggs/.emacs.d-oldv2/blob/master/init/init-keymaps.el][.emacs.d-oldv2/init-keymaps.el at master · mbriggs/.emacs.d-oldv2]]. Lots of key bindings.

Literate configuration
- [[https://commonplace.doubleloop.net/setting-up-a-spacemacs-literate-config-file][Setting up a spacemacs literate config file]]
- [[https://www.reddit.com/r/spacemacs/comments/atuzd9/does_anyone_have_their_dotfile_redone_in_literate/][Does anyone have their dotfile redone in literate programming with babel? : spacemacs]]
- Diego Zamboni, /[[https://leanpub.com/lit-config][Literate configuration]]/
- [[https://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][elisp - Can I use org-mode to structure my .emacs or other .el configuration file? - Emacs Stack Exchange]]

Some useful config files:
- [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Diego Zamboni]]
- [[https://jamiecollinson.com/blog/my-emacs-config/][Jamie Collinson]]
- [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][Jethro Kuan]]. Creator or ~org-roam~ and author of some great posts on note-taking. Not literal.
- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joost Diepenmat]]
- [[https://github.com/gjstein/emacs.d][Gregory Stein]]. Author of the excellent [[http://cachestocaches.com/][Caches to Caches]] blog.
- [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][Luca Cambiaghi]]
- [[https://config.phundrak.com/emacs][Lucien Cartier-Tilet]] (Spacemacs)
- [[https://github.com/isamert/dotfiles/blob/master/emacs/index.org][Isa Mert Gurbuz]]
    - Has a cool [[https://isamert.net/index.html][blog]] about org mode and other topics.
- [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Martin Foot]]
    - Has a very simple init file.
    - [[https://github.com/mfoo/dotfiles/blob/master/.emacs.d/config.org][.org file]]
- [[https://github.com/mpereira/.emacs.d][Murilo Pereira]].
    - Very well organized. The author has also written some excellent blog posts about Emacs.
- [[https://out-of-cheese-error.netlify.app/spacemacs-config][OutOfCheeseError]]
- [[https://protesilaos.com/dotemacs/][Protesilaos Stavrou]]
    - [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][here]] is the last commit before he abandoned ~use-package~ and ~straight~
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]. A legend in the Emacs community.
- [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit]].
    - Author of ~Memacs~, prolific blogger.
- [[https://github.com/sriramkswamy/dotemacs][Sriram Krishnaswamy]] ([[https://sriramkswamy.github.io/][website]])
    - [[https://sriramkswamy.github.io/dotemacs/][.org file]]
- [[https://github.com/sfromm/emacs.d#twitter][Stephen Fromm]]. Has an extended list of config files [[https://github.com/sfromm/emacs.d#inspiration][here]].
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]]
- [[https://www.tquelch.com/posts/emacs-config/#languages][Tim Quelch]]
- [[http://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html#orgbcdc8b2][Vianney Lebouteiller]]
- [[https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org#meta][Xuan Bi]].
- [[https://github.com/turbana/emacs-config][GitHub - turbana/emacs-config: My personal emac's configuration]]. Some potentially useful stuff on native comp, debugging, etc.
- [[https://github.com/creichert/dotfiles/blob/master/emacs/.emacs][dotfiles/.emacs at master · creichert/dotfiles · GitHub]]. Has detailed Gnus, Slack config.
- [[https://github.com/ianpan870102/yay-evil-emacs][yay-evil-emacs]]. slick design.
- [[https://github.com/rememberYou/.emacs.d][GitHub - rememberYou/.emacs.d: 🎉 Personal GNU Emacs configuration]]. Has a bunch of Reddit posts explaining how he uses the different packages.
- [[https://github.com/nkicg6/emacs-config/blob/master/config.org][emacs-config/config.org at master · nkicg6/emacs-config · GitHub]]. Found it while searching for org-ref.
- [[https://github.com/yiufung/dot-emacs/blob/master/init.el][dot-emacs/init.el at master · yiufung/dot-emacs · GitHub]]. Not literal. Lots of packages. Gnus, notmuch, Slack, etc. Author has great post on Anki.
- [[https://github.com/tshu-w/.emacs.d][GitHub - tshu-w/.emacs.d: My personal Emacs config, based on Spacemacs]]. Has nice note-taking config, with org-roam, org-ref, Zotero, etc (see [[https://github.com/tshu-w/.emacs.d/blob/master/lisp/lang-org.el][here]]).
- [[https://github.com/raxod502/radian/blob/e3aad124c8e0cc870ed09da8b3a4905d01e49769/emacs/radian.el][Radon Rosborough]]. Author of ~straight~ package manager.
- [[https://github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org][Gonçalo Santos]]. Author of ~org-noter~.
- [[https://github.com/tonyaldon/emacs.d/blob/master/init.el][Tony Aldon]]. Has some slick [[https://www.youtube.com/channel/UCQCrbWOFRmFYqoeou0Qv3Kg][videos]] on ~org-table~. Optimized key bindings.
- [[https://github.com/progfolio/.emacs.d/blob/master/init.org][Nicholas Vollmer]]. I copied his ~org-habits~ config. Haven't yet looked at the rest but looks like there's plenty of valuable material.
- [[https://github.com/yantar92/emacs-config/blob/master/config.org#helm-org-ql][emacs-config/config.org at master · yantar92/emacs-config · GitHub]]. Focus on knowledge management with org. Lots of good stuff.
- [[https://github.com/xenodium/dotsies/blob/main/dots.org][Álvaro Ramírez]]. Also users Karabiner.
- [[https://github.com/karthink/.emacs.d][Karthik Chikmagalur]]. Has excellent blog posts on ~avy~, ~eshell~, ~re-builder~, etc.
- [[https://github.com/iqbalansari/dotEmacs][Iqbal Ansari]].
- [[https://www.danielclemente.com/emacs/confi.html][Daniel Clemente]].
- [[https://github.com/patrl][Patrick Elliott]]
** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       F1026BA4-886F-4020-A4A4-0F9440F4DF2E
:END:
*** DONE Consider organizing file around Emacs/org manuals
CLOSED: [2021-04-12 Mon 18:11]
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-12 Mon 18:11
:ID:       263743E2-A29A-4B63-B629-B74F89526F7D
:END:
After reading a few chapters of the Emacs manual, I conclude that this is not practical.
*** DONE [#5] Fix erratic connectivity issue
CLOSED: [2022-06-08 Wed 20:12]
:PROPERTIES:
:Effort:   0:25
:ID:       58A8E67E-B85C-477C-BB1D-359973788329
:ARCHIVE_TIME: 2022-06-09 Thu 16:08
:END:
Run ~emacs --Q~ and load the relevant org package, see if it works well. If it does, it's probably something in my config. If it doesn't, it may be something in my internet connection.

[2021-07-29 Thu 12:52] Seems to be less bad lately.

[2022-06-08 Wed 20:12] Solved itself spontaneously.
*** CANCELLED [#5] Configure Fede's bash script for keeping multiple versions of Emacs config file
CLOSED: [2022-06-08 Wed 20:12]
:PROPERTIES:
:Effort:   1:00
:ID:       3604E54E-552A-459E-B5B3-F00E8F44DB0E
:ARCHIVE_TIME: 2022-06-09 Thu 16:09
:END:
* startup
:PROPERTIES:
:ID:       9DBC455B-7ED4-422F-BE05-2FBB3548A86F
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:56]--[2021-10-20 Wed 19:59] =>  0:03
CLOCK: [2021-07-24 Sat 10:45]--[2021-07-24 Sat 10:56] =>  0:11
CLOCK: [2021-07-23 Fri 15:26]--[2021-07-23 Fri 15:58] =>  0:32
CLOCK: [2021-07-13 Tue 18:29]--[2021-07-13 Tue 18:47] =>  0:18
CLOCK: [2021-07-11 Sun 21:41]--[2021-07-11 Sun 22:14] =>  0:33
CLOCK: [2021-12-03 Fri 21:49]--[2021-12-03 Fri 21:56] =>  0:07
CLOCK: [2021-06-15 Tue 20:45]--[2021-06-15 Tue 20:52] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-01 Tue 21:00]--[2021-06-01 Tue 21:59] =>  0:59
CLOCK: [2021-05-18 Tue 09:22]--[2021-05-18 Tue 09:32] =>  0:10
CLOCK: [2021-05-14 Fri 15:45]--[2021-05-14 Fri 16:01] =>  0:00
CLOCK: [2021-04-27 Tue 22:10]--[2021-04-27 Tue 22:26] =>  0:16
CLOCK: [2021-03-31 Wed 10:10]--[2021-03-31 Wed 11:08] =>  0:58
CLOCK: [2021-03-30 Tue 15:21]--[2021-03-30 Tue 18:00] =>  2:39
CLOCK: [2021-03-30 Tue 09:43]--[2021-03-30 Tue 11:46] =>  2:03
CLOCK: [2021-03-22 Mon 21:40]--[2021-03-22 Mon 21:49] =>  0:09
CLOCK: [2021-03-20 Sat 13:16]--[2021-03-20 Sat 13:30] =>  0:14
CLOCK: [2021-03-04 Thu 10:10]--[2021-03-04 Thu 10:37] =>  0:27
CLOCK: [2021-03-02 Tue 21:12]--[2021-03-02 Tue 21:50] =>  0:38
CLOCK: [2021-03-01 Mon 10:11]--[2021-03-01 Mon 10:28] =>  0:17
CLOCK: [2021-02-23 Tue 10:45]--[2021-02-23 Tue 10:54] =>  0:09
CLOCK: [2021-02-04 Thu 19:36]--[2021-02-04 Thu 20:54] =>  1:18
CLOCK: [2021-02-04 Thu 18:40]--[2021-02-04 Thu 19:33] =>  0:53
CLOCK: [2021-02-04 Thu 16:40]--[2021-02-04 Thu 18:35] =>  1:55
CLOCK: [2021-02-04 Thu 12:27]--[2021-02-04 Thu 12:44] =>  0:17
CLOCK: [2021-02-04 Thu 12:19]--[2021-02-04 Thu 12:27] =>  0:08
CLOCK: [2021-02-04 Thu 09:30]--[2021-02-04 Thu 10:49] =>  1:19
CLOCK: [2021-02-03 Wed 22:09]--[2021-02-03 Wed 22:46] =>  0:37
CLOCK: [2021-02-03 Wed 20:24]--[2021-02-03 Wed 20:33] =>  0:09
CLOCK: [2021-02-03 Wed 18:27]--[2021-02-03 Wed 20:00] =>  1:33
CLOCK: [2021-02-03 Wed 19:43]--[2021-02-03 Wed 19:43] =>  0:00
CLOCK: [2021-04-08 Thu 13:56]--[2021-04-08 Thu 14:12] =>  0:16
CLOCK: [2021-04-03 Sat 19:06]--[2021-04-03 Sat 19:31] =>  0:25
:END:

Adapted from [[https://github.com/sfromm/emacs.d#startup][here]]:

#Minimal config
#+begin_src emacs-lisp :results silent
;;; init.el --- Init File -*- lexical-binding: t -*-

(message "Loading up Emacs...")
(defvar ps/core-start-time (current-time))

(defun ps/report-startup-time ()
  "Report startup time."
  (interactive)
  (message "Emacs is ready, finished loading after %.03fs."
           (float-time (time-subtract after-init-time before-init-time))))

(add-hook 'emacs-startup-hook #'ps/report-startup-time)
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       EAC96AD7-DDF1-42DD-A9B4-B07EAE6AF6C6
:END:
*** DONE Fix byte compile errors
CLOSED: [2021-07-04 Sun 10:36]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-04 Sun 10:36
:ID:       6F76FA54-5EAD-484D-A90C-A7380FD30267
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 10:04]--[2021-07-04 Sun 10:36] =>  0:32
:END:
A few errors remained, but I wasn't able to fix them.
*** CANCELLED Tangle only blocks with certain property (essential blocks
CLOSED: [2021-07-29 Thu 12:52]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 12:52
:ID:       154DD18A-64C3-4CDF-A5B9-611E9DD2D7C0
:END:
:LOGBOOK:
CLOCK: [2021-07-28 Wed 17:28]--[2021-07-28 Wed 17:38] =>  0:10
:END:
Here is a possible way to implement this idea: https://www.reddit.com/r/orgmode/comments/ahh689/tangling_some_source_blocks_based_on_a/

But it seems that one needs to have the original code as plain text, which is a major drawback. I checked the config file of the author and he doesn't implement that approach, or any other, suggesting there may not be a reasonable way to do it.

** variables
:PROPERTIES:
:ID:       E5B435F8-1FE3-4F98-964E-D805FA3B26D2
:END:
:LOGBOOK:
CLOCK: [2022-08-29 Mon 14:42]--[2022-08-29 Mon 15:00] =>  0:18
:END:
#Minimal config
#+begin_src emacs-lisp :results silent
(defvar ps/computer-hostname-pablo "Pablos-MacBook-Pro.local")
(defvar ps/computer-hostname-leo "cartagos-MacBook-Pro.local")
(defvar ps/computer-hostname-fede "luminous-mbp.local")
  (condition-case nil
      (cond
       ;; Pablo
       ((equal (system-name) ps/computer-hostname-pablo)
        (load-file "~/Dropbox/dotfiles/emacs/variables.el"))
       ;; Leo
       ((equal (system-name) ps/computer-hostname-leo)
        (load-file "~/Dropbox/emacs/variables.el"))
       ;; Fede
       ((equal (system-name) ps/computer-hostname-fede)
        (load-file (expand-file-name "variables.el" user-emacs-directory)))
       (t
        (user-error "System not recognized")))
    (error (message "No `variables.el' file found. Your config file will not work correctly.")))
#+end_src

** macros
:PROPERTIES:
:ID:       E120C28B-458A-4F30-8C02-389B3351AFC4
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
;; From Gonçalo Santos (github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org#helpers)
(defmacro lambda! (&rest body)
  "A shortcut for inline interactive lambdas."
  (declare (doc-string 1))
  `(lambda () (interactive) ,@body))
#+end_src

* package management
:PROPERTIES:
:ID:       0A714FC1-D562-4E41-A000-D5F369EBEBBD
:END:

** straight
:PROPERTIES:
:ID:       A402D9BB-63D7-4A4C-839C-9AC21B245725
:END:
:LOGBOOK:
CLOCK: [2021-11-28 Sun 12:28]--[2021-11-28 Sun 13:30] =>  1:02
CLOCK: [2021-10-19 Tue 22:01]--[2021-10-19 Tue 23:20] =>  1:19
CLOCK: [2021-09-30 Thu 19:27]--[2021-09-30 Thu 20:19] =>  0:52
CLOCK: [2021-08-25 Wed 19:30]--[2021-08-25 Wed 19:36] =>  0:06
CLOCK: [2021-07-23 Fri 16:39]--[2021-07-23 Fri 17:28] =>  0:49
CLOCK: [2021-07-19 Mon 21:17]--[2021-07-19 Mon 21:24] =>  0:07
CLOCK: [2021-07-17 Sat 13:27]--[2021-07-17 Sat 15:20] =>  1:53
CLOCK: [2021-07-11 Sun 18:10]--[2021-07-11 Sun 18:19] =>  0:09
CLOCK: [2021-07-03 Sat 22:50]--[2021-07-03 Sat 23:19] =>  0:29
CLOCK: [2021-06-27 Sun 10:44]--[2021-06-27 Sun 10:49] =>  0:05
CLOCK: [2021-06-25 Fri 22:18]--[2021-06-25 Fri 22:30] =>  0:12
CLOCK: [2021-06-23 Wed 13:45]--[2021-06-23 Wed 14:03] =>  0:18
CLOCK: [2021-06-23 Wed 09:49]--[2021-06-23 Wed 09:57] =>  0:08
:END:

- Update individual packages with ~straight-pull-package~ and all packages with ~straight-pull-all~.
- Invoke ~straight-freeze-versions~

Process for updating packages:
1. straight-normalize-all
2. straight-pull-all
   verify that things are working
3. straight-freeze-versions

- If the update process throws an error for a specific package, try deleting the folders inside both ~build~ and ~repos~ and then reinstall the package. See [[https://github.com/hlissner/doom-emacs/issues/5588#issuecomment-935626725][here]] for discussion.
- If you encounter problems, first try ~M-x straight-pull-package straight~, ~M-x straight-rebuild-package straight~ and restart.

[2022-10-31 Mon 15:55] At some point, it should probably be replaced with [[https://github.com/progfolio/elpaca][elpaca]]. Discussion [[https://github.com/progfolio/elpaca][here]].

#Minimal config
#+begin_src emacs-lisp :results silent
(setq straight-repository-branch "develop") ; must precede bootstrap
;; Bootstrap `straight'
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq straight-default-vc 'git)
(setq straight-check-for-modifications '(find-at-startup watch-files find-when-checking)) ; github.com/raxod502/straight.el#my-init-time-got-slower
(setq straight-profiles `((nil . ,ps/file-straight-profile)))
(setq straight-use-package-by-default t)
(require 'straight-x) ; github.com/raxod502/straight.el#how-do-i-uninstall-a-package
#+end_src

#Minimal config
#+begin_src emacs-lisp :results silent
;; Early load Org from Git version instead of Emacs built-in version
(straight-use-package 'org)
(straight-use-package 'org-contrib)
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       07827A82-1E6C-4128-95BB-08009CACB247
:END:
**** DONE [#6] Try Straight
CLOSED: [2021-06-23 Wed 11:00]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-23 Wed 11:00
:ID:       46435ED1-9BFD-459D-A8AD-34A79D1036CD
:END:
:LOGBOOK:
CLOCK: [2021-06-22 Tue 20:52]--[2021-06-22 Tue 21:39] =>  0:47
CLOCK: [2021-06-22 Tue 19:51]--[2021-06-22 Tue 20:03] =>  0:12
CLOCK: [2021-06-22 Tue 19:01]--[2021-06-22 Tue 19:43] =>  0:42
CLOCK: [2021-06-05 Sat 19:41]--[2021-06-05 Sat 20:01] =>  0:20
:END:

**** DONE Import use-feature function
CLOSED: [2021-07-29 Thu 12:52]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 12:52
:ID:       DDD09D5C-2642-491A-A34C-00698E9EAEFC
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 13:04]--[2021-07-25 Sun 13:14] =>  0:10
:END:
** Use-package
:PROPERTIES:
:ID:       C53EA5F9-B256-480E-9BCB-7AD2D0D5DDC2
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 14:44]--[2022-05-06 Fri 15:06] =>  0:22
CLOCK: [2021-08-02 Mon 21:30]--[2021-08-02 Mon 21:32] =>  0:02
CLOCK: [2021-06-13 Sun 18:51]--[2021-06-13 Sun 18:53] =>  0:02
CLOCK: [2021-05-14 Fri 22:50]--[2021-05-15 Sat 00:20] =>  1:30
CLOCK: [2021-05-15 Sat 11:32]--[2021-05-15 Sat 11:50] =>  0:18
CLOCK: [2021-04-03 Sat 19:35]--[2021-04-03 Sat 20:18] =>  0:43
:END:
- If statistics is enabled (see below), use package can produce very useful reports. Invoke ~use-package-report~, then press ~S~ with point on the 'Time' column to sort the packages by time; pressing the key again reverses the sort order.
- [[https://jwiegley.github.io/use-package/keywords/][Keywords — use-package]]
- Useful Reddit thread: [[https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/][use-package Best Practices : emacs]]
- Note that you can expand the ~use-package~ macro and see what it will do by invoking ~pp-macroexpand-last-sexp~ with point at the end of the relevant sexp.
- To use ~use-package~ with /features/ rather than /packages/, you can check whether something is a feature with ~featurep~.
- Sometimes we want to defer the loading of a package, but not indefinitely. I find it useful to rely on a variety of conditional deferrals, depending on the needs of the particular case:
  - /time deferral/: we use ~:defer~ followed by a number, such that when Emacs has been idle for this number of seconds, the package will load.
  - /command deferral/: we use ~:general~ to bind a key sequence to a command belonging to the package we want to load. The package will load when the key sequence  is executed.
  - /hook deferral/: we use ~:hook~ to create a hook that calls a package function when some event occurs. Upon the occurrence of this event, typically the loading of a major mode, the package will load.
  - /package deferral/: we use ~:after~ to load the package after some other package which itself has been conditionally deferred (using one of the other methods above). Note that if  ~use-package-always-defer~ is set to ~t~, you need to add ~demand t~ to the declaration.

#Minimal config
#+begin_src emacs-lisp :results silent
(straight-use-package 'use-package)
(setq use-package-verbose t                ; setting back to nil (default) as it was producing too much output
      use-package-compute-statistics t       ; compute stats
      use-package-always-defer t             ; always defer loading
      use-package-always-ensure nil          ; essential for `straight'
      use-package-hook-name-suffix nil       ; use real name for hooks, i.e. do not omit the `-hook' bit
      use-package-minimum-reported-time 0.1) ; report if loading a package takes longer than 100 ms
;; github.com/raxod502/radian/blob/develop/emacs/radian.el
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled.
NAME and ARGS are as in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+end_src
*** use-package-ensure-system-package
:PROPERTIES:
:ID:       5C17424A-4950-4745-B7FD-F0CACEB48AFB
:END:
#Minimal config
#+begin_src emacs-lisp :results silent
(use-package use-package-ensure-system-package
  :demand t)
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       AD68DBF4-9E34-4E6E-BC03-8D2B72AD75B0
:END:
**** DONE Figure out how to load a package once another package loads
CLOSED: [2021-12-03 Fri 21:35]
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-01 Fri 14:19
:ID:       42F23B32-2520-4BE8-8BB4-E84633897D8D
:END:
:LOGBOOK:
CLOCK: [2021-12-03 Fri 11:57]--[2021-12-03 Fri 12:01] =>  0:04
:END:
e.g. ~org-msg-mode~ after ~mu4e~.

The answer seems to be to [[https://jwiegley.github.io/use-package/keywords/][use hooks]]:

#+begin_quote
Pay attention if you set use-package-always-defer to t, and also use the :after keyword, as you will need to specify how the declared package is to be loaded: e.g., by some :bind. If you’re not using one of tho mechanisms that registers autoloads, such as :bind or :hook, and your package manager does not provide autoloads, it’s possible that without adding :demand t to those declarations, your package will never be loaded.
#+end_quote
**** DONE [#4] Understand this
CLOSED: [2022-06-21 Tue 14:57]
:PROPERTIES:
:Effort:   0:15
:ARCHIVE_TIME: 2022-06-21 Tue 14:57
:ID:       76A14036-D4B4-4493-B195-36AEE5F7CD0A
:END:
https://github.com/jwiegley/use-package/issues/562
**** CANCELLED [#5] Optimize ~defer~ declarations
CLOSED: [2022-10-24 Mon 01:19]
:PROPERTIES:
:Effort:   1:30
:ID:       7804BD3C-A126-4576-8AFA-5AF864DB8398
:ARCHIVE_TIME: 2022-10-24 Mon 01:19
:END:
:LOGBOOK:
CLOCK: [2021-10-02 Sat 18:12]--[2021-10-02 Sat 18:32] =>  0:20
CLOCK: [2021-10-02 Sat 17:29]--[2021-10-02 Sat 18:08] =>  0:39
:END:

| package               | load time | time until used |
|-----------------------+-----------+-----------------|
| paradox               |      0.31 |                 |
| exec-path-from-shell  |      0.17 |                 |
| general               |      0.01 |                 |
| restart-emacs         |      0.03 |                 |
| bug-hunter            |      0.00 |                 |
| warnings              |      0.01 |                 |
| startup               |      0.00 |                 |
| midnight              |      0.01 |                 |
| emacs                 |      0.00 |                 |
| so-long               |      0.00 |                 |
| undo-tree             |      0.00 |                 |
| gcmh                  |      0.00 |                 |
| server                |      0.00 |                 |
| hydra                 |      0.00 |                 |
| writeroom-mode        |      0.01 |                 |
| modus-themes          |      0.14 |                 |
| doom-modeline         |      0.16 |                 |
| all-the-icons         |      0.00 |                 |
| all-the-icons-dired   |      0.03 |                 |
| gnuplot-mode          |      0.00 |                 |
| yasnippet             |      0.20 |                 |
| hippie-expand         |      0.01 |                 |
| yankpad               |      0.52 |                 |
| ya-org-capture        |      0.00 |                 |
| expand-region         |      0.04 |                 |
| multiple-cursors      |      0.07 |                 |
| crux                  |      0.21 |                 |
| back-button           |      1.56 |                 |
| goto-last-change      |      0.00 |                 |
| register              |      0.00 |                 |
| bookmark              |      0.02 |                 |
| files                 |      0.00 |                 |
| dired                 |      0.00 |                 |
| dired-subtree         |      0.01 |                 |
| minibuffer            |      0.00 |                 |
| uniquify-files        |      0.03 |                 |
| reveal-in-osx-finder  |      0.00 |                 |
| pandoc-mode           |      0.09 |                 |
| curl-to-elisp         |      0.75 |                 |
| remember              |      0.02 |                 |
| winum                 |      0.01 |                 |
| buffer-move           |      0.03 |                 |
| avy                   |      0.01 |                 |
| iy-go-to-char         |      0.01 |                 |
| ace-link              |      0.01 |                 |
| vc                    |      0.04 |                 |
| magit                 |      0.76 |                 |
| forge                 |      0.45 |                 |
| projectile            |      0.19 |                 |
| git-timemachine       |      0.04 |                 |
| isearch               |      0.00 |                 |
| isearch+              |      0.07 |                 |
| rg                    |      0.04 |                 |
| imenu                 |      0.00 |                 |
| pcre2el               |      0.05 |                 |
| counsel               |      0.18 |                 |
| company               |      0.02 |                 |
| help                  |      0.03 |                 |
| helpful               |      2.64 |                 |
| elisp-demos           |      0.00 |                 |
| which-key             |      0.01 |                 |
| kmacro                |      0.01 |                 |
| request               |      0.01 |                 |
| calc                  |      0.14 |                 |
| eshell                |      0.04 |                 |
| calendar              |      0.00 |                 |
| async                 |      0.00 |                 |
| ispell                |      0.05 |                 |
| flyspell              |      0.03 |                 |
| flyspell-correct      |      0.01 |                 |
| text-mode             |      0.00 |                 |
| atomic-chrome         |      0.05 |                 |
| dictionary            |      0.21 |                 |
| osx-dictionary        |      0.01 |                 |
| powerthesaurus        |      0.04 |                 |
| goldendict            |      0.01 |                 |
| google-translate      |      0.13 |                 |
| wikinforg             |      0.01 |                 |
| markdown-mode         |      0.00 |                 |
| edit-indirect         |      0.01 |                 |
| ledger-mode           |      0.08 |                 |
| pdf-tools             |      3.35 |                 |
| pdf-view-restore      |      0.01 |                 |
| parse-csv             |      0.00 |                 |
| org                   |      0.00 |                 |
| org-agenda            |      0.05 |                 |
| org-capture           |      0.00 |                 |
| org-clock             |      0.03 |                 |
| org-id                |      0.03 |                 |
| org-refile            |      0.00 |                 |
| org-keys              |      0.00 |                 |
| org-archive           |      0.03 |                 |
| org-crypt             |      0.03 |                 |
| org-habit             |      0.03 |                 |
| org-checklist         |      0.07 |                 |
| org-make-toc          |      0.01 |                 |
| org-msg               |      2.17 |                 |
| bibtex-completion     |      0.13 |                 |
| org-ref               |      0.40 |                 |
| org-roam              |      0.04 |                 |
| org-roam-bibtex       |      0.03 |                 |
| org-noter             |      0.01 |                 |
| org-ql                |      0.15 |                 |
| org-sidebar           |      0.01 |                 |
| org-mime              |      0.04 |                 |
| org-drill             |      0.02 |                 |
| anki-editor           |      0.01 |                 |
| org2blog              |      0.05 |                 |
| org-wild-notifier     |      0.29 |                 |
| org-journal           |      0.07 |                 |
| org-pomodoro          |      0.05 |                 |
| org-download          |      0.05 |                 |
| org-web-tools         |      0.08 |                 |
| org-autosort          |      0.01 |                 |
| ox-clip               |      0.01 |                 |
| ox-pandoc             |      0.22 |                 |
| org-gcal              |      0.05 |                 |
| orgmdb                |      0.01 |                 |
| prog-mode             |      0.00 |                 |
| elisp-mode            |      0.00 |                 |
| python                |      0.25 |                 |
| clojure-mode          |      0.10 |                 |
| bicycle               |      0.06 |                 |
| simple                |      0.00 |                 |
| smtpmail              |      0.11 |                 |
| sendmail              |      0.00 |                 |
| message               |      0.00 |                 |
| mu4e                  |      1.37 |                 |
| mu4e-org              |      0.00 |                 |
| htmlize               |      0.00 |                 |
| google-contacts       |      0.12 |                 |
| erc                   |      0.14 |                 |
| slack                 |      0.43 |                 |
| telega                |      0.54 |                 |
| browse-url            |      0.00 |                 |
| shr                   |      0.00 |                 |
| shr-tag-pre-highlight |      0.24 |                 |
| eww                   |      0.00 |                 |
| emacs-w3m             |      0.06 |                 |
| elfeed                |      1.02 |                 |
| elfeed-org            |      0.01 |                 |
| engine-mode           |      0.00 |                 |
| google-this           |      0.01 |                 |
| twittering-mode       |      0.04 |                 |
| vlc                   |      0.01 |                 |
| pass                  |      0.02 |                 |
| auth-source           |      0.00 |                 |
| auth-source-pass      |      0.00 |                 |
| alert                 |      0.00 |                 |
| unpackaged            |      0.23 |                 |
| cus-edit              |      0.00 |                 |
| ox                    |      0.00 |                 |
| package               |      0.00 |                 |
| smerge-mode           |      0.00 |                 |
| keycast               |      0.01 |                 |
| custom                |      0.00 |                 |
|                       |           |                 |

The idea is to defer the loading of each package in such a way as to minimize the expected time waiting for it to load. This can happen in one of two ways:

1. The package is invoked before it has been loaded.
2. The user resumes activity while the package is loading after an idle period.

Based on estimates of how frequently each package is used and on assumptions about the distribution of idle time, one can then select the optimal defer value.

[2022-10-24 Mon 01:18] I think this is overkill. Canceling.

** paradox
:PROPERTIES:
:ID:       2263DD83-80FF-4180-903B-33FEB83C8179
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:11]--[2021-06-03 Thu 14:16] =>  0:05
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package paradox
  ;; :defer 600
  :custom
  (paradox-column-width-package 27)
  (paradox-column-width-version 13)
  (paradox-execute-asynchronously t)
  (paradox-hide-wiki-packages t)
  (paradox-github-token
   (auth-source-pass-get 'secret "auth-sources/api.github.com"))
  :config
  ;; (paradox-enable)
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       7F880AA9-7A0F-432B-BA32-C9F003369637
:END:
**** DONE Fix github authentication issue
CLOSED: [2021-06-03 Thu 14:11]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-03 Thu 14:11
:ID:       90634D85-7FAC-42E5-BA24-8D8737D8562A
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 13:52]--[2021-06-03 Thu 14:11] =>  0:19
:END:

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       6CD78068-201A-4479-8DDD-D5D8B14862E0
:END:
*** CANCELLED [#6] Try dired-auto-readme
CLOSED: [2021-06-05 Sat 14:42]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-06-05 Sat 14:42
:ID:       A2FFE0A5-B75B-4917-A15A-1D9F142E877E
:END:
https://github.com/amno1/dired-auto-readme
I don't think I'm interested in this.

*** DONE [#6] Try move-text
CLOSED: [2021-06-30 Wed 19:32]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-06-30 Wed 19:32
:ID:       C38CDDE2-B174-452D-9292-8A61B8D94C48
:END:
:LOGBOOK:
CLOCK: [2021-06-30 Wed 19:32]--[2021-06-30 Wed 19:32] =>  0:00
CLOCK: [2021-04-15 Thu 12:49]--[2021-04-15 Thu 12:52] =>  0:03
:END:

"At some point I was tired of not everything available on Melpa and Elpa, so I've started using straight.el, which can pull directly from services like github and gitlab, and provides reproducible emacs configs across systems."
https://www.philnewton.net/blog/moving-text-in-emacs/

[2021-06-30 Wed 19:32] No need to install this. I can reproduce the functionality with transpose commands.

* foundational
:PROPERTIES:
:ID:       25915A25-30F2-4A58-86FD-E27438D269B6
:END:
** key bindings
:PROPERTIES:
:ID:       B24FFD2C-67E3-46D5-844B-8CF80AD28CE6
:END:
:LOGBOOK:
CLOCK: [2021-03-28 Sun 13:35]--[2021-03-28 Sun 14:31] =>  0:56
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(setq mac-option-modifier 'meta
      mac-control-modifier 'control
      mac-command-modifier 'hyper
      mac-function-modifier 'none
      mac-right-option-modifier 'none
      mac-right-control-modifier 'super
      mac-right-command-modifier 'alt)
#+end_src

[2021-02-07 Sun 12:42] Disabling a bunch of native control key bindings that I don't use. See if anything breaks, otherwise proceed to creating new bindings.

[2021-02-28 Sun 10:03] Everything works fine, /except/ that I should not disable ~C-i~ and ~C-m~, which cause ~TAB~ and ~RET~, respectively, to be disabled in certain contexts. See also the variable ~dotspacemacs-distinguish-gui-tab~.

#Minimal config
#+begin_src emacs-lisp :results silent
(global-unset-key (kbd "C-a"))
(global-unset-key (kbd "C-b"))
(global-unset-key (kbd "C-d"))
(global-unset-key (kbd "C-f"))
(global-unset-key (kbd "C-S-f"))
(global-unset-key (kbd "C-j"))
(global-unset-key (kbd "C-k"))
(global-unset-key (kbd "C-n"))
(global-unset-key (kbd "C-o"))
(global-unset-key (kbd "C-p"))
(global-unset-key (kbd "C-r"))
(global-unset-key (kbd "C-t"))
(global-unset-key (kbd "C-y"))
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-,"))
(global-unset-key (kbd "C-."))
(global-unset-key (kbd "s-a"))
(global-unset-key (kbd "s-b"))
(global-unset-key (kbd "s-c"))
(global-unset-key (kbd "s-d"))
(global-unset-key (kbd "s-e"))
(global-unset-key (kbd "s-f"))
(global-unset-key (kbd "s-g"))
(global-unset-key (kbd "s-h"))
(global-unset-key (kbd "s-i"))
(global-unset-key (kbd "s-j"))
(global-unset-key (kbd "s-k"))
(global-unset-key (kbd "s-l"))
(global-unset-key (kbd "s-m"))
(global-unset-key (kbd "s-n"))
(global-unset-key (kbd "s-o"))
(global-unset-key (kbd "s-p"))
(global-unset-key (kbd "s-q"))
(global-unset-key (kbd "s-r"))
(global-unset-key (kbd "s-s"))
(global-unset-key (kbd "s-t"))
(global-unset-key (kbd "s-u"))
(global-unset-key (kbd "s-v"))
(global-unset-key (kbd "s-w"))
(global-unset-key (kbd "s-x"))
(global-unset-key (kbd "s-y"))
(global-unset-key (kbd "s-z"))
(global-unset-key (kbd "s-SPC"))
(global-unset-key (kbd "M-a"))
(global-unset-key (kbd "M-b"))
(global-unset-key (kbd "M-c"))
(global-unset-key (kbd "M-d"))
(global-unset-key (kbd "M-e"))
(global-unset-key (kbd "M-f"))
(global-unset-key (kbd "M-h"))
(global-unset-key (kbd "M-i"))
(global-unset-key (kbd "M-j"))
(global-unset-key (kbd "M-l"))
(global-unset-key (kbd "M-m"))
(global-unset-key (kbd "M-n"))
(global-unset-key (kbd "M-p"))
(global-unset-key (kbd "M-q"))
(global-unset-key (kbd "M-r"))
(global-unset-key (kbd "M-t"))
(global-unset-key (kbd "M-u"))
(global-unset-key (kbd "M-v"))
(global-unset-key (kbd "M-w"))
(global-unset-key (kbd "M-y"))
(global-unset-key (kbd "M-z"))
(global-unset-key (kbd "M-,"))
(global-unset-key (kbd "M-."))
(global-unset-key (kbd "H-n"))
#+end_src

#Minimal config
#+begin_src emacs-lisp :results silent
(define-key esc-map (kbd "A-a") nil)
(define-key esc-map (kbd "A-b") nil)
(define-key esc-map (kbd "A-c") nil)
(define-key esc-map (kbd "A-d") nil)
(define-key esc-map (kbd "A-e") nil)
(define-key esc-map (kbd "A-f") nil)
(define-key esc-map (kbd "A-g") nil)
(define-key esc-map (kbd "A-h") nil)
(define-key esc-map (kbd "A-i") nil)
(define-key esc-map (kbd "A-j") nil)
(define-key esc-map (kbd "A-k") nil)
(define-key esc-map (kbd "A-l") nil)
(define-key esc-map (kbd "A-m") nil)
(define-key esc-map (kbd "A-n") nil)
(define-key esc-map (kbd "A-o") nil)
(define-key esc-map (kbd "A-p") nil)
(define-key esc-map (kbd "A-q") nil)
(define-key esc-map (kbd "A-r") nil)
(define-key esc-map (kbd "A-s") nil)
(define-key esc-map (kbd "A-t") nil)
(define-key esc-map (kbd "A-u") nil)
(define-key esc-map (kbd "A-v") nil)
(define-key esc-map (kbd "A-w") nil)
(define-key esc-map (kbd "A-x") nil)
(define-key esc-map (kbd "A-y") nil)
(define-key esc-map (kbd "A-z") nil)
(define-key esc-map (kbd "A-RET") nil)
(define-key esc-map (kbd "A-DEL") nil)
(define-key esc-map (kbd "A-SPC") nil)
(define-key esc-map (kbd "A-.") nil)
(define-key esc-map (kbd "A-,") nil)
(define-key esc-map (kbd "A-/") nil)
(define-key esc-map (kbd "A-(") nil)
(define-key esc-map (kbd "A-=") nil)
(define-key esc-map (kbd "A--") nil)
(define-key esc-map (kbd "A-'") nil)
(global-unset-key (kbd "s-q"))
(global-unset-key (kbd "s-j"))
#+end_src
** iso-transl
:PROPERTIES:
:ID:       0A62A6C8-D3D8-4960-A809-35B60A479D2B
:END:

#+begin_src emacs-lisp
(use-feature iso-transl
  :config
  (setq iso-transl-char-map nil) ; https://emacs.stackexchange.com/questions/17508/

(define-key key-translation-map (kbd "A-c") nil)
(define-key key-translation-map (kbd "A-o") nil)
(define-key key-translation-map (kbd "A-u") nil)
(define-key key-translation-map (kbd "A-m") nil)
(define-key key-translation-map (kbd "A-x") nil))
#+end_src

** no-littering
:PROPERTIES:
:ID:       21B40C49-BBD2-4E04-871B-BB578C92F71B
:END:
/[[https://github.com/emacscollective/no-littering][no-littering]] helps keep ~.emacs.d~ clean./

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package no-littering
  :demand t
  :custom
  ;; github.com/emacscollective/no-littering#auto-save-settings
  (auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** exec-path-from-shell
:PROPERTIES:
:ID:       31238246-249F-42E8-BE80-06DB327259FD
:END:
:LOGBOOK:
CLOCK: [2021-06-30 Wed 14:24]--[2021-06-30 Wed 15:25] =>  1:01
CLOCK: [2021-06-29 Tue 16:17]--[2021-06-29 Tue 17:44] =>  1:27
CLOCK: [2021-02-06 Sat 22:29]--[2021-02-06 Sat 22:52] =>  0:23
CLOCK: [2021-02-05 Fri 18:46]--[2021-02-05 Fri 19:00] =>  0:14
CLOCK: [2021-02-05 Fri 19:09]--[2021-02-05 Fri 19:14] =>  0:05
:END:
/[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] makes emacs use the $PATH set up by the user's shell./

[2021-06-29 Tue 17:33] For reasons I don't understand, if I run ~echo $EDITOR~ on eshell, it returns nothing (as if the value was null), but if I run ~pass edit somepassword~, it correctly edits the password with Emacs rather than the default editor vi. Also, invoking ~getenv~ correctly returns the value of ~EDITOR~.

[2022-10-05 Wed 16:37] Disabling since booting from the command line.

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package exec-path-from-shell
  :defer 5
  :config
  (dolist (var '("NVM_DIR"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))
#+end_src

*** TODO [#5] Figure out why env variables differ between shell and eshell
:PROPERTIES:
:ID:       E57974CA-1CC6-45B7-A1D3-359C1C025E92
:END:
e.g. ~nvm~ isn't recognized by eshell
*** resources
:PROPERTIES:
:ID:       23633754-5D4D-4473-8E61-B700551AC7C5
:END:
 [[https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html][Shell startup scripts — flowblok’s blog]]

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       ACC80B29-5AE3-4A50-AC87-7E17B5889E51
:END:
**** DONE Configure exec-path-from-shell
CLOSED: [2021-02-06 Sat 23:01]
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-06 Sat 23:19
:ID:       F95B959D-43E8-4238-B99C-EB5551EE21EA
:END:
https://github.com/purcell/exec-path-from-shell

I think the macro-expansion or markdown-mode errors are related to this.
https://www.reddit.com/r/emacs/comments/bxsvnc/help_installing_pandoc_markdownmode_pandocmode_osx/

[2021-02-06 Sat 23:00] Upon further inspection, I don't think they are related. I'm marking this as DONE sine I don't think there's anything else to do. I still don't understand how PATH works very well, but that's a separate thing.

** general
:PROPERTIES:
:ID:       70C622E0-FAC7-4AB1-841F-36437858218C
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 18:46]--[2021-07-25 Sun 18:56] =>  0:10
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package general
  :demand t
  :custom
  (general-describe-priority-keymaps '(local global org-mode-map))
  (general-describe-keybinding-sort-function #'general-sort-by-car)
  :bind
  ("C-A-b" . 'general-describe-keybindings))
#+end_src

** el-patch
:PROPERTIES:
:ID:       554FC4A9-4993-495F-A154-DBC01A11747D
:END:
:LOGBOOK:
CLOCK: [2021-10-05 Tue 12:20]--[2021-10-05 Tue 13:11] =>  0:51
CLOCK: [2021-10-04 Mon 18:59]--[2021-10-04 Mon 19:31] =>  0:32
:END:
/[[https://github.com/raxod502/el-patch][el-patch]] lets you customize the behavior of Emacs Lisp functions that do not provide enough variables and hooks to let you make them do what you want./

[2021-11-17 Wed 17:25] Moving to graveyard because I felt it was working erratically and I don't see significant benefits relative to using an advice that overrides the original function.

[2022-07-19 Tue 11:57] Trying it again.

#+begin_src emacs-lisp :results silent
(use-package el-patch
  :demand t)
#+end_src

** hydra
:PROPERTIES:
:ID:       00E7E217-E02E-489B-968D-E49431FD5ECC
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 11:19]--[2022-07-15 Fri 12:01] =>  0:42
CLOCK: [2021-07-23 Fri 12:19]--[2021-07-23 Fri 12:36] =>  0:17
CLOCK: [2021-06-25 Fri 21:36]--[2021-06-25 Fri 21:37] =>  0:01
CLOCK: [2021-03-30 Tue 08:50]--[2021-03-30 Tue 09:02] =>  0:12
:END:

#+begin_src emacs-lisp :results silent
(use-package hydra
  :general
  ("H-d" 'hydra-dired/body
   "H-l" 'hydra-org-notes/body
   "H-o" 'hydra-major-modes/body
   "M-t" 'hydra-straight/body
   "M-y" 'hydra-yasnippet/body)
  (org-mode-map
   "A-s-j" 'hydra-wiki/body
   "A-s-r" 'hydra-org-rating/body))
#+end_src

*** resources
:PROPERTIES:
:ID:       A6CE7CD9-B940-4221-9BE4-2BF0776D7637
:END:
https://oremacs.com/2015/02/04/pre-hydra-post/
https://sriramkswamy.github.io/dotemacs/#orgheadline141

*** TODO [#6] reorganize hydra notes/files
:PROPERTIES:
:Effort:   1:00
:ID:       106D3DAC-6F8B-4E80-9F7A-417FD2EE1447
:END:
*** TODO [#5] Create function to update hydra current book ID
:PROPERTIES:
:Effort:   1:00
:ID:       ED0F8043-95B5-41B5-BC1C-B0745DF41B64
:END:
*** major modes
:PROPERTIES:
:ID:       E6290A57-7035-4ADB-89F6-9CCADF2D74DB
:END:
:LOGBOOK:
CLOCK: [2021-04-22 Thu 22:08]--[2021-04-22 Thu 22:23] =>  0:15
CLOCK: [2021-04-22 Thu 17:57]--[2021-04-22 Thu 18:21] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-major-modes
  (:exit t
         :idle 0.5)
  "Major modes"
  ("a" (ps/switch-to-most-recent-buffer-in-mode 'org-agenda-mode) "Agenda")
  ("c" (ps/switch-to-most-recent-buffer-in-mode 'calendar-mode) "Calendar")
  ("d" (ps/switch-to-most-recent-buffer-in-mode 'dired-mode) "Dired")
  ("e" (ps/switch-to-most-recent-buffer-in-mode 'elfeed-search-mode) "Elfeed")
  ("f" (ps/switch-to-most-recent-buffer-in-mode 'fundamental-mode) "Fundamental")
  ("h" (ps/switch-to-most-recent-buffer-in-mode 'helpful-mode) "Helpful")
  ("i" (ps/switch-to-most-recent-buffer-in-mode 'Info-mode) "Info")
  ("j" (ps/switch-to-most-recent-buffer-in-mode 'ledger-mode) "Ledger")
  ("k" (ps/switch-to-most-recent-buffer-in-mode 'slack-message-buffer-mode) "Slack")
  ("l" (ps/switch-to-most-recent-buffer-in-mode 'emacs-lisp-mode) "Emacs Lisp")
  ("n" (ps/switch-to-most-recent-buffer-in-mode 'snippet-mode) "Snippet")
  ("o" (ps/switch-to-most-recent-buffer-in-mode 'org-mode) "Org")
  ("p" (ps/switch-to-most-recent-buffer-in-mode 'pdf-view-mode) "PDF")
  ("s" (ps/switch-to-most-recent-buffer-in-mode 'eshell-mode) "Eshell")
  ("z" (ps/switch-to-most-recent-buffer-in-mode 'special-mode) "Special")
  ("t" (ps/switch-to-most-recent-buffer-in-mode 'twittering-mode) "Twittering")
  ("w" (ps/switch-to-most-recent-buffer-in-mode 'eww-mode) "Eww")
  ("x" (ps/switch-to-most-recent-buffer-in-mode 'mhtml-mode) "XHTML+")
  ("y" (ps/switch-to-most-recent-buffer-in-mode 'python-mode) "Python"))
#+end_src

*** files
:PROPERTIES:
:ID:       39E06A29-2AEC-4EB4-A0D0-7E1A64832B18
:END:
:LOGBOOK:
CLOCK: [2022-10-01 Sat 18:06]--[2022-10-01 Sat 18:14] =>  0:08
CLOCK: [2021-07-13 Tue 18:20]--[2021-07-13 Tue 18:57] =>  0:37
CLOCK: [2021-03-31 Wed 11:21]--[2021-03-31 Wed 11:35] =>  0:14
CLOCK: [2021-03-07 Sun 11:06]--[2021-03-07 Sun 11:55] =>  0:49
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(general-define-key
 "H-M-s-." (lambda! (ps/visit-file-or-switch-to-buffer ps/file-inbox-mobile))
 "H-M-s-," (lambda! (ps/visit-file-or-switch-to-buffer ps/file-inbox-desktop))
 "H-M-s-a" (lambda! (ps/org-agenda-switch-to-agenda-current-day))
 "H-M-s-c" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-config))
 "H-M-s-d" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-tlon-docs))
 "H-M-s-h" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-tlon-ledger))
 "H-M-s-i" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-anki))
 "H-M-s-j" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-ledger))
 "H-M-s-k" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-karabiner))
 "H-M-s-m" 'view-echo-area-messages
 "H-M-s-o" (lambda! (switch-to-buffer "*notes*"))
 "H-M-s-q" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-quotes))
 "H-M-s-r" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-calendar))
 "H-M-s-s" (lambda! (switch-to-buffer "*scratch*"))
 "H-M-s-v" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-films))
 "H-M-s-w" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-work))
 "H-M-s-z" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-variables)))
#+end_src

*** Org headings
:PROPERTIES:
:ID:       FBC1D388-0EFA-452D-828D-44724CF99191
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:40]--[2021-04-03 Sat 10:41] =>  0:01
CLOCK: [2021-04-03 Sat 10:24]--[2021-04-03 Sat 10:33] =>  0:09
CLOCK: [2021-03-07 Sun 11:55]--[2021-03-07 Sun 12:13] =>  0:18
CLOCK: [2021-03-07 Sun 11:01]--[2021-03-07 Sun 11:06] =>  0:05
CLOCK: [2021-02-24 Wed 16:02]--[2021-02-24 Wed 16:26] =>  0:24
:END:

At some point I should create different org heading hydras for each of my main org buffers. The idea is that hydra would rely on context information—in this case, the current buffer—to determine which template to trigger. Thus, for each org buffer I could define the 30 or so most used headings and access them with a single keystroke upon launching hydra.

**** notes.org
:PROPERTIES:
:ID:       C3A44EA2-5523-45DD-8100-6228D80ECAC8
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:41]--[2021-04-03 Sat 11:20] =>  0:39
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes
  (:exit t
         :idle 0.5)
  "Org headings"
  ("SPC" (ps/org-id-goto "B67C920B-D855-4A27-A35C-1DAC56580DA7") "Anki habit")
  ("i" (ps/org-id-goto "50BAC203-6A4D-459B-A6F6-461E6908EDB1") "Anki")
  ("p" (ps/org-id-goto "0070312F-6233-4BED-98F4-A2BAAEE8DAFF") "audiobooks")
  ("b" (ps/org-id-goto "7A788F19-30F5-4504-B47F-CE693AF3EA7E") "books")
  ("u" (ps/org-id-goto "78577411-554E-4EEC-B669-C014A9581540") "Current book")
  ("r" (ps/org-id-goto "1C5DCC5A-DA18-4CBD-8E2E-205766A656D6") "Documentaries")
  ("z" (ps/org-id-goto "8F8E5495-A0D8-451A-B1F1-0A8706CBF6A0") "eablogs.net")
  ("e" (ps/org-id-goto "96BBA849-B4CF-41C0-ABA3-A5D901BCDB18") "Email")
  ("d" (ps/org-id-goto "D61B81B9-852F-4816-A316-B89FC8F302FC") "Feeds")
  ("v" (ps/org-id-goto "E821F19E-C619-4895-A084-54D0A2772BAE") "films")
  ("f" (ps/org-id-goto "EB812B59-BBFB-4E06-865A-ACF5A4DE5A5C") "finance")
  ("/" (ps/org-id-goto "D9D71BF0-6BD6-40A5-9896-E58C7D9556B7") "inbox")
  ("m" (ps/org-id-goto "E65E393D-8694-4E23-994E-BA59A8063FCF") "Keyboard Maestro")
  ("k" (ps/org-id-goto "6F0A4889-C303-4930-8512-757AAD310535") "Khan Academy")
  ("l" (ps/org-id-goto "C308562B-222E-47E2-9A5F-B31EDB29569A") "Leonardo")
  ("," (ps/org-id-goto "E1C1F691-8358-4DDF-AC71-F46B883411BB") "morning routine")
  ("." (ps/org-id-goto "ADAA1E78-2904-4EF4-938C-F599A5C90822") "night routine")
  ("c" (ps/org-id-goto "7CE82ABB-A23F-41F6-A29E-0B95553A8FEE") "podcasts")
  ("s" (ps/org-id-goto "3513061C-5868-4EBC-9F77-9814AB776011") "Slack")
  ("j" (ps/org-id-goto "356B7595-EC5B-4DF4-949C-A637537128E4") "sleep")
  ("y" (ps/org-id-goto "FBDB7FC0-7650-48A0-933D-AE9606C2B621") "Spotify")
  ("t" (ps/org-id-goto "B7DAD7F5-ADB2-4B10-929E-B2CE43E148A5") "tango collection")
  ("n" (ps/org-id-goto "9696939D-A8B7-4179-A5C8-FEBB017DC9EF") "Telegram")
  ("q" (ps/org-id-goto "14915C82-8FF3-460D-83B3-148BB2CA7B7E") "YouTube")
  ;; ("RET'" (ps/org-id-goto "") "")
  ;; ("TAB'" (ps/org-id-goto "") "")
  ;; ("='" (ps/org-id-goto "") "")
  ;; ("-'" (ps/org-id-goto "") "")
  ;; ("('" (ps/org-id-goto "") "")
  ("H-a" (ps/org-id-notes-with-clock "a"))
  ("H-b" (ps/org-id-notes-with-clock "b"))
  ("H-c" (ps/org-id-notes-with-clock "c"))
  ("H-d" (ps/org-id-notes-with-clock "d"))
  ("H-e" (ps/org-id-notes-with-clock "e"))
  ("H-f" (ps/org-id-notes-with-clock "f"))
  ("H-g" (ps/org-id-notes-with-clock "g"))
  ("H-h" (ps/org-id-notes-with-clock "h"))
  ("H-i" (ps/org-id-notes-with-clock "i"))
  ("H-j" (ps/org-id-notes-with-clock "j"))
  ("H-k" (ps/org-id-notes-with-clock "k"))
  ("H-l" (ps/org-id-notes-with-clock "l"))
  ("H-m" (ps/org-id-notes-with-clock "m"))
  ("H-n" (ps/org-id-notes-with-clock "n"))
  ("H-o" (ps/org-id-notes-with-clock "o"))
  ("H-p" (ps/org-id-notes-with-clock "p"))
  ("H-q" (ps/org-id-notes-with-clock "q"))
  ("H-r" (ps/org-id-notes-with-clock "r"))
  ("H-s" (ps/org-id-notes-with-clock "s"))
  ("H-t" (ps/org-id-notes-with-clock "t"))
  ("H-u" (ps/org-id-notes-with-clock "u"))
  ("H-v" (ps/org-id-notes-with-clock "v"))
  ("H-w" (ps/org-id-notes-with-clock "w"))
  ("H-x" (ps/org-id-notes-with-clock "x"))
  ("H-y" (ps/org-id-notes-with-clock "y"))
  ("H-z" (ps/org-id-notes-with-clock "z"))
  ("H-," (ps/org-id-notes-with-clock ","))
  ("H-." (ps/org-id-notes-with-clock "."))
  ("H-/" (ps/org-id-notes-with-clock "/"))
  ("H-=" (ps/org-id-notes-with-clock "="))
  ("H--" (ps/org-id-notes-with-clock "-"))
  ("H-(" (ps/org-id-notes-with-clock "("))
  ("H-'" (ps/org-id-notes-with-clock "'"))
  ("H-SPC" (ps/org-id-notes-with-clock "SPC"))
  ("H-RET" (ps/org-id-notes-with-clock "RET"))
  ("H-TAB" (ps/org-id-notes-with-clock "TAB"))
  )
#+end_src


This hydra just starts the clock after the corresponding line in the hydra above is run. I tried to do the same more compactly with a transient advice to the ~hydra-org-notes/body~ but it didn't work, I think because the clock needs to be started not immediately after that command but after the command invoked by it, e.g. ~hydra-org-notes/lambda-a-and-exit~.

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"

  )

  (defun ps/org-id-notes-with-clock (key)
  (funcall (intern (concat "hydra-org-notes/lambda-" key "-and-exit")))
  (org-clock-in))
#+end_src

***** clock only
:PROPERTIES:
:ID:       E549DF73-C724-4FE8-B5BB-F56147F919A1
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-only-clock
  (:exit t
         :idle 0.5)
  "Org headings"
  ("a" (ps/org-id-notes-only-clock "a"))
  ("b" (ps/org-id-notes-with-clock "b"))
  ("c" (ps/org-id-notes-only-clock "c"))
  ("d" (ps/org-id-notes-only-clock "d"))
  ("e" (ps/org-id-notes-only-clock "e"))
  ("f" (ps/org-id-notes-only-clock "f"))
  ("g" (ps/org-id-notes-only-clock "g"))
  ("h" (ps/org-id-notes-only-clock "h"))
  ("i" (ps/org-id-notes-only-clock "i"))
  ("j" (ps/org-id-notes-only-clock "j"))
  ("k" (ps/org-id-notes-only-clock "k"))
  ("l" (ps/org-id-notes-only-clock "l"))
  ("m" (ps/org-id-notes-only-clock "m"))
  ("n" (ps/org-id-notes-only-clock "n"))
  ("o" (ps/org-id-notes-only-clock "o"))
  ("p" (ps/org-id-notes-only-clock "p"))
  ("q" (ps/org-id-notes-only-clock "q"))
  ("r" (ps/org-id-notes-only-clock "r"))
  ("s" (ps/org-id-notes-only-clock "s"))
  ("t" (ps/org-id-notes-only-clock "t"))
  ("u" (ps/org-id-notes-only-clock "u"))
  ("v" (ps/org-id-notes-only-clock "v"))
  ("w" (ps/org-id-notes-only-clock "w"))
  ("x" (ps/org-id-notes-only-clock "x"))
  ("y" (ps/org-id-notes-only-clock "y"))
  ("z" (ps/org-id-notes-only-clock "z"))
  ("," (ps/org-id-notes-only-clock ","))
  ("." (ps/org-id-notes-only-clock "."))
  ("/" (ps/org-id-notes-only-clock "/"))
  ("=" (ps/org-id-notes-only-clock "="))
  ("-" (ps/org-id-notes-only-clock "-"))
  ("(" (ps/org-id-notes-only-clock "("))
  ("'" (ps/org-id-notes-only-clock "'"))
  ("SPC" (ps/org-id-notes-only-clock "SPC"))
  ("RET" (ps/org-id-notes-only-clock "RET"))
  ("TAB" (ps/org-id-notes-only-clock "TAB"))
  )
#+end_src
#+begin_src emacs-lisp :results silent
;; save-excursion wasn't restoring point, so using this custom
;; function, from stackoverflow.com/a/24283996/4479455
(defmacro ps/save-excursion (&rest forms)
  (let ((old-point (gensym "old-point"))
        (old-buff (gensym "old-buff")))
    `(let ((,old-point (point))
           (,old-buff (current-buffer)))
       (prog1
           (progn ,@forms)
         (unless (eq (current-buffer) ,old-buff)
           (switch-to-buffer ,old-buff))
         (goto-char ,old-point)))))
(defun ps/org-id-notes-only-clock (key)
  (ps/save-excursion
   (funcall (intern (concat "hydra-org-notes/lambda-" key "-and-exit")))
   (org-clock-in)
   ))
#+end_src

**** global-priorities-encyclopedia.org
:PROPERTIES:
:ID:       08E1895E-2E55-4CB0-BD9F-288505BB8B74
:END:
:LOGBOOK:
CLOCK: [2022-06-14 Tue 18:54]--[2022-06-14 Tue 18:58] =>  0:04
:END:

#+begin_src emacs-lisp :results silent
(defhydra global-priorities-encyclopedia
  (:exit t
         :idle 0.5)
  "Org headings: global-priorities-encyclopedia.org"
  ("a" (ps/org-id-goto "") "")
  ("b" (ps/org-id-goto "") "")
  ("c" (ps/org-id-goto "") "")
  ("d" (ps/org-id-goto "") "")
  ("e" (ps/org-id-goto "") "")
  ("f" (ps/org-id-goto "E7A7125B-F14B-44FD-AB23-59A3031F0FD9") "Fede")
  ("h" (ps/org-id-goto "") "")
  ("o" (ps/org-id-goto "") "")
  ("g" (ps/org-id-goto "") "")
  ("i" (ps/org-id-goto "") "")
  ("l" (ps/org-id-goto "A37A6AED-A64F-4845-94F1-9EE08F58DED2") "Leo")
  ("n" (ps/org-id-goto "") "")
  ("p" (ps/org-id-goto "") "")
  ("s" (ps/org-id-goto "") "")
  ("t" (ps/org-id-goto "") "")
  ("w" (ps/org-id-goto "") "")
  ("x" (ps/org-id-goto "") "")
  ("z" (ps/org-id-goto "") "")
  ("'" (ps/org-id-goto "") "")
  ("," (ps/org-id-goto "") "")
  ("." (ps/org-id-goto "") "")
  ("H-a" (ps/org-id-wiki-with-clock "a"))
  ("H-b" (ps/org-id-wiki-with-clock "b"))
  ("H-c" (ps/org-id-wiki-with-clock "c"))
  ("H-d" (ps/org-id-wiki-with-clock "d"))
  ("H-e" (ps/org-id-wiki-with-clock "e"))
  ("H-f" (ps/org-id-wiki-with-clock "f"))
  ("H-g" (ps/org-id-wiki-with-clock "g"))
  ("H-h" (ps/org-id-wiki-with-clock "h"))
  ("H-i" (ps/org-id-wiki-with-clock "i"))
  ("H-j" (ps/org-id-wiki-with-clock "j"))
  ("H-k" (ps/org-id-wiki-with-clock "k"))
  ("H-l" (ps/org-id-wiki-with-clock "l"))
  ("H-m" (ps/org-id-wiki-with-clock "m"))
  ("H-n" (ps/org-id-wiki-with-clock "n"))
  ("H-o" (ps/org-id-wiki-with-clock "o"))
  ("H-p" (ps/org-id-wiki-with-clock "p"))
  ("H-q" (ps/org-id-wiki-with-clock "q"))
  ("H-r" (ps/org-id-wiki-with-clock "r"))
  ("H-s" (ps/org-id-wiki-with-clock "s"))
  ("H-t" (ps/org-id-wiki-with-clock "t"))
  ("H-u" (ps/org-id-wiki-with-clock "u"))
  ("H-v" (ps/org-id-wiki-with-clock "v"))
  ("H-w" (ps/org-id-wiki-with-clock "w"))
  ("H-x" (ps/org-id-wiki-with-clock "x"))
  ("H-y" (ps/org-id-wiki-with-clock "y"))
  ("H-z" (ps/org-id-wiki-with-clock "z"))
  ("H-," (ps/org-id-wiki-with-clock ","))
  ("H-." (ps/org-id-wiki-with-clock "."))
  ("H-/" (ps/org-id-wiki-with-clock "/"))
  ("H-=" (ps/org-id-wiki-with-clock "="))
  ("H--" (ps/org-id-wiki-with-clock "-"))
  ("H-(" (ps/org-id-wiki-with-clock "("))
  ("H-'" (ps/org-id-wiki-with-clock "'"))
  ("H-SPC" (ps/org-id-wiki-with-clock "SPC"))
  ("H-RET" (ps/org-id-wiki-with-clock "RET"))
  ("H-TAB" (ps/org-id-wiki-with-clock "TAB"))
  )
#+end_src

**** work
:PROPERTIES:
:ID:       47C81DBE-9ACA-4AAA-9942-6FEC4A3483C6
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-work
  (:hint nil
  :idle 0.3
  :color blue)
  "Tlön dashboard"
  ;; ("a" (ps/org-id-goto "") "")
  ;; ("b" (ps/org-id-goto "") "")
  ;; ("c" (ps/org-id-goto "") "")
  ("r" (ps/org-id-goto "15A1803F-EAA7-4FB9-BA77-74154EB8CA5D") "RAE" :column "Main")
  ("b" (ps/org-id-goto "DFE45995-7935-4F19-80DA-FB9C11FE9E24") "BAE" :column "Main")
  ("m" (ps/org-id-goto "9066D77E-7F2B-4176-9533-243060F11276") "FM" :column "Main")
  ("d" (ps/org-id-goto "CE8A5497-1BF9-4340-9853-5ADA4605ECB5") "LBDLHD" :column "Main")
  ("u" (ps/org-id-goto "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC") "EAN" :column "Main")
  ("i" (ps/org-id-goto "6C7F53ED-B43E-401D-BEEA-DB38CAE367FD") "EAI" :column "Main")
  ("w" (ps/org-id-goto "72EE8B25-D847-49F5-B6D9-E3B67BEB071A") "PW" :column "Other")
  ("v" (ps/org-id-goto "7333FEC5-90A7-423D-9C45-2D5333593F87") "Samotsvety" :column "Other")
  ("x" (ps/org-id-goto "E13198C9-8F3F-46D8-B052-6F6ADF6B4D99") "Misc" :column "Other")
  ("a" (ps/org-id-goto "830A5DA5-AB9A-483A-B8AC-C5CCBD3A02FD") "EA Archive" :column "Someday")
  ("o" (ps/org-id-goto "830A5DA5-AB9A-483A-B8AC-C5CCBD3A02FD") "Open Access EA" :column "Someday")
  ("n" (ps/org-id-goto "177F4865-3B25-41C0-999B-B9B67DFAC110") "EA Nomad" :column "Someday")
  ("h" (ps/org-id-goto "1BBBA5F1-11FA-4C7B-8D08-5DC84233B8E2") "HEAR" :column "On hold")
  ("g" (ps/org-id-goto "DA0B3751-6B25-4F53-AE27-7B6CBC29B6C1") "GPE" :column "On hold")
  ("" (ps/org-id-goto "470C263E-40F8-4567-83BC-85DE6E5F8D5A") "RCGs" :column "Done")
  ("" (ps/org-id-goto "AE8F5AD4-B85A-4EE2-8A94-AA7B2AFF3E7F") "Regranting" :column "Done")
  ("e" (ps/org-id-goto "EA0B83B2-8A4A-417A-8318-56B4EDC75FF5") "email" :column "Comms")
  ("s" (ps/org-id-goto "A45FEDFB-1928-4571-97F3-03D20A78883C") "slack" :column "Comms")
  ("t" (ps/org-id-goto "DF643B0F-1956-44AB-90DD-749D849C285D") "telegram" :column "Comms")
  ("f" (ps/org-id-goto "AED9330C-1673-4669-A367-4B87614965F6") "fede" :column "People")
  ("F" (ps/tlon-meeting-with-fede) "fede: meeting" :column "People")
  ("l" (ps/org-id-goto "4EF48AB3-44B4-4791-BDFC-537F3B636FDA") "leo" :column "People")
  ("L" (ps/tlon-meeting-with-leo) "leo: meeting" :column "People")
  ;; ("i" (ps/org-id-goto "") "")
  ;; ("j" (ps/org-id-goto "") "")
  ;; ("k" (ps/org-id-goto "") "")
  ;; ("m" (ps/org-id-goto "") "")
  ;; ("q" (ps/org-id-goto "") "")
  ;; ("y" (ps/org-id-goto "") "")
  ;; ("z" (ps/org-id-goto "") "")
  ;; ("'" (ps/org-id-goto "") "")
  ;; ("," (ps/org-id-goto "") "")
  ;; ("." (ps/org-id-goto "") "")
  ("H-a" (ps/org-id-work-with-clock "a"))
  ("H-b" (ps/org-id-work-with-clock "b"))
  ("H-c" (ps/org-id-work-with-clock "c"))
  ("H-d" (ps/org-id-work-with-clock "d"))
  ("H-e" (ps/org-id-work-with-clock "e"))
  ("H-f" (ps/org-id-work-with-clock "f"))
  ("H-g" (ps/org-id-work-with-clock "g"))
  ("H-h" (ps/org-id-work-with-clock "h"))
  ("H-i" (ps/org-id-work-with-clock "i"))
  ("H-j" (ps/org-id-work-with-clock "j"))
  ("H-k" (ps/org-id-work-with-clock "k"))
  ("H-l" (ps/org-id-work-with-clock "l"))
  ("H-m" (ps/org-id-work-with-clock "m"))
  ("H-n" (ps/org-id-work-with-clock "n"))
  ("H-o" (ps/org-id-work-with-clock "o"))
  ("H-p" (ps/org-id-work-with-clock "p"))
  ("H-q" (ps/org-id-work-with-clock "q"))
  ("H-r" (ps/org-id-work-with-clock "r"))
  ("H-s" (ps/org-id-work-with-clock "s"))
  ("H-t" (ps/org-id-work-with-clock "t"))
  ("H-u" (ps/org-id-work-with-clock "u"))
  ("H-v" (ps/org-id-work-with-clock "v"))
  ("H-w" (ps/org-id-work-with-clock "w"))
  ("H-x" (ps/org-id-work-with-clock "x"))
  ("H-y" (ps/org-id-work-with-clock "y"))
  ("H-z" (ps/org-id-work-with-clock "z"))
  ("H-," (ps/org-id-work-with-clock ","))
  ("H-." (ps/org-id-work-with-clock "."))
  ("H-/" (ps/org-id-work-with-clock "/"))
  ("H-=" (ps/org-id-work-with-clock "="))
  ("H--" (ps/org-id-work-with-clock "-"))
  ("H-(" (ps/org-id-work-with-clock "("))
  ("H-'" (ps/org-id-work-with-clock "'"))
  ("H-SPC" (ps/org-id-work-with-clock "SPC"))
  ("H-RET" (ps/org-id-work-with-clock "RET"))
  ("H-TAB" (ps/org-id-work-with-clock "TAB"))
  )

(defhydra hydra-org-work-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"

  )

  (defun ps/org-id-work-with-clock (key)
  (funcall (intern (concat "hydra-org-work/lambda-" key "-and-exit")))
  (org-clock-in))
#+end_src

**** docs.org
:PROPERTIES:
:ID:       6E060E85-C1A8-4F01-B737-C050A00D9A4E
:END:
#+begin_src emacs-lisp :results silent
(defhydra hydra-org-tlon-docs
  (:exit 1)
  "Buffer-local commands"
  ("." (call-interactively #'ps/telega-docs-change-notify) "Notify of changes"))
#+end_src


**** config.org
:PROPERTIES:
:ID:       F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78
:END:
:LOGBOOK:
CLOCK: [2021-12-04 Sat 15:05]--[2021-12-04 Sat 15:07] =>  0:02
CLOCK: [2021-07-28 Wed 20:56]--[2021-07-28 Wed 21:07] =>  0:11
CLOCK: [2021-06-22 Tue 12:34]--[2021-06-22 Tue 12:54] =>  0:20
CLOCK: [2021-03-16 Tue 11:23]--[2021-03-16 Tue 11:26] =>  0:03
CLOCK: [2021-03-16 Tue 11:13]--[2021-03-16 Tue 11:19] =>  0:06
CLOCK: [2021-03-15 Mon 14:27]--[2021-03-15 Mon 14:51] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-config
  (:exit 1)
  "Org headings: config.org"
  ("c" (ps/org-id-goto "50FAD2F3-E501-408E-A9A2-8358FAA87C1C") "Calc")
  ("d" (ps/org-id-goto "617F5323-6518-4751-948B-3E8032D93130") "Dired")
  ("e" (ps/org-id-goto "FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5") "Elfeed")
  ("f" (ps/org-id-goto "B29F4586-2B8D-41FE-82DE-FEDCD863C74B") "Files & buffers")
  ("g" (ps/org-id-goto "AACAE0F4-0B25-475B-831B-3F1E91E6349D") "Graveyard")
  ("h" (hydra-org-config-hydra/body) "Hydra")
  ("i" (ps/org-id-goto "A7940400-DD17-4B0B-A9B2-565A207D680C") "Introduction")
  ("k" (ps/org-id-goto "4373E661-B19D-4E6C-B7DE-C2A26619A515") "Wiki")
  ("l" (ps/org-id-goto "DE6D2307-9EBD-4E0F-B873-003C9813CA27") "Display")
  ("m" (ps/org-id-goto "E83EC00B-0C94-44CD-9EC0-355992C99234") "Completion ")
  ("n" (ps/org-id-goto "179BB021-8B2A-4BF0-B3AA-43AF5A212D4B") "Text manipulation")
  ("o" (hydra-org-config-org/body) "Org")
  ("p" (ps/org-id-goto "7F0CBD06-FDB3-4889-91CE-D8A25D4F2613") "Help")
  ("s" (ps/org-id-goto "9FDBBF3E-724F-4402-9DDB-F9349F65AB0E") "Search")
  ("t" (ps/org-id-goto "1E8F4417-5D5F-4406-BB70-AA272F714EF2") "Text movement")
  ("u" (ps/org-id-goto "AA460F4A-4035-4C96-A3A1-078A43F7892D") "user-init")
  ("v" (ps/org-id-goto "10E891D3-9DF5-472A-8E3C-1DE30EE8C81F") "Variables")
  ("w" (ps/org-id-goto "7E9A81E0-CAEB-4029-AD2C-B2416439FCDA") "Windows & frames")
  ("y" (ps/org-id-goto "6405B8E7-6612-4D71-8C2C-A51F8808F4C6") "Yasnippets"))

(defhydra hydra-org-config-hydra
  (:exit 1)
  "Org headings: config.org > hydra"
  ("c" (ps/org-id-goto "F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78") "Hydra config")
  ("e" (ps/org-id-goto "CC88D9BE-6617-4D53-BCCF-02097C2A81E1") "Hydra wiki entries")
  ("f" (ps/org-id-goto "39E06A29-2AEC-4EB4-A0D0-7E1A64832B18") "Hydra files")
  ("h" (ps/org-id-goto "00E7E217-E02E-489B-968D-E49431FD5ECC") "Hydra main")
  ("n" (ps/org-id-goto "C3A44EA2-5523-45DD-8100-6228D80ECAC8") "Hydra notes")
  ("o" (ps/org-id-goto "E6290A57-7035-4ADB-89F6-9CCADF2D74DB") "Hydra mode buffers")
  ("r" (ps/org-id-goto "F6AA197E-73A7-4688-986F-4A1D583BBA99") "Hydra org ratings")
  ("s" (ps/org-id-goto "40207396-12B9-4374-9341-713E88772275") "Hydra Straight")
  ("w" (ps/org-id-goto "B7B8956F-08D9-49E0-873C-4513F6FD44B8") "Hydra wiki notes")
  ("y" (ps/org-id-goto "5CC3B9AA-629B-407A-899D-529E66A7D057") "Hydra yasnippets"))

(defhydra hydra-org-config-org
  (:exit 1)
  "Org headings: config.org > org"
  ("a" (ps/org-id-goto "E03F4142-C90D-4550-8990-15391E27AD77") "org-agenda")
  ("b" (ps/org-id-goto "52C959E4-54F4-4499-AE3A-5251F6337FA0") "org key bindings")
  ("c" (ps/org-id-goto "14F93A83-0BE7-42E3-891E-F6806192296B") "org-capture")
  ("m" (ps/org-id-goto "2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17") "org-roam")
  ("n" (ps/org-id-goto "A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7") "org-noter")
  ("o" (ps/org-id-goto "268B60E4-708C-4372-A59D-5DD876E493CA") "org-mode")
  ("f" (ps/org-id-goto "35FB5BB5-6552-48C6-983A-F90011CCA908") "org-ref")
  ("r" (ps/org-id-goto "3FAE7C0D-FB22-4175-A0A4-FFA392539743") "org-refile")
  ("t" (ps/org-id-goto "8AF25840-AC38-4FF7-A45F-F01B96C5DF5A") "org-cite")
  ("x" (ps/org-id-goto "EC73B84D-530E-4179-BB67-F19110A543DF") "org-roam-bibtex"))
#+end_src
**** wiki-entries.org
:PROPERTIES:
:ID:       CC88D9BE-6617-4D53-BCCF-02097C2A81E1
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-wiki-entries
  (:exit t
         :idle 0.5)
  "wiki-entries.org headings"
  ("a" (ps/org-id-goto "AF906098-7A60-47D3-8C11-EBE97673E563" '(4)) "a")
  ("b" (ps/org-id-goto "F0F8744C-0729-46C3-9279-23EA29FBDC3E" '(4)) "b")
  ("c" (ps/org-id-goto "BD1484F6-57C0-4C15-A1CC-2B30C0F7271E" '(4)) "c")
  ("d" (ps/org-id-goto "9145DB82-8FEF-49BC-B7FD-5E9434AD3C09" '(4)) "d")
  ("e" (ps/org-id-goto "2E3D31FC-4796-4A3F-BDFF-F5D9653BCC24" '(4)) "e")
  ("f" (ps/org-id-goto "159BCED3-190D-403F-91C3-7D47F27CF4D1" '(4)) "f")
  ("g" (ps/org-id-goto "FDAB4C29-438E-40ED-B0A4-EB0DBBAD2913" '(4)) "g")
  ("h" (ps/org-id-goto "FF8D2857-67F5-4358-9F5A-421CA090E00D" '(4)) "h")
  ("i" (ps/org-id-goto "AB86A62C-B441-49BE-AA22-C603824AC4B4" '(4)) "i")
  ("j" (ps/org-id-goto "8231CB28-1B57-4663-8F3D-85B1CCD0F094" '(4)) "j")
  ("k" (ps/org-id-goto "8985B007-38AE-4520-9159-7326C64ED904" '(4)) "k")
  ("l" (ps/org-id-goto "A4591114-1168-4175-A52D-759497CD451D" '(4)) "l")
  ("m" (ps/org-id-goto "605014A2-FDFC-421B-9E8C-9ED6D315C091" '(4)) "m")
  ("n" (ps/org-id-goto "7720956E-2126-4869-9573-4669569C4BD0" '(4)) "n")
  ("o" (ps/org-id-goto "D908650E-91A0-4E45-9487-7EAEBE501F99" '(4)) "o")
  ("p" (ps/org-id-goto "F896D5A7-17B5-4044-9102-D8E59CD51975" '(4)) "p")
  ("q" (ps/org-id-goto "CDF9C8C4-6DE6-4898-A816-38119C1CBCDD" '(4)) "q")
  ("r" (ps/org-id-goto "D0BFC28D-2F56-4667-BFF4-E1E047E959DB" '(4)) "r")
  ("s" (ps/org-id-goto "E8841345-829B-4338-8355-4E6FF4F203E6" '(4)) "s")
  ("t" (ps/org-id-goto "961A1084-E300-49CB-AEBC-627DB628344D" '(4)) "t")
  ("u" (ps/org-id-goto "961A1084-E300-49CB-AEBC-627DB628344D" '(4)) "u")
  ("v" (ps/org-id-goto "0562CCC1-3CC2-4C43-8BEA-61BD5BBA3266" '(4)) "v")
  ("w" (ps/org-id-goto "9C1E1C22-5878-44AC-8A26-918915DA9AF9" '(4)) "w")
  ("x" (ps/org-id-goto "4AD979AA-FBEF-4640-A9B7-10186EE8BB21" '(4)) "x")
  ("y" (ps/org-id-goto "7AC51E00-0EC6-42B9-BBBC-AF9AFA466855" '(4)) "y")
  ("z" (ps/org-id-goto "8E6F4F80-1FCF-4228-B300-5BDC00F27982" '(4)) "z"))
#+end_src

*** dired
:PROPERTIES:
:ID:       D71128ED-F3CC-43E1-8C8F-8938BDE9DE16
:END:
#+begin_src emacs-lisp :results silent
(defhydra hydra-dired
  (:exit t)
  "Dired folders"
  ("a" (hydra-dired-google-drive/body) "apps")
  ("b" (dired ps/dir-bibliography) "bibliography")
  ("d" (dired ps/dir-dotfiles) "dotfiles")
  ("e" (dired ps/dir-emacs) "Emacs")
  ("i" (dired ps/dir-anki) "Anki")
  ("j" (dired ps/dir-health) "Health")
  ("k" (dired ps/dir-PW) "PW")
  ("m" (hydra-dired-music/body) "Music")
  ("n" (dired ps/dir-notes) "Notes")
  ("o" (dired ps/dir-google-drive) "Google Drive")
  ("p" (dired ps/dir-people) "people")
  ;; ("q" (dired ps/dir-youtube))
  ("t" (hydra-dired-tlon/body) "Tlön")
  ("H-t" (hydra-dired-tlon/body) "Tlön")
  ("U" (dired ps/dir-audiobooks) "Audiobooks")
  ("v" (dired ps/dir-movies) "movies")
  ("w" (dired ps/dir-downloads) "downloads")
  ("x" (dired ps/dir-dropbox) "Dropbox")
  ("y" (dired ps/dir-library-pdf) "Library: PDF")
  ("z" (dired ps/dir-library-html) "Library: HTML")
  ;; ("'" (dired ps/dir-) "")
  ;; ("-" (dired ) "")
  ("." (dired-at-point) "File at point")
  ("/" (dired "/") "Root")
  ("SPC" (dired "~/") "user")
  (";" (dired-jump) "Current buffer")
  ("H-;" (dired-jump-other-window) "Current buffer in other window"))

(defhydra hydra-dired-tlon
  (:exit t)
  "Dired folders: Tlön"
  ("b" (dired ps/dir-dropbox-tlon-LBDLH) "Dropbox: LBDLH")
  ("H-b" (dired ps/dir-dropbox-tlon-LBDLH) "Google Drive: LBDLH")
  ("c" (dired ps/dir-dropbox-tlon-core) "core")
  ("H-c" (dired ps/dir-google-drive-tlon-core) "Google Drive: core")
  ("f" (dired ps/dir-dropbox-tlon-fede) "fede")
  ("H-f" (dired ps/dir-google-drive-tlon-fede) "Google Drive: fede")
  ("g" (dired ps/dir-dropbox-tlon-GPE) "Dropbox: GPE")
  ("H-g" (dired ps/dir-google-drive-tlon-GPE) "Google Drive: GPE")
  ("h" (dired ps/dir-dropbox-tlon-HEAR) "Dropbox: HEAR")
  ("H-h" (dired ps/dir-google-drive-tlon-HEAR) "Google Drive: HEAR")
  ("l" (dired ps/dir-dropbox-tlon-leo) "Dropbox: leo")
  ("H-l" (dired ps/dir-google-drive-tlon-leo) "Google Drive: leo")
  ("r" (dired ps/dir-dropbox-tlon-RAE) "Dropbox: RAE")
  ("H-r" (dired ps/dir-google-drive-tlon-RAE) "Google Drive: RAE")
  ("s" (dired ps/dir-dropbox-tlon-FM) "Dropbox: FM")
  ("H-s" (dired ps/dir-google-drive-tlon-FM) "Google Drive: FM")
  ("t" (dired ps/dir-dropbox-tlon) "Dropbox: tlon")
  ("H-t" (dired ps/dir-google-drive-tlon) "Google Drive: tlon")
  ("u" (dired ps/dir-dropbox-tlon-EAN) "Dropbox: EAN")
  ("H-u" (dired ps/dir-google-drive-tlon-EAN) "Google Drive: EAN"))

(defhydra hydra-dired-google-drive
  (:exit t)
  "Dired folders: apps"
  ;; TODO: parametrize
  ("i" (dired "~/Google Drive/Apps/Anki") "Anki")
  ("c" (dired "~/Google Drive/Apps/Emacs") "Emacs")
  ("m" (dired "~/Google Drive/Apps/Keyboard Maestro") "Keyboard Maestro")
  ("'" (hydra-dired/body) "back"))
(defhydra hydra-dired-music
  (:exit t)
  "Dired folders: music"
  ("c" (dired ps/dir-music-classical) "classical")
  ("p" (dired ps/dir-music-popular) "popular")
  ("t" (dired ps/dir-music-tango) "tango")
  ("s" (dired ps/dir-music-to-sort) "to sort")
  ("'" (hydra-dired/body) "back"))
#+end_src

*** org ratings
:PROPERTIES:
:ID:       F6AA197E-73A7-4688-986F-4A1D583BBA99
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-rating
  (:exit t
         :idle 0.5)
  "Org ratings"
  ("1" (org-set-property "RATING" "1") "1")
  ("2" (org-set-property "RATING" "2") "2")
  ("3" (org-set-property "RATING" "3") "3")
  ("4" (org-set-property "RATING" "4") "4")
  ("5" (org-set-property "RATING" "5") "5")
  ("6" (org-set-property "RATING" "6") "6")
  ("7" (org-set-property "RATING" "7") "7")
  ("8" (org-set-property "RATING" "8") "8")
  ("9" (org-set-property "RATING" "9") "9")
  ("0" (org-set-property "RATING" "10") "10"))
#+end_src

*** straight
:PROPERTIES:
:ID:       40207396-12B9-4374-9341-713E88772275
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-straight (:hint nil)
  "
_c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
_C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
_r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
_R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))
#+end_src

*** Wiki editing
:PROPERTIES:
:ID:       57C5B95B-4ADE-463E-A3B6-18CF0FF64B32
:END:
:LOGBOOK:
CLOCK: [2021-11-24 Wed 11:11]--[2021-11-24 Wed 11:17] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-wiki
  (:exit t
         :idle 0.3)
  "Wiki sections"
  ("a" (ps/yasnippet-expand-by-key "wber") "bibliography, external links, related entries (all)")
  ("b" (ps/yasnippet-expand-by-key "wbib") "bibliography")
  ("c" (ps/yasnippet-expand-by-key "wnec") "new entry checklist")
  ("e" (ps/yasnippet-expand-by-key "wel") "external links")
  ("l" (ps/yasnippet-expand-by-key "wil") "internal link")
  ("w" (ps/yasnippet-expand-by-key "wow") "official website")
  ("o" (ps/yasnippet-expand-by-key "woe") "online entry")
  ("p" (ps/yasnippet-expand-by-key "wpe") "published entry")
  ("r" (ps/yasnippet-expand-by-key "wre") "related entries")
  ("u" (ps/org-append-unpublished-heading) "unpublished"))
#+end_src

This function is used by some of the above snippets.

#+begin_src emacs-lisp :results silent
(defun ps/capitalize-first-char (&optional string)
  "Capitalize only the first character of STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))

(defun ps/replace-spaces-with-underscores (&optional string)
  "Replace spaces in string with underscores in STRING."
  (when (and string (> (length string) 0))
    (replace-regexp-in-string "[ ,]" "_" string)))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       D784F4A4-3CF1-48B6-96B4-CFE9075F1F3D
:END:
**** DONE [#5] Figure out how to create buffer-local hydras
CLOSED: [2021-05-11 Tue 15:13]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-05-11 Tue 15:13
:ID:       257E1D93-8373-45CA-A315-3766BBC41823
:END:
:LOGBOOK:
CLOCK: [2021-05-11 Tue 14:20]--[2021-05-11 Tue 15:12] =>  0:52
CLOCK: [2021-05-11 Tue 13:07]--[2021-05-11 Tue 13:28] =>  0:21
:END:

Done. See [[https://stackoverflow.com/a/21493693/4479455][here]].


** transient
:PROPERTIES:
:ID:       246036BE-CBDF-4ABA-8297-11952B57B551
:END:
To be explored. The [[https://github.com/positron-solutions/transient-showcase][transient-showcase]] repo is useful.

** elisp-bug-hunter
:PROPERTIES:
:ID:       0C19171B-8DFA-4E06-9E17-45C1F9158C28
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package bug-hunter
  :general
  ("<f5>" 'bug-hunter-init-file))
#+end_src

** warnings
:PROPERTIES:
:ID:       C8FB5BC6-6895-4D63-86A8-E49D6BB3001C
:END:

#+begin_src emacs-lisp :results silent
(use-feature warnings
  :demand t
  :config
  (dolist (element '((comp)
                     (yasnippet backquote-change)))
    (add-to-list 'warning-suppress-types element)))
#+end_src

** comp
:PROPERTIES:
:ID:       191AB5FC-F979-4B71-84A0-D8FC108CEBD3
:END:
#+begin_src emacs-lisp :results silent
(use-feature comp
  :defer 60
  :custom
  (native-comp-async-report-warnings-errors nil))
#+End_src

** bytecomp
:PROPERTIES:
:ID:       630FB32E-8D10-47C5-98EB-B436C6CF97D9
:END:
#+begin_src emacs-lisp :results silent
(use-feature bytecomp
  :demand t
  :custom
  (byte-compile-warnings '(cl-functions)))
#+end_src

** startup
:PROPERTIES:
:ID:       853A9EBB-356D-428E-AC94-F14BBDA78FB4
:END:

#+begin_src emacs-lisp :results silent
(use-feature startup
  :custom
  (user-full-name ps/personal-name)
  (user-mail-address ps/personal-gmail)
  (inhibit-startup-screen t)
  (initial-scratch-message nil)
  (initial-buffer-choice 'remember-notes)
  (initial-major-mode 'emacs-lisp-mode))
#+end_src

** emacsclient
:PROPERTIES:
:ID:       CF9CC5EC-5562-47AC-9460-FCE684BDB028
:END:
:LOGBOOK:
CLOCK: [2021-03-20 Sat 12:17]--[2021-03-20 Sat 12:50] =>  0:33
CLOCK: [2021-03-20 Sat 10:38]--[2021-03-20 Sat 12:00] =>  1:22
:END:

If you try to open a file externally on Emacs, a new Emacs instance will be launched. Given Emacs's notorious startup times, this can be quite annoying. Fortunately, there exists an app, [[https://www.emacswiki.org/emacs/EmacsClient][emacsclient]], that lets you open new files near-instantaneously in an already running Emacs. For this to work, Emacs must be started as a server.

[[https://medium.com/@bobbypriambodo/blazingly-fast-spacemacs-with-persistent-server-92260f2118b7][This article]] has a number of suggestions, some of which I adopted. I addition, I used [[https://support.apple.com/en-gb/guide/automator/welcome/mac][Automator]] to create an app that runs a shell script that lets me open files from Finder. Launch Automator, then select 'Run Shell Script' as the action, then ~/bin/szh~ in the Shell menu and ~as arguments~ in the 'Pass input' menu, and paste the following:

#+begin_src shell :results silent :tangle no
/usr/local/bin/emacsclient -c "$@" >/tmp/out.log 2>&1 &
#+end_src

Save the file as 'emacsclient' and put it in the ~Applications~ folder. Then to always open a file with a particular extension (e.g. ~.py~) on Emacs, right-click the file, select Open with > Other, 'Enable' in the menu, tick 'Always open with', and select 'emacsclient'. Repeat for each desired file extension.

** server
:PROPERTIES:
:ID:       8514378A-0BA2-4A8E-971F-10C07ED4D38A
:END:

#+begin_src emacs-lisp :results silent
(use-package server
  :demand t
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** async
:PROPERTIES:
:ID:       B37674EC-9F35-4425-A587-F8D1944894EA
:END:

#+begin_src emacs-lisp :results silent
(use-package async
  :commands dired-async-mode)
#+end_src

** misc.
:PROPERTIES:
:ID:       72D2BA33-0E12-4893-B790-B132CE2F9404
:END:
:LOGBOOK:
CLOCK: [2021-12-13 Mon 13:04]--[2021-12-13 Mon 13:15] =>  0:11
CLOCK: [2021-07-25 Sun 11:48]--[2021-07-25 Sun 12:47] =>  0:59
CLOCK: [2021-07-18 Sun 20:32]--[2021-07-18 Sun 20:42] =>  0:10
CLOCK: [2021-05-05 Wed 21:05]--[2021-05-05 Wed 21:55] =>  0:50
CLOCK: [2021-02-11 Thu 08:51]--[2021-02-11 Thu 09:35] =>  0:44
CLOCK: [2021-04-05 Mon 15:49]--[2021-04-05 Mon 15:56] =>  0:07
CLOCK: [2021-02-07 Sun 12:07]--[2021-02-07 Sun 12:15] =>  0:08
CLOCK: [2021-04-08 Thu 07:27]--[2021-04-08 Thu 08:13] =>  0:46
CLOCK: [2021-04-06 Tue 19:57]--[2021-04-06 Tue 20:03] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(setq use-dialog-box nil)
(setq default-directory ps/dir-dropbox)
(setq use-short-answers t)
(setq message-log-max 10000)
(setq ring-bell-function 'ignore) ; silence bell when mistake is made
(setq x-stretch-cursor t) ; make curor the width of the character under it
;; emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
;; UTF8 stuff.
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

* display
:PROPERTIES:
:ID:       DE6D2307-9EBD-4E0F-B873-003C9813CA27
:END:
:LOGBOOK:
CLOCK: [2022-07-05 Tue 10:10]--[2022-07-05 Tue 10:17] =>  0:07
CLOCK: [2021-05-25 Tue 18:26]--[2021-05-25 Tue 18:31] =>  0:05
CLOCK: [2021-05-04 Tue 19:02]--[2021-05-04 Tue 19:09] =>  0:07
CLOCK: [2021-04-03 Sat 16:26]--[2021-04-03 Sat 17:04] =>  0:38
CLOCK: [2021-03-28 Sun 19:21]--[2021-03-28 Sun 19:35] =>  0:14
:END:

#+begin_src emacs-lisp :results silent
(setq-default line-spacing 2)
(tool-bar-mode -1)
(add-to-list 'default-frame-alist '(fullscreen . maximized)) ; start Emacs maximized
#+end_src

** mixed-pitch
:PROPERTIES:
:ID:       A8E80A11-25A4-4034-8A86-F7F6ADFD46C7
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 19:52]--[2022-05-04 Wed 19:54] =>  0:02
CLOCK: [2021-11-18 Thu 21:52]--[2021-11-18 Thu 22:20] =>  0:28
:END:
/[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows for mixing fixed-pitch and variable-pitch fonts./

#+begin_src emacs-lisp :results silent
(use-package mixed-pitch
  :demand t
  :custom
  (mixed-pitch-set-height t)

  :config
  (set-face-attribute 'variable-pitch nil :family ps/face-variable-pitch :height 1.4)

  :hook
  (mu4e-view-mode-hook . mixed-pitch-mode)
  (org-mode-hook . mixed-pitch-mode)
  (outline-mode-hook . mixed-pitch-mode))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       0B98C77D-3921-4666-9881-FC15097B9F0C
:END:
**** DONE Fix indentantion in nested lists
CLOSED: [2022-05-06 Fri 16:59]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-06 Fri 16:59
:ID:       4452E6C4-A2F1-4D9E-AF20-CF3D9B579E22
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 15:06]--[2022-05-06 Fri 16:00] =>  0:54
:END:
I don't think this is possible. See [[https://gitlab.com/jabranham/mixed-pitch/-/issues/4][here]]. At best, one could make org lists use fixed pitch font. But the user-contributed snippet doesn't work for me. In any case, the costs of displaying all plain lists in fixed pitch font seem higher than the costs of misaligned indentation (since many lists have items none of which span more than one line).

** fontaine
:PROPERTIES:
:ID:       B375DC03-A71F-4F87-8B03-59437D9CA857
:END:
/[[https://protesilaos.com/emacs/fontaine][fontaine]] lets the user specify presets of font configurations and set them on demand on graphical Emacs frames./

I haven't yet explored this package.

#+begin_src emacs-lisp :tangle no
(use-package fontaine
  :demand t
  :config
  (fontaine-mode))
#+end_src

** face-remap
:PROPERTIES:
:ID:       3F96E2F2-7C68-4D61-8CB8-EFE4C7220FC8
:END:
#+begin_src emacs-lisp :results silent
(use-feature face-remap
  :demand t
  :general
  (eww-mode-map
   "+" 'text-scale-increase
   "-" 'text-scale-decrease))
#+end_src

** fringe
:PROPERTIES:
:ID:       A0748A82-CE1C-4700-95E1-610B6CA7F8E0
:END:

#+begin_src emacs-lisp :results silent
(use-feature fringe
:init
(setq-default fringe-indicator-alist '(
  (truncation nil nil)
  (continuation nil nil)
  (overlay-arrow . right-triangle)
  (up . up-arrow)
  (down . down-arrow)
  (top top-left-angle top-right-angle)
  (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
  (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
  (empty-line . empty-line)
  (unknown . question-mark))))
#+end_src

** highlight-parentheses
:PROPERTIES:
:ID:       2B0F192C-2147-4CF6-AE69-73C1D85FEB77
:END:
:LOGBOOK:
CLOCK: [2022-05-07 Sat 19:00]--[2022-05-07 Sat 19:38] =>  0:38
:END:

#+begin_src emacs-lisp :results silent
(use-package highlight-parentheses
  ;; :after modus-themes
  :demand t
  :custom
  (highlight-parentheses-delay 0))
#+end_src

** prism
:PROPERTIES:
:ID:       0D8B37A1-4923-4155-8595-F39B0238F1B1
:END:
/[[https://github.com/alphapapa/prism.el][prism]] applies coloration to different levels of depth in the code structure./

Most of the customizations below are copied from the [[https://protesilaos.com/emacs/modus-themes#h:a94272e0-99da-4149-9e80-11a7e67a2cf2][modus-themes manual]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package prism
  :demand t
  :custom
  (prism-num-faces 16)

  :hook
  (prog-mode-hook . prism-mode))
#+end_src

** org-modern
:PROPERTIES:
:ID:       FB673B28-FB6D-48EE-97B8-1E9C5D9F32FD
:END:
/[[https://github.com/minad/org-modern][org-modern]] prettifies org mode./

#+begin_src emacs-lisp :results silent
(use-package org-modern
  :demand t
  :custom
  (org-modern-statistics nil)
  (org-modern-star '("◉" "◉" "◉" "◉" "◉"))
  (org-modern-list '((42 . "○")
                     (43 . "○")
                     (45 . "○")))
  :config
  (global-org-modern-mode))
#+end_src

** org-faces
:PROPERTIES:
:ID:       168A61B0-4580-443D-B04F-78F08EFA0458
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 10:45]--[2022-05-04 Wed 11:00] =>  0:15
CLOCK: [2021-11-17 Wed 19:48]--[2021-11-17 Wed 19:57] =>  0:09
CLOCK: [2021-11-17 Wed 11:27]--[2021-11-17 Wed 11:38] =>  0:11
CLOCK: [2021-11-16 Tue 16:27]--[2021-11-16 Tue 17:55] =>  1:28
CLOCK: [2021-08-19 Thu 19:18]--[2021-08-19 Thu 19:31] =>  0:13
CLOCK: [2021-03-28 Sun 21:05]--[2021-03-28 Sun 21:21] =>  0:16
CLOCK: [2021-02-27 Sat 18:27]--[2021-02-27 Sat 18:32] =>  0:05
CLOCK: [2021-02-04 Thu 20:54]--[2021-02-04 Thu 20:59] =>  0:05
:END:
The height for ~variable-pitch~ should be set with the [[id:A8E80A11-25A4-4034-8A86-F7F6ADFD46C7][mixed-pitch]] package.

#+begin_src emacs-lisp :results silent
(use-feature org-faces
  :after org-modern

  :custom
  (org-fontify-quote-and-verse-blocks t)

  :config
  (defun ps/org-faces-custom-faces ()
    "My custom faces, to be used in conjunction with theme."
    (set-face-attribute 'default nil :family ps/face-fixed-pitch :height 115)
    (set-face-attribute 'fixed-pitch nil :family ps/face-fixed-pitch :height 1.1)
    (set-face-attribute 'org-drawer nil :foreground "LightSkyBlue" :family ps/face-fixed-pitch :height 0.7)
    (set-face-attribute 'org-property-value nil :family ps/face-fixed-pitch :height 0.8)
    (set-face-attribute 'org-todo nil :family ps/face-fixed-pitch :height 1.0)
    (set-face-attribute 'org-archived nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-document-title nil :family ps/face-fixed-pitch :underline t :height 1.0)
    (set-face-attribute 'org-special-keyword nil :family ps/face-fixed-pitch :height 0.8)
    (set-face-attribute 'org-tag nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-code nil :family ps/face-fixed-pitch :height 1.0)
    (set-face-attribute 'org-level-1 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-2 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-3 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-4 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-5 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-6 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-7 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-level-8 nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-date nil :family ps/face-fixed-pitch :height 0.8)
    (set-face-attribute 'org-modern-date-active nil :family ps/face-fixed-pitch :height 0.8)
    (set-face-attribute 'org-modern-date-inactive nil :family ps/face-fixed-pitch :height 0.8)
    (set-face-attribute 'org-modern-tag nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'corfu-default nil :family ps/face-fixed-pitch :height 0.9)
    (set-face-attribute 'org-quote nil :family ps/face-variable-pitch :height 1.3)))

#+end_src

- [[https://out-of-cheese-error.netlify.app/spacemacs-config][An Annotated Spacemacs - For an org-mode workflow ·]]
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][- zzamboni.org | Beautifying Org Mode in Emacs]]

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       48DD89AF-277D-427B-9AF1-FBAFA91EC6EC
:END:
**** DONE Increase variable pitch font size
CLOSED: [2022-05-07 Sat 19:05]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-07 Sat 19:13
:ID:       DEBF4218-62C7-4D63-8A39-89FF99555407
:END:
:LOGBOOK:
CLOCK: [2022-05-03 Tue 21:45]--[2022-05-03 Tue 22:38] =>  0:53
CLOCK: [2022-05-03 Tue 22:38]--[2022-05-03 Tue 22:38] =>  0:00
CLOCK: [2022-04-14 Thu 11:10]--[2022-04-14 Thu 11:18] =>  0:08
:END:
I didn't quite accomplish what I wanted, since I am still not able to control the height of the variable-pitch face completely independently from that of the fixed-pitch. But I think it's good enough. See [[https://emacs.stackexchange.com/questions/62987/cannot-set-correct-size-for-variable-pitch-font-in-doom-emacs][this StackExchange question]] for some discussion.

[2022-05-07 Sat 19:05] I then realized that I should control the height of the headings separately.

** modus-themes
:PROPERTIES:
:ID:       95665A5E-A88C-4DCA-BDDD-84DC436A1E80
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 18:12]--[2021-11-18 Thu 18:28] =>  0:16
CLOCK: [2021-05-13 Thu 18:36]--[2021-05-13 Thu 18:37] =>  0:01
CLOCK: [2021-05-11 Tue 07:36]--[2021-05-11 Tue 07:54] =>  0:18
:END:
/[[https://protesilaos.com/emacs/modus-themes][modus-themes]] are a pair of accessible white/dark themes for Emacs./

#+begin_src emacs-lisp :results silent
(use-package modus-themes
  :straight (modus-themes
             :host sourcehut
             :repo "protesilaos/modus-themes")
  :demand t

  :custom
  (modus-themes-org-blocks 'gray-background)

  :config

  (defun ps/modus-themes-load-theme-emacs-mac ()
    "Load modus theme that matches system."
    (interactive)
    (if (string= (plist-get (mac-application-state) :appearance) "NSAppearanceNameDarkAqua")
        (load-theme 'modus-vivendi :no-confirm)
      (load-theme 'modus-operandi :no-confirm)))

  (defun ps/modus-themes-load-theme-emacs-plus (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'modus-operandi :no-confirm))
      ('dark (load-theme 'modus-vivendi :no-confirm))))

  (defun ps/modus-themes-load-theme-conditionally ()
    "Load themes conditional on which distribution of Emacs is
installed."
    (if (boundp 'mac-effective-appearance-change-hook)
        ;; `emacs-mac'
        (ps/modus-themes-load-theme-emacs-mac)
      ;; `emacs-plus'
      ;; (load-theme 'modus-vivendi :no-confirm)
      (add-hook 'ns-system-appearance-change-functions #'ps/modus-theme-load-theme-emacs-plus)))

  (setq modus-themes-common-palette-overrides modus-themes-preset-overrides-intense)

  ;; This ugly hack is necessary to make the theme load all the faces
  ;; on startup
  (run-with-timer 2 nil (lambda () (modus-themes-toggle) (modus-themes-toggle)))

  :hook
  (modus-themes-after-load-theme-hook . ps/org-faces-custom-faces)
  ;; (modus-themes-after-load-theme-hook . ps/modus-themes-highlight-parentheses)

  :general
  ("A-d" 'modus-themes-toggle))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defvar my-highlight-parentheses-use-background t
    "Prefer `highlight-parentheses-background-colors'.")

  (setq my-highlight-parentheses-use-background t) ; Set to nil to disable backgrounds

  (defun ps/modus-themes-highlight-parentheses ()
    (modus-themes-with-colors
      ;; Our preference for setting either background or foreground
      ;; styles, depending on `my-highlight-parentheses-use-background'.
      (if my-highlight-parentheses-use-background

          ;; Here we set color combinations that involve both a background
          ;; and a foreground value.
          (setq highlight-parentheses-background-colors (list bg-cyan-intense
                                                              bg-magenta-intense
                                                              bg-green-intense
                                                              bg-yellow-intense)
                highlight-parentheses-colors (list cyan
                                                   magenta
                                                   green
                                                   yellow))

        ;; And here we pass only foreground colors while disabling any
        ;; backgrounds.
        (setq highlight-parentheses-colors (list green-intense
                                                 magenta-intense
                                                 blue-intense
                                                 red-intense)
              highlight-parentheses-background-colors nil)))

    ;; Include this if you also want to make the parentheses bold:
    (set-face-attribute 'highlight-parentheses-highlight nil :inherit 'bold)

    ;; Our changes must be evaluated before enabling the relevant mode, so
    ;; this comes last.
    (global-highlight-parentheses-mode))

#+end_src
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       E53CF042-FAF6-4CA6-9FD4-D1472BA3C814
:END:
**** DONE Tweak modus-theme so that it doesn't override org-faces
CLOSED: [2021-11-17 Wed 19:58]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-17 Wed 19:58
:ID:       0BADCFC0-FFE7-4C04-9912-3F748EAE3460
:END:
:LOGBOOK:
CLOCK: [2021-11-17 Wed 18:26]--[2021-11-17 Wed 19:48] =>  1:22
:END:
This is done by creating a function with all the customizations and then calling this function with ~modus-themes-after-load-theme-hook~.

** emacs-emojify
:PROPERTIES:
:ID:       92919C07-A782-4079-AE20-75B248D34A13
:END:

#+begin_src emacs-lisp :results silent
(use-package emojify
  :config
  (emojify-set-emoji-styles '(unicode))
  :hook
  (after-init . global-emojify-mode)
  :general
  ("H-e" 'emojify-insert-emoji))
#+end_src

** lin
:PROPERTIES:
:ID:       FA8149A2-9984-4C39-AA81-120317615E86
:END:
:LOGBOOK:
CLOCK: [2022-09-12 Mon 16:21]--[2022-09-12 Mon 16:30] =>  0:09
:END:
/[[https://protesilaos.com/codelog/2022-09-08-lin-1-0-0/][Lin]] is a stylistic enhancement for Emacs’ built-in ~hl-line-mode~. It remaps the ~hl-line~ face (or equivalent) buffer-locally to a style optimal for major modes where line selection is the primary mode of interaction./

#+begin_src emacs-lisp :results silent
(use-package lin
  :demand t
  :custom
  (lin-face 'lin-blue)
  (lin-mode-hooks
   '(dired-mode-hook
     elfeed-search-mode-hook
     git-rebase-mode-hook
     grep-mode-hook
     ibuffer-mode-hook
     ilist-mode-hook
     ledger-report-mode-hook
     log-view-mode-hook
     magit-log-mode-hook
     mu4e-headers-mode
     occur-mode-hook
     org-agenda-mode-hook
     pdf-outline-buffer-mode-hook
     proced-mode-hook
     tabulated-list-mode-hook))

  :config
  (lin-global-mode))
#+end_src

** image
:PROPERTIES:
:ID:       E1A616FF-7D93-4AB4-AD44-44FB6550FD2E
:END:

#+begin_src emacs-lisp :results silent
(use-feature image
  :config
  ;; Use imagemagick, if available.
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types)))
#+end_src

** paren
:PROPERTIES:
:ID:       E39A1AC5-7BF7-4995-B116-BB6323C7605F
:END:
#+begin_src emacs-lisp :results silent
(use-feature paren
  :custom
  (show-paren-delay 0)
  :config
  (show-paren-mode))
#+end_src

** modeline
:PROPERTIES:
:ID:       0C458CC1-28B8-49D7-8C61-DDB58604BCAD
:END:

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       AA28A06C-A686-442C-BA95-EBEB1F4EC9EC
:END:
**** CANCELLED [#6] Check Emacs 28 has a global mode line
CLOSED: [2022-06-20 Mon 21:55]
:PROPERTIES:
:Effort:   0:20
:ID:       87B629FE-EB36-4930-BB9A-BF255011C532
:ARCHIVE_TIME: 2022-06-20 Mon 21:55
:END:
:LOGBOOK:
CLOCK: [2022-06-20 Mon 21:40]--[2022-06-20 Mon 21:42] =>  0:02
CLOCK: [2021-11-14 Sun 11:21]--[2021-11-14 Sun 11:26] =>  0:05
CLOCK: [2021-10-01 Fri 21:56]--[2021-10-01 Fri 22:04] =>  0:08
:END:

http://ruzkuku.com/texts/emacs-global.html#fn2

[2021-11-14 Sun 11:24] I tried the code but it didn't work. Not sure if this is because I'm using the Doom modeline.

** doom-modeline
:PROPERTIES:
:ID:       C3D90EBC-EB70-440E-9718-A2832FF9F077
:END:
:LOGBOOK:
CLOCK: [2021-06-02 Wed 21:16]--[2021-06-02 Wed 21:32] =>  0:16
CLOCK: [2021-06-02 Wed 18:04]--[2021-06-02 Wed 18:07] =>  0:03
CLOCK: [2021-05-23 Sun 12:38]--[2021-05-23 Sun 12:43] =>  0:05
CLOCK: [2021-04-03 Sat 17:09]--[2021-04-03 Sat 17:25] =>  0:16
:END:
/[[https://github.com/seagle0128/doom-modeline/][doom-modeline]] is a tidier and more aesthetically pleasing modeline./

#+begin_src emacs-lisp :results silent
(use-package doom-modeline
  :demand t
  :init
  (doom-modeline-mode)
  :custom
  ;; we disable the display of time since the tab-bar already does
  (doom-modeline-time nil)

  (doom-modeline-mu4e t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-irc t)
  (doom-modeline-irc-buffers t)
  ;; (doom-modeline--flycheck-icon t)
  (doom-modeline-github t)
  (doom-modeline-github-interval (* 10 60))
  ;; I think this causes significant slowdown
  (doom-modeline-enable-word-count nil)

  :config
  (remove-hook 'display-time-mode-hook 'doom-modeline-override-display-time-modeline)
  (remove-hook 'display-battery-mode-hook 'doom-modeline-override-battery-modeline)
  (remove-hook 'doom-modeline-mode-hook 'doom-modeline-override-display-time-modeline)
  (remove-hook 'doom-modeline-mode-hook 'doom-modeline-override-battery-modeline)
  (add-hook 'doom-modeline-before-github-fetch-notification-hook #'auth-source-pass-enable))
#+end_src

*** TODO [#6] Diagnose why modeline is sometimes not highlighted
:PROPERTIES:
:ID:       DECB5A10-FF2E-446B-BA4E-AFB7176EFFAE
:Effort:   0:40
:END:
Discussion [[https://github.com/doomemacs/doomemacs/issues/4660][here]].

** tab-bar
:PROPERTIES:
:ID:       F8B7C324-C5CF-4DBD-A527-92101BDA70AB
:END:

#+begin_src emacs-lisp :results silent
(use-feature tab-bar
  :demand t
  :custom
  (tab-bar-format '(tab-bar-align-right
                    tab-bar-format-global))
  (auto-resize-tab-bar nil)

  :config
  (setf mode-line-misc-info
        ;; When the tab-bar is active, don't show global-mode-string
        ;; in mode-line-misc-info, because we now show that in the
        ;; tab-bar using `tab-bar-format-align-right' and
        ;; `tab-bar-format-global'.
        (remove '(global-mode-string ("" global-mode-string))
                mode-line-misc-info))

  (run-with-timer 5 nil (lambda () (setq global-mode-string '(" "
                             (:eval (propertize display-time-string 'face 'ps/display-time))
                             " | "
                             fancy-battery-mode-line
                             " | "
                             telega-mode-line-format
                             " | "))))

  (tab-bar-mode))
#+end_src

** fancy-battery
:PROPERTIES:
:ID:       DDFE34BA-7C23-459E-B4E2-2957D2535700
:END:
#+begin_src emacs-lisp :results silent
(use-package fancy-battery
  :demand t
  :custom
  (fancy-battery-show-percentage t)

  :config
  (fancy-battery-mode))
#+end_src

** all-the-icons
:PROPERTIES:
:ID:       46EB8CD9-E498-4F80-AC02-A116CFA58799
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:13]--[2022-07-17 Sun 11:21] =>  0:08
CLOCK: [2021-05-20 Thu 18:21]--[2021-05-20 Thu 18:39] =>  0:18
CLOCK: [2021-05-06 Thu 06:01]--[2021-05-06 Thu 06:22] =>  0:21
:END:
/[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] collects various icon fonts and propertizes them./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons
  :demand t)
#+end_src

** all-the-icons-completion
:PROPERTIES:
:ID:       A0DAA757-1CC9-460B-9F46-78A5145E7E61
:END:
/[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] adds icons to completion candidates./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-completion
  :demand t
  :after (all-the-icons marginalia vertico)
  :config
  (all-the-icons-completion-mode)

  :hook
  (marginalia-mode-hook . all-the-icons-completion-marginalia-setup))
#+end_src

** gnuplot-mode
:PROPERTIES:
:ID:       9817156B-B940-4DCB-A10C-FBBC558B4B66
:END:

Not sure which of the two (or both) are needed.

#+begin_src emacs-lisp :results silent
;; (use-package gnuplot-mode
;; :demand t)
(use-package gnuplot)
#+end_src

** delsel
:PROPERTIES:
:ID:       6473F2BF-059F-464B-859E-B8DA91B81DE2
:END:

#+begin_src emacs-lisp :results silent
(use-feature delsel
  :demand t
  :config
  (delete-selection-mode))
#+end_src

** hl-line
:PROPERTIES:
:ID:       2793C213-5A36-4DAB-9217-DA1BBE257E09
:END:
#+begin_src emacs-lisp :results silent
(use-feature hl-line
  :config
  (global-hl-line-mode))
#+end_src

** jit-lock
:PROPERTIES:
:ID:       66598B06-4BB1-4E7C-AE36-7CE81E4CBF5A
:END:

#+begin_src emacs-lisp :results silent
  (use-feature jit-lock
    :defer 10
    :custom
    ;; I had to hand-code the value because `(*
    ;; (window-max-chars-per-line) (window-body-height))' evaluated on
    ;; startup outputs a value much lower than when the expression is
    ;; evaluated manually (~2500 vs. ~12000), not sure why.
    ;;
    (jit-lock-chunk-size 120000 "emacs.stackexchange.com/a/72439/32089"))
#+end_src

* performance
:PROPERTIES:
:ID:       EF047473-EE10-41A2-852A-8CCD803469CD
:END:
:LOGBOOK:
CLOCK: [2021-10-15 Fri 12:34]--[2021-10-15 Fri 12:40] =>  0:06
CLOCK: [2021-03-20 Sat 22:11]--[2021-03-20 Sat 22:18] =>  0:07
CLOCK: [2021-02-28 Sun 11:18]--[2021-02-28 Sun 11:26] =>  0:08
CLOCK: [2021-02-28 Sun 10:30]--[2021-02-28 Sun 10:57] =>  0:27
CLOCK: [2021-02-26 Fri 18:00]--[2021-02-26 Fri 18:12] =>  0:12
CLOCK: [2021-02-26 Fri 09:51]--[2021-02-26 Fri 10:02] =>  0:11
CLOCK: [2021-02-25 Thu 15:32]--[2021-02-25 Thu 15:59] =>  0:27
CLOCK: [2021-02-21 Sun 10:01]--[2021-02-21 Sun 10:34] =>  0:33
CLOCK: [2021-02-12 Fri 08:47]--[2021-02-12 Fri 08:55] =>  0:08
CLOCK: [2021-02-07 Sun 12:15]--[2021-02-07 Sun 12:49] =>  0:34
CLOCK: [2021-08-06 Fri 15:28]--[2021-08-06 Fri 15:32] =>  0:04
CLOCK: [2021-07-13 Tue 20:44]--[2021-07-13 Tue 21:07] =>  0:23
CLOCK: [2021-07-13 Tue 19:51]--[2021-07-13 Tue 20:02] =>  0:11
CLOCK: [2021-06-15 Tue 21:28]--[2021-06-15 Tue 21:35] =>  0:07
CLOCK: [2021-06-08 Tue 20:45]--[2021-06-08 Tue 21:15] =>  0:30
CLOCK: [2021-03-25 Thu 20:06]--[2021-03-25 Thu 20:11] =>  0:05
CLOCK: [2021-03-25 Thu 15:25]--[2021-03-25 Thu 16:57] =>  1:32
CLOCK: [2021-03-25 Thu 08:56]--[2021-03-25 Thu 09:30] =>  0:34
CLOCK: [2021-03-21 Sun 09:13]--[2021-03-21 Sun 10:13] =>  1:00
CLOCK: [2021-03-17 Wed 09:19]--[2021-03-17 Wed 10:04] =>  0:45
CLOCK: [2021-03-04 Thu 09:50]--[2021-03-04 Thu 10:01] =>  0:11
CLOCK: [2021-02-08 Mon 11:45]--[2021-02-08 Mon 12:07] =>  0:22
CLOCK: [2021-10-03 Sun 18:50]--[2021-10-03 Sun 19:05] =>  0:15
CLOCK: [2021-04-05 Mon 21:50]--[2021-04-05 Mon 22:15] =>  0:25
:END:

** bidirectional writing
:PROPERTIES:
:ID:       1EA302FA-D0A2-470C-82C2-47FCA4E04FAF
:END:
Partly borrowed from [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][Prot]].

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :custom
  (bidi-display-reordering nil)
  (inhibit-compacting-font-caches t)
  (setq this 'that)

  (redisplay-skip-fontification-on-input t)
  (bidi-inhibit-bpa t)
  :config
  (setq-default bidi-paragraph-direction 'left-to-right))
#+end_src

** profiler
:PROPERTIES:
:ID:       82CFBDD5-12E8-46EC-ADF8-2769E59B5DD8
:END:
:LOGBOOK:
CLOCK: [2021-11-14 Sun 10:39]--[2021-11-14 Sun 10:56] =>  0:17
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
  (use-feature profiler
    :config
    (defvar ps/profiler-toggle nil)
    (defun ps/profiler-toggle ()
      (interactive)
      "Starts Emacs profiler if not already running. Otherwise stops it
  and generates profiling report."
      (if (not ps/profiler-toggle)
          (profiler-start 'cpu+mem)
        (profiler-report)
        (profiler-stop))
      (setq ps/profiler-toggle (not ps/profiler-toggle)))

  (defun ps/profiler-report-toggle-entry-global ()
  "Expand all subentries below entry at point."
  (interactive)
  (profiler-report-toggle-entry '(4)))

    :general
    ("A-C-p" 'ps/profiler-toggle)
    (profiler-report-mode-map
     "<backtab>" 'ps/profiler-report-toggle-entry-global))
#+end_src

** so-long
:PROPERTIES:
:ID:       F738DFB0-AA9C-47B5-9D3B-DC22EF83D357
:END:
#+begin_src emacs-lisp :results silent
(use-feature so-long
  :config
  (global-so-long-mode))
#+end_src

** gcmh
:PROPERTIES:
:ID:       A8BBF291-D5CE-4FF2-B80C-B69570AD129D
:END:
/[[https://github.com/emacsmirror/gcmh][GCMH]] enforces a sneaky Garbage Collection strategy to minimize GC interference with user activity./

#+begin_src emacs-lisp :results silent
(use-package gcmh
  :demand t
  :config
  (gcmh-mode))
#+end_src

** misc.
:PROPERTIES:
:ID:       4F977EC2-4A55-48C4-B9EE-5C5F3B8DC194
:END:
https://emacs-lsp.github.io/lsp-mode/page/performance/
#+begin_src emacs-lisp :results silent
(setq read-process-output-max (* 1024 1024)) ; 1mb.
#+end_src

* text movement
:PROPERTIES:
:ID:       1E8F4417-5D5F-4406-BB70-AA272F714EF2
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 09:27]--[2022-07-17 Sun 09:47] =>  0:20
CLOCK: [2022-07-11 Mon 13:34]--[2022-07-11 Mon 14:41] =>  1:07
CLOCK: [2022-07-11 Mon 12:37]--[2022-07-11 Mon 12:43] =>  0:06
CLOCK: [2021-05-22 Sat 17:22]--[2021-05-22 Sat 17:35] =>  0:13
:END:

** characters
:PROPERTIES:
:ID:       99EEB3FC-265E-4C92-8BE7-E791F9EFBF94
:END:

#+begin_src emacs-lisp :results silent
(use-feature bindings
  :general
  (w3m-minor-mode-map
   "<left>" 'left-char
   "<right>" 'right-char))
#+end_src

** words
:PROPERTIES:
:ID:       3493B00B-C36E-406F-B681-F145FD1684B2
:END:
#+begin_src emacs-lisp :results silent
(use-feature simple
  :general
   ("A-C-s-p" 'forward-word
   "A-C-s-u" 'backward-word))
#+end_src

** lines
:PROPERTIES:
:ID:       73DC1518-87FD-48D7-9EE5-C863126905AD
:END:
#+begin_src emacs-lisp :results silent
(use-feature simple
  :general
  ("A-C-s-m" 'move-beginning-of-line
   ;; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
   "A-C-s-z" 'move-end-of-line)
  ((custom-mode-map ebib-index-mode-map ebib-entry-mode-map help-mode-map helpful-mode-map Info-mode-map magit-mode-map Man-node-map org-lint--report-mode-map osa-chrome-mode-map mu4e-view-mode-map eww-mode-map elfeed-search-mode-map elfeed-show-mode-map pass-mode-map elisp-refs-mode-map special-mode-map twittering-mode-map)
   "k" 'previous-line
   "l" 'next-line)
  ((eshell-hist-mode-map w3m-minor-mode-map)
   "<up>" 'previous-line
   "<down>" 'next-line))
#+end_src

** sentences
:PROPERTIES:
:ID:       9BCDE791-E716-4CFE-AED3-4E4E4874DDDE
:END:

#+begin_src emacs-lisp :results silent
(use-feature paragraphs
  :general
  ("A-C-s-i" 'backward-sentence
   "A-C-s-o" 'forward-sentence))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       E10CAF75-4C0C-4910-856F-39707E30A565
:END:
#+begin_src emacs-lisp :results silent
(use-feature paragraphs
  :general
  ("A-C-s-," 'backward-paragraph
   "A-C-s-." 'forward-paragraph))
#+end_src

** sexps
:PROPERTIES:
:ID:       DF16B7CC-E0CF-4062-A0C2-93CBE83F619C
:END:

#+begin_src emacs-lisp :results silent
(use-feature lisp
  :general
  ("A-C-s-e" 'backward-sexp
   "A-H-M-s-d" 'forward-sexp ; nonstandard binding because otherwise intercepted by OSX
   ))
#+end_src

** defuns
:PROPERTIES:
:ID:       868B32C0-52FC-4131-9191-DD43BEAABCEA
:END:

#+begin_src emacs-lisp :results silent
(use-feature lisp
  :general
  ("A-C-s-w" 'beginning-of-defun
   "A-C-s-s" 'end-of-defun))
#+end_src

** buffers
:PROPERTIES:
:ID:       E71DE3A8-E941-4864-8224-2326C22E3AEB
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :general
  ("A-C-s-<tab>" 'beginning-of-buffer
   "A-C-s-SPC" 'end-of-buffer))
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       801281DE-B78A-402D-85B1-9286940DCA31
:END:
*** DONE [#6] m, k, l, / as canonical movement keys
CLOSED: [2021-10-20 Wed 19:49]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-10-20 Wed 19:49
:ID:       626B6E64-4215-4DFA-BD23-58AED61889FB
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:38]--[2021-10-20 Wed 19:49] =>  0:11
CLOCK: [2021-10-16 Sat 14:29]--[2021-10-16 Sat 14:40] =>  0:11
:END:
I think this is too disruptive. Perhaps a better alternative is to preserve the current bindings for writable buffers and use ~<~ and ~>~ for read-only buffers. I just set these kind bindings for Vimium, and if I like it I may adopt if for Emacs.
* text manipulation
:PROPERTIES:
:ID:       179BB021-8B2A-4BF0-B3AA-43AF5A212D4B
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 12:53]--[2021-09-29 Wed 13:16] =>  0:23
CLOCK: [2021-09-29 Wed 12:22]--[2021-09-29 Wed 12:49] =>  0:27
CLOCK: [2021-07-13 Tue 08:44]--[2021-07-13 Tue 09:00] =>  0:16
CLOCK: [2021-06-15 Tue 21:35]--[2021-06-15 Tue 21:52] =>  0:17
CLOCK: [2021-06-08 Tue 21:15]--[2021-06-08 Tue 21:44] =>  0:29
CLOCK: [2021-06-01 Tue 12:34]--[2021-06-01 Tue 12:43] =>  0:09
CLOCK: [2021-05-29 Sat 21:04]--[2021-05-29 Sat 21:12] =>  0:08
CLOCK: [2021-05-29 Sat 19:52]--[2021-05-29 Sat 20:05] =>  0:13
CLOCK: [2021-04-03 Sat 18:55]--[2021-04-03 Sat 19:01] =>  0:06
CLOCK: [2021-04-03 Sat 18:54]--[2021-04-03 Sat 18:55] =>  0:01
CLOCK: [2021-03-22 Mon 20:56]--[2021-03-22 Mon 21:16] =>  0:20
:END:

Macro adapted from ?

#Minimal config
#+begin_src emacs-lisp :results silent
(defmacro ps/delete-instead-of-kill (&rest body)
  "Replaces `kill-region' with `delete-region' in BODY."
  `(cl-letf (((symbol-function 'kill-region)
              (lambda (beg end)
                (delete-region beg end))))
     ,@body))

(defmacro ps/copy-instead-of-kill (&rest body)
  "Replaces `kill-region' with `kill-ring-save' in BODY."
  `(cl-letf (((symbol-function 'kill-region)
              (lambda (beg end)
                (kill-ring-save beg end)
                (setq this-command 'kill-region))))
     ,@body))

(defun ps/kill-whole-thing (thing)
  "Kill the `thing-at-point' for the specified kind of THING."
  (let ((bounds (bounds-of-thing-at-point thing)))
    (if bounds
        (kill-region (car bounds) (cdr bounds))
      (error "No %s at point" thing))))

(general-define-key
 "C-H-M-g" 'append-next-kill
 "A-M-n" 'ps/remove-newlines-from-region)
#+end_src

** characters
:PROPERTIES:
:ID:       483F1796-7921-4AB1-B7FB-6BF1349D4744
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:47]--[2022-07-15 Fri 13:48] =>  0:01
CLOCK: [2021-06-05 Sat 18:28]--[2021-06-05 Sat 19:09] =>  0:41
CLOCK: [2021-04-21 Wed 21:25]--[2021-04-21 Wed 21:39] =>  0:14
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
;; (use-package iy-go-to-char)
(defun ps/backward-zap-to-char ()
  (interactive)
  (zap-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                             nil 'read-char-history)))

(defun ps/zap-copy-to-char (arg char)
  "Copy up to and including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (read-char-from-minibuffer "Zap to char: "
                                                nil 'read-char-history)))
  ;; Avoid "obsolete" warnings for translation-table-for-input.
  (with-no-warnings
    (if (char-table-p translation-table-for-input)
        (setq char (or (aref translation-table-for-input char) char))))
  (copy-region-as-kill (point) (progn
                                 (search-forward (char-to-string char) nil nil arg)
                                 (point))))

(defun ps/backward-zap-copy-to-char ()
  (interactive)
  (ps/zap-copy-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                                     nil 'read-char-history)))

(defun ps/zap-delete-to-char (arg char)
  "Copy up to and including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (read-char-from-minibuffer "Zap to char: "
                                                nil 'read-char-history)))
  ;; Avoid "obsolete" warnings for translation-table-for-input.
  (with-no-warnings
    (if (char-table-p translation-table-for-input)
        (setq char (or (aref translation-table-for-input char) char))))
  (delete-region (point) (progn
                           (search-forward (char-to-string char) nil nil arg)
                           (point))))

(defun ps/backward-zap-delete-to-char ()
  (interactive)
  (ps/zap-delete-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                                       nil 'read-char-history)))

(defun ps/transpose-chars-backward ()
  "Interchange characters around point, moving backward one character."
  (interactive)
  (transpose-chars -1))

(general-define-key
 "A-H-M-d" 'transpose-chars
 "A-H-M-s" 'ps/transpose-chars-backward
 "C-H-M-s" 'delete-backward-char
 "C-H-M-d" 'delete-forward-char
 "C-H-M-t" 'just-one-space
 "C-H-M-f" 'zap-to-char
 "C-H-M-a" 'ps/backward-zap-to-char
 "A-C-H-M-S-s-f" 'ps/zap-delete-to-char
 "A-C-H-M-S-s-a" 'ps/backward-zap-delete-to-char
 "C-H-M-s-A-f" 'ps/zap-copy-to-char
 "C-H-M-s-A-a" 'ps/backward-zap-copy-to-char
 "C-H-M-=" 'overwrite-mode)
(general-define-key
 :keymaps 'org-mode-map
 "C-H-M-s" 'org-delete-backward-char)
#+end_src

** words
:PROPERTIES:
:ID:       E2655C82-F60C-4504-B8C1-7ACE864C2E01
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 13:03]--[2021-06-05 Sat 13:07] =>  0:04
CLOCK: [2021-06-05 Sat 11:51]--[2021-06-05 Sat 11:59] =>  0:08
CLOCK: [2021-05-29 Sat 21:12]--[2021-05-29 Sat 21:28] =>  0:16
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(defun ps/delete-word (&optional arg)
  "Like `kill-word', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-word arg)))

(defun ps/backward-delete-word (&optional arg)
  "Like `backward-kill-word', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (backward-kill-word arg)))

(defun ps/copy-word (&optional arg)
  "Like `kill-word', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-word arg)))

;; The macro wasn't working for `backward-kill-word', so using a custom function.
(defun ps/backward-copy-word ()
  "Like `backward-kill-word', but copies instead of killing."
  (interactive)
  (copy-region-as-kill (point) (progn (backward-word) (point))))

(defun ps/kill-whole-word ()
  "Kill the word at point."
  (interactive)
  (ps/kill-whole-thing 'word))

(defun ps/delete-whole-word ()
  "Like `kill-whole-word', but deletes instead of killing."
  (interactive)
  (ps/delete-instead-of-kill (ps/kill-whole-word)))

(defun ps/copy-whole-word (&optional arg)
  "Like `kill-whole-word', but copies instead of killing."
  (interactive)
  (ps/copy-instead-of-kill (ps/kill-whole-word)))

(defun ps/transpose-words-backward ()
  "Interchange words around point, leaving point at beginning."
  (interactive)
  (transpose-words -1))

(general-define-key
 "C-H-M-r" 'kill-word
 "C-H-M-q" 'backward-kill-word
 "A-C-H-M-S-s-r" 'ps/delete-word
 "A-C-H-M-S-s-q" 'ps/backward-delete-word
 "C-H-M-s-A-r" 'ps/copy-word
 "C-H-M-s-A-q" 'ps/backward-copy-word
 "A-H-C-r" 'ps/delete-whole-word
 "A-H-C-q" 'ps/copy-whole-word
 "A-H-C-u" 'ps/kill-whole-word
 "A-H-M-r" 'transpose-words
 "A-H-M-q" 'ps/transpose-words-backward)
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       A51E4C5F-5562-469B-BF79-60107BEF43C4
:END:
**** CANCELLED [#6] Create function to mark whole word
CLOSED: [2022-06-21 Tue 15:25]
:PROPERTIES:
:Effort:   0:10
:ID:       43199F2D-2445-40AF-95E3-6B89974597E1
:ARCHIVE_TIME: 2022-06-21 Tue 15:25
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 15:13]--[2022-06-21 Tue 15:25] =>  0:12
:END:
** lines
:PROPERTIES:
:ID:       E0C7E822-7CC0-40A0-925D-737015A5A2FC
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 22:34]--[2021-07-31 Sat 22:56] =>  0:22
CLOCK: [2021-06-08 Tue 19:12]--[2021-06-08 Tue 19:53] =>  0:41
CLOCK: [2021-06-05 Sat 11:59]--[2021-06-05 Sat 12:40] =>  0:41
CLOCK: [2021-06-01 Tue 12:43]--[2021-06-01 Tue 13:10] =>  0:27
CLOCK: [2021-05-31 Mon 20:46]--[2021-05-31 Mon 20:53] =>  0:07
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(defun ps/delete-line (&optional arg)
  "Like `kill-line', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-line arg)))

(defun ps/backward-delete-line (&optional arg)
  "Like `backward-kill-line', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-line 0)))

(defun ps/copy-line (&optional arg)
  "Like `kill-line', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-line arg)))

(defun ps/backward-copy-line (&optional arg)
  "Like `backward-kill-line', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-line 0)))

(defun ps/kill-whole-line ()
  "Kill the line at point."
  (interactive)
  (ps/kill-whole-thing 'line))

(defun ps/delete-whole-line ()
  "Like `kill-whole-line', but deletes instead of killing."
  (interactive)
  (ps/delete-instead-of-kill (ps/kill-whole-line)))

(defun ps/copy-whole-line ()
  "Like `kill-whole-line', but copies instead of killing."
  (interactive)
  (ps/copy-instead-of-kill (ps/kill-whole-line)))

(defun ps/org-kill-logical-line (&optional arg)
  "Kill line, to tags or end of line."
  (interactive "P")
  (cond
   ((or (not org-special-ctrl-k)
        (bolp)
        (not (org-at-heading-p)))
    (if (and (get-char-property (min (point-max) (point-at-eol)) 'invisible)
             org-ctrl-k-protect-subtree)
        (if (or (eq org-ctrl-k-protect-subtree 'error)
                (not (y-or-n-p "Kill hidden subtree along with headline? ")))
            (user-error "C-k aborted as it would kill a hidden subtree")))
    (call-interactively
     'kill-line))
   ((looking-at (org-re ".*?\\S-\\([ \t]+\\(:[[:alnum:address@hidden:]+:\\)\\)[
\t]*$"))
    (kill-region (point) (match-beginning 1))
    (org-set-tags nil t))
   (t (kill-region (point) (point-at-eol)))))

(defun ps/transpose-lines-backward ()
  "Exchange current line and previous line, leaving point
between the two."
  (interactive)
  (transpose-lines -1))

(general-define-key
 "C-H-M-v" 'kill-line
 "C-H-M-z" 'crux-kill-line-backwards
 "A-C-H-M-S-s-v" 'ps/delete-line
 "A-C-H-M-S-s-z" 'ps/backward-delete-line
 "C-H-M-s-A-v" 'ps/copy-line
 "C-H-M-s-A-z" 'ps/backward-copy-line
 "A-H-C-v" 'ps/delete-whole-line
 "A-H-C-m" 'ps/kill-whole-line
 "A-H-C-z" 'ps/copy-whole-line
 "A-H-M-v" 'transpose-lines
 "A-H-M-z" 'ps/transpose-lines-backward)
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       337327A9-BC2D-4D6E-A304-EDF37B0DBE86
:END:
**** CANCELLED [#6] Create function to mark whole line
CLOSED: [2022-06-21 Tue 15:26]
:PROPERTIES:
:Effort:   0:10
:ID:       C24196D7-3534-4F7D-83EF-F734074F33EF
:ARCHIVE_TIME: 2022-06-21 Tue 15:26
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 15:25]--[2022-06-21 Tue 15:26] =>  0:01
:END:

** sentences
:PROPERTIES:
:ID:       CEEDCAFA-4527-401D-A262-C80871AD49E8
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 21:28]--[2021-05-29 Sat 22:17] =>  0:49
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(defun ps/delete-sentence (&optional arg)
  "Like `kill-sentence', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-sentence arg)))

(defun ps/backward-delete-sentence (&optional arg)
  "Like `backward-kill-sentence', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (backward-kill-sentence arg)))

(defun ps/copy-sentence (&optional arg)
  "Like `kill-sentence', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-sentence arg)))

(defun ps/backward-copy-sentence (&optional arg)
  "Like `backward-kill-sentence', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (backward-kill-sentence arg)))

(defun ps/kill-whole-sentence ()
  "Kill the sentence at point."
  (interactive)
  (ps/kill-whole-thing 'sentence))

(defun ps/delete-whole-sentence ()
  "Like `kill-whole-sentence', but deletes instead of killing."
  (interactive)
  (ps/delete-instead-of-kill (ps/kill-whole-sentence)))

(defun ps/copy-whole-sentence ()
  "Like `kill-whole-sentence', but copies instead of killing."
  (interactive)
  (ps/copy-instead-of-kill (ps/kill-whole-sentence)))

(defun ps/transpose-sentences-backward ()
  "Interchange the current sentence with the previous one."
  (interactive)
  (transpose-sentences -1))

(general-define-key
 ;; :keymaps '(text-mode-map org-mode-map outline-mode-map telega-chat-mode-map)
 "C-H-M-e" 'kill-sentence
 "C-H-M-w" 'backward-kill-sentence
 "A-C-H-M-S-s-e" 'ps/delete-sentence
 "A-C-H-M-S-s-w" 'ps/backward-delete-sentence
 "C-H-M-s-A-e" 'ps/copy-sentence
 "C-H-M-s-A-w" 'ps/backward-copy-sentence
 "A-H-C-e" 'ps/delete-whole-sentence
 "A-H-C-w" 'ps/copy-whole-sentence
 "A-H-C-i" 'ps/kill-whole-sentence
 "A-H-M-e" 'transpose-sentences
 "A-H-M-w" 'ps/transpose-sentences-backward)
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       35E3FAA2-5850-4423-A35B-8E0DAC867857
:END:
**** CANCELLED [#6] Create function to mark whole sentence
CLOSED: [2022-06-21 Tue 15:34]
:PROPERTIES:
:Effort:   0:10
:ID:       CCB486F6-6FA2-44C3-946F-91FD3987C8F3
:ARCHIVE_TIME: 2022-06-21 Tue 15:34
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 15:26]--[2022-06-21 Tue 15:31] =>  0:05
:END:

** paragraphs
:PROPERTIES:
:ID:       2B3DDC12-D660-47EF-BA22-8B1419A5F5D2
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 13:07]--[2021-06-05 Sat 13:10] =>  0:03
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature paragraphs
  :custom
  (sentence-end-double-space nil)

  :config
  (defun ps/delete-paragraph (&optional arg)
    "Like `kill-paragraph', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (kill-paragraph arg)))

  (defun ps/backward-delete-paragraph (&optional arg)
    "Like `backward-kill-paragraph', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (backward-kill-paragraph arg)))

  (defun ps/copy-paragraph (&optional arg)
    "Like `kill-paragraph', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (kill-paragraph arg)))

  (defun ps/backward-copy-paragraph (&optional arg)
    "Like `backward-kill-paragraph', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (backward-kill-paragraph arg)))

  (defun ps/kill-whole-paragraph ()
    "Kill the paragraph at point."
    (interactive)
    (ps/kill-whole-thing 'paragraph))

  (defun ps/delete-whole-paragraph ()
    "Like `kill-whole-paragraph', but deletes instead of killing."
    (interactive)
    (ps/delete-instead-of-kill (ps/kill-whole-paragraph)))

  (defun ps/copy-whole-paragraph ()
    "Like `kill-whole-paragraph', but copies instead of killing."
    (interactive)
    (ps/copy-instead-of-kill (ps/kill-whole-paragraph)))

(defun ps/transpose-paragraphs-backward ()
    "Interchange the current paragraph with the previous one."
    (interactive)
    (transpose-paragraphs -1))

  :general
  ((text-mode-map org-mode-map outline-mode-map telega-chat-mode-map)
   "C-H-M-c" 'kill-paragraph
   "C-H-M-x" 'backward-kill-paragraph
   "A-C-H-M-S-s-c" 'ps/delete-paragraph
   "A-C-H-M-S-s-x" 'ps/backward-delete-paragraph
   "C-H-M-s-A-c" 'ps/copy-paragraph
   "C-H-M-s-A-x" 'ps/backward-copy-paragraph
   "A-H-C-c" 'ps/delete-whole-paragraph
   "A-H-C-x" 'ps/copy-whole-paragraph
   "A-H-C-," 'ps/kill-whole-paragraph
   "A-H-M-c" 'transpose-paragraphs
   "A-H-M-x" 'ps/transpose-paragraphs-backward))
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       1FB11ED1-AF35-4DD9-BCC4-9FFCA1CBE986
:END:
**** CANCELLED [#6] Create function to mark whole paragraph
CLOSED: [2022-06-21 Tue 15:31]
:PROPERTIES:
:Effort:   0:10
:ID:       0A82C89C-A021-45FD-AFF5-5469B5066CE3
:ARCHIVE_TIME: 2022-06-21 Tue 15:31
:END:

** sexps
:PROPERTIES:
:ID:       E07DF88D-B083-4D93-91D2-97DC7C2E3EAD
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 15:31]--[2022-06-21 Tue 15:35] =>  0:04
CLOCK: [2021-06-05 Sat 13:14]--[2021-06-05 Sat 13:20] =>  0:06
CLOCK: [2021-05-31 Mon 20:53]--[2021-05-31 Mon 21:21] =>  0:28
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(defun ps/delete-sexp (&optional arg)
  "Like `kill-sexp', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-sexp arg)))

(defun ps/backward-delete-sexp (&optional arg)
  "Like `backward-kill-sexp', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (backward-kill-sexp arg)))

(defun ps/copy-sexp (&optional arg)
  "Like `kill-sexp', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-sexp arg)))

(defun ps/backward-copy-sexp (&optional arg)
  "Like `backward-kill-sexp', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (backward-kill-sexp arg)))

(defun ps/kill-whole-sexp ()
  "Kill the sexp at point."
  (interactive)
  (ps/kill-whole-thing 'sexp))

(defun ps/delete-whole-sexp ()
  "Like `kill-whole-sexp', but deletes instead of killing."
  (interactive)
  (ps/delete-instead-of-kill (ps/kill-whole-sexp)))

(defun ps/copy-whole-sexp ()
  "Like `kill-whole-sexp', but copies instead of killing."
  (interactive)
  (ps/copy-instead-of-kill (ps/kill-whole-sexp)))

(defun ps/transpose-sexps-backward ()
  "Like `transpose-sexps', but in reverse order."
  (interactive)
  (transpose-sexps -1))

(general-define-key
 "C-H-M-f" 'kill-sexp
 "C-H-M-a" 'backward-kill-sexp
 "A-C-H-M-S-s-f" 'ps/delete-sexp
 "A-C-H-M-S-s-a" 'ps/backward-delete-sexp
 "C-H-M-s-A-f" 'ps/copy-sexp
 "C-H-M-s-A-a" 'ps/backward-copy-sexp
 "A-H-C-a" 'ps/copy-whole-sexp
 "A-H-C-f" 'ps/delete-whole-sexp
 "A-H-C-j" 'ps/kill-whole-sexp
 "A-H-M-f" 'transpose-sexps
 "A-H-M-a" 'ps/transpose-sexps-backward)
#+end_src

*** TODO [#5] Check mark-sexp-at-point by Tony alon
:PROPERTIES:
:Effort:   0:25
:ID:       B1C4776A-4DB8-42FA-A7E9-D16ABF63C7FB
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 22:17]--[2021-07-31 Sat 22:34] =>  0:17
:END:

** headings
:PROPERTIES:
:ID:       77FA2148-0D0D-459B-8F5F-D63B2E8BEB28
:END:
:LOGBOOK:
CLOCK: [2021-07-16 Fri 09:44]--[2021-07-16 Fri 09:45] =>  0:01
CLOCK: [2021-06-11 Fri 18:27]--[2021-06-11 Fri 18:33] =>  0:06
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(general-define-key
 :keymaps 'org-mode-map
 "C-H-M-s-z" 'org-shiftleft
 "C-H-M-s-x" 'org-shiftup
 "C-H-M-s-c" 'org-shiftdown
 "C-H-M-s-v" 'org-shiftright
 "C-H-M-s-a" 'org-metaleft
 "C-H-M-s-s" 'org-metaup
 "C-H-M-s-d" 'org-metadown
 "C-H-M-s-f" 'org-metaright
 "C-H-M-s-q" 'org-shiftmetaleft
 "C-H-M-s-w" 'org-shiftmetaup
 "C-H-M-s-e" 'org-shiftmetadown
 "C-H-M-s-r" 'org-shiftmetaright)
#+end_src

** element
:PROPERTIES:
:ID:       9C2CB01F-9F9A-4E92-9722-4EEB3A603BE3
:END:

Create function that copies the element at point. Possible elements include sexp, url, subtree, code block.

** region
:PROPERTIES:
:ID:       AF9DC82D-B70E-486C-A26C-D82C6E63B1EC
:END:
:LOGBOOK:
CLOCK: [2021-05-30 Sun 11:16]--[2021-05-30 Sun 12:16] =>  1:00
CLOCK: [2021-05-29 Sat 19:02]--[2021-05-29 Sat 19:52] =>  0:50
:END:

The following function, adapted from [[https://stackoverflow.com/a/8956311/4479455][this answer]], makes ~kill-region~ work only when there is an active selection; otherwise it will kill the entire line.

#Minimal config
#+begin_src emacs-lisp :results silent
(defun ps/smart-kill-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'kill-region)
    (call-interactively 'kill-whole-line)))

(defun ps/smart-delete-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'delete-region)
    (call-interactively 'ps/delete-whole-line)))

(defun ps/smart-copy-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'copy-region-as-kill)
    (call-interactively 'ps/copy-whole-line)))

(general-define-key
 "H-c" 'ps/smart-copy-region
 "H-x" 'ps/smart-kill-region
 "H-X" 'ps/smart-delete-region)
#+end_src

** misc.
:PROPERTIES:
:ID:       ECC26808-6B27-4CD8-AF52-570B877A6F26
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
;; github.com/typester/emacs/blob/master/lisp/url/url-util.el
(defun ps/get-url-at-point (&optional pt)
  "Get the URL closest to point, but don't change position.
Has a preference for looking backward when not directly on a symbol."
  ;; Not at all perfect - point must be right in the name.
  (save-excursion
    (if pt (goto-char pt))
    (let (start url)
      (save-excursion
        ;; first see if you're just past a filename
        (if (not (eobp))
            (if (looking-at "[] \t\n[{}()]") ; whitespace or some parens
                (progn
                  (skip-chars-backward " \n\t\r({[]})")
                  (if (not (bobp))
                      (backward-char 1)))))
        (if (and (char-after (point))
                 (string-match (eval-when-compile
                                 (concat "[" "-%.?@a-zA-Z0-9()_/:~=&" "]"))
                               (char-to-string (char-after (point)))))
            (progn
              (skip-chars-backward "-%.?@a-zA-Z0-9()_/:~=&")
              (setq start (point))
              (skip-chars-forward "-%.?@a-zA-Z0-9()_/:~=&"))
          (setq start (point)))
        (setq url (buffer-substring-no-properties start (point))))
      (if (and url (string-match "^(.*)\\.?$" url))
          (setq url (match-string 1 url)))
      (if (and url (string-match "^URL:" url))
          (setq url (substring url 4 nil)))
      (if (and url (string-match "\\.$" url))
          (setq url (substring url 0 -1)))
      (if (and url (string-match "^www\\." url))
          (setq url (concat "http://" url)))
      (if (and url (not (string-match url-nonrelative-link url)))
          (setq url nil))
      url)))

(defun ps/strip-url ()
  "Strip URL of unnecessary elements."
  (interactive)
  (unless (ps/get-url-at-point)
    (error "No URL at point."))
  (let* ((url-original (ps/get-url-at-point))
         (url-stripped (replace-regexp-in-string "\\(?:https?://\\)?\\(?:www.\\)?" "" url-original)))
    (search-backward " ")
    (while (search-forward url-original nil t)
      (replace-match url-stripped nil t))
    (search-backward url-stripped)))

(defun ps/strip-thing-at-point ()
  "Strip thing at point. (To be expanded.)"
  (interactive)
  (cond ((ps/get-url-at-point)
         (ps/strip-url)))
  (just-one-space 0))

(general-define-key
 "C-H-M-b" 'ps/strip-thing-at-point)
#+end_src

** kill ring
:PROPERTIES:
:ID:       CB2EA5F8-B566-466D-8CCA-1DA7F99591BA
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :custom
  (kill-ring-max 500)
  (save-interprogram-paste-before-kill t) ; add system clipboard to kill ring

  :config
  (defun ps/yank-pop-forward (arg)
    (interactive "p")
    (yank-pop (- arg)))

  (defun ps/yank-and-pop ()
    "Yank, then pop the last kill off the ring."
    (interactive)
    (yank)
    (when kill-ring
      (setq kill-ring (cdr kill-ring)))
    (when kill-ring-yank-pointer
      (setq kill-ring-yank-pointer kill-ring))
    (message "Last kill popped off kill-ring."))

  :general
  ("H-v" 'yank
   "H-A-v" 'ps/yank-and-pop))
#+end_src

* editing
:PROPERTIES:
:ID:       D06BE38F-DFC1-47DC-8F2C-FE2F1A437227
:END:

** simple
:PROPERTIES:
:ID:       D3A1830F-6A23-4DD3-99D3-2E582B79EA35
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :custom
  (shift-select-mode nil "Shift keys do not activate the mark momentarily.")
  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p)
  (eval-expression-print-level nil)
  (eval-expression-print-length nil)
  (print-level nil)
  (print-length nil)

  :config
  (column-number-mode)

  ;; spwhitton.name/blog/entry/transient-mark-mode/
  (defun ps/exchange-point-and-mark (arg)
    "Exchange point and mark, but reactivate mark a bit less often.

Specifically, invert the meaning of ARG in the case where
Transient Mark mode is on but the region is inactive."
    (interactive "P")
    (exchange-point-and-mark
     (if (and transient-mark-mode (not mark-active))
         (not arg)
       arg)))

  (defun ps/visible-mode-enhanced ()
    "Toggle `visible-mode' as well as appropriate actions associated
with the current major mode."
    (interactive)
    (if visible-mode
        (progn
          (visible-mode -1)
          (org-display-inline-images)
          (org-modern-mode))
      (visible-mode)
      (org-remove-inline-images)
      (org-modern-mode -1)))


  :general
  ("A-H-e" 'eval-defun
   "C-A-e" 'eval-expression
   "C-e" 'eval-last-sexp
   "H-M"  'ps/exchange-point-and-mark
   "H-m" 'set-mark-command
   "H-Z" 'undo-redo
   "M-A-i" 'visual-line-mode
   "M-o" 'downcase-dwim
   "M-q" 'save-buffers-kill-terminal
   "M-u" 'capitalize-dwim
   "M-v" 'ps/visible-mode-enhanced
   "M-w" 'count-words-region
   "H-z" 'undo-only))
#+end_src

*** TODO [#5] Post StackExchange question
:PROPERTIES:
:ID:       BDB38FE9-8E13-4D36-9302-121894A328AF
:END:
https://emacs.stackexchange.com/questions/46186/how-to-expand-truncated-information-displayed-in-the-echo-area/46189?noredirect=1#comment121798_46189
** repeat
:PROPERTIES:
:ID:       000730A4-2F70-4842-BD3E-2B843875D6EB
:END:
#+begin_src emacs-lisp :results silent
(use-feature repeat
  :general
  ("M-r" 'repeat
   "A-M-r" 'repeat-complex-command))
#+end_src

** view
:PROPERTIES:
:ID:       796E696E-E797-4EDF-B4AC-2436507A1EFC
:END:
#+begin_src emacs-lisp :results silent
(use-feature view
  :general
  ("M-A-v" 'view-mode))
#+end_src

** newcomment
:PROPERTIES:
:ID:       AF32F54D-13C4-4AF9-9CF5-EB7D671E84E6
:END:
#+begin_src emacs-lisp :results silent
(use-feature newcomment
  :general
  ("M-/" 'comment-line))
#+end_src

** indent
:PROPERTIES:
:ID:       584EE793-F2D0-4C21-A3C2-FF93C5B5F2F1
:END:
[2022-10-03 Mon 23:34] ~use-feature indent~ fails. The variable ~features~ doesn't list an ~indent~ feature, but the relevant variables and functions /are/ defined in ~indent.el.gz~!

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :custom
  (tab-always-indent 'complete)

  :config
  ;; Adapted from `spacemacs/indent-region-or-buffer'.
  (defun ps/indent-dwim ()
    "Indent a region if selected, otherwise if point is on code block
indent block only, else indent whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (if (when (derived-mode-p 'org-mode)
              (org-in-src-block-p))
            (let ((org-src-tab-acts-natively t))
              (org-narrow-to-block)
              (indent-region (point-min) (point-max) nil)
              (ps/org-widen-and-reveal))
          (indent-region (point-min) (point-max) nil)
          (message "Indented buffer.")))
      (whitespace-cleanup)))

  :general
  ("M-i" 'ps/indent-dwim))
#+end_src

** sort
:PROPERTIES:
:ID:       64011AE8-B6DF-413B-A8CD-EF4E133272BD
:END:
#+begin_src emacs-lisp :results silent
(use-feature sort
  :custom
  (sort-fold-case t)
  :general
  ("C-t" 'sort-lines))
#+end_src

** outline
:PROPERTIES:
:ID:       286464A9-EB12-4351-A980-D9D837BDEABB
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 11:33]--[2021-06-05 Sat 11:49] =>  0:16
CLOCK: [2021-05-31 Mon 21:21]--[2021-05-31 Mon 21:27] =>  0:06
CLOCK: [2021-04-02 Fri 16:48]--[2021-04-02 Fri 16:59] =>  0:11
CLOCK: [2021-03-28 Sun 08:40]--[2021-03-28 Sun 10:35] =>  1:55
CLOCK: [2021-03-27 Sat 18:01]--[2021-03-27 Sat 19:53] =>  1:52
CLOCK: [2021-06-06 Sun 13:00]--[2021-06-06 Sun 13:19] =>  0:19
:END:
#+begin_src emacs-lisp :results silent
(use-feature outline
  :general
  ((outline-mode-map outline-minor-mode-map)
   "TAB" 'outline-cycle
   "<backtab>" 'outline-cycle-buffer
   "A-C-s-r" 'outline-backward-same-level
   "A-C-s-f" 'outline-forward-same-level))
#+end_src

*** TODO [#5] Fix interference problem with ~outline-mode~ commands when movement keys are pressed while ~shift~ is held
:PROPERTIES:
:Effort:   1:00
:ID:       D62DC0EE-B57D-46B7-8591-D476EAC88875
:END:
:LOGBOOK:
CLOCK: [2021-11-26 Fri 10:23]--[2021-11-26 Fri 10:34] =>  0:00
:END:
E.g. press ~shift + nextword~ in ~emacs-lisp-mode~.

** ediff
:PROPERTIES:
:ID:       987C9066-28ED-4B5A-944C-A90681182264
:END:
#+begin_src emacs-lisp :results silent
(use-feature ediff
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** fill
:PROPERTIES:
:ID:       FC4A89FD-8A66-49A6-ADB3-7895A85CBFD0
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 08:57]--[2021-09-29 Wed 09:07] =>  0:10
:END:

#+begin_src emacs-lisp :results silent
(use-feature fill
  :init
  ;; endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
  (defun ps/fill-or-unfill-paragraph ()
    "Like `fill-paragraph', but unfill if used twice."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ps/fill-or-unfill-paragraph)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  :general
  ("A-M-f" 'ps/fill-or-unfill-paragraph))
#+end_src

*** TODO [#7] Create function to remove hyphens when filling paragraph
:PROPERTIES:
:Effort:   0:45
:ID:       30E1AE1C-3335-4D05-85D4-4C903F8D542F
:END:
https://stackoverflow.com/questions/42595418/how-to-remove-hyphens-during-fill-paragraph
include this special hyphen: ­
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       1FC444AF-7AA6-4D5A-AC81-966D57FB9377
:END:
**** DONE Fix ps/org-copy-heading-contents
CLOSED: [2021-05-06 Thu 11:08]
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-06 Thu 11:08
:ID:       5D466866-3B5F-41D9-9B03-126B51CA8830
:END:
:LOGBOOK:
CLOCK: [2021-05-06 Thu 11:02]--[2021-05-06 Thu 11:08] =>  0:06
:END:

** abbrev
:PROPERTIES:
:ID:       2D69896F-CF17-4D0C-BEFE-E7C473FB1C2B
:END:
#+begin_src emacs-lisp :results silent
(use-feature abbrev
  :custom
  (save-abbrevs 'silently)
  (abbrev-file-name (file-name-concat ps/dir-abbrev "abbrev_defs"))

  :config
  (setq-default abbrev-mode t))
#+end_src

*** TODO Add these abbrevs
:PROPERTIES:
:ID:       E276F182-573B-4773-8B44-048605A60271
:END:
- [[http://xahlee.info/emacs/emacs/emacs_abbrev_mode_tutorial.html][Emacs: Abbrev Mode by Commands]]
- [[https://impaktor.gitlab.io/dot_emacs.html#org87d6718][My .emacs]]

** yasnippet
:PROPERTIES:
:ID:       6405B8E7-6612-4D71-8C2C-A51F8808F4C6
:END:
:LOGBOOK:
CLOCK: [2022-10-01 Sat 13:23]--[2022-10-01 Sat 13:26] =>  0:03
CLOCK: [2021-11-11 Thu 14:05]--[2021-11-11 Thu 14:09] =>  0:04
CLOCK: [2021-10-28 Thu 19:00]--[2021-10-28 Thu 19:56] =>  0:56
CLOCK: [2021-10-13 Wed 21:01]--[2021-10-13 Wed 21:13] =>  0:12
CLOCK: [2021-10-02 Sat 14:55]--[2021-10-02 Sat 15:48] =>  0:53
CLOCK: [2021-06-01 Tue 17:08]--[2021-06-01 Tue 17:30] =>  0:22
CLOCK: [2021-03-16 Tue 17:07]--[2021-03-16 Tue 17:24] =>  0:17
CLOCK: [2021-08-14 Sat 10:36]--[2021-08-14 Sat 10:49] =>  0:13
CLOCK: [2021-07-29 Thu 19:15]--[2021-07-29 Thu 19:22] =>  0:07
CLOCK: [2021-07-26 Mon 20:38]--[2021-07-26 Mon 20:39] =>  0:01
CLOCK: [2021-07-24 Sat 10:00]--[2021-07-24 Sat 10:21] =>  0:21
CLOCK: [2021-06-25 Fri 15:35]--[2021-06-25 Fri 16:19] =>  0:44
CLOCK: [2021-06-23 Wed 21:05]--[2021-06-23 Wed 21:14] =>  0:09
CLOCK: [2021-05-05 Wed 20:55]--[2021-05-05 Wed 21:05] =>  0:10
CLOCK: [2021-04-05 Mon 15:35]--[2021-04-05 Mon 15:49] =>  0:14
CLOCK: [2021-04-04 Sun 21:36]--[2021-04-04 Sun 22:00] =>  0:24
CLOCK: [2021-04-04 Sun 20:52]--[2021-04-04 Sun 21:35] =>  0:43
CLOCK: [2021-03-20 Sat 12:15]--[2021-03-20 Sat 12:17] =>  0:02
CLOCK: [2021-03-07 Sun 11:00]--[2021-03-07 Sun 11:01] =>  0:01
CLOCK: [2021-02-04 Thu 21:02]--[2021-02-04 Thu 21:19] =>  0:17
:END:

To suppress warnings when a snippet executes elisp code, you may want to configure the ~warnings~ feature [[id:C8FB5BC6-6895-4D63-86A8-E49D6BB3001C][accordingly]].

#+begin_src emacs-lisp :results silent
(use-package yasnippet
  :defer 5
  :init
  (setq yas-snippet-dirs `(,ps/dir-yasnippets))

  :custom
  (yas-triggers-in-field t "allow stacked expansions")

  :config
  (yas-global-mode 1)
  (yas-reload-all)
  (add-to-list 'warning-suppress-log-types '(yasnippet backquote-change))

  ;; FIXME: this isn't working properly, unlike the `ps/yasnippet-expand-by-key' command
  (defun ps/yasnippet-expand-by-name (name)
    "Expand the yasnippet named `snippet'."
    (yas-expand-snippet (yas-lookup-snippet name)))

  (defun ps/yasnippet-expand-by-key (key)
    "Expand snippet whose key is KEY."
    (interactive)
    ;; `progn' wrapper needed to suppress elisp output when snippet triggered within another snippet
    ;; TODO: figure why this still fails when the snippet being triggered contains elisp code
    (progn
      (insert key)
      (yas-expand)
      nil))

  (defun ps/yasnippet-expand-code-block-snippet (key)
    "Expand code block snippet and edit block in separate buffer."
    (ps/yasnippet-expand-by-key key)
    (org-previous-block nil)
    (org-edit-src-code))

  (defvar yas-new-snippet-default "# -*- mode: snippet -*-\n# name: $1\n# key: ${2:${1:$(yas--key-from-desc yas-text)}}\n# --\n$0")

  (defvar ps/yas-new-snippet-tlon "# -*- mode: snippet -*-\n# name: tlon-${1:name-of-snippet}\n# key: t${2:shortcut}\n# --\n$0\\`(ps/insert-date)\\` \\$1\n	${3:account1}:\\$5  \\$2.00 \\${3:\\$\\$(yas-choose-value '('USD' 'EUR' 'GBP'))} ; \\$4\n	${4:account2}:")

  (defun ps/yas-new-tlon-snippet (&optional no-template)
    "Pops a new buffer for writing a snippet.

Expands a snippet-writing snippet, unless the optional prefix arg
NO-TEMPLATE is non-nil."
    (interactive "P")
    (let ((guessed-directories (yas--guess-snippet-directories))
          (yas-selected-text (or yas-selected-text
                                 (and (region-active-p)
                                      (buffer-substring-no-properties
                                       (region-beginning) (region-end))))))

      (switch-to-buffer yas-new-snippet-buffer-name)
      (erase-buffer)
      (kill-all-local-variables)
      (snippet-mode)
      (yas-minor-mode 1)
      (set (make-local-variable 'yas--guessed-modes)
           (mapcar (lambda (d) (yas--table-mode (car d)))
                   guessed-directories))
      (set (make-local-variable 'default-directory)
           (car (cdr (car guessed-directories))))
      (if (and (not no-template) ps/yas-new-snippet-tlon)
          (yas-expand-snippet ps/yas-new-snippet-tlon))))

  :general
  ("C-y" 'yas-new-snippet)
  (minibuffer-mode-map
   "TAB" 'yas-maybe-expand))
#+end_src

*** Metaculus
:PROPERTIES:
:ID:       655BDD93-46BA-4AF5-B5C8-1CDDEC4F3DCC
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-yasnippet-Metaculus
  (:exit t
         :idle 0.5)
  "Metaculus yasnippets"
  ("c" (ps/yasnippet-expand-by-key "") "sticking to current") ; bound to C-s-p, I need to find the snippet
  ("d" (ps/yasnippet-expand-by-key "mdef") "defer")
  ("f" (ps/yasnippet-expand-by-key "mfinal") "final prediction")
  ("l" (ps/yasnippet-expand-by-key "mcs") "community split")
  ("m" (ps/yasnippet-expand-by-key "mpost") "post mortem")
  ("p" (ps/yasnippet-expand-by-key "mst") "sticking to previous")
  ("s" (ps/yasnippet-expand-by-key "msheet") "spreadsheet")
  ("t" (ps/yasnippet-expand-by-key "mpass") "passage of time"))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       068EBE9B-7485-48FB-89D8-3007DDE6072C
:END:
**** DONE [#6] Migrate text expansions to yas
CLOSED: [2021-11-17 Wed 23:08]
:PROPERTIES:
:Effort:   1:30
:ARCHIVE_TIME: 2021-11-17 Wed 23:08
:ID:       1FE83906-834C-479E-B87C-28AF1643B50A
:END:
:LOGBOOK:
CLOCK: [2021-11-17 Wed 22:22]--[2021-11-17 Wed 23:08] =>  0:46
:END:


**** DONE Make yasnippet work with Company
CLOSED: [2021-11-28 Sun 15:11]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-28 Sun 15:11
:ID:       EF474DB3-B8AB-40E6-99AF-65FE05F476FE
:END:
:LOGBOOK:
CLOCK: [2021-11-23 Tue 20:05]--[2021-11-23 Tue 20:29] =>  0:24
:END:

**** CANCELLED [#5] Create function to create new snippet
CLOSED: [2022-07-21 Thu 21:07]
:PROPERTIES:
:Effort:   0:30
:ID:       5CDF79C7-CD55-4B57-98C3-C6FF92FD0F55
:ARCHIVE_TIME: 2022-07-21 Thu 21:07
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 21:06]--[2022-07-21 Thu 21:07] =>  0:01
:END:

** hippie-expand
:PROPERTIES:
:ID:       06396799-A9FB-4417-AAE3-3654BC901B93
:END:
#+begin_src emacs-lisp :results silent
(use-feature hippie-expand
  :config
  ;; stackoverflow.com/a/8723712/4479455
  (defadvice hippie-expand (around hippie-expand-case-fold)
    "Try to do case-sensitive matching (not effective with all functions)."
    (let ((case-fold-search nil))
      ad-do-it))
  (ad-activate 'hippie-expand)

  :general
  ("M-<tab>" 'hippie-expand))
#+end_src

** expand-region
:PROPERTIES:
:ID:       8C9AE82C-9B5D-44D7-8FEE-1738032AD3C0
:END:
:LOGBOOK:
CLOCK: [2022-10-03 Mon 19:53]--[2022-10-03 Mon 22:42] =>  2:49
CLOCK: [2021-06-03 Thu 15:47]--[2021-06-03 Thu 16:04] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-package expand-region
  :general
   ("C-H-s-n" 'er/expand-region
   "C-H-s-h" 'er/contract-region))
#+end_src

** multiple-cursors
:PROPERTIES:
:ID:       E3F6EB63-D6C1-474C-9129-B6424852EEC8
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:17] =>  0:00
:END:

#+begin_src emacs-lisp :results silent
(use-package multiple-cursors
  :general
  ("M-m" 'mc/mark-pop))
#+end_src

*** TODO [#5] Check out multiple cursors hydra
:PROPERTIES:
:Effort:   0:30
:ID:       06166AE5-4925-43F0-8DCE-8F919CD0DCFD
:END:
:LOGBOOK:
CLOCK: [2021-08-10 Tue 16:34]--[2021-08-10 Tue 16:50] =>  0:16
:END:
** crux
:PROPERTIES:
:ID:       B7CD0E70-E601-4EEC-B51F-82F94ECA32BA
:END:
:LOGBOOK:
CLOCK: [2022-06-08 Wed 17:31]--[2022-06-08 Wed 17:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:18] =>  0:01
:END:

#+begin_src emacs-lisp :results silent
(use-package crux
  :config
  ;; Modified version of `crux-smart-open-line' to handle cases when
  ;; command is invoked on an org heading, which results in an
  ;; invisible new line.
  (defun ps/crux-smart-open-line (arg)
    "Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode.

With a prefix ARG open line above the current line."
    (interactive "P")
    (ps/visible-mode-enhanced)
    (if arg
        (crux-smart-open-line-above)
      (move-end-of-line nil)
      (when (or (org-at-heading-p) (org-at-drawer-p) (org-at-timestamp-p))
        (org-end-of-meta-data t)
        (when (eq org-cycle-subtree-status 'folded)
          (show-subtree)))
      (newline-and-indent))
    (ps/visible-mode-enhanced))

  :general
  ("M-l" 'ps/crux-smart-open-line
   "M-A-l" (lambda! (ps/crux-smart-open-line t))
   "H-A-l" 'crux-duplicate-current-line-or-region))
#+end_src

** button
:PROPERTIES:
:ID:       38C9C0A7-5979-4656-879D-F71638FCF40D
:END:

#+begin_src emacs-lisp :results silent
(use-feature button
  :general
  ("A-C-M-s-j" 'backward-button
   "A-C-M-s-;" 'forward-button)
  (telega-chat-mode-map
   "M-RET" 'push-button))
#+end_src

** back-button
:PROPERTIES:
:ID:       59041577-18F8-4336-80FF-4CC8C7AA7814
:END:

#+begin_src emacs-lisp :results silent
(use-package back-button
  ;; :defer 25
  :config
  (back-button-mode 1)
  :general
  ("H-," 'back-button-local-backward
   "H-." 'back-button-local-forward
   "H-<" 'back-button-global-backward
   "H->" 'back-button-global-forward))
#+end_src

** goto-last-change
:PROPERTIES:
:ID:       DD6DA81B-89B8-4881-A901-200A8CAF1974
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:18]--[2021-06-25 Fri 21:19] =>  0:01
:END:

#+begin_src emacs-lisp :results silent
(use-package goto-last-change
  :general
  ("C-z" 'goto-last-change))
#+end_src

** titlecase
:PROPERTIES:
:ID:       32939B31-3D76-4D0F-B898-24FF740AA595
:END:
#+begin_src emacs-lisp :results silent
(use-package titlecase)
#+end_src

* registers & bookmarks
:PROPERTIES:
:ID:       E40A01AD-2B18-4B98-83E9-5E78D1E7195F
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 16:15]--[2021-07-29 Thu 16:23] =>  0:08
CLOCK: [2021-04-05 Mon 15:34]--[2021-04-05 Mon 15:35] =>  0:01
:END:
** registers
:PROPERTIES:
:ID:       893A2A5B-707A-4C9A-9E25-414DC663F2CD
:END:
:LOGBOOK:
CLOCK: [2021-07-30 Fri 21:35]--[2021-07-30 Fri 22:18] =>  0:43
CLOCK: [2021-07-30 Fri 21:16]--[2021-07-30 Fri 21:31] =>  0:15
:END:
#+begin_src emacs-lisp :results silent
(use-feature register
  :config
  (defhydra hydra-register
  (:hint nil
  :color blue)
    "
_c_opy        |_n_umber      |p_o_int
_i_nsert      |incremen_t_   |_j_ump        |   _f_rame    | _l_ist
------------^^+------------^^+------------^^+  frame_s_et  + _v_iew       ||_q_uit||
_p_repend     |_r_ectangle   |_u_ndo        |   _w_indow   | _h_elm
_a_pend       |_k_macro      |r_e_store                    "
    ;; text
    ("c" copy-to-register)
    ("i" insert-register)
    ("p" prepend-to-register)
    ("a" append-to-register)
    ;; number
    ("n" number-to-register)
    ("t" increment-register)
    ;; rectangle/kmacro
    ("r" copy-rectangle-to-register)
    ("k" kmacro-to-register)
    ;; position
    ("o" point-to-register)
    ("j" jump-to-register)
    ;; undo
    ("u" undo-tree-save-state-to-register)
    ("e" undo-tree-restore-state-from-register)
    ;; windows
    ("w" window-configuration-to-register)
    ("f" frame-configuration-to-register)
    ("s" frameset-to-register)
    ;; view
    ("v" view-register)
    ("l" list-registers)
    ("h" consult-register)
    ("q" nil))
  :general
  ("C-r" 'hydra-register/body))
#+end_src
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       1BCDDAC7-B567-45E9-AA32-6DEB2AE511AB
:END:
**** DONE [#6] Make registers persistent
CLOSED: [2021-07-31 Sat 22:32]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-07-31 Sat 22:32
:ID:       4FE77B50-6C59-48A8-AD45-EA9D3F98D399
:END:
:LOGBOOK:
CLOCK: [2021-06-13 Sun 18:31]--[2021-06-13 Sun 18:36] =>  0:05
CLOCK: [2021-06-13 Sun 18:24]--[2021-06-13 Sun 18:28] =>  0:04
:END:
You can do it with ~desktop~ or by adding ~register-alist~ to ~savehist~. I did the latter.
https://emacs.stackexchange.com/questions/16919/how-can-i-get-sessions-el-to-save-my-registers
** bookmarks
:PROPERTIES:
:ID:       943D5DC0-7F0E-449C-8D21-089E051F1027
:END:
#+begin_src emacs-lisp :results silent
(use-feature bookmark
  :custom
  (bookmark-default-file ps/file-bookmarks) ; Set location of bookmarks file
  (bookmark-save-flag 1)) ; Save bookmarks after each entry
#+end_src

To check: [[https://irreal.org/blog/?p=9969][Prot on Bookmarks | Irreal]] (bookmarking web pages, in particular, is something I may want to look into)

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       FFF624AA-7778-4C0C-B513-E89E8310504E
:END:
*** CANCELLED Check out bookmarks plus
CLOSED: [2021-04-15 Thu 12:49]
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-15 Thu 12:49
:ID:       D6332D17-BF50-44BB-A59D-F4ECF3838ACF
:END:
* files & buffers
:PROPERTIES:
:ID:       B29F4586-2B8D-41FE-82DE-FEDCD863C74B
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:05]--[2022-07-14 Thu 20:14] =>  0:09
CLOCK: [2022-07-09 Sat 20:43]--[2022-07-09 Sat 21:51] =>  1:08
CLOCK: [2022-06-12 Sun 13:10]--[2022-06-12 Sun 13:15] =>  0:05
CLOCK: [2022-06-10 Fri 21:15]--[2022-06-10 Fri 22:23] =>  1:08
CLOCK: [2022-05-15 Sun 10:34]--[2022-05-15 Sun 12:02] =>  1:28
CLOCK: [2022-05-15 Sun 10:25]--[2022-05-15 Sun 10:34] =>  0:09
CLOCK: [2022-05-05 Thu 23:03]--[2022-05-05 Thu 23:31] =>  0:28
CLOCK: [2021-12-03 Fri 19:50]--[2021-12-03 Fri 20:15] =>  0:25
CLOCK: [2021-11-19 Fri 20:55]--[2021-11-19 Fri 21:02] =>  0:07
CLOCK: [2021-10-20 Wed 20:49]--[2021-10-20 Wed 21:01] =>  0:12
CLOCK: [2021-09-26 Sun 21:50]--[2021-09-26 Sun 22:07] =>  0:17
CLOCK: [2021-09-26 Sun 19:31]--[2021-09-26 Sun 20:06] =>  0:35
CLOCK: [2021-09-18 Sat 19:01]--[2021-09-18 Sat 19:15] =>  0:14
CLOCK: [2021-08-17 Tue 09:05]--[2021-08-17 Tue 09:22] =>  0:17
CLOCK: [2021-07-25 Sun 12:58]--[2021-07-25 Sun 13:03] =>  0:05
CLOCK: [2021-06-09 Wed 21:29]--[2021-06-09 Wed 21:36] =>  0:07
CLOCK: [2021-06-10 Thu 19:20]--[2021-06-10 Thu 19:46] =>  0:26
CLOCK: [2021-05-27 Thu 07:31]--[2021-05-27 Thu 07:45] =>  0:14
CLOCK: [2021-05-21 Fri 18:03]--[2021-05-21 Fri 18:12] =>  0:09
CLOCK: [2021-05-20 Thu 18:17]--[2021-05-20 Thu 18:21] =>  0:04
CLOCK: [2021-04-07 Wed 16:18]--[2021-04-07 Wed 16:25] =>  0:07
CLOCK: [2021-04-05 Mon 09:14]--[2021-04-05 Mon 09:20] =>  0:06
CLOCK: [2021-04-03 Sat 10:07]--[2021-04-03 Sat 10:19] =>  0:12
CLOCK: [2021-04-02 Fri 11:08]--[2021-04-02 Fri 11:14] =>  0:06
CLOCK: [2021-04-02 Fri 10:10]--[2021-04-02 Fri 10:40] =>  0:30
CLOCK: [2021-04-02 Fri 09:48]--[2021-04-02 Fri 10:02] =>  0:14
CLOCK: [2021-03-30 Tue 09:02]--[2021-03-30 Tue 09:10] =>  0:08
CLOCK: [2021-03-23 Tue 18:00]--[2021-03-23 Tue 18:38] =>  0:38
CLOCK: [2021-03-22 Mon 21:49]--[2021-03-22 Mon 22:38] =>  0:49
CLOCK: [2021-04-09 Fri 11:49]--[2021-04-09 Fri 11:49] =>  0:00
:END:

** files
:PROPERTIES:
:ID:       A7E824CC-5E71-4B12-A99B-D4C09CE164FF
:END:
:LOGBOOK:
CLOCK: [2022-08-19 Fri 13:45]--[2022-08-19 Fri 13:47] =>  0:02
CLOCK: [2021-07-24 Sat 21:09]--[2021-07-24 Sat 21:34] =>  0:25
CLOCK: [2021-07-24 Sat 20:41]--[2021-07-24 Sat 20:46] =>  0:05
CLOCK: [2021-07-01 Thu 20:45]--[2021-07-01 Thu 20:55] =>  0:10
CLOCK: [2021-02-07 Sun 13:37]--[2021-02-07 Sun 13:54] =>  0:17
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature files
  :custom
  (confirm-kill-processes nil "Do not prompt to kill running processes when quitting Emacs")
  (delete-by-moving-to-trash t)
  (trash-directory "~/.Trash" "fallback for `move-file-to-trash'")
  (find-file-visit-truename t)
  (kill-buffer-query-functions nil "emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation")
  (create-lockfiles nil "lockfiles are indexed by `org-roam', which causes problems with `org-agenda'")
  (large-file-warning-threshold (* 200 1000 1000))
  (enable-local-variables :all)
  (insert-directory-program "/opt/homebrew/bin/gls" "use coreutils to avoid 'listing directory failed' error")

  (auto-save-no-message t "don't emit message when auto-saving")
  (backup-by-copying t "don't clobber symlink")
  (kept-new-versions 100 "keep 100 latest versions")
  (kept-old-versions 10 "keep 10 earliest versions")
  (delete-old-versions t "don't ask about deleting old versions")
  (version-control t "number backups")

  :config
  ;; christiantietze.de/posts/2021/06/emacs-trash-file-macos/
  (defun system-move-file-to-trash (path)
    "Moves file at PATH to the macOS Trash according to `move-file-to-trash' convention.

Requires the command-line utility `trash' (`brew install trash')."
    (shell-command (concat "trash -vF \"" path "\""
                           "| sed -e 's/^/Trashed: /'")
                   nil ;; Name of output buffer
                   "*Trash Error Buffer*"))

  (defun ps/save-and-revert-buffer ()
    "Save buffer, then revert it."
    (interactive)
    (save-buffer)
    (revert-buffer nil t))

  (defun ps/bury-scratch-buffer ()
    "When trying to kill `*scratch' buffer, bury it instead."
    (if (not (equal (buffer-name) "*scratch*"))
        t
      (bury-buffer)
      nil))

  (add-hook 'kill-buffer-query-functions #'ps/bury-scratch-buffer)

  (defun ps/org-id-goto (id &optional arg)
    "Open ID even if narrowed."
    (dotimes (i 2)
      (ps/org-widen-and-reveal)
      (org-id-goto id))
    (ps/org-narrow-to-entry-and-children))

  ;; Adapted from `spacemacs/new-empty-buffer'.
  (defun ps/new-empty-buffer (&optional)
    "Create a new buffer called `untitled<n>'."
    (interactive)
    (let ((newbuf (generate-new-buffer "untitled")))
      ;; Prompt to save on `save-some-buffers' with positive PRED
      (with-current-buffer newbuf
        (setq-local buffer-offer-save t)
        (when ps/new-empty-buffer-major-mode
          (funcall ps/new-empty-buffer-major-mode)))
      (switch-to-buffer newbuf nil 'force-same-window)))


  (defun ps/new-buffer-in-current-mode ()
    "Create a new buffer in the same major mode
as the current buffer."
    (interactive)
    (let ((buffer-name (generate-new-buffer "untitled"))
          (buffer-major-mode major-mode))
      (cond ((eq buffer-major-mode 'shell-mode)
             (shell))
            ((eq buffer-major-mode 'eshell-mode)
             (eshell))
            (t
             ;; Prompt to save on `save-some-buffers' with positive PRED
             (with-current-buffer buffer-name
               (setq-local buffer-offer-save t)
               (funcall buffer-major-mode))
             (switch-to-buffer buffer-name nil 'force-same-window)))))

  (defun ps/new-empty-buffer-other-window ()
    "Create a new buffer called `untitled<n>' in other window."
    (interactive)
    (ps/switch-to-last-window)
    (ps/new-empty-buffer))

  (defun ps/save-all-buffers ()
    "Save all file-visiting buffers."
    (interactive)
    (save-some-buffers
     `(4)))

  (defun ps/visit-file-or-switch-to-buffer (thing)
    "Visit file or switch to corresponding file-visiting buffer."
    (interactive)
    (if (get-buffer thing)
        (switch-to-buffer thing)
      (find-file thing)))

  (defun ps/org-show-subtree-hide-drawers ()
    (outline-hide-subtree)
    (org-show-entry)
    (org-show-children))

  (defun ps/org-narrow-to-entry-and-children ()
    "Narrow org buffer to entry and all its children."
    (interactive)
    (org-narrow-to-subtree)
    (ps/org-show-subtree-hide-drawers))

  (defun ps/org-narrow-to-entry-no-children ()
    "Narrow org buffer to entry excluding all children."
    (interactive)
    (org-narrow-to-subtree)
    (save-excursion
      (org-next-visible-heading 1)
      (narrow-to-region (point-min) (point))))

  (defun ps/org-widen-and-reveal ()
    "Widen and reveal subtree."
    (interactive)
    (widen)
    (org-reveal nil))

  (defun ps/eval-region-or-buffer ()
    "Evaluate a region if selected, otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (eval-region (region-beginning) (region-end))
      (eval-buffer)))

  ;; Adapted from alphapapa: reddit.com/r/orgmode/comments/fuvdqv/org_notetaking_workflow_with_orgroam/fmhl3ml/
  (defun ps/org-to-indirect-buffer ()
    "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
    (interactive "P")
    (let* ((new-buffer-p)
           (pos (point))
           (buffer-name (let* ((heading (org-get-heading t t))
                               (level (org-outline-level))
                               (face (intern (concat "outline-" (number-to-string level))))
                               (heading-string (propertize (org-link-display-format heading)
                                                           'face face)))
                          (concat heading-string "::" (buffer-name))))
           (new-buffer (or (get-buffer buffer-name)
                           (prog1 (condition-case nil
                                      (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                    (error (make-indirect-buffer (current-buffer) buffer-name)))
                             (setq new-buffer-p t)))))
      (switch-to-buffer new-buffer)
      (when new-buffer-p
        ;; I don't understand why setting the point again is necessary, but it is.
        (goto-char pos)
        (rename-buffer buffer-name)
        (org-narrow-to-subtree))))

  (defun ps/get-alternate-buffer ()
    "Return name of last buffer active in the current window."
    (let ((current-buffer (window-buffer))
          (buffer-predicate
           (frame-parameter (window-frame) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (or (cl-find-if (lambda (buffer)
                        (and (not (eq buffer current-buffer))
                             (or (null buffer-predicate)
                                 (funcall buffer-predicate buffer))))
                      (mapcar #'car (window-prev-buffers)))
          ;; `other-buffer' honors `buffer-predicate' so no need to filter
          (other-buffer current-buffer t))))

  (defun ps/switch-to-alternate-buffer ()
    "Switch to the last buffer active in the current window."
    (interactive)
    (switch-to-buffer (ps/get-alternate-buffer)))

  (defun ps/switch-to-other-alternate-buffer ()
    "Switch to the last buffer in the other window."
    (interactive)
    (other-window 1)
    (switch-to-buffer (ps/get-alternate-buffer)))

  ;; reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/
  (defun ps/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun ps/kill-other-buffer ()
    "Kill the buffer in the other window."
    (interactive)
    (save-window-excursion
      (other-window 1)
      (ps/kill-this-buffer)))

  (defun ps/kill-this-buffer-switch-to-other-window ()
    "Kill the current buffer and switch to the other window."
    (interactive)
    (ps/kill-this-buffer)
    (ps/switch-to-last-window))

  (defun ps/kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (defun ps/bury-buffer-switch-to-other-window ()
    "Bury the current buffer and switch to the other window."
    (interactive)
    (bury-buffer)
    (ps/switch-to-last-window))

  (defun ps/download-bypass-paywalls-chrome ()
    "Download and install `bypass-paywalls-chrome'."
    (interactive)
    (let ((file (file-name-concat ps/dir-downloads "bypass-paywalls.zip")))
      (url-copy-file "https://github.com/iamadamdev/bypass-paywalls-chrome/archive/master.zip" file)
      (shell-command (format "unzip %s -d %s" file ps/dir-downloads))
      (dired ps/dir-downloads)
      (goto-char (point-min))
      (search-forward "bypass-paywalls-chrome-master")
      (reveal-in-osx-finder)
      (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"89243CDA-4876-45C8-9AF2-3666664A0EAA\"'")))

  (defun ps/internet-archive-dwim ()
    "Convert or download ACSM file, depending on whether or not an
ACSM file is present in `ps/dir-downloads'."
    (interactive)
    (if (member "book.acsm" (directory-files ps/dir-downloads))
        (ps/internet-archive-convert-ACSM)
      (ps/internet-archive-download-ACSM)))

  (defun ps/internet-archive-download-ACSM ()
    "Download and open ACSM file from Internet Archive URL in kill
ring.

NB: You need to have previously borrowed the book for the command
to work. The command will work even if the book was borrowed for
one hour only."
    (if (string-search "archive.org" (current-kill 0))
        (let* ((prefix "https://archive.org/services/loans/loan/?action=media_url&identifier=")
               (suffix "&format=pdf&redirect=1")
               (id (replace-regexp-in-string
                    "\\(http.*?details/\\)\\([_[:alnum:]]*\\)\\(.*\\)"
                    "\\2"
                    (current-kill 0)))
               (url (concat prefix id suffix))
               (acsm-file (file-name-concat ps/dir-downloads "book.acsm")))
          ;; Download the Internet Archive cookies to a file so `wget' can authenticate:
          ;; askubuntu.com/questions/161778/how-do-i-use-wget-curl-to-download-from-a-site-i-am-logged-into
          ;; Then replace the path below with the location of the downloaded cookies file.
          (save-window-excursion
            (let ((shell-command-buffer-name-async "*internet-archive-download-ACSM*"))
              (async-shell-command
               (format
                "wget --load-cookies='%s' '%s' -O '%s'; open %s"
                ps/file-cookies url acsm-file acsm-file))))
          (message "ACSM file downloaded successfully."))
      (user-error "You forgot to copy the URL!")))

  (defun ps/internet-archive-convert-ACSM ()
    "Convert ACSM file to PDF."
    (let* ((adobe-file
            ;; stackoverflow.com/a/30887300/4479455
            (car (directory-files (file-name-as-directory ps/dir-ade) 'full "\\.pdf$" #'file-newer-than-file-p)))
           (output (shell-command-to-string (format "calibredb add '%s'" adobe-file)))
           ;; Capture Calibre book id
           (id (replace-regexp-in-string "\\(\\(\\(
\\|.\\)*\\)Added book ids: \\)\\([[:digit:]]\\)" "\\4" output))
           (calibre-file (car (directory-files-recursively ps/dir-calibre "\\.pdf$" t)))
           ;; Should match filename used in `ps/internet-archive-download-ACSM'
           (acsm-file (file-name-concat ps/dir-downloads "book.acsm")))
      (rename-file calibre-file (file-name-as-directory ps/dir-downloads))
      (shell-command (format "calibredb remove %s" id))
      (mapcar #'delete-file `(,adobe-file ,calibre-file))
      (delete-directory ps/dir-calibre t)
      (kill-buffer "*Shell Command Output*")
      (when (find-file acsm-file)
        (delete-file acsm-file)
        (kill-buffer))
      (message "ACSM file converted successfully.")))

  ;; Copied from emacs.stackexchange.com/a/24461/32089
  (defun ps/revert-all-file-buffers ()
    "Refresh all open file buffers without confirmation.
Buffers in modified (not yet saved) state in emacs will not be
reverted. They will be reverted though if they were modified
outside emacs. Buffers visiting files which do not exist any more
or are no longer readable will be killed."
    (interactive)
    (dolist (buf (buffer-list))
      (let ((filename (buffer-file-name buf)))
        ;; Revert only buffers containing files, which are not modified;
        ;; do not try to revert non-file buffers like *Messages*.
        (when (and filename
                   (not (buffer-modified-p buf)))
          (if (file-readable-p filename)
              ;; If the file exists and is readable, revert the buffer.
              (with-current-buffer buf
                (revert-buffer :ignore-auto :noconfirm :preserve-modes))
            ;; Otherwise, kill the buffer.
            (let (kill-buffer-query-functions) ; No query done when killing buffer
              (kill-buffer buf)
              (message "Killed non-existing/unreadable file buffer: %s" filename))))))
    (message "Finished reverting buffers containing unmodified files."))

  (defun ps/get-title (file)
    "Return title of buffer at point."
    (let (title)
      (when file
        (with-current-buffer
            (get-file-buffer file)
          (pcase (org-collect-keywords '("TITLE"))
            (`(("TITLE" . ,val))
             (setq title (car val)))))
        title)))

  ;; stackoverflow.com/a/44489067/4479455
  (defun ps/show-buffer-file-name ()
    "Show the full path to the current file in the minibuffer."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if file-name
          (progn
            (message file-name)
            (kill-new file-name))
        (error "Buffer not visiting a file"))))

  (defun ps/show-buffer-name ()
    "Show the full path to the current file in the minibuffer."
    (interactive)
    (let ((buffer-name (buffer-name)))
      (if buffer-name
          (progn
            (message buffer-name)
            (kill-new buffer-name))
        (error "Buffer not visiting a file"))))

  ;; On MacOS, `DS_Store' files can interfere with this command.
  ;; Disable their creation with
  ;; `defaults write com.apple.desktopservices DSDontWriteNetworkStores true'
  (defun ps/newest-file (path)
    "Get latest file (including directory) in PATH."
    (car
     (seq-find
      #'(lambda (x) (not (nth 1 x))) ; non-directory
      (sort
       (directory-files-and-attributes path 'full nil t)
       #'(lambda (x y) (time-less-p (nth 5 y) (nth 5 x)))))))

  (defun ps/switch-to-most-recent-buffer-in-mode (mode)
    "Switch to the most recent buffer in major mode MODE."
    (let (found)
      (catch 'done
        (mapc (lambda (x)
                (when (with-current-buffer x (eq major-mode mode))
                  (switch-to-buffer x)
                  (setq found t)
                  (throw 'done nil)))
              (buffer-list))
        (unless found
          (print "not found")))))

  ;; stackoverflow.com/questions/21486934/file-specific-key-binding-in-emacs/21493693#21493693
  (defun ps/buffer-local-set-key (key command)
    (interactive "KSet key buffer-locally: \nCSet key %s buffer-locally to command: ")
    (let ((oldmap (current-local-map))
          (newmap (make-sparse-keymap)))
      (when oldmap
        (set-keymap-parent newmap oldmap))
      (define-key newmap key command)
      (use-local-map newmap)))

  (defun ps/ocr-pdf (&optional parameters)
    "OCR the PDF file at point or visited by the current buffer."
    (interactive)
    ;; TODO: add disjunct to handle file at point in minibuffer.
    (let* ((filename (cond ((equal major-mode 'dired-mode) (dired-get-filename))
                           ((equal major-mode 'pdf-view-mode) (buffer-file-name))))
           (parameters (or parameters
                           (format "--force '%s' '%s'" filename filename)))
           (shell-command-buffer-name-async "*ocr-pdf*"))
      (async-shell-command (concat "ocrmypdf " parameters))))

  ;; we add `*ocr-pdf' buffer to list of buffers not to be displayed,
  ;; so that the process runs in the background`
  (push '("*ocr-pdf*" display-buffer-no-window) display-buffer-alist)

  (defun ps/kill-buffer ()
    "Ugly hack to kill buffer when
`citar-filenotify-rm-local-watches' prevents it."
    (interactive)
    (defun  citar-filenotify-rm-local-watches ())
    (kill-buffer)
    (defun  citar-filenotify-rm-local-watches ()
      "Delete the filenotify watches for the local bib files."
      (mapc #'file-notify-rm-watch citar-filenotify--local-watches)
      (setq citar-filenotify--local-watches 'uninitialized)))

  ;; Disable `dired-hide-details-mode' so that session dates are shown
  ;; when `recover-session' is invoked.
  (advice-add 'recover-session :after #'(lambda () (dired-hide-details-mode -1)))

  :general
  ("M--" 'not-modified
   "M-b" 'ps/save-and-revert-buffer
   "M-e" 'ps/eval-region-or-buffer
   "H-q" 'ps/kill-this-buffer
   "A-H-M-s-q" 'ps/kill-this-buffer-switch-to-other-window
   "A-H-q" 'ps/kill-other-buffer
   "H-n" 'ps/new-empty-buffer
   "H-N" 'ps/new-buffer-in-current-mode
   "H-a" 'mark-whole-buffer
   "H-s" 'save-buffer
   "H-S" 'ps/save-all-buffers
   "A-H-M-s-SPC" 'ps/switch-to-alternate-buffer
   "C-b" 'clone-indirect-buffer-other-window
   "H-C-g" 'abort-recursive-edit
   "H-C-S-g" 'top-level
   "H-C-A-g" 'keyboard-escape-quit) ; ESC ESC ESC
  ((messages-buffer-mode-map telega-root-mode-map)
   "q" 'bury-buffer)
  ((ebib-entry-mode-map ebib-index-mode-map)
   "H-q" 'bury-buffer
   "q" 'ps/bury-buffer-switch-to-other-window)
  ((apropos-mode-map calendar-mode-map completion-list-mode-map dired-mode-map Info-mode-map finder-mode-map ledger-reconcile-mode-map pass-mode-map slack-message-buffer-mode-map slack-thread-message-buffer-mode-map special-mode-map telega-msg-button-map tetris-mode-map view-mode-map w3m-mode-map)
   "q" 'ps/kill-this-buffer)
  ((dired-mode-map pdf-view-mode-map)
   "s-o" 'ps/ocr-pdf)
  ;; We typically enter these modes to lookup some information and
  ;; then return to the previous buffer, so we set `q' to switch to
  ;; the other window, and reserve `Q' for the normal behavior
  ((help-mode-map helpful-mode-map osx-dictionary-mode-map)
   "Q" 'ps/kill-this-buffer
   "q" 'ps/kill-this-buffer-switch-to-other-window)
  ((telega-chat-mode-map)
   "s-q" 'ps/kill-this-buffer))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       42EAFE0B-2444-43E0-B624-48A85C0DD24A
:END:
**** DONE [#5] Diagnose what's causing shutdown delay
CLOSED: [2022-06-21 Tue 15:35]
:PROPERTIES:
:Effort:   0:30
:ID:       3141238F-9B83-4AA4-8EC8-C48C7C126D7D
:ARCHIVE_TIME: 2022-06-21 Tue 15:35
:END:
Seems to have fixed itself.

** f
:PROPERTIES:
:ID:       4FD6758A-4021-4B05-BD36-BB09C2063C93
:END:
#+begin_src emacs-lisp :results silent
(use-package f)
#+end_src

** locate
:PROPERTIES:
:ID:       A0784673-AFD3-4111-AF83-C018CB12C897
:END:
#+begin_src emacs-lisp :results silent
(use-feature locate
  :custom
  (locate-command "mdfind" "use the OSX Spotlight backend"))
#+end_src

** autorevert
:PROPERTIES:
:ID:       B4DE3D43-3085-4FA5-9DA4-1148CF49400C
:END:
#+begin_src emacs-lisp :results silent
(use-feature autorevert
  :custom
  (auto-revert-use-notify nil "reddit.com/r/emacs/comments/mq2znn/comment/gugo0n4/")
  :config
  (global-auto-revert-mode 1))
#+end_src

** real-auto-save
:PROPERTIES:
:ID:       C81AC339-3CDB-4410-88D7-D18731145D8A
:END:
#+begin_src emacs-lisp :results silent
(use-package real-auto-save
  :demand t
  :custom
  (real-auto-save-interval 5))
#+end_src

** dired
:PROPERTIES:
:ID:       617F5323-6518-4751-948B-3E8032D93130
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:17]--[2022-07-14 Thu 20:31] =>  0:14
CLOCK: [2022-07-03 Sun 21:36]--[2022-07-03 Sun 21:40] =>  0:04
CLOCK: [2022-05-02 Mon 21:26]--[2022-05-02 Mon 21:36] =>  0:10
CLOCK: [2022-05-02 Mon 10:55]--[2022-05-02 Mon 11:55] =>  1:00
CLOCK: [2021-12-19 Sun 09:42]--[2021-12-19 Sun 09:50] =>  0:08
CLOCK: [2021-12-13 Mon 12:51]--[2021-12-13 Mon 13:04] =>  0:13
CLOCK: [2021-12-10 Fri 17:35]--[2021-12-10 Fri 17:45] =>  0:10
CLOCK: [2021-12-04 Sat 16:34]--[2021-12-04 Sat 16:36] =>  0:02
CLOCK: [2021-11-23 Tue 22:42]--[2021-11-23 Tue 23:22] =>  0:40
CLOCK: [2021-10-03 Sun 19:19]--[2021-10-03 Sun 19:50] =>  0:31
CLOCK: [2021-09-28 Tue 14:37]--[2021-09-28 Tue 14:55] =>  0:18
CLOCK: [2021-05-11 Tue 18:03]--[2021-05-11 Tue 18:16] =>  0:13
CLOCK: [2021-03-28 Sun 14:34]--[2021-03-28 Sun 14:51] =>  0:17
CLOCK: [2021-07-23 Fri 16:13]--[2021-07-23 Fri 16:39] =>  0:26
CLOCK: [2021-07-23 Fri 12:49]--[2021-07-23 Fri 14:00] =>  1:11
CLOCK: [2021-07-22 Thu 21:10]--[2021-07-22 Thu 21:31] =>  0:21
CLOCK: [2021-07-08 Thu 14:38]--[2021-07-08 Thu 14:50] =>  0:12
CLOCK: [2021-06-09 Wed 20:51]--[2021-06-09 Wed 21:29] =>  0:38
CLOCK: [2021-05-10 Mon 17:55]--[2021-05-10 Mon 18:23] =>  0:28
CLOCK: [2021-04-25 Sun 14:06]--[2021-04-25 Sun 14:13] =>  0:07
CLOCK: [2021-04-15 Thu 21:53]--[2021-04-15 Thu 22:00] =>  0:07
CLOCK: [2021-04-08 Thu 13:42]--[2021-04-08 Thu 13:51] =>  0:09
CLOCK: [2021-04-06 Tue 21:54]--[2021-04-06 Tue 22:03] =>  0:09
CLOCK: [2021-04-04 Sun 10:14]--[2021-04-04 Sun 10:43] =>  0:29
CLOCK: [2021-04-01 Thu 10:05]--[2021-04-01 Thu 10:41] =>  0:36
CLOCK: [2021-03-31 Wed 20:56]--[2021-03-31 Wed 21:01] =>  0:05
CLOCK: [2021-03-27 Sat 21:30]--[2021-03-27 Sat 21:33] =>  0:03
CLOCK: [2021-03-27 Sat 21:33]--[2021-03-27 Sat 21:50] =>  0:17
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature dired
  :custom
  (dired-listing-switches
   "-AGFhlv --group-directories-first --time-style=long-iso")
  (dired-auto-revert-buffer t)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  (dired-no-confirm t "never ask for confirmation")
  (dired-dwim-target t "if Dired buffer in other window, use that buffer's current directory as target")
  (dired-vc-rename-file t)
  (dired-do-revert-buffer t)
  (dired-create-destination-dirs 'ask)
  (dired-guess-shell-alist-user '(("" "open")))

  :config
  (setq dired-deletion-confirmer '(lambda (x) t))
  (dired-async-mode)
  (put 'dired-find-alternate-file 'disabled nil) ; do not disable dired-find-alternate-file!

  (defun ps/dired-copy-filename-as-kill-sans-extension ()
    "Copy name of file at point excluding its extension."
    (interactive)
    (kill-new (file-name-sans-extension (dired-copy-filename-as-kill))))

  ;; from emacswiki.org/emacs/DiredOmitMode
  (defun ps/dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
          (progn
            (set (make-local-variable 'dired-dotfiles-show-p) nil)
            (message "h")
            (dired-mark-files-regexp "^\\\.")
            (dired-do-kill-lines))
        (progn (revert-buffer) ; otherwise just revert to re-show
               (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (defun ps/dired-mark-screenshots ()
    "Mark all screenshot files."
    (interactive)
    (dired-mark-files-regexp "Screenshot [[:digit:]]\\{4\\}-[[:digit:]]\\{2\\}-[[:digit:]]\\{2\\} at [[:digit:]]\\{2\\}.[[:digit:]]\\{2\\}.[[:digit:]]\\{2\\}.png"))

  (defun ps/dired-up-directory-reuse ()
    "Like `dired-up-directory, but reuse current buffer."
    (interactive)
    (find-alternate-file ".."))

  (defun ps/dired-copy-filename-as-kill-absolute ()
    "Copy absolute names of marked (or next ARG) files into the kill
ring."
    (interactive)
    (dired-copy-filename-as-kill '(0)))

  (defun ps/dired-copy-to-remote-docs-directory ()
    "Copy marked files to `stafforini.com/docs'. If no files are
marked, copy file at point instead."
    (interactive)
    (dolist (file (dired-get-marked-files nil nil nil t))
      (shell-command (format "scp '%s' 'ab80508@108.167.182.246:/home2/ab80508/public_html/stafforini.com/docs/'" file)))
    (kill-new (concat "https://stafforini.com/docs/" (dired-copy-filename-as-kill))))

  ;; emacs.stackexchange.com/a/30681/32089
  (define-advice dired-clean-up-after-deletion
      (:around (old-fun &rest r) kill-dired-buffer-quietly)
    (define-advice y-or-n-p (:around (old-fun prompt) just-yes)
      (if (or (string-prefix-p "Kill Dired buffer" prompt)
              (string-prefix-p "Kill buffer of" prompt))
          t
        (funcall old-fun prompt)))
    (unwind-protect (apply old-fun r)
      (advice-remove 'y-or-n-p #'y-or-n-p@just-yes)))

  (defun ps/dired-do-delete-fast (&optional arg)
    "Delete all marked (or next ARG) files, without using the
external `trash' utility. This command let's you delete large
numbers of files quickly, at the expense of losing the 'put back'
option."
    (interactive)
    (cl-letf (((symbol-function 'system-move-file-to-trash) nil))
      (dired-do-delete arg)))

  ;; emacs.stackexchange.com/a/60663/32089
  (defun ps/dired-duplicate-this-file ()
    "Duplicate file at point."
    (interactive)
    (let* ((existing-file (dired-get-filename t))
           (existing-file-stem (file-name-sans-extension existing-file))
           (existing-file-extension (file-name-extension existing-file))
           (counter 1)
           (new-file (format "%s[%d].%s" existing-file-stem counter existing-file-extension)))
      (while (file-exists-p new-file)
        (setq counter (1+ counter)
              new-file (format "%s[%d].%s" existing-file-stem counter existing-file-extension)))
      (copy-file existing-file new-file))
    (revert-buffer))

  :hook
  (dired-mode-hook . dired-hide-details-mode) ; hide details by default

  :general
  (dired-mode-map
   "<tab>" 'ps/dired-subtree-toggle
   "," 'ps/dired-up-directory-reuse
   ";" 'dired-do-rename
   "-" 'dired-hide-details-mode
   "." 'dired-find-alternate-file
   "'" 'ps/dired-copy-filename-as-kill-absolute
   "H-." 'ps/dired-dotfiles-toggle
   "c" 'ps/dired-copy-filename-as-kill-absolute
   "C" 'dired-do-copy
   "C-s" 'dired-isearch-filenames
   "J" 'dired-jump-other-window
   "k" 'dired-previous-line
   "l" 'dired-next-line
   "r" 'dired-toggle-read-only
   "W" 'ps/dired-copy-filename-as-kill-sans-extension
   "z" 'ps/dired-mark-screenshots
   "H-z" 'dired-undo
   "s-d" 'ps/dired-do-delete-fast
   "s-r" 'ps/dired-copy-to-remote-docs-directory
   "A-C-s-," 'dired-prev-dirline
   "A-C-s-." 'dired-next-dirline
   "A-C-s-r" 'dired-prev-marked-file
   "A-C-s-f" 'dired-next-marked-file)
  (pdf-annot-minor-mode-map
   "x" 'dired-jump))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       5EF4CDEF-2F19-4D27-8EDD-4C826AE80C64
:END:
**** DONE Copy Prot's Dired config
CLOSED: [2021-07-11 Sun 15:28]
:PROPERTIES:
:ID:       A5F5C82C-9C60-49BB-89C4-CE180531C541
:END:
:LOGBOOK:
CLOCK: [2021-07-11 Sun 15:18]--[2021-07-11 Sun 15:29] =>  0:11
:END:

https://protesilaos.com/dotemacs/#h:402cb0db-1e93-4b1f-8f6d-e17b4409fb86

**** DONE [#5] Learn how to use Dired
CLOSED: [2021-02-07 Sun 22:40]
:PROPERTIES:
:Effort:   2:00
:ARCHIVE_TIME: 2021-02-07 Sun 22:40
:ID:       F7553304-68C2-48D5-BD52-F17E0922F1B7
:END:
:LOGBOOK:
CLOCK: [2021-01-20 Wed 11:08]--[2021-01-20 Wed 11:30] =>  0:22
CLOCK: [2021-01-20 Wed 10:56]--[2021-01-20 Wed 11:08] =>  0:12
CLOCK: [2021-01-19 Tue 14:16]--[2021-01-19 Tue 14:45] =>  0:29
CLOCK: [2021-01-19 Tue 10:44]--[2021-01-19 Tue 11:41] =>  0:57
CLOCK: [2021-01-18 Mon 14:30]--[2021-01-18 Mon 14:45] =>  0:15
:END:
I watched these videos:
- [[https://www.youtube.com/watch?v=PMWwM8QJAtU][Emacs From Scratch #10 - Effortless File Management with Dired - YouTube]]
- [[https://www.youtube.com/watch?v=g6YA4tiW1eQ&t=5s][Emacs: techniques to narrow Dired - YouTube]]

From now on, it's just a matter of ankifying the shortcuts and learning them.

**** DONE Open macOS Finder Window in Emacs Dired • Christian Tietze
CLOSED: [2021-07-29 Thu 12:53]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 12:53
:ID:       35CAD990-7474-4605-8A8D-B418DF580F4B
:END:

https://christiantietze.de/posts/2021/07/open-finder-window-in-dired/

**** DONE [#6] Diagnose error when attempting to rename files with Dired
CLOSED: [2022-07-14 Thu 16:26]
:PROPERTIES:
:Effort:   0:30
:ID:       8A48A076-96A8-404A-929D-1AD25B16E228
:ARCHIVE_TIME: 2022-07-14 Thu 16:26
:END:
[2022-07-14 Thu 16:26] Seems to have resolved itself.

** image-dired
:PROPERTIES:
:ID:       E07C1115-1881-4D5F-8B88-613DA4FD38A8
:END:
#+begin_src emacs-lisp :results silent
(use-feature image-dired
  :custom
  (image-dired-main-image-directory "~/Pictures/")

  :config
  (defun ps/image-dired-current-directory ()
    "Run `image-dired' in the current directory."
    (interactive)
    (image-dired (dired-current-directory))
    (image-dired-display-thumbnail-original-image))

  :general
  (image-dired-thumbnail-mode-map
   "k" 'image-dired-display-previous-thumbnail-original
   "l" 'image-dired-display-next-thumbnail-original)
  (dired-mode-map
   "I" 'ps/image-dired-current-directory))
#+end_src

** dired-undo
:PROPERTIES:
:ID:       8E072666-76B3-4858-A22E-667B313860D1
:END:

https://gitlab.com/daanturo/e/-/blob/0c45914e756dc7ce25f9b9935e86ad77f2b892a1/lisp/my-dired-undop.el

** all-the-icons-dired
:PROPERTIES:
:ID:       53778128-E0F3-4199-9D7D-2118904F39A9
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 10:49]--[2022-07-17 Sun 11:13] =>  0:24
:END:
/[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[id:46EB8CD9-E498-4F80-AC02-A116CFA58799][all-the-icons]]./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-dired
  :demand t
  :after (all-the-icons dired)
  :custom
  (all-the-icons-dired-monochrome nil)
  :config
  (defun ps/all-the-icons-dired-mode-activate ()
    "Define conditions for activation of `all-the-icons-dired-mode'."
    (if (< (length (directory-files default-directory)) 1000)
        (all-the-icons-dired-mode)
      (all-the-icons-dired-mode -1)))

  :hook
  (dired-mode-hook . ps/all-the-icons-dired-mode-activate))
#+end_src

** wdired
:PROPERTIES:
:ID:       B892CCBB-FB26-48A6-97BE-EF37CE8FB332
:END:
#+begin_src emacs-lisp :results silent
(use-feature wdired
  :custom
  (wdired-allow-to-change-permissions t)
  :general
  (wdired-mode-map
   "s-c" 'wdired-finish-edit
   "<return>" 'wdired-finish-edit))
#+end_src

** gnus-dired
:PROPERTIES:
:ID:       8AD56019-FF0A-407F-B610-F9F2F4DE1B90
:END:
The code block below, based on [[https://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html][this]], lets you attach files with ~mu4e~ directly from a Dired buffer.

#+begin_src emacs-lisp :results silent
(use-feature gnus-dired
  :after dired
  :custom
  (gnus-dired-mail-mode 'mu4e-user-agent)
  :config
  ;; replaces `gnus-dired-mail-buffers' function so it works on
  ;; `message-mode' derived modes, such as `mu4e-compose-mode'
  (defun ps/gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))
  (advice-add 'gnus-dired-mail-buffers :override #'ps/gnus-dired-mail-buffers)

  :hook
  (dired-mode-hook . turn-on-gnus-dired-mode)

  :general
  (dired-mode-map
   "s-a" 'gnus-dired-attach))
#+end_src

** dired-x
:PROPERTIES:
:ID:       43A42081-7B3A-460D-A47D-52EE95202050
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 22:53]--[2021-10-03 Sun 23:36] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature dired-x
  :after dired
  :demand t
  :config
  ;; (require 'dired-x)
  (setq dired-omit-verbose nil)    ; shut up
  (setq dired-omit-size-limit nil) ; always omit, regardless of directory size
  (setq dired-omit-files
        (concat dired-omit-files "\\|^.localized$\\|^\\.DS_Store$\\|^\\.pdf-view-restore\\|^Icon\\\015"))
  :hook
  (dired-mode-hook . dired-omit-mode)

  :general
  (dired-mode-map
   "–" 'dired-omit-mode))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       AE30914E-C56E-44D1-9CDE-113A8D1B9CA0
:END:
**** DONE [#7] Fix dired-x
CLOSED: [2021-11-21 Sun 20:50]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-11-21 Sun 20:50
:ID:       6A6FF188-5F9C-4785-9F00-073C726D452B
:END:
:LOGBOOK:
CLOCK: [2021-11-21 Sun 20:28]--[2021-11-21 Sun 20:55] =>  0:27
:END:
I wasn't able to make it work with a ~use-package~ declaration.

** dired-subtree
:PROPERTIES:
:ID:       C3E2CA62-26C4-4681-81D8-4326BE474717
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 15:32]--[2021-12-12 Sun 15:57] =>  0:25
CLOCK: [2021-06-25 Fri 21:19]--[2021-06-25 Fri 21:24] =>  0:05
CLOCK: [2021-04-07 Wed 12:28]--[2021-04-07 Wed 12:35] =>  0:07
CLOCK: [2021-04-06 Tue 22:25]--[2021-04-06 Tue 22:35] =>  0:10
:END:
You can see what this package does in [[https://youtu.be/z26b8HKFsNE][this short video]].

#+begin_src emacs-lisp :results silent
(use-package dired-subtree
  :after dired
  :config
  (advice-add 'dired-subtree-toggle :after (lambda () (dired-omit-mode) (dired-omit-mode)))
  (advice-add 'dired-subtree-cycle :after (lambda () (dired-omit-mode) (dired-omit-mode)))
  :general
  (dired-mode-map
   "<tab>" 'dired-subtree-toggle
   "<backtab>" 'dired-subtree-cycle))
#+end_src

** dired-quick-sort
:PROPERTIES:
:ID:       9BF30679-50B1-4F78-BD6A-0DEF565D22A4
:END:
:LOGBOOK:
CLOCK: [2022-01-07 Fri 10:39]--[2022-01-07 Fri 10:45] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(use-package dired-quick-sort
  :after dired
  ;; :config
  ;; (dired-quick-sort-setup)
  :general
  (dired-mode-map
   "T" 'hydra-dired-quick-sort/body))
#+end_src

** dired-du
:PROPERTIES:
:ID:       22FCD9F4-A3EE-4605-BDB0-E90FC8471B21
:END:
:LOGBOOK:
CLOCK: [2022-01-04 Tue 08:50]--[2022-01-04 Tue 09:24] =>  0:34
:END:
/[[https://github.com/calancha/dired-du][dired-du]] displays the recursive size of directories in Dired./

#+begin_src emacs-lisp :results silent
(use-package dired-du
  :config
  (defun ps/dired-du-toggle ()
    "Toggle `dired-du-mode' depending on state of
`dired-hide-details-mode'."
    (if dired-hide-details-mode
        (dired-du-mode -1)
      (dired-du-mode)))
  (advice-add 'dired-hide-details-mode :after 'ps/dired-du-toggle)
  )
#+end_src

** minibuffer
:PROPERTIES:
:ID:       40F49ECD-7225-4AD2-9E07-16C5A5857FFF
:END:

#+begin_src emacs-lisp :results silent
(use-feature minibuffer
  :custom
  (enable-recursive-minibuffers t)
  (resize-mini-windows t)
  ;; TAB cycle if there are only few candidates
  (completion-cycle-threshold 3)

  :config
  ;; superuser.com/a/132454/387888
  (defun ps/switch-to-minibuffer-window ()
    "Switch to minibuffer window (if active)"
    (interactive)
    (when (active-minibuffer-window)
      (select-frame-set-input-focus (window-frame (active-minibuffer-window)))
      (select-window (active-minibuffer-window))))

  :hook
  (minibuffer-setup-hook . yas-minor-mode)

  :general
  ("A-C-H-0" 'ps/switch-to-minibuffer-window
   "C-A-g" 'exit-minibuffer)
  ((minibuffer-mode-map)
   "M-n" nil
   "M-p" nil))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       6EEE5A79-EED7-4587-887E-7855CD147F4B
:END:
**** DONE Key binding to return to minibuffer
CLOSED: [2021-10-20 Wed 21:47]
:PROPERTIES:
:ARCHIVE_TIME: 2021-10-20 Wed 21:47
:ID:       9A9E24E0-2065-4E15-AF18-6262DA5CFEBE
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 21:38]--[2021-10-20 Wed 21:46] =>  0:08
:END:

** ibuffer
:PROPERTIES:
:ID:       11E1F107-4D7A-40DE-AA8E-9D995A10A351
:END:
#+begin_src emacs-lisp :results silent
(use-feature ibuffer
  :general
  (ibuffer-mode-map
   "k" 'ibuffer-do-delete))
#+end_src

** filenotify
:PROPERTIES:
:ID:       4237BEA2-6E35-423E-96A9-C10AE1458366
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Notifications.html][filenotify]] is a library that provides a unified interface for watching of filesystems for changes of files./

#+begin_src emacs-lisp :results silent
(use-feature filenotify
  :config
  ;; Copied from lists.gnu.org/archive/html/emacs-devel/2021-10/msg01206.html
  (defun ps/file-notify-rm-all-watches ()
    "Remove all existing file notification watches from Emacs."
    (interactive)
    (maphash
     (lambda (key _value)
       (file-notify-rm-watch key))
     file-notify-descriptors)))
#+end_src

** uniquify
:PROPERTIES:
:ID:       295BE204-62D9-4003-AFB0-06F6D817AE4C
:END:

#+begin_src emacs-lisp :results silent
(use-package uniquify-files
  :custom
  (uniquify-buffer-name-style 'forward))
#+end_src

** reveal-in-osx-finder
:PROPERTIES:
:ID:       5BA0A794-59F0-471D-AD81-4C281095BF48
:END:
/[[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]] lets you open the file at point or the current file-visiting buffer in OS X Finder./

#+begin_src emacs-lisp :results silent
(use-package reveal-in-osx-finder
  :defer 10
  :general
  (dired-mode-map
   "/" 'reveal-in-osx-finder))
#+end_src

** tramp
:PROPERTIES:
:ID:       23FDB037-73C2-4AE1-A887-437C996F78D2
:END:
:LOGBOOK:
CLOCK: [2022-08-20 Sat 18:11]--[2022-08-20 Sat 18:32] =>  0:21
:END:
/[[https://www.gnu.org/software/tramp/][tramp]] is a remote file editing package for Emacs./

Most of the below is copied from Murilo Pereira's [[https://github.com/mpereira/.emacs.d#tramp][configuration]].

#+begin_src emacs-lisp :results silent
(use-feature tramp
  :custom
  ;; Disable version control on tramp buffers to avoid freezes.
  (vc-ignore-dir-regexp
   (format "\\(%s\\)\\|\\(%s\\)"
           vc-ignore-dir-regexp
           tramp-file-name-regexp))

  ;; Don't clean up recentf tramp buffers.
  (recentf-auto-cleanup 'never)

  ;; This is supposedly [[https://www.emacswiki.org/emacs/TrampMode][faster than the default]], `scp'.
  (tramp-default-method "sshx")

  ;; SSH controlmaster settings are set in =~/.ssh/config=.
  (tramp-use-ssh-controlmaster-options nil)

  ;; Store TRAMP auto-save files locally.
  (tramp-auto-save-directory ps/dir-emacs-var)

  ;; A more representative name for this file.
  (tramp-persistency-file-name (file-name-concat tramp-auto-save-directory "tramp-connection-history"))

  ;; Cache SSH passwords during the whole Emacs session.
  (password-cache-expiry nil)

  ;; emacs.stackexchange.com/a/37855/32089
  (remote-file-name-inhibit-cache nil)

  :config
  ;; Reuse SSH connections. Taken from the TRAMP FAQ.
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))

  ;; This will put in effect PATH changes in the remote ~/.profile.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory 'no-identification) ad-do-it)))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       9463C70C-84CF-43E9-AACA-4087D3A059D0
:END:
**** DONE Configure TRAMP
CLOSED: [2021-03-29 Mon 13:16]
:PROPERTIES:
:ARCHIVE_TIME: 2021-03-29 Mon 22:28
:ID:       5BB2C867-9CCB-4963-9C58-006DFD943CAF
:END:

Process I followed:
- Generated a public/private key pair on Hostgator in SSH Access within cpanel.
- Moved the private key to ~/.ssh/.
- Edited ~/.ssh/config with [[https://portal.hostgator.com/hosting/shared/3171028/dashboard][relevant details]], with some help from [[https://linuxize.com/post/using-the-ssh-config-file/][this article]].
- Ran ~ssh gator4206~ in the terminal and entered my Hostgator password (now stored in Google; search for "ab80508").
:LOGBOOK:
CLOCK: [2021-03-29 Mon 12:07]--[2021-03-29 Mon 13:16] =>  1:09
CLOCK: [2021-03-29 Mon 11:13]--[2021-03-29 Mon 12:04] =>  0:51
:END:

** pandoc
:PROPERTIES:
:ID:       8EBA8303-EA43-4FB2-BB9D-1734F40DDB77
:END:
#+begin_src emacs-lisp :results silent
(use-package pandoc-mode
  :general
  ("A-p" 'pandoc-main-hydra/body))
#+end_src

*** TODO Make pandoc preserve emojis
:PROPERTIES:
:ID:       3C4F154F-6600-4DF0-826F-0EB031146BA2
:END:
** curl-to-elisp
:PROPERTIES:
:ID:       7B9D14E2-752E-4705-A438-78DA6663083A
:END:

#+begin_src emacs-lisp :results silent
(use-package curl-to-elisp)
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       CC23C5F4-78BB-4CCD-AF19-702DF6E43E48
:END:
*** DONE Write and post StackExchange question about command that switches to the most recent buffer in the same window
CLOSED: [2021-05-11 Tue 08:27]
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-11 Tue 08:27
:ID:       082FDEC8-FBB6-453C-A090-86D4C8639B2E
:END:
:LOGBOOK:
CLOCK: [2021-05-11 Tue 07:54]--[2021-05-11 Tue 08:26] =>  0:32
:END:
[[https://emacs.stackexchange.com/questions/64796/switch-to-the-most-recently-selected-buffer-in-the-current-window][question]]
*** DONE Try dropbox-conflicts
CLOSED: [2021-07-07 Wed 23:17]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-07 Wed 23:17
:ID:       44782188-8706-48EE-B2E0-19ADBEDC8293
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 10:46]--[2021-06-25 Fri 11:00] =>  0:14
CLOCK: [2021-06-23 Wed 20:55]--[2021-06-23 Wed 21:05] =>  0:10
:END:
https://github.com/jezcope/dropbox-conflicts-el
Has to be manually installed.

#+begin_src emacs-lisp :results silent :tangle no
(use-package dropbox-conflicts-el
  :demand t
  :straight (dropbox-conflicts :host github :repo "jezcope/dropbox-conflicts-el"))
#+end_src

Not working.
*** DONE Create command to save book from Internet Archive
CLOSED: [2022-04-26 Tue 13:48]
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-30 Sat 18:04
:ID:       A73F0F54-A103-4D00-8D95-FEAF2EAEE5FE
:END:
:LOGBOOK:
CLOCK: [2022-04-26 Tue 16:54]--[2022-04-26 Tue 17:36] =>  0:42
CLOCK: [2022-04-26 Tue 13:56]--[2022-04-26 Tue 14:31] =>  0:35
CLOCK: [2022-04-26 Tue 13:00]--[2022-04-26 Tue 13:48] =>  0:48
:END:


*** DONE Learn how to download books from Internet Archive only available for one-hour loans
CLOSED: [2022-04-26 Tue 13:48]
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-30 Sat 18:04
:ID:       A876CCB6-139A-44B0-A39D-A9A700546F97
:END:
:LOGBOOK:
CLOCK: [2022-04-26 Tue 12:41]--[2022-04-26 Tue 12:59] =>  0:18
:END:
https://digiztal.blogspot.com/2021/05/save-internet-archive-borrow-books.html
*** DONE Create function to automate conversion of IA PDFs
CLOSED: [2022-05-05 Thu 21:41]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-05 Thu 21:41
:ID:       5A75AB93-6D1B-4B01-89E4-5C072EF25FAF
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 20:39]--[2022-05-04 Wed 23:35] =>  2:56
:END:

*** CANCELLED Tweak function to install ~bypass paywalls~
CLOSED: [2022-05-07 Sat 19:05]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-26 Thu 19:16
:ID:       9CB2E55B-6CFB-43D4-B06D-C0B3F55A7AEC
:END:
:LOGBOOK:
CLOCK: [2022-04-23 Sat 17:09]--[2022-04-23 Sat 17:18] =>  0:09
:END:
A solution is given [[https://askubuntu.com/questions/1063331/how-to-install-google-chrome-extensions-though-terminal][here]]. But it requires entering the system password and restarting Chrome. Which is more trouble than dropping the folder on the extensions tab.
*** DONE [#4] Have persistent scratch buffer!
CLOSED: [2022-11-21 Mon 23:09]
:PROPERTIES:
:Effort:   0:25
:ID:       CB7EBE56-33F0-4F90-8715-5447296E2678
:ARCHIVE_TIME: 2022-11-21 Mon 23:09
:END:
:LOGBOOK:
CLOCK: [2022-10-02 Sun 14:10]--[2022-10-02 Sun 14:26] =>  0:16
:END:

* windows & frames
:PROPERTIES:
:ID:       7E9A81E0-CAEB-4029-AD2C-B2416439FCDA
:END:
:LOGBOOK:
CLOCK: [2021-12-21 Tue 20:13]--[2021-12-21 Tue 20:20] =>  0:07
CLOCK: [2021-10-28 Thu 21:35]--[2021-10-28 Thu 21:52] =>  0:17
CLOCK: [2021-08-18 Wed 13:00]--[2021-08-18 Wed 13:04] =>  0:04
CLOCK: [2021-08-17 Tue 22:09]--[2021-08-18 Wed 00:24] =>  2:15
CLOCK: [2021-06-23 Wed 20:47]--[2021-06-23 Wed 20:55] =>  0:08
CLOCK: [2021-06-01 Tue 22:28]--[2021-06-01 Tue 22:45] =>  0:17
CLOCK: [2021-05-16 Sun 12:02]--[2021-05-16 Sun 12:12] =>  0:10
CLOCK: [2021-04-06 Tue 16:41]--[2021-04-06 Tue 16:45] =>  0:04
CLOCK: [2021-04-05 Mon 12:51]--[2021-04-05 Mon 13:17] =>  0:26
CLOCK: [2021-03-30 Tue 09:32]--[2021-03-30 Tue 09:36] =>  0:04
:END:
** window
:PROPERTIES:
:ID:       614546C0-75B2-4E44-9447-923DF5CF4AC3
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 15:06]--[2022-09-14 Wed 17:20] =>  2:14
CLOCK: [2022-09-14 Wed 13:25]--[2022-09-14 Wed 15:00] =>  1:35
CLOCK: [2022-09-14 Wed 12:00]--[2022-09-14 Wed 12:41] =>  0:41
CLOCK: [2022-09-08 Thu 15:47]--[2022-09-08 Thu 17:04] =>  1:17
CLOCK: [2022-09-02 Fri 18:13]--[2022-09-02 Fri 21:20] =>  3:07
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

#+begin_src emacs-lisp :results silent
(use-feature window
  :demand t

  :custom
  (split-width-threshold 300)
  (split-height-threshold nil)
  (frame-resize-pixelwise t) ; github.com/d12frosted/homebrew-emacs-plus#no-titlebar
  (scroll-error-top-bottom t "move point to top of buffer if `scroll-down-command' invoked when screen can scroll no further")
  ;; The following prevents Emacs from splitting windows indefinitely when the monitor config changes
  ;; stackoverflow.com/questions/23207958/how-to-prevent-emacs-dired-from-splitting-frame-into-more-than-two-windows

  :config
  (add-to-list 'display-buffer-alist `(,shell-command-buffer-name-async display-buffer-no-window))
  (defvar ps/split-emacs-chrome-sideways nil)
  (defun ps/split-emacs-chrome-sideways ()
    "Split Emacs and Chrome frames sideways. A second
  invocation restores original layout.

  Calls Keyboard Maestro macro via shell script."
    (interactive)
    (toggle-frame-maximized)
    (if ps/split-emacs-chrome-sideways
        (progn
          (winner-undo)
          (ps/switch-to-last-window)
          ;; Maximize Chrome
          (eshell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"DBA06CC2-86E4-4F6B-9FA6-C1C12C007BCC\"'"))
      (progn
        (delete-other-windows)
        (set-frame-size nil 950 1080 t)
        ;; Split Chrome left
        (eshell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"CF26FBCF-93C1-4C5D-9038-9AB31F6C6903\"'")))
    (setq ps/split-emacs-chrome-sideways
          (not ps/split-emacs-chrome-sideways)))

  ;; This function is no longer used. Consider deleting.
  (defun ps/set-split-window-margins ()
    "Set window margins for split screen."
    (unless writeroom-mode
      (cond ((eq (winum-get-number) 1)
             (set-window-margins (selected-window) 20 0))
            ((eq (winum-get-number) 2)
             (set-window-margins (selected-window) 0 20)))))

  (defun ps/get-last-window ()
    "Get to previously selected ordinary or minibuffer window."
    (interactive)
    (if (and (active-minibuffer-window) (not (minibufferp)))
        (select-window (active-minibuffer-window))
      (get-mru-window nil nil t)))

  (defun ps/switch-to-last-window ()
    "Switch to previously selected ordinary or minibuffer window."
    (interactive)
    (let ((last-window (ps/get-last-window)))
      (select-frame-set-input-focus (window-frame last-window))
      (select-window last-window)))

  ;; Modified from endlessparentheses.com/emacs-narrow-or-widen-dwim.html
  (defun ps/narrow-or-widen-dwim ()
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or defun,
  whichever applies first. Narrowing to org-src-block actually
  calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive)
    (declare (interactive-only))
    (cond ((buffer-narrowed-p) (ps/org-widen-and-reveal))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-narrow-to-block) t))
                 (t (ps/org-narrow-to-entry-and-children))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (defun ps/count-visible-buffers (&optional frame)
    "Count the number of buffers currently being shown. Defaults to
selected frame."
    (length (mapcar #'window-buffer (window-list frame))))

  (defun ps/window-split-if-unsplit ()
    "Split windows when frame is unsplit. Split in three windows if
`frame-width' is greater than `ps/frame-width-threshold',
otherwise in two windows."
    (interactive)
    (when (= (length (window-list)) 1)
      (split-window-right))
    (when (> (frame-width) ps/frame-width-threshold)
      (when (= (length (window-list)) 2)
        (split-window-right))
      (balance-windows)))

  (run-with-timer 5 nil 'ps/window-split-if-unsplit)

  (defun ps/window--move-or-swap (this-buffer other-buffer &optional target-window)
    "docstring"
    (ps/window-split-if-unsplit)
    (let* ((target-window (if (or (not target-window)
                                  (eq (ps/get-last-window) target-window)
                                  (eq (selected-window) target-window))
                              (ps/get-last-window)
                            target-window))
           (source-window (if (eq (selected-window) target-window)
                              (ps/get-last-window)
                            (selected-window))))
      (set-window-buffer target-window this-buffer)
      (set-window-buffer source-window other-buffer)
      (select-window target-window)))

  (defun ps/window-buffer-swap ()
    "Swap the current buffer and the buffer in the other
window. If there is only one window, create a second one. If frame
is wide enough, create a third."
    (interactive)
    (ps/window--move-or-swap
     (window-buffer)
     (window-buffer (ps/get-last-window))))

  (defun ps/window-buffer-move (&optional target-window)
    "Move the current buffer to the other window. If there is only one
window, create a second one. If frame is wide enough, create a third."
    (interactive)
    (ps/window--move-or-swap
     (window-buffer)
     (ps/get-alternate-buffer)
     target-window))

  (defun ps/window-buffer-move-right ()
    "docstring."
    (interactive)
    (ps/window-buffer-move
     (winum-get-window-by-number
      (1+
       (mod
        (winum-get-number)
        (count-windows))))))

  (defun ps/window-buffer-move-left ()
    "docstring."
    (interactive)
    (ps/window-buffer-move
     (winum-get-window-by-number
      (1+
       (mod
        (count-windows)
        (winum-get-number))))))

  (defun ps/window-buffer-move-dwim ()
    "Based on frame size, create one or two additional windows if
necessary, and move buffer to the other window or to the middle
window depending on the number of present windows."
    (interactive)
    (ps/window-buffer-move (when (> (count-windows) 2) (winum-get-window-by-number 2))))

  :general
  ("C-H-0" 'ps/switch-to-last-window
   "C-w" 'ps/narrow-or-widen-dwim
   "H-w" 'delete-window
   "H-W" 'delete-other-windows
   "M-A-q" 'delete-frame
   "s-A-," 'ps/split-emacs-chrome-sideways
   "M-–" 'ps/window-buffer-move-dwim ; `emacs-mac'
   "M--" 'ps/window-buffer-move-dwim ; `emacs-plus'
   "M-," 'ps/window-buffer-move-left
   "M-." 'ps/window-buffer-move-right
   "A-M--" 'ps/window-buffer-swap ; `emacs-mac'
   "A-M-–" 'ps/window-buffer-swap ; `emacs-plus'
   "A-C-s-y" 'scroll-down-command
   "A-C-s-h" 'scroll-up-command
   "A-C-s-g" 'scroll-other-window
   "A-C-s-t" 'scroll-other-window-down
   "A-C-s-x" (lambda! (scroll-down-line 4))
   "A-C-s-c" (lambda! (scroll-up-line 4))
   "A-C-s-v" (lambda! (scroll-down-line 16))
   "A-C-s-b" (lambda! (scroll-up-line 16)))
  ((elfeed-show-mode-map eww-mode-map helpful-mode-map mu4e-view-mode-map telega-msg-button-map)
   "y" 'scroll-down-command
   "h" 'scroll-up-command)
  (isearch-mode-map
   "C-w" 'ps/narrow-or-widen-dwim))
#+end_src

** frame
:PROPERTIES:
:ID:       3ADE4889-B4BE-4733-ABE3-BECCD4F9A73D
:END:

#+begin_src emacs-lisp :results silent
(use-feature frame
  :config
  (blink-cursor-mode)

  :general
  ("H-S-SPC" 'other-frame))
#+end_src

** winum
:PROPERTIES:
:ID:       90677099-6D75-4BA3-B490-0C325A17A55F
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

#+begin_src emacs-lisp :results silent
(use-package winum
  :demand t
  :custom
  (winum-scope 'frame-local)
  :config
  (winum-mode)
  :general
  ("C-," 'winum-select-window-1
   "C-." 'winum-select-window-2
   "C-/" 'winum-select-window-3
   "H-4" 'winum-select-window-4
   "H-5" 'winum-select-window-5
   "H-6" 'winum-select-window-6
   "H-7" 'winum-select-window-7
   "H-8" 'winum-select-window-8
   "H-9" 'winum-select-window-9
   "H-0" 'winum-select-window-10))
#+end_src

** winner
:PROPERTIES:
:ID:       598E0C53-2797-41B5-A53D-C229D4F69A76
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 18:45]--[2021-12-30 Thu 12:11] => 2105:26
:END:
/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] is a global minor mode that records the changes in the window configuration (i.e., how the frames are partitioned into windows), so that you can undo them./

#+begin_src emacs-lisp :results silent
(use-feature winner
  :demand t

  :custom
  (winner-mode 1)

  :config
  (remove-hook 'minibuffer-setup-hook 'winner-save-unconditionally)

  :general
  ("H-A-w" 'winner-undo
   "H-A-W" 'winner-redo))
#+end_src

** scroll-bar
:PROPERTIES:
:ID:       E7F1404A-43CF-434F-9540-5CB4C2CC1BAB
:END:
#+begin_src emacs-lisp :results silent
(use-feature scroll-bar
  :config
  (scroll-bar-mode -1))
#+end_src

** avy
:PROPERTIES:
:ID:       D83A1681-A3F0-4C70-9986-F01275320585
:END:
:LOGBOOK:
CLOCK: [2021-11-22 Mon 10:15]--[2021-11-22 Mon 10:38] =>  0:23
CLOCK: [2021-11-13 Sat 22:01]--[2021-11-13 Sat 22:47] =>  0:46
CLOCK: [2021-11-13 Sat 21:14]--[2021-11-13 Sat 21:51] =>  0:37
CLOCK: [2021-10-12 Tue 15:22]--[2021-10-12 Tue 16:06] =>  0:44
CLOCK: [2021-08-16 Mon 10:36]--[2021-08-16 Mon 10:58] =>  0:22
CLOCK: [2021-08-10 Tue 16:50]--[2021-08-10 Tue 18:15] =>  1:25
CLOCK: [2021-07-13 Tue 08:23]--[2021-07-13 Tue 08:44] =>  0:21
CLOCK: [2021-05-16 Sun 08:30]--[2021-05-16 Sun 08:55>] =>  0:25
:END:
/[[https://github.com/abo-abo/avy][avy]] lets you jump to any visible text using a char-based decision tree./

#+begin_src emacs-lisp :results silent
(use-package avy
  :commands ps/avy-dired-find-file

  :custom
  (avy-case-fold-search nil)
  (avy-timeout-seconds 0.2)
  (avy-all-windows nil)
  (avy-keys '(97 115 100 102 106 107 108 13 32 113 119 101 114 117 105 111 112 122 120 99 118 109 44 46 47))

  :config
  ;; Launch dispatcher with `/' rather than `?'
  (defun ps/avy-handler-default (char)
    "The default handler for a bad CHAR."
    (let (dispatch)
      (cond ((setq dispatch (assoc char avy-dispatch-alist))
             (unless (eq avy-style 'words)
               (setq avy-action (cdr dispatch)))
             (throw 'done 'restart))
            ((memq char avy-escape-chars)
             ;; exit silently
             (throw 'done 'abort))
            ((eq char ?/)
             (avy-show-dispatch-help)
             (throw 'done 'restart))
            ((mouse-event-p char)
             (signal 'user-error (list "Mouse event not handled" char)))
            (t
             (message "No such candidate: %s, hit `C-g' to quit."
                      (if (characterp char) (string char) char))))))
  (advice-add 'avy-handler-default :override #'ps/avy-handler-default)

  (defun ps/avy-goto-word-in-line ()
    "Jump to a word start between start and end of visual line."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (save-excursion (beginning-of-visual-line))
                       (save-excursion (end-of-visual-line) (point)))))

  (defun ps/avy-goto-word-in-line-behind ()
    "Jump to a word start between start of visual line and point."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (save-excursion (beginning-of-visual-line))
                       (point))))

  (defun ps/avy-goto-word-in-line-ahead ()
    "Jump to a word start between point and end of visual line."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (point)
                       (save-excursion (end-of-visual-line) (point)))))

  (defun ps/avy-goto-line-then-word-above ()
    "Goto visible line above point, then to word behind point."
    (interactive)
    (avy-goto-line-above)
    (ps/avy-goto-word-in-line))

  (defun ps/avy-goto-line-then-word-below ()
    "Goto visible line below point, then to word ahead of point."
    (interactive)
    (avy-goto-line-below)
    (ps/avy-goto-word-in-line))

  (defun ps/avy-goto-end-of-line-above (&optional offset bottom-up)
    "Goto visible end of line above the cursor."
    (interactive)
    (call-interactively 'avy-goto-line-above)
    (end-of-line))

  (defun ps/avy-goto-end-of-line-below (&optional offset bottom-up)
    "Goto visible end of line below the cursor."
    (interactive)
    (call-interactively 'avy-goto-line-below)
    (end-of-line))

  (defun ps/avy-goto-line-above-then-enter ()
    "Go to visible line above point, then hit `return'."
    (interactive)
    (avy-goto-line-above)
    (execute-kbd-macro (read-kbd-macro "<return>")))

  (defun ps/avy-goto-line-below-then-enter ()
    "Go to visible line below point, then hit `return'."
    (interactive)
    (avy-goto-line-below)
    (execute-kbd-macro (read-kbd-macro "<return>")))

  (defun ps/avy-dired-find-file ()
    "In Dired, visit the file or directory in selected line."
    (interactive)
    (avy-goto-line)
    (dired-find-alternate-file))

    (defun ps/avy-ebib-view-entry ()
    "In Ebib, view the entry in selected line."
    (interactive)
    (avy-goto-line)
    (ebib-edit-entry))

  (defun ps/mu4e-headers-view-message ()
    "In mu4e, view the message in selected line."
    (interactive)
    (avy-goto-line)
    (mu4e-headers-view-message))

  (defun ps/avy-telega-view-message ()
    "In Telega, view the message in selected line."
    (interactive)
    (avy-goto-line)
    (push-button)) ; not sure what the actual command to open a chat is

  (defun ps/avy-elfeed-search-show-entry ()
    "In Elfeed, display the item in selected line."
    (interactive)
    (avy-goto-line)
    (call-interactively 'elfeed-search-show-entry))

  ;; karthinks.com/software/avy-can-do-anything/#mark-the-region-from-point-to-a-candidate
  (defun ps/avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (setf (alist-get ?r avy-dispatch-alist) 'ps/avy-action-mark-to-char)

  :general
  ("C-H-s-u" 'ps/avy-goto-word-in-line-behind
   "C-H-s-p" 'ps/avy-goto-word-in-line-ahead
   "C-H-s-m" 'avy-goto-line-above
   "C-H-s-," 'ps/avy-goto-end-of-line-above
   "C-H-s-." 'avy-goto-line-below
   "C-H-s-/" 'ps/avy-goto-end-of-line-below
   "C-H-s-k" 'avy-goto-word-1-above
   "C-H-s-l" 'avy-goto-word-1-below)
  (dired-mode-map
   "f" 'ps/avy-dired-find-file)
   (ebib-index-mode-map
   "f" 'ps/avy-ebib-view-entry)
  (telega-root-mode-map
   "f" 'ps/avy-telega-view-message)
   (ebib-entry-mode-map
   "f" 'avy-goto-line))
#+end_src

*** TODO [#5] See if I can implement my idea of passing avy any Emacs command
:PROPERTIES:
:Effort:   1:30
:ID:       425A2281-B1D2-49FE-AE34-3C9F6C916FB1
:END:
:LOGBOOK:
CLOCK: [2021-11-29 Mon 23:24]--[2021-11-29 Mon 23:45] =>  0:21
CLOCK: [2021-11-25 Thu 19:05]--[2021-11-25 Thu 19:21] =>  0:16
:END:
https://karthinks.com/software/avy-can-do-anything/

Maybe the way to do this is by creating a ~pass-to-avy~ generic function, which itself allows the user to select a command via its key bindings and passes it the word selected via avy.

[2021-11-29 Mon 23:37] Should create commands to delete/copy/kill words/sentences/paragraphs/sexp/lines/region

** iy-go-to-char
:PROPERTIES:
:ID:       3BF309B9-5082-4810-96E5-39A07EA101A2
:END:

#+begin_src emacs-lisp :results silent
(use-package iy-go-to-char
  :config
  (defun ps/avy-goto-line-then-word-then-char-above ()
    "Go to visible line below point, then to word ahead of point,
then to selected character immediately ahead of point."
    (interactive)
    (ps/avy-goto-line-then-word-above)
    (call-interactively 'iy-go-to-char))

  (defun ps/avy-goto-line-then-word-then-char-below ()
    "Go to visible line below point, then to word ahead of point,
then to selected character immediately ahead of point."
    (interactive)
    (ps/avy-goto-line-then-word-below)
    (call-interactively 'iy-go-to-char))

  :general
  ("C-H-s-j" 'iy-go-to-char-backward
   "C-H-s-;" 'iy-go-to-char
   "C-H-s-i" 'ps/avy-goto-line-then-word-then-char-above
   "C-H-s-o" 'ps/avy-goto-line-then-word-then-char-below))
#+end_src

** writeroom-mode
:PROPERTIES:
:ID:       AD1CE3FE-8897-4593-BD37-FEA38630611A
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 18:43]--[2022-09-14 Wed 19:00] =>  0:17
CLOCK: [2022-02-04 Fri 11:23]--[2022-02-04 Fri 11:25] =>  0:02
CLOCK: [2021-12-12 Sun 21:14]--[2021-12-12 Sun 21:17] =>  0:03
CLOCK: [2021-05-28 Fri 20:40]--[2021-05-28 Fri 20:45] =>  0:05
CLOCK: [2021-05-27 Thu 19:37]--[2021-05-27 Thu 20:00] =>  0:23
CLOCK: [2021-05-19 Wed 22:40]--[2021-05-19 Wed 23:05] =>  0:25
CLOCK: [2021-05-19 Wed 21:54]--[2021-05-19 Wed 22:36] =>  0:42
CLOCK: [2021-04-13 Tue 07:25]--[2021-04-13 Tue 08:07] =>  0:42
CLOCK: [2021-04-05 Mon 18:53]--[2021-04-05 Mon 19:15] =>  0:22
CLOCK: [2021-03-30 Tue 12:34]--[2021-03-30 Tue 13:06] =>  0:32
CLOCK: [2021-03-30 Tue 21:45]--[2021-03-30 Tue 22:02] =>  0:17
:END:
/[[https://github.com/joostkremers/writeroom-mode][writeroom-mode]] provides distraction-free writing for Emacs./

#+begin_src emacs-lisp :results silent
(use-package writeroom-mode
  :defer 5
  :init
  ;; This neds to be delayed a few seconds because the value returned
  ;; by `window-total-width' changes as Emacs restarts.
  (run-with-timer 10 nil (lambda () (setq writeroom-width (window-total-width))))

  (defun ps/writerrom-global-effects (arg)
    "Enable and disable custom effects when `writeroom-mode' is
activated (`arg' = 1) and deactivated (`arg' = -1). The function
needs to be included as an element in the list defined by
`writeroom-global-effects'."
    (tab-bar-mode (* -1 arg)))

  :custom
  (writeroom-global-effects '(writeroom-set-fullscreen
                              writeroom-set-alpha
                              writeroom-set-menu-bar-lines
                              writeroom-set-tool-bar-lines
                              writeroom-set-vertical-scroll-bars
                              writeroom-set-bottom-divider-width
                              ps/writerrom-global-effects))

  (writeroom-restore-window-config t "upon leaving `writeroom mode', restore pre-existing number of windows")
  (writeroom-major-modes '(org-mode
                           elfeed-search-mode
                           elfeed-show-mode
                           eww-mode
                           eww-buffers-mode) "major modes activated in global-writeroom-mode")
  (writeroom-fullscreen-effect 'maximized "disables annoying fullscreen transition effect on MacOS")
  (writeroom-maximize-window t)

  :general
  ("M-'" 'writeroom-mode
   "M-A-'" 'global-writeroom-mode))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       46C5C873-562C-43CB-98B1-1EC4A1292039
:END:
**** DONE Prevent ~writeroom-mode~ from killing windows when exiting
CLOSED: [2021-10-01 Fri 21:56]
:PROPERTIES:
:ARCHIVE_TIME: 2021-10-01 Fri 21:56
:ID:       A59206D1-7E8E-4D38-AFD5-452A6F680558
:END:
:LOGBOOK:
CLOCK: [2021-09-28 Tue 13:02]--[2021-09-28 Tue 13:36] =>  0:34
:END:

** ace-link
:PROPERTIES:
:ID:       F1C54CDB-1E70-41D1-8FAB-A45598C5021A
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:48]--[2022-07-15 Fri 13:51] =>  0:03
CLOCK: [2022-07-10 Sun 11:50]--[2022-07-10 Sun 12:32] =>  0:42
CLOCK: [2022-07-03 Sun 09:54]--[2022-07-03 Sun 10:20] =>  0:26
CLOCK: [2021-10-10 Sun 13:02]--[2021-10-10 Sun 13:06] =>  0:04
CLOCK: [2021-08-14 Sat 14:46]--[2021-08-14 Sat 15:50] =>  1:04
CLOCK: [2021-06-27 Sun 17:26]--[2021-06-27 Sun 17:52] =>  0:26
CLOCK: [2021-06-25 Fri 21:24]--[2021-06-25 Fri 21:35] =>  0:11
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:47] =>  0:42
CLOCK: [2021-05-20 Thu 14:23]--[2021-05-20 Thu 14:32] =>  0:09
:END:
/[[https://github.com/abo-abo/ace-link][ace-link]] lets you quickly follow links in Emacs, Vimium-style./

#+begin_src emacs-lisp :results silent
(use-package ace-link
  :defer 5
  :config
  (defun ps/ace-link-w3m-externally ()
    "Open a visible link in a `w3m-mode' buffer externally."
    (interactive)
    (let ((pt (avy-with ace-link-w3m
                (avy-process
                 (mapcar #'cdr (ace-link--w3m-collect))
                 (avy--style-fn avy-style)))))
      (when (numberp pt)
        (goto-char pt)
        ;; not sure why this elaborate disjunction is needed; adapted from
        ;; github.com/alphapapa/pocket-reader.el/blob/master/pocket-reader.el
        (let ((url (or (get-text-property (point) 'w3m-href-anchor)
                       (unless (bolp)
                         (save-excursion
                           (get-text-property (1- (point)) 'w3m-href-anchor)))
                       (unless (eolp)
                         (save-excursion
                           (get-text-property (1+ (point)) 'w3m-href-anchor)))
                       (thing-at-point-url-at-point))))
          (w3m-view-url-with-browse-url url)))))

  (defun ps/ace-link-org-agenda-clock-in ()
    "Open a visible link in an `org-mode-agenda' buffer
and start clock."
    (interactive)
    (ace-link-org-agenda)
    (org-clock-in))

  (defun ps/ace-link-eww-externally ()
    "Browse URL using `browse-url-secondary-browser-function'"
    (interactive)
    (ace-link-eww '(4)))

  (defun ps/ace-link-eww-new-buffer ()
    "Browse URL in new buffer."
    (interactive)
    (ace-link-eww '(16)))

  (defun ps/ace-link-w3m-in-eww ()
    "In an `w3m-mode' buffer, open a visible link in `eww'."
    (interactive)
    (require 'w3m)
    (let ((pt (avy-with ace-link-w3m
                (avy-process
                 (mapcar #'cdr (ace-link--w3m-collect))
                 (avy--style-fn avy-style)))))
      (goto-char pt)
      (eww (w3m-url-valid (w3m-anchor)))))

  :general
  ((eww-mode-map elfeed-show-mode-map)
   "f" 'ace-link-eww
   "F" 'ps/ace-link-eww-externally
   "s-f" 'ps/ace-link-eww-new-buffer)
  ((help-mode-map helpful-mode-map elisp-refs-mode-map)
   "f" 'ace-link-help)
  ((Info-mode-map)
   "f" 'ace-link-info)
  ((Man-mode-map woman-mode-map)
   "f" 'ace-link-woman)
  (mu4e-view-mode-map
   "f" 'ps/ace-link-w3m-in-eww
   "F" 'ps/ace-link-w3m-externally)
  (org-agenda-mode-map
   "f" 'ace-link-org-agenda
   "s-f" 'ps/ace-link-org-agenda-clock-in)
  ((org-mode-map telega-chat-mode-map)
   "M-f" 'ace-link-org)
  ((slack-message-buffer-mode-map telega-msg-button-map twittering-mode-map)
   "f" 'ace-link-org))
#+end_src

* date & time
:PROPERTIES:
:ID:       CE84D144-875A-492E-B6A1-6E71CBEACCD7
:END:
:LOGBOOK:
CLOCK: [2022-05-09 Mon 10:27]--[2022-05-09 Mon 10:35] =>  0:08
CLOCK: [2021-07-04 Sun 22:07]--[2021-07-04 Sun 22:41] =>  0:34
CLOCK: [2021-07-04 Sun 19:54]--[2021-07-04 Sun 20:13] =>  0:19
CLOCK: [2021-04-02 Fri 11:35]--[2021-04-02 Fri 13:10] =>  1:35
CLOCK: [2021-04-02 Fri 11:22]--[2021-04-02 Fri 11:28] =>  0:06
CLOCK: [2021-03-28 Sun 12:35]--[2021-03-28 Sun 13:01] =>  0:26
CLOCK: [2021-02-27 Sat 16:19]--[2021-02-27 Sat 17:17] =>  0:58
:END:
** calendar
:PROPERTIES:
:ID:       4F3AEDB7-C357-40BA-B670-DE392FAF8F7A
:END:

#+begin_src emacs-lisp :results silent
(use-feature calendar
  :custom
  (calendar-week-start-day 1)    ; week starts on Monday
  (calendar-set-date-style 'iso) ; this isn't the default?
  (calendar-time-display-form
   '(24-hours ":" minutes
              (when time-zone
                (concat " (" time-zone ")"))))
  (calendar-mark-holidays-flag nil)
  (calendar-time-zone-style 'numeric) ; Emacs 28.1
  (holiday-bahai-holidays nil)

  :config
  (cond ((equal (system-name) ps/computer-hostname-pablo)
         (setq calendar-location-name "Condesa, Mexico City")
         (setq calendar-latitude 19.424335622396516)
         (setq calendar-longitude -99.16659969406722))
        ((equal (system-name) ps/computer-hostname-leo)
         (setq calendar-location-name "Barcelona")
         (setq calendar-latitude 41.3874)
         (setq calendar-longitude 2.1686)))
  ;; To copy the current latitude and longitude, go to Google Maps,
  ;; right-click on your location, and select the coordinates.
  ;; (calendar-location-name "Ciudad de Buenos Aires, Argentina")
  ;; (calendar-latitude -34.6079) (calendar-longitude -58.3660)

  ;; Adapted from Prot
  (defcustom ps/date-specifier "%F"
    "Date specifier for `format-time-string'.
Used by `ps/insert-date'."
    :type 'string)

  (defcustom ps/time-specifier "%R %z"
    "Time specifier for `format-time-string'.
Used by `ps/insert-date'."
    :type 'string)

  (defun ps/insert-date (&optional arg)
    "Insert the current date as `ps/date-specifier'.

With optional prefix ARG (\\[universal-argument]) also append the
current time understood as `ps/time-specifier'.

When region is active, delete the highlighted text and replace it
with the specified date."
    (interactive "P")
    (let* ((date ps/date-specifier)
           (time ps/time-specifier)
           (format (if arg (format "%s %s" date time) date)))
      (when (use-region-p)
        (delete-region (region-beginning) (region-end)))
      (insert (format-time-string format))))

  :general
  ("C-d" 'calendar
   "A-s-=" 'ps/insert-date
   "s-=" "C-u A-s-=")
  (calendar-mode-map
   "H-m" 'calendar-set-mark
   "A-C-s-u" 'calendar-backward-day
   "A-C-s-i" 'calendar-backward-week
   "A-C-s-o" 'calendar-forward-week
   "A-C-s-p" 'calendar-forward-day
   "A-C-s-m" 'calendar-backward-month
   "A-C-s-," 'calendar-backward-year
   "A-C-s-." 'calendar-forward-year
   "A-C-s-/" 'calendar-forward-month
   "C-f" nil
   "C-b" nil
   "C-n" nil
   "C-p" nil
   "=" 'calendar-count-days-region))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       9C38D5E5-7717-405F-833D-28EF09AC752B
:END:
**** DONE [#6] Define ~calendar-mode~ key bindings.
CLOSED: [2021-05-11 Tue 12:28]
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-11 Tue 12:28
:ID:       339E9102-E28D-49CB-AD49-0186A451BCC4
:END:
Prot's video may be useful: https://www.youtube.com/watch?v=NkhgIB64zgc

**** DONE Add father's, mother's Day to calendar
CLOSED: [2021-07-04 Sun 22:06]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-04 Sun 22:06
:ID:       DC2E7462-6C58-4721-98B7-7E486772AB9C
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 21:12]--[2021-07-04 Sun 21:56] =>  0:44
:END:
Also as tasks, so that I get a reminder in advance.
https://www.gnu.org/software/emacs/manual/html_node/emacs/Sexp-Diary-Entries.html
**** DONE Activate all holidays by default
CLOSED: [2021-07-04 Sun 22:32]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-04 Sun 22:32
:ID:       A7BD0851-692C-4556-BABB-F4F1A8E0946F
:END:
**** DONE [#7] remove mother's, father's day from Emacs diary
CLOSED: [2022-12-21 Wed 00:09]
:PROPERTIES:
:Effort:   0:10
:ID:       59B9BACC-2802-4AF8-93C6-F7AFAF6B9682
:ARCHIVE_TIME: 2022-12-21 Wed 00:09
:END:
:LOGBOOK:
CLOCK: [2022-06-19 Sun 06:31]--[2022-06-19 Sun 06:44] =>  0:13
:END:
It's defined in the variable ~holiday-general-holidays~
** loaddefs
:PROPERTIES:
:ID:       08F898A1-71C0-4BF4-B6E8-5D6649DB230C
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-feature loaddefs
  :init
  (dolist (holiday '((holiday-float 6 0 3 "Father's Day")
                     (holiday-float 5 0 2 "Mother's Day"))
                   (delete holiday holiday-general-holidays))))
#+end_src

** org-gcal
:PROPERTIES:
:ID:       9E8AEF97-2E1A-489E-929A-CE5789EABFB9
:org-gcal-managed: org
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 11:10]--[2022-07-15 Fri 11:19] =>  0:09
CLOCK: [2022-07-11 Mon 15:51]--[2022-07-11 Mon 16:17] =>  0:26
CLOCK: [2022-07-03 Sun 10:53]--[2022-07-03 Sun 11:18] =>  0:25
CLOCK: [2022-06-27 Mon 12:00]--[2022-06-27 Mon 12:10] =>  0:10
CLOCK: [2022-06-02 Thu 12:05]--[2022-06-02 Thu 12:16] =>  0:11
CLOCK: [2022-05-07 Sat 07:24]--[2022-05-07 Sat 08:33] =>  1:09
CLOCK: [2021-12-06 Mon 12:52]--[2021-12-06 Mon 12:52] =>  0:00
CLOCK: [2021-11-21 Sun 20:11]--[2021-11-21 Sun 20:28] =>  0:17
CLOCK: [2021-11-17 Wed 11:49]--[2021-11-17 Wed 13:10] =>  1:21
CLOCK: [2021-10-10 Sun 21:33]--[2021-10-10 Sun 22:14] =>  0:41
CLOCK: [2021-10-04 Mon 18:43]--[2021-10-04 Mon 18:52] =>  0:09
CLOCK: [2021-10-04 Mon 18:11]--[2021-10-04 Mon 18:43] =>  0:32
CLOCK: [2021-09-29 Wed 23:08]--[2021-09-29 Wed 23:16] =>  0:08
CLOCK: [2021-09-29 Wed 22:54]--[2021-09-29 Wed 23:02] =>  0:08
CLOCK: [2021-09-29 Wed 22:12]--[2021-09-29 Wed 22:45] =>  0:33
CLOCK: [2021-09-27 Mon 20:51]--[2021-09-27 Mon 20:59] =>  0:08
CLOCK: [2021-08-02 Mon 18:47]--[2021-08-02 Mon 18:50] =>  0:03
CLOCK: [2021-08-02 Mon 08:30]--[2021-08-02 Mon 08:52] =>  0:22
CLOCK: [2021-07-26 Mon 21:15]--[2021-07-26 Mon 21:29] =>  0:14
CLOCK: [2021-07-22 Thu 12:23]--[2021-07-22 Thu 12:50] =>  0:27
CLOCK: [2021-04-02 Fri 13:56]--[2021-04-02 Fri 15:24] =>  1:28
:END:
/[[https://github.com/kidd/org-gcal.el][org-gcal]] integrates org with Google Calendar./

(That's the actively maintained fork; the [[https://github.com/myuhe/org-gcal.el/issues/124#issuecomment-642859466][official repository]] is no longer maintained.)

#+begin_src emacs-lisp :results silent
(use-package org-gcal
  :if (equal (system-name) ps/computer-hostname-pablo)
  :straight (org-gcal :type git :host github :repo "kidd/org-gcal.el")
  :after auth-source-pass
  :demand t
  ;; :defer 10

  :init
  (setq org-gcal-up-days 0)
  (setq org-gcal-down-days 3)
  (setq org-gcal-file-alist `((,ps/personal-gmail . ,ps/file-calendar)))

  (defun ps/org-gcal--get-time-and-desc ()
    "Get the timestamp and description of the event at point.

  Return a plist with :start, :end, and :desc keys. The value for a key is nil if
  not present."
    (let (start end desc tobj elem)
      (save-excursion
        (org-gcal--back-to-heading)
        (setq elem (org-element-at-point))
        ;; Parse :org-gcal: drawer for event time and description.
        (when
            (re-search-forward
             (format "^[ \t]*:%s:[ \t]*$" org-gcal-drawer-name)
             (save-excursion (outline-next-heading) (point))
             'noerror)
          ;; First read any event time from the drawer if present. It's located
          ;; at the beginning of the drawer.
          (save-excursion
            (when
                (re-search-forward "<[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]"
                                   (save-excursion (outline-next-heading) (point))
                                   'noerror)
              (goto-char (match-beginning 0))
              (setq tobj (org-element-timestamp-parser))))
          ;; Lines after the timestamp contain the description. Skip leading
          ;; blank lines.
          (forward-line)
          (beginning-of-line)
          (re-search-forward
           "\\(?:^[ \t]*$\\)*\\([^z-a]*?\\)\n?[ \t]*:END:"
           (save-excursion (outline-next-heading) (point)))
          (setq desc (match-string-no-properties 1))
          (setq desc
                (if (string-match-p "\\‘\n*\\’" desc)
                    nil
                  (replace-regexp-in-string
                   "^✱" "*"
                   (replace-regexp-in-string
                    "\\`\\(?: *<[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].*?>$\\)\n?\n?"
                    ""
                    (replace-regexp-in-string
                     " *:PROPERTIES:\n *\\(.*\\(?:\n.*\\)*?\\) *:END:\n+"
                     ""
                     desc)))))))
      ;; Prefer to read event time from the SCHEDULE property if present.
      (setq tobj (or (org-element-property :deadline elem) tobj))
      (when tobj
        (when (plist-get (cadr tobj) :year-start)
          (setq
           start
           (org-gcal--format-org2iso
            (plist-get (cadr tobj) :year-start)
            (plist-get (cadr tobj) :month-start)
            (plist-get (cadr tobj) :day-start)
            (plist-get (cadr tobj) :hour-start)
            (plist-get (cadr tobj) :minute-start)
            (when (plist-get (cadr tobj) :hour-start) t))))
        (when (plist-get (cadr tobj) :year-end)
          (setq
           end
           (org-gcal--format-org2iso
            (plist-get (cadr tobj) :year-end)
            (plist-get (cadr tobj) :month-end)
            (plist-get (cadr tobj) :day-end)
            (plist-get (cadr tobj) :hour-end)
            (plist-get (cadr tobj) :minute-end)
            (when (plist-get (cadr tobj) :hour-end) t)))))
      (list :start start :end end :desc desc)))

  (defun ps/org-gcal--update-entry (calendar-id event &optional update-mode)
    "Update the entry at the current heading with information from EVENT.

EVENT is parsed from the Calendar API JSON response using ‘org-gcal--json-read’.
CALENDAR-ID must be passed as well. Point must be located on an Org-mode heading
line or an error will be thrown. Point is not preserved.

If UPDATE-MODE is passed, then the functions in
‘org-gcal-after-update-entry-functions' are called in order with the same
arguments as passed to this function and the point moved to the beginning of the
heading."
    (unless (org-at-heading-p)
      (user-error "Must be on Org-mode heading."))
    (let* ((smry  (or (plist-get event :summary)
                      "busy"))
           (desc  (plist-get event :description))
           (loc   (plist-get event :location))
           (_link  (plist-get event :htmlLink))
           (meet  (plist-get event :hangoutLink))
           (etag (plist-get event :etag))
           (event-id    (plist-get event :id))
           (stime (plist-get (plist-get event :start)
                             :dateTime))
           (etime (plist-get (plist-get event :end)
                             :dateTime))
           (sday  (plist-get (plist-get event :start)
                             :date))
           (eday  (plist-get (plist-get event :end)
                             :date))
           (start (if stime (org-gcal--convert-time-to-local-timezone stime org-gcal-local-timezone) sday))
           (end   (if etime (org-gcal--convert-time-to-local-timezone etime org-gcal-local-timezone) eday))
           (old-time-desc (org-gcal--get-time-and-desc))
           (old-start (plist-get old-time-desc :start))
           (old-end (plist-get old-time-desc :start))
           (recurrence (plist-get event :recurrence))
           (elem))
      (when loc (replace-regexp-in-string "\n" ", " loc))
      (org-edit-headline smry)
      (org-entry-put (point) org-gcal-etag-property etag)
      (when recurrence (org-entry-put (point) "recurrence" (format "%s" recurrence)))
      (when loc (org-entry-put (point) "LOCATION" loc))
      (when meet
        (org-entry-put
         (point)
         "HANGOUTS"
         (format "[[%s][%s]]"
                 meet
                 "Join Hangouts Meet")))
      (org-entry-put (point) org-gcal-calendar-id-property calendar-id)
      (org-gcal--put-id (point) calendar-id event-id)
      ;; Insert event time and description in :ORG-GCAL: drawer, erasing the
      ;; current contents.
      (org-gcal--back-to-heading)
      (setq elem (org-element-at-point))
      (save-excursion
        (when (re-search-forward
               (format
                "^[ \t]*:%s:[^z-a]*?\n[ \t]*:END:[ \t]*\n?"
                (regexp-quote org-gcal-drawer-name))
               (save-excursion (outline-next-heading) (point))
               'noerror)
          (replace-match "" 'fixedcase)))
      (unless (re-search-forward ":PROPERTIES:[^z-a]*?:END:"
                                 (save-excursion (outline-next-heading) (point))
                                 'noerror)
        (message "PROPERTIES not found: %s (%s) %d"
                 (buffer-name) (buffer-file-name) (point)))
      (end-of-line)
      ;; (newline)
      ;; (insert (format ":%s:" org-gcal-drawer-name))
      ;; (newline)
      ;; Keep existing timestamps for parent recurring events.
      (when (and recurrence old-start old-end)
        (setq start old-start
              end old-end))
      (let*
          ((timestamp
            (if (or (string= start end) (org-gcal--alldayp start end))
                (org-gcal--format-iso2org start)
              (if (and
                   (= (plist-get (org-gcal--parse-date start) :year)
                      (plist-get (org-gcal--parse-date end)   :year))
                   (= (plist-get (org-gcal--parse-date start) :mon)
                      (plist-get (org-gcal--parse-date end)   :mon))
                   (= (plist-get (org-gcal--parse-date start) :day)
                      (plist-get (org-gcal--parse-date end)   :day)))
                  (format "<%s-%s>"
                          (org-gcal--format-date start "%Y-%m-%d %a %H:%M")
                          (org-gcal--format-date end "%H:%M"))
                (format "%s--%s"
                        (org-gcal--format-iso2org start)
                        (org-gcal--format-iso2org
                         (if (< 11 (length end))
                             end
                           (org-gcal--iso-previous-day end))))))))
        (if (org-element-property :deadline elem)
            (unless (and recurrence old-start) (org-deadline nil timestamp))
          (org-deadline nil timestamp)
          (newline)
          (when desc (newline))))
      ;; Insert event description if present.
      (when desc
        (insert (replace-regexp-in-string "^\*" "✱" desc))
        (insert (if (string= "\n" (org-gcal--safe-substring desc -1)) "" "\n")))
      ;; (insert ":END:")
      (when (org-gcal--event-cancelled-p event)
        (save-excursion
          (org-back-to-heading t)
          (org-gcal--handle-cancelled-entry)))
      (when update-mode
        (cl-dolist (f org-gcal-after-update-entry-functions)
          (save-excursion
            (org-back-to-heading t)
            (funcall f calendar-id event update-mode))))))

  ;; I replace the two native functions with the slightly tweaked
  ;; versions under `:init' so that `org-gcal' uses the `DEADLINE'
  ;; property for all timestamps.
  (advice-add 'org-gcal--get-time-and-desc :override #'ps/org-gcal--get-time-and-desc)
  (advice-add 'org-gcal--update-entry :override #'ps/org-gcal--update-entry)

  :custom
  (org-gcal-client-id (auth-source-pass-get "host" "auth-sources/org-gcal"))
  (org-gcal-client-secret (auth-source-pass-get 'secret "auth-sources/org-gcal"))
  (org-gcal-recurring-events-mode 'top-level)
  (org-gcal-remove-api-cancelled-events nil) ; never remove cancelled events
  (org-gcal-notify-p nil)
  (org-gcal-auto-archive nil)

  :config
  (defun ps/org-gcal-open-at-point ()
    "Get entry id of `org-gcal' entry at point and open the
associated Google Calendar event in a browser."
    (interactive)
    (if-let ((id (org-entry-get nil "entry-id")))
        (browse-url
         (concat
          "https://calendar.google.com/calendar/u/0/r/eventedit/"
          (replace-regexp-in-string
           "\n"
           ""
           (base64-encode-string
            (replace-regexp-in-string
             "/"
             " "
             id))))))
    (user-error "No id found."))


  ;; (advice-add 'org-gcal-sync :before (lambda () (setq message-log-max 10000)))
  ;; (advice-add 'org-gcal-sync-buffer :before (lambda () (setq message-log-max 10000)))

  (defhydra hydra-org-gcal (:exit t :hint nil)
    "
_f_etch all       |_s_ync all        |_p_ost at point   |_d_elete at point |token _r_equest   |_t_oggle debug
_F_etch buffer    |_S_ync buffer     |_o_pen at point   |_u_nlock sync     |token _c_lear     |_q_uit  "
    ("f" org-gcal-fetch)
    ("F" org-gcal-fetch-buffer)
    ("s" org-gcal-sync)
    ("S" org-gcal-sync-buffer)
    ("p" org-gcal-post-at-point)
    ("d" org-gcal-delete-at-point)
    ("o" ps/org-gcal-open-at-point)
    ("u" org-gcal--sync-unlock)
    ("r" org-gcal-request-token)
    ("c" org-gcal-sync-tokens-clear)
    ("t" org-gcal-toggle-debug)
    ("q" nil))

  :general
  (org-mode-map
   "s-g" 'hydra-org-gcal/body))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       D90EB0FC-F92B-4ACB-8B55-4DB8B598D979
:END:
**** DONE Fix org-gcal
CLOSED: [2021-07-06 Tue 21:34]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-06 Tue 21:34
:ID:       2F3A9C7F-8183-4837-81C8-1DBFDB22F5E2
:END:
:LOGBOOK:
CLOCK: [2021-07-06 Tue 21:16]--[2021-07-06 Tue 21:40] =>  0:24
:END:
- [X] Set up Straight so you can specify loath path (official repo is not maintained)
- [X] Run ~org-gcal-sync~ and see what happens.

[2021-07-06 Tue 21:33] It seems to have reverted to the state it was initially, where I'd get some errors but the events would be fetched. I'm slightly bothered by the errors, but I don't think it's worth the trouble of fixing them, since it looks like they don't affect the functionality.

**** CANCELLED [#6] Set org-gcal so that Google Calendar events are created for all TODOs with deadlines
CLOSED: [2021-07-29 Thu 16:15]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2021-07-29 Thu 16:15
:ID:       41367ABA-CEB9-4495-9866-6F1FFFB70640
:END:
**** DONE [#4] Figure out why new events created on Google Calendar aren't imported
CLOSED: [2021-08-02 Mon 18:44]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-08-02 Mon 18:44
:ID:       9FCD34A2-982A-48BC-9802-DE378A538AB7
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 18:01]--[2021-08-02 Mon 18:40] =>  0:39
:END:

**** CANCELLED Color tasks with ~org-gcal~ property
CLOSED: [2021-08-02 Mon 19:41]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-02 Mon 19:41
:ID:       DF68FC33-B214-4A5B-935D-F49247B5C8DD
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 19:10]--[2021-08-02 Mon 19:40] =>  0:30
CLOCK: [2021-08-02 Mon 18:50]--[2021-08-02 Mon 19:06] =>  0:16
:END:
I tried [[https://stackoverflow.com/questions/17066580/color-code-agenda-view-per-file][this]] but it didn't work.
**** DONE [#4] Fix ~org-gcal~
CLOSED: [2021-09-24 Fri 19:05]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-09-24 Fri 19:05
:ID:       7F55EC77-DC43-42E0-9CC0-D122E8FC3EF4
:END:
:LOGBOOK:
CLOCK: [2021-09-24 Fri 18:44]--[2021-09-24 Fri 19:05] =>  0:21
:END:
Using ~inbox.org~ instead of ~appointments.org~ fixed it. This is probably happening because I used ~inbox.org~ right after setting things up for the first time.

**** DONE [#5] Fix org-gcal (once and for all!)
CLOSED: [2021-11-17 Wed 13:10]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-11-17 Wed 13:10
:ID:       356E3FA4-1D53-413B-B5EB-8EBC698DADFF
:END:
:LOGBOOK:
CLOCK: [2021-10-05 Tue 23:52]--[2021-10-06 Wed 00:07] =>  0:15
:END:
**** DONE [#5] Diagnose why org-gcal downloads events again if they are moved out of ~calendar.org~
CLOSED: [2022-04-28 Thu 19:05] SCHEDULED: <2022-04-27 Wed>
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2022-04-28 Thu 19:05
:ID:       BB6B2E3A-C345-4768-BA84-FEA9EEAA50AC
:END:
[2022-04-28 Thu 16:05] Let's just keep active events in ~calendar.org~ and move them to the relevant file only when archiving.
:LOGBOOK:
CLOCK: [2022-04-28 Thu 16:30]--[2022-04-28 Thu 16:38] =>  0:08
CLOCK: [2022-04-28 Thu 16:05]--[2022-04-28 Thu 16:10] =>  0:05
:END:
**** DONE Fix calendar duplicates
CLOSED: [2022-06-30 Thu 08:41]
:PROPERTIES:
:ID:       ABA7101D-E448-4158-B903-D66A9311BD9B
:ARCHIVE_TIME: 2022-07-11 Mon 16:06
:END:
:LOGBOOK:
CLOCK: [2022-06-30 Thu 08:22]--[2022-06-30 Thu 08:41] =>  0:19
:END:

**** DONE [#6] Why Matthew meetings aren't syncing?
CLOSED: [2022-07-11 Mon 16:09]
:PROPERTIES:
:Effort:   0:25
:ID:       F15DBB41-A4AA-4924-9AE4-EFFB9E9FABF7
:ARCHIVE_TIME: 2022-07-11 Mon 16:09
:END:
:LOGBOOK:
CLOCK: [2022-06-01 Wed 21:47]--[2022-06-01 Wed 22:14] =>  0:27
CLOCK: [2022-05-30 Mon 16:02]--[2022-05-30 Mon 16:06] =>  0:04
:END:
**** DONE Fix org-gcal
CLOSED: [2022-07-25 Mon 18:52] SCHEDULED: <2022-07-25 Mon>
:PROPERTIES:
:ID:       7A0C685D-C979-48C6-9CFF-FD94818156EA
:ARCHIVE_TIME: 2022-07-25 Mon 18:52
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 18:35]--[2022-07-25 Mon 18:52] =>  0:17
:END:

Example of errors I get:

#+begin_src text
[error] request--callback: peculiar error: 401
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events?access_token=ya29.A0AVA9y1uVdNqLm6X5Hh1JHHIrjO5xcldJL6Rsffq_nnq5VyhPGxYHLJWeAR6KLQ80HYH-5i7fj6-NPTNrVS_XzOvaHpQqbiMuHs6ePuP204MA7vQc0eqIEQXtN-GBkOAjQuTQJ3KxEue92DFTCnGJ70B12EDvn6IYUNnWUtBVEFTQVRBU0ZRRTY1ZHI4QVBIcVJyRV8tS1Q0ZEgxNDNDWVhCUQ0166&singleEvents=True&syncToken=CJitp8jphvkCEJitp8jphvkCGAUgnpb32gE%3D error
Received HTTP 401
OAuth token expired. Now trying to refresh-token
Deadline on <2022-07-21 Thu 14:30-15:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220302T170000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220302T170000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-03-02 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220316T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220316T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-03-16 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220330T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220330T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-03-30 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220216T170000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220216T170000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-02-16 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220223T170000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220223T170000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-02-23 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220309T170000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220309T170000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-03-09 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220323T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220323T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-03-23 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220406T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220406T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-04-06 Wed 12:00-13:00>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220413T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220413T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-04-13 Wed 12:00-12:45>
[error] request--callback: peculiar error: 412
[error] request-default-error-callback: https://www.googleapis.com/calendar/v3/calendars/pablo.stafforini%40gmail.com/events/9p5rrfhm5rsch6rqtm6igt950j_20220420T160000Z parse-error
Received HTTP 412
ETag stale for David Jonny Pablo UwU ^_^ Call
9p5rrfhm5rsch6rqtm6igt950j_20220420T160000Z/pablo.stafforini@gmail.com

Will overwrite this entry with event from server.
Deadline on <2022-04-20 Wed 12:00-12:45>
mouse-2 or RET jump to Org file ~/Dropbox/org/notes/FTX-Fellowship.org
Rebuilding agenda buffer...
Truncate long lines enabled
Preparing diary...done
Rebuilding agenda buffer...done
Saving file /Users/pablostafforini/Dropbox/org/android/calendar.org...
Wrote /Users/pablostafforini/Dropbox/org/android/calendar.org
mouse-2 or RET jump to org file ~/Dropbox/org/android/calendar.org
Clipboard pasted as level 1 subtree
Mark set
#+end_src
**** CANCELLED [#7] Submit org-gcal hydra as pull request
CLOSED: [2022-07-25 Mon 18:55]
:PROPERTIES:
:Effort:   0:30
:org-gcal-managed: org
:ID:       F94AAA76-257C-402D-B22D-195C27587C1B
:ARCHIVE_TIME: 2022-07-25 Mon 18:56
:END:
[2022-07-25 Mon 18:55] When I shared my config with the maintainer, which included the hydra, he didn't express interest in it.

**** DONE [#5] Fix org-gcal
CLOSED: [2022-12-12 Mon 00:04] SCHEDULED: <2022-12-11 Sun>
:PROPERTIES:
:ID:       CCC399F6-32B4-4264-89A1-6A6C72F22C81
:Effort:   0:30
:ARCHIVE_TIME: 2022-12-12 Mon 00:04
:END:
** gcalcli
:PROPERTIES:
:ID:       BDDB27DC-E5E2-42CC-B6B1-BBD17565EEC8
:END:
/The section below contains some custom functions for interfacing with [[https://github.com/insanum/gcalcli][gcalcli]], a Google Calendar Command Line Interface./

[2023-01-14 Sat] I wasn't able to make it work, probably because of the issue reported [[https://github.com/insanum/gcalcli/issues][here]]. Maybe wait a couple of months and see if the problem is fixed.

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       35CF1116-B12A-4A18-B99A-FDD62063DE20
:END:
**** DONE Configure gcalcli
CLOSED: [2022-09-29 Thu 15:36]
:PROPERTIES:
:ID:       79262744-B093-48AB-8D4B-9B9B7C09C6C3
:ARCHIVE_TIME: 2022-10-01 Sat 21:01
:END:
:LOGBOOK:
CLOCK: [2022-09-29 Thu 15:12]--[2022-09-29 Thu 15:36] =>  0:24
:END:
https://github.com/insanum/gcalcli

** time
:PROPERTIES:
:ID:       88CCE9CB-8284-4C8B-8264-A1E54E299941
:END:
#+begin_src emacs-lisp :results silent
(use-feature time
  :after tab-bar
  :demand t
  :custom
  (world-clock-list '(("Europe/Barcelona" "Barcelona")
                      ("Europe/London" "London")
                      ("America/Buenos_Aires" "Buenos Aires")
                      ("America/Nassau" "Nassau")
                      ("America/New_York" "New York")
                      ("America/Los_Angeles" "San Francisco")))
  (display-time-format "%a %e %b %T")
  (display-time-interval 1)
  (display-time-default-load-average nil)

  :config
  (display-time-mode)

  ;; github.com/arunkmv/.config/tree/main/emacs#tab-bar
  (defface ps/display-time
    '((t (:inherit bold)))
    "Face for `display-time-string' in `global-mode-string'")

  :general
  ("M-A-t" 'world-clock))
#+end_src

** tmr
:PROPERTIES:
:ID:       87D2EB00-727C-4CA3-85F1-B8D82D37B48D
:END:
#+begin_src emacs-lisp :results silent
(use-package tmr
  :defer 10)
#+end_src

** hammy
:PROPERTIES:
:ID:       79C8D6B8-7D86-4B63-82C2-61E6DFFC4152
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package hammy
  :if (equal (system-name) ps/computer-hostname-pablo)
  :straight (hammy
             :host github
             :repo "alphapapa/hammy.el")

  :config
  (hammy-define "Move"
    :documentation "Don't forget to stretch your legs."
    :intervals
    ;; A list of intervals, each defined with the `interval' function.
    (list (interval
           ;; The name of the interval is a string, used when selecting
           ;; hammys and shown in the mode line.
           :name "💺"
           ;; The duration of the interval: a number of seconds, a string
           ;; passed to `timer-duration', or a function which returns such.
           :duration "45 minutes"
           ;; Optionally, a face in which to show the
           ;; interval's name in the mode line.
           :face 'font-lock-type-face
           ;; A list of actions to take before starting the interval
           ;; (really, one or a list of functions to call with the hammy
           ;; as the argument).  The `do' macro expands to a lambda,
           ;; which the interval's `before' slot is set to.  In its
           ;; body, we call two built-in helper functions.
           :before (do (announce "Whew!")
                       (notify "Whew!"))
           ;; We want this interval to not automatically advance to the
           ;; next one; rather, we want the user to call the
           ;; `hammy-next' command to indicate when the standing-up is
           ;; actually happening.  So we provide a list of actions to
           ;; take when it's time to advance to the next interval.  We
           ;; wrap the list in a call to the built-in `remind' function,
           ;; which causes the actions to be repeated every 10 minutes
           ;; until the user manually advances to the next interval.
           :advance (remind "10 minutes"
                            ;; Every 10 minutes, while the hammy is waiting
                            ;; to be advanced to the next interval, remind
                            ;; the user by doing these things:
                            (do (announce "Time to stretch your legs!")
                                (notify "Time to stretch your legs!")
                              (play-sound-file "~/Misc/Sounds/mooove-it.wav"))))
          (interval :name "🤸"
                    :duration "5 minutes"
                    :face 'font-lock-builtin-face
                    :before (do (announce "Mooove it!")
                                (notify "Mooove it!"))
                    ;; Again, the interval should not advance automatically
                    ;; to the next--the user should indicate when he's
                    ;; actually sat down again.  (If we omitted the
                    ;; `:advance' slot, the interval would automatically
                    ;; advance when it reached its duration.)
                    :advance (do (announce "Time for a sit-down...")
                                 (notify "Time for a sit-down...")
                               (play-sound-file org-pomodoro-finished-sound)))))

  (hammy-mode))
#+end_src

** display-wttr
:PROPERTIES:
:ID:       E1DB2097-7273-4FAC-BA84-67D46815FC45
:END:
/[[https://github.com/josegpt/display-wttr][display-wttr]] displays weather information in the modeline (or tab-bar)./

#+begin_src emacs-lisp
(use-package display-wttr
  :defer 6
  :custom
  (display-wttr-interval (* 15 60))

  :config
  (cond ((equal (system-name) ps/computer-hostname-pablo)
         (setq display-wttr-locations '("Mexico City")))
        ((equal (system-name) ps/computer-hostname-leo)
         (setq display-wttr-locations '("Barcelona"))))

  (display-wttr-mode))
#+end_src

* history
:PROPERTIES:
:ID:       20B0D7AB-5B27-4D80-A9D8-DAAAFCB27651
:END:
:LOGBOOK:
CLOCK: [2021-04-09 Fri 20:49]--[2021-04-09 Fri 20:59] =>  0:10
:END:
#+begin_src emacs-lisp :results silent
(use-feature simple
  :general
  ((minibuffer-mode-map mu4e-minibuffer-search-query-map)
   "M-k" 'previous-history-element
   "M-l" 'next-history-element))
#+end_src

** savehist
:PROPERTIES:
:ID:       D411AA79-C8FE-4E03-B06E-1BED5B7688BC
:END:
/savehist makes Emacs remember completion history across sessions./

#+begin_src emacs-lisp :results silent
(use-feature savehist
  :demand t
  :init
  (savehist-mode)

  :custom
  (history-length t "unlimited history")
  (savehist-additional-variables
   '(citar-history
     command-history
     compile-history
     compilation-command
     eww-history
     extended-command-history
     file-name-history
     Info-history-list
     ido-file-history
     kill-ring
     kmacro-ring
     last-kbd-macro
     log-edit-comment-ring
     magit-read-rev-history
     mark-ring
     read-expression-history
     regexp-search-ring
     register-alist
     search-ring
     shell-command-history
     telega-search-history
     twittering-search-history))
  (savehist-save-minibuffer-history t))
#+end_src

** saveplace
:PROPERTIES:
:ID:       8DE4A4B7-4B96-445F-BC1F-B10BBF181F53
:END:
/saveplace makes Emacs remember point position in file across sessions./

#+begin_src emacs-lisp :results silent
(use-feature saveplace
  :config
  (save-place-mode))
#+end_src

** session
:PROPERTIES:
:ID:       F4D1CD7C-0BA9-4D20-8D99-399331682D1B
:END:
/[[https://github.com/emacsorphanage/session][session]] lets you use variables, registers and buffer places across sessions./

#+begin_src emacs-lisp :results silent
(use-package session
  :demand t
  :custom
  (session-globals-include '((kill-ring 100)
                             (session-file-alist 500 t)
                             (file-name-history 10000)
                             search-ring regexp-search-ring))
  (history-length 1000)
  :hook
  (after-init-hook . session-initialize))
#+end_src

** recentf
:PROPERTIES:
:ID:       C22F4A07-A237-498A-999D-F841F3B10074
:END:
/recentf makes Emacs remember the most recently visited files./

#+begin_src emacs-lisp :results silent
(use-feature recentf
  :defer 10
  :custom
  (recentf-max-saved-items 1000)
  :config
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (recentf-mode))
#+end_src

** persistent-scratch
:PROPERTIES:
:ID:       B6CB6A6C-0BCC-4A07-9608-BDCA6184C63A
:END:
/[[https://github.com/Fanael/persistent-scratch][persistent-scratch]] makes Emacs remember the scratch buffer across sessions./

#+begin_src emacs-lisp :results silent
(use-package persistent-scratch
  :demand t
  :custom
  (persistent-scratch-autosave-interval 30)
  ;; What follows is copied from umarahmad.xyz/blog/quick-scratch-buffers/
  ;; (persistent-scratch-scratch-buffer-p-function 'ps/persistent-scratch-buffer-identifier)

  :config
  (defun ps/persistent-scratch-buffer-identifier ()
    (string-match "^*scratch:" (buffer-name)))

  (defun ps/persistent-scratch-get-scratches ()
    (let ((scratch-buffers)
          (save-data
           (read
            (with-temp-buffer
              (let ((coding-system-for-read 'utf-8-unix))
                (insert-file-contents persistent-scratch-save-file))
              (buffer-string)))))
      (dolist (saved-buffer save-data)
        (push (substring (aref saved-buffer 0) (length "*scratch:")) scratch-buffers))
      scratch-buffers))

  (defun ps/persistent-scratch-quick-open ()
    (interactive)
    (let* ((scratch-buffers (ps/persistent-scratch-get-scratches))
           (chosen-scratch (concat "*scratch:"
                                   (completing-read
                                    "Choose a scratch: "
                                    scratch-buffers nil nil nil nil
                                    (ps/random-alnum 4))))
           (buffer-exists-p (get-buffer chosen-scratch)))
      (pop-to-buffer chosen-scratch)
      (unless buffer-exists-p
        (persistent-scratch-restore-this))
      (persistent-scratch-mode)))

  (persistent-scratch-setup-default))
#+end_src

** remember
:PROPERTIES:
:ID:       438AD8A8-0F4F-4A1D-9BC9-110906944509
:END:
[2022-10-02 Sun 14:12] I installed this package only because I wanted to have a persistent ~*scratch*~ buffer. But I am now accomplishing this with [[id:B6CB6A6C-0BCC-4A07-9608-BDCA6184C63A][persistent scratch]].

#+begin_src emacs-lisp :results silent
(use-feature remember
  :custom
  (remember-data-file (file-name-concat ps/dir-emacs "var/remember"))
  (remember-notes-buffer-name "\*scratch\*"))
#+end_src

* version control
:PROPERTIES:
:ID:       CBBAD256-2800-4E9C-9042-C033FF95FA58
:END:
:LOGBOOK:
:END:
** vc
:PROPERTIES:
:ID:       B9E38DFD-09DC-4DB2-B710-44DB6F00D9DC
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 18:13]--[2021-07-22 Thu 18:34] =>  0:21
:END:

Nothing for the time being. Just a reminder to look into Emacs's native vc framework.

#+begin_src emacs-lisp :results silent
(use-feature vc
  :custom
  (vc-follow-symlinks t "don't ask for confirmation when opening symlinked file")
  (vc-make-backup-files nil "do not backup version controlled files"))
#+end_src

** magit
:PROPERTIES:
:ID:       B662CE1B-3F94-486E-A3DE-052775035960
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 21:51]--[2021-11-18 Thu 21:52] =>  0:01
CLOCK: [2021-07-22 Thu 17:12]--[2021-07-22 Thu 17:20] =>  0:08
CLOCK: [2021-07-01 Thu 22:05]--[2021-07-01 Thu 22:55] =>  0:50
CLOCK: [2021-02-25 Thu 17:24]--[2021-02-25 Thu 17:45] =>  0:21
CLOCK: [2021-02-25 Thu 14:53]--[2021-02-25 Thu 15:00] =>  0:07
:END:
#+begin_src emacs-lisp :results silent
  (use-package magit
    :defer 15
    :custom
    ;; chris.beams.io/posts/git-commit/
    (git-commit-summary-max-length 50)
    (magit-commit-ask-to-stage 'stage)

    :init

    ;; adapted from Sacha Chua
    (defun ps/magit-stage-commit-and-push-all (message)
      "Stage, commit and push all changes."
      (interactive (list (progn (magit-diff-unstaged) (read-string "Commit Message: "))))
      (add-to-list 'magit-no-confirm 'stage-all-changes)
      (magit-stage-modified '(4))
      (magit-commit-create (list "-m" message))
      (call-interactively #'magit-push-current-to-pushremote))

    (defun ps/magit-midnight-update (arg)
      "Update repository daily using `midnight'."
      (let ((default-directory arg))
        (when (or (magit-anything-staged-p) (magit-anything-unstaged-p))
          (ps/magit-stage-commit-and-push-all "Midnight update"))))

    :config
    ;; It was prompting me to save every modified file-visiting buffer
    ;; (magit-wip-mode)
    :general
    ("A-g" 'magit))
#+end_src

To submit a patch: make the commits in git, then call ~magit-status~, ~W p~. That generates a ~.patch~ file which you can attach to an email using whatever email client you usually use.

- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- To read: [[https://emacsredux.com/blog/2020/12/11/super-keybindings-for-magit/][Super Keybindings for Magit | Emacs Redux]]

*** resources
:PROPERTIES:
:ID:       09A7E16B-377A-4BB7-AC3B-4D7A673E7CA8
:END:
- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- https://tvraman.github.io/emacspeak/blog/github-quick-workflow.html
- [[https://prathamesh.tech/2019/06/21/creating-pull-requests-from-emacs/][Creating pull requests from emacs]]

*** new repository workflow
:PROPERTIES:
:ID:       65F06149-41AE-46C8-9F80-71CB98C11965
:END:
1. create repository
2. stage changes (~s~)
3. commit changes (~c c~)
4. add remote (~M a~)
     1. remote name: ~origin~
     2. remote url: Github URL, e.g. ~https://github.com/benthamite/anki.git~
     3. answer ~y~ to prompt
5. push (~P p~)

*** bug submission workflow
:PROPERTIES:
:ID:       18842ACD-AD1A-4940-866B-C8E27150D7BB
:END:
1. ~magit-status~ from the relevant directory (~A-g~)
2. make the commits
3. ~format-patches~ (~W~)
4. ~save diff as patch~ (~s~)
   # I think this is the right command but I'm not sure
   # It has to be a command that generates a .patch file


*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       8CAE56AA-E12D-4A19-AA6E-F964EB7B65E0
:END:
**** DONE Fix magit-no-confirm
CLOSED: [2022-01-24 Mon 17:48]
:PROPERTIES:
:ARCHIVE_TIME: 2022-01-24 Mon 17:48
:ID:       3C78871A-BF77-41D3-A2F7-3140994DF0AF
:END:
:LOGBOOK:
CLOCK: [2022-01-24 Mon 17:44]--[2022-01-24 Mon 17:48] =>  0:04
:END:
Seems fixed now.
** ghub
:PROPERTIES:
:ID:       C557A862-9EC7-406C-98E1-C248F7D579F5
:END:
/[[https://github.com/magit/ghub][Ghub]] provides basic support for using the APIs of various Git forges from Emacs packages./

#+begin_src emacs-lisp :results silent
(use-package ghub
  :defer 5)
#+end_src

** forge
:PROPERTIES:
:ID:       16015B63-B0D8-4646-A61A-51CF6049CA27
:END:
:LOGBOOK:
CLOCK: [2022-06-25 Sat 15:55]--[2022-06-25 Sat 16:30] =>  0:35
CLOCK: [2021-12-21 Tue 20:20]--[2021-12-21 Tue 20:27] =>  0:07
CLOCK: [2021-07-19 Mon 16:11]--[2021-07-19 Mon 16:39] =>  0:28
CLOCK: [2021-07-19 Mon 14:22]--[2021-07-19 Mon 15:15] =>  0:53
CLOCK: [2021-04-15 Thu 13:37]--[2021-04-15 Thu 13:42] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-package forge
  :after magit ghub
  :demand t
  :init
  (unless (version<= emacs-version "29.0")
    (setq forge-database-connector 'sqlite-builtin))

  :custom
  (forge-owned-accounts `((,ps/forge-owned-accounts)))

  :general
  (forge-post-mode-map
   "s-c" 'forge-post-submit))
#+end_src

** code-review
:PROPERTIES:
:ID:       A0887865-7CAC-47E6-A894-D49F07BCBAF9
:END:
/[[https://github.com/wandersoncferreira/code-review][code-review]] ([[https://wandersoncferreira.github.io/code-review/][homepage]]) helps perform code reviews from Emacs./

[2022-08-29 Mon 17:02] To check at some point.

#+begin_src emacs-lisp :results silent
(use-package code-review
  :custom
  (code-review-fill-column 80)
  (code-review-new-buffer-window-strategy #'switch-to-buffer)
  (code-review-auth-login-marker 'forge)

  :hook
  (code-review-mode-hook . emojify-mode))
#+end_src

** projectile
:PROPERTIES:
:ID:       DD7DF8D4-CB05-4E98-8125-D453D25E092A
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 17:20]--[2021-07-22 Thu 17:24] =>  0:04
:END:
Disabling since I'm not really using it.

#+begin_src emacs-lisp :results silent :tangle no
(use-package projectile
  :config
  (projectile-mode)
  :general
  ("H-p" 'projectile-command-map))
#+end_src

** git-timemachine
:PROPERTIES:
:ID:       8D9F7AC2-EB01-4ED7-84BA-7BD6AF11A7F9
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:37]--[2021-06-25 Fri 21:40] =>  0:03
:END:
/[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] lets you walk through git revisions of a file./

#+begin_src emacs-lisp :results silent
(use-package git-timemachine
  :straight
  (git-timemachine
   :type git
   :host codeberg
   :repo "pidu/git-timemachine")
  :demand t
  :general
  ("A-H-t" 'git-timemachine))
#+end_src

** git-auto-commit-mode
:PROPERTIES:
:ID:       FCB4DDAC-CD47-48CE-BA0F-96C0574C458A
:END:
/[[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]] allows for committing and pushing automatically after each save./

#+begin_src emacs-lisp :results silent
(use-package git-auto-commit-mode
  :demand t
  :config
  (setq-default gac-automatically-push-p nil)
  (setq-default gac-debounce-interval 30)
  (setq-default gac-silent-message-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+end_src

** git-gutter
:PROPERTIES:
:ID:       ECD5FD26-F74B-473A-AF56-9B67F635C924
:END:
[2022-08-24 Wed 13:17] Disabling for the time being. I wasn't really using it, and found the sudden margin changes distracting and annoying.

#+begin_src emacs-lisp :results silent :tangle no
(use-package git-gutter
   :defer 10
   :config
   (global-git-gutter-mode))
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       A15BC2BA-0157-48CA-ACDC-E3D1CE4D640F
:END:
*** DONE Fix 'deprecation notice' Github issue
CLOSED: [2021-07-06 Tue 23:29]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-06 Tue 23:29
:ID:       9B966C08-9A97-4261-9C67-A4BBE0A91945
:END:
:STATES:
- Not scheduled, was "[2021-07-07 Wed 16:00-16:30]" on [2021-07-06 Tue 23:29]
- Rescheduled from "[2021-06-26 Sat]" on [2021-06-25 Fri 22:55]
:END:
[[https://mail.google.com/mail/u/0/?tab=wm#inbox/FMfcgzGkXwHpKDllwpHSTcBKwgZWvZlc][email link]]

Looks like I'm no longer getting this message.
*** DONE [#6] Set elpa folder as a local git repository
CLOSED: [2021-07-10 Sat 18:47]
:PROPERTIES:
:Effort:   1:30
:ARCHIVE_TIME: 2021-07-10 Sat 18:47
:ID:       DAD74B35-7A07-4C30-9853-1BDEEB0BC08A
:END:

I should keep the =.emacs.d/elpa= directory as a local git repository. I can then update packages periodically and rollback any breaking changes easily. Inspired by reading [[https://www.reddit.com/r/emacs/comments/9e4yop/lets_talk_about_when_to_update_packages/][this Reddit comment thread]]. I did this just before my installation broke, so I'm not sure if the break was related. I should probably investigate a bit before going ahead, in case there are certain precautions I should take into account.

[2021-04-24 Sat 19:57] Is this really worth it, compared to just making a backup of the packages before updating? I don't think so.

[2021-07-10 Sat 18:46] No longer needed, since I'm using Straight.
* search & replace
:PROPERTIES:
:ID:       9FDBBF3E-724F-4402-9DDB-F9349F65AB0E
:END:
:LOGBOOK:
CLOCK: [2021-05-23 Sun 15:31]--[2021-05-23 Sun 15:42] =>  0:11
CLOCK: [2021-05-22 Sat 22:23]--[2021-05-22 Sat 22:46] =>  0:23
CLOCK: [2021-04-04 Sun 19:29]--[2021-04-04 Sun 19:40] =>  0:11
CLOCK: [2021-03-17 Wed 16:40]--[2021-03-17 Wed 16:43] =>  0:03
:END:
** isearch
:PROPERTIES:
:ID:       496C21E2-3557-4D76-A937-508009288CA8
:END:
:LOGBOOK:
CLOCK: [2021-05-30 Sun 19:30]--[2021-05-30 Sun 19:55] =>  0:25
CLOCK: [2021-05-30 Sun 13:00]--[2021-05-30 Sun 13:09] =>  0:09
:END:
Recenter after each isearch iteration (https://stackoverflow.com/questions/11052678/emacs-combine-iseach-forward-and-recenter-top-bottom)

[2021-05-22 Sat 22:24] Thanks to Prot, I learn that when ~isearch~ is regexp-aware, so is ~isearch-query-replace~. So one can do a regexp replacement by invoking the following series of commands: ~isearch-forward~, ~isearch-toggle-regexp~, ~isearch-query-replace~. I find it easier to use ~C-s~ as my single point of entry to Emacs's powerful search and replace functions, and then make liberal use of all the ~isearch~ commands, accessible via their corresponding key bindings. That approach also suggests creating a lambda for the second and third commands in the series above.

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature isearch
  :custom
  (search-default-mode #'char-fold-to-regexp "`bar' matches `bár'")
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
  (isearch-yank-on-move t)
  (isearch-lazy-count t)
  (lazy-count-prefix-format nil)
  (lazy-count-suffix-format " (%s/%s)")
  (isearch-allow-scroll 'unlimited)
  (search-upper-case t)

  :config
  (defun ps/isearch-exit-other-end ()
    "Exit isearch, at the opposite end of the string."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))

  (defun ps/isearch-copy-match ()
    "Send the first isearch match to the kill ring."
    (interactive)
    (kill-new (buffer-substring (point) isearch-other-end))
    (isearch-done))

  :general
  (isearch-mode-map
   "C-H-M-s" 'isearch-delete-char
   "C-H-M-d" "C-- C-H-M-s" ; delete forward char
   "C-g" 'isearch-abort ; "quit once"
   "C-H-g" 'isearch-exit ; "quit twice"
   "C-'" 'isearch-toggle-char-fold
   "C-," 'isearch-forward-symbol-at-point
   "C-." 'isearch-forward-thing-at-point
   "C-/" 'isearch-complete
   "C-<return>" 'ps/isearch-exit-other-end
   "H-m" 'isearch-toggle-lax-whitespace
   "C-a" 'isearch-toggle-regexp
   "C-b" 'isearch-beginning-of-buffer
   "C-d" 'isearch-toggle-word
   "C-f" 'isearch-highlight-lines-matching-regexp
   "C-i" 'isearch-toggle-invisible
   "C-l" 'isearch-yank-line
   "C-m" 'isearch-toggle-symbol
   "C-n" 'isearch-end-of-buffer
   "C-o" 'isearch-occur
   "C-p" 'isearch-highlight-regexp
   "C-t" 'substitute-target-in-buffer
   "C-v" 'isearch-yank-kill
   "C-y" 'isearch-forward-symbol-at-point
   "H-c" 'ps/isearch-copy-match
   "M-k" 'isearch-ring-retreat
   "M-l" 'isearch-ring-advance)
  ((isearch-mode-map minibuffer-mode-map)
   "C-e" 'isearch-query-replace))
#+end_src

do the same for other relevant commands
#+begin_src emacs-lisp :results silent
(add-hook 'isearch-mode-end-hook 'recenter-top-bottom)
(defadvice
    isearch-repeat-forward
    (after isearch-repeat-forward-recenter activate)
  (recenter))
(defadvice
    isearch-repeat-backward
    (after isearch-repeat-backward-recenter activate)
  (recenter))
(ad-activate 'isearch-repeat-forward)
(ad-activate 'isearch-repeat-backward)
#+end_src

To check: [[https://karthinks.com/software/bridging-islands-in-emacs-1/][Bridging Islands in Emacs: re-builder and query-replace-regexp | Karthinks]]
*** TODO [#5] Add advice for other relevant commands
:PROPERTIES:
:Effort:   0:30
:ID:       C1131D3A-4E66-48E5-9353-C7E785391DFA
:END:
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       D5290EEA-8426-41B9-9346-A622FF07D695
:END:
**** DONE [#6] Enable persistent isearch history
CLOSED: [2022-10-05 Wed 21:15]
:PROPERTIES:
:Effort:   0:30
:ID:       5ED2AB6C-A6CC-40CB-9A6B-552325E0D1B7
:ARCHIVE_TIME: 2022-10-05 Wed 21:15
:END:
:LOGBOOK:
CLOCK: [2022-10-05 Wed 20:42]--[2022-10-05 Wed 21:15] =>  0:33
CLOCK: [2022-07-21 Thu 21:08]--[2022-07-21 Thu 21:18] =>  0:10
CLOCK: [2022-06-22 Wed 22:14]--[2022-06-22 Wed 22:45] =>  0:31
:END:
Currently history clears after Emacs is restarted.

** replace
:PROPERTIES:
:ID:       DC08C217-5005-4A65-986B-85EA876ECB6D
:END:
#+begin_src emacs-lisp :results silent
(use-feature replace
  :demand t
  :custom
  ;; emacs.stackexchange.com/a/12318/32089
  (query-replace-from-history-variable 'regexp-search-ring)

  :general
  (isearch-mode-map
   "A-C-e" 'query-replace-regexp))
#+end_src

** substitute
:PROPERTIES:
:ID:       CDB7BD03-86D2-4780-871E-205F20EFA367
:END:
/[[https://git.sr.ht/~protesilaos/substitute][substitute]] efficiently replaces targets in the buffer or context./

#+begin_src emacs-lisp :tangle no
(use-package substitute
  :straight (substitute
             :host sourcehut
                   :repo "protesilaos/substitute")
  :demand t)
#+end_src

** rg
:PROPERTIES:
:ID:       A75847C6-5259-46DD-8D03-4EE3314E86E6
:END:
/[[https://github.com/dajva/rg.el][rg]] is a search tool based on ripgrep./

[2023-01-14 Sat] I mostly use ~consult-ripgrep~; however, that command currently can't handle multiline searches, whereas ~rg~ can.

#+begin_src emacs-lisp :results silent
(use-package rg
  :custom
  (rg-executable "rg")
  (rg-command-line-flags '("--multiline"))
  (rg-group-result t))
#+end_src

** visual-regexp
:PROPERTIES:
:ID:       0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942
:END:
/[[https://github.com/benma/visual-regexp.el][visual-regexp]] provides visual feedback to regexp search and replace./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp)
#+end_src

** visual-regexp-steroids
:PROPERTIES:
:ID:       375D8037-D6A0-4519-A3B2-32E88810DA6D
:END:
/[[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] extends [[id:0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942][visual-regexp]] to support additional regexp engines./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp-steroids
  :after visual-regexp
  :demand t
  :custom
  (vr/engine 'python)
  (vr/command-python "python3 /Users/pablostafforini/.emacs.d/straight/build/visual-regexp-steroids/regexp.py")

  :general
  (isearch-mode-map
   "A-C-s" 'vr/isearch-forward
   "A-C-r" 'vr/isearch-backward))
#+end_src


** imenu
:PROPERTIES:
:ID:       CC1F3F93-2446-4399-A14D-9DCB6753D26B
:END:
#+begin_src emacs-lisp :results silent
(use-feature imenu
  :custom
  (org-imenu-depth 3))
#+end_src

** pcre2el
:PROPERTIES:
:ID:       1E9DDAD1-9663-432D-8882-A875227AB6B2
:END:
/[[https://github.com/joddie/pcre2el][pcre2el]] supports conversion between PCRE, Emacs and rx regexp syntax./

#+begin_src emacs-lisp :results silent
(use-package pcre2el)
#+end_src

** wgrep
:PROPERTIES:
:ID:       928E0F8E-569F-4DCA-9F29-C0623C2973C7
:END:
/[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] lets you create a writable grep buffer and apply the changes to files./

#+begin_src emacs-lisp :results silent
(use-package wgrep
  :general
  (wgrep-mode-map
   "s-c" 'wgrep-finish-edit))
#+end_src

** affe
:PROPERTIES:
:ID:       9191AA62-62B9-436B-ACF1-8858EDE47C34
:END:
/[[https://github.com/minad/affe][affe]] is an asynchronous fuzzy finder similar to the fzf command-line fuzzy finder, written in pure Elisp./

#+begin_src emacs-lisp :results silent :tangle no
(use-package affe)
#+end_src

* minibuffer completion
:PROPERTIES:
:ID:       E83EC00B-0C94-44CD-9EC0-355992C99234
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:43]--[2021-06-10 Thu 12:49] =>  0:06
:END:

| package    | what it does                      |
|------------+-----------------------------------|
| [[id:970043EC-39A9-46AE-9CC9-1F5F2175BF70][vertico]]    | minibuffer completion UI          |
| [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]    | minibuffer completion backend     |
| [[id:D0A453D1-784F-49E4-B238-ED009AF84EDB][orderless]]  | minibuffer completion styles      |
| [[id:C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68][marginalia]] | minibuffer completion annotations |
| [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]]     | minibuffer completion actions     |

For a comprehensive overview of completion in Emacs—both minibuffer completion and completion at point—I recommend [[https://www.youtube.com/watch?v=fnE0lXoe7Y0][this video]] by Andrew Tropin.

** vertico
:PROPERTIES:
:ID:       970043EC-39A9-46AE-9CC9-1F5F2175BF70
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 20:10]--[2022-06-21 Tue 20:57] =>  0:47
:END:
#+begin_src emacs-lisp :results silent
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive))
  :demand t
  :init
  (vertico-mode)

  :config
  (vertico-multiform-mode)

  :custom
  (vertico-multiform-commands
         '((consult-line buffer)
           (consult-imenu buffer)
           (consult-grep buffer)))
  ;; Configure the display per completion category.
  ;; Use the grid display for files and a buffer
  ;; for the consult-grep commands.
  (vertico-multiform-categories
   '((file grid)))
  (vertico-cycle t)
  (vertico-count 16)
  (vertico-quick1 avy-keys)
  (vertico-quick2 avy-keys)

  :general
  (vertico-map
   "<C-i>" 'vertico-exit
   "M-f" 'vertico-quick-exit
   "C-H-M-w" 'vertico-directory-up))
#+end_src


** embark
:PROPERTIES:
:ID:       19A4F21C-2169-4529-92E4-68E3A584DDAC
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:10]--[2022-07-22 Fri 18:13] =>  0:03
CLOCK: [2022-07-21 Thu 21:18]--[2022-07-21 Thu 21:24] =>  0:06
:END:
/[[https://github.com/oantolin/embark][embark]] provides contextually relevant actions in completion menus and in normal buffers./

#+begin_src emacs-lisp :results silent
(use-package embark
  :demand t
  :config
  (embark-define-keymap embark-yasnippet-completion-actions
    "Embark actions for `consult-yasnippet' and derivatives"
    ("d" consult-yasnippet-visit-snippet-file))

  (add-to-list 'embark-keymap-alist '(yasnippet . embark-yasnippet-completion-actions))

  :general
  ("C-;" 'embark-act
  "A-C-;" 'embark-dwim
  "C-h B" 'embark-bindings))
#+end_src

*** resources
:PROPERTIES:
:ID:       D6A07E88-F786-4E8A-AE58-25DA6C562AA5
:END:

** embark-consult
:PROPERTIES:
:ID:       C7BDCA9D-F507-4C25-9AF8-1EBB86D99A61
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 18:17]--[2022-07-19 Tue 18:35] =>  0:18
:END:
/[[https://github.com/oantolin/embark/blob/master/embark-consult.el][embark-consult]] provides integration between [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]] and [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]./

#+begin_src emacs-lisp :results silent
(use-package embark-consult
  :demand t
  :hook
  (embark-collect-mode-hook . consult-preview-at-point-mode))
#+end_src


** consult
:PROPERTIES:
:ID:       C6144D48-2E3C-4033-AD6E-5D7EE175D9E1
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 21:21]--[2022-07-15 Fri 21:44] =>  0:23
CLOCK: [2022-07-15 Fri 13:51]--[2022-07-15 Fri 14:22] =>  0:31
CLOCK: [2022-07-09 Sat 09:56]--[2022-07-09 Sat 10:33] =>  0:37
CLOCK: [2022-06-22 Wed 11:05]--[2022-06-22 Wed 11:10] =>  0:05
CLOCK: [2022-06-21 Tue 21:48]--[2022-06-21 Tue 23:04] =>  1:16
CLOCK: [2022-06-21 Tue 17:53]--[2022-06-21 Tue 18:40] =>  0:47
:END:
/[[https://github.com/minad/consult][consult]] provides practical commands based on the Emacs completion function ~completing-read~./

#+begin_src emacs-lisp :results silent
(use-package consult
  :demand t
  :custom
  ;; replace `rg' with `rga'
  (consult-ripgrep-args "rga --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --line-number .")
  (consult-locate-args "mdfind")
  (consult-narrow-key "<")
  (consult-widen-key ">")

  :config
  (defun ps/consult-locate-current ()
    "Search with `consult-locate' in current directory."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -onlyin " default-directory)))
      (consult-locate)))

  (defun ps/consult-locate-home ()
    "Search with `consult-locate' in home directory."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -onlyin " ps/dir-user)))
      (consult-locate)))

  (defun ps/consult-locate-anywhere ()
    "Search with `consult-locate' anywhere on my hard drive."
    (interactive)
    (let ((consult-locate-args (concat "mdfind ")))
      (consult-locate)))

  (defun ps/consult-locate-file-current ()
    "Search with `consult-locate' in current directory for
matching file names only."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -name -onlyin " default-directory)))
      (consult-locate)))

  (defun ps/consult-locate-file-home ()
    "Search with `consult-locate' in home directory for
matching file names only."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -name -onlyin " ps/dir-user)))
      (consult-locate)))

  (defun ps/consult-locate-file-anywhere ()
    "Search with `consult-locate' anywhere on my hard drive for
matching file names only."
    (interactive)
    (let ((consult-locate-args "mdfind -name "))
      (consult-locate)))

  (defun ps/consult-ripgrep-current ()
    "Search with `rg' for files in the current directory where the
content matches a regexp."
    (interactive)
    (consult-ripgrep default-directory))

  (defun ps/consult-ripgrep-home ()
    "Search with `rg' for files in home directory where the content
matches a regexp."
    (interactive)
    (consult-ripgrep ps/dir-user))

  (defun ps/consult-ripgrep-anywhere ()
    "Search with `rg' for files anywhere in hard drive where the
content matches a regexp."
    (interactive)
    (consult-ripgrep ps/dir-root))

  (defun ps/consult-org-heading (&optional match scope)
    "Jump to an Org heading.

MATCH and SCOPE are as in org-map-entries and determine which
entries are offered.  By default, all entries of the current
buffer are offered."
    (interactive)
    (widen)
    (ps/org-fold-show-all-headings)
    (consult-org-heading)
    (recenter 1))

  (defun ps/consult-org-agenda (&optional match)
    "Jump to an Org agenda heading.

By default, all agenda entries are offered. MATCH is as in
`org-map-entries' and can used to refine this."
    (interactive)
    (widen)
    (ps/org-fold-show-all-headings)
    (consult-org-agenda)
    (recenter 1))

  (defun ps/consult-recent-files-in-dir (dir)
    "Find recent files in directory using `completing-read'."
    (interactive)
    (find-file
     (consult--read
      (or (mapcar #'abbreviate-file-name
                  (consult--recent-files-sort (f-entries dir)))
          (user-error "No recent files"))
      :prompt "Find recent file: "
      :sort nil
      :require-match t
      :category 'file
      :state (consult--file-preview)
      :history 'file-name-history)))

  ;; (advice-remove 'consult-org-heading #'widen)
  ;; (advice-remove 'consult-org-heading #'ps/org-cycle-content)
  ;; (advice-add 'consult-org-agenda :after #'ps/org-narrow-to-entry-and-children)

  :general
  ("A-C-l" 'consult-line
   "H-b" 'consult-buffer
   "H-r" 'consult-history
   "H-V" 'consult-yank-pop
   "H-f" 'ps/consult-locate-file-current
   "H-F" 'ps/consult-locate-file-home
   "A-H-f" 'ps/consult-locate-file-anywhere
   "H-k" 'ps/consult-locate-current
   "H-K" 'ps/consult-locate-home
   "A-H-k" 'ps/consult-locate-anywhere
   "C-p" 'ps/consult-rga
   "H-p" 'ps/consult-ripgrep-current
   "H-P" 'ps/consult-ripgrep-home
   "A-H-p" 'ps/consult-ripgrep-anywhere)
  (org-mode-map
   "s-j" 'ps/consult-org-heading)
  (prog-mode-map
   "s-j" 'consult-imenu))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       4120BFCB-78B2-472D-9D34-C204A51F5B58
:END:
**** DONE Leave comment about consult excluding archives
CLOSED: [2022-06-28 Tue 10:08]
:PROPERTIES:
:ID:       358D0E9E-80AD-47EC-9B30-D29AD592EEFB
:ARCHIVE_TIME: 2022-06-28 Tue 10:08
:END:
:LOGBOOK:
CLOCK: [2022-06-28 Tue 10:01]--[2022-06-28 Tue 10:08] =>  0:07
:END:
** consult-dir
:PROPERTIES:
:ID:       3250EBD7-513E-439F-972F-B43C8214AC46
:END:
/[[https://github.com/karthink/consult-dir][consult-dir]] enables insertion of paths into the minibuffer prompt./

#+begin_src emacs-lisp :results silent
(use-package consult-dir
  :after consult
  :defer 15

  :custom
  (consult-dir-default-command 'consult-dir-dired)
  ;; Should start using `projectile' first
  ;; (consult-dir-project-list-function 'consult-dir-projectile-dirs)

  :general
  ("H-B" 'consult-dir))
#+end_src

** consult-notes
:PROPERTIES:
:ID:       5C00C666-754D-4779-9C48-A7B262EE525C
:END:
[2022-10-05 Wed 14:50] Performance seemed abysmal when I tried it. Maybe it can be optimized?

#+begin_src emacs-lisp :results silent :tangle no
(use-package consult-notes)
#+end_src

** consult-yasnippet
:PROPERTIES:
:ID:       437A790A-467F-46CB-9EE3-25AA91D43D89
:END:
:LOGBOOK:
CLOCK: [2022-06-27 Mon 20:12]--[2022-06-27 Mon 20:16] =>  0:04
:END:
/[[https://github.com/mohkale/consult-yasnippet/tree/cdb256d2c50e4f8473c6052e1009441b65b8f8ab][consult-yasnippet]] provides [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]] functionality to [[id:6405B8E7-6612-4D71-8C2C-A51F8808F4C6][yasnippet]]./

#+begin_src emacs-lisp :results silent
(use-package consult-yasnippet
  :after (consult yasnippet)
  :general
  ("A-C-y" 'consult-yasnippet))
#+end_src

** consult-spotify
:PROPERTIES:
:ID:       1605F697-9968-474A-9691-941723977EEC
:END:

Since I can't make [[id:5879A8B7-0889-4FCD-A16A-77D0BCEE4804][espotify]] work, I'm disabling this.

#+begin_src emacs-lisp :results silent :tangle no
(use-package consult-spotify
  :demand t
  :after (consult espotify))
#+end_src

** consult-flyspell
:PROPERTIES:
:ID:       272C2359-045B-49A7-8DFB-71F9B349D07D
:END:
#+begin_src emacs-lisp :results silent
(use-package consult-flyspell
  :demand t
  :after (consult flyspell))
#+end_src

** marginalia
:PROPERTIES:
:ID:       C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68
:END:

#+begin_src emacs-lisp :results silent
(use-package marginalia
  :demand t
  :init
  (marginalia-mode))
#+end_src

** orderless
:PROPERTIES:
:ID:       D0A453D1-784F-49E4-B238-ED009AF84EDB
:END:
/[[https://github.com/oantolin/orderless][orderless]] is an completion style that matches multiple regexps in any order./

#+begin_src emacs-lisp :results silent
(use-package orderless
  :defer 5
  :custom
  (completion-styles '(orderless basic partial-completion))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (orderless-matching-styles '(orderless-regexp))
  (orderless-style-dispatchers '(ps/orderless-flex-dispatcher
                                 ps/orderless-initialism-dispatcher
                                 ps/orderless-prefixes-dispatcher
                                 ps/orderless-exclusion-dispatcher))

  :config
  (defun ps/orderless-flex-dispatcher (pattern _index _total)
    "Flex dispatcher using `~' as suffix."
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun ps/orderless-initialism-dispatcher (pattern index _total)
    "Initialism dispatcher using `\,' as suffix."
    (when (string-suffix-p "," pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))

      (defun ps/orderless-prefixes-dispatcher (pattern index _total)
    "Prefix dispatcher using `\;' as suffix."
    (when (string-suffix-p ";" pattern)
      `(orderless-prefixes . ,(substring pattern 0 -1))))

  (defun ps/orderless-exclusion-dispatcher (pattern _index _total)
    "Exclusion dispatcher using `!' as suffix."
    (when (string-suffix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))
#+end_src
*** resources
:PROPERTIES:
:ID:       27FB5F19-5F3F-4169-8B67-FCD3689558AF
:END:
** ido
:PROPERTIES:
:ID:       458A26BD-1601-41D9-BC7E-7630466BC374
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:14]--[2022-07-14 Thu 20:17] =>  0:03
:END:
#+begin_src emacs-lisp :results silent
(use-feature ido
  :general
  (dired-mode-map
   "i" 'ido-find-file))
#+end_src
* completion at point
:PROPERTIES:
:ID:       9037BE0D-FD13-4D33-8514-BE503421774D
:END:

| package | what it does                |
|---------+-----------------------------|
| [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]]   | completion at point UI      |
| [[id:5A103245-9DC3-4D95-96D7-2161F6CCD0B1][cape]]    | completion at point backend |


** corfu
:PROPERTIES:
:ID:       35370B0F-9EBD-433F-B59C-576EE8A69772
:END:

#+begin_src emacs-lisp :results silent
(use-package corfu
  :straight (corfu :files (:defaults "extensions/*")
                   :includes (corfu-info
                              corfu-echo
                              corfu-history
                              ;; corfu-indexed
                              ;; corfu-popupinfo
                              corfu-quick
                              ))

  :demand t
  :custom
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-quit-no-match t)        ;; Automatically quit if there is no match
  (corfu-cycle vertico-cycle)
  (corfu-count vertico-count)
  (corfu-info-documentation nil)
  (corfu-auto-delay 0)
  (corfu-auto-prefix 3)
  (corfu-popupinfo-delay 0)

  :config
  ;; Adapted from Prot
  ;; protesilaos.com/emacs/dotemacs#h:675ebef4-d74d-41af-808d-f9579c2a5ec4
  (defun ps/corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico is not active.
Useful for prompts such as `eval-expression' and `shell-command'."
    (unless (bound-and-true-p vertico--input)
      (corfu-mode)))

  (global-corfu-mode)

  :hook
  (prog-mode-hook . corfu-popupinfo-mode)
  (prog-mode-hook . corfu-echo-mode)
  (corfu-mode-hook . corfu-history-mode)
  (minibuffer-setup-hook . ps/corfu-enable-always-in-minibuffer)

  :general
  (corfu-map
   "M-f" 'corfu-quick-complete
   "<return>" 'corfu-complete
   "RET" 'corfu-complete))
#+end_src

** corfu-terminal
:PROPERTIES:
:ID:       6B55F343-3A3E-42CE-9353-6630DC7C4F46
:END:

/[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]] enables corfu popups on terminal./

#+begin_src emacs-lisp :results silent
(use-package corfu-terminal
  :after corfu
  :demand t
  :config
  (corfu-terminal-mode))
#+end_src

** corfu-doc-terminal
:PROPERTIES:
:ID:       731DF77F-1269-4E04-90A5-DA2BB9446665
:END:

/[[https://codeberg.org/akib/emacs-corfu-doc-terminal][corfu-doc-terminal]] enables corfu-doc popup on terminal./

#+begin_src emacs-lisp :results silent
(use-package corfu-doc-terminal
  :straight (corfu-doc-terminal
             :host codeberg
                   :repo "akib/emacs-corfu-doc-terminal")
  :after corfu-terminal
  :demand t
  :config
  (corfu-doc-terminal-mode))
#+end_src

** kind-icon
:PROPERTIES:
:ID:       DE439647-A62B-4C32-A0BB-AA7D4BB3D9DD
:END:
/[[https://github.com/jdtsmith/kind-icon][kind-icon]] provides SVG icons for in-region completion./

#+begin_src emacs-lisp :results silent
(use-package kind-icon
  :after corfu
  :demand t

  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly

  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** cape
:PROPERTIES:
:ID:       5A103245-9DC3-4D95-96D7-2161F6CCD0B1
:END:

#+begin_src emacs-lisp :results silent
(use-package cape
  :after corfu
  :demand t
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-yasnippet)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-history)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
  ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;; (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src


#+begin_src emacs-lisp :results silent :tangle no
(use-package cape
  :after corfu
  :demand t

  :custom
  (cape-dabbrev-min-length 2)

  :config

  ;; All the below adapted from
  ;; kristofferbalintona.me/posts/202203130102/
  (defun ps/cape-capf-setup-org ()
    (require 'org-roam)
    (if (org-roam-file-p)
        (org-roam--register-completion-functions-h)
      (let (result)
        (dolist (element (list
                          ;; (cape-super-capf #'cape-ispell #'cape-dabbrev)
                          (cape-company-to-capf #'company-yasnippet))
                         result)
          (add-to-list 'completion-at-point-functions element))))
    (setq corfu-auto nil))

  ;; Eshell
  (defun ps/cape-capf-setup-eshell ()
    (let ((result))
      (dolist (element '(pcomplete-completions-at-point cape-file) result)
        (add-to-list 'completion-at-point-functions element))))

  ;; Git-commit
  (defun ps/cape-capf-setup-git-commit ()
    (general-define-key
     :keymaps 'local
     :states 'insert
     "<tab>" 'completion-at-point)      ; Keybinding for `completion-at-point'
    (let ((result))
      (dolist (element '(cape-dabbrev cape-symbol) result)
        (add-to-list 'completion-at-point-functions element))))

  ;; Elisp
  (defun ps/cape-capf-ignore-keywords-elisp (cand)
    "Ignore keywords with forms that begin with \":\" (e.g.
:history)."
    (or (not (keywordp cand))
        (eq (char-after (car completion-in-region--data)) ?:)))

  (defun ps/cape-capf-setup-elisp ()
    "Replace the default `elisp-completion-at-point'
completion-at-point-function. Doing it this way will prevent
disrupting the addition of other capfs (e.g. merely setting the
variable entirely, or adding to list).

Additionally, add `cape-file' as early as possible to the list."
    (setf (elt (cl-member 'elisp-completion-at-point completion-at-point-functions) 0)
          #'elisp-completion-at-point)
    (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; I prefer this being early/first in the list
    (add-to-list 'completion-at-point-functions #'cape-file)
    (require 'company-yasnippet)
    (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-yasnippet))
    (setq corfu-auto t))

  :hook
  (emacs-lisp-mode-hook .  ps/cape-capf-setup-elisp)
  (org-mode-hook . ps/cape-capf-setup-org)
  (eshell-mode-hook . ps/cape-capf-setup-eshell)
  (git-commit-mode-hook . ps/cape-capf-setup-git-commit))
#+end_src

** cape-yasnippet
:PROPERTIES:
:ID:       E1783BB4-D7BD-4264-B490-5E2F903CCCA7
:END:
#+begin_src emacs-lisp :results silent
(use-package cape-yasnippet
  :straight (cape-yasnippet
             :host github
             :repo "elken/cape-yasnippet"))
#+end_src

** org-block-cafp
:PROPERTIES:
:ID:       5D18297C-CB85-47D0-9637-D38F3BD01332
:END:

/[[https://github.com/xenodium/org-block-capf][org-block-cafp]] adds support fro org block completion at point./

#+begin_src emacs-lisp :tangle no
(use-package org-block-capf
  :straight (org-block-capf
             :host github
             :repo "xenodium/org-block-capf")
  :demand t
  :hook
  (org-mode-hook . org-block-capf-add-to-completion-at-point-functions))
#+end_src

** company
:PROPERTIES:
:ID:       D8BC79D0-C883-45A9-A5B2-98E88C59EE6B
:END:

I use ~completion-at-point~ for completion, not company. However, I still rely on company for a few completion backends.

#+begin_src emacs-lisp :results silent
(use-package company
  :defer 5
  :hook
  (telega-chat-mode-hook . company-mode))
#+end_src

* help
:PROPERTIES:
:ID:       7F0CBD06-FDB3-4889-91CE-D8A25D4F2613
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 11:55]--[2021-07-04 Sun 12:05] =>  0:10
CLOCK: [2021-05-24 Mon 20:57]--[2021-05-24 Mon 21:07] =>  0:10
CLOCK: [2021-05-21 Fri 17:13]--[2021-05-21 Fri 17:47] =>  0:34
CLOCK: [2021-05-21 Fri 16:52]--[2021-05-21 Fri 17:04] =>  0:12
:END:

Distinguish ~C-m~ from ~RET~ in the GUI. (Setting the Spacemacs variable ~dotspacemacs-distinguish-gui-tab~ to non-nil should fix this, but it only works with the related pair ~C-i~ and ~TAB~.)

- *Display the line numbers.*
** help
:PROPERTIES:
:ID:       B4F00E3C-2682-486D-B05A-E983ACC82D09
:END:
#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature help
  :custom
  (help-window-select t)

  :config
  (defun ps/describe-keymap-of-current-major-mode ()
    (interactive)
    (describe-keymap (current-local-map)))

  :general
  ;; "<C-m>" 'describe mode
  ("C-A-k" 'describe-keymap
   "C-A-m" 'ps/describe-keymap-of-current-major-mode)
  (help-mode-map
   "o" 'ps/help-copy-symbol-name) ; currently not working
  (input-decode-map
   [?\C-m] [C-m]
   [?\C-i] [C-i]))
#+end_src

*** TODO [#7] Finish creating ps/help-copy-symbol-name command
:PROPERTIES:
:ID:       1B5C8C6A-8E8E-4ABF-9B61-64666617E240
:Effort:   0:45
:END:
#+begin_src emacs-lisp :results silent :tangle no
(defun ps/help-copy-symbol-name ()
  "Get name of the symbol which the Help buffer discussses and push it to the kill ring."
  (interactive)
  (when (eq major-mode 'help-mode)
    (kill-new (replace-regexp-in-string "\\(.*\\)\\( is .*\\)" "\\1" (buffer-string)))))
#+end_src

** help-at-pt
:PROPERTIES:
:ID:       263F5A59-1B63-47BC-B77B-8165FBBE3E75
:END:
#+begin_src emacs-lisp :results silent
(use-feature help-at-pt
  :custom
  (help-at-pt-display-when-idle t)
  (help-at-pt-timer-delay 0)       ; show help immediately when enabled
  :config
  (help-at-pt-set-timer))                ; set timer, thus enabling local help
#+end_src
** helpful
:PROPERTIES:
:ID:       6DCDFA24-4561-43CD-9D82-7C870A1044D1
:END:
:LOGBOOK:
CLOCK: [2021-11-27 Sat 14:54]--[2021-11-27 Sat 15:00] =>  0:06
CLOCK: [2021-05-11 Tue 10:01]--[2021-05-11 Tue 10:12] =>  0:11
CLOCK: [2021-04-04 Sun 22:14]--[2021-04-04 Sun 22:33] =>  0:19
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package helpful
  :defer 20
  :config
  (defun ps/helpful-copy-as-kill ()
    "Get the name of the symbol whose docstring the current helpful
buffer displays and push it to the kill ring."
    (interactive)
    (kill-new (replace-regexp-in-string "\\(\\*helpful .*: \\)\\(.*\\)\\(\\*\\)" "\\2" (buffer-name)))
    (ps/kill-this-buffer-switch-to-other-window))

  :general
  ("H-U" 'helpful-at-point
   "C-k" 'helpful-key
   "C-A-f" 'helpful-function
   "C-A-o" 'helpful-symbol
   "C-A-v" 'helpful-variable
   "C-h c" 'helpful-command
   "C-h f" 'helpful-function)
  (helpful-mode-map
   "w" 'ps/helpful-copy-as-kill)
  (embark-symbol-map
   "h" 'helpful-symbol))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       56C739C3-8C73-4EF4-ACB7-A4B9573DB3E1
:END:
**** DONE [#5] Create function to copy name of helpful buffer symbol
CLOSED: [2021-05-20 Thu 12:01]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-05-20 Thu 12:01
:ID:       9A49D53B-C92E-4710-B1F6-3A72882B802E
:END:
:LOGBOOK:
CLOCK: [2021-05-20 Thu 11:23]--[2021-05-20 Thu 12:00] =>  0:37
CLOCK: [2021-05-20 Thu 11:08]--[2021-05-20 Thu 11:19] =>  0:11
:END:
** info
:PROPERTIES:
:ID:       28966DB8-E893-4AEA-A7BD-8C18B8A97592
:END:
#+begin_src emacs-lisp :results silent
(use-feature Info
  :general
  (Info-mode-map
  "j" 'Info-prev
  ";" 'Info-next))
#+end_src
** man
:PROPERTIES:
:ID:       2F034283-E2C2-4F47-BDB6-295A5D5CEAF3
:END:
#+begin_src emacs-lisp :results silent
(use-feature man)
#+end_src
** shortdoc
:PROPERTIES:
:ID:       5422C312-C976-4C9E-AE27-9D1771F8127C
:END:
Emacs 28 has a useful builtin [[https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet][Elisp cheap sheet]]: shortdoc.

#+begin_src emacs-lisp :results silent
(use-feature shortdoc
  :general
  ("C-h u" 'shortdoc-display-group))
#+end_src

** elisp-demos
:PROPERTIES:
:ID:       DCEBBA6C-04D4-4168-9FCB-772876C36E37
:END:

#+begin_src emacs-lisp :results silent
(use-package elisp-demos
  :init
  (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
#+end_src

** which-key
:PROPERTIES:
:ID:       7781DC87-0D61-4482-91EE-6D2E1F8E122D
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-package which-key
  :defer 10
  :init
  (which-key-mode)
  :custom
  (which-key-idle-delay 0))
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       0745A5BC-3066-447E-BAFA-CC4976F65561
:END:
*** DONE Create function to return keymap of current major mode
CLOSED: [2021-05-11 Tue 18:54]
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-19 Wed 18:06
:ID:       227C2E48-1C3E-4E22-82D0-871B8DCB0F7C
:END:
:LOGBOOK:
CLOCK: [2021-05-06 Thu 16:30]--[2021-05-06 Thu 17:10] =>  0:40
:END:
* keyboard macros
:PROPERTIES:
:ID:       ADB25EC1-6E97-4057-AEBD-FB7B7E4503CF
:END:
** kmacro
:PROPERTIES:
:ID:       92DE0CE6-CA2B-4D43-84D1-EE2B5B068197
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 17:58]--[2021-07-25 Sun 18:03] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature kmacro
  :defer 20
  :config
  (kmacro-set-counter 1)
  (defun ps/kmacro-counter-toggle-alpha-number ()
    "Toggle between a numeric and an alphabetical keyboard macro counter."
    (interactive)
    (if (string= kmacro-counter-format "%d")
        (progn
          (kmacro-set-format "%c")
          (kmacro-set-counter 97)
          (message "Set to alphabetical"))
      (progn
        (kmacro-set-format "%d")
        (kmacro-set-counter 1)
        (message "Set to numeric"))))
  :general
  ("A-H-M-s-h" 'kmacro-end-or-call-macro ; = H-h, to circumvent OSX mapping
   "H-H" 'kmacro-start-macro-or-insert-counter
   "A-C-H-s-h" 'kmacro-set-counter
   "C-A-h" 'ps/kmacro-counter-toggle-alpha-number
   "A-h" 'name-last-kbd-macro
   "M-h" 'kmacro-edit-macro
   "M-A-h" 'kmacro-bind-to-key))
#+end_src
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       C59419A1-0B6B-44A2-84F3-EA5F54374AD0
:END:
**** DONE Advice ~kmacro-start-macro-or-insert-counter~ to set counter to 1
CLOSED: [2021-07-25 Sun 17:56]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-25 Sun 17:56
:ID:       8A091ABF-B638-4C34-A3A3-72927433F9C5
:END:
https://www.emacswiki.org/emacs/EmacsKeyboardMacroCounter
** elmacro
:PROPERTIES:
:ID:       B7816A82-2E9C-434F-AAB3-A92FA5F3368B
:END:

#+begin_src emacs-lisp :results silent
(use-package elmacro)
#+end_src

* shells
:PROPERTIES:
:ID:       C97337A7-A91F-49DA-9F33-6556937E7AFC
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :general
  ("C-A-s" 'shell-command))
#+end_src

** TODO [#6] Learn how to call Emacs commands from shell
:PROPERTIES:
:Effort:   0:30
:ID:       BD2CACC7-6077-4B9B-98D3-5D565F340D87
:END:
https://emacs.stackexchange.com/questions/14947/can-emacs-commands-be-called-from-a-shell-script

** simple
:PROPERTIES:
:ID:       A34DA7F2-47E4-400E-B2C8-167BCAEA73E7
:END:
#+begin_src emacs-lisp :results silent
(use-feature simple
  :custom
  (async-shell-command-buffer 'new-buffer)) ; don't ask for confirmation before running command in a new buffer
#+end_src

** shell
:PROPERTIES:
:ID:       231A8710-B820-4761-ABF8-5BE648908CD1
:END:
:LOGBOOK:
CLOCK: [2022-09-02 Fri 18:00]--[2022-09-02 Fri 18:07] =>  0:07
:END:
#+begin_src emacs-lisp :results silent
(use-feature shell
  :config
  (defun ps/shell-update-homebrew ()
    "Update Homebrew."
    (interactive)
    (let ((shell-command-buffer-name-async "*homebrew update*"))
      (async-shell-command "brew update; brew upgrade --greedy; brew cleanup; brew doctor")
      (message "Update process finished.")))

  (defun ps/shell-in-current-directory (&optional shell)
    "Open a shell in the current directory, creating one if
necessary."
    (interactive)
    (let* ((shell (or shell
                      'shell))
           (shell-mode (intern (concat (symbol-name shell) "-mode")))
           (current-directory default-directory)
           (found))
      (dolist (buffer (buffer-list (current-buffer)))
        (with-current-buffer buffer
          (when (and (eq major-mode 'shell-mode)
                     (equal current-directory default-directory))
            (setq found buffer))))
      (if found
          (switch-to-buffer found)
        (funcall shell (generate-new-buffer-name (format "*%s*" shell))))))

  :general
  ("A-s" 'ps/shell-in-current-directory)
  (shell-mode-map
   "M-p" nil
   "M-n" nil
   "M-k" 'comint-previous-input
   "M-l" 'comint-next-input))
#+end_src

** eshell
:PROPERTIES:
:ID:       ABD03BEF-8E02-43AF-A137-AE9F9906704C
:END:
:LOGBOOK:
CLOCK: [2022-08-21 Sun 19:42]--[2022-08-21 Sun 20:00] =>  0:18
CLOCK: [2022-06-17 Fri 17:11]--[2022-06-17 Fri 17:41] =>  0:30
CLOCK: [2021-11-19 Fri 12:59]--[2021-11-19 Fri 13:39] =>  0:40
CLOCK: [2021-10-14 Thu 23:18]--[2021-10-14 Thu 23:31] =>  0:13
CLOCK: [2021-07-16 Fri 10:48]--[2021-07-16 Fri 11:04] =>  0:16
CLOCK: [2021-04-15 Thu 21:10]--[2021-04-15 Thu 21:30] =>  0:20
CLOCK: [2021-04-07 Wed 12:42]--[2021-04-07 Wed 13:09] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature eshell
  :demand t
  :custom
  (eshell-banner-message "")
  (eshell-save-history-on-exit t)
  (eshell-history-size 100000)

  :config
  (defun ps/eshell-open-cwd-on-dired ()
    "Open the current working directory on Dired."
    (interactive)
    (dired "."))

  (defun ps/eshell-new-session ()
    "Create a new interactive Eshell buffer."
    (interactive)
    (eshell '(4)))

  (defun ps/eshell-in-current-directory ()
    "Open a shell in the current directory, creating one if
necessary."
    (interactive)
    (ps/shell-in-current-directory 'eshell))

  :general
  ("A-e" 'ps/eshell-in-current-directory)
  (eshell-mode-map
   "C-H-M-z" 'eshell-kill-input
   "A-C-s-m" 'eshell-bol
   "M-k" 'eshell-previous-matching-input-from-input
   "M-l" 'eshell-next-matching-input-from-input
   "s-l" 'eshell/clear
   "s-c" 'ps/eshell-open-cwd-on-dired
   "s-d" 'eshell-send-eof-to-process
   "H-n" 'ps/eshell-new-session
   "M-p" nil
   "M-n" nil))
#+end_src

** eshell-git-prompt
:PROPERTIES:
:ID:       D8CACBDA-19AA-4D2F-9707-07B37AE3DF89
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-package eshell-git-prompt
  :after eshell
  :demand t
  :config
  (eshell-git-prompt-use-theme 'powerline))
#+end_src

** eshell-syntax-highlighting
:PROPERTIES:
:ID:       960266D6-7B07-436B-B25E-F59FBDCB818A
:END:
/[[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]] provides syntax highlighting for eshell-mode./

#+begin_src emacs-lisp :results silent
(use-package eshell-syntax-highlighting
  :after eshell
  :demand t
  :hook
  (eshell-mode-hook . eshell-syntax-highlighting-global-mode))
#+end_src

** pcmpl-args
:PROPERTIES:
:ID:       6F7AFAFF-B44A-4465-BB01-EA3368A24EF0
:END:
/[[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]] provies enhanced shell completion./

#+begin_src emacs-lisp :results silent :tangle no
(use-package pcmpl-args
  :defer 5)
#+end_src

** emacs-native-shell-complete
:PROPERTIES:
:ID:       878E8350-28A3-4C00-94ED-D3C29EFF68D7
:END:
:LOGBOOK:
CLOCK: [2022-06-17 Fri 17:41]--[2022-06-17 Fri 17:55] =>  0:14
:END:
/[[https://github.com/CeleritasCelery/emacs-native-shell-complete][emacs-native-shell-complete]] provides completion in shell buffers using native mechanisms./

#+begin_src emacs-lisp :tangle no
(use-package emacs-native-shell-complete
  :after shell
  :demand t
  :straight (emacs-native-shell-complete
             :host github
             :repo "CeleritasCelery/emacs-native-shell-complete"))
#+end_src

** dwim-shell-command
:PROPERTIES:
:ID:       89FC07FE-AB08-4C9C-B999-73D176458C64
:END:
/[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] supports Emacs shell commands with dwim behaviour./

#+begin_src emacs-lisp :results silent
(use-package dwim-shell-command
  :straight (dwim-shell-command
             :host github
                   :repo "xenodium/dwim-shell-command"))
#+end_src

* spelling & grammar
:PROPERTIES:
:ID:       CC425FA6-7E2B-45EC-82DD-6D4402C3BE5C
:END:

- ispell is a spell-checking interface.
- flyspell is an ispell enhancement, providing spell-checking on the fly.
- both ispell and flyspell require a dictionary to work. aspell and hunspell are two such dictionaries. They don't come with MacOS and need to be installed separately (e.g. ~brew install aspell~).
  - from a cursory search, it appears that aspell is better than hunspell. however, I haven't done any systematic research.
- You can also use AppleSpell, the spell checker than comes with MacOS. To do this you need to install Enchant and configure it by following [[http://www.lonecpluspluscoder.com/2021/02/01/setting-up-enchant-for-use-with-flyspell-mode-on-macos/][Timo Geusch]]'s simple instructions. I experienced some performance issues, and I was also unable to make flyspell add words to the AppleSpell dictionary.
- [[https://www.reddit.com/r/emacs/comments/fxs92h/spell_checkers_in_emacs_in_2020/][This Reddit post]] discusses the existing alternatives.

** ispell
:PROPERTIES:
:ID:       4C7A4F1F-41B8-49AB-B0F8-0EB092F88696
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 11:25]--[2022-07-19 Tue 11:47] =>  0:22
CLOCK: [2021-08-03 Tue 10:05]--[2021-08-03 Tue 10:13] =>  0:08
CLOCK: [2021-07-27 Tue 11:32]--[2021-07-27 Tue 11:39] =>  0:07
:END:

#+begin_src emacs-lisp :results silent
(use-package ispell
  :defer 10
  ;; :demand t
  :custom
  (ispell-silently-savep t)
  (ispell-program-name "/opt/homebrew/bin/aspell")

  :config/el-patch
  ;; Make it less verbose
  (defun ispell-init-process ()
    "Check status of Ispell process and start if necessary."
    (let* (;; Basename of dictionary used by the spell-checker
           (dict-bname (or (car (cdr (member "-d" (ispell-get-ispell-args))))
                           ispell-current-dictionary))
           ;; The default directory for the process.
           ;; Use "~/n" as default-directory unless using Ispell with per-dir
           ;; personal dictionaries
           (default-directory
             (if (or ispell-really-aspell
                     ispell-really-hunspell
                     ;; Protect against bad default-directory
                     (not (file-accessible-directory-p default-directory))
                     ;; Ispell and per-dir personal dicts available
                     (not (or (file-readable-p (concat default-directory
                                                       ".ispell_words"))
                              (file-readable-p (concat default-directory
                                                       ".ispell_"
                                                       (or dict-bname
                                                           "default")))))
                     ;; Ispell, in a minibuffer
                     (window-minibuffer-p))
                 (expand-file-name "~/")
               (expand-file-name default-directory))))
      ;; Check if process needs restart
      (if (and ispell-process
               (eq (ispell-process-status) 'run)
               ;; Unless we are using an explicit personal dictionary, ensure
               ;; we're in the same default directory!  Restart check for
               ;; personal dictionary is done in
               ;; `ispell-internal-change-dictionary', called from
               ;; `ispell-buffer-local-dict'
               (or (or ispell-local-pdict ispell-personal-dictionary)
                   (equal ispell-process-directory default-directory)))
          (setq ispell-filter nil ispell-filter-continue nil)
        ;; may need to restart to select new personal dictionary.
        (ispell-kill-ispell t)
        (let ((reporter
               (make-progress-reporter
                (format "Starting new Ispell process %s with %s dictionary..."
                        ispell-program-name
                        (or ispell-local-dictionary ispell-dictionary
                            "default")))))
          (sit-for 0)
          (setq ispell-library-directory (ispell-check-version)
                ;; Assign a non-nil value to ispell-process-directory
                ;; before calling ispell-start-process, since that
                ;; function needs it to set default-directory when
                ;; ispell-async-processp is nil.
                ispell-process-directory default-directory
                ispell-process (ispell-start-process)
                ispell-filter nil
                ispell-filter-continue nil)
          (el-patch-remove
            (progress-reporter-done reporter)))

        (unless (equal ispell-process-directory (expand-file-name "~/"))
          ;; At this point, `ispell-process-directory' will be "~/" unless using
          ;; Ispell with directory-specific dicts.
          ;; If not, kill ispell process when killing buffer.  It may be in a
          ;; removable device that would otherwise become un-mountable.
          (with-current-buffer
              (if (window-minibuffer-p)                  ;; In minibuffer
                  ;; In this case kill ispell only when parent buffer is killed
                  ;; to avoid over and over ispell kill.
                  (window-buffer (minibuffer-selected-window))
                (current-buffer))
            (add-hook 'kill-buffer-hook
                      (lambda () (ispell-kill-ispell t)) nil 'local)))

        (if ispell-async-processp
            (set-process-filter ispell-process 'ispell-filter))
        (if (and enable-multibyte-characters
                 ;; Evidently, some people use the synchronous mode even
                 ;; when async subprocesses are supported, in which case
                 ;; set-process-coding-system is bound, but
                 ;; ispell-process is not a process object.
                 ispell-async-processp)
            (set-process-coding-system ispell-process (ispell-get-coding-system)
                                       (ispell-get-coding-system)))
        ;; Get version ID line
        (ispell-accept-output 3)
        ;; get more output if filter empty?
        (if (null ispell-filter) (ispell-accept-output 3))
        (cond ((null ispell-filter)
               (error "%s did not output version line" ispell-program-name))
              ((and
                (stringp (car ispell-filter))
                (if (string-match "warning: " (car ispell-filter))
                    (progn
                      (ispell-accept-output 3) ; was warn msg.
                      (stringp (car ispell-filter)))
                  (null (cdr ispell-filter)))
                (string-match "^@(#) " (car ispell-filter)))
               ;; got the version line as expected (we already know it's the right
               ;; version, so don't bother checking again.)
               nil)
              (t
               ;; Otherwise, it must be an error message.  Show the user.
               ;; But first wait to see if some more output is going to arrive.
               ;; Otherwise we get cool errors like "Can't open ".
               (sleep-for 1)
               ;; Only call `ispell-accept-output' if the Ispell process
               ;; is alive, to avoid showing an unhelpful error message
               ;; about a missing process, instead of the error which
               ;; reports why the Ispell process died.
               (when (if ispell-async-processp
                         (process-live-p ispell-process)
                       ispell-process)
                 (ispell-accept-output 3))
               (error "%s" (mapconcat #'identity ispell-filter "\n"))))
        (setq ispell-filter nil)		; Discard version ID line
        (let ((extended-char-mode (ispell-get-extended-character-mode)))
          (if extended-char-mode		; ~ extended character mode
              (ispell-send-string (concat extended-char-mode "\n"))))
        (when ispell-async-processp
          (set-process-query-on-exit-flag ispell-process nil)))))

  :config
  (defvar ps/ispell-language "en")
  (defun ps/ispell-toggle-language ()
    "Toggle ispell dictionaries between English and Spanish."
    (interactive)
    (if (string= ps/ispell-language "en")
        (setq ps/ispell-language "es")
      (setq ps/ispell-language "en"))
    (ispell-change-dictionary ps/ispell-language)
    (flyspell-buffer)
    (message (format "Language set to %s"
                     (if (string= ps/ispell-language "en")
                         "English"
                       "Spanish"))))

  :general
  ("M-A-p" 'ps/ispell-toggle-language))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       97E8B3C4-2217-444D-BDFD-1772289D2778
:END:
**** CANCELLED Move personal dictionary to dotfiles folder
CLOSED: [2021-08-15 Sun 22:52]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-15 Sun 22:52
:ID:       0825D749-092D-4A3D-A258-81A4C1831C44
:END:
:LOGBOOK:
CLOCK: [2021-08-15 Sun 22:34]--[2021-08-15 Sun 22:52] =>  0:18
:END:
https://www.scivision.dev/aspell-user-dictionary-location/

I don't think this makes sense. The location of the personal dictionary can only be set by a configuration file whose location itself cannot be changed. So if I migrate to a new computer I will have to manually edit that file. It's best to keep the personal dictionary in its current location.
**** CANCELLED Consolidate aspell and macos personal dictionaries
CLOSED: [2021-08-15 Sun 22:52]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-15 Sun 22:52
:ID:       A839A09C-2ADD-490C-BF70-E86431D1A97F
:END:
https://www.cultofmac.com/522307/how-to-find-use-custom-spelling-dictionary-mac/

Not worth it. My MacOS dictionary has just a dozen words, after years of using it.

**** DONE Configure personal dictionary
CLOSED: [2022-07-19 Tue 19:29]
:PROPERTIES:
:ID:       F4654C26-5D0B-43C4-B521-487CEA4A4F18
:ARCHIVE_TIME: 2022-07-22 Fri 20:39
:END:
:LOGBOOK:
CLOCK: [2022-07-18 Mon 21:35]--[2022-07-18 Mon 23:00] =>  1:25
CLOCK: [2022-07-18 Mon 20:45]--[2022-07-18 Mon 21:00] =>  0:15
:END:
- Decide whether to use ~Aspell~ or ~AppleSpell~.
- Once you do that, define the relevant user options and create the relevant symlinks, so that in the future Emacs keeps saving to the same file even after Emacs or OS reinstallations.

** flyspell
:PROPERTIES:
:ID:       78ABBC76-7474-4C1C-A9B0-E8BEC972E75E
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 15:02]--[2022-09-14 Wed 15:06] =>  0:04
CLOCK: [2022-08-31 Wed 20:51]--[2022-08-31 Wed 21:00] =>  0:09
CLOCK: [2022-07-26 Tue 16:59]--[2022-07-26 Tue 17:01] =>  0:02
CLOCK: [2021-08-18 Wed 13:04]--[2021-08-18 Wed 13:16] =>  0:12
CLOCK: [2021-07-16 Fri 19:11]--[2021-07-16 Fri 19:31] =>  0:20
CLOCK: [2021-07-12 Mon 13:01]--[2021-07-12 Mon 13:11] =>  0:10
CLOCK: [2021-05-05 Wed 20:35]--[2021-05-05 Wed 20:55] =>  0:20
CLOCK: [2021-04-10 Sat 20:58]--[2021-04-10 Sat 21:40] =>  0:42
CLOCK: [2021-04-10 Sat 20:10]--[2021-04-10 Sat 20:16] =>  0:06
:END:

By default, Emacs gives priority to Aspell, if installed. This default can be overridden with the variable ~ispell-program-name~. The variable ~ispell-dictionary~, in turn, controls the dictionary to be used by the program declared under ~ispell-program-name~.

By default, ~auto-dictionary-mode~ is turned off. To enable it, set ~spell-checking-enable-auto-dictionary~ to ~t~. Apparently this mode is kind of buggy, and the issues associated with it can be avoided only by disabling it altogether.

I have configured Ispell to use AppleSpell, the native OSX spell checker, since I don't want to keep two separate personal dictionaries updated. This can be done by following [[http://www.lonecpluspluscoder.com/2021/02/01/setting-up-enchant-for-use-with-f07:15-07:30lyspell-mode-on-macos/][Timo Geusch]]'s simple instructions. Once [[https://abiword.github.io/enchant/][Enchant]] is installed and configured to give priority to AppleSpell, I add the code block below, which tells Ispell to use Enchant if available, and otherwise default to Aspell.

#+begin_src emacs-lisp :results silent
(use-feature flyspell
  :demand t
  :after ispell
  :custom
  (flyspell-issue-message-flag nil) ; auto-save personal dictionary whenever a word is added, to avoid annoying prompts
  :config
  (defun ps/flyspell-save-word ()
    "Save word at point to personal dictionary."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))


  (defun ps/flyspell-save-word-and-next ()
    "Save word at point to personal dictionary and go to next error."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location)))
    (flyspell-goto-next-error))

;; pragmaticemacs.wordpress.com/2015/08/27/jump-back-to-previous-typo/
(defun ps/flyspell-goto-previous-error (arg)
  "Go to arg previous spelling error."
  (interactive "p")
  (while (/= 0 arg)
    (let ((pos (point))
          (min (point-min)))
      (if (and (eq (current-buffer) flyspell-old-buffer-error)
               (eq pos flyspell-old-pos-error))
          (progn
            (if (= flyspell-old-pos-error min)
                ;; goto beginning of buffer
                (progn
                  (message "Restarting from end of buffer")
                  (goto-char (point-max)))
              (backward-word 1))
            (setq pos (point))))
      ;; seek the next error
      (while (and (> pos min)
                  (let ((ovs (overlays-at pos))
                        (r '()))
                    (while (and (not r) (consp ovs))
                      (if (flyspell-overlay-p (car ovs))
                          (setq r t)
                        (setq ovs (cdr ovs))))
                    (not r)))
        (backward-word 1)
        (setq pos (point)))
      ;; save the current location for next invocation
      (setq arg (1- arg))
      (setq flyspell-old-pos-error pos)
      (setq flyspell-old-buffer-error (current-buffer))
      (goto-char pos)
      (when (= pos min)
          (progn
            (message "No more missspelled words!")
            (setq arg 0))))))

(advice-add 'flyspell-region :around
            #'telega-chatbuf-input-as-region-advice)

  :general
  ("M-p" 'flyspell-buffer
   "A-M-," 'ps/flyspell-goto-previous-error
   "A-M-." 'flyspell-goto-next-error)
  (flyspell-mode-map
   "C-," nil
   "C-." nil
   "C-;" nil)
  (flyspell-mouse-map ;; this key map becomes active only when point is on a highlighted word
   "s-a" 'flyspell-auto-correct-word
   "s-k" 'ps/flyspell-goto-previous-error
   "s-l" 'flyspell-goto-next-error
   "s-s" 'ps/flyspell-save-word
   "A-s-s" 'ps/flyspell-save-word-and-next
   "s-c" 'flyspell-correct-wrapper)

  :hook
  (text-mode-hook . flyspell-mode)
  (prog-mode-hook . flyspell-prog-mode))
#+end_src

*** TODO [#7] Create dwim version of flyspell-buffer
:PROPERTIES:
:Effort:   0:30
:ID:       05BDF065-280F-4F09-B55A-9B32D10A36B1
:END:
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       93BE5B36-4B03-4ED0-9C20-A0AE4915C304
:END:
**** DONE Figure out why Flyspell is not working consistently
CLOSED: [2021-06-23 Wed 16:10]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-23 Wed 16:10
:ID:       B6B28C4A-A75B-486A-815B-FC8629AEE63B
:END:
:LOGBOOK:
CLOCK: [2021-06-23 Wed 14:07]--[2021-06-23 Wed 15:32] =>  1:25
:END:

**** DONE [#6] See if there is a way to enable flyspell key bindings only when point is on highlighted word
CLOSED: [2021-07-27 Tue 16:11]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2021-07-27 Tue 16:11
:ID:       E01CDFBA-1935-4541-861E-B5DA14788BAA
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 13:11]--[2021-07-12 Mon 13:16] =>  0:05
:END:
Similar to how org-ref works. I would need to create a new key map, since ~flyspell-mode-map~ is active iff ~flyspell-mode~ is active, and I want the key map, but not flyspell-mode itself, to become inactive when point is not on a highlighted word.

Next step is to inspect ~org-ref-cite-keymap~ and see what functions call that variable. Perhaps [[https://www.emacswiki.org/emacs/FlySpell#h5o-10][this]] is useful.
**** DONE [#6] Configure flyspell properly
CLOSED: [2022-09-01 Thu 15:26]
:PROPERTIES:
:Effort:   0:30
:ID:       690E26A8-DEAF-4292-BAC4-3281BAE37152
:ARCHIVE_TIME: 2022-09-01 Thu 15:26
:END:
- Check if ~flyspell-correct~ and ~flyspell-correct~ are working.
- Diagnose why sometimes misspellings are recognized only after point is on them.
- Maybe this is unnecessary given that I'm using Grammarly? Though the latter has a number of problems and perhaps it should only be used before publication rather than being enabled by default.
** flyspell-correct
:PROPERTIES:
:ID:       5E8AA3D3-68AE-407E-B662-524B8B0AAD43
:END:
#+begin_src emacs-lisp :results silent
(use-package flyspell-correct
  :demand t
  :after flyspell)
#+end_src

** keytar
:PROPERTIES:
:ID:       773AD672-8356-4097-990D-96BD160DAD40
:END:

#+begin_src emacs-lisp :results silent
(use-package keytar
  :if (equal (system-name) ps/computer-hostname-pablo)
  :defer 10)
#+end_src

** lsp-grammarly
:PROPERTIES:
:ID:       2D0C20F1-1CE6-45F9-AA4B-46FB02DD0271
:END:
:LOGBOOK:
CLOCK: [2022-09-29 Thu 18:50]--[2022-09-29 Thu 21:20] =>  2:30
CLOCK: [2021-11-27 Sat 21:56]--[2021-11-27 Sat 22:48] =>  0:52
CLOCK: [2021-11-27 Sat 19:44]--[2021-11-27 Sat 20:17] =>  0:33
CLOCK: [2021-11-27 Sat 19:23]--[2021-11-27 Sat 19:26] =>  0:03
CLOCK: [2021-11-27 Sat 19:09]--[2021-11-27 Sat 19:23] =>  0:14
:END:
/[[https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammarly]] is an lsp-mode for grammarly./

[2022-10-06 Thu 23:35] At the moment, the premium version isn't working. The package maintainers are migrating to to a new server, which may resolve the issues I was having authenticating my account. You can check whether the premium account is being used by evaluating ~(grammarly-premium-p)~.

#+begin_src emacs-lisp :results silent
(use-package lsp-grammarly
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after (lsp-mode keytar)
  :demand t

  :custom
  (lsp-grammarly-suggestions-split-infinitive nil)
  (lsp-grammarly-suggestions-preposition-at-the-end-of-sentence nil)
  (lsp-grammarly-suggestions-possibly-biased-language-age-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-disability-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-family-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-gender-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-human-rights nil)
  (lsp-grammarly-suggestions-possibly-biased-language-human-rights-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-lgbtqia-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-race-ethnicity-related nil)
  (lsp-grammarly-suggestions-possibly-politically-incorrect-language nil)

  :hook
  (org-mode-hook . (lambda ()
                     (require 'lsp-grammarly)
                     (lsp))))
#+end_src

*** TODO [#6] Check this
:PROPERTIES:
:ID:       267EC580-1F84-4820-8701-C09F5CB89172
:END:
https://notes.alexkehayias.com/using-grammarly-with-emacs/

[2023-01-28 Sat] I followed the instructions but couldn't make it work.

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       CBB3AD1D-834C-4C18-B591-97AEB603981A
:END:
**** DONE Enable grammarly
CLOSED: [2021-12-12 Sun 18:48]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-12-12 Sun 18:48
:ID:       F0A2B576-9892-4A98-9E48-837F899AA552
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 18:10]--[2021-12-12 Sun 18:48] =>  0:38
CLOCK: [2021-12-12 Sun 17:47]--[2021-12-12 Sun 17:50] =>  0:03
:END:

** aide
:PROPERTIES:
:ID:       5BCD6E4D-0264-4CB6-A0D8-0A6225A671B6
:END:
/[[https://github.com/junjizhi/aide.el][aide]] is an Emacs front end for GPT APIs like OpenAI./

#+begin_src emacs-lisp :results silent
(use-package aide
  :straight (aide
             :host github
             :repo "junjizhi/aide.el")
  :after request
  :commands aide-openai-complete-region
  :custom
  (openai-api-key (auth-source-pass-get 'secret "auth-sources/openai.com")))
#+end_src

** languagetool
:PROPERTIES:
:ID:       9666F3AD-4637-4B0B-895E-8F1F030C7AD9
:END:
To check: https://github.com/PillFall/languagetool.el
* prose
:PROPERTIES:
:ID:       9C33C68A-B82E-4898-B967-337B7D0619EE
:END:

** text-mode
:PROPERTIES:
:ID:       0C671548-8B32-43D6-9F28-88A6B7E3AA06
:END:
#+begin_src emacs-lisp :results silent
(use-feature text-mode
  :hook
  (text-mode-hook . visual-line-mode))
#+end_src

*** TODO [#6] Define ~text-mode-hook~ and ~prog-mode-hook~
:PROPERTIES:
:ID:       30886FEE-60C4-4BAA-B629-2871CFC120A1
:END:
** with-editor
:PROPERTIES:
:ID:       48431AA9-2ABE-403C-9E91-68066B24CB26
:END:
#+begin_src emacs-lisp :results silent
(use-feature with-editor
  :general
  ("s-c" 'with-editor-finish
   "s-k" 'with-editor-abort
   "C-c C-c" 'with-editor-finish))
#+end_src

** latex-mode
:PROPERTIES:
:ID:       AFE18032-EE9C-4D48-9EBA-FE01252467E1
:END:

*** resources
:PROPERTIES:
:ID:       D4EBFE04-FEB0-46B4-AF58-BAFCD52BAA87
:END:
[cite:@Jenner2021EmacsAmazingLaTeX]

** dictionary
:PROPERTIES:
:ID:       64B69D26-CE6D-4FFD-8218-799A6159ED42
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:38]--[2021-08-02 Mon 22:09] =>  0:31
:END:

#+begin_src emacs-lisp :results silent
(use-feature dictionary
  :custom
  (dictionary-server "dict.org"))
#+end_src

** osx-dictionary
:PROPERTIES:
:ID:       BE7CC99E-B42E-4DAF-B60D-2246CB188379
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:40]--[2021-06-25 Fri 21:41] =>  0:01
CLOCK: [2021-04-03 Sat 18:49]--[2021-04-03 Sat 18:54] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-package osx-dictionary
  :general
  ("H-y" 'osx-dictionary-search-input))
#+end_src

** TODO [#5] Check out shawcm/goldendict-emacs: Lookup marked text by GoldenDict in Emacs
:PROPERTIES:
:Effort:   0:25
:ID:       4B44B3FE-6553-4BA0-98B9-5C0ECFE0C913
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:35]--[2021-11-19 Fri 12:59] =>  0:24
CLOCK: [2021-11-18 Thu 11:35]--[2021-11-18 Thu 12:05] =>  0:30
CLOCK: [2021-07-29 Thu 22:19]--[2021-07-29 Thu 22:32] =>  0:13
:END:
- https://github.com/konstare/gdcv
  seems complicated; haven't tried
  next step is to try this, once Leo confirms that his dictionaries are in gdcv format
- https://github.com/stardiviner/goldendict.el
  crashes Goldendict
- https://github.com/shawcm/goldendict-emacs
  crashes Goldendict
- https://www.reddit.com/r/emacs/comments/dm1x5c/offline_dictionary_lookup/?utm_source=amp&utm_medium=&utm_content=post_body

** powerthesaurus
:PROPERTIES:
:ID:       81CC0280-A8A5-4C8F-BF05-D324EB917DCD
:END:
/[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]] integrates Emacs with [[https://www.powerthesaurus.org/][power thesaurus]]./

#+begin_src emacs-lisp :results silent
(use-package powerthesaurus
  :config
  (defun ps/powerthesaurus-lookup-dwim (&optional action-type query-type)
  "Wrapper function for general lookup commands.

When called interactively, optional argument ACTION-TYPE corresponds to
the prefix argument passed to this command, which is translated to an action
using `powerthesaurus-prefix-to-action'.  When called programmatically,
its value can either be nil or a symbol that can be possibly returned by
`powerthesaurus-prefix-to-action' (e.g., `action-insert' or `action-display').

The argument passed to QUERY-TYPE should be the same as in
`powerthesaurus-lookup' or nil; in the latter case,
the user will be prompt for a valid value."
  (interactive "P")
  (pcase-let ((`(,query-term ,beg ,end)
               ;; selection is active -> look up whatever is selected
               (if (use-region-p)
                   (powerthesaurus--extract-query-region)
                 ;; point is is at a word -> look it up
                 (if (thing-at-point 'word)
                     (powerthesaurus--extract-original-word)
                   ;; nothing appropriate nearby -> ask the user
                   (list nil nil nil)))))
    (setq query-term (or query-term
                         (read-string "Term: " query-term))
          query-type (or query-type
                         (completing-read "Query type: "
                                          powerthesaurus-supported-query-types
                                          nil t))
          action-type (powerthesaurus-prefix-to-action action-type query-type))
    (cond
     ((eq action-type 'action-insert)
      (when (null beg)
        (setq beg (point) end (point))))
     ((eq action-type 'action-display)
      (when (or beg end)
        (setq beg nil end nil))))
    (funcall 'powerthesaurus-lookup query-term query-type beg end)))

  (advice-add 'ps/powerthesaurus-lookup-dwim  :override #'ps/ps/powerthesaurus-lookup-dwim)

  :general
  ("H-Y" 'powerthesaurus-lookup-dwim))
#+end_src

** goldendict
:PROPERTIES:
:ID:       F2FFB5E0-060B-4A31-B2D2-4DF03ABC62B5
:END:
:LOGBOOK:
CLOCK: [2021-11-24 Wed 15:26]--[2021-11-24 Wed 16:24] =>  0:58
:END:

#+begin_src emacs-lisp :results silent
(defun ps/goldendict-search-input (arg)
  "If there is a word at point or an active selection, look it up
in GoldenDict, else prompt user for input. If invoked with prefix
argument, always force prompt."
  (interactive "P")
  (let ((string (ps/goldendict-region-or-word)))
    (if (and string (not arg)) (kill-new string)
      (kill-new (read-string "Expression: ")))
    (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"D4404D73-FF1D-4DF6-8107-7AB050C28C9F\"'")))

(defun ps/goldendict-region-or-word ()
  "Return region or word around point.
If `mark-active' on, return region string. Otherwise return word
around point."
  (if (use-region-p)
      (buffer-substring-no-properties (region-beginning)
                                      (region-end))
    (thing-at-point 'word)))

(general-define-key
 "A-y" 'ps/goldendict-search-input)
#+end_src

** google-translate
:PROPERTIES:
:ID:       44F5E93D-AF2C-4842-96CE-8539E8C7FF96
:END:
:LOGBOOK:
CLOCK: [2022-06-29 Wed 10:13]--[2022-06-29 Wed 10:29] =>  0:16
CLOCK: [2021-07-09 Fri 21:33]--[2021-07-09 Fri 21:39] =>  0:06
CLOCK: [2021-05-31 Mon 21:27]--[2021-05-31 Mon 21:41] =>  0:14
:END:
/[[https://github.com/atykhonov/google-translate][google-translate]] is an Emacs interface to Google Translate./

[2022-08-31 Wed] I should probably replace this with [[id:F3063A73-ED50-42BD-8ABD-8D7FC68758FD][reverso]].

[2023-01-25 Wed] I'm replacing it with [[id:BE78F0BD-D676-4E19-838A-2E6BD4504F52][txl]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package google-translate
  :defer 20
  :functions (my-google-translate-at-point google-translate--search-tkk)

  :custom
  (google-translate-default-target-language "en")
  (google-translate-default-source-language "es")

  :config
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))

  (setq google-translate-backend-method 'curl)

  (defun ps/google-translate-dwim (&optional reverse-p)
    "Translate region if active, word if at point, else prompt for
text. If invoked with a prefix argument, perform a reverse
translation."
    (interactive "P")
    (let ((google-translate-default-source-language ps/ispell-language)
          (google-translate-default-target-language
           (if (string= ps/ispell-language "en")
               "es"
             "en")))
      (if reverse-p
          (google-translate-at-point-reverse)
        (google-translate-at-point))))

  ;; modify original function so that it prompts for text to translate
  ;; if region is inactive and no word is at point.
  (defun ps/%google-translate-at-point (override-p reverse-p)
    (let* ((langs (google-translate-read-args override-p reverse-p))
           (source-language (car langs))
           (target-language (cadr langs))
           (bounds nil))
      (google-translate-translate
       source-language target-language
       (cond ((string-equal major-mode "pdf-view-mode") (car (pdf-view-active-region-text)))
             ((use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)))
             (t (or (and (setq bounds (bounds-of-thing-at-point 'word))
                         (buffer-substring-no-properties (car bounds) (cdr bounds)))
                    (google-translate-query-translate)))))))

  (advice-add '%google-translate-at-point :override #'ps/%google-translate-at-point)

  :general
  ("H-A-y" 'ps/google-translate-dwim))
#+end_src

** txl
:PROPERTIES:
:ID:       BE78F0BD-D676-4E19-838A-2E6BD4504F52
:END:
/[[https://github.com/tmalsburg/txl.el][txl]] provies direct access to DeepL's machine translation API./

#+begin_src emacs-lisp
(use-package txl
  :straight (txl
             :host github
             :repo "tmalsburg/txl.el")
  :custom
  (txl-languages '(ES . EN-US))
  (txl-deepl-api-key (auth-source-pass-get "api" (concat "tlon/BAE/deepl.com/" ps/personal-email)))

  :general
  ("H-A-y" 'txl-translate-region-or-paragraph)
  (txl-edit-translation-mode-map
   "RET" 'txl-accept-translation
   "q" 'txl-dismiss-translation))
#+end_src

** reverso
:PROPERTIES:
:ID:       F3063A73-ED50-42BD-8ABD-8D7FC68758FD
:END:
:LOGBOOK:
CLOCK: [2022-08-31 Wed 23:01]--[2022-08-31 Wed 23:11] =>  0:10
:END:
https://github.com/SqrtMinusOne/reverso.el

** atomic-chrome
:PROPERTIES:
:ID:       D7CE2507-FDB5-44E9-A129-C18E17590476
:END:
:LOGBOOK:
CLOCK: [2021-05-15 Sat 18:11]--[2021-05-15 Sat 18:19] =>  0:08
CLOCK: [2021-04-17 Sat 21:56]--[2021-04-17 Sat 22:07] =>  0:11
CLOCK: [2021-02-11 Thu 20:46]--[2021-02-11 Thu 20:54] =>  0:08
CLOCK: [2021-02-11 Thu 19:59]--[2021-02-11 Thu 20:02] =>  0:03
:END:

/[[https://github.com/alpha22jp/atomic-chrome][atomic chrome]] lets me use Emacs to edit text from input fields in my browser. I use it in combination with [[https://ghosttext.fregante.com/][Ghost Text]]./

#+begin_src emacs-lisp :results silent
(use-package atomic-chrome
  :defer 10

  :custom
  (atomic-chrome-default-major-mode 'markdown-mode)
  (atomic-chrome-url-major-mode-alist
   '(("github\\.com" . gfm-mode)
     ("wikipedia\\.org" . mediawiki-mode)
     ("timelines\\.issarice\\.com" . mediawiki-mode)))

  :config
  (atomic-chrome-start-server)

  :general
  (atomic-chrome-edit-mode-map
   "s-c" 'atomic-chrome-close-current-buffer))
#+end_src

** markdown
:PROPERTIES:
:ID:       3E05C5A3-B0E2-4800-B497-5AA1F6B39116
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 21:36]--[2021-12-11 Sat 22:05] =>  0:29
CLOCK: [2021-11-17 Wed 17:19]--[2021-11-17 Wed 17:27] =>  0:08
CLOCK: [2021-10-19 Tue 12:32]--[2021-10-19 Tue 13:19] =>  0:47
:END:

#+begin_src emacs-lisp :results silent
(use-package markdown-mode
  :demand t
  :after atomic-chrome
  :custom
  (markdown-fontify-code-blocks-natively t)
  (markdown-command "pandoc --from markdown --to html")
  (markdown-disable-tooltip-prompt t)
  (markdown-italic-underscore 'double)

  :config
  (defun ps/markdown-insert-italic ()
    "Insert markup to make a region or word italic.
If there is an active region, make the region italic.  If the point
is at a non-italic word, make the word italic.  If the point is at an
italic word or phrase, remove the italic markup.  Otherwise, simply
insert italic delimiters and place the point in between them."
    (interactive)
    (let ((delim (cond ((eq markdown-italic-underscore t) "_")
                       ((eq markdown-italic-underscore nil) "*")
                       ((eq markdown-italic-underscore 'double) "__"))))
      (markdown--insert-common delim delim markdown-regex-italic 1 3 'markdown-italic-face t)))

  (advice-add 'markdown-insert-italic :override #'ps/markdown-insert-italic)

  (defun ps/markdown-paste-from-org ()
    "Take the contents of the system clipboard and use `pandoc' to
convert it from org-mode to markdown."
    (interactive)
    (let* ((clipboard (if (eq system-type 'darwin)
                          "pbv public.utf8-plain-text"
                        "xclip -out -selection 'clipboard' -t text/html"))
           (pandoc (concat "pandoc --wrap=none -f org -t markdown"))
           (cmd (concat clipboard " | " pandoc))
           (output (shell-command-to-string cmd))
           ;; Not sure why Pandoc adds these double slashes; we remove them
           (output (replace-regexp-in-string "^\\\\\\\\$" "" output))
           (text (replace-regexp-in-string "= " "= " output)))
      (kill-new text)
      (yank)))

  :general
  ((gfm-mode-map markdown-mode-map telega-chat-mode-map)
   "s-b" 'markdown-insert-bold
   "s-e" 'markdown-insert-code
   "s-i" 'markdown-insert-italic
   "s-k" 'markdown-insert-link
   "s-v" 'ps/markdown-paste-from-org)
  (gfm-mode-map
   "s-a" 'markdown-insert-gfm-code-block
   "s-z" 'markdown-edit-code-block))
#+end_src

** mediawiki-el
:PROPERTIES:
:ID:       721F42DA-7E97-4C9A-9DBF-8A841DDE99A9
:END:
#+begin_src emacs-lisp :results silent
(use-package mediawiki
  :demand t
  :after atomic-chrome)
#+end_src

** gdrive
:PROPERTIES:
:ID:       CC5C7599-DFA7-48A8-8BA0-3DABE8A3171E
:END:
:LOGBOOK:
CLOCK: [2021-12-07 Tue 17:12]--[2021-12-07 Tue 18:05] =>  0:53
CLOCK: [2021-12-03 Fri 23:10]--[2021-12-04 Sat 01:01] =>  1:51
CLOCK: [2021-12-03 Fri 22:21]--[2021-12-03 Fri 23:02] =>  0:41
:END:
To reinstall:
- Clone this [[https://github.com/carstentrink/gdrive#important][fork]].
- Edit the ~clientId~ and ~clientSecret~ in the file ~handlers_drive.go~ with the values stored in ~pass~ (search for ~gdrive~).
- Within the locally cloned repo, run ~go install~.

#+begin_src emacs-lisp :results silent
(defun ps/gdrive-import-file ()
  "Import Google Doc file with DOC-ID and convert it to org-mode.

To see a list of Google Docs and their respective IDs, run
`gdrive list' in the terminal."
  (interactive)
  (let* ((default-directory ps/dir-downloads)
         (doc-id (read-from-minibuffer "Doc ID: "))
         (doc-info (shell-command-to-string
                    (format "gdrive info '%s'" doc-id)))
         (doc-name (when (string-match "^Name: \\(.*\\)$" doc-info)
                     (match-string 1 doc-info)))
         (input (concat doc-name ".docx"))
         (output (concat doc-name ".org")))
    ;; download Google Doc as docx
    (shell-command
     (format "gdrive export --mime application/vnd.openxmlformats-officedocument.wordprocessingml.document %s" doc-id))
    ;; export docx to org-mode
    (shell-command
     (format "pandoc -s '%s' -o '%s'" input output))))
#+end_src

*** TODO [#5] Write command to create new Google Doc in chosen folder
:PROPERTIES:
:Effort:   0:30
:ID:       4D8E953E-44F4-4546-8BF9-08D8983CA699
:END:
:LOGBOOK:
CLOCK: [2022-05-19 Thu 20:30]--[2022-05-19 Thu 20:33] =>  0:03
:END:
** edit-indirect
:PROPERTIES:
:ID:       1F18FACA-0A55-4B8F-98C3-800C07D62257
:END:

#+begin_src emacs-lisp :results silent
(use-package edit-indirect)
#+end_src

** ledger-mode
:PROPERTIES:
:ID:       6C259EFC-0CF9-4CD7-A8C5-B29B66E98776
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 08:15]--[2022-05-06 Fri 08:28] =>  0:13
CLOCK: [2021-11-23 Tue 10:22]--[2021-11-23 Tue 10:31] =>  0:09
CLOCK: [2021-11-17 Wed 17:35]--[2021-11-17 Wed 17:43] =>  0:08
CLOCK: [2021-10-13 Wed 11:37]--[2021-10-13 Wed 11:54] =>  0:17
CLOCK: [2021-10-08 Fri 18:32]--[2021-10-08 Fri 18:59] =>  0:27
CLOCK: [2021-08-19 Thu 17:50]--[2021-08-19 Thu 18:11] =>  0:21
:END:

To populate the database of historical prices:
- commodities: https://github.com/LukasJoswiak/blog-code/blob/master/2020/tracking-commodity-prices-ledger/prices.py
  - accompanying post: https://lukasjoswiak.com/tracking-commodity-prices-in-ledger/
- crypto: https://github.com/cjtapper/coinprices
- currencies: https://github.com/wakatara/get-FX
  - couldn't make it work, so I just entered the rates manually once and will use those


#+begin_src emacs-lisp :results silent
(use-package ledger-mode
  :defer 30
  :custom
  (ledger-default-date-format ledger-iso-date-format)
  (ledger-reconcile-default-commodity "ARS")
  (ledger-schedule-file ps/file-tlon-ledger-schedule-file)
  (ledger-schedule-look-forward 0)
  (ledger-schedule-look-backward 30)

  :config
  (dolist (report
           '(("net worth"
              "%(binary) -f %(ledger-file) bal --strict")
             ("net worth (USD)"
              "%(binary) -f %(ledger-file) --price-db .pricedb --exchange USD bal ^assets ^liabilities --strict")
                                        ; I need to understand how the `--basis' flag works
             ("cost basis"
              "%(binary) -f %(ledger-file) --basis bal %(account) --strict")))
    (add-to-list 'ledger-reports report))

  (defun ps/ledger-new-entry-below ()
    "Create new entry below one at point."
    (interactive)
    (indent-for-tab-command)
    (ledger-navigate-next-xact-or-directive)
    (crux-smart-open-line-above))

  (defun ps/ledger-align-and-next ()
    "Align transaction at point and move point to next entry."
    (interactive)
    (ledger-post-align-xact (point))
    (ledger-navigate-next-xact-or-directive))

  (defun ps/ledger-report-account ()
    "Runs an 'account' report from `ledger-reports'."
    (interactive)
    (ledger-report "account" nil))

  (defun ps/ledger-report-net-worth ()
    "Runs an 'net worth' report from `ledger-reports'."
    (interactive)
    (ledger-report "net worth" nil))

  (defun ps/ledger-report-net-worth-USD ()
    "Runs an 'net worth (USD)' report from `ledger-reports'."
    (interactive)
    (ledger-report "net worth (USD)" nil))

  (defun ps/ledger-report-payee ()
    "Runs an 'payee' report from `ledger-reports'."
    (interactive)
    (ledger-report "payee" nil))

  (defun ps/ledger-update-commodities ()
    "Update `commodities.py'."
    (interactive)
    (shell-command
     (format "python3 %s"
             (file-name-concat ps/dir-ledger "commodities.py"))))

  (defun ps/ledger-update-coin-prices ()
    "Update `coinprices.py'."
    (interactive)
    (shell-command
     (format "python3 %s >> %s"
             (file-name-concat ps/dir-ledger "coinprices/coinprices.py")
             ps/file-ledger-db)))

  (defun ps/ledger-sort-region-reversed (beg end)
    "Sort the region from BEG to END in reverse chronological order."
    (interactive "r") ;; load beg and end from point and mark
    ;; automagically
    (let* ((new-beg beg)
           (new-end end)
           (bounds (ledger-navigate-find-xact-extents (point)))
           (point-delta (- (point) (car bounds)))
           (target-xact (buffer-substring (car bounds) (cadr bounds)))
           (inhibit-modification-hooks t))
      (save-excursion
        (save-restriction
          (goto-char beg)
          ;; make sure beg of region is at the beginning of a line
          (beginning-of-line)
          ;; make sure point is at the beginning of a xact
          (unless (looking-at ledger-payee-any-status-regex)
            (ledger-navigate-next-xact))
          (setq new-beg (point))
          (goto-char end)
          (ledger-navigate-next-xact)
          ;; make sure end of region is at the beginning of next record
          ;; after the region
          (setq new-end (point))
          (narrow-to-region new-beg new-end)
          (goto-char new-beg)

          (let ((inhibit-field-text-motion t))
            (sort-subr
             t
             'ledger-navigate-next-xact
             'ledger-navigate-end-of-xact
             'ledger-sort-startkey))))

      (goto-char (point-min))
      (re-search-forward (regexp-quote target-xact))
      (goto-char (+ (match-beginning 0) point-delta))))

  (defun ps/ledger-sort-buffer-reversed ()
    "Sort the entire buffer in reverse chronological order."
    (interactive)
    (let (sort-start
          sort-end)
      (save-excursion
        (goto-char (point-min))
        (setq sort-start (ledger-sort-find-start)
              sort-end (ledger-sort-find-end)))
      (ps/ledger-sort-region-reversed (or sort-start (point-min))
                                      (or sort-end (point-max)))))

  (defun ps/ledger-sort-region-or-buffer ()
    "Sort a region if selected, otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (ledger-sort-region)
      (ledger-sort-buffer)))

  (defun ps/ledger-sort-region-or-buffer-reversed ()
    "Sort in reverse chronological order a region if selected,
otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (ps/ledger-sort-region-reversed)
      (ps/ledger-sort-buffer-reversed)))

  (defun ps/ledger-toggle-current-transaction-and-next ()
    "Toggle current transaction and move to the next transaction"
    (interactive)
    (ledger-toggle-current-transaction)
    (ledger-navigate-next-xact-or-directive))

  ;; :hook
  ;; (ledger-mode-hook . (lambda () (setq-local ledger-complete-in-steps t)))

  :general
  (ledger-mode-map
   "s-SPC" 'ps/ledger-new-entry-below
   "s-=" 'ledger-reconcile
   "s-a" 'ledger-add-transaction
   "s-b" 'ledger-post-edit-amount
   "s-c" 'ps/ledger-align-and-next
   "s-d" 'ledger-delete-current-transaction
   "s-e" 'ps/ledger-toggle-current-transaction-and-next
   "s-f" 'ledger-occur
   "s-g" 'ledger-report-goto
   "s-i" 'ledger-insert-effective-date
   "s-y" 'ledger-copy-transaction-at-point
   "s-k" 'ledger-report-quit
   "s-l" 'ledger-display-ledger-stats
   "s-o" 'ledger-report-edit-report
   "s-p" 'ledger-display-balance-at-point
   "s-q" 'ledger-post-align-dwim
   "s-r" 'ledger-report
   "s-s" 'ledger-report-save
   "s-t" 'ps/ledger-sort-region-or-buffer
   "s-u" 'ledger-schedule-upcoming
   "s-v" 'ledger-copy-transaction-at-point
   "s-x" 'ledger-fully-complete-xact
   "s-z" 'ledger-report-redo
   "A-s-a" 'ps/ledger-report-account
   "A-s-e" 'ledger-toggle-current-transaction
   "A-s-f" 'ps/ledger-add-ftx-transaction
   "A-s-t" 'ps/ledger-sort-region-or-buffer-reversed
   ;; "A-s-t" 'ps/ledger-import-ftx-transactions
   "A-s-w" 'ps/ledger-report-net-worth
   "A-s-u" 'ps/ledger-report-net-worth-USD
   "A-s-p" 'ps/ledger-report-payee
   "A-C-s-r" 'ledger-navigate-prev-xact-or-directive
   "A-C-s-f" 'ledger-navigate-next-xact-or-directive))
#+end_src

*** TODO [#6] Consider replacing ~commodities.py~ with Elisp alternative
:PROPERTIES:
:ID:       303E3552-2FD9-41A9-A6E6-C26110E61282
:END:
[[https://www.reddit.com/r/emacs/comments/xdrg1r/semiautomatically_fetching_ledger_commodity/][This]] could be adapted.
*** resources
:PROPERTIES:
:ID:       FD6B578E-9794-4C38-A2F3-5A877ED2C4C8
:END:
- [[https://devhints.io/ledger][Ledger CLI cheatsheet]]
- [[https://github.com/davidkeegan/dklrt][GitHub - davidkeegan/dklrt: Ledger Recurring Transactiions.]]
- [[https://rolfschr.github.io/gswl-book/latest.html][Getting Started With Ledger - August 28, 2019 201f047]]
- [[https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html][Using Ledger for YNAB-like envelope budgeting]]
- [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][TIP: How I use ledger to track my money : emacs]]
- [[https://news.ycombinator.com/item?id=7708777][The reasons why I tried and failed with ledger: - I never quite understood how t... | Hacker News]]
- [[https://github.com/marbu/ledger-bank-import][GitHub - marbu/ledger-bank-import: convert bank csv files into ledger-cli file format]]
- [[https://felixcrux.com/blog/ledger-practices][Ledger Practices - Felix Crux]]

*** how to start from scratch
:PROPERTIES:
:ID:       49D7A193-157E-4A10-9C33-98727FC191BF
:END:
1. [[https://felixcrux.com/blog/ledger-practices-create-a-ledgerrc][create a ~.ledgerrc~ file]]
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       3ACCA3B0-B00C-43C9-AB33-7EA3B37AE0A3
:END:
**** DONE Create function to import FTX transactions
CLOSED: [2021-11-06 Sat 23:01]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-06 Sat 23:01
:ID:       F96EE86A-FA6F-460E-A227-8E13C16A3E9E
:END:
:LOGBOOK:
CLOCK: [2021-11-06 Sat 21:34]--[2021-11-06 Sat 23:01] =>  1:27
CLOCK: [2021-11-06 Sat 20:23]--[2021-11-06 Sat 21:16] =>  0:53
CLOCK: [2021-11-06 Sat 14:58]--[2021-11-06 Sat 15:02] =>  0:04
:END:


**** DONE [#6] Configure Ledger so that it only accepts transactions involving pre-defined accounts
CLOSED: [2021-11-14 Sun 16:47]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2021-11-14 Sun 16:47
:ID:       20F7C45D-2D74-4955-B75F-BC7C20AC9073
:END:
:LOGBOOK:
CLOCK: [2021-11-14 Sun 16:15]--[2021-11-14 Sun 16:47] =>  0:32
:END:
File with accounts is accounts.dat. See reports defined in config.org.
**** DONE [#5] Fix Ledger crypto coin database
CLOSED: [2022-04-06 Wed 13:23]
:PROPERTIES:
:Effort:   1:00
:ID:       19E22753-FA61-412D-B2DC-A7E256B47D1B
:ARCHIVE_TIME: 2022-04-06 Wed 13:23
:END:
:LOGBOOK:
CLOCK: [2022-04-06 Wed 13:19]--[2022-04-06 Wed 13:23] =>  0:04
CLOCK: [2022-01-03 Mon 22:38]--[2022-01-03 Mon 22:57] =>  0:19
CLOCK: [2022-01-03 Mon 22:21]--[2022-01-03 Mon 22:33] =>  0:12
:END:
**** DONE [#4] Fix ~coinprices.py~
CLOSED: [2022-07-19 Tue 20:12]
:PROPERTIES:
:ID:       850C56D6-22E5-4798-9EAE-5084D4159B57
:ARCHIVE_TIME: 2022-07-19 Tue 20:12
:END:


:LOGBOOK:
CLOCK: [2022-07-19 Tue 20:00]--[2022-07-19 Tue 20:12] =>  0:12
:END:
** parse-csv
:PROPERTIES:
:ID:       55B470DB-E9D2-45B1-8E74-58CB9DDF7D27
:END:

#+begin_src emacs-lisp :results silent
(use-package parse-csv)
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       96310305-E456-418C-8D3B-2023B10CA436
:END:
*** CANCELLED Check out konstare/gdcv: gdcv - GoldenDict console version and emacs dynamic module
CLOSED: [2021-07-29 Thu 22:30]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-07-29 Thu 22:30
:ID:       B1EB476C-136F-49EF-9FC0-B56FC944B3E7
:END:
* pdf
:PROPERTIES:
:ID:       6C0D0737-734E-4EAB-8A3F-138EF990B967
:END:

** TODO [#4] Tweak chrome headless command so that chrome authenticates before printing a pdf
:PROPERTIES:
:ID:       BDE975FE-56AA-45C3-AF47-C70503051B30
:Effort:   0:20
:END:
https://stackoverflow.com/questions/62602327/headless-chrome-sharing-credentials
Modify the Keyboard Maestro script called ~Chrome: save webpage as PDF (v)~
** pdf-tools
:PROPERTIES:
:ID:       B4272338-4DCA-44FC-9330-804CC88BF189
:END:
:LOGBOOK:
CLOCK: [2022-07-23 Sat 14:07]--[2022-07-23 Sat 14:20] =>  0:13
CLOCK: [2022-07-23 Sat 13:06]--[2022-07-23 Sat 14:02] =>  0:56
CLOCK: [2021-11-16 Tue 18:40]--[2021-11-16 Tue 19:02] =>  0:22
CLOCK: [2021-07-29 Thu 22:42]--[2021-07-29 Thu 23:08] =>  0:26
CLOCK: [2021-07-25 Sun 15:35]--[2021-07-25 Sun 15:42] =>  0:07
CLOCK: [2021-06-10 Thu 19:08]--[2021-06-10 Thu 19:20] =>  0:12
CLOCK: [2021-02-23 Tue 10:59]--[2021-02-23 Tue 11:05] =>  0:06
:END:
/[[https://github.com/vedang/pdf-tools][pdf-tools]] is a support library for PDF files./

#+begin_src emacs-lisp :results silent :tangle no
(use-package pdf-tools
  :if (or (equal (system-name) ps/computer-hostname-pablo)
          (equal (system-name) ps/computer-hostname-leo))
  :defer 10
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :custom
  (pdf-view-use-scaling t)
  (pdf-view-use-imagemagick nil)
  (pdf-view-resize-factor 1.1)
  (pdf-annot-default-annotation-properties
   '((t
      (label . ps/personal-name))
     (text
      (color . "#ff0000")
      (icon . "Note"))
     (highlight
      (color . "LightBlue2"))
     (underline
      (color . "blue"))
     (squiggly
      (color . "orange"))
     (strike-out
      (color . "red"))))

  :config
  (unless (or noninteractive (eq this-command 'pdf-tools-install))
    (pdf-tools-install))

  (defun ps/pdf-tools-apply-theme ()
    "Activate `pdf-tools' midnight mode iff dark theme is active."
    (if (string= (modus-themes--current-theme) "modus-vivendi")
        (pdf-view-midnight-minor-mode 1)
      (pdf-view-midnight-minor-mode -1)))

  ;; gist.github.com/politza/3f46785742e6e12ba0d1a849f853d0b9#file-scroll-other-window-el
  (defun ps/pdf-tools-toggle-writeroom ()
    "Toggle `writeroom-mode' on/off."
    (interactive)
    (let ((writeroom-width 120))
      (writeroom-mode 'toggle)
      (pdf-view-fit-height-to-window)))

  (load-file (file-name-concat ps/dir-emacs-local "scroll-other-window.el"))

  (defun ps/pdf-tools-open-externally ()
    "Open current PDF in external application."
    ;; TODO: tweak so that the PDF opens externally at the right page
    ;; apple.stackexchange.com/questions/233945/opening-a-specific-page-on-mac-preview-from-terminal
    (interactive)
    (shell-command (format "open %s" (buffer-file-name))))

  (defvar ps/pdf-tools-selected-pages '())

  (defun ps/pdf-tools-add-or-remove-page ()
    "Add current page number to list of selected pages. If page
number is already listed, remove it from list."
    (interactive)
    (if (member (pdf-view-current-page) ps/pdf-tools-selected-pages)
        (progn
          (setq ps/pdf-tools-selected-pages (delete (pdf-view-current-page) ps/pdf-tools-selected-pages)
                ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<))
          (message "Page removed. Current selection: %s." ps/pdf-tools-selected-pages))
      (add-to-list 'ps/pdf-tools-selected-pages (pdf-view-current-page) t)
      (setq ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<))
      (message "Page added. Current selection: %s." ps/pdf-tools-selected-pages))
    (when (< (pdf-view-current-page) (pdf-cache-number-of-pages))
      (pdf-view-next-page))
    (setq ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<)))

  (defun ps/pdf-tools-clear-page-selection ()
    "Clear the list of pages selected in `ps/pdf-tools-selected-pages'."
    (interactive)
    (setq ps/pdf-tools-selected-pages '())
    (message "Page selection cleared."))

  (defun ps/pdf-tools-extract-pages (file)
    "Save pages selected in `ps/pdf-tools-selected-pages' to
FILE."
    (interactive "FSave as: ")
    (let ((output (if (string= (expand-file-name file) (buffer-file-name))
                      "--replace-input"
                    (expand-file-name file))))
      (shell-command (format "qpdf '%s' --pages . %s -- '%s'"
                             (buffer-file-name)
                             (mapconcat #'number-to-string
                                        ps/pdf-tools-selected-pages
                                        ",")
                             output)))
    (ps/pdf-tools-clear-page-selection))

  :hook
  (pdf-tools-enabled-hook . ps/pdf-tools-apply-theme)
  (pdf-tools-enabled-hook . pdf-view-fit-page-to-window)
  (pdf-tools-enabled-hook . sow-mode)

  :general
  ((pdf-view-mode-map pdf-annot-minor-mode-map pdf-history-minor-mode-map)
   "C" 'ps/pdf-tools-clear-page-selection
   "e" 'pdf-annot-add-highlight-markup-annotation
   "h" 'pdf-annot-add-highlight-markup-annotation
   "j" 'pdf-view-goto-page
   "k" 'pdf-view-previous-line-or-previous-page
   "l" 'pdf-view-next-line-or-next-page
   "t" 'ps/pdf-tools-toggle-writeroom
   "x" 'ps/pdf-tools-open-externally
   "S" 'ps/pdf-tools-add-or-remove-page
   "X" 'ps/pdf-tools-extract-pages
   "H-c" 'pdf-view-kill-ring-save
   "A-d" 'pdf-view-midnight-minor-mode)
  (sow-mode-map
   "A-C-s-t" 'sow-scroll-other-window-down
   "A-C-s-g" 'sow-scroll-other-window))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       C1097526-0DDF-4AF0-84A1-047B138B2DEF
:END:
**** DONE Find way to defer loading (it currently delays loading the init file by almost five seconds)
CLOSED: [2021-07-30 Fri 11:58]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-07-30 Fri 11:58
:ID:       E1377359-F7A8-4912-ACE7-333D2B44C74F
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 22:32]--[2021-07-29 Thu 22:42] =>  0:10
:END:

Maybe this: https://github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org#pdf-tools
**** CANCELLED [#6] Disable auto-save
CLOSED: [2021-11-11 Thu 16:46]
:PROPERTIES:
:Effort:   0:15
:ARCHIVE_TIME: 2021-11-11 Thu 16:46
:ID:       71F144FE-9E84-491B-B23F-22A021F5F9BD
:END:
:LOGBOOK:
CLOCK: [2021-11-11 Thu 16:45]--[2021-11-11 Thu 16:46] =>  0:01
:END:
Doesn't seem to be needed.

** pdf-view-restore
:PROPERTIES:
:ID:       159A7ABF-5D9C-46C3-BAA2-C1E486682875
:END:
/[[https://github.com/007kevin/pdf-view-restore][pdf-view-restore]] adds support to saving and reopening last known pdf position./

#+begin_src emacs-lisp :results silent
(use-package pdf-view-restore
  :after pdf-tools
  :demand t
  :hook
  (pdf-view-mode-hook . pdf-view-restore-mode))
#+end_src

** org-pdftools
:PROPERTIES:
:ID:       028468CA-0334-45AE-A476-028D9A300065
:END:

/[[https://github.com/fuxialexander/org-pdftools][org-pdftools]] adds org link support for [[id:B4272338-4DCA-44FC-9330-804CC88BF189][pdf-tools]]./

#+begin_src emacs-lisp :results silent
(use-package org-pdftools
  :after (org pdf-tools)
  :demand t
  :hook
  (org-mode-hook . org-pdftools-setup-link))
#+end_src

** org-noter-pdftools
:PROPERTIES:
:ID:       9ACD5D5E-29E2-49E6-A899-E90558112D5A
:END:

** Archive                                                         :ARCHIVE:
:PROPERTIES:
:ID:       6F1727AC-C7FD-49B5-89D9-F203E96DC849
:END:
*** DELEGATED Investigate book scanners
CLOSED: [2022-09-06 Tue 10:20]
:PROPERTIES:
:ID:       DCF8644B-A497-486F-9479-FB340E86A599
:ARCHIVE_TIME: 2022-09-13 Tue 17:26
:END:
:LOGBOOK:
CLOCK: [2022-09-06 Tue 10:05]--[2022-09-06 Tue 10:20] =>  0:15
:END:
Delegated to Leo.
* prog-mode
:PROPERTIES:
:ID:       A8700D18-574A-4093-938C-5707589DBB41
:END:

#+begin_src emacs-lisp :results silent
(use-feature prog-mode
  :config
  (global-prettify-symbols-mode)
  :hook
  (prog-mode-hook . outline-minor-mode)
  (prog-mode-hook . hs-minor-mode)
  :general
  ("A-H-v" 'set-variable
   "M-d" 'toggle-debug-on-error
   "A-M-d" 'toggle-debug-on-quit)
  (prog-mode-map
   "A-H-C-i" 'mark-defun
   "M-." 'xref-find-definitions)
  (emacs-lisp-mode-map shell-mode-map
      "s-c" 'exit-recursive-edit))
#+end_src

** lsp-mode
:PROPERTIES:
:ID:       E9D2E6CA-5256-4776-801F-13281BD390C9
:END:
/[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is an Emacs client/library for the Language Server Protocol./

Useful: [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][A guide on disabling/enabling lsp-mode features - LSP Mode - LSP support for Emacs]]

[2022-11-01 Tue 20:56] Disabling.

#+begin_src emacs-lisp :results silent :tangle no
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "A-C-l")

  :custom
  (lsp-ui-doc-show-with-cursor t) ; move the cursor over a symbol to show its documentation
  (lsp-warn-no-matched-clients nil)
  (lsp-headerline-breadcrumb-enable nil)

  :config

  (defun ps/lsp-toggle ()
    "Connect/disconnect to lsp server."
    (interactive)
    (if (or (not lsp-mode)
            (equal lsp-mode '(lsp-enable-which-key-integration)))
        (lsp)
      (lsp-disconnect)))

  :hook
  ;; if you want which-key integration
  (lsp-mode . lsp-enable-which-key-integration)

  :general
  ("A-l" 'ps/lsp-toggle))
#+end_src

** lsp-ui
:PROPERTIES:
:ID:       FE34C313-80BF-4095-B2F0-6228041DFCFF
:END:
#+begin_src emacs-lisp :results silent
(use-package lsp-ui
  :after lsp-mode
  :demand t
  :commands lsp-ui-mode)
#+end_src

** dap-mode
:PROPERTIES:
:ID:       8E8F58B6-FCA7-4C29-B30A-D53D148DFF70
:END:

#+begin_src emacs-lisp :results silent
;; optionally if you want to use debugger
(use-package dap-mode
  :after lsp-mode
  :demand t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** dumb-jump
:PROPERTIES:
:ID:       BF9AD57C-A2BC-450B-8EAE-0FAAC951A52D
:END:
/[[https://github.com/jacktasia/dumb-jump][dumb-jump]] is a "jump to definition" package for 50+ languages./

#+begin_src emacs-lisp :results silent
(use-package dumb-jump)
#+end_src

** elisp-mode
:PROPERTIES:
:ID:       24475DE5-E129-4832-BAE5-C22D846C251E
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature elisp-mode
  :general
  (emacs-lisp-mode-map
   "s-d" 'eval-defun
   "A-s-d" 'edebug-defun))
#+end_src

*** TODO [#6] Learn to use all relevant sexp commands
:PROPERTIES:
:Effort:   0:30
:ID:       89FDC8BC-DD5B-4616-8E73-37EDD9C088C1
:END:
Some are mentioned [[https://stackoverflow.com/questions/4304925/why-is-it-customary-to-put-many-closing-parentheses-on-one-line-in-lisp-based-la][here]].

** debug
:PROPERTIES:
:ID:       AACCFE88-084B-4428-82DB-7C695D9624C4
:END:

#+begin_src emacs-lisp
(use-feature debug)
#+end_src

** edebug
:PROPERTIES:
:ID:       4ADAE24A-49F4-47F2-AF5A-B15B8137E714
:END:

#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       17678075-A57B-43BE-B370-EFB77935BE05
:END:
**** DONE [#6] Learn to use ~edebug~
CLOSED: [2022-12-12 Mon 23:02]
:PROPERTIES:
:Effort:   0:45
:ID:       A1B9B804-ABDF-4E0E-850D-32C11E457983
:ARCHIVE_TIME: 2022-12-12 Mon 23:02
:END:
:LOGBOOK:
CLOCK: [2021-11-25 Thu 22:06]--[2021-11-25 Thu 22:46] =>  0:40
:END:
See [[id:94184DD8-591C-46CD-BFC3-9738113DA640][debugging emacs lisp]].

** backtrace
:PROPERTIES:
:ID:       B69F718B-9BAE-4EAD-99DE-2C8C1E98CCA3
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-feature backtrace
  :custom
  (backtrace-line-length nil))
#+end_src

** macrostep
:PROPERTIES:
:ID:       8AE42CAA-5B62-4B1C-9C7C-DFD72AC5B3CD
:END:
/[[https://github.com/joddie/macrostep][macrostep]] is an interactive macro-expander./

See [[https://www.youtube.com/watch?v=odkYXXYOxpo][this video]] (starting at 7:30) for an introduction to this package.

#+begin_src emacs-lisp :results silent
(use-package macrostep)
#+end_src

** ESS
:PROPERTIES:
:ID:       5B1FC084-42CD-47F3-B8AD-1D2113488CBC
:END:
#+begin_src emacs-lisp :tangle no
(use-package ess)
#+end_src

** clojure
:PROPERTIES:
:ID:       A9508F41-E82B-4E6C-9304-53981A8F0C27
:END:

#+begin_src emacs-lisp :results silent
(use-package clojure-mode)
#+end_src

** cider
:PROPERTIES:
:ID:       308A0DCB-A51A-493F-B729-A0156ED1C4B7
:END:
#+begin_src emacs-lisp :results silent
(use-package cider)
#+end_src

** python
:PROPERTIES:
:ID:       D00C20E4-925A-41E1-95BD-5BF8BA03637C
:END:

#+begin_src emacs-lisp :results silent
(use-feature python
  :demand t
  :custom
  (python-shell-interpreter "python3")
  (org-babel-python-command "python3")

  :config
  (setq flycheck-python-pycompile-executable "python3")
  (remove-hook 'python-mode-hook #'yasnippet-snippets--fixed-indent) ; some package (`elpy'?) is adding this
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)))

  :general
  (python-mode-map
   "s-l" 'python-shell-send-file
   "s-d" 'python-shell-send-defun
   "s-c" 'python-shell-send-buffer
   "s-s" 'python-shell-send-string
   "s-r" 'python-shell-send-region
   "s-e" 'python-shell-send-statement))
#+end_src

** applescript-mode
:PROPERTIES:
:ID:       6F36A349-196D-40A8-9338-61DB3C86D760
:END:
#+begin_src emacs-lisp :results silent
(use-package applescript-mode)
#+end_src

** puni
:PROPERTIES:
:ID:       1E0E065E-46CE-4961-8620-6554935CE68F
:END:
/[[https://github.com/AmaiKinono/puni][puni]] is a structural editing package that supports many major modes out of the box./

#+begin_src emacs-lisp
(use-package puni
  :demand t

  :general
  (puni-mode-map
   "C-M-a" 'puni-beginning-of-sexp
   "C-M-b" 'puni-backward-sexp
   "C-M-e" 'puni-end-of-sexp
   "C-M-f" 'puni-forward-sexp
   "C-S-k" 'puni-backward-kill-line
   "C-c DEL" 'puni-force-delete
   "C-d" 'puni-forward-delete-char
   "C-k" nil
   "C-w" nil
   "DEL" 'puni-backward-delete-char
   "M-(" 'puni-syntactic-backward-punct
   "M-)" 'puni-syntactic-forward-punct
   "M-DEL"    'puni-backward-kill-word)

  :hook
  ((prog-mode-hook sgml-mode-hook nxml-mode-hook tex-mode-hook eval-expression-minibuffer-setup-hook) . puni-mode))
#+end_src
*** TODO Define ~puni~ key bindings
:PROPERTIES:
:ID:       BEF1B425-C23E-4C1C-A468-92F7AD54FA18
:END:

** copilot
:PROPERTIES:
:ID:       2064FE34-0301-4E33-AB51-FE4921CA0E16
:END:
/[[https://github.com/zerolfx/copilot.el][copilot]] is an unofficial Copilot plugin for Emacs./

#+begin_src emacs-lisp :results silent
(use-package copilot
  :if (equal (system-name) ps/computer-hostname-pablo)
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))

  :custom
  (copilot-node-executable "/opt/homebrew/opt/node@16/bin/node")

  :hook
  (prog-mode-hook . copilot-mode)
  (emacs-lisp-mode-hook . copilot-mode)

  :general
  (copilot-mode-map
   "M-<tab>" 'copilot-accept-completion
   "A-M-<tab>" 'copilot-accept-completion-by-line))
#+end_src

** gpt
:PROPERTIES:
:ID:       6BA1A737-40A1-4253-8FC8-E211F6060BC9
:END:
/[[https://github.com/stuhlmueller/gpt.el][gpt]] is an Emacs package for calling instruction-following language models./

#+begin_src emacs-lisp :results silent
(use-package gpt
  :commands gpt-dwim
  :config
  (setq gpt-openai-key (auth-source-pass-get 'secret "auth-sources/openai.com"))

  :general
  ("A-C-g" 'gpt-dwim))
#+end_src

** pen
:PROPERTIES:
:ID:       DEEF7EF7-E79C-427B-9E1D-86D22FC2056E
:END:
*** TODO [#5] Check out pen.el
:PROPERTIES:
:ID:       2743B1F0-CCA8-4F48-8DC4-EF93E1A4607F
:END:
https://github.com/mullikine/pen.el
Disscussion [[https://www.reddit.com/r/emacs/comments/zhwhww/comment/izp8rxy/?utm_source=reddit&utm_medium=web2x&context=3][here]].
** elpy
:PROPERTIES:
:ID:       E96C6026-AEFA-42A1-930E-863EA3FF651E
:END:
:LOGBOOK:
CLOCK: [2021-11-25 Thu 17:39]--[2021-11-25 Thu 17:51] =>  0:12
CLOCK: [2021-11-01 Mon 12:09]--[2021-11-01 Mon 12:10] =>  0:01
:END:

#+begin_src emacs-lisp :results silent
(use-package elpy
  :custom
  (elpy-rpc-python-command "python3")
  (elpy-rpc-virtualenv-path 'current)
  :config
  (elpy-enable))
#+end_src

** epc
:PROPERTIES:
:ID:       474AA19E-D682-4A5E-9853-845333D82912
:END:
#+begin_src emacs-lisp :results silent
(use-package epc)
#+end_src

** eldoc
:PROPERTIES:
:ID:       6DF08967-7BC0-4DA6-9E19-63B903675EF1
:END:
:LOGBOOK:
CLOCK: [2022-06-19 Sun 07:14]--[2022-06-19 Sun 07:31] =>  0:17
:END:
/[[https://elpa.gnu.org/packages/eldoc.html][eldoc]] show function arglist or variable docstring in echo area./

#+begin_src emacs-lisp :results silent
(use-feature eldoc
  :demand t
  :config
  ;; emacs.stackexchange.com/a/55914/32089
  (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
    "If SYM is a function, append its docstring."
    (concat
     (apply orig-fun sym r)
     (let* ((doc (and (fboundp sym) (documentation sym 'raw)))
            (oneline (and doc (substring doc 0 (string-match "\n" doc)))))
       (and oneline
            (stringp oneline)
            (not (string= "" oneline))
            (concat "  |  " (propertize oneline 'face 'italic))))))

  (global-eldoc-mode))
#+end_src

** bicycle
:PROPERTIES:
:ID:       0AF1245D-2786-40B9-9176-783B9B9397AD
:END:

#+begin_src emacs-lisp :results silent
(use-package bicycle
  :after outline)
#+end_src

* org-mode
:PROPERTIES:
:ID:       0E2FD90A-8A8A-4625-ABEA-D82DD3CC88A0
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 21:27]--[2021-11-19 Fri 21:30] =>  0:03
CLOCK: [2021-11-18 Thu 19:05]--[2021-11-18 Thu 19:28] =>  0:23
CLOCK: [2021-07-22 Thu 12:06]--[2021-07-22 Thu 12:12] =>  0:06
CLOCK: [2021-07-11 Sun 11:16]--[2021-07-11 Sun 11:46] =>  0:30
CLOCK: [2021-04-06 Tue 20:40]--[2021-04-06 Tue 21:10] =>  0:30
CLOCK: [2021-04-06 Tue 13:12]--[2021-04-06 Tue 13:48] =>  0:36
CLOCK: [2021-03-30 Tue 09:36]--[2021-03-30 Tue 09:42] =>  0:06
CLOCK: [2021-03-25 Thu 22:19]--[2021-03-25 Thu 23:00] =>  0:41
CLOCK: [2021-03-17 Wed 19:33]--[2021-03-17 Wed 20:00] =>  0:27
CLOCK: [2021-03-17 Wed 15:42]--[2021-03-17 Wed 15:48] =>  0:06
CLOCK: [2021-03-16 Tue 20:03]--[2021-03-16 Tue 20:21] =>  0:18
CLOCK: [2021-03-16 Tue 16:17]--[2021-03-16 Tue 16:18] =>  0:01
CLOCK: [2021-03-09 Tue 21:18]--[2021-03-09 Tue 21:26] =>  0:08
CLOCK: [2021-03-04 Thu 10:04]--[2021-03-04 Thu 10:10] =>  0:06
CLOCK: [2021-03-02 Tue 10:14]--[2021-03-02 Tue 10:23] =>  0:09
CLOCK: [2021-02-20 Sat 22:09]--[2021-02-20 Sat 22:20] =>  0:11
CLOCK: [2021-02-05 Fri 19:19]--[2021-02-05 Fri 19:25] =>  0:06
CLOCK: [2021-02-05 Fri 19:00]--[2021-02-05 Fri 19:09] =>  0:09
CLOCK: [2021-01-30 Sat 21:39]--[2021-01-30 Sat 22:28] =>  0:49
CLOCK: [2021-01-29 Fri 15:32]--[2021-01-29 Fri 15:46] =>  0:14
CLOCK: [2021-01-28 Thu 18:52]--[2021-01-28 Thu 18:54] =>  0:02
CLOCK: [2021-01-28 Thu 17:42]--[2021-01-28 Thu 18:17] =>  0:35
CLOCK: [2021-01-28 Thu 17:23]--[2021-01-28 Thu 17:31] =>  0:08
CLOCK: [2021-01-25 Mon 20:25]--[2021-01-25 Mon 20:35] =>  0:10
CLOCK: [2021-01-25 Mon 16:53]--[2021-01-25 Mon 17:00] =>  0:07
CLOCK: [2021-01-25 Mon 16:39]--[2021-01-25 Mon 16:49] =>  0:10
CLOCK: [2021-01-25 Mon 11:15]--[2021-01-25 Mon 11:25] =>  0:10
CLOCK: [2021-01-24 Sun 12:52]--[2021-01-24 Sun 13:01] =>  0:09
CLOCK: [2021-01-24 Sun 11:48]--[2021-01-24 Sun 12:01] =>  0:13
CLOCK: [2021-01-24 Sun 11:22]--[2021-01-24 Sun 11:37] =>  0:15
CLOCK: [2021-01-23 Sat 18:47]--[2021-01-23 Sat 19:07] =>  0:20
CLOCK: [2021-01-23 Sat 16:41]--[2021-01-23 Sat 16:50] =>  0:09
CLOCK: [2021-01-23 Sat 14:07]--[2021-01-23 Sat 14:14] =>  0:07
CLOCK: [2021-01-23 Sat 12:54]--[2021-01-23 Sat 13:33] =>  0:39
CLOCK: [2021-01-22 Fri 15:46]--[2021-01-22 Fri 15:49] =>  0:03
CLOCK: [2021-01-22 Fri 15:43]--[2021-01-22 Fri 15:46] =>  0:03
CLOCK: [2021-01-22 Fri 13:48]--[2021-01-22 Fri 13:57] =>  0:09
CLOCK: [2021-01-22 Fri 12:51]--[2021-01-22 Fri 12:59] =>  0:08
CLOCK: [2021-01-22 Fri 12:34]--[2021-01-22 Fri 12:50] =>  0:16
CLOCK: [2021-01-19 Tue 18:54]--[2021-01-19 Tue 19:12] =>  0:18
CLOCK: [2021-01-15 Fri 21:28]--[2021-01-15 Fri 22:21] =>  0:53
CLOCK: [2021-01-15 Fri 20:35]--[2021-01-15 Fri 21:25] =>  0:50
CLOCK: [2021-01-15 Fri 18:07]--[2021-01-15 Fri 18:11] =>  0:04
CLOCK: [2021-01-10 Sun 10:49]--[2021-01-10 Sun 11:05] =>  0:16
CLOCK: [2021-01-09 Sat 11:25]--[2021-01-09 Sat 11:34] =>  0:09
CLOCK: [2021-01-09 Sat 10:53]--[2021-01-09 Sat 11:22] =>  0:29
CLOCK: [2021-01-04 Mon 11:12]--[2021-01-04 Mon 11:17] =>  0:05
CLOCK: [2021-01-01 Fri 18:14]--[2021-01-01 Fri 18:26] =>  0:12
CLOCK: [2020-12-29 Tue 15:38]--[2020-12-29 Tue 15:56] =>  0:18
CLOCK: [2020-12-25 Fri 20:51]--[2020-12-25 Fri 20:58] =>  0:07
CLOCK: [2020-12-25 Fri 19:43]--[2020-12-25 Fri 20:05] =>  0:22
CLOCK: [2020-12-25 Fri 19:25]--[2020-12-25 Fri 19:27] =>  0:02
CLOCK: [2020-12-20 Sun 14:15]--[2020-12-20 Sun 14:19] =>  0:04
CLOCK: [2020-12-08 Tue 08:51]--[2020-12-08 Tue 08:55] =>  0:04
CLOCK: [2020-10-22 Thu 12:28]--[2020-10-22 Thu 12:29] =>  0:01
CLOCK: [2020-10-17 Sat 13:40]--[2020-10-17 Sat 13:51] =>  0:11
CLOCK: [2020-10-03 Sat 10:12]--[2020-10-03 Sat 10:17] =>  0:05
CLOCK: [2020-09-27 Sun 19:20]--[2020-09-27 Sun 19:21] =>  0:01
CLOCK: [2020-09-27 Sun 17:25]--[2020-09-27 Sun 18:00] =>  0:35
CLOCK: [2020-09-22 Tue 10:35]--[2020-09-22 Tue 10:50] =>  0:15
CLOCK: [2020-09-21 Mon 22:03]--[2020-09-21 Mon 22:08] =>  0:05
CLOCK: [2020-09-20 Sun 21:55]--[2020-09-20 Sun 22:03] =>  0:08
CLOCK: [2020-09-20 Sun 18:33]--[2020-09-20 Sun 18:56] =>  0:23
CLOCK: [2020-09-19 Sat 20:48]--[2020-09-19 Sat 20:57] =>  0:09
CLOCK: [2020-09-19 Sat 20:36]--[2020-09-19 Sat 20:36] =>  0:00
CLOCK: [2020-09-18 Fri 19:50]--[2020-09-18 Fri 20:08] =>  0:18
CLOCK: [2020-09-17 Thu 19:46]--[2020-09-17 Thu 20:00] =>  0:14
CLOCK: [2020-09-14 Mon 10:30]--[2020-09-14 Mon 10:44] =>  0:00
CLOCK: [2020-09-14 Mon 08:43]--[2020-09-14 Mon 08:52] =>  0:09
CLOCK: [2020-09-01 Tue 18:53]--[2020-09-01 Tue 18:56] =>  0:03
CLOCK: [2020-09-01 Tue 14:16]--[2020-09-01 Tue 14:17] =>  0:01
CLOCK: [2020-08-31 Mon 15:25]--[2020-08-31 Mon 15:34] =>  0:09
CLOCK: [2020-08-30 Sun 21:43]--[2020-08-30 Sun 22:15] =>  0:32
CLOCK: [2020-08-30 Sun 18:08]--[2020-08-30 Sun 18:09] =>  0:01
CLOCK: [2020-08-30 Sun 17:26]--[2020-08-30 Sun 17:56] =>  0:30
CLOCK: [2020-08-29 Sat 15:31]--[2020-08-29 Sat 15:41] =>  0:10
CLOCK: [2020-08-28 Fri 22:05]--[2020-08-28 Fri 22:06] =>  0:01
CLOCK: [2020-08-28 Fri 14:28]--[2020-08-28 Fri 14:42] =>  0:10
CLOCK: [2020-08-27 Thu 13:41]--[2020-08-27 Thu 13:44] =>  0:03
CLOCK: [2020-08-25 Tue 11:26]--[2020-08-25 Tue 11:28] =>  0:02
CLOCK: [2020-08-25 Tue 11:16]--[2020-08-25 Tue 11:22] =>  0:06
CLOCK: [2020-08-25 Tue 11:04]--[2020-08-25 Tue 11:04] =>  0:00
CLOCK: [2020-08-25 Tue 10:57]--[2020-08-25 Tue 11:04] =>  0:07
CLOCK: [2020-08-24 Mon 16:30]--[2020-08-24 Mon 16:37] =>  0:07
CLOCK: [2020-08-24 Mon 16:27]--[2020-08-24 Mon 16:29] =>  0:02
CLOCK: [2020-08-24 Mon 12:45]--[2020-08-24 Mon 12:57] =>  0:12
CLOCK: [2020-08-23 Sun 13:44]--[2020-08-23 Sun 14:01] =>  0:17
CLOCK: [2020-08-23 Sun 12:40]--[2020-08-23 Sun 12:59] =>  0:19
CLOCK: [2020-08-22 Sat 22:42]--[2020-08-22 Sat 22:55] =>  0:13
CLOCK: [2020-08-22 Sat 18:35]--[2020-08-22 Sat 18:53] =>  0:18
CLOCK: [2020-08-22 Sat 15:21]--[2020-08-22 Sat 16:06] =>  0:45
CLOCK: [2020-08-22 Sat 12:48]--[2020-08-22 Sat 12:54] =>  0:06
CLOCK: [2020-08-21 Fri 19:34]--[2020-08-21 Fri 19:54] =>  0:17
CLOCK: [2020-08-20 Thu 13:44]--[2020-08-20 Thu 13:52] =>  0:02
CLOCK: [2020-08-20 Thu 12:53]--[2020-08-20 Thu 13:03] =>  0:10
CLOCK: [2020-08-19 Wed 15:59]--[2020-08-19 Wed 16:01] =>  0:02
CLOCK: [2020-08-18 Tue 12:57]--[2020-08-18 Tue 13:00] =>  0:03
CLOCK: [2020-08-18 Tue 12:06]--[2020-08-18 Tue 12:08] =>  0:02
CLOCK: [2020-08-17 Mon 19:23]--[2020-08-17 Mon 19:31] =>  0:08
CLOCK: [2020-08-17 Mon 19:11]--[2020-08-17 Mon 19:23] =>  0:12
CLOCK: [2020-08-17 Mon 17:57]--[2020-08-17 Mon 18:23] =>  0:26
CLOCK: [2020-08-17 Mon 17:48]--[2020-08-17 Mon 17:53] =>  0:05
CLOCK: [2020-08-17 Mon 13:45]--[2020-08-17 Mon 14:22] =>  0:37
CLOCK: [2020-08-16 Sun 08:58]--[2020-08-16 Sun 09:15] =>  0:17
CLOCK: [2020-08-15 Sat 21:55]--[2020-08-15 Sat 23:55] =>  2:00
CLOCK: [2020-08-15 Sat 21:25]--[2020-08-15 Sat 21:27] =>  0:02
CLOCK: [2020-08-15 Sat 16:03]--[2020-08-15 Sat 17:28] =>  1:25
CLOCK: [2020-08-14 Fri 21:10]--[2020-08-14 Fri 21:22] =>  0:12
CLOCK: [2020-08-14 Fri 17:34]--[2020-08-14 Fri 17:56] =>  0:22
CLOCK: [2020-08-14 Fri 17:05]--[2020-08-14 Fri 17:14] =>  0:09
CLOCK: [2020-08-14 Fri 16:25]--[2020-08-14 Fri 16:34] =>  0:09
CLOCK: [2020-08-13 Thu 17:19]--[2020-08-13 Thu 17:27] =>  0:08
CLOCK: [2020-08-13 Thu 16:24]--[2020-08-13 Thu 16:29] =>  0:05
CLOCK: [2020-08-13 Thu 12:55]--[2020-08-13 Thu 13:12] =>  0:17
CLOCK: [2020-08-13 Thu 12:54]--[2020-08-13 Thu 12:54] =>  0:00
CLOCK: [2020-08-13 Thu 10:13]--[2020-08-13 Thu 10:24] =>  0:11
CLOCK: [2020-08-13 Thu 08:20]--[2020-08-13 Thu 08:28] =>  0:08
CLOCK: [2020-08-13 Thu 07:39]--[2020-08-13 Thu 07:53] =>  0:14
CLOCK: [2020-08-12 Wed 22:19]--[2020-08-12 Wed 23:16] =>  0:57
CLOCK: [2020-08-12 Wed 20:51]--[2020-08-12 Wed 20:52] =>  0:01
CLOCK: [2020-08-12 Wed 19:49]--[2020-08-12 Wed 20:02] =>  0:13
CLOCK: [2020-08-12 Wed 18:58]--[2020-08-12 Wed 18:58] =>  0:00
CLOCK: [2020-08-12 Wed 16:38]--[2020-08-12 Wed 17:31] =>  0:53
CLOCK: [2020-08-12 Wed 15:06]--[2020-08-12 Wed 15:31] =>  0:25
CLOCK: [2020-08-12 Wed 12:44]--[2020-08-12 Wed 12:57] =>  0:13
CLOCK: [2020-08-11 Tue 20:52]--[2020-08-11 Tue 21:31] =>  0:39
CLOCK: [2020-08-11 Tue 19:32]--[2020-08-11 Tue 20:00] =>  0:28
CLOCK: [2020-08-11 Tue 19:03]--[2020-08-11 Tue 19:28] =>  0:25
CLOCK: [2020-08-11 Tue 18:37]--[2020-08-11 Tue 18:48] =>  0:11
CLOCK: [2020-08-11 Tue 18:24]--[2020-08-11 Tue 18:33] =>  0:09
CLOCK: [2020-08-11 Tue 18:11]--[2020-08-11 Tue 18:17] =>  0:06
CLOCK: [2020-08-11 Tue 16:30]--[2020-08-11 Tue 16:34] =>  0:04
CLOCK: [2020-08-11 Tue 13:59]--[2020-08-11 Tue 14:11] =>  0:12
CLOCK: [2020-08-11 Tue 11:29]--[2020-08-11 Tue 11:31] =>  0:02
CLOCK: [2020-08-09 Sun 21:09]--[2020-08-09 Sun 21:20] =>  0:11
CLOCK: [2020-08-09 Sun 16:45]--[2020-08-09 Sun 17:09] =>  0:19
CLOCK: [2020-08-09 Sun 10:55]--[2020-08-09 Sun 10:59] =>  0:04
CLOCK: [2020-08-08 Sat 18:41]--[2020-08-08 Sat 18:53] =>  0:12
CLOCK: [2020-08-08 Sat 17:53]--[2020-08-08 Sat 18:23] =>  0:30
CLOCK: [2020-08-08 Sat 17:19]--[2020-08-08 Sat 17:49] =>  0:30
CLOCK: [2020-08-07 Fri 19:24]--[2020-08-07 Fri 19:34] =>  0:10
CLOCK: [2020-08-07 Fri 18:58]--[2020-08-07 Fri 19:17] =>  0:19
CLOCK: [2020-08-07 Fri 14:51]--[2020-08-07 Fri 15:07] =>  0:16
CLOCK: [2020-08-06 Thu 19:36]--[2020-08-06 Thu 19:50] =>  0:14
CLOCK: [2020-08-06 Thu 10:59]--[2020-08-06 Thu 11:21] =>  0:22
CLOCK: [2020-08-06 Thu 08:41]--[2020-08-06 Thu 08:42] =>  0:01
CLOCK: [2020-08-05 Wed 19:49]--[2020-08-05 Wed 19:53] =>  0:04
CLOCK: [2020-08-05 Wed 19:41]--[2020-08-05 Wed 19:48] =>  0:07
CLOCK: [2020-08-05 Wed 11:54]--[2020-08-05 Wed 11:59] =>  0:05
CLOCK: [2020-08-04 Tue 20:46]--[2020-08-04 Tue 20:50] =>  0:04
CLOCK: [2020-08-03 Mon 20:50]--[2020-08-03 Mon 20:54] =>  0:04
CLOCK: [2020-08-03 Mon 07:56]--[2020-08-03 Mon 07:58] =>  0:02
CLOCK: [2020-08-02 Sun 20:44]--[2020-08-02 Sun 20:49] =>  0:05
CLOCK: [2020-07-31 Fri 20:57]--[2020-07-31 Fri 20:58] =>  0:01
CLOCK: [2020-07-31 Fri 18:44]--[2020-07-31 Fri 18:51] =>  0:07
CLOCK: [2020-07-29 Wed 19:00]--[2020-07-29 Wed 19:09] =>  0:09
CLOCK: [2020-07-29 Wed 13:47]--[2020-07-29 Wed 16:05] =>  2:18
CLOCK: [2020-07-29 Wed 12:24]--[2020-07-29 Wed 12:27] =>  0:03
CLOCK: [2020-07-29 Wed 11:38]--[2020-07-29 Wed 12:23] =>  0:45
CLOCK: [2020-07-28 Tue 20:44]--[2020-07-28 Tue 21:24] =>  0:40
CLOCK: [2020-07-28 Tue 19:21]--[2020-07-28 Tue 19:58] =>  0:37
CLOCK: [2020-07-28 Tue 19:04]--[2020-07-28 Tue 19:14] =>  0:10
CLOCK: [2020-07-28 Tue 17:30]--[2020-07-28 Tue 17:50] =>  0:20
CLOCK: [2020-07-28 Tue 16:58]--[2020-07-28 Tue 17:12] =>  0:14
CLOCK: [2020-07-28 Tue 13:53]--[2020-07-28 Tue 14:01] =>  0:08
CLOCK: [2020-07-27 Mon 21:00]--[2020-07-27 Mon 21:03] =>  0:03
CLOCK: [2020-07-27 Mon 15:08]--[2020-07-27 Mon 15:12] =>  0:04
CLOCK: [2020-07-27 Mon 14:22]--[2020-07-27 Mon 14:25] =>  0:03
CLOCK: [2020-07-26 Sun 20:53]--[2020-07-26 Sun 21:23] =>  0:30
CLOCK: [2020-07-26 Sun 17:04]--[2020-07-26 Sun 17:15] =>  0:11
CLOCK: [2020-07-26 Sun 11:39]--[2020-07-26 Sun 11:47] =>  0:08
CLOCK: [2020-07-23 Thu 10:20]--[2020-07-23 Thu 10:40] =>  0:20
CLOCK: [2020-07-22 Wed 22:10]--[2020-07-22 Wed 22:26] =>  0:16
CLOCK: [2020-07-17 Fri 20:56]--[2020-07-17 Fri 21:18] =>  0:22
CLOCK: [2020-07-17 Fri 12:38]--[2020-07-17 Fri 13:10] =>  0:32
CLOCK: [2020-07-17 Fri 11:45]--[2020-07-17 Fri 12:34] =>  0:49
CLOCK: [2020-07-14 Tue 15:53]--[2020-07-14 Tue 21:51] =>  5:58
CLOCK: [2020-07-14 Tue 13:47]--[2020-07-14 Tue 14:39] =>  0:52
CLOCK: [2020-07-14 Tue 12:34]--[2020-07-14 Tue 12:58] =>  0:24
CLOCK: [2020-07-14 Tue 10:47]--[2020-07-14 Tue 11:43] =>  0:56
CLOCK: [2020-07-13 Mon 12:43]--[2020-07-13 Mon 13:00] =>  0:17
CLOCK: [2020-07-12 Sun 19:31]--[2020-07-12 Sun 19:51] =>  0:20
CLOCK: [2020-07-12 Sun 12:35]--[2020-07-12 Sun 13:06] =>  0:31
CLOCK: [2020-07-08 Wed 15:38]--[2020-07-08 Wed 16:04] =>  0:26
CLOCK: [2020-07-08 Wed 16:05]--[2020-07-08 Wed 16:30] =>  0:25
CLOCK: [2020-07-08 Wed 21:13]--[2020-07-08 Wed 21:25] =>  0:12
CLOCK: [2020-07-08 Wed 21:29]--[2020-07-08 Wed 21:39] =>  0:10
CLOCK: [2020-07-08 Wed 21:39]--[2020-07-08 Wed 21:40] =>  0:01
CLOCK: [2020-07-08 Wed 21:40]--[2020-07-08 Wed 21:58] =>  0:18
CLOCK: [2020-07-09 Thu 13:48]--[2020-07-09 Thu 13:56] =>  0:08
CLOCK: [2020-07-10 Fri 18:19]--[2020-07-10 Fri 18:45] =>  0:26
CLOCK: [2020-07-10 Fri 18:47]--[2020-07-10 Fri 19:05] =>  0:18
CLOCK: [2020-07-10 Fri 19:19]--[2020-07-10 Fri 19:32] =>  0:13
CLOCK: [2020-07-10 Fri 19:36]--[2020-07-10 Fri 19:41] =>  0:05
CLOCK: [2020-07-11 Sat 13:11]--[2020-07-11 Sat 14:59] =>  1:48
:END:

** TODO [#4] Create function to compute the total number of hours in effort estimates, as well as the total number of Todos, then check it every evening
:PROPERTIES:
:Effort:   2:00
:ID:       FCC486F6-7391-4EA3-9087-6BC3D5AB72B3
:END:
** TODO [#5] Read Org manual
:PROPERTIES:
:Effort:   7:00
:LAST_REPEAT: [2021-11-27 Sat 15:51]
:ID:       94F31A7E-7977-4FC6-9E75-9D098FBB029D
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 19:17]--[2021-12-12 Sun 20:17] =>  1:00
CLOCK: [2021-11-27 Sat 15:44]--[2021-11-27 Sat 15:51] =>  0:07
CLOCK: [2021-11-27 Sat 15:36]--[2021-11-27 Sat 15:41] =>  0:05
CLOCK: [2021-11-26 Fri 18:39]--[2021-11-26 Fri 18:51] =>  0:12
CLOCK: [2021-11-25 Thu 20:17]--[2021-11-25 Thu 20:28] =>  0:11
CLOCK: [2021-11-25 Thu 19:44]--[2021-11-25 Thu 20:05] =>  0:21
CLOCK: [2021-11-24 Wed 22:45]--[2021-11-24 Wed 22:58] =>  0:13
CLOCK: [2021-11-23 Tue 14:55]--[2021-11-23 Tue 15:17] =>  0:22
CLOCK: [2021-11-22 Mon 14:41]--[2021-11-22 Mon 15:09] =>  0:28
CLOCK: [2021-11-21 Sun 18:49]--[2021-11-21 Sun 19:18] =>  0:29
CLOCK: [2021-11-20 Sat 21:05]--[2021-11-20 Sat 21:25] =>  0:20
CLOCK: [2021-11-19 Fri 22:00]--[2021-11-19 Fri 22:18] =>  0:18
CLOCK: [2021-03-22 Mon 12:25]--[2021-03-22 Mon 12:44] =>  0:19
:END:
[[https://orgmode.org/manual/][Online manual]]

| date             | section                        |
|------------------+--------------------------------|
| [2021-11-19 Fri] | [[https://orgmode.org/manual/Global-and-local-cycling.html][2.2.1 Global and local cycling]] |
| [2021-11-20 Sat] | [[https://orgmode.org/manual/Sparse-Trees.html][2.5 Sparse Trees]]               |
| [2021-11-21 Sun] | [[https://orgmode.org/manual/Blocks.html][2.8 Blocks]]                     |
| [2021-11-22 Mon] | [[https://orgmode.org/manual/Column-Width-and-Alignment.html][3.2 Column Width and Alignment]] |
| [2021-11-23 Tue] | [[https://orgmode.org/manual/Formula-syntax-for-Calc.html][3.5.2 Formula syntax for Calc]]  |
| [2021-11-24 Wed] | [[https://orgmode.org/manual/Field-and-range-formulas.html][3.5.5 Field and range formulas]] |
| [2021-11-26 Fri] | [[https://orgmode.org/manual/Hyperlinks.html][4 Hyperlinks]]                   |
| [2021-11-27 Sat] | [[https://orgmode.org/manual/Handling-Links.html][4.5 Handling Links]]             |

** org
:PROPERTIES:
:ID:       268B60E4-708C-4372-A59D-5DD876E493CA
:END:
:LOGBOOK:
CLOCK: [2022-07-28 Thu 14:47]--[2022-07-28 Thu 14:58] =>  0:11
CLOCK: [2021-10-12 Tue 19:21]--[2021-10-12 Tue 19:38] =>  0:17
CLOCK: [2021-06-02 Wed 21:59]--[2021-06-02 Wed 22:00] =>  0:01
CLOCK: [2021-06-02 Wed 19:18]--[2021-06-02 Wed 19:52] =>  0:34
CLOCK: [2021-06-08 Tue 16:06]--[2021-06-08 Tue 16:07] =>  0:01
CLOCK: [2021-04-28 Wed 08:50]--[2021-04-28 Wed 09:07] =>  0:17
CLOCK: [2021-06-08 Tue 16:07]--[2021-06-08 Tue 16:37] =>  0:30
CLOCK: [2021-03-28 Sun 19:01]--[2021-03-28 Sun 19:20] =>  0:19
CLOCK: [2021-06-24 Thu 09:30]--[2021-06-24 Thu 09:39] =>  0:09
CLOCK: [2021-04-02 Fri 17:22]--[2021-04-02 Fri 17:29] =>  0:07
CLOCK: [2021-04-02 Fri 09:39]--[2021-04-02 Fri 09:47] =>  0:08
CLOCK: [2021-02-27 Sat 20:56]--[2021-02-27 Sat 21:06] =>  0:10
CLOCK: [2021-02-25 Thu 22:04]--[2021-02-25 Thu 22:34] =>  0:30
CLOCK: [2021-02-26 Fri 13:40]--[2021-02-26 Fri 13:55] =>  0:15
CLOCK: [2022-07-13 Wed 10:56]--[2022-07-13 Wed 11:30] =>  0:34
CLOCK: [2021-06-27 Sun 15:12]--[2021-06-27 Sun 15:17] =>  0:05
CLOCK: [2021-06-16 Wed 18:16]--[2021-06-16 Wed 18:19] =>  0:03
CLOCK: [2021-06-12 Sat 13:19]--[2021-06-12 Sat 13:31] =>  0:12
CLOCK: [2021-05-28 Fri 19:30]--[2021-05-28 Fri 19:49] =>  0:19
CLOCK: [2021-04-30 Fri 21:37]--[2021-04-30 Fri 21:42] =>  0:05
CLOCK: [2021-04-16 Fri 21:19]--[2021-04-16 Fri 21:25] =>  0:06
CLOCK: [2021-04-07 Wed 19:09]--[2021-04-07 Wed 19:11] =>  0:02
CLOCK: [2021-03-21 Sun 21:18]--[2021-03-21 Sun 22:23] =>  1:05
CLOCK: [2021-03-20 Sat 20:27]--[2021-03-20 Sat 20:47] =>  0:20
CLOCK: [2021-03-17 Wed 15:17]--[2021-03-17 Wed 15:42] =>  0:25
CLOCK: [2021-03-08 Mon 21:40]--[2021-03-08 Mon 21:43] =>  0:03
CLOCK: [2021-03-08 Mon 17:52]--[2021-03-08 Mon 17:59] =>  0:07
CLOCK: [2021-03-08 Mon 15:33]--[2021-03-08 Mon 15:41] =>  0:08
CLOCK: [2022-07-01 Fri 11:48]--[2022-07-01 Fri 12:21] =>  0:33
CLOCK: [2022-05-29 Sun 15:24]--[2022-05-29 Sun 16:00] =>  0:36
CLOCK: [2022-01-15 Sat 19:24]--[2022-01-15 Sat 20:14] =>  0:50
CLOCK: [2021-11-20 Sat 21:32]--[2021-11-20 Sat 21:41] =>  0:09
CLOCK: [2021-10-14 Thu 19:07]--[2021-10-14 Thu 19:39] =>  0:32
CLOCK: [2021-10-05 Tue 13:18]--[2021-10-05 Tue 13:34] =>  0:16
CLOCK: [2021-04-02 Fri 22:44]--[2021-04-02 Fri 23:10] =>  0:26
:END:
#+begin_src emacs-lisp :results silent
(use-package org
  :custom
  (org-directory ps/dir-org) ; set org directory
  (org-todo-keywords
   '((sequence "TODO(t)"
               "DOING(g)"
               "SOMEDAY(s)"
               "MAYBE(m)"
               "WAITING(w)"
               "PROJECT(p)"
               "|"
               "DELEGATED(l)"
               "CANCELLED(c)"
               "DONE(d)")))
  (org-priority-highest 1)
  (org-priority-default 7)
  (org-priority-lowest 9 "set priorities")
  (org-extend-today-until 4 "youtu.be/31gwvApo8zg?t=3342")
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t "indent every heading and hide all but the last leading star")
  (org-return-follows-link t)
  (org-startup-folded t)
  (org-startup-indented t)
  (org-log-into-drawer "STATES")
  (org-clock-into-drawer "LOGBOOK" "file task state changes in STATES drawer")
  (org-log-done 'time "add timestamp when task is marked as DONE")
  (org-log-repeat nil "do not log TODO status changes for repeating tasks")
  (org-M-RET-may-split-line nil "irreal.org/blog/?p=6297")
  (org-loop-over-headlines-in-active-region t "Allow simultaneous modification of multiple task statuses.")
  (org-ctrl-k-protect-subtree t)
  (org-catch-invisible-edits 'smart)
  (org-special-ctrl-a/e t "`org-beginning-of-line' goes to beginning of first word")
  (org-link-search-must-match-exact-headline nil)
  (org-mark-ring-length 4)
  (org-pretty-entities nil)
  (org-image-actual-width '(800))
  (org-ellipsis " ")
  (org-link-elisp-confirm-function nil)
  (org-file-apps '((auto-mode . emacs)
                   (directory . emacs)
                   ("\\.mm\\'" . default)
                   ("\\.x?html?\\'" . default)
                   ("\\.pdf\\'" . emacs)))

  (org-structure-template-alist '(("a" . "export ascii")
                                     ("c" . "center")
                                     ("C" . "comment")
                                     ("e" . "example")
                                     ("E" . "export")
                                     ("h" . "export html")
                                     ("l" . "export latex")
                                     ("q" . "quote")
                                     ("s" . "src")
                                     ("se" . "src emacs-lisp")
                                     ("sj" . "src clojure")
                                     ("sp" . "src python")
                                     ("ss" . "src shell")
                                     ("v" . "verse")
                                     ("w" . "WP")))

  :config
  (dolist (module '(org-habit org-tempo))
    (add-to-list 'org-modules module))

  (defun ps/org-set-todo-properties ()
    "Set priority and effort."
    (interactive)
    (org-priority)
    (org-set-effort))

  (defun ps/org-url-dwim ()
    "docstring"
    (interactive)
    (cond
     ((url-get-url-at-point)
      (kill-new (url-get-url-at-point)))
     ((ps/org-link-get-url-at-point)
      (kill-new (ps/org-link-get-thing-at-point 1)))))

  ;; Adapted from lists.gnu.org/archive/html/emacs-orgmode/2011-06/msg00716.html
  (defun ps/org-link-get-thing-at-point (arg)
    "When point is on org link, extract object, as defined by ARG."
    (when (org-in-regexp org-link-bracket-re 1)
      (kill-new (org-link-unescape (match-string-no-properties arg)))))

  (defun ps/org-link-get-link-at-point ()
    "When point is on org link, extract link (both url and
description)."
    (interactive)
    (ps/org-link-get-thing-at-point 0))

  (defun ps/org-link-get-url-at-point ()
    "When point is on org link, extract url."
    (interactive)
    (ps/org-link-get-thing-at-point 1))

  (defun ps/org-link-get-description-at-point ()
    "When point is on org link, extract description."
    (interactive)
    (ps/org-link-get-thing-at-point 2))

  (defun ps/org-isearch-visible-org-heading ()
    "Jump to first visible org heading that matches string."
    (interactive)
    (widen)
    (let ((search-invisible nil)
          (isearchp-regexp-quote-yank-flag nil))
      (isearch-forward-regexp nil 1) ; isearch+
      (ps/isearch-yank-unquoted-string "^\*+ ")))

  ;; from emacs.stackexchange.com/a/10714/32089
  (defun ps/org-remove-link ()
    "Replace an org link by its description or, if empty, its
address."
    (interactive)
    (if (org-in-regexp org-link-bracket-re 1)
        (save-excursion
          (let ((remove (list (match-beginning 0) (match-end 0)))
                (description
                 (if (match-end 2)
                     (org-match-string-no-properties 2)
                   (org-match-string-no-properties 1))))
            (apply 'delete-region remove)
            (insert description)))))

  (defun ps/org-insert-todo-subheading-after-body ()
    (interactive)
    (save-restriction
      (org-narrow-to-subtree)
      (outline-hide-subtree)
      (outline-show-entry)
      (goto-char (point-max))
      (org-beginning-of-line)
      (org-insert-todo-heading nil t)
      (org-do-demote)))

  ;; Adapted from hungyi.net/posts/org-mode-subtree-contents
  (defun ps/org-get-heading-contents ()
    "Get the content text of the heading at point and add it to the `kill-ring'.
Excludes the heading itself and any child subtrees."
    (if (org-before-first-heading-p)
        (message "Not in or on an org heading")
      (save-excursion
        ;; If inside heading contents, move the point back to the heading
        ;; otherwise `org-agenda-get-some-entry-text' won't work.
        (unless (org-at-heading-p) (org-previous-visible-heading 1))
        (let ((contents (substring-no-properties
                         (org-agenda-get-some-entry-text
                          (point-marker)
                          most-positive-fixnum))))
          contents))))

  (defun ps/org-copy-heading-contents ()
    (interactive)
    (let ((contents (ps/org-get-heading-contents)))
      (if (string= contents "")
          (message "Heading is empty.")
        (message "Copied: %s" contents)
        (kill-new contents))))


  (defun ps/org-copy-heading-name ()
    (interactive)
    "Copy name of heading at point."
    (kill-new (org-entry-get nil "ITEM")))

  ;; reddit.com/r/emacs/comments/e4jnlj/how_to_create_a_word_counter_that_counts_words_in/f9e3796
  (defun ps/org-count-words ()
    "If region is active, count words in it; otherwise count words
in current subtree."
    (interactive)
    (if (use-region-p)
        (funcall-interactively #'count-words-region (region-beginning) (region-end))
      (org-with-wide-buffer
       (cl-loop for (lines words characters)
                in (org-map-entries
                    (lambda ()
                      (unpackaged/org-forward-to-entry-content 'unsafe)
                      (let ((end (org-entry-end-position)))
                        (list (count-lines (point) end)
                              (count-words (point) end)
                              (- end (point)))))
                    nil 'tree)
                sum lines into total-lines
                sum words into total-words
                sum characters into total-characters
                finally return (let ((message (format "Subtree \"%s\" has %s lines, %s words, and %s characters."
                                                      (org-get-heading t t) total-lines total-words total-characters)))
                                 (kill-new (number-to-string total-words))
                                 (message message)
                                 message)))))

  ;; Note that there exists `org-back-to-heading', possibly making the below redundant or inferior
  (defun ps/org-jump-to-beginning-of-heading ()
    "Move to the beginning of heading at point."
    (interactive)
    (if visual-line-mode
        (progn
          (visual-line-mode -1)
          (setq visual-line-mode-toggle t)))
    (when (org-at-heading-p)
      (next-line))
    (org-previous-visible-heading 1)
    (if visual-line-mode-toggle
        (visual-line-mode)))

  (defun ps/org-move-subtree ()
    "Move subtree at point to separate file. If parent heading is
'Parent heading', file will be named `parent-heading.org'."
    (interactive)
    (ps/org-jump-to-beginning-of-heading)
    (let* ((name (ps/org-copy-heading-name))
           ;; TODO: expand regular expression so that it reflects the transformation used by the EA Wiki
           (filename (expand-file-name
                      (concat (ps/org-wiki-slug name) ".org")
                      ps/dir-people)))
      (org-cut-subtree)
      (find-file-other-window filename)
      (let ((subtree (replace-regexp-in-string "^\\*+" "*" (current-kill 0))))
        (insert (concat "#+title: " name "\n\n" subtree)))
      (ps/org-jump-to-beginning-of-heading)
      (ps/switch-to-last-window)))

  (defun ps/org-jump-to-first-heading ()
    "Move point to the beginning of the first org heading in the
current buffer."
    (interactive)
    (widen)
    (goto-char (point-min))
    (org-next-visible-heading 1))

  ;; This tweaked command calls `ps/org-cycle-global' instead.
  ;; [2022-06-19 Sun] No longer using `ps/org-cycle-global' so this
  ;; command isn't used either.
  (defun ps/org-shifttab (&optional arg)
    "Global visibility cycling or move to previous table field.
Call `org-table-previous-field' within a table.
When ARG is nil, cycle globally through visibility states.
When ARG is a numeric prefix, show contents of this level."
    (interactive "P")
    (cond
     ((org-at-table-p) (call-interactively 'org-table-previous-field))
     ((integerp arg)
      (let ((arg2 (if org-odd-levels-only (1- (* 2 arg)) arg)))
        (message "Content view to level: %d" arg)
        (org-cycle-content (prefix-numeric-value arg2))
        (org-cycle-show-empty-lines t)
        (setq org-cycle-global-status 'overview)
        (run-hook-with-args 'org-cycle-hook 'overview)))
     (t (call-interactively 'ps/org-cycle-global))))

  (defun ps/org-super-return (&optional indent arg interactive)
    "When `org-return-follows-link' is non-nil and point is on a
link, call `org-open-at-point' and set
`browse-url-browser-function' to `eww-browse-url'"
    (interactive "P")
    (let ((browse-url-browser-function 'eww-browse-url)
          (browse-url-handlers nil))
      (org-open-at-point)))

  (defun ps/backward-org-transpose-element ()
    "Transpose current and previous elements, keeping blank lines between.
Point is moved after both elements."
    (interactive)
    (org-skip-whitespace)
    (let ((end (org-element-property :end (org-element-at-point))))
      (org-drag-element-forward)
      (goto-char end)))

  (defun ps/org-clear-heading-contents (&optional include-children include-properties)
    "Remove contents in org heading at point."
    (interactive)
    (save-restriction
      (if include-children
          (ps/org-narrow-to-entry-and-children)
        (ps/org-narrow-to-entry-no-children))
      (org-back-to-heading)
      (if include-properties
          (forward-line)
        (org-end-of-meta-data t))
      (delete-region (point) (point-max))))

  (defun ps/org-paste-html ()
    "Take the contents of the system clipboard and use `pandoc' to
convert it to `org-mode' format."
    (interactive)
    (let* ((clipboard (if (eq system-type 'darwin)
                          "pbv public.html"
                        "xclip -out -selection 'clipboard' -t text/html"))
           (pandoc (concat "pandoc --wrap=none -f html -t org"))
           (cmd (concat clipboard " | " pandoc))
           (output (shell-command-to-string cmd))
           ;; Not sure why Pandoc adds these double slashes; we remove them
           (output (replace-regexp-in-string "^\\\\\\\\$" "" output))
           (text (replace-regexp-in-string "= " "= " output)))
      (kill-new text)
      (yank)))

  (defun ps/org-paste-image ()
    "Take the contents of the system clipboard and paste it as an
image."
  (interactive)
  (if (executable-find "pngpaste")
      (let* ((counter 1)
             (image-file (concat
                          ps/dir-org-images
                          (org-id-get nil 'create)
                          (format "-%d.png" counter))))
        (while (file-exists-p image-file)
          (setq counter (1+ counter))
          (setq image-file (concat
                            ps/dir-org-images
                            (org-id-get nil 'create)
                            (format "-%d.png" counter))))
        (call-process-shell-command (format "pngpaste '%s'" image-file))
        (let ((caption (read-string "Caption: ")))
          (unless (string= caption "")
            (insert (format "#+CAPTION: %s \n" caption))))
        (insert (format "[[file:%s]]" image-file))
        (org-display-inline-images)
        (message "You can toggle inline images with C-c C-x C-v"))
    (user-error "Requires pngpaste in PATH")))

  :general
  (org-mode-map
   "<S-left>" nil
   "<S-right>" nil
   "<S-up>" nil
   "<S-down>" nil
   "<M-left>" nil
   "<M-right>" nil
   "<M-S-left>" nil
   "<M-S-right>" nil
   "<M-up>" nil
   "<M-down>" nil
   "C-j" nil
   "<backtab>" 'org-shifttab
   "s-<return>" 'ps/org-super-return
   "C-k" nil
   "C-," nil
   "A-C-s-i" 'org-backward-sentence
   "A-C-s-o" 'org-forward-sentence
   "A-C-s-," 'org-backward-paragraph
   "A-C-s-." 'org-forward-paragraph ; org element?
   "A-C-s-m" 'org-beginning-of-line
   "A-C-s-z" 'org-end-of-line ; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
   "A-C-s-r" 'org-previous-visible-heading
   "A-C-s-f" 'org-next-visible-heading
   "A-C-s-n" 'ps/org-jump-to-beginning-of-heading ; move to beginning of heading
   "A-C-s-M-m" 'org-previous-block
   "A-C-s-M-/" 'org-next-block
   "A-H-M-t" 'org-transpose-element
   "H-s-o" 'org-open-at-point
   "A-C-s-n" 'ps/org-jump-to-first-heading
   "s-A-b" 'ps/org-set-todo-properties
   "s-d" 'org-deadline
   "s-e" 'org-set-effort
   "s-f" 'org-insert-todo-subheading
   "s-A-f" 'ps/org-insert-todo-subheading-after-body
   "s-h" 'ps/org-copy-heading-name
   "s-A-h" 'ps/org-copy-heading-contents
   "s-p" 'org-time-stamp-inactive
   "s-A-p" 'org-time-stamp
   "s-q" 'org-set-tags-command
   "s-A-s" 'org-schedule
   ;; "s-A-s" 'ps/org-isearch-visible-org-heading
   "s-t" 'org-todo
   "s-A-t" 'org-sort
   "s-v" 'ps/org-paste-html
   "s-A-v" 'ps/org-paste-image
   "s-y" 'org-evaluate-time-range
   "s-A-y" 'ps/org-open-at-point-with-eww
   "s-z" 'org-edit-special
   "s-A-z" 'ps/org-export-to-ea-wiki
   "s-," 'org-priority
   "A-<return>" "C-u M-<return>"
   "A-M-<return>" 'org-insert-todo-heading
   ;; bindings with matching commands in Fundamental mode
   "H-v" 'org-yank
   "M-w" 'ps/org-count-words)
  (org-agenda-mode-map
   "s-s" 'org-save-all-org-buffers))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       40506BF5-AB78-4109-AA1D-717739B92591
:END:
**** DONE Create command to turn subtree at point into separate file
CLOSED: [2021-12-03 Fri 13:23]
:PROPERTIES:
:ID:       E73D25D7-6530-4DA5-852E-5C210568793C
:ARCHIVE_TIME: 2021-12-03 Fri 13:23
:END:
:LOGBOOK:
CLOCK: [2021-12-03 Fri 12:35]--[2021-12-03 Fri 13:27] =>  0:52
:END:
The command is ~ps/org-move-subtree~.
**** DONE [#6] Improve the appearance of org-mode
CLOSED: [2021-11-18 Thu 18:27]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2021-11-18 Thu 18:27
:ID:       764E0F1C-DE1B-47AB-B462-CCC80F003AF7
:END:
:LOGBOOK:
CLOCK: [2021-08-19 Thu 14:31]--[2021-08-19 Thu 14:57] =>  0:26
:END:
https://zzamboni.org/post/beautifying-org-mode-in-emacs/
If you have problems, maybe see [[https://emacs.stackexchange.com/questions/62987/cannot-set-correct-size-for-variable-pitch-font-in-doom-emacs][this]].
**** DONE Create shortcut to jump to first heading
CLOSED: [2022-05-01 Sun 22:23]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-01 Sun 22:23
:ID:       AEFF2B8B-A5E7-4F09-9FC6-666399495668
:END:
:LOGBOOK:
CLOCK: [2022-05-01 Sun 21:30]--[2022-05-01 Sun 22:22] =>  0:52
:END:
**** CANCELLED [#7] Figure out how to properly align tags
CLOSED: [2022-10-03 Mon 22:37]
:PROPERTIES:
:Effort:   0:30
:ID:       B5667A0C-C318-43C6-9B96-FE5BDD9D8356
:ARCHIVE_TIME: 2022-10-03 Mon 22:37
:END:
I have commented out some hooks I had for this purpose, because they were inserting excessive spaces.

** org-agenda
:PROPERTIES:
:ID:       E03F4142-C90D-4550-8990-15391E27AD77
:END:
:LOGBOOK:
CLOCK: [2022-10-10 Mon 21:40]--[2022-10-11 Tue 00:16] =>  2:36
CLOCK: [2022-07-17 Sun 08:31]--[2022-07-17 Sun 08:54] =>  0:23
CLOCK: [2022-06-25 Sat 11:09]--[2022-06-25 Sat 11:36] =>  0:27
CLOCK: [2022-05-07 Sat 16:16]--[2022-05-07 Sat 17:18] =>  1:02
CLOCK: [2022-05-06 Fri 18:00]--[2022-05-06 Fri 18:12] =>  0:12
CLOCK: [2021-11-18 Thu 12:38]--[2021-11-18 Thu 12:46] =>  0:08
CLOCK: [2021-10-20 Wed 21:01]--[2021-10-20 Wed 21:04] =>  0:03
CLOCK: [2021-08-01 Sun 22:46]--[2021-08-01 Sun 23:25] =>  0:39
CLOCK: [2021-08-01 Sun 18:03]--[2021-08-01 Sun 18:16] =>  0:13
CLOCK: [2021-07-25 Sun 13:03]--[2021-07-25 Sun 13:04] =>  0:01
CLOCK: [2021-07-13 Tue 15:23]--[2021-07-13 Tue 15:27] =>  0:04
CLOCK: [2021-07-13 Tue 09:19]--[2021-07-13 Tue 09:27] =>  0:08
CLOCK: [2021-07-05 Mon 09:48]--[2021-07-05 Mon 11:27] =>  1:39
CLOCK: [2021-07-04 Sun 19:44]--[2021-07-04 Sun 19:54] =>  0:10
CLOCK: [2021-06-30 Wed 13:24]--[2021-06-30 Wed 14:24] =>  1:00
CLOCK: [2021-06-30 Wed 12:26]--[2021-06-30 Wed 13:16] =>  0:20
CLOCK: [2021-06-28 Mon 22:25]--[2021-06-28 Mon 22:58] =>  0:33
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-24 Sat 18:53]--[2021-04-24 Sat 18:55] =>  0:02
CLOCK: [2021-04-24 Sat 12:39]--[2021-04-24 Sat 12:47] =>  0:08
CLOCK: [2021-04-02 Fri 17:47]--[2021-04-02 Fri 17:50] =>  0:03
CLOCK: [2021-03-07 Sun 17:45]--[2021-03-07 Sun 17:56] =>  0:11
CLOCK: [2021-02-03 Wed 21:01]--[2021-02-03 Wed 21:07] =>  0:06
CLOCK: [2021-05-12 Wed 17:50]--[2021-05-12 Wed 18:04] =>  0:14
CLOCK: [2021-04-05 Mon 08:26]--[2021-04-05 Mon 08:34] =>  0:08
CLOCK: [2021-04-08 Thu 22:36]--[2021-04-08 Thu 22:36] =>  0:00
CLOCK: [2021-06-25 Fri 15:05]--[2021-06-25 Fri 15:08] =>  0:03
CLOCK: [2021-04-07 Wed 16:25]--[2021-04-07 Wed 16:41] =>  0:16
CLOCK: [2021-04-06 Tue 21:19]--[2021-04-06 Tue 21:31] =>  0:12
CLOCK: [2021-03-11 Thu 19:18]--[2021-03-11 Thu 19:27] =>  0:09
CLOCK: [2021-03-07 Sun 16:07]--[2021-03-07 Sun 16:41] =>  0:34
CLOCK: [2021-02-27 Sat 13:40]--[2021-02-27 Sat 13:59] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-agenda
  :if (equal (system-name) ps/computer-hostname-pablo)
  :defer 4
  :init
  (defun ps/org-agenda-switch-to-agenda-current-day ()
    "Open agenda in left window, creating it if necessary."
    (interactive)
    (ps/window-split-if-unsplit)
    (winum-select-window-1)
    (let ((agenda "*Org Agenda(a)*"))
      (if (get-buffer agenda)
          (switch-to-buffer "*Org Agenda(a)*")
        (org-agenda nil "a"))))

  :custom
  (org-agenda-files `(,ps/dir-android))
  (org-agenda-window-setup 'current-window)
  (org-agenda-use-time-grid nil) ; disable agenda time grid
  ;; Speed up agenda (orgmode.org/worg/agenda-optimization.html)
  (org-agenda-ignore-properties '(effort appt category))
  (org-agenda-dim-blocked-tasks nil)
  (org-agenda-sticky t)
  (org-agenda-todo-ignore-with-date t)       ; exclude tasks with a date.
  (org-agenda-todo-ignore-scheduled 'future) ; exclude scheduled tasks.
  (org-agenda-restore-windows-after-quit t)  ; don't destroy window splits
  (org-deadline-warning-days 0)              ; show due tasks only on the day the tasks are due
  (org-agenda-span 1)                        ; show daily view by default
  (org-agenda-include-diary nil)               ; show holidays
  (org-agenda-clock-consistency-checks       ; highlight gaps of five or more minutes in agenda log mode
   '(:max-duration "5:00" :min-duration "0:01" :max-gap 5 :gap-ok-around ("2:00")))
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)       ; exclude DONE tasks from agenda
  (org-agenda-log-mode-items '(clock))
  (org-agenda-custom-commands
   '(
     ("E" "TODOs without effort"
      ((org-ql-block '(and (todo)
                           (not (property "effort")))
                     ((org-ql-block-header "TODOs without effort")))))
     ("w" "Weekly review"
      agenda ""
      ((org-agenda-clockreport-mode t)
       (org-agenda-archives-mode t)
       (org-agenda-start-day "-7d")
       (org-agenda-span 7)
       (org-agenda-start-on-weekday 0)))
     ("p" "Appointments" agenda* "Today's appointments"
      ((org-agenda-span 1)
       (org-agenda-max-entries 3)))
     ("r"
      "Reading list"
      tags
      "PRIORITY=\"1\"|PRIORITY=\"2\"|PRIORITY=\"3\"|PRIORITY=\"4\"|PRIORITY=\"5\"|PRIORITY=\"6\"|PRIORITY=\"7\"|PRIORITY=\"8\"|PRIORITY=\"9\""
      ((org-agenda-files (list ps/dir-bibliographic-notes))))
     ("g" "All TODOs"
      todo "TODO")
     ("," "All tasks with no priority"
      tags-todo "-PRIORITY=\"1\"-PRIORITY=\"2\"-PRIORITY=\"3\"-PRIORITY=\"4\"-PRIORITY=\"5\"-PRIORITY=\"6\"-PRIORITY=\"7\"-PRIORITY=\"8\"-PRIORITY=\"9\"")))
  (org-agenda-clockreport-parameter-plist
   (quote (:link t :maxlevel 5 :fileskip0 t :narrow 70 :formula % :indent t :formatter ps/org-clocktable-sorter)))

  (org-agenda-hide-tags-regexp "project")

  :config
  (defvar ps/org-agenda-files-excluded
    `(,ps/file-tareas-leo
      ,ps/file-tareas-fede)
    "List of files to remove from `org-agenda-files'")

  (defun ps/org-agenda-goto-and-start-clock ()
    "In org-agenda, go to entry at point and clock in."
    (interactive)
    (org-agenda-goto)
    (org-clock-in))

  (run-with-idle-timer 602 nil 'ps/org-agenda-switch-to-agenda-current-day)
  (run-with-idle-timer 602 t 'org-agenda-redo)

  (defun ps/org-clocktable-sorter (ipos tables params)
    (setq tables (cl-sort tables (lambda (table1 table2) (> (nth 1 table1) (nth 1 table2)))))
    (funcall (or org-clock-clocktable-formatter 'org-clocktable-write-default) ipos tables params))

  (advice-add 'org-agenda-goto :after
              (lambda (&rest args)
                (ps/org-narrow-to-entry-and-children)))

  (setq org-agenda-archives-mode 'trees) ; this variable is non-customizable, so won't work in `:custom'

  (defun ps/org-agenda-done-and-next ()
    "Temporary command to address bug when setting status via
`org-agenda-todo'."
    (interactive)
    (org-agenda-goto)
    (org-todo "DONE")
    (ps/org-agenda-switch-to-agenda-current-day)
    (org-agenda-next-line))

  (defun ps/org-agenda-postpone-and-next ()
    "Postpone task at point by one day and move to next task."
    (interactive)
    (org-agenda-date-later 1)
    (org-agenda-next-line))

  (defun ps/org-unhighlight ()
    "Interactive version of `org-unhighlight'."
    (interactive)
    (org-unhighlight))

  ;; Replace native function with variant that doesn't ask the user
  ;; multiple times to remove non-existent agenda file
  (defun ps/org-check-agenda-file (file)
    "Make sure FILE exists.  If not, ask user what to do."
    (unless (file-exists-p file)
      (org-remove-file file)
      (throw 'nextfile t)))

  (advice-add 'org-check-agenda-file :override #'ps/org-check-agenda-file)

  ;; We add these two advices because `org-modern-mode' interferes
  ;; with the display of the habits progress bar
  (advice-add 'org-habit-toggle-display-in-agenda :before
              (lambda (arg)
                (if org-habit-show-habits
                    (global-org-modern-mode)
                  (global-org-modern-mode -1))))
  (advice-add 'org-habit-toggle-display-in-agenda :after
              (lambda (arg)
                (org-agenda-redo)
                (global-org-modern-mode)))

  :hook
  (org-agenda-mode-hook . (lambda ()
                            (visual-line-mode -1)
                            (toggle-truncate-lines 1)))
  :general
  ("C-<escape>" 'org-agenda)
  (org-agenda-mode-map
   "'" 'ps/org-agenda-done-and-next
   ";" 'org-agenda-later
   "\"" 'ps/org-agenda-postpone-and-next
   "C-b" 'org-agenda-tree-to-indirect-buffer
   "C-k" nil
   "d" 'org-agenda-deadline
   "h" 'org-habit-toggle-display-in-agenda
   "M-t" nil
   "H-n" nil
   "s-k" nil
   "i" 'org-agenda-clock-in
   "I" 'org-agenda-diary-entry
   "j" 'org-agenda-earlier
   "J" 'org-agenda-goto-date
   "k" 'org-agenda-previous-line
   "l" 'org-agenda-next-line
   "n" 'org-agenda-date-later
   "o" 'org-agenda-open-link
   "p" 'org-agenda-date-earlier
   "q" 'org-agenda-kill-all-agenda-buffers
   "s" 'org-agenda-schedule
   "SPC" 'ps/org-agenda-goto-and-start-clock
   "W" 'org-agenda-refile
   "X" 'org-agenda-exit
   "x" 'org-agenda-log-mode
   "y" 'org-agenda-day-view
   "Z" 'org-agenda-add-note
   "z" 'org-agenda-undo))
#+end_src
*** TODO [#6] align tags
:PROPERTIES:
:ID:       8F2D8B6E-2B3E-434E-9D60-5A1E23F8E4C1
:END:
*** TODO [#4] Find way to represent day agenda visually as a series of 30-minute blocks
:PROPERTIES:
:Effort:   0:40
:ID:       48717679-CF3D-475E-BCB6-87CAD939941F
:END:
Similar to Google Calendar.
*** SOMEDAY [#4] Show agenda task in different color if it recurs
:PROPERTIES:
:Effort:   0:45
:ID:       8ED37C79-AA82-4C08-BD01-335408F06DB7
:END:
:LOGBOOK:
CLOCK: [2021-06-16 Wed 17:37]--[2021-06-16 Wed 17:55] =>  0:18
:END:
:STATES:
- Not scheduled, was "[2021-06-26 Sat 17:30-18:00]" on [2021-06-25 Fri 23:01]
- Rescheduled from "[2021-06-20 Sun 17:30-18:00]" on [2021-06-19 Sat 22:03]
- Rescheduled from "[2021-06-16 Wed 17:30-18:00]" on [2021-06-16 Wed 18:02]
- Rescheduled from "[2021-06-16 Wed]" on [2021-06-15 Tue 22:51]
:END:
To discover how to do this, use the ~customize~ command.

Posted a question to [[https://emacs.stackexchange.com/questions/66343/in-org-agenda-show-repeating-tasks-in-a-different-color][Stack Exchange]].

[2021-06-25 Fri 23:00] Since no one replied by now, it's unlikely anyone will reply anytime soon. Marking as SOMEDAY and removing scheduling.

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       AF09A036-FF55-41C8-B356-F25D5CA4AB0B
:END:
**** DONE Define custom agenda views using org-ql
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-04 Sun 22:47
:ID:       9132D0E3-91D5-4B8E-BF17-A019FC97DB24
:END:
:LOGBOOK:
CLOCK: [2021-04-04 Sun 18:22]--[2021-04-04 Sun 19:25] =>  1:03
CLOCK: [2021-04-02 Fri 16:33]--[2021-04-02 Fri 16:45] =>  0:12
CLOCK: [2021-04-02 Fri 16:10]--[2021-04-02 Fri 16:24] =>  0:14
CLOCK: [2021-03-02 Tue 20:50]--[2021-03-02 Tue 21:01] =>  0:03
:END:
Define custom view for weekly review.
https://github.com/alphapapa/org-ql
[[https://github.com/alphapapa/org-ql/issues/8][This]] may explain how to do it.

**** CANCELLED Try org-weather
CLOSED: [2021-06-30 Wed 21:02]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-30 Wed 21:02
:ID:       9E0DE012-7639-4E7E-B777-65FE4E0B1B09
:END:
https://github.com/kautsig/org-weather
**** DONE [#4] Highlight calendar entries from agenda
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-10-06 Wed 12:03
:ID:       416B202F-5BA7-4865-B45B-2B76E73BAF78
:END:
Solved by modifying ~org-gcal~ native function to recognize date set by ~org-deadline~.
**** DONE [#6] Diagnose problem when moving some of the ~setq~ declarations to the ~:custom~ section
CLOSED: [2021-11-18 Thu 18:28]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-11-18 Thu 18:28
:ID:       540FE502-8A52-44BD-B810-BDE2D851C5C2
:END:
Problem is that ~org-indent-mode~ ceases to work.

I think the culprit is ~org-agenda-inhibit-startup~. The problem disappeared when I commented away the line which set it to ~t~.

**** DONE Fix ~org-agenda-files~ specification
CLOSED: [2021-12-02 Thu 16:46]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-02 Thu 16:47
:ID:       174F5360-16E9-4504-A7EB-243E48EF63D4
:END:
:LOGBOOK:
CLOCK: [2021-12-02 Thu 16:27]--[2021-12-02 Thu 16:46] =>  0:19
:END:
**** DONE Create key binding for global agenda
CLOSED: [2022-01-03 Mon 22:54]
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-11 Fri 14:14
:ID:       98ABA812-41FB-463A-876B-3974D05461BF
:END:
:LOGBOOK:
CLOCK: [2022-01-03 Mon 21:49]--[2022-01-03 Mon 22:16] =>  0:27
:END:
**** DONE [#6] remove ~project~ tag from agenda view
CLOSED: [2022-12-19 Mon 08:52]
:PROPERTIES:
:ID:       1097ADCA-5DF0-40F2-9FF9-D8E44946CE66
:ARCHIVE_TIME: 2022-12-19 Mon 08:52
:END:
:LOGBOOK:
CLOCK: [2022-12-19 Mon 08:50]--[2022-12-19 Mon 08:52] =>  0:02
:END:
Easy: ~(org-agenda-hide-tags-regexp "project")~
**** DONE [#5] Exclude Fede and Leo ~tareas.org~ files from ~org-agenda~
CLOSED: [2022-12-19 Mon 09:22]
:PROPERTIES:
:ID:       7512BCCE-B29A-4CB3-8B6B-A8C63E3407CD
:ARCHIVE_TIME: 2022-12-19 Mon 09:22
:END:
Added the final line to this function:

#+begin_src emacs-lisp :results silent :tangle no
(defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files
          (seq-difference
           (delete-dups (append
                         (org-agenda-files)
                         (vulpea-project-files)
                         ;; include files modified in past three days,
                         ;; provided number of such files less than 1000
                         (ps/org-roam-recent 1 1000)))
           ps/org-agenda-files-excluded)))
#+end_src

**** DONE [#5] Create command to show all and only bibliographic notes in agenda
CLOSED: [2022-12-21 Wed 00:14]
:PROPERTIES:
:ID:       D3067042-7F51-4115-9B24-EC347739E033
:Effort:   0:50
:ARCHIVE_TIME: 2022-12-21 Wed 00:14
:END:
This would let me sort headings by priority.
It could be an ~org-agenda~ call wrapped around a ~let~ declaration for ~org-agenda-files~.
**** DONE [#5] Add to agenda all files with dates like this
CLOSED: [2022-12-21 Wed 00:14]
:PROPERTIES:
:Effort:   0:30
:ID:       6F93BBA0-ABCC-4926-B44F-C3AA57206655
:ARCHIVE_TIME: 2022-12-21 Wed 00:14
:END:
%%(diary-float 10 0 3) Mother's day
** org-capture
:PROPERTIES:
:ID:       14F93A83-0BE7-42E3-891E-F6806192296B
:END:
:LOGBOOK:
CLOCK: [2022-07-05 Tue 16:58]--[2022-07-05 Tue 17:10] =>  0:12
CLOCK: [2022-06-13 Mon 14:45]--[2022-06-13 Mon 15:00] =>  0:15
CLOCK: [2022-06-11 Sat 13:40]--[2022-06-11 Sat 14:03] =>  0:23
CLOCK: [2022-06-11 Sat 13:19]--[2022-06-11 Sat 13:25] =>  0:06
CLOCK: [2022-06-03 Fri 15:31]--[2022-06-03 Fri 15:51] =>  0:20
CLOCK: [2022-05-28 Sat 17:00]--[2022-05-28 Sat 18:42] =>  1:42
CLOCK: [2022-04-29 Fri 19:46]--[2022-04-29 Fri 20:27] =>  0:41
CLOCK: [2022-04-29 Fri 18:14]--[2022-04-29 Fri 18:24] =>  0:10
CLOCK: [2021-12-03 Fri 19:43]--[2021-12-03 Fri 19:50] =>  0:07
CLOCK: [2021-11-18 Thu 18:28]--[2021-11-18 Thu 18:45] =>  0:17
CLOCK: [2021-08-23 Mon 11:19]--[2021-08-23 Mon 11:22] =>  0:03
CLOCK: [2021-08-20 Fri 14:15]--[2021-08-20 Fri 14:18] =>  0:03
CLOCK: [2021-08-19 Thu 11:04]--[2021-08-19 Thu 11:12] =>  0:08
CLOCK: [2021-08-17 Tue 15:13]--[2021-08-17 Tue 15:36] =>  0:23
CLOCK: [2021-08-17 Tue 14:11]--[2021-08-17 Tue 14:41] =>  0:30
CLOCK: [2021-08-13 Fri 09:09]--[2021-08-13 Fri 09:30] =>  0:21
CLOCK: [2021-07-09 Fri 11:00]--[2021-07-09 Fri 11:10] =>  0:10
CLOCK: [2021-07-09 Fri 10:32]--[2021-07-09 Fri 10:37] =>  0:05
CLOCK: [2021-06-25 Fri 17:37]--[2021-06-25 Fri 17:54] =>  0:17
CLOCK: [2021-06-07 Mon 19:14]--[2021-06-07 Mon 19:20] =>  0:06
CLOCK: [2021-05-22 Sat 18:48]--[2021-05-22 Sat 19:15] =>  0:27
CLOCK: [2021-05-05 Wed 16:03]--[2021-05-05 Wed 16:07] =>  0:04
CLOCK: [2021-04-23 Fri 22:04]--[2021-04-23 Fri 22:32] =>  0:28
CLOCK: [2021-04-12 Mon 22:01]--[2021-04-12 Mon 22:11] =>  0:10
CLOCK: [2021-04-11 Sun 16:27]--[2021-04-11 Sun 17:05] =>  0:38
CLOCK: [2021-04-02 Fri 08:30]--[2021-04-02 Fri 09:00] =>  0:30
CLOCK: [2021-03-28 Sun 18:20]--[2021-03-28 Sun 18:27] =>  0:07
CLOCK: [2021-03-28 Sun 18:18]--[2021-03-28 Sun 18:19] =>  0:01
CLOCK: [2021-03-06 Sat 20:36]--[2021-03-06 Sat 20:46] =>  0:10
CLOCK: [2021-03-02 Tue 12:39]--[2021-03-02 Tue 12:48] =>  0:09
CLOCK: [2021-03-01 Mon 10:46]--[2021-03-01 Mon 10:50] =>  0:09
CLOCK: [2021-02-27 Sat 08:20]--[2021-02-27 Sat 08:26] =>  0:06
CLOCK: [2021-02-21 Sun 19:14]--[2021-02-21 Sun 20:04] =>  0:50
CLOCK: [2021-02-19 Fri 11:11]--[2021-02-19 Fri 11:21] =>  0:10
CLOCK: [2021-02-09 Tue 09:37]--[2021-02-09 Tue 09:42] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-capture
  :defer 10
  :custom
  (org-default-notes-file ps/file-inbox-desktop)
  (org-capture-templates
   `(("a" "Entry: add" entry
      (id "6E725763-8B53-43EC-9197-C0FE7468328D")
      "*** %(ps/org-web-tools-insert-title-for-clipboard-url-ea-forum)\nSCHEDULED: %(org-insert-time-stamp nil nil nil nil nil \" .+1d\")\n[[%c][online entry]]\n\nwber%?" :empty-lines 1 :prepend t)
     ("b" "Library" entry
      (id "ABE4DDD1-8107-487A-B09F-2FE7466D23DA")
      "* %?\n" :prepend t)
     ("c" "calendar" entry
      (file ps/file-calendar)
      "* TODO %^ \nDEADLINE: %^T" :immediate-finish t)
     ("d" "Entry: discuss" entry
      (id "AE09BAB8-5EA0-4CB0-AC5A-FF876CB9ABC5")
      "**** TODO Discuss %(ps/org-web-tools-insert-link-for-clipboard-url-ea-forum)\nSCHEDULED: %(org-insert-time-stamp nil nil nil nil nil \" .+1d\")" :empty-lines 1 :prepend t)
     ("e" "email" entry
      (file ps/file-inbox-desktop)
      "* TODO Follow up with %:fromname on %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ("f" "Fede")
     ("ff" "Fede: generic task" entry
      (file+headline ps/file-tareas-fede "Tareas Fede")
      "** TODO [#6] %? :fede:\n" :empty-lines 1 :prepend t)
     ("fp" "Fede: Pending for next meeting" plain
      (id "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1")
      "" :empty-lines 1 :empty-lines-after 3)
      ("fr" "Fede: RAE suggestion" entry
      (file+headline ps/file-tareas-fede "sugerencias de Pablo")
      "** TODO [#6] %? :fede:\n" :empty-lines 1 :prepend t)
     ("g" "Ledger" plain (file ps/file-ledger)
      "" :empty-lines 1)
     ("l" "Leo")
     ("la" "Leo: Process article" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#5] Procesar :leo:\n" :immediate-finish t :empty-lines 1 :prepend t)
     ("lb" "Leo: Add to ea.news" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#6] Agregar a ea.news :leo:\n%c" :empty-lines 1 :prepend t)
     ("le" "Leo: Rename article" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#5] Renombrar ~%?~ :leo:\n" :empty-lines 1 :prepend t)
     ("ll" "Leo: Generic task" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
     ("lm" "Leo: Meetings" entry
      (id "51610BEB-7583-4C84-8FC2-A3B28CA79FAB")
      "** %(ps/org-time-stamp-inactive-current-time)\n%?")
     ("ln" "Leo: Add to Future Matters: news" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#4] Future Matters: news :leo:\n%c\n[[https://docs.google.com/document/d/1Mq7f0sn6Ps1IIA71dTu0MCgz8cdn81zQ9_zHyZUn7aQ/edit][Checklist]]" :empty-lines 1 :prepend t)
     ("lp" "Leo: Pending for next meeting" plain
      (id "8B2F18B4-A309-4F29-A5E6-CD40E010970D")
      "" :empty-lines 1 :empty-lines-after 3)
     ("lr" "Leo: Add to Future Matters: research" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#4] Future Matters: research :leo:\n%c\n[[https://docs.google.com/document/d/1Mq7f0sn6Ps1IIA71dTu0MCgz8cdn81zQ9_zHyZUn7aQ/edit][Checklist]]" :empty-lines 1 :prepend t)
     ("lt" "Leo: Add to translations spreadsheet" entry
      (file+headline ps/file-tareas-leo "Tareas Leo")
      "** TODO [#4] Add to translation master file :leo:\n%c\n[[https://docs.google.com/spreadsheets/d/1YpqWK2Vpxwc_JuCf7isjwpdCQ_7_NRAY/edit#gid=2099842495][spreadsheet]]" :empty-lines 1 :prepend t)
     ;; ("lt" "Leo: Telegram" entry
      ;; (file+headline ps/file-tareas-leo "Tareas Leo")
      ;; "** TODO [#6] [via Telegram] %? \n%a\n%c'" :empty-lines 1 :prepend t)
     ("m" "Leo: Messaging (to send later)" entry
      (file ps/file-inbox-desktop)
      "* TODO Send message\n%?\n")
     ("n" "telegram" entry
      (file ps/file-inbox-desktop)
      "* TODO Follow up %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ;; ("m" "To discuss in meeting with Leo" plain
     ;; (id "3AAD2510-0522-4598-9182-50E97504EAF6")
     ;; "- [ ] %?" :empty-lines 1)
     ("r" "bibliography reference" plain
      (file ,ps/file-orb-noter-template)
      :if-new
      (file ,ps/file-orb-capture-template)
      :unnarrowed t :immediate-finish t)
     ("s" "Slack" entry
      (file ps/file-inbox-desktop)
      "* TODO Follow up %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ("t" "Todo" entry
      (file ps/file-inbox-desktop)
      "** TODO %?\n")
     ;; ("n" "Day reflection" plain (function org-journal-find-location)
     ;; "** %(format-time-string org-journal-time-format)Day reflection\n%i%?")
     ;; ("j" "Pomodoro" plain (function org-journal-find-location)
     ;; "** %(format-time-string org-journal-time-format)Pomodoro\n%i%?")
     ;; ("v" "Entry: revise" entry
     ;; (function
     ;; (lambda ()
     ;; (let ((filename (file-name-concat ps/dir-wiki-entries (current-kill 0))))
     ;; (set-buffer (find-file-noselect filename))
     ;; (pop kill-ring)
     ;; (goto-char (point-max)))))
     ;; "* TODO Revise entry \nSCHEDULED: %(org-insert-time-stamp nil nil nil nil nil \" .+1d\")")
     ("y" "YouTube playlist" entry
      (id "319B1611-A5A6-42C8-923F-884A354333F9")
      "* %(ps/org-web-tools--youtube-dl (current-kill 0))\n[[%c][YouTube link]]" :empty-lines 1 :prepend t :immediate-finish t)
     ;; github.com/alphapapa/org-protocol-capture-html#org-capture-template
     ("w" "Web site" entry
      (file ps/file-downloadsk)
      "* %a :website:\n\n%U %?\n\n%:initial")))
  ;; ("w" "Film watchlist" entry
  ;; (id "E821F19E-C619-4895-A084-54D0A2772BAE")
  ;; "** %?\n" :empty-lines 1 :prepend t)))
  ;; ("W" "Weekly review" plain (function org-journal-find-location)
  ;; "** %(format-time-string org-journal-time-format)Weekly review\n*** Mistakes made\n%?\n*** Lessons learned\n")
  ;; ("z" "mailnote" entry
  ;; (id "0D266C71-41B8-4E14-836E-AABE2654E942")
  ;; "** From: %:from Subject: %:subject\n %a" :kill-buffer t)
  ;; ("p" "Pomodoro entry" plain (function org-journal-find-location)
  ;; "** %(format-time-string org-journal-time-format)Pomodoro\n%i%?")

  :config
  (defun ps/org-capture-hydra-notes-hook ()
    (when (string= (org-capture-get :key t) "p")
      (hydra-org-notes-only-clock/body)))

  (defun ps/org-capture-prepare-finalize-hook-behavior ()
    "docstring"
    (cond
     ((string= "fm" (plist-get org-capture-plist :key))
      (save-window-excursion
        (org-id-goto "22E9B7E2-A48E-41EA-8320-64578AB6C9A1")
        (org-narrow-to-subtree)
        (ps/org-copy-heading-contents))
      (insert (current-kill 0)))))

  (defun ps/org-capture-before-finalize-hook-behavior ()
    "Define behavior of `org-capture-before-finalize-hook'
conditional on active capture template."
    (cond
     ((string= "g" (plist-get org-capture-plist :key))
      (ledger-post-align-xact (point)))
     ((string= "l" (plist-get org-capture-plist :key))
      (org-align-all-tags)
      (ispell-change-dictionary "english"))
     ((string= "la" (plist-get org-capture-plist :key))
      (save-window-excursion
        (ps/switch-to-alternate-buffer)
        (ps/org-jump-to-first-heading)
        (widen)
        (org-narrow-to-subtree)
        (let ((org-use-tag-inheritance))
          (org-roam-tag-remove '("unprocessed" "empty" "leo" "unpublished"))
          (org-roam-tag-add '("leo")))
        (ps/show-buffer-name))
      (goto-char 0)
      (search-forward "Procesar ")
      (insert (format "~%s~" (current-kill 0))))
     ((string= "le" (plist-get org-capture-plist :key))
      (save-window-excursion
        (ps/switch-to-alternate-buffer)
        (ps/show-buffer-name))
      (goto-char 0)
      (search-forward "Renombrar ")
      (insert (concat "~" (current-kill 0) "~ ")))
     ;; Add link to open Slack message externally.
     ((string= "s" (plist-get org-capture-plist :key))
      (org-narrow-to-subtree)
      (let ((url (s-replace-regexp
                  "emacs-slack:[_[:digit:][:alnum:]]\\{11\\}&\\([_[:digit:][:alnum:]]\\{11\\}\\)&ts:\\([[:digit:]]\\{10\\}\\)\\.\\([[:digit:]]\\{6\\}\\)"
                  "https://samotsvety.slack.com/archives/\\1/p\\2\\3"
                  (plist-get org-store-link-plist :link))))
        (goto-char (point-max))
        (insert (format "[[%s][external link]]" url))))
     ((string= "v" (plist-get org-capture-plist :key))
      (org-do-demote))
     ((string= "y" (plist-get org-capture-plist :key))
      (youtube-dl (current-kill 0) :directory ps/dir-downloads :destination (org-hugo-slug (ps/org-web-tools--org-title-for-url))))))


  :general
  ("H-t" 'org-capture
   "H-T" 'org-capture-goto-last-stored)
  (org-capture-mode-map
   "s-c" 'org-capture-finalize
   "s-w" 'org-capture-refile)

  :hook
  (org-capture-mode-hook . ps/org-capture-hydra-notes-hook)
  (org-capture-before-finalize-hook . ps/org-capture-before-finalize-hook-behavior)
  (org-capture-before-prepare-hook . ps/org-capture-prepare-finalize-hook-behavior))
#+end_src

Links to check out:
- [[https://github.com/sprig/org-capture-extension][GitHub - sprig/org-capture-extension: A Chrome and firefox extension facilita...]]
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][Share your Org Capture Templates! : emacs]]
- [[https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el][Org capture templates · sk8ingdom/.emacs.d · GitHub]]
- [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/][Hey Org-Mode Users, show us your org capture templates : orgmode]]. [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/gzq9h2v/?utm_source=reddit&utm_medium=web2x&context=3][this one]] has templates for capturing appointments directly to Google Calendar via org-gcal. [I've now incorporated it]
- [[https://orgmode.org/worg/org-contrib/org-collector.html][org-collector.el &#x2014; collect properties into tables]]
- potentially useful capture templates:
    - [[https://helpdeskheadesk.net/sub-menus-in-org/][Submenus in org-mode Capture · The Art of Not Asking Why]]
    - [[https://helpdeskheadesk.net/org-capture-in-files/][Org-capture in Files · The Art of Not Asking Why]]
    - [[https://helpdeskheadesk.net/org-capture-template-1/][My Org Capture Templates - Part 1 emacs: · The Art of Not Asking Why]]
    - [[https://helpdeskheadesk.net/org-capture-template-2/][My Org Capture Templates - Part 2 emacs: · The Art of Not Asking Why]]
    - [[https://helpdeskheadesk.net/org-capture-template-3/][My Org Capture Templates - Part 3 emacs:css: · The Art of Not Asking Why]]
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       32625A75-E92B-43A2-809A-4DE4C7D23C95
:END:
**** CANCELLED Once Syncthing is set up, modify capture template to create new task in inbox.org
CLOSED: [2021-03-02 Tue 18:51]
:PROPERTIES:
:ARCHIVE_TIME: 2021-03-02 Tue 22:07
:ID:       596E7C65-E28E-40A9-9196-833666E179B2
:END:
:LOGBOOK:
CLOCK: [2021-03-02 Tue 18:36]--[2021-03-02 Tue 18:51] =>  0:15
CLOCK: [2021-03-01 Mon 10:56]--[2021-03-01 Mon 11:01] =>  0:05
:END:
**** DONE [#5] Check this template for meetings
CLOSED: [2021-06-07 Mon 19:20]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-06-07 Mon 19:20
:ID:       5AFBC8F1-0B49-4A48-89D6-09B29DAEEC8A
:END:
:LOGBOOK:
CLOCK: [2021-06-07 Mon 18:48]--[2021-06-07 Mon 19:02] =>  0:14
CLOCK: [2021-06-01 Tue 20:40]--[2021-06-01 Tue 20:43] =>  0:03
:END:
https://youtu.be/bTbiC6SamT4?t=233

It uses org-gcal, so it apparently creates an appointment on Google Calendar.

[2021-06-07 Mon 19:19] I've used the similar one found on [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/gzq9h2v/?utm_source=reddit&utm_medium=web2x&context=3][Reddit]].
**** DONE Fix maddening highlighting of recent captures issue!
CLOSED: [2021-07-04 Sun 15:25]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-04 Sun 15:25
:ID:       E2139AFB-8124-40F5-B60B-D8A45E826683
:END:
:LOGBOOK:
CLOCK: [2021-06-21 Mon 11:10]--[2021-06-21 Mon 11:42] =>  0:32
:END:

Context [[id:B0F17F61-DCFB-4B33-A543-5E8793FD273D][here]].

[2021-07-04 Sun 15:25] I think this is an org feature.
**** DONE Create stress org-journal capture template
CLOSED: [2021-07-28 Wed 19:10]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-28 Wed 19:10
:ID:       36A69B58-4DEA-4C76-B2D8-80584CC77BBC
:END:
:LOGBOOK:
CLOCK: [2021-07-28 Wed 18:45]--[2021-07-28 Wed 19:10] =>  0:25
CLOCK: [2021-07-28 Wed 17:46]--[2021-07-28 Wed 18:39] =>  0:53
:END:

**** DONE [#4] Fix broken capture templates
CLOSED: [2021-07-31 Sat 12:59]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2021-07-31 Sat 12:59
:ID:       28940D57-8532-469D-8E84-52B6F8807C2C
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 12:53]--[2021-07-31 Sat 12:59] =>  0:06
:END:
- [X] Email
- [X] Leo
- [ ] Others?
**** DONE [#5] Update Wiki capture templates
CLOSED: [2022-06-08 Wed 20:13]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2022-06-08 Wed 20:13
:ID:       C81AA128-80F7-46AA-AB77-1A81856AB07E
:END:
:LOGBOOK:
CLOCK: [2021-12-07 Tue 11:01]--[2021-12-07 Tue 11:33] =>  0:32
:END:
First determine which templates need updating.
**** DONE Create ~org-journal~ meeting templates
CLOSED: [2022-09-15 Thu 13:39]
:PROPERTIES:
:ID:       DF4D8EE5-3DBA-491E-BA81-8173A43DB454
:ARCHIVE_TIME: 2022-09-15 Thu 13:39
:END:
In the end, I decided to use a regular ~org-capture~ template.

** org-clock
:PROPERTIES:
:ID:       90E8B1CE-433C-4B2B-8AA2-844506EAC031
:END:
:LOGBOOK:
CLOCK: [2022-07-06 Wed 20:26]--[2022-07-06 Wed 21:10] =>  0:44
CLOCK: [2022-06-19 Sun 10:16]--[2022-06-19 Sun 10:53] =>  0:37
CLOCK: [2022-06-13 Mon 22:33]--[2022-06-13 Mon 23:03] =>  0:30
CLOCK: [2022-03-02 Wed 18:19]--[2022-03-02 Wed 18:21] =>  0:02
CLOCK: [2021-10-24 Sun 10:55]--[2021-10-24 Sun 11:09] =>  0:14
CLOCK: [2021-08-01 Sun 18:16]--[2021-08-01 Sun 18:53] =>  0:37
CLOCK: [2021-06-23 Wed 15:48]--[2021-06-23 Wed 16:18] =>  0:30
CLOCK: [2021-06-04 Fri 21:53]--[2021-06-04 Fri 22:05] =>  0:12
CLOCK: [2021-06-04 Fri 20:53]--[2021-06-04 Fri 21:14] =>  0:21
CLOCK: [2021-05-10 Mon 22:11]--[2021-05-10 Mon 22:28] =>  0:00
CLOCK: [2021-05-02 Sun 22:09]--[2021-05-02 Sun 22:22] =>  0:13
CLOCK: [2021-04-14 Wed 18:26]--[2021-04-14 Wed 18:50] =>  0:24
CLOCK: [2021-03-29 Mon 20:57]--[2021-03-29 Mon 21:13] =>  0:16
CLOCK: [2021-03-28 Sun 20:32]--[2021-03-28 Sun 21:01] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-clock
  :defer 20
  :custom
  (org-clock-out-when-done t)
  (org-clock-persist t)
  (org-clock-persist-query-resume nil)
  (org-clock-in-resume t)
  (org-clock-report-include-clocking-task t)
  (org-clock-ask-before-exiting nil)
  :config
  (org-clock-persistence-insinuate)
  (defun ps/org-new-clock-entry-today (begin end)
    "Insert a new clock entry with today's date, prompting for times."
    (interactive "sTime begins: \nsTime ends: ")
    (ps/org-jump-to-latest-clock-entry)
    (crux-smart-open-line-above)
    (let ((today (format-time-string "%Y-%m-%d %a" (current-time))))
      (insert (concat "CLOCK: [" today " " begin "]--[" today " " end "]")))
    (org-evaluate-time-range))

  (defun ps/org-time-stamp-active-current-time ()
    "Insert an active timestamp with the current date and time."
    (interactive)
    (org-time-stamp '(16)))

  (defun ps/org-time-stamp-inactive-current-time ()
    "Insert an inactive timestamp with the current date and time."
    (interactive)
    (org-time-stamp '(16) t))

  (defun ps/org-time-stamp-active-current-date ()
    "Insert an active timestamp with the current date."
    (interactive)
    (org-insert-time-stamp (current-time) nil))

  (defun ps/org-time-stamp-inactive-current-date ()
    "Insert an inactive timestamp with the current date."
    (interactive)
    (org-insert-time-stamp (current-time) nil t))

  (defun ps/org-clone-clock-entry ()
    "Duplicate clock entry at point and set mark for editing via multiple cursors."
    (interactive)
    (crux-duplicate-current-line-or-region 1)
    (org-beginning-of-line)
    (forward-line -1)
    (let ((query "\\[\\([[:digit:]]\\)\\{4\\}-\\([[:digit:]]\\)\\{2\\}-\\([[:digit:]]\\)\\{2\\} \\w\\w\\w "))
      (search-forward-regexp query)
      (set-mark-command nil)
      (set-mark-command nil)
      (next-line)
      (search-forward-regexp query)))

  (defun ps/org-jump-to-latest-clock-entry ()
    "Jump to most recent clock entry for org heading at point."
    (interactive)
    (org-back-to-heading)
    (isearch-forward nil t)
    (isearch-yank-string "CLOCK: ")
    (isearch-exit)
    (org-beginning-of-line))

  :general
  ("A-H-j" 'org-clock-goto
   "A-H-x" 'org-clock-cancel)
  (org-mode-map
   "s-i" 'org-clock-in
   "s-o" 'org-clock-out
   "s-u" 'ps/org-clone-clock-entry
   "s-A-n" 'ps/org-new-clock-entry-today
   "s--" 'ps/org-time-stamp-active-current-time
   "s-A--" 'ps/org-time-stamp-active-current-date
   "s-=" 'ps/org-time-stamp-inactive-current-time
   "s-A-=" 'ps/org-time-stamp-inactive-current-date))
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       6A89B80F-A4F6-436E-A29D-ACDBAF084C9B
:END:
**** DONE [#6] Why does org clock not resume upon restart?
CLOSED: [2022-10-23 Sun 22:02]
:PROPERTIES:
:Effort:   0:20
:ID:       D27B1F31-22C4-4F12-BFA0-A1BD27111615
:ARCHIVE_TIME: 2022-10-23 Sun 22:02
:END:
** org-cycle
:PROPERTIES:
:ID:       AAB14053-B232-4627-8C1D-635FAE417A98
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-cycle
  :custom
  (org-cycle-emulate-tab nil "TAB always cycles, even if point not on a heading")

  :config
  (defun ps/org-cycle-global (&optional arg)
    "Cycle the global visibility, hiding archived subtrees."
    (interactive)
    (org-cycle-global arg)
    (org-cycle-hide-archived-subtrees 'all)))
#+end_src


[2022-10-04 Tue 19:05] The function below was taken from [[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode/17492723#17492723][here]] but isn't working as intended. It only completely hides the drawers when the heading at point has children. Moreover, it also completely expands the drawers when cycling globally, which is not the normal behavior.

#+begin_src emacs-lisp :results silent :tangle no
  (defun ps/org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change. STATE should be one of the symbols listed in the docstring of `org-cycle-hook'."
    (when (and (derived-mode-p 'org-mode)
               (not (memq state '(overview folded contents))))
      (save-excursion
        (let* ((globalp (memq state '(contents all)))
               (beg (if globalp
                        (point-min)
                      (point)))
               (end (if globalp
                        (point-max)
                      (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                        (org-end-of-subtree t)))))
          (goto-char beg)
          (while (re-search-forward org-drawer-regexp end t)
            (save-excursion
              (beginning-of-line 1)
              (when (looking-at org-drawer-regexp)
                (let* ((start (1- (match-beginning 0)))
                       (limit
                        (save-excursion
                          (outline-next-heading)
                          (point)))
                       (msg (format
                             (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                             (1+ start))))
                  (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                    (user-error msg))))))))))
#+end_src

** org-archive
:PROPERTIES:
:ID:       354B22B6-B3BD-409D-B04F-051D4AD87959
:END:
#+begin_src emacs-lisp :results silent
(use-feature org-archive
  :general
  (org-mode-map
   "s-a" 'org-archive-to-archive-sibling
   "s-A-a" 'org-archive-subtree))
#+end_src
*** TODO [#6] Process archives ~org/archive~
:PROPERTIES:
:ID:       855BC5BD-2A50-4DB8-BD91-4E0F6ECD50D6
:Effort:   1:00
:END:
*** TODO [#4] Move archives to external file, preserving structure
:PROPERTIES:
:ID:       DF8001AB-5B1E-4B6D-A3E5-BAEFDB041171
:Effort:   2:00
:END:

I think Munilo Pereira had a package that allowed for this.
** org-fold
:PROPERTIES:
:ID:       DCBF8A9B-D230-4D51-B861-B85AA4405D25
:END:
:LOGBOOK:
CLOCK: [2021-03-15 Mon 14:51]--[2021-03-15 Mon 15:07] =>  0:16
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-fold
  :custom
  (org-fold-catch-invisible-edits 'smart)

  :config
  (defun ps/org-fold-show-all-headings ()
    "Show contents of all headings in buffer, except archives."
    (interactive)
    (org-fold-show-all '(headings))
    (org-cycle-hide-archived-subtrees 'all)))
#+end_src

** org-id
:PROPERTIES:
:ID:       51E91355-66E0-479C-B616-116EF261F930
:END:
:LOGBOOK:
CLOCK: [2022-08-29 Mon 17:28]--[2022-08-29 Mon 17:43] =>  0:15
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-id
  :demand t
  :custom
  (org-id-link-to-org-use-id t)

  :init
  ;; stackoverflow.com/a/16247032/4479455
  (defun ps/org-id-add-ids-to-headlines-in-file ()
    "Add ID properties to all headlines in the current file which do
not already have one."
    (when (and (equal (system-name) ps/computer-hostname-pablo)
               (eq major-mode 'org-mode)
               (eq buffer-read-only nil))
      (unless
          (member (org-get-heading) '("Local variables"
                                      "COMMENT Local variables"
                                      "TODO Local variables"))
        (org-map-entries 'org-id-get-create))))

  ;; (setq org-id-extra-files
        ;; (directory-files-recursively ps/dir-org "\\.org"))

  :config
  ;; copied from emacs.stackexchange.com/a/58834/32089
  ;; TODO: add support for scanning file at point
  (defun ps/org-id-update-id-locations (&optional files silent)
    "Scan relevant files for IDs.
Store the relation between files and corresponding IDs.
This will scan all agenda files, all associated archives, and all
files currently mentioned in `org-id-locations'.
When FILES is given, scan these files instead."
    (interactive)
    (if (not org-id-track-globally)
        (error "Please turn on `org-id-track-globally' if you want to track IDs")
      (let* ((org-id-search-archives
              (or org-id-search-archives
                  (and (symbolp org-id-extra-files)
                       (symbol-value org-id-extra-files)
                       (member 'agenda-archives org-id-extra-files))))
             (files
              (or files
                  (append
                   ;; Agenda files and all associated archives
                   (org-agenda-files t org-id-search-archives)
                   ;; Explicit extra files
                   (if (symbolp org-id-extra-files)
                       (symbol-value org-id-extra-files)
                     org-id-extra-files)
                   ;; Files associated with live Org buffers
                   (delq nil
                         (mapcar (lambda (b)
                                   (with-current-buffer b
                                     (and (derived-mode-p 'org-mode) (buffer-file-name))))
                                 (buffer-list)))
                   ;; All files known to have IDs
                   org-id-files)))
             org-agenda-new-buffers
             file nfiles tfile ids reg found id seen (ndup 0))
        (when (member 'agenda-archives files)
          (setq files (delq 'agenda-archives (copy-sequence files))))
        (setq nfiles (length files))
        (while (setq file (pop files))
          (unless silent
            (message "Finding ID locations (%d/%d files): %s"
                     (- nfiles (length files)) nfiles file))
          (setq tfile (file-truename file))
          (when (and (file-exists-p file) (not (member tfile seen)))
            (push tfile seen)
            (setq ids nil)
            (with-current-buffer (org-get-agenda-file-buffer file)
              (save-excursion
                (save-restriction
                  (widen)
                  (goto-char (point-min))
                  (while (re-search-forward "^[ \t]*:ID:[ \t]+\\(\\S-+\\)[ \t]*$"
                                            nil t)
                    (setq id (match-string-no-properties 1))
                    (if (member id found)
                        (progn
                                        ;added logic
                          (if org-clone-delete-id
                              (org-entry-delete nil "ID")
                            (org-id-get-create t))
                                        ;end of added logic
                          (message "Duplicate ID \"%s\", also in file %s"
                                   id (or (car (delq
                                                nil
                                                (mapcar
                                                 (lambda (x)
                                                   (if (member id (cdr x))
                                                       (car x)))
                                                 reg)))
                                          (buffer-file-name)))
                          (when (= ndup 0)
                            (ding)
                            (sit-for 2))
                          (setq ndup (1+ ndup)))
                      (push id found)
                      (push id ids)))
                  (push (cons (abbreviate-file-name file) ids) reg))))))
        (org-release-buffers org-agenda-new-buffers)
        (setq org-agenda-new-buffers nil)
        (setq org-id-locations reg)
        (setq org-id-files (mapcar 'car org-id-locations))
        (org-id-locations-save) ;; this function can also handle the alist form
        ;; now convert to a hash
        (setq org-id-locations (org-id-alist-to-hash org-id-locations))
        (if (> ndup 0)
            (message "WARNING: %d duplicate IDs found, check *Messages* buffer" ndup)
          (message "%d unique files scanned for IDs" (length org-id-files)))
        org-id-locations)))

  :hook
  (before-save-hook . ps/org-id-add-ids-to-headlines-in-file)

  :general
  (org-mode-map
   "s-A-i" 'org-id-copy
   "s-A-u" 'ps/org-id-update-id-locations))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       8AF14CB2-00AF-4370-8926-11D5D2019913
:END:
**** DONE Remove ID from ~local variables~
CLOSED: [2022-06-28 Tue 21:49]
:PROPERTIES:
:ID:       46A36EBB-8E21-40F5-BF60-55DD51A3D508
:ARCHIVE_TIME: 2022-07-01 Fri 05:15
:END:
:LOGBOOK:
CLOCK: [2022-06-28 Tue 20:49]--[2022-06-28 Tue 21:49] =>  1:00
CLOCK: [2022-06-28 Tue 20:47]--[2022-06-28 Tue 20:49] =>  0:02
:END:
[[id:9AB1D1EB-A502-4DA2-8BB1-7B2D3B73189B][example]]

**** CANCELLED [#5] Revise function above to robustly exclude selected headings
CLOSED: [2023-01-14 Sat 20:10]
:PROPERTIES:
:ID:       77F06C6A-1F3F-4F9D-A1CF-02B16D00DB62
:ARCHIVE_TIME: 2023-01-14 Sat 20:10
:END:
- [ ] Now the headings are excluded if one creates them, but if one creates /other/ headings, the headings are included.
- [ ] Files under ~/source/foo~ are  nott excluded if one merely adds ~source/~ to the list of excluded directories.
- [ ] I think I do /not/ want to exclude bibliographic notes.

[2023-01-14 Sat] Marking as ~CANCELLED~ for the reason described [[id:FB1FD9AE-C82B-4D51-93E9-ECC40D2065D9][here]].
**** CANCELLED [#4] Update save hook to exclude Anki file
CLOSED: [2023-01-14 Sat 20:11]
:PROPERTIES:
:ID:       FB3B93BF-EFCB-41F0-A732-844EDB162BE0
:Effort:   0:25
:ARCHIVE_TIME: 2023-01-14 Sat 20:11
:END:
/Users/pablostafforini/Dropbox/org/anki/main.org

Also remove IDs from file.

[2023-01-14 Sat 20:10] Marking as ~CANCELLED~ for the reason described [[id:FB1FD9AE-C82B-4D51-93E9-ECC40D2065D9][here]].
**** CANCELLED [#6] Remove IDs from ARCHIVE
CLOSED: [2023-01-14 Sat 20:11]
:PROPERTIES:
:ID:       0218D5CD-2CEE-44E6-9F0F-EA4BCEFC6AA3
:Effort:   0:20
:ARCHIVE_TIME: 2023-01-14 Sat 20:11
:END:
:LOGBOOK:
CLOCK: [2022-07-01 Fri 05:14]--[2022-07-01 Fri 05:32] =>  0:18
:END:
[2023-01-14 Sat 20:10] Marking as ~CANCELLED~ for the reason described [[id:FB1FD9AE-C82B-4D51-93E9-ECC40D2065D9][here]].

** org-persist
:PROPERTIES:
:ID:       AC9749BE-A4B3-4908-92B9-E7919D5493B4
:END:


** org-list
:PROPERTIES:
:ID:       DD345C01-CEAC-4CEC-A8D5-89C16A0182CB
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-list
  :custom
  (org-plain-list-ordered-item-terminator ?.)
  (org-list-indent-offset 2)

  :config
  (defun ps/org-mark-checkbox-complete-and-move-to-next-item ()
    "Mark checkbox as completed and move to the next item."
    (interactive)
    (org-ctrl-c-ctrl-c nil)
    (let ((debug-on-error nil))
      (org-next-item)))

  ;; I should instead advice the original org function
  (defun ps/org-reset-checkbox-state-subtree ()
    "Reset all checkboxes in an entry subtree, without showing heading properties."
    (interactive)
    (org-reset-checkbox-state-subtree)
    (org-cycle)
    (org-cycle))

  :general
  (org-mode-map
   "s-A-c" 'ps/org-mark-checkbox-complete-and-move-to-next-item
   "s-A-o" 'ps/org-reset-checkbox-state-subtree))
#+end_src

** org-refile
:PROPERTIES:
:ID:       3FAE7C0D-FB22-4175-A0A4-FFA392539743
:REFILE_TARGET_FILE: config.org
:REFILE_TARGET_HEADING: Watched
:END:
:LOGBOOK:
CLOCK: [2021-12-15 Wed 10:20]--[2021-12-15 Wed 10:30] =>  0:10
CLOCK: [2021-12-14 Tue 18:00]--[2021-12-14 Tue 18:08] =>  0:08
CLOCK: [2021-10-08 Fri 10:22]--[2021-10-08 Fri 10:32] =>  0:10
CLOCK: [2021-08-21 Sat 21:46]--[2021-08-21 Sat 21:54] =>  0:08
CLOCK: [2021-06-05 Sat 14:17]--[2021-06-05 Sat 14:19] =>  0:02
CLOCK: [2021-02-27 Sat 07:30]--[2021-02-27 Sat 07:46] =>  0:16
CLOCK: [2021-02-24 Wed 06:47]--[2021-02-24 Wed 07:30] =>  0:43
:END:

Much of this was taken from Yiming Chen's [[https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/][My org refile workflow]].

#+begin_src emacs-lisp :results silent
(use-feature org-refile
  :defer 10
  ;; :demand t
  :custom
  (org-refile-use-outline-path 'file)
  ;; makes org-refile outline working with helm/ivy
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-reverse-note-order t) ; refile to the beginning of header
  ;; Build cache at startup
  (org-refile-use-cache t)
  (org-refile-use-outline-path t)
  (org-refile-targets '((org-agenda-files :maxlevel . 9)
                        (ps/open-buffer-files :maxlevel . 9)))
  :config
  (defun ps/open-buffer-files ()
    "Return the list of files currently open in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  ;; Regenerate cache every five minutes
  (run-with-idle-timer 600 t (lambda ()
                               (org-refile-cache-clear)
                               (org-refile-get-targets)))
  ;; [2022-06-21] Replaced by `consult-org-heading'; consider
  ;; deleting.
  (defun ps/org-refile-jump (&optional arg)
    "Jump to heading in current buffer. With prefix argument,
refresh cache."
    (interactive "P")
    (widen)
    (let ((org-refile-targets '((nil :maxlevel . 9))))
      (when arg (org-refile 0))
      (org-refile '(4)))
    (ps/org-narrow-to-entry-and-children))

  (defun ps/org-refile-latest ()
    "Jump to the most recently refiled item."
    (interactive)
    (widen)
    (org-refile '(16)))

  ;; Inspired by emacs.stackexchange.com/q/8045/32089
  (defun ps/org-refile-to (file heading)
    "Refile current heading to specified location."
    (let ((pos (save-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer heading))))
      (org-refile nil nil (list heading file nil pos))))

  (defun ps/org-refile-video-to-watched ()
    "Refile current heading to 'Watched' section."
    (interactive)
    (save-window-excursion (ps/org-refile-to "videos.org" "Watched")))

  ;; to make this command work, I need to find a way to extend the scope of the
  ;; `file' and `heading' temporary variables beyond the bounds of the excursion.
  ;; I can just define an ordinary variable with `setq' but that seems incorrect.
  (defun ps/org-refile-to-set-target ()
    "Refile current heading to target specified by the properties
`REFILE_TARGET_FILE' and `REFILE_TARGET_HEADING'."
    (interactive)
    ;; check that property exists; otherwise abort
    (save-excursion
      (org-narrow-to-subtree)
      (beginning-of-buffer)
      (widen)
      (org-next-visible-heading -1)
      (let ((file (org-entry-get nil "REFILE_TARGET_FILE"))
            (heading (org-entry-get nil "REFILE_TARGET_HEADING")))))
    (save-window-excursion (ps/org-refile-to file heading)))

  :general
  (org-mode-map
   "s-w" 'org-refile
   "s-A-w" 'ps/org-refile-latest))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       1B7125C0-A456-441E-BCCC-E78D46DFA06B
:END:
**** DONE Expand ps/org-refile-to
CLOSED: [2021-07-28 Wed 23:58]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-28 Wed 23:58
:ID:       E57F54F1-E10B-40BC-BFBD-F4BC41151726
:END:
:LOGBOOK:
CLOCK: [2021-07-28 Wed 23:03]--[2021-07-28 Wed 23:58] =>  0:55
:END:
In the future, these functions could be extended so that the refile target is specified as the value of the parent heading. So e.g. if point is on ~*** child heading~ and the value of the ~REFILE_TARGET_FILE~ property of ~** parent heading~ is ~movies.org~, invoking the command would move ~** child heading~ to the file ~movies.org~. The target heading could be similarly specified.
** org-keys
:PROPERTIES:
:ID:       19FC2EEB-7C71-43C1-97E6-52913C31CCDE
:END:
:LOGBOOK:
CLOCK: [2021-12-23 Thu 11:03]--[2021-12-23 Thu 11:21] =>  0:18
CLOCK: [2021-07-14 Wed 22:45]--[2021-07-14 Wed 22:51] =>  0:06
CLOCK: [2021-07-06 Tue 14:58]--[2021-07-06 Tue 15:18] =>  0:20
CLOCK: [2021-06-06 Sun 14:06]--[2021-06-06 Sun 14:16] =>  0:10
CLOCK: [2021-06-06 Sun 12:27]--[2021-06-06 Sun 13:00] =>  0:33
CLOCK: [2021-06-06 Sun 09:45]--[2021-06-06 Sun 10:05] =>  0:20
CLOCK: [2021-06-01 Tue 20:43]--[2021-06-01 Tue 21:00] =>  0:17
CLOCK: [2021-04-21 Wed 17:06]--[2021-04-21 Wed 17:09] =>  0:03
CLOCK: [2021-04-21 Wed 16:42]--[2021-04-21 Wed 17:03] =>  0:21
CLOCK: [2021-04-04 Sun 18:17]--[2021-04-04 Sun 18:22] =>  0:05
CLOCK: [2021-04-04 Sun 12:54]--[2021-04-04 Sun 12:57] =>  0:03
CLOCK: [2021-04-04 Sun 12:25]--[2021-04-04 Sun 12:29] =>  0:04
CLOCK: [2021-04-04 Sun 12:05]--[2021-04-04 Sun 12:25] =>  0:20
CLOCK: [2021-03-23 Tue 12:13]--[2021-03-23 Tue 12:21] =>  0:08
:END:

Enable speed keys. To trigger a speed key, point must be at the very beginning of an org headline. Type '?' for a list of keys.

#+begin_src emacs-lisp :results silent
(use-feature org-keys
  :custom
  (org-use-speed-commands t)
  (org-speed-commands
   '(("Outline navigation")
     ("k" . (org-speed-move-safe 'org-previous-visible-heading))
     ("." . (org-speed-move-safe 'org-forward-heading-same-level))
     ("," . (org-speed-move-safe 'org-backward-heading-same-level))
     ("l" . (org-speed-move-safe 'org-next-visible-heading))
     ("j" . (org-speed-move-safe 'outline-up-heading))
     ("m" . (org-previous-block nil))
     ("/" . (org-next-block nil))
     ("Outline structure editing")
     ("A" . (org-metaleft))
     ("D" . (org-metadown))
     ("S" . (org-metaup))
     ("F" . (org-metaright))
     ("Q" . (org-shiftmetaleft))
     ("E" . (org-shiftmetadown))
     ("W" . (org-shiftmetaup))
     ("R" . (org-shiftmetaright))
     ("Outline visibility")
     ("'" . (org-force-cycle-archived))
     ("w" . (ps/narrow-or-widen-dwim))
     ("Meta data editing")
     ("t" . (org-todo))
     ("Clock")
     ("h" . (ps/org-jump-to-latest-clock-entry))
     ("H" . (lambda () (ps/org-jump-to-latest-clock-entry) (ps/org-clone-clock-entry)))
     ("i" . (org-clock-in))
     ("o" . (org-clock-out))
     ("Regular editing")
     ("z" . (undo-tree-undo))
     ("X" . (org-cut-subtree)) ; capital 'X' to prevent accidents
     ("c" . (org-copy-subtree))
     ("v" . (org-yank))
     ("Other")
     ("f" . (ace-link-org))
     ("a" . (org-open-at-point nil))
     ("I" . (org-id-copy))
     ("p" . (org-priority))
     ("u" . (org-speed-command-help))
     ("g" . (org-agenda)))))
#+end_src

Set custom speed commands.

I use the same key for ~CONTROL~ and ~TAB~ (thanks to the magic of Karabiner), so I can't hit ~C-TAB~, to which ~org-force-cycle-archived~ is bound. Since this is a command I very rarely execute, I don't want to waste a key chord by rebinding the function to it. Instead, I set a custom speed command that lets me call that function with ~c~ (which replaces the default speed key binding for ~org-cycle~).

** ol
:PROPERTIES:
:ID:       9C00589B-C296-48BA-BD7A-B50992624AB0
:END:
#+begin_src emacs-lisp :results silent
(use-feature ol
  :general
  ("H-L" 'org-store-link)
  (org-mode-map
   "A-C-M-s-j" 'org-previous-link
   "A-C-M-s-;" 'org-next-link)
  ((org-mode-map org-msg-edit-mode-map)
   "s-k" 'org-insert-link
   "s-A-l" 'ps/org-url-dwim))
#+end_src

** org-protocol
:PROPERTIES:
:ID:       03387678-63D2-4B72-AD25-6F6F16992D5C
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:51]--[2022-07-17 Sun 11:55] =>  0:04
CLOCK: [2022-07-16 Sat 21:15]--[2022-07-17 Sun 10:49] => 13:34
:END:
[[https://www.orgroam.com/manual.html#Mac-OS][This section of the org-roam manual]] describes how to set up ~org-protocol~ on macOS. Note that [[https://bitbucket.org/mituharu/emacs-mac/][emacs-mac]] supports ~org-protocol~ out of the box and doesn't require turning on the Emacs server.


#+begin_src emacs-lisp :results silent
(use-feature org-protocol
  :defer 15)
#+end_src

** org-protocol-capture-html
:PROPERTIES:
:ID:       B7DA6C67-C8F4-4D46-B17B-5DB01D2A059A
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 14:48]--[2022-07-17 Sun 19:16] =>  4:28
CLOCK: [2022-07-17 Sun 11:55]--[2022-07-17 Sun 12:30] =>  0:35
:END:
#+begin_src emacs-lisp :results silent
(use-package org-protocol-capture-html)
#+end_src

** ox
:PROPERTIES:
:ID:       A3639B32-E7EE-4119-876B-729DF18FD314
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 13:14]--[2021-07-25 Sun 13:18] =>  0:04
:END:

#+begin_src emacs-lisp :results silent
(use-feature ox
  :defer 30
  :custom
  (org-export-exclude-tags '("noexport" "ARCHIVE"))
  (org-export-backends '(ascii html icalendar latex md odt) "set export backends")
  (org-export-with-broken-links 'mark "allow export with broken links")
  (org-export-with-section-numbers nil "do not add numbers to section headings")
  (org-export-with-toc nil "do not include table of contents")
  (org-export-with-title nil "do not include title")
  (org-export-headline-levels 4 "include up to level 4 headlines")
  ;; (org-export-with-author nil "do not include author")
  ;; (org-export-with-date nil "do not include export date")
  ;; (org-html-validation-link nil "do not include validation link")
  (org-html-postamble nil "the three lines above unnecessary when this set to nil")
  (org-latex-logfiles-extensions (quote
                                  ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle")) "get rid of temporary LaTeX files upon export")
  (org-preview-latex-default-process 'dvisvgm)
  (org-export-show-temporary-export-buffer nil "bury temporary export buffers generated by `org-msg'")

  :general
  (org-mode-map
   "s-A-e" 'org-export-dispatch))
#+end_src

*** TODO [#6] Change face of content under headline tagged ~unpublished~ or ~noexport~
:PROPERTIES:
:Effort:   0:45
:ID:       1AC4CC67-0F8E-4E4D-95A5-DB7116AEA359
:END:
https://stackoverflow.com/questions/20089530/color-whole-section-line-in-org-mode-depending-on-tag

#+begin_src emacs-lisp :results silent :tangle no
(font-lock-add-keywords 'org-mode
                        '(("^.*:noexport:.*$" . font-lock-keyword-face)))
#+end_src

It works, but it only changes the color of the heading, rather than the text underneath.

** ox-hugo
:PROPERTIES:
:ID:       1E9E8DC4-83B7-44CA-B467-BA7428DDF812
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 19:17]--[2022-07-17 Sun 21:01] =>  1:44
:END:
Hugo should be able to export ~org-cite~ citations.

#+begin_src emacs-lisp :results silent
(use-package ox-hugo
  :defer 100)
#+end_src

** org-archive
:PROPERTIES:
:ID:       35501F37-CD5A-4852-ADCE-C910E2A060E2
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 12:12]--[2021-07-22 Thu 12:23] =>  0:11
CLOCK: [2021-04-24 Sat 13:10]--[2021-04-24 Sat 13:14] =>  0:04
CLOCK: [2021-03-11 Thu 09:41]--[2021-03-11 Thu 10:00] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-archive
  :custom
  (org-archive-default-command 'org-archive-to-archive-sibling)
  (org-archive-location (expand-file-name "%s_archive.org::" ps/dir-archive))

  :config
  ;; Based on stackoverflow.com/a/27043756/4479455
  (defun ps/org-archive-done-tasks-in-file ()
    "Archive all DONE tasks in file."
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-to-archive-sibling)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'file))

  (defun ps/org-mark-as-done-for-good-and-archive ()
    "Mark task as DONE, removing any schedules and deadlines, if
present, then archive it."
    (interactive)
    (org-schedule '(4) nil)
    (org-deadline '(4) nil)
    (org-todo "DONE")
    (org-archive-to-archive-sibling))

  :general
  ("A-s-d" 'ps/org-mark-as-done-for-good-and-archive))
#+end_src

** org-babel
:PROPERTIES:
:ID:       A19E8C93-0435-4D02-AF4F-8213212D2386
:END:
:LOGBOOK:
CLOCK: [2021-08-06 Fri 15:59]--[2021-08-06 Fri 15:59] =>  0:00
CLOCK: [2021-07-25 Sun 13:18]--[2021-07-25 Sun 13:33] =>  0:15
CLOCK: [2021-06-06 Sun 14:34]--[2021-06-06 Sun 15:08] =>  0:34
CLOCK: [2021-04-05 Mon 19:18]--[2021-04-05 Mon 19:50] =>  0:32
CLOCK: [2021-02-25 Thu 15:00]--[2021-02-25 Thu 15:32] =>  0:32
:END:

#Minimal config
#+begin_src emacs-lisp :results silent
(use-feature ob
  :custom
  (org-confirm-babel-evaluate 'ps/org-confirm-babel-evaluate)

  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))

  (defun ps/org-confirm-babel-evaluate (lang body)
    (not (member lang '("python" "emacs-lisp"))))

  (defvar version 'normal)
  (defun ps/org-babel-tangle-config-file (&optional arg)
    "Tangle all code blocks defined as part of a normal configuration.
If invoked with a prefix argument, tangle only code blocks
defined as part of a minimal configuration instead."
    (interactive "P")
    (widen)
    (save-buffer)
    (let ((version (if arg 'minimal 'normal)))
      (org-babel-tangle)))

  (add-to-list 'org-babel-key-bindings (cons "j" 'org-babel-next-src-block))
  (add-to-list 'org-babel-key-bindings (cons "k" 'org-babel-previous-src-block))
  (add-to-list 'org-babel-key-bindings (cons "n" 'org-babel-insert-header-arg))
  (add-to-list 'org-babel-key-bindings (cons "p" 'org-babel-remove-result-one-or-many))
  :general
  (org-mode-map
   "s-b" 'ps/org-babel-tangle-config-file))
   #+end_src

This custom command also saves the buffer before tangling it. In combination with ~git-auto-commit-mode~, executing this command insures that I commit this (org) file whenever I generate an associated ~.spacemacs~ version. Because of this, I can always revert to the closest working config file whenever the latest version is broken. (~org-babel-tangle~ automatically saves the file, but unlike calling ~save-buffer~ explicitly, this doesn't cause ~git-auto-commit-mode~ to create a new commit.)

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       9362FA35-B0E9-4466-8CD2-B59087593AC6
:END:
**** DONE [#7] Diagnose why some preset code snippets aren't working
CLOSED: [2022-07-17 Sun 11:58]
:PROPERTIES:
:Effort:   0:40
:ID:       A65CC609-BE64-4DDF-975D-69356CE0067A
:ARCHIVE_TIME: 2022-07-17 Sun 11:58
:END:
E.g. ~<q~ creates a quote block, but ~<el~ doesn't create an elisp block.

** org-src
:PROPERTIES:
:ID:       5D173B55-ED72-495C-80EE-39063BAB0550
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-src
  :defer 5
  :custom
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil)
  (org-src-window-setup 'current-window)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively nil "When set to `nil', newlines will be properly indented")

  :config
  (defun ps/org-src--construct-edit-buffer-name (org-buffer-name lang)
    "Construct the buffer name for a source editing buffer. This
tweaked function names such buffers more cleanly than the
original."
    (concat org-buffer-name " (org src)"))

  (advice-add 'org-src--construct-edit-buffer-name :override #'ps/org-src--construct-edit-buffer-name)

  :general
  (org-src-mode-map
  "s-z" 'org-edit-src-exit))
#+end_src

** org-tempo
:PROPERTIES:
:ID:       45A1E0C7-83E2-4E58-88E5-3E146EF8EB4F
:END:
/org-tempo reimplements completions of structure template before point./

#+begin_src emacs-lisp
(use-feature org-tempo)
#+end_src

** org-table
:PROPERTIES:
:ID:       6DB39CB9-0939-41CD-B3A4-4FC478F24077
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-table
  :config
  (defun ps/org-table-copy-cell ()
    (interactive)
    (when (org-at-table-p)
      (kill-new
       (string-trim
        (substring-no-properties (org-table-get-field))))))

  :general
  ("H-s-c" 'ps/org-table-copy-cell)
  (org-table-fedit-map
   "s-c" 'org-table-fedit-finish))
#+end_src

*** Resources
:PROPERTIES:
:ID:       BF9BD230-8771-4883-9DFD-65723C011314
:END:
- [cite:@EMACKS2022HowCreateTable]

** orgtbl-edit
:PROPERTIES:
:ID:       7C3382D2-F7B4-4F1B-854E-BB60D568E299
:END:
/[[https://github.com/shankar2k/orgtbl-edit][orgtbl-edit]] allows editing a spreadsheet or text-delimited file as an org table./

#+begin_src emacs-lisp :results silent
(use-package orgtbl-edit
  :straight (orgtbl-edit
             :host github
             :repo "shankar2k/orgtbl-edit"))
#+end_src

** org-crypt
:PROPERTIES:
:ID:       3C8E083B-55A1-4B55-A30A-BD9C4BE1D1D0
:END:
:LOGBOOK:
CLOCK: [2021-03-18 Thu 18:49]--[2021-03-18 Thu 18:51] =>  0:02
:END:
/[[https://orgmode.org/manual/Org-Crypt.html][org-crypt]] encrypts the text under all headlines with a designated tag./

#+begin_src emacs-lisp :results silent
(use-feature org-crypt
:demand t
  :custom
  (org-tags-exclude-from-inheritance '("crypt"))
  (org-crypt-key ps/personal-gmail)

  :config
  (org-crypt-use-before-save-magic))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       D6606D43-0B9F-4136-B0DD-AF06DE69A98C
:END:
**** DONE Set up org-crypt
CLOSED: [2021-03-18 Thu 18:49]
:PROPERTIES:
:ARCHIVE_TIME: 2021-03-19 Fri 22:42
:ID:       40D0DCED-0DE6-4F89-805C-8A5A6D110B35
:END:
:LOGBOOK:
CLOCK: [2021-03-18 Thu 17:35]--[2021-03-18 Thu 18:47] =>  1:12
:END:
https://pages.sachachua.com/.emacs.d/Sacha.html#org0278a14

See if you can use it to store passwords in the config file.

** org-lint
:PROPERTIES:
:ID:       43E5754F-7EB8-4FB7-8A92-B57D8BA2AF81
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-lint)
#+end_src

** org-habit
:PROPERTIES:
:ID:       A4EE67E0-498C-4CE0-BBB2-E7F24DA6AD69
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-habit
  :custom
  (org-habit-today-glyph #x1f4c5)
  (org-habit-completed-glyph #x2713)
  (org-habit-preceding-days 29)
  (org-habit-following-days 1)
  (org-habit-graph-column 3)
  (org-habit-show-habits nil)
  (org-habit-show-habits-only-for-today nil)

  :config
  ;; copied from github.com/progfolio/.emacs.d/blob/master/init.org#org-habit
  (defun ps/org-habit-graph-on-own-line (graph)
    "Place org habit consitency graph below the habit."
    (let* ((count 0)
           icon)
      (save-excursion
        (beginning-of-line)
        (while (and (eq (char-after) ? ) (not (eolp)))
          (when (get-text-property (point) 'display) (setq icon t))
          (setq count (1+ count))
          (forward-char)))
      (add-text-properties (+ (line-beginning-position) count) (line-end-position)
                           `(display ,(concat (unless icon "  ")
                                              (string-trim-left (thing-at-point 'line))
                                              (make-string (or org-habit-graph-column 0) ? )
                                              (string-trim-right
                                               (propertize graph 'mouse-face 'inherit)))))))

  (defun ps/org-habit-insert-consistency-graphs (&optional line)
    "Insert consistency graph for any habitual tasks."
    (let ((inhibit-read-only t)
          (buffer-invisibility-spec '(org-link))
          (moment (org-time-subtract nil
                                     (* 3600 org-extend-today-until))))
      (save-excursion
        (goto-char (if line (point-at-bol) (point-min)))
        (while (not (eobp))
          (let ((habit (get-text-property (point) 'org-habit-p)))
            (when habit
              (let ((graph (org-habit-build-graph
                            habit
                            (time-subtract moment (days-to-time org-habit-preceding-days))
                            moment
                            (time-add moment (days-to-time org-habit-following-days)))))
                (ps/org-habit-graph-on-own-line graph))))
          (forward-line)))))

  (advice-add #'org-habit-insert-consistency-graphs
              :override #'ps/org-habit-insert-consistency-graphs))
#+end_src

** org-contrib
:PROPERTIES:
:ID:       1ABA68C3-187B-457C-9992-4C4BBEB45C18
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 15:33]--[2021-07-12 Mon 16:00] =>  0:27
CLOCK: [2021-06-22 Tue 21:39]--[2021-06-23 Wed 00:21] =>  2:42
CLOCK: [2021-04-20 Tue 23:28]--[2021-04-20 Tue 23:44] =>  0:16
:END:

Allows reset of checkboxes in recurring tasks. This works only on headings that have the property ~RESET_CHECK_BOXES~ set to ~t~. You can set the property of a heading by invoking the command ~org-set-property~ with point on that heading or immediately under it.

#+begin_src emacs-lisp :results silent
(use-package org-checklist
  :defer 30
  :straight org-contrib)
#+end_src

Export content of subtree without heading. Add the ~ignore~ tag to the headlines you want ignored in the export.

[2021-07-12 Mon 15:58] Not working.

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-extra
  :defer 30
  :straight org-contrib
  :config
  (ox-extras-activate '(ignore-headlines)))
#+end_src

** org-analyzer
:PROPERTIES:
:ID:       33BBA839-D680-4D74-AF0F-C6225799DD53
:END:

To try:
https://github.com/rksm/clj-org-analyzer/
https://www.reddit.com/r/emacs/comments/cptwh4/org_analyzer_an_app_that_visualizes_orgmode_time/
** org-ql
:PROPERTIES:
:ID:       09C4BC5C-8308-497F-A8B6-B135B79AA848
:END:
:LOGBOOK:
CLOCK: [2022-04-27 Wed 18:24]--[2022-04-27 Wed 19:26] =>  1:02
CLOCK: [2021-11-21 Sun 14:20]--[2021-11-21 Sun 14:22] =>  0:02
CLOCK: [2021-07-31 Sat 15:31]--[2021-07-31 Sat 15:41] =>  0:10
CLOCK: [2021-07-26 Mon 21:36]--[2021-07-26 Mon 22:00] =>  0:24
CLOCK: [2021-07-26 Mon 21:29]--[2021-07-26 Mon 21:31] =>  0:02
CLOCK: [2021-06-13 Sun 20:52]--[2021-06-13 Sun 21:31] =>  0:39
CLOCK: [2021-05-11 Tue 12:14]--[2021-05-11 Tue 12:17] =>  0:03
CLOCK: [2021-05-10 Mon 21:10]--[2021-05-10 Mon 22:11] =>  1:01
CLOCK: [2021-05-08 Sat 21:58]--[2021-05-08 Sat 22:31] =>  0:33
CLOCK: [2021-04-07 Wed 17:51]--[2021-04-07 Wed 18:27] =>  0:36
CLOCK: [2021-04-07 Wed 17:21]--[2021-04-07 Wed 17:40] =>  0:19
CLOCK: [2021-04-02 Fri 16:45]--[2021-04-02 Fri 16:48] =>  0:03
CLOCK: [2021-03-01 Mon 15:41]--[2021-03-01 Mon 15:47] =>  0:06
CLOCK: [2021-03-01 Mon 13:46]--[2021-03-01 Mon 13:57] =>  0:11
CLOCK: [2021-02-28 Sun 19:35]--[2021-02-28 Sun 19:56] =>  0:21
CLOCK: [2021-02-28 Sun 19:07]--[2021-02-28 Sun 19:26] =>  0:19
CLOCK: [2021-02-27 Sat 09:40]--[2021-02-27 Sat 12:00] =>  2:20
CLOCK: [2021-02-06 Sat 22:52]--[2021-02-06 Sat 23:11] =>  0:19
:END:

The packages [[https://github.com/alphapapa/org-ql][org-ql]] and ~helm-org-ql~ offer blazing fast search of org headings. Previously, I used ~org-goto~ and ~org-refile~, but the initial cache build after restart took over ten seconds, and subsequently it was a choice between retaining an outdated cache or building one periodically and experiencing further delays or freezes. This is an invalauble set of packages if you have lots of org headings.

[2022-06-08 Wed 16:49] Consider migrating from ~helm-org-ql~ to [[https://www.reddit.com/r/orgmode/comments/v13ont/ann_orgqlfind_new_org_ql_command_using_emacss/][org-ql-find]] (since the former was my main reason for keeping ~helm~, this would allow me to migrate to a different completion setup).

[2022-06-22 Wed 08:11] Disabling while I explore ~consult-org-heading~.

[2022-12-31 Sat 18:37] I no longer see a need for this; instead, I use ~org-roam-node-find~ and ~consult-org-heading~.

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-ql
  :custom
  (org-ql-search-directories-files-recursive t)
  :config
  (defun ps/org-ql-find-agenda ()
    "docstring"
    (interactive)
    (org-ql-find org-agenda-files :query-prefix "!tags:ARCHIVE")))
#+end_src


** org-make-toc
:PROPERTIES:
:ID:       5BAB49C3-DB85-4CB1-9CF7-5FD72AFB4608
:END:
/[[https://github.com/alphapapa/org-make-toc][org-make-toc]] generates automatic tables of contents for org files./

#+begin_src emacs-lisp :results silent
(use-package org-make-toc
  :after org)
#+end_src

** images
:PROPERTIES:
:ID:       D79FFD02-0270-4E22-923F-A9BE1AFA0421
:END:
#+begin_src emacs-lisp :results silent
(defun ps/org-paste-clipboard-image ()
  ;; TODO: write docstring
  (interactive)
  (if (executable-find "pngpaste")
      (let* ((counter 1)
             (image-file (concat
                          ps/dir-org-images
                          (org-id-get nil 'create)
                          (format "-%d.png" counter))))
        (while (file-exists-p image-file)
          (setq counter (1+ counter))
          (setq image-file (concat
                            ps/dir-org-images
                            (org-id-get nil 'create)
                            (format "-%d.png" counter))))
        (call-process-shell-command (format "pngpaste '%s'" image-file))
        (let ((caption (read-string "Caption: ")))
          (unless (string= caption "")
            (insert (format "#+CAPTION: %s \n" caption))))
        (insert (format "[[file:%s]]" image-file))
        (org-display-inline-images)
        (message "You can toggle inline images with `C-c C-x C-v'"))
    (user-error "Requires pngpaste in PATH")))
#+end_src

** org2blog
:PROPERTIES:
:ID:       56AD66CB-240C-4BAA-918B-CCD63BD518C4
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 13:27]--[2021-05-29 Sat 13:49] =>  0:22
CLOCK: [2021-05-29 Sat 12:08]--[2021-05-29 Sat 12:30] =>  0:22
CLOCK: [2021-03-27 Sat 22:03]--[2021-03-27 Sat 22:12] =>  0:09
CLOCK: [2021-03-18 Thu 21:57]--[2021-03-18 Thu 22:02] =>  0:05
CLOCK: [2021-03-17 Wed 22:08]--[2021-03-17 Wed 22:23] =>  0:15
CLOCK: [2021-03-17 Wed 20:34]--[2021-03-17 Wed 20:52] =>  0:18
:END:
/[[https://github.com/org2blog/org2blog][org2blog]] lets you blog from Org mode to WordPress./

#+begin_src emacs-lisp :results silent
(use-package org2blog
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :custom
  (org2blog/wp-blog-alist
   `(("Pablo's website"
      :url "https://www.stafforini.com/xmlrpc.php"
      :username ,(auth-source-pass-get "user" "chrome/stafforini.com/wp-admin/admin")
      :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/wp-admin/admin"))
     ("Pablo's miscellany"
      :url "https://www.stafforini.com/blog/xmlrpc.php"
      :username ,(auth-source-pass-get "user" "chrome/stafforini.com/blog/wp-admin/admin")
      :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/blog/wp-admin/admin"))
     ("notatu dignum"
      :url "https://www.stafforini.com/quotes/xmlrpc.php"
      :username ,(auth-source-pass-get "user" "chrome/stafforini.com/quotes/wp-admin/admin")
      :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/quotes/wp-admin/admin"))
     ("Puro compás"
      :url "https://www.stafforini.com/tango/xmlrpc.php"
      :username ,(auth-source-pass-get "user" "chrome/stafforini.com/tango/wp-admin/admin")
      :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/tango/wp-admin/admin"))
      ("EA Quotes"
      :url "https://eaquotes.net/xmlrpc.php"
      :username ,(auth-source-pass-get "user" "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net")
      :password ,(auth-source-pass-get 'secret "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net"))))

  (org2blog/wp-show-post-in-browser 'show)
  (org2blog/wp-track-posts (list ps/file-org2blog "Posts"))

  :config
  ;; (load-file "/Users/pablostafforini/.emacs.d/straight/repos/org2blog/org2blog.el")
  (defun ps/org2blog-move-tags-to-drawer ()
    "Convert org-mode tags to values of the property `POST_TAGS' in
an org drawer."
    (interactive)
    (while (re-search-forward "^\\* .*?:\\(.*\\):
")
    (let ((tags (string-join
                 (split-string
                  (substring-no-properties
                   (match-string 1))
                  ":")
                 ", ")))
      (org-set-property "POSG_TAGS" tags))))

  :general
  ("°" 'org2blog-user-interface))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       FC1AD69E-E920-4B9B-896A-B5575D5F5A24
:END:
**** DONE Make org2blog work with pass
CLOSED: [2021-06-07 Mon 19:21]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-07 Mon 19:21
:ID:       DC16DA10-55A4-47B8-9738-DD29B74A3FCC
:END:
(setq org2blog/wp-blog-alist nil)

(let*
((setq autent
(car
(auth-source-search :host "stafforini.com"
:requires '(user secret))))
(mi-usuario (plist-get autent :user))
(mi-password (funcall (plist-get autent :secret))))
(message "El usuario es %s y la contraseña es %s" mi-usuario mi-password))



(use-package org2blog
:config
(require 'org2blog-autoloads)
(setq org2blog/wp-blog-alist
`(("Pablo's miscellany"
:url "https://www.stafforini.com/blog/xmlrpc.php"
;; :username ,(cl-getf (car (auth-source-search :host "stafforini.com"))
;; :user)
:password ,(cl-getf (car (auth-source-search :host "stafforini.com"))
:secret)
))
;; ("notatu dignum"
;; :url "https://www.stafforini.com/quotes/xmlrpc.php"
;; :username ,(car (auth-source-user-and-password "stafforini.com"))
;; :password ,(cadr (auth-source-user-and-password "stafforini.com"))
;; ))
org2blog/wp-show-post-in-browser 'show)
)

(setq auth-sources '("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"))

This is how ~org2blog/wp-blog-alist~ should look:


**** DONE See if you can generate a tag list natively with org2blog, otherwise generate one manually
CLOSED: [2021-06-23 Wed 12:44]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-06-23 Wed 12:44
:ID:       5F2E1A51-8092-4ADE-AB30-C1FEA480DD0E
:END:
** org-journal
:PROPERTIES:
:ID:       16DB534E-D606-4510-84ED-6C6640780E7A
:END:
/[[https://github.com/bastibe/org-journal][org-journal]] is an org-mode based journaling mode./

#+begin_src emacs-lisp :results silent
(use-package org-journal
  :custom
  ;; (org-enable-org-journal-support t)
  (org-journal-dir ps/dir-journal)
  (org-journal-date-format "%Y-%m-%d")
  (org-journal-file-format "%Y.org")
  (org-journal-file-type 'yearly) ; set org-journal to use the same files for same year entries

  :config
  (defun ps/org-journal-goto-today ()
    "docstring"
    (interactive)
    (widen)
    (goto-char (point-min))
    (re-search-forward
     (concat "\* " (format-time-string org-journal-date-format) "\n"))
    (ps/org-narrow-to-entry-and-children)
    (goto-char (point-max)))

  :general
  ("A-j" 'org-journal-new-entry))
#+end_src

*** TODO [#5] Explore how to use org journal as the day organizer
:PROPERTIES:
:ID:       67333293-EE6D-4936-8C88-07F5AE193B81
:END:
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       A9515515-8FBC-4940-82FC-07857F80B9B4
:END:
**** DONE Create command to go to today's entry in ~org-journal~
CLOSED: [2022-07-26 Tue 17:03]
:PROPERTIES:
:ID:       3CA14232-86B5-409D-B747-4399C94694F4
:ARCHIVE_TIME: 2022-07-27 Wed 12:43
:END:
:LOGBOOK:
CLOCK: [2022-07-26 Tue 13:48]--[2022-07-26 Tue 14:21] =>  0:33
:END:
** org-autosort
:PROPERTIES:
:ID:       1BC53647-A492-4EA3-A9A5-352C71119629
:END:
/[[https://github.com/yantar92/org-autosort][org-autosort]] sorts entries in org files automatically./

#+begin_src emacs-lisp :results silent
(use-package org-autosort
  :straight (org-autosort :type git :host github :repo "yantar92/org-autosort"))
#+end_src

** ox-clip
:PROPERTIES:
:ID:       E2D54031-28E4-4F96-A3D1-0E06D1B1A17E
:END:
/[[https://github.com/jkitchin/ox-clip][ox-clip]] copies selected regions in org-mode as formatted text on the clipboard./

#+begin_src emacs-lisp :results silent
(use-package ox-clip
  :demand t
  :custom
  ;; the default value works but will set the font to a particular
  ;; size, so when pasting to e.g. Google Docs it won't inherit the
  ;; font size of the rest of the document. this new value fixes this.
  (ox-clip-osx-cmd "hexdump -ve '1/1 \"%.2x\"' | xargs printf \"set the clipboard to {text:\\\" \\\", «class HTML»:«data HTML%s»}\" | osascript -")

  :general
  ((org-mode-map)
   "s-c" 'ox-clip-formatted-copy))
#+end_src

** ox-pandoc
:PROPERTIES:
:ID:       C16B02FA-64E6-423B-9596-B3B023C93B21
:END:

#+begin_src emacs-lisp :results silent
(use-package ox-pandoc)
#+end_src

** ox-reveal
:PROPERTIES:
:ID:       019A6815-F80E-4A8E-9CDC-854F28D7E42A
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 13:27]--[2021-11-18 Thu 13:45] =>  0:18
:END:
#+begin_src emacs-lisp :results silent
(use-package ox-reveal
  ;; :defer 300
  :custom
  (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src

- [[https://revealjs.com/][The HTML presentation framework | reveal.js]]
- [[https://www.youtube.com/watch?v=je_xPoqtnSM][GNU/Emacs Org-mode For Presentation Slides/HTML Slides (Emacs org-reveal) - YouTube]]
** orgmdb
:PROPERTIES:
:ID:       504577FD-DACD-4D35-B9E6-307DF3D9BE7E
:END:
:LOGBOOK:
CLOCK: [2022-03-14 Mon 14:55]--[2022-03-14 Mon 15:13] =>  0:18
CLOCK: [2021-07-22 Thu 12:50]--[2021-07-22 Thu 12:52] =>  0:02
CLOCK: [2021-06-22 Tue 10:53]--[2021-06-22 Tue 11:28] =>  0:35
CLOCK: [2021-06-25 Fri 21:00]--[2021-06-25 Fri 21:03] =>  0:03
CLOCK: [2021-06-22 Tue 10:39]--[2021-06-22 Tue 10:53] =>  0:14
CLOCK: [2021-05-29 Sat 20:36]--[2021-05-29 Sat 21:01] =>  0:25
CLOCK: [2021-05-14 Fri 18:20]--[2021-05-14 Fri 18:24] =>  0:04
CLOCK: [2021-05-11 Tue 19:43]--[2021-05-11 Tue 20:01] =>  0:18
CLOCK: [2021-05-10 Mon 20:48]--[2021-05-10 Mon 21:10] =>  0:22
CLOCK: [2021-05-10 Mon 14:38]--[2021-05-10 Mon 14:47] =>  0:09
CLOCK: [2021-05-10 Mon 14:16]--[2021-05-10 Mon 14:17] =>  0:01
CLOCK: [2021-03-18 Thu 21:44]--[2021-03-18 Thu 21:50] =>  0:06
CLOCK: [2021-03-23 Tue 21:17]--[2021-03-23 Tue 21:41] =>  0:24
CLOCK: [2021-03-23 Tue 20:26]--[2021-03-23 Tue 21:13] =>  0:47
:END:
/[[https://github.com/isamert/orgmdb.el][orgmdb]] is an OMDb API client with some org-mode related convenience functions./

#+begin_src emacs-lisp :results silent
(use-package orgmdb
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :defer 60
  :straight (orgmdb
             :host github
             :repo "isamert/orgmdb.el")
  :config
  (setq orgmdb-omdb-apikey (auth-source-pass-get 'secret "auth-sources/omdb"))
  (defun ps/orgdmb-see-movie-in-imdb (&optional arg)
    "Visit the IMDb page of the movie at point.

With optional prefix argument, open with eww."
    (interactive "P")
    (let ((url (concat "https://www.imdb.com/title/" (org-entry-get nil "IMDB-ID"))))
      (if arg
          (eww url)
        (browse-url url))))
  (defhydra hydra-orgmdb
    (:exit t :idle 0.5)
    "orgmdb"
    ("f" (orgmdb-fill-movie-properties nil) "Fill properties")
    ("r" (orgmdb-fill-movie-properties 4) "Fill properties and replace title")
    ("w" (ps/orgdmb-see-movie-in-imdb 4) "See in IMDb (eww)")
    ("x" (ps/orgdmb-see-movie-in-imdb) "See in IMDb (external)"))
  :general
  (org-mode-map
   ;; "s-A-g" 'hydra-orgmdb/body
   ))
#+end_src

** org-mime
:PROPERTIES:
:ID:       EB437B48-CEB2-4727-8910-627061F4701F
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 17:42]--[2021-05-04 Tue 17:54] =>  0:12
CLOCK: [2021-03-29 Mon 17:15]--[2021-03-29 Mon 18:09] =>  0:54
:END:
/[[https://github.com/org-mime/org-mime][org-mime]] lets you send HTML email using Org-mode HTML export./

#+begin_src emacs-lisp :results silent
(use-package org-mime
  :general
  (org-mode-map
   "s-m" 'org-mime-htmlize
   "s-A-m" 'org-mime-org-subtree-htmlize))
#+end_src

** elgantt
:PROPERTIES:
:ID:       22FCE4B1-4A51-4DF5-8BAF-2AC6E837DEE3
:END:
/[[https://github.com/legalnonsense/elgantt/][elgantt]] is a gantt chart for org mode./

#+begin_src emacs-lisp :results silent
(use-package elgantt
  :straight (elgantt
             :host github
             :repo "legalnonsense/elgantt")
  :defer 20
  :custom
  (elgantt-agenda-files (file-name-concat ps/dir-emacs "straight/repos/elgantt/test.org")))
#+end_src

** org-pomodoro
:PROPERTIES:
:ID:       107BED3A-947F-4D35-A382-2C20C1C37AED
:END:
:LOGBOOK:
CLOCK: [2022-04-30 Sat 14:12]--[2022-04-30 Sat 14:38] =>  0:26
CLOCK: [2022-03-31 Thu 18:49]--[2022-03-31 Thu 18:59] =>  0:10
CLOCK: [2022-03-31 Thu 17:36]--[2022-03-31 Thu 18:02] =>  0:26
CLOCK: [2022-03-31 Thu 17:25]--[2022-03-31 Thu 17:30] =>  0:05
:END:

[2021-10-19 Tue 22:39] I'm structuring my time in 30-minute blocks, but synchronized with the clock, so I don't need a pomodoro timer.

[2022-03-31 Thu 16:28] Using this again, since I can no longer use the clock's audio alerts.

#+begin_src emacs-lisp :results silent
(use-package org-pomodoro
  :defer 30
  :custom
  (org-pomodoro-length 26)
  (org-pomodoro-short-break-length (- 30 org-pomodoro-length))
  (org-pomodoro-long-break-length org-pomodoro-short-break-length)
  (org-pomodoro-finished-sound "/System/Library/Sounds/Blow.aiff")
  (org-pomodoro-long-break-sound org-pomodoro-finished-sound)
  (org-pomodoro-short-break-sound org-pomodoro-finished-sound)

  :config
  (defun ps/org-pomodoro-notify (title message)
    "Send a persistent notification with TITLE and MESSAGE using
`alert'."
    (alert message :title title :category 'org-pomodoro))

  (advice-add 'org-pomodoro-notify :override #'ps/org-pomodoro-notify)

  :general
  ("H-I" 'org-pomodoro
   "A-H-i" 'org-pomodoro-extend-last-clock)
  (org-agenda-mode-map
   "I" 'org-pomodoro))
#+end_src

- check: https://gist.github.com/bravosierrasierra/1d98a89a7bcb618ef70c6c4a92af1a96#file-org-pomodoro-plus

Pomodoro system:

- Always working on a task (rather than merely on a heading)
- At the beginning of each 30-minute session, leave a note on what I will do in that session
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       2977BCF3-1364-4C7E-BBD7-CCB9C796489E
:END:
**** DONE Set ~org-pomodoro~ so that end-of-session notification is prominently displayed
CLOSED: [2022-03-31 Thu 17:25]
:PROPERTIES:
:ARCHIVE_TIME: 2022-03-31 Thu 17:25
:ID:       53B8C463-5779-43FD-AD42-19DC5230371E
:END:
:LOGBOOK:
CLOCK: [2022-03-31 Thu 17:22]--[2022-03-31 Thu 17:25] =>  0:03
:END:
** memacs
:PROPERTIES:
:ID:       1146CE48-9243-435A-8394-07C385538104
:END:
*** TODO [#5] Try memacs
:PROPERTIES:
:ID:       B27D8912-4089-4E37-B4BD-195B398C066B
:END:
* note-taking
:PROPERTIES:
:ID:       EC6700D7-C65D-4430-8DAC-57772B423D69
:END:
** TODO Add ~biblio~ tag to all bibliographic notes
:PROPERTIES:
:ID:       51E3274E-1A08-4082-9863-0A62F3233C1B
:END:
Done until ~Gates2022RisksAdvancedAI.org~.

#+begin_src emacs-lisp :tangle no
(dolist (file (f-entries "/Users/pablostafforini/Dropbox/bibliographic-notes"))
  (message "processing %s" file)
  (when (string= (file-name-extension file) "org")
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (ps/org-jump-to-first-heading)
    (org-roam-tag-add '("biblio"))
    (save-buffer))))
#+end_src

** emacs-sqlite3
:PROPERTIES:
:ID:       7A7A0C7B-AC94-40ED-A50E-AAB67D9522E8
:END:
#+begin_src emacs-lisp :results silent
(use-package emacsql-sqlite3
  :if (version< emacs-version "29.0")
  :demand t)
#+end_src

** emacsql-sqlite-builtin
:PROPERTIES:
:ID:       437F93FC-BDEE-48E2-A523-0813808871BC
:END:
#+begin_src emacs-lisp
(use-package emacsql-sqlite-builtin
  :if (not (version< emacs-version "29.0"))
  :demand t)
#+end_src

** org-roam
:PROPERTIES:
:ID:       2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17
:END:
:LOGBOOK:
CLOCK: [2022-09-30 Fri 20:53]--[2022-09-30 Fri 21:21] =>  0:28
CLOCK: [2022-06-28 Tue 20:12]--[2022-06-28 Tue 20:13] =>  0:01
CLOCK: [2022-06-28 Tue 17:57]--[2022-06-28 Tue 18:21] =>  0:24
CLOCK: [2022-06-28 Tue 16:03]--[2022-06-28 Tue 16:06] =>  0:03
CLOCK: [2022-06-28 Tue 11:50]--[2022-06-28 Tue 12:30] =>  0:40
CLOCK: [2022-06-26 Sun 10:50]--[2022-06-26 Sun 11:45] =>  0:55
CLOCK: [2022-06-26 Sun 09:08]--[2022-06-26 Sun 09:29] =>  0:21
CLOCK: [2022-06-18 Sat 17:27]--[2022-06-18 Sat 17:43] =>  0:16
CLOCK: [2022-03-08 Tue 13:05]--[2022-03-08 Tue 13:06] =>  0:01
CLOCK: [2022-02-01 Tue 11:41]--[2022-02-01 Tue 12:01] =>  0:20
CLOCK: [2022-01-31 Mon 15:36]--[2022-01-31 Mon 15:52] =>  0:16
CLOCK: [2021-12-27 Mon 22:14]--[2021-12-27 Mon 22:16] =>  0:02
CLOCK: [2021-12-15 Wed 12:16]--[2021-12-15 Wed 12:26] =>  0:10
CLOCK: [2021-12-05 Sun 18:33]--[2021-12-05 Sun 18:46] =>  0:13
CLOCK: [2021-12-04 Sat 14:40]--[2021-12-04 Sat 15:00] =>  0:20
CLOCK: [2021-12-03 Fri 12:18]--[2021-12-03 Fri 12:23] =>  0:05
CLOCK: [2021-12-02 Thu 21:05]--[2021-12-02 Thu 21:20] =>  0:15
CLOCK: [2021-12-02 Thu 19:51]--[2021-12-02 Thu 20:56] =>  1:05
CLOCK: [2021-12-02 Thu 18:49]--[2021-12-02 Thu 18:55] =>  0:06
CLOCK: [2021-12-02 Thu 18:30]--[2021-12-02 Thu 18:33] =>  0:03
CLOCK: [2021-08-06 Fri 15:32]--[2021-08-06 Fri 15:33] =>  0:01
CLOCK: [2021-08-02 Mon 18:45]--[2021-08-02 Mon 18:47] =>  0:02
CLOCK: [2021-07-30 Fri 14:13]--[2021-07-30 Fri 14:30] =>  0:17
CLOCK: [2021-07-28 Wed 16:27]--[2021-07-28 Wed 16:47] =>  0:20
CLOCK: [2021-07-26 Mon 11:26]--[2021-07-26 Mon 12:25] =>  0:59
CLOCK: [2021-07-24 Sat 22:54]--[2021-07-25 Sun 08:40] =>  9:46
CLOCK: [2021-07-24 Sat 19:19]--[2021-07-24 Sat 19:47] =>  0:28
CLOCK: [2021-07-24 Sat 09:31]--[2021-07-24 Sat 09:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:03]--[2021-06-25 Fri 21:05] =>  0:02
CLOCK: [2021-05-17 Mon 15:45]--[2021-05-17 Mon 16:56] =>  1:11
CLOCK: [2021-05-17 Mon 14:41]--[2021-05-17 Mon 14:55] =>  0:14
CLOCK: [2021-05-03 Mon 20:56]--[2021-05-03 Mon 21:37] =>  0:41
CLOCK: [2021-04-10 Sat 22:05]--[2021-04-10 Sat 22:12] =>  0:07
CLOCK: [2021-03-25 Thu 20:41]--[2021-03-25 Thu 21:18] =>  0:37
CLOCK: [2021-02-11 Thu 18:53]--[2021-02-11 Thu 19:28] =>  0:35
CLOCK: [2020-12-19 Sat 13:47]--[2020-12-19 Sat 14:02] =>  0:15
CLOCK: [2020-09-10 Thu 19:53]--[2020-09-10 Thu 20:01] =>  0:08
CLOCK: [2020-09-08 Tue 19:45]--[2020-09-08 Tue 19:59] =>  0:14
:END:
Once I activate ~org-roam-bibtex~, I should make sure deferring ~org-roam-setup~ and the loading of the package (with the ~:defer~ declaration) doesn't cause problems.


#+begin_src emacs-lisp :results silent
(use-package org-roam
  :after (:any emacsql-sqlite3 emacsql-sqlite-builtin)
  :demand t
  :init
  ;; `sqlite3' is deprecated, but I cannot get org-roam to work with
  ;; either `sqlite' or `sqlite-builtin'. So using this for the time
  ;; being, until I succeed in diagnosing the problem. See the
  ;; `org-roam-database-connector' docstring and the 'How to cache'
  ;; section of the manual: orgroam.com/manual.html#How-to-cache

  ;; [2023-01-24 Tue] I should migrate to `sqlite-builtin' when Emacs
  ;; 29 is released. See `org-roam-database-connector' docstring.
  (if (version< emacs-version "29.0")
      (setq org-roam-database-connector 'sqlite3)
    (setq org-roam-database-connector 'sqlite-builtin))

  (defun ps/org-roam-recent (days &optional limit)
    "Return list of files modified in the last DAYS. Optionally,
return such list if its length is less than LIMIT."
    (let* ((mins (* 60 24 days))
           (file-list (split-string
                       (shell-command-to-string
                        (format
                         "find %s -name '*.org'  -mmin -%s"
                         (directory-file-name org-roam-directory) mins)))))
      ;; Remove excluded files
      (setq file-list (cl-delete-if (lambda (k)
                                      (string-match-p org-roam-file-exclude-regexp k))
                                    file-list))
      (when (and limit
                 (< (length file-list) limit))
        file-list)))

  :custom
  (org-roam-directory ps/dir-org-roam)
  ;; (org-roam-complete-everywhere t)
  (org-roam-node-display-template #("${title:*} ${tags:10}" 11 21
                                    (face org-tag)))
  (org-roam-capture-templates
   `(("r" "bibliography reference" plain
      (file ,ps/file-orb-noter-template)
      :if-new
      (file ,ps/file-orb-capture-template)
      :unnarrowed t :immediate-finish t :jump-to-captured t)))

  ;; (org-roam-completion-everywhere t)

  :config
  (defvar ps/org-roam-excluded-dirs nil)
  (defvar ps/org-roam-excluded-files nil)

  (dolist (dir `(,ps/dir-anki
                 ,ps/dir-inactive
                 ,ps/dir-bibliographic-notes ; excluded since discoverable via `org-cite-insert'
                 ,ps/dir-archive))
    (push (file-relative-name dir ps/dir-org-roam) ps/org-roam-excluded-dirs))

  (dolist (file '("orb-noter-template.org"
                  "tareas.org"
                  "calendar.org"
                  "notatu-dignum.org"
                  "quotes-old.org"
                  ".org2blog.org"
                  "feeds.org"))
    (push file ps/org-roam-excluded-files))

  (setq org-roam-file-exclude-regexp
        (append
         ps/org-roam-excluded-dirs
         ps/org-roam-excluded-files
         '("conflicted copy [[:digit:]]\\{4\\}-[[:digit:]]\\{2\\}-[[:digit:]]\\{2\\})\\.org")))

  (setq org-roam-db-node-include-function
        (lambda ()
          (if (or
               ;; exclude selected tags
               (member "noid" (org-get-tags))
               (member "ARCHIVE" (org-get-tags))
               ;; exclude selected headings
               (member (org-get-heading) '("Local variables"
                                           "COMMENT Local variables"
                                           "TODO Local variables"
                                           "Evaluation"
                                           "History"
                                           "Further reading"
                                           "External links"
                                           "Related entries"
                                           "Archive :ARCHIVE:"))
               ;; exclude buffers when in list of special dirs and org
               ;; heading at point is of level higher than 1 (i.e.
               ;; don't create unnecessary IDs for article
               ;; subsections)
               (and
                ;; dir condition
                (member
                 (file-name-directory (buffer-file-name))
                 (mapcar #'file-name-as-directory
                         ;; List of special dirs
                         (list
                          ps/dir-journal)))
                ;; heading condition
                (> (org-current-level) 1))
               )
              nil
            t)))

  (defun ps/org-roam-db-query (sql &rest args)
    "Run SQL query on Org-roam database with ARGS.
 SQL can be either the emacsql vector representation, or a string."
    (sleep-for 0 1)
    (apply #'emacsql (org-roam-db) sql args))

  (advice-add 'org-roam-db-query :override #'ps/org-roam-db-query)
  (advice-add 'org-roam-node-find :before #'widen)
  (advice-add 'org-roam-node-find :after #'ps/org-narrow-to-entry-and-children)

  ;; org-roam.discourse.group/t/org-roam-v2-org-id-id-link-resolution-problem/1491/7
  (defun ps/org-roam-update-id-locations ()
    "Update org id locations indexed by org roam."
    (interactive)
    (org-id-update-id-locations (org-roam-list-files)))

  (defun ps/org-roam-remove-file-level-properties ()
    "Remove `ROAM_REFS' and `ID' properties from file-level drawer."
    (when (string= "r" (plist-get org-capture-plist :key))
      (goto-char (point-min))
      (unless (org-get-heading)
        ;; Take action with file-level properties only.
        (org-delete-property "ID")
        (org-delete-property "ROAM_REFS")
        (ps/org-jump-to-first-heading)
        (org-id-get-create))))

  (defun ps/org-roam-new-note (note-type)
    "Create a new `org-roam' note."
    (interactive
     (list
      (completing-read
       "Select note type: "
       '("generic" "person"))))
    (let ((tags)
          (directory))
      (cond ((string= note-type "generic")
             (setq tags "note")
             (setq directory ps/dir-notes))
            ((string= note-type "person")
             (setq tags "person")
             (setq directory ps/dir-people)))
      (let* ((name (read-from-minibuffer "Entry name: "))
             (slug (org-hugo-slug name))
             (filename (concat slug ".org")))
        (when (file-exists-p filename)
          (user-error (format "File `%s' already exists." filename)))
        (find-file (file-name-concat directory filename))
        (insert "#+title: " name "\n\n")
        (org-insert-heading)
        (insert name)
        (org-set-tags tags)
        (org-id-get-create)
        (ps/org-narrow-to-entry-and-children)
        (goto-char (point-max)))))

  (add-to-list 'completion-at-point-functions #'org-roam-complete-link-at-point)
  ;; (add-to-list 'completion-at-point-functions #'org-roam-complete-everywhere)

  ;; include transcluded links in `org-roam' backlinks
  (delete '(keyword "transclude") org-roam-db-extra-links-exclude-keys)

  (org-roam-db-autosync-mode -1)

  :hook
  (org-roam-capture-new-node-hook . orb--insert-captured-ref-h)
  (org-roam-capture-new-node-hook . org-roam-capture--insert-captured-ref-h)
  (org-capture-prepare-finalize-hook . ps/org-roam-remove-file-level-properties)

  :general
  ("A-H-n" 'ps/org-roam-new-note
   "H-j" 'org-roam-node-find
   "H-s-i" 'org-roam-node-insert)
  (org-mode-map
   "s-r" 'org-roam-buffer-toggle))
#+end_src


- Check [[https://www.reddit.com/r/emacs/comments/omxl6n/config_for_orgroam_v2/][this config]] (v 2.0)
- And [[https://github.com/alexkehayias/emacs.d/blob/master/init.el#L715][this one]] (by the author of [[https://notes.alexkehayias.com/][this notes repository]], created with org-roam)
- And [[https://takeonrules.com/2021/08/22/ever-further-refinements-of-org-roam-usage/][this post]]

*** TODO [#6] Turn all notes into lowercase unless uppercase is appropriate
:PROPERTIES:
:ID:       60F7D02B-ACBE-410C-9304-DBE5E4414B26
:END:

*** TODO [#4] Figure out how to search for files with a particular tag with ~org-roam~
:PROPERTIES:
:ID:       C4B5F6B8-9E88-43E0-ACA3-43954D2BA254
:Effort:   0:30
:END:
*** TODO [#5] Make ~org-roam-node-insert~ show full path
:PROPERTIES:
:ID:       D25E187C-C351-48D6-B617-0A6A0DF0869F
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 17:03]--[2022-07-15 Fri 17:33] =>  0:30
:END:

*** TODO [#4] Diagnose issue with idle timer
:PROPERTIES:
:Effort:   1:00
:ID:       C6B17ACE-E5CB-4997-97D7-8ACAA33E7895
:END:
Run org-roam with minimal config and see if the problem with idle times persist

*** TODO [#5] Investigate if org-roam has a way to resolve links when exporting
:PROPERTIES:
:Effort:   0:30
:ID:       83AA4CF2-A783-4C27-895F-C68EAE5AB456
:END:
So the links to other Wiki articles do not break.
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       59F8E3AC-CEB8-495D-8F6F-DACA6313F987
:END:
**** DONE Cancel Roam subscription
CLOSED: [2021-04-21 Wed 22:33] DEADLINE: <2021-04-22 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-21 Wed 22:33
:ID:       C717FC84-7343-45D4-8F12-72D2D2FF7FCC
:END:

**** DONE Configure org-roam v2 to update database only when idle: OrgRoam
CLOSED: [2021-07-23 Fri 18:31]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-23 Fri 18:31
:ID:       AF396BE7-2502-4641-ACE0-693360C05CC3
:END:
:LOGBOOK:
CLOCK: [2021-07-23 Fri 18:19]--[2021-07-23 Fri 18:31] =>  0:12
:END:

https://www.reddit.com/r/OrgRoam/comments/opmgpp/configure_orgroam_v2_to_update_database_only_when/

**** DONE Set up org-roam in multiple directories
CLOSED: [2021-07-26 Mon 12:28]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-26 Mon 12:28
:ID:       282319A0-D34D-46D9-B7E5-468E18013DB8
:END:
:LOGBOOK:
CLOCK: [2021-07-24 Sat 22:15]--[2021-07-24 Sat 22:37] =>  0:22
CLOCK: [2021-07-23 Fri 22:56]--[2021-07-23 Fri 23:30] =>  0:34
:END:
https://www.orgroam.com/manual.html#How-do-I-have-more-than-one-Org_002droam-directory_003f

For the time being, I should make sure everything works well using a single directory (the EA Wiki directory) and only do this when things are stable.

[2021-07-23 Fri 22:59] This explains how to have separate org-roam databases. What I want is to have a single database of links from files in different directories.

[2021-07-24 Sat 22:15] It's just a matter of using symlinks.
**** DONE [#4] Fix delay problem
CLOSED: [2021-11-30 Tue 21:08]
:PROPERTIES:
:Effort:   1:15
:ARCHIVE_TIME: 2021-11-30 Tue 21:08
:ID:       7712B9C0-E029-4675-89A9-A5D6BA6E6B16
:END:
:LOGBOOK:
CLOCK: [2021-11-30 Tue 20:12]--[2021-11-30 Tue 21:08] =>  0:56
CLOCK: [2021-11-30 Tue 19:53]--[2021-11-30 Tue 20:11] =>  0:18
CLOCK: [2021-11-21 Sun 14:06]--[2021-11-21 Sun 14:20] =>  0:14
CLOCK: [2021-11-21 Sun 12:20]--[2021-11-21 Sun 12:35] =>  0:15
CLOCK: [2021-10-03 Sun 10:57]--[2021-10-03 Sun 11:51] =>  0:54
:END:

[2021-11-21 Sun 14:06] Created symlinks for ~notes.org~, ~wiki-notes.org~ and ~wiki-entries.org~. Things I did:
- Deleted database
- Run ~(org-roam-setup)~ and went to have dinner.
  - When I returned 45 minutes later, it was at 99%. I left it for another 10 minutes and it was finally done.
- When I run ~(org-roam-buffer-toggle)~, it takes about ten seconds to open the org-roam buffer, and then it shows a "backlinks" section but underneath it shows the entire buffer, rather than the specific section.
  - But the ~org-roam-bibtex~ backlinks do not seem to be working. E.g. if I call the org-roam buffer with point on the notes buffer of /Stubborn attachments/, the org-roam buffer shows just one line with the title of the work.

I was still experiencing long delays after several restarts, so I'm deleting the symlinks. I don't know what else to do to make it work.

[[https://org-roam.discourse.group/t/org-roam-db-sync-hangs-with-processing-modified-files/2234][This]] may be relevant.

[2021-11-30 Tue 21:08] Fixed by moving to separate files.

**** DONE Create command to create new pages/nodes
CLOSED: [2021-12-06 Mon 21:37]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-06 Mon 21:37
:ID:       A7A25828-839E-4164-A8F7-3A296174FC9C
:END:
:LOGBOOK:
CLOCK: [2021-12-06 Mon 20:07]--[2021-12-06 Mon 21:37] =>  1:30
CLOCK: [2021-12-05 Sun 12:03]--[2021-12-05 Sun 13:34] =>  1:31
:END:

**** DONE Exclude temporary files from org-roam db
CLOSED: [2021-12-12 Sun 14:16]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-12 Sun 14:16
:ID:       F99876D8-AA30-410E-80E5-CAC371BDD32E
:END:
:LOGBOOK:
CLOCK: [2021-12-05 Sun 14:52]--[2021-12-05 Sun 15:15] =>  0:23
:END:
These are files beginning with ~.#~.

I installed the ~no-littering~ package and changed the auto-save path using the code [[https://github.com/emacscollective/no-littering#auto-save-settings][here]].

The above didn't work because, as I now realize, the files causing the conflict are /lockfiles/, which aren't handled by ~no-littering~. I excluded them from the ~org-roam~ database with ~(org-roam-file-exclude-regexp "^\\.#.*")~. Waiting to see if this fixes the issue.

**** DONE Exclude Leo's files from ~org-roam~
CLOSED: [2021-12-12 Sun 14:17]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-12 Sun 14:17
:ID:       CF18E055-D27B-4271-8D8C-1D15065D285B
:END:
:LOGBOOK:
CLOCK: [2021-12-03 Fri 16:29]--[2021-12-03 Fri 16:46] =>  0:17
:END:
**** DONE Exclude temporary files from the ~org-roam~ database
CLOSED: [2021-12-12 Sun 14:18]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-12 Sun 14:18
:ID:       603ED280-D157-46C1-8181-FD73973D5D92
:END:
:LOGBOOK:
CLOCK: [2021-12-03 Fri 18:51]--[2021-12-03 Fri 19:03] =>  0:12
:END:
Not sure if this is necessary. org-roam-file-exclude-regexp
**** DONE Fix performance issues
CLOSED: [2021-12-15 Wed 10:20]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-15 Wed 10:20
:ID:       6FD2F535-5A9B-4946-8AE5-C59CAAA5CCAC
:END:
:LOGBOOK:
CLOCK: [2021-12-15 Wed 10:05]--[2021-12-15 Wed 10:20] =>  0:15
:END:
I now use an idle timer instead of hooks.
**** DONE [#5] Improve appearance of menu in ~org-roam-node-find~
CLOSED: [2022-06-19 Sun 21:52]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2022-06-19 Sun 21:52
:ID:       CB60C6A6-15C3-43B6-B8A0-768C5F4E8A2E
:END:
:LOGBOOK:
CLOCK: [2021-12-02 Thu 19:52]--[2021-12-02 Thu 20:56] =>  1:04
:END:
Left a comment [[https://github.com/org-roam/org-roam/issues/1640?notification_referrer_id=MDE4Ok5vdGlmaWNhdGlvblRocmVhZDIxOTMyMTYyMjk6NTQ5MDY3Nw%3D%3D&notifications_query=is%3Adone#issuecomment-985582391][here]]. Maybe someone with more knowledge will reply?
**** DONE [#5] Decide whether to always create IDs for new nodes and tasks
CLOSED: [2022-07-15 Fri 17:05]
:PROPERTIES:
:Effort:   0:30
:ID:       D50CBB7A-743E-4C8D-A8F5-3E958C0CD5D5
:ARCHIVE_TIME: 2022-07-15 Fri 17:05
:END:
:LOGBOOK:
CLOCK: [2022-06-24 Fri 11:26]--[2022-06-24 Fri 11:46] =>  0:20
CLOCK: [2022-06-24 Fri 11:14]--[2022-06-24 Fri 11:22] =>  0:08
:END:
[2022-06-24 Fri 11:17] I currently lean toward just relying on the [[id:51E91355-66E0-479C-B616-116EF261F930][org-id]] hook, which will automatically add an ID to any new heading.

[2022-07-15 Fri 17:05] Relying on hook.
**** DONE [#5] Tweak ~org-roam-node-find~ so that it isn't affected if target buffer is narrowed
CLOSED: [2022-07-15 Fri 17:05]
:PROPERTIES:
:Effort:   0:25
:ID:       B5F5765C-7452-444B-9427-07A0DC048861
:ARCHIVE_TIME: 2022-07-15 Fri 17:05
:END:
:LOGBOOK:
CLOCK: [2022-02-21 Mon 13:41]--[2022-02-21 Mon 13:58] =>  0:17
:END:
Check ~ps/org-refile-jump~ for inspiration.
**** DONE [#5] Look into Org roam dailies
CLOSED: [2022-09-06 Tue 13:53]
:PROPERTIES:
:Effort:   0:20
:ID:       6A75013E-9342-42FB-86A9-3227C1C091B0
:ARCHIVE_TIME: 2022-09-06 Tue 13:53
:END:

**** DONE [#4] Implement relevant parts of this workflow
CLOSED: [2022-11-04 Fri 19:07]
:PROPERTIES:
:ID:       7004CF1B-E3A4-47AF-AC5E-160ABF2F7F78
:Effort:   0:30
:ARCHIVE_TIME: 2022-11-04 Fri 19:07
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 20:57]--[2022-06-21 Tue 21:48] =>  0:51
:END:
[cite:@pragmat1c12022OrgroamAbsolutelyFantastic]

**** DONE [#5] Check out Org transclusion
CLOSED: [2023-01-02 Mon 20:38]
:PROPERTIES:
:ID:       69D13455-DC87-4BB5-9765-404A32F4F153
:ARCHIVE_TIME: 2023-01-02 Mon 20:38
:END:
**** CANCELLED [#6] Remove IDs from child headings
CLOSED: [2023-01-14 Sat 20:06]
:PROPERTIES:
:Effort:   0:30
:ID:       FB1FD9AE-C82B-4D51-93E9-ECC40D2065D9
:ARCHIVE_TIME: 2023-01-14 Sat 20:07
:END:
:LOGBOOK:
CLOCK: [2021-12-03 Fri 18:16]--[2021-12-03 Fri 18:37] =>  0:21
:END:
This will allow me to use org roam search commands to find notes easily. I can always use ~helm-org-ql~ or ~helm-org-rifle~ if I need more fine-grained search. I guess I can also use ~helm-for-files~.

[2021-12-03 Fri 21:36] I'm not sure this is necessary, because ~org-roam~ (for better or for worse) doesn't display duplicate headings. Although other tools, such as ~helm-org-ql~ and ~helm-org-rifle~ do.

[2023-01-14 Sat] I have now switched to a different approach: I add IDs to all headings, without exception, but then exclude them via the functions ~org-roam-file-exclude-regexp~ and ~org-roam-db-node-include-function~. So I'm marking this as ~CANCELLED~.

** org-roam-ui
:PROPERTIES:
:ID:       BAEADCA3-68C6-4B59-A45A-7A1C11C6F6BB
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 22:29]--[2021-08-02 Mon 22:29] =>  0:00
:END:
/[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] is a graphical frontend for exploring org-roam./
#+begin_src emacs-lisp :results silent
(use-package org-roam-ui
  :straight
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save nil)
  (org-roam-ui-open-on-start nil))
#+end_src

** org-roam-browser-extension
:PROPERTIES:
:ID:       5461B907-53F6-4D99-B70C-45E9C3902EB4
:END:
[[https://github.com/madnificent/org-roam-browser-extension][org-roam-browser-extension]] indicates via a browser icon whether you have ~org-roam~ notes on the web page you are visiting.

I should check this out.

** org-transclusion
:PROPERTIES:
:ID:       8D8E5E44-248E-485F-9C74-E1D7A8A19D15
:END:
/[[https://github.com/nobiot/org-transclusion][org-transclusion]] supports [[https://en.wikipedia.org/wiki/Transclusion][transclusion]] with org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-transclusion
  :after org
  :defer 5

  :config
  (dolist (element '(headline drawer property-drawer))
    (push element org-transclusion-exclude-elements))

  (face-spec-set 'org-transclusion-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  (face-spec-set 'org-transclusion-source-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  :general
  ("s-l" 'org-transclusion-add-all))
#+end_src

** vulpea                                                     :project:
:PROPERTIES:
:ID:       697CE296-FAA8-4485-94D8-B1321B59226F
:END:
:LOGBOOK:
CLOCK: [2022-10-10 Mon 14:36]--[2022-10-10 Mon 15:31] =>  0:55
CLOCK: [2022-07-17 Sun 08:54]--[2022-07-17 Sun 09:27] =>  0:33
CLOCK: [2022-06-27 Mon 12:10]--[2022-06-27 Mon 12:31] =>  0:21
CLOCK: [2022-05-08 Sun 08:45]--[2022-05-08 Sun 09:07] =>  0:22
CLOCK: [2021-12-14 Tue 19:46]--[2021-12-14 Tue 20:06] =>  0:20
:END:
[[https://github.com/d12frosted/vulpea][vulpea]] is a collection of functions for note taking based on ~org~ and ~org-roam~.
#+transclude: [[id:5461B907-53F6-4D99-B70C-45E9C3902EB4][org-roam-browser-extension]] 

#+begin_src emacs-lisp :results silent
(use-package vulpea
  :commands (vulpea-buffer-p vulpea-agenda-files-update vulpea-buffer-prop-get-list vulpea-project-update-tag)
  :config
  ;; everything below adapted from d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html
  (defun ps/vulpea-project-p ()
    "Return non-nil if current buffer has a TODO, a schedule or a deadline.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (when (eq major-mode 'org-mode)
      (org-element-map
          (org-element-parse-buffer 'headline)
          'headline
        (lambda (headline)
          (or
           (eq (org-element-property :todo-type headline)
               'todo)
           (org-element-property :scheduled headline)
           (org-element-property :deadline headline)))
        nil
        'first-match)))

  (defun ps/vulpea-anniversary-p ()
    "Return non-nil if current buffer has an anniversary."
    (when (eq major-mode 'org-mode)
      (save-excursion
        (goto-char (point-min))
        (search-forward "%%(org-anniversary" nil t))))

  (defun ps/vulpea-priority-p ()
    "Return non-nil if current buffer has a heading with a priority.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (when (eq major-mode 'org-mode)
      (org-element-map
          (org-element-parse-buffer 'headline)
          'headline
        (lambda (headline)
          (org-element-property :priority headline))
        nil
        'first-match)))

  (defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (or (ps/vulpea-project-p) (ps/vulpea-anniversary-p))
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files
          (seq-difference
           (delete-dups (append
                         (org-agenda-files)
                         (vulpea-project-files)))
                         ;; include files modified in past three days,
                         ;; provided number of such files less than 1000
                         ;; (ps/org-roam-recent 1 1000)))
           ps/org-agenda-files-excluded)))

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  :hook
  (find-file-hook . vulpea-project-update-tag)
  (before-save-hook . vulpea-project-update-tag))
#+end_src

*** TODO [#5] Revise ~vulpea-project-p~ function so that it excludes buffers tagged ~excluded~
SCHEDULED: <2023-02-01 Wed .+4m>
:PROPERTIES:
:Effort:   0:40
:LAST_REPEAT: [2022-10-01 Sat 22:24]
:ID:       CB3BFBD7-F63F-4CF1-BCBE-248C2F583E62
:END:
:LOGBOOK:
CLOCK: [2022-10-01 Sat 22:24]--[2022-10-01 Sat 22:24] =>  0:00
CLOCK: [2022-07-28 Thu 13:10]--[2022-07-28 Thu 13:10] =>  0:00
CLOCK: [2022-06-28 Tue 13:14]--[2022-06-28 Tue 13:15] =>  0:01
CLOCK: [2022-05-28 Sat 16:47]--[2022-05-28 Sat 16:47] =>  0:00
CLOCK: [2022-04-28 Thu 13:49]--[2022-04-28 Thu 13:49] =>  0:00
CLOCK: [2022-03-28 Mon 10:22]--[2022-03-28 Mon 10:22] =>  0:00
CLOCK: [2022-02-28 Mon 18:02]--[2022-02-28 Mon 18:02] =>  0:00
CLOCK: [2022-01-27 Thu 14:23]--[2022-01-27 Thu 14:24] =>  0:01
CLOCK: [2021-12-03 Fri 16:46]--[2021-12-03 Fri 17:03] =>  0:17
:END:
Asked question [[https://org-roam.discourse.group/t/how-to-query-the-database-for-files-having-one-tag-but-missing-another/2256][here]]. Check for answers every four months.

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       8CBE5449-7E42-4D7A-841B-E73249BBAF47
:END:
**** DONE Restrict ~org-agenda~ files to files with TODOs
CLOSED: [2021-11-30 Tue 23:39]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-30 Tue 23:39
:ID:       24BF3071-F827-44C8-8D92-6A027B7E30FF
:END:
:LOGBOOK:
CLOCK: [2021-11-30 Tue 21:58]--[2021-11-30 Tue 23:39] =>  1:41
CLOCK: [2021-11-30 Tue 21:21]--[2021-11-30 Tue 21:54] =>  0:33
CLOCK: [2021-11-30 Tue 21:14]--[2021-11-30 Tue 21:16] =>  0:02
:END:

**** DONE Restrict ~org-agenda~ files to files modified in past day
CLOSED: [2021-12-01 Wed 16:53]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-01 Wed 16:53
:ID:       95E2817B-B55E-43DE-8CA3-8E1664881137
:END:
:LOGBOOK:
CLOCK: [2021-12-01 Wed 15:28]--[2021-12-01 Wed 16:53] =>  1:25
CLOCK: [2021-12-01 Wed 12:25]--[2021-12-01 Wed 13:31] =>  1:06
:END:
**** DONE Learn how to use ~org-element-api~
CLOSED: [2021-12-14 Tue 19:08]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-14 Tue 19:08
:ID:       143FBEE3-C6E3-4522-AD2F-0BE4F2998174
:END:
:LOGBOOK:
CLOCK: [2021-12-14 Tue 18:38]--[2021-12-14 Tue 19:08] =>  0:30
:END:
It turns out it was just a matter of creating a disjunction in the original ~vulpea-project-p~ function and adding ~(org-element-property :scheduled headline)~ as the second disjunct.
**** DONE [#4] Revise function so that it checks for items with schedule or deadline, even if they aren't a TODO
CLOSED: [2021-12-14 Tue 19:08]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2021-12-14 Tue 19:08
:ID:       933740E3-3A67-4968-96CF-8A9E04F1F64D
:END:
:LOGBOOK:
CLOCK: [2021-12-14 Tue 18:25]--[2021-12-14 Tue 18:38] =>  0:13
:END:
**** DONE [#5] Debug ~rx ‘**’ range error~
CLOSED: [2022-07-26 Tue 22:12]
:PROPERTIES:
:Effort:   1:00
:ID:       1ECD2822-BF94-4DFA-A98F-5B76C0B4F8C1
:ARCHIVE_TIME: 2022-07-26 Tue 22:12
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 16:09]--[2022-07-15 Fri 17:03] =>  0:54
:END:
It is triggered erratically in many org contexts (e.g. ~org-ref~), but reliably when opening the variables file (~/-z~). So you can bisect the init file and keep opening that file until the trigger is isolated.

[2022-07-16 Sat 15:34] See also [[https://list.orgmode.org/orgmode/CAEDXn+LWf83vs8rhfVKXaEe1heH4hauKaGA5C=Ynj=8EjLmgQg@mail.gmail.com/][this]].

[2022-07-16 Sat 23:05] I think I managed to diagnose the issue: it seems to originate in the function ~vulpea-project-update-tag~, which is triggered by ~find-file-hook~ and ~before-save-hook~. When the hooks are disabled, the issue appears to disappear. Next step is to check [[https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e][this thread]], which might help me gain more clarity about the issue and identify potential next actions.


** org-noter
:PROPERTIES:
:NOTER_DOCUMENT: ../library.org
:ID:       A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7
:END:
:LOGBOOK:
CLOCK: [2022-01-05 Wed 16:03]--[2022-01-05 Wed 16:11] =>  0:08
CLOCK: [2021-07-27 Tue 20:55]--[2021-07-27 Tue 22:17] =>  1:22
CLOCK: [2021-07-27 Tue 19:42]--[2021-07-27 Tue 20:15] =>  0:33
CLOCK: [2021-07-26 Mon 23:12]--[2021-07-26 Mon 23:29] =>  0:17
CLOCK: [2021-07-26 Mon 22:41]--[2021-07-26 Mon 23:03] =>  0:22
CLOCK: [2021-07-26 Mon 22:15]--[2021-07-26 Mon 22:32] =>  0:17
CLOCK: [2021-07-25 Sun 22:51]--[2021-07-25 Sun 22:55] =>  0:04
CLOCK: [2021-07-18 Sun 10:41]--[2021-07-18 Sun 11:09] =>  0:28
CLOCK: [2021-07-17 Sat 19:16]--[2021-07-17 Sat 19:52] =>  0:36
CLOCK: [2021-07-17 Sat 12:42]--[2021-07-17 Sat 13:24] =>  0:42
:END:
to make it work with org-ref: https://github.com/weirdNox/org-noter/issues/45#issuecomment-473222626

https://github.com/weirdNox/org-noter

Remember that you should create the notes file using ~bibtex-completion~! Then you can launch ~org-noter~, which will recognize the file created. If you launch it before a file has been created, ~org-noter~ will create a new file which ~bibtex-completion~ won't recognize.

#+begin_src emacs-lisp :results silent
(use-package org-noter
  :custom
  (org-noter-notes-search-path `(,ps/dir-bibliographic-notes))
  (org-noter-auto-save-last-location t)
  (org-noter-always-create-frame nil)
  ;; (org-noter-property-doc-file "file") ;; change to this once everything is working
  (org-noter-separate-notes-from-heading t)
  :general
  (pdf-annot-minor-mode-map
   "s-s" 'org-noter-create-skeleton))
#+End_src

- To check: https://org-roam.discourse.group/t/org-roam-bibtex-in-a-sub-directory/649/5
- https://notes.andymatuschak.org/About_these_notes

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       DA95C162-B8B0-4A31-95A8-A1D6F890FC3E
:END:
**** DONE Customizable variable for note template? · Issue #45 · weirdNox/org-noter
CLOSED: [2021-07-26 Mon 23:27]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-26 Mon 23:27
:ID:       4B750C56-F093-4570-AAC3-0669405EEFDC
:END:

https://github.com/weirdNox/org-noter/issues/45

**** DONE Diagnose why ~org-noter~ is creating additional frames
CLOSED: [2021-08-17 Tue 10:43]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-17 Tue 10:43
:ID:       A2E87674-7289-4F2D-A64D-E6EE80B8BA96
:END:
I've set ~org-noter-always-create-frame~ to ~nil~ but a new frame is still created.

- Run on a minimal configuration and see what happens.

[2021-08-17 Tue 10:42] Mysteriously, the issue is now. For reference, here's the current config:

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-noter
  :demand t
  :custom
  (org-noter-notes-search-path `(,ps/dir-bibliographic-notes))
  (org-noter-auto-save-last-location t)
  (org-noter-always-create-frame nil)
  (org-noter-separate-notes-from-heading t)
  :general
  ("H-A-n" 'org-noter))
#+End_src

* reference & citation
:PROPERTIES:
:ID:       4939B006-F4F6-4A5C-9B78-85C998FDA7D8
:END:
See [[https://github.com/emacs-citar/citar/wiki/Comparisons#summary-of-diverse-emacs-bibliographic-and-citation-packages][this section]] of [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]]'s manual for a handy summary of the main bibliographic and citation Emacs packages.

** variables
:PROPERTIES:
:ID:       D7DC16B2-6DA8-4D9C-8B15-491230005A30
:END:
#+begin_src emacs-lisp :results silent
(defvar ps/library-genesis
  '("Library Genesis"
    "https://libgen.lc/index.php?req="
    "&phrase=1&view=simple&column=def&sort=extension&sortmode=DESC"))

(defvar ps/amazon
  '("Amazon"
    "https://smile.amazon.com/s?k="
    "&i=stripbooks"))

(defvar ps/worldcat
  '("Worldcat"
    "https://www.worldcat.org/search?q="
    "&itemType=book&limit=50&offset=1"))

(defvar ps/internet-archive
  '("Internet Archive"
    "https://archive.org/search.php?query="
    ""))

(defvar ps/university-of-toronto
  '("University of Toronto"
    "https://librarysearch.library.utoronto.ca/discovery/search?query=any,contains,"
    "&tab=Everything&search_scope=UTL_AND_CI&vid=01UTORONTO_INST:UTORONTO&offset=0"))

(defvar ps/hathitrust
  '("HathiTrust"
    "https://babel.hathitrust.org/cgi/ls?q1="
    "&field1=ocr;a=srchls;lmt=ft;sz=100"))

(defvar ps/connected-papers
  '("Connected Papers"
    "https://www.connectedpapers.com/search?q="
    ""))

(defvar ps/google-scholar
  '("Google Scholar"
    "https://scholar.google.com/scholar?q="
    ""))

(defvar ps/wikipedia
  '("Google Scholar"
    "http://en.wikipedia.org/w/index.php?title=Special%3ASearch&profile=default&search="
    "&fulltext=Search"))

(defvar ps/goodreads
  '("Goodreads"
    "https://www.goodreads.com/search?q="
    ""))

(defvar ps/ebib-search-book
  '(ps/ebib-search-goodreads
    ps/ebib-search-hathitrust
    ps/ebib-search-internet-archive
    ps/ebib-search-university-of-toronto
    ps/ebib-search-library-genesis
    ps/ebib-search-amazon))

(defvar ps/ebib-download-book
  '(ps/ebib-search-hathitrust
    ps/ebib-search-internet-archive
    ps/ebib-search-university-of-toronto
    ps/ebib-search-library-genesis))

(defvar ps/ebib-search-article
  '(ps/ebib-search-connected-papers
    ps/ebib-search-google-scholar))
#+end_src

** oc
:PROPERTIES:
:ID:       8AF25840-AC38-4FF7-A45F-F01B96C5DF5A
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 15:20]--[2022-06-22 Wed 15:26] =>  0:06
CLOCK: [2021-07-26 Mon 15:14]--[2021-07-26 Mon 15:56] =>  0:42
CLOCK: [2021-07-26 Mon 14:01]--[2021-07-26 Mon 14:26] =>  0:25
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc
  :demand t
  :custom
  (org-cite-global-bibliography `(,ps/file-bibliography-new
                                  ,ps/file-bibliography-old))
  (org-cite-csl-styles-dir ps/dir-csl-styles)
  (org-cite-csl-locales-dir ps/dir-csl-locales)
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar) ; `org-open-at-point` integration
  (org-cite-activate-processor 'citar) ;
  (org-cite-export-processors
   '(
     (md csl "effective-altruism-wiki-markdown.csl" "effective-altruism-wiki-markdown.csl")      ; Footnote reliant
     (latex csl "effective-altruism-wiki-markdown.csl" "effective-altruism-wiki-markdown.csl")   ; For philosophy
     (odt csl "effective-altruism-wiki-markdown.csl" "effective-altruism-wiki-markdown.csl")     ; Footnote reliant
     (docx csl "effective-altruism-wiki-markdown.csl" "effective-altruism-wiki-markdown.csl")    ; Footnote reliant
     (t csl "american-medical-association-brackets.csl")       ; Fallback
     ))

  :config
  ;; Comment out `org-cite--allowed-p' condition to allow invocation
  ;; in any mode. Even if inserting a citation is not allowed, one may
  ;; want to invoke the command to trigger contextual actions via
  ;; `embark'.
  (defun ps/org-cite-insert (arg)
    "Insert a citation at point.
Insertion is done according to the processor set in `org-cite-insert-processor'.
ARG is the prefix argument received when calling interactively the function."
    (interactive "P")
    (unless org-cite-insert-processor
      (user-error "No processor set to insert citations"))
    (org-cite-try-load-processor org-cite-insert-processor)
    (let ((name org-cite-insert-processor))
      (cond
       ((not (org-cite-get-processor name))
        (user-error "Unknown processor %S" name))
       ((not (org-cite-processor-has-capability-p name 'insert))
        (user-error "Processor %S cannot insert citations" name))
       (t
        (let ((context (org-element-context))
              (insert (org-cite-processor-insert (org-cite-get-processor name))))
          (cond
           ((memq (org-element-type context) '(citation citation-reference))
            (funcall insert context arg))
           (t
            (org-cite--allowed-p context)
            (funcall insert nil arg))))))))

  (advice-add 'org-cite-insert :override #'ps/org-cite-insert)

  :general
  ("H-/" 'org-cite-insert))
#+end_src

*** Resources
:PROPERTIES:
:ID:       8EA82227-F7EF-4C46-B40C-C5DE40F13130
:END:

- [cite:@Balintona2022CitationsOrgmodeOrgcite]. The most comprehensive explanation I'm aware of about how to use ~org-cite~. See [[https://www.reddit.com/r/orgmode/comments/vc7ys6/how_i_run_my_wiki_with_org_mode/][Reddit discussion]].
- [cite:@Kolsc2021HowActuallyInsert]. Reddit thread about the basics of ~org-cite~.

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       99B1B771-2330-4DE7-A25F-362E8857A779
:END:
**** DONE Read [cite:Tecosaur2021July2021]
CLOSED: [2021-08-29 Sun 13:05]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-29 Sun 13:05
:ID:       1F2C63A8-0BA9-49E5-9940-6D2EF96CBE19
:END:

**** DONE Replace [[id:35FB5BB5-6552-48C6-983A-F90011CCA908][org-ref]] citations with [[id:8AF25840-AC38-4FF7-A45F-F01B96C5DF5A][oc]] citations
CLOSED: [2022-06-28 Tue 14:09]
:PROPERTIES:
:ID:       68978095-A0D3-47A2-ABA8-AEEBCA83F600
:ARCHIVE_TIME: 2022-07-03 Sun 12:48
:END:
:LOGBOOK:
CLOCK: [2022-06-28 Tue 13:50]--[2022-06-28 Tue 14:09] =>  0:19
:END:
**** DONE [#5] Create command to search [[https://www.connectedpapers.com/][Connected Papers]]
CLOSED: [2022-09-06 Tue 13:56]
:PROPERTIES:
:Effort:   0:20
:ID:       6F2041CC-A315-4773-B7F4-FB16DC84AAA5
:ARCHIVE_TIME: 2022-09-06 Tue 13:56
:END:
:LOGBOOK:
CLOCK: [2022-09-06 Tue 13:54]--[2022-09-06 Tue 13:56] =>  0:02
:END:
**** CANCELLED [#5] Diagnose error message I get every time I try to open a PDF
CLOSED: [2022-09-22 Thu 15:13]
:PROPERTIES:
:Effort:   0:30
:ID:       E38AE3CE-E43D-49D5-984A-490661AF186E
:ARCHIVE_TIME: 2022-09-22 Thu 15:13
:END:
** oc-basic
:PROPERTIES:
:ID:       DD72A5D8-057E-4945-8EF0-E681904731D4
:END:
#+begin_src emacs-lisp :results silent
(use-feature oc-basic
  :after oc
  :demand t)
#+end_src

** oc-bibtex
:PROPERTIES:
:ID:       5515E05E-1A8F-40F1-B19F-BD48925C6679
:END:
#+begin_src emacs-lisp :results silent
(use-feature oc-bibtex
  :after oc
  :demand t)
#+end_src

** oc-biblatex
:PROPERTIES:
:ID:       126F2E2D-537E-45A0-8DD6-56B8FF69176D
:END:
:LOGBOOK:
:END:
#+begin_src emacs-lisp :results silent
(use-feature oc-biblatex
  :after oc
  :demand t)
#+end_src

** oc-csl
:PROPERTIES:
:ID:       72710244-0369-4C12-8B83-0674EE0E11D5
:END:
#+begin_src emacs-lisp :results silent
(use-feature oc-csl
  :after oc
  :demand t)
#+end_src

** citeproc
:PROPERTIES:
:ID:       2BB202FC-87DE-4563-B059-01680F8A2CB6
:END:
:LOGBOOK:
CLOCK: [2022-06-24 Fri 12:23]--[2022-06-24 Fri 12:31] =>  0:08
:END:

#+begin_src emacs-lisp :results silent
(use-package citeproc
  :demand t)
#+end_src

** bibtex
:PROPERTIES:
:ID:       42191633-D2A1-4EDB-903F-3965ECB61510
:END:
:LOGBOOK:
CLOCK: [2022-07-16 Sat 16:38]--[2022-07-16 Sat 16:44] =>  0:06
:END:
/bibtex is major mode for editing and validating BibTeX ~.bib~ files./

#+begin_src emacs-lisp :results silent
(use-feature bibtex
  :demand t
  :custom
  ;; This corresponds (roughly?) to `auth+year+shorttitle(3,3)' on Better BibTeX
  ;; retorque.re/zotero-better-bibtex/citing/
  (bibtex-autokey-names 1)
  (bibtex-autokey-name-case-convert 'capitalize)
  (bibtex-autokey-year-length 4)
  (bibtex-autokey-titlewords 3)
  (bibtex-autokey-titlewords-stretch 0)
  (bibtex-autokey-titleword-ignore '("A" "a" "An" "an" "On" "on" "The" "the" "Eine?" "Der" "Die" "Das" "El" "La" "Lo" "Los" "Las" "Un" "Una" "Unos" "Unas" "el" "la" "lo" "los" "las" "un" "una" "unos" "unas" "y" "o" "Le" "La" "L'" "Les" "Un" "Une" "Des" "Du" "De la" "De l'" "Des" "le" "la" "l'" "les" "un" "une" "des" "du" "de la" "de l'" "des" "Lo" "Il" "La" "L'" "Gli" "I" "Le" "Uno" "lo" "il" "la" "l'" "gli" "i" "le" "uno"))
  (bibtex-autokey-title-terminators "[.!?;]\\|--")
  (bibtex-autokey-titleword-case-convert 'capitalize)
  (bibtex-autokey-titleword-length nil)
  (bibtex-autokey-titleword-separator "")
  (bibtex-autokey-year-title-separator "")
  (bibtex-autokey-preserve-case t)
  ;; Remove accents
  (bibtex-autokey-before-presentation-function 'ps/bibtex-asciify-string)
  (bibtex-entry-format '(opts-or-alts numerical-fields realign))

  :config
  ;; Copied from xahlee.info/emacs/emacs/emacs_zap_gremlins.html
  (defun ps/bibtex-asciify-text (&optional Begin End)
    "Remove accents in some letters. e.g. café → cafe.
Change European language characters into equivalent ASCII ones.
When called interactively, work on current line or text selection.

URL `http://xahlee.info/emacs/emacs/emacs_zap_gremlins.html'
Version 2018-11-12 2021-09-17"
    (interactive)
    (let (($charMap
           [
            ["ß" "ss"]
            ["á\\|à\\|â\\|ä\\|ā\\|ǎ\\|ã\\|å\\|ą\\|ă\\|ạ\\|ả\\|ả\\|ấ\\|ầ\\|ẩ\\|ẫ\\|ậ\\|ắ\\|ằ\\|ẳ\\|ặ" "a"]
            ["æ" "ae"]
            ["ç\\|č\\|ć" "c"]
            ["é\\|è\\|ê\\|ë\\|ē\\|ě\\|ę\\|ẹ\\|ẻ\\|ẽ\\|ế\\|ề\\|ể\\|ễ\\|ệ" "e"]
            ["í\\|ì\\|î\\|ï\\|ī\\|ǐ\\|ỉ\\|ị" "i"]
            ["ñ\\|ň\\|ń" "n"]
            ["ó\\|ò\\|ô\\|ö\\|õ\\|ǒ\\|ø\\|ō\\|ồ\\|ơ\\|ọ\\|ỏ\\|ố\\|ổ\\|ỗ\\|ộ\\|ớ\\|ờ\\|ở\\|ợ" "o"]
            ["ú\\|ù\\|û\\|ü\\|ū\\|ũ\\|ư\\|ụ\\|ủ\\|ứ\\|ừ\\|ử\\|ữ\\|ự"     "u"]
            ["ý\\|ÿ\\|ỳ\\|ỷ\\|ỹ"     "y"]
            ["þ" "th"]
            ["ď\\|ð\\|đ" "d"]
            ["ĩ" "i"]
            ["ľ\\|ĺ\\|ł" "l"]
            ["ř\\|ŕ" "r"]
            ["š\\|ś" "s"]
            ["ť" "t"]
            ["ž\\|ź\\|ż" "z"]
            [" " " "]       ; thin space etc
            ["–" "-"]       ; dash
            ["—\\|一" "--"] ; em dash etc
            ])
          ($p1 (if Begin Begin
                 (if (region-active-p)
                     (region-beginning)
                   (line-beginning-position))))
          ($p2 (if End End
                 (if (region-active-p)
                     (region-end)
                   (line-end-position)))))
      (let ((case-fold-search t))
        (save-restriction
          (narrow-to-region $p1 $p2)
          (mapc
           (lambda ($pair)
             (goto-char (point-min))
             (while (re-search-forward (elt $pair 0) (point-max) t)
               (replace-match (elt $pair 1))))
           $charMap)))))

  (defun ps/bibtex-asciify-string (String)
    "Returns a new string. e.g. café → cafe.
See `xah-asciify-text'
Version 2015-06-08"
    (with-temp-buffer
      (insert String)
      (ps/bibtex-asciify-text (point-min) (point-max))
      (buffer-string)))

  ;; tweak function so that `bibtex-autokey-get-field' looks up `urldate' field
  (defun ps/bibtex-autokey-get-year ()
    "Return year field contents as a string obeying `bibtex-autokey-year-length'."
    (let* ((str (bibtex-autokey-get-field '("date" "year" "urldate"))) ; possibly ""
           (year (or (and (iso8601-valid-p str)
                          (let ((year (decoded-time-year (iso8601-parse str))))
                            (and year (number-to-string year))))
                     ;; BibTeX permits a year field "(about 1984)", where only
                     ;; the last four nonpunctuation characters must be numerals.
                     (and (string-match "\\([0-9][0-9][0-9][0-9]\\)[^[:alnum:]]*\\'" str)
                          (match-string 1 str))
                     (user-error "Year or date field `%s' invalid" str))))
      (substring year (max 0 (- (length year) bibtex-autokey-year-length)))))

  (defun ps/bibtex-get-key ()
    "Return the key of the current BibTeX entry."
    (save-excursion
      (save-restriction
        (bibtex-narrow-to-entry)
        (goto-char (point-min))
        (if (re-search-forward "@\\w+{\\([^,]+\\),")
            (match-string-no-properties 1)
          (user-error "Not on a BibTeX entry")))))

  (advice-add 'bibtex-autokey-get-year :override #'ps/bibtex-autokey-get-year)

  ;; Add custom 'video' field
  (push '("Video" "Video file"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("subtitle")
           ("titleaddon")
           ("language")
           ("version")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate"))) bibtex-biblatex-entry-alist)

  (push '("Movie" "Film"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("abstract")
          ("keywords")
           ("titleaddon")
           ("language")
           ("version")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate"))) bibtex-biblatex-entry-alist)

  :general
  (bibtex-mode-map
   "A-C-H-x" 'bibtex-copy-entry-as-kill
   "A-C-H-c" 'bibtex-kill-entry
   "A-C-H-a" 'bibtex-copy-field-as-kill
   "A-C-H-f" 'bibtex-kill-field
   "A-C-s-r" 'bibtex-previous-entry
   "A-C-s-f" 'bibtex-next-entry))
#+end_src

*** TODO Standardize author names in bibtex file
:PROPERTIES:
:ID:       8B243BA8-8CA1-4E6F-82CA-5CD950D8C498
:END:
*** CANCELLED Figure out why the line at the top of ~old.bib~ is deleted
CLOSED: [2022-12-26 Mon 17:17]
:PROPERTIES:
:ID:       704615F4-0253-4992-BE50-268C40F5B9C4
:END:
I'm dealing with this with a directory-local variable.
** bibtex-completion
:PROPERTIES:
:ID:       DCD9D75D-7814-49D8-A3E0-33846D5A08FD
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 15:10]--[2022-05-29 Sun 15:15] =>  0:05
CLOCK: [2021-11-08 Mon 18:40]--[2021-11-08 Mon 18:53] =>  0:13
CLOCK: [2021-08-24 Tue 12:02]--[2021-08-24 Tue 12:11] =>  0:09
CLOCK: [2021-07-14 Wed 20:44]--[2021-07-14 Wed 21:21] =>  0:37
CLOCK: [2021-07-13 Tue 22:42]--[2021-07-13 Tue 23:08] =>  0:26
CLOCK: [2021-07-13 Tue 15:32]--[2021-07-13 Tue 16:01] =>  0:29
CLOCK: [2021-07-11 Sun 15:41]--[2021-07-11 Sun 15:42] =>  0:01
CLOCK: [2021-07-10 Sat 22:16]--[2021-07-10 Sat 22:49] =>  0:33
CLOCK: [2021-07-10 Sat 22:07]--[2021-07-10 Sat 22:07] =>  0:00
:END:
/[[https://github.com/tmalsburg/helm-bibtex][bibtex-completion]] is a backend for searching and managing bibliographies in Emacs./

The package is required by [[id:EC73B84D-530E-4179-BB67-F19110A543DF][org-roam-bibtex]].

#+begin_src emacs-lisp :results silent
(use-package bibtex-completion
  ;; :after citar
  :demand t
  :custom
  (bibtex-completion-pdf-open-function 'find-file)
  (bibtex-completion-bibliography org-cite-global-bibliography)
  (bibtex-completion-notes-path ps/dir-bibliographic-notes)
  (bibtex-completion-pdf-field "file")
  (bibtex-dialect 'biblatex))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       664ACDBD-58F7-4174-8A6B-2FF5E4441362
:END:
**** DONE [#5] Diagnose why ~bibtex-completion~ is not returning key at point
CLOSED: [2022-06-18 Sat 15:51]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2022-06-18 Sat 15:51
:ID:       053F708E-4F49-41D2-A65C-804F531E4CC8
:END:
:LOGBOOK:
CLOCK: [2022-06-18 Sat 15:51]--[2022-06-18 Sat 15:51] =>  0:00
:END:
** org-roam-bibtex
:PROPERTIES:
:ID:       EC73B84D-530E-4179-BB67-F19110A543DF
:END:
:LOGBOOK:
CLOCK: [2022-08-30 Tue 14:58]--[2022-08-30 Tue 15:05] =>  0:07
CLOCK: [2022-06-26 Sun 08:47]--[2022-06-26 Sun 09:08] =>  0:21
CLOCK: [2021-07-27 Tue 23:26]--[2021-07-27 Tue 23:54] =>  0:28
CLOCK: [2021-07-26 Mon 12:38]--[2021-07-26 Mon 13:16] =>  0:38
CLOCK: [2021-07-26 Mon 12:28]--[2021-07-26 Mon 12:29] =>  0:01
CLOCK: [2021-07-26 Mon 11:17]--[2021-07-26 Mon 11:26] =>  0:09
CLOCK: [2021-07-14 Wed 21:56]--[2021-07-14 Wed 22:45] =>  0:49
:END:
/[[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] integrates [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]] and [[id:42191633-D2A1-4EDB-903F-3965ECB61510][bibtex]]./

#+begin_src emacs-lisp :results silent
(use-package org-roam-bibtex
  :demand t
  ;; :after bibtex-completion
  :custom
  (orb-roam-ref-format 'org-cite)
  (orb-insert-interface 'citar-open-notes)
  (orb-note-actions-interface 'default)
  (orb-preformat-keywords
   '("citekey" "title" "url" "author" "author-or-editor" "keywords" "file"))
  (orb-process-file-keyword t)
  (orb-attached-file-extensions '("pdf"))

  :config
  (add-to-list 'orb-preformat-keywords "year")
  (org-roam-bibtex-mode))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       BF807BC6-65EB-4D24-88B0-A13E39C387AD
:END:
**** DONE [#6] Remove 'keywords' from note template
CLOSED: [2022-06-23 Thu 17:44]
:PROPERTIES:
:Effort:   0:30
:ID:       BA144CFA-45C3-4DC5-9371-D1AE462D01DB
:ARCHIVE_TIME: 2022-06-23 Thu 17:45
:END:



** citar-org-roam
:PROPERTIES:
:ID:       894C33F7-BB88-403B-92EA-260DD73B4B23
:END:
/[[https://github.com/emacs-citar/citar-org-roam][citar-org-roam]] provides integration between [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]] and [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]]./

[2023-01-26 Thu] I chose to exclude the directory containing my bibliographic notes from the org roam database (via ~org-roam-file-exclude-regexp~), but since ~citar-org-roam~ relies on the roam database to determine whether a bibliographic entry has an associated note, ~org-cite-insert~ fails to show any notes. So I'm disabling the package.

#+begin_src emacs-lisp :results silent
(use-package citar-org-roam
  :straight (citar-org-roam
             :host github
                   :repo "emacs-citar/citar-org-roam")
  :demand t
  :no-require t
  :after  org-roam)
#+end_src

** citar
:PROPERTIES:
:ID:       67AB4C5F-2425-4D31-9590-9D13790B4C97
:END:
:LOGBOOK:
CLOCK: [2022-10-04 Tue 22:47]--[2022-10-05 Wed 01:01] =>  2:14
CLOCK: [2022-10-03 Mon 19:15]--[2022-10-03 Mon 19:53] =>  0:38
CLOCK: [2022-08-30 Tue 15:09]--[2022-08-30 Tue 15:15] =>  0:06
CLOCK: [2022-07-16 Sat 14:32]--[2022-07-16 Sat 14:45] =>  0:13
CLOCK: [2022-06-23 Thu 16:45]--[2022-06-23 Thu 18:15] =>  1:30
CLOCK: [2022-06-22 Wed 15:26]--[2022-06-22 Wed 15:42] =>  0:16
CLOCK: [2021-07-26 Mon 14:26]--[2021-07-26 Mon 15:14] =>  0:48
:END:
/[[https://github.com/bdarcus/bibtex-actions][citar]] is a package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents./

#+begin_src emacs-lisp :results silent
(use-package citar
  :straight (citar :type git :host github :repo "emacs-citar/citar" :includes (citar-org))
  ;; :defer 10
  ;; :after oc vertico embark marginalia
  :demand t
  :custom
  (citar-open-note-functions '(orb-citar-edit-note))
  (citar-bibliography org-cite-global-bibliography)
  (citar-notes-paths `(,ps/dir-bibliographic-notes))
  (citar-at-point-function 'embark-act)
  (citar-symbols
   `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
     (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
     (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (citar-symbol-separator "  ")
  (citar-format-reference-function 'citar-citeproc-format-reference)

  :config
  (require 'citar-org-roam)
  (citar-register-notes-source
   'orb-citar-source (list :name "Org-Roam Notes"
                           :category 'org-roam-node
                           :items #'citar-org-roam--get-candidates
                           :hasitems #'citar-org-roam-has-notes
                           :open #'citar-org-roam-open-note
                           :create #'orb-citar-edit-note
                           :annotate #'citar-org-roam--annotate))

  (setq citar-notes-source 'orb-citar-source)

  (defun ps/citar--get-title (entry)
    "Return title of ENTRY."
    (let* ((field (citar--field-with-value '(title) entry)))
      (when field
        (citar--get-value field entry))))

  (defun ps/citar-search-library-genesis (key-entry)
    "Search title of KEY-ENTRY on Library Genesis.

With prefix, rebuild the cache before offering candidates."
    (interactive (list (citar-select-ref
                        :rebuild-cache current-prefix-arg)))
    (let ((title (ps/citar--get-title (cdr key-entry))))
      (if title
          (browse-url (concat
                       ps/library-genesis-prefix
                       title
                       ps/library-genesis-suffix))
        (message "No link found for %s" (car key-entry)))))

  (defun ps/citar-search-worldcat (key-entry)
    "Search title of KEY-ENTRY on Worldcat.

With prefix, rebuild the cache before offering candidates."
    (interactive (list (citar-select-ref
                        :rebuild-cache current-prefix-arg)))
    (let ((title (ps/citar--get-title (cdr key-entry))))
      (if title
          (browse-url (concat
                       ps/worldcat-prefix
                       title
                       ps/worldcat-suffix))
        (message "No link found for %s" (car key-entry)))))

  (defun ps/citar-search-internet-archive (key-entry)
    "Search title of KEY-ENTRY on the Internet Archive.

With prefix, rebuild the cache before offering candidates."
    (interactive (list (citar-select-ref
                        :rebuild-cache current-prefix-arg)))
    (let ((title (ps/citar--get-title (cdr key-entry))))
      (if title
          (browse-url (concat
                       ps/internet-archive-prefix
                       title
                       ps/internet-archive-suffix))
        (message "No link found for %s" (car key-entry)))))

  (defun ps/citar-search-amazon (key-entry)
    "Search title of KEY-ENTRY on Amazon.

With prefix, rebuild the cache before offering candidates."
    (interactive (list (citar-select-ref
                        :rebuild-cache current-prefix-arg)))
    (let ((title (ps/citar--get-title (cdr key-entry))))
      (if title
          (browse-url (concat
                       ps/amazon-prefix
                       title
                       ps/amazon-suffix))
        (message "No link found for %s" (car key-entry)))))

  (defun ps/citar-open-in-ebib (citekey)
    "Open bibliographic entry associated with the CITEKEY in Ebib."
    (interactive (list (citar-select-ref)))
    (ps/ebib-open-key citekey))

  :general
  ((citar-map citar-citation-map)
   "c" 'embark-copy-as-kill
   "i" 'ps/citar-open-in-ebib
   "u" 'citar-open-links))
#+end_src

*** Resources
:PROPERTIES:
:ID:       EAB0E32B-129C-4980-A06B-94B4C25966E2
:END:
[cite:@Balintona2022CitationsOrgmodeOrgcite]


*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       D5209A3D-C985-4B14-B2E7-60D57C256459
:END:
**** DONE [#5] Configure citar package
CLOSED: [2022-06-22 Wed 19:27]
:PROPERTIES:
:ID:       FCBFE270-2604-4B9B-A7C7-F8C2304E151D
:Effort:   0:45
:ARCHIVE_TIME: 2022-06-22 Wed 19:27
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 17:47]--[2022-06-22 Wed 19:27] =>  1:40
CLOCK: [2022-06-22 Wed 16:05]--[2022-06-22 Wed 16:15] =>  0:10
CLOCK: [2022-06-22 Wed 15:42]--[2022-06-22 Wed 15:57] =>  0:15
:END:
My config predated the name change (it used to be called ~bibtex-actions~).
Maybe also check [[https://github.com/mclear-tools/citar-capf][this]].

** citar-citeproc
:PROPERTIES:
:ID:       8CE6DBC7-E180-4E6D-B6E2-8D1E2756E765
:END:
/[[https://github.com/emacs-citar/citar/blob/main/citar-citeproc.el][citar-citeproc]] provides Citeproc reference support for citar./

#+begin_src emacs-lisp :results silent
(use-feature citar-citeproc
  :after citar
  :demand t
  :custom
  (citar-citeproc-csl-styles-dir org-cite-csl-styles-dir)
  (citar-citeproc-csl-locales-dir org-cite-csl-locales-dir))
#+end_src

** citar-embark
:PROPERTIES:
:ID:       846EEC59-E022-41B7-96D3-4B379F8F91D4
:END:
/[[https://github.com/emacs-citar/citar/tree/9d7088c1fe82e9cfa508ead7ef7738c732556644#embark][citar-embark]] adds contextual access actions in the minibuffer and at-point via the citar-embark-mode minor mode./

#+begin_src emacs-lisp :results silent
(use-package citar-embark
  :after citar embark
  :demand t
  :config
  (citar-embark-mode))
#+end_src

** org-ref
:PROPERTIES:
:ID:       1FC5528A-9F5A-4A9D-B168-5A1F51110455
:END:
/[[https://github.com/jkitchin/org-ref][org-ref]] supports citations, cross-references, bibliographies in org-mode and useful bibtex tools./

#+begin_src emacs-lisp :results silent
(use-package org-ref
  :defer 20
  :custom
  (org-ref-insert-cite-function 'org-cite-insert)
  (org-ref-bibtex-pdf-download-dir ps/dir-downloads)
  (bibtex-completion-library-path ps/dir-library-pdf)

  :config
  ;; Tweak function to remove redundant and conflicting `Year' field
  (defun isbn-to-bibtex (isbn bibfile)
    "Get bibtex entry for ISBN and insert it into BIBFILE.
Nothing happens if an entry with the generated key already exists
in the file. Data comes from www.ebook.de."
    (interactive
     (list
      (read-string
       "ISBN: "
       ;; now set initial input
       (cond
        ;; If region is active and it starts with a number, we use it
        ((and  (region-active-p)
               (s-match "^[0-9]" (buffer-substring (region-beginning) (region-end))))
         (buffer-substring (region-beginning) (region-end)))
        ;; if first entry in kill ring starts with a number assume it is an isbn
        ;; and use it as the guess
        ((stringp (car kill-ring))
         (when (s-match "^[0-9]" (car kill-ring))
           (car kill-ring)))
        ;; type or paste it in
        (t
         nil)))
      (completing-read "Bibfile: " (org-ref-possible-bibfiles))))

    (let* ((url (format "https://www.ebook.de/de/tools/isbn2bibtex?isbn=%s" isbn))
           (entry))
      (with-current-buffer (url-retrieve-synchronously url t t)
        (goto-char (point-min))
        (when (re-search-forward "@[a-zA-Z]+{.+\\(\n\s+[^\n]+\\)+}$" nil t)
          (setq entry (match-string 0))
          ;; FIXME: This isn't working
          (s-replace-regexp "^  Year =.*" "" entry)))

      (if (not entry)
          (message "Nothing found.")
        (find-file bibfile)
        (goto-char (point-max))
        (insert (with-temp-buffer
                  (insert (concat entry "\n}"))
                  (goto-char (point-min))
                  ;; [2020-06-06 Sat] I got a report that ottobib returns entries
                  ;; with ,, in the first line. here if we find one, I eliminate
                  ;; one of them.
                  (when (re-search-forward ",," nil t)
                    (delete-char -1))
                  (org-ref-isbn-clean-bibtex-entry)
                  ;; TODO: Uncomment the line below when you fix the FIXME issue above
                  ;; (org-ref-clean-bibtex-entry)
                  (bibtex-fill-entry)
                  (s-trim (buffer-string))))
        (save-buffer))))

  (delete 'orcb-check-journal org-ref-clean-bibtex-entry-hook)
  (delete 'orcb-download-pdf org-ref-clean-bibtex-entry-hook))
#+end_src

** doi-utils
:PROPERTIES:
:ID:       0A568E85-C775-4894-BE59-A7DAB0F41F87
:END:
/[[https://github.com/jkitchin/org-ref/blob/master/doi-utils.el][doi-utils]] is a set of DOI utilities for making bibtex entries. It is part of [[id:1FC5528A-9F5A-4A9D-B168-5A1F51110455][org-ref]]./

#+begin_src emacs-lisp :results silent
(use-feature doi-utils
  :after org-ref
  :config
  (defun ps/doi-utils-doi-p (string)
    "Return `t' if string is a valid DOI."
    (string-match "^10.[[:digit:]]\\{4,9\\}/[().-;A-Z_-]+$" string)))
#+end_src

** ebib
:PROPERTIES:
:ID:       A744824B-1FE1-4721-8318-1FDDE3758A7A
:END:
:LOGBOOK:
CLOCK: [2022-09-22 Thu 14:39]--[2022-09-22 Thu 15:15] =>  0:36
CLOCK: [2022-09-13 Tue 17:29]--[2022-09-13 Tue 17:56] =>  0:27
CLOCK: [2022-09-13 Tue 16:36]--[2022-09-13 Tue 17:05] =>  0:29
CLOCK: [2022-09-13 Tue 15:51]--[2022-09-13 Tue 16:36] =>  0:45
CLOCK: [2022-09-09 Fri 15:11]--[2022-09-09 Fri 17:18] =>  2:07
CLOCK: [2022-09-09 Fri 11:53]--[2022-09-09 Fri 12:47] =>  0:54
CLOCK: [2022-09-09 Fri 11:39]--[2022-09-09 Fri 11:50] =>  0:11
CLOCK: [2022-09-05 Mon 15:47]--[2022-09-05 Mon 16:00] =>  0:13
CLOCK: [2022-09-03 Sat 14:28]--[2022-09-03 Sat 16:15] =>  1:47
CLOCK: [2022-08-31 Wed 15:08]--[2022-08-31 Wed 16:37] =>  1:29
CLOCK: [2022-08-31 Wed 14:17]--[2022-08-31 Wed 14:30] =>  0:13
CLOCK: [2022-08-30 Tue 16:13]--[2022-08-30 Tue 21:18] =>  5:05
CLOCK: [2022-08-30 Tue 15:23]--[2022-08-30 Tue 16:10] =>  0:47
CLOCK: [2022-08-30 Tue 13:23]--[2022-08-30 Tue 14:58] =>  1:35
CLOCK: [2022-08-27 Sat 12:47]--[2022-08-27 Sat 13:55] =>  1:08
CLOCK: [2022-08-26 Fri 17:38]--[2022-08-26 Fri 20:36] =>  2:58
CLOCK: [2022-08-26 Fri 11:54]--[2022-08-26 Fri 12:33] =>  0:39
CLOCK: [2022-08-26 Fri 10:32]--[2022-08-26 Fri 11:48] =>  1:16
CLOCK: [2022-08-24 Wed 13:04]--[2022-08-24 Wed 13:18] =>  0:14
CLOCK: [2022-08-23 Tue 13:50]--[2022-08-23 Tue 13:58] =>  0:08
CLOCK: [2022-07-16 Sat 14:45]--[2022-07-16 Sat 15:17] =>  0:32
:END:
/[[https://github.com/joostkremers/ebib][ebib]] ([[http://joostkremers.github.io/ebib/][homepage]]) is a BibTeX database manager for Emacs./

#+begin_src emacs-lisp :results silent
(use-package ebib
  :defer 5
  :init

  (defun ps/ebib-reload-current-database-no-confirm ()
    "Reload the current database from disk, without asking for
confirmation."
    (interactive)
    (ebib--execute-when
      (entries
       (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
       (ebib--reload-database ebib--cur-db)
       (ebib--set-modified nil ebib--cur-db)
       (ebib--update-buffers)
       (message "Database reloaded"))
      ;; (ebib--pop-to-buffer (ebib--buffer 'entry)))
      (default
        (beep))))

  (file-notify-add-watch
   ps/file-bibliography-new
   '(change attribute-change)
   (lambda (event)
     (ps/ebib-reload-current-database-no-confirm)))

  (file-notify-add-watch
   ps/file-bibliography-old
   '(change attribute-change)
   (lambda (event)
     (cancel-function-timers #'ps/ebib-reload-current-database-no-confirm)
     (run-with-idle-timer 30 nil #'ps/ebib-reload-current-database-no-confirm)))

  :custom
  (ebib-filename-separator ";")
  (ebib-file-associations nil "do not open any file types externally")
  (ebib-layout 'index-only)
  (ebib-bibtex-dialect 'biblatex)
  (ebib-use-timestamp t)
  (ebib-preload-bib-files org-cite-global-bibliography)
  (ebib-index-columns '(("Entry Key" 30 t)
                        ("Author/Editor" 25 t)
                        ("Year" 4 t)
                        ("Title" 50 t)))
  (ebib-timestamp-format "%Y-%m-%d %T (%Z)")
  (ebib-save-xrefs-first nil)
  (ebib-default-entry-type "online")

  :config
  (setq ebib-hidden-fields '("addendum" "afterword" "annotator" "archiveprefix" "bookauthor" "booksubtitle" "booktitleaddon" "chapter" "commentator" "edition" "editora" "editorb" "editorc" "eid" "eprint" "eprintclass" "eprinttype" "eventdate" "eventtitle" "foreword" "holder" "howpublished" "introduction" "isrn" "issn" "issue" "issuesubtitle" "issuetitle" "issuetitleaddon" "journaltitleadddon" "journalsubtitle" "language" "location" "mainsubtitle" "maintitle" "maintitleaddon" "month" "origlanguage" "pagetotal" "part" "primaryclass" "remark" "subtitle" "urldate" "venue" "version" "volumes" "year"))

  ;; Tweak original function to prevent unnecessary vertical window splits
  (defun ps/ebib--setup-windows ()
    "Create Ebib's window configuration.
If the index buffer is already visible in some frame, select its
window and make the frame active,"
    (let ((index-window (get-buffer-window (ebib--buffer 'index) t))
          (old-frame (selected-frame)))
      (if index-window
          (progn (select-window index-window t)
                 (unless (eq (window-frame) old-frame)
                   (select-frame-set-input-focus (window-frame))
                   (setq ebib--frame-before old-frame)))
        (setq ebib--saved-window-config (current-window-configuration))
        (setq ebib--frame-before nil)
        (cond
         ((eq ebib-layout 'full)
          (delete-other-windows))
         ((eq ebib-layout 'custom)
          (setq ebib--window-before (selected-window))
          (delete-other-windows)
          (let ((width (cond
                        ((integerp ebib-width)
                         (- (window-total-width) ebib-width))
                        ((floatp ebib-width)
                         (- (window-total-width) (truncate (* (window-total-width) ebib-width)))))))
            (select-window (split-window (selected-window) width t)))))
        (let* ((index-window (selected-window))
               (entry-window (selected-window)))
          (switch-to-buffer (ebib--buffer 'index))
          (unless (eq ebib-layout 'index-only)
            (set-window-buffer entry-window (ebib--buffer 'entry)))
          ;; (set-window-dedicated-p index-window t)
          (if (eq ebib-layout 'custom)
              (set-window-dedicated-p entry-window t)))))
    (if (buffer-local-value 'ebib--dirty-index-buffer (ebib--buffer 'index))
        (setq ebib--needs-update t)))

  (advice-add 'ebib--setup-windows :override #'ps/ebib--setup-windows)

  ;; tweak original function to pass custom arguments to `format-time-string'
  (defun ps/ebib--store-entry (entry-key fields db &optional timestamp if-exists)
    "Store the entry defined by ENTRY-KEY and FIELDS into DB.
Optional argument TIMESTAMP indicates whether a timestamp is to
be added to the entry.  Note that for a timestamp to be added,
`ebib-use-timestamp' must also be set to T. IF-EXISTS is as for
`ebib-db-set-entry'.

If storing the entry was successful, return the key under which
the entry is actually stored (which, if IF-EXISTS is `uniquify',
may differ from ENTRY-KEY); otherwise return nil.  Depending on
the value of IF-EXISTS, storing an entry may also result in an
error."
    (let ((actual-key (ebib-db-set-entry entry-key fields db if-exists)))
      (when (and actual-key timestamp ebib-use-timestamp)
        (ebib-set-field-value "timestamp" (format-time-string ebib-timestamp-format nil "GMT") actual-key db 'overwrite))
      actual-key))

  (advice-add 'ebib--store-entry :override #'ps/ebib--store-entry)

  (defvar ps/ebib-isbn-p
    "\\(ISBN-*\\(1[03]\\)* *\\(: \\)?\\)*\\(\\([0-9Xx][ -]*\\)\\{13\\}\\|\\([0-9Xx][ -]*\\)\\{10\\}\\)")

  (defun ps/ebib-isbn-p (string)
    "Return `t' if string looks like an ISBN."
    (string-match ps/ebib-isbn-p string))

  (defun ps/ebib-get-isbn ()
    "Return ISBN for the current entry, if it exists."
    (when-let ((isbn
                (ebib-get-field-value
                 "isbn"
                 (ebib--get-key-at-point)
                 ebib--cur-db
                 'noerror
                 'unbraced
                 'xref)))
      (car (split-string
            (s-replace "-"
                       ""
                       (substring-no-properties
                        isbn))
            " "))))

  (defun ps/ebib-video-p (string)
    "Return `t' if string looks like a video URL."
    ;; TODO: Add more video sites
    (string-match
     "https?://\\(www\\.\\)?youtube\\.com/watch\\?v=\\([a-zA-Z0-9_-]+\\)"
     string))

  (defun ps/ebib--update-file-field-contents (key file-name)
    "docstring"
    (let* ((field "file")
           (file-field-contents (ebib-get-field-value field key ebib--cur-db t t)))
      (unless (and
               file-field-contents
               (catch 'file-exists
                 (dolist (file (ebib--split-files file-field-contents))
                   (when (string= file file-name)
                     (throw 'file-exists file)))))
        (ebib-set-field-value field file-name key ebib--cur-db ";")
        (ebib--store-multiline-text (current-buffer))
        (ebib--redisplay-field field)
        (ebib--redisplay-index-item field)
        (ebib-save-current-database t))))

  (defun ps/ebib-download-by-identifier (&optional id)
    "docstring"
    (interactive)
    (let ((id (or id
                  (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (ps/ebib-get-isbn)
                  (ebib-get-field-value "url" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (read-string "Enter ISBN or DOI: "))))
      ;; TODO: Add support for arXiv
      (cond ((ps/doi-utils-doi-p id)
             (scihub id))
            ((ps/ebib-isbn-p id)
             (ps/ebib-download-book nil id))
            ((ps/ebib-video-p id)
             (ps/ebib-download-video id))
            (t
             (user-error "Identifier does not appear to be an ISBN or DOI.")))))


  (defun ps/ebib-search-by-identifier (&optional id)
    "docstring"
    (interactive)
    (let ((id (or id
                  (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (ps/ebib-get-isbn)
                  (read-string "Enter ISBN or DOI: "))))
      ;; TODO: Add support for arXiv
      (cond ((ps/doi-utils-doi-p id)
             (scihub id))
            ((ps/ebib-isbn-p id)
             (ps/ebib-search-book nil id))
            (t
             (user-error "Identifier does not appear to be an ISBN or DOI.")))))

  (defun ps/ebib--search-or-download-dwim (action)
    "docstring"
    (if (string= (ebib--current-field) "title")
        (when-let ((type (ebib-get-field-value "=type=" (ebib--get-key-at-point)
                                               ebib--cur-db)))
          (cond
           ((member type
                    '("book" "collection" "mvbook" "inbook" "incollection" "bookinbook" "suppbook" "Book" "Collection" "MVBook" "Inbook" "Incollection" "Bookinbook" "Suppbook"))
            (cond ((eq action 'search)
                   (ps/ebib-search-book-by-title))
                  ((eq action 'download)
                   (ps/ebib-download-book-by-title))))
           ((member type '("article" "Article"))
            (cond ((eq action 'search)
                   (ps/ebib-search-article-by-title))
                  ((eq action 'download)
                   (ps/ebib-download-article-by-title))))
           (t
            (user-error (format "No action defined for entries of type `%s'" type)))))
      (cond ((eq action 'search)
             (ps/ebib-search-by-identifier))
            ((eq action 'download)
             (ps/ebib-download-by-identifier)))))

  (defun ps/ebib-search-dwim ()
    "If field at point is 'title', run a search with its value; otherwise use identifier.

  The list of websites for the search query is defined by the variable `ps/ebib-search-book'"
    (interactive)
    (ps/ebib--search-or-download-dwim 'search))

  (defun ps/ebib-download-dwim ()
    "If field at point is 'title', run a search with its value;
otherwise use identifier.

The list of websites for the search query is defined by the
  variable `ps/ebib-download-book'"
    (interactive)
    (ps/ebib--search-or-download-dwim 'download))

  (defun ps/ebib-get-file (extension)
    "docstring"
    (when-let ((files (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t t)))
      (catch 'tag
        (mapc
         (lambda (file)
           (when (equal (file-name-extension file) extension)
             (throw 'tag file)))
         (ebib--split-files files))
        nil)))

  (defun ps/ebib-open-file (extension)
    "Open file with EXTENSION in entry at point, if it (uniquely)
exists."
    (interactive)
    (if-let ((file-name (ps/ebib-get-file extension)))
        (find-file file-name)
      (user-error (format "No (unique) `%s' file found" extension))))

  (defun ps/ebib-open-file-externally (extension)
    "Open file with EXTENSION in entry at point, if it (uniquely)
exists."
    (interactive)
    (if-let ((file-name (expand-file-name (ps/ebib-get-file extension))))
        (shell-command (format "open '%s'" file-name))
      (user-error (format "No (unique) `%s' file found" extension))))

  (defun ps/ebib-open-pdf-file ()
    "Open `pdf' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file "pdf"))

  (defun ps/ebib-open-webm-file ()
    "Open `webm' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "webm"))

  (defun ps/ebib-open-mp3-file ()
    "Open `webm' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "mp3"))

  (defun ps/ebib-open-pdf-file-externally ()
    "Open `pdf' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "pdf"))

  (defun ps/ebib-open-html-file ()
    "Open `html' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file "html")
    (let ((html-buffer (buffer-name))
          (browse-url-handlers nil)
          (browse-url-browser-function #'eww-browse-url))
      (browse-url-of-buffer)
      (kill-buffer html-buffer)))

  (defun ps/ebib-open-file-dwim ()
    "Open file in entry at point. If the entry contains more than one
file, use the preference ordering defined in
`ps/ebib-valid-file-extensions'."
    (interactive)
    (if-let ((extension
              (catch 'tag
                (dolist (extension ps/ebib-valid-file-extensions)
                  (when (ps/ebib-get-file extension)
                    (throw 'tag extension))))))
        (call-interactively
         (intern
          (concat "ps/ebib-open-" extension "-file")))
      (user-error "No file found.")))

  (defvar ps/ebib-valid-file-extensions
    '("pdf" "html" "webm" "flac" "mp3")
    "List of valid file extensions for Ebib, in order of preference.")

  (defun ps/ebib-validate-file-extension ()
    "If entry at point has attachments, check that the extension of
each of the attached files is in
`ps/ebib-valid-file-extensions'."
    (when-let ((files (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t t)))
      (when
          (catch 'tag
            (mapc
             (lambda (file)
               (unless (member (file-name-extension file) ps/ebib-valid-file-extensions)
                 (throw 'tag file)))
             (ebib--split-files files))
            nil)
        (user-error "Invalid file extension."))))

  (defun ps/ebib-validate-file-stem ()
    "If entry at point has attachments, check that the stem of
each of the attached files is the entry's unique key."
    (when-let ((files (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t t)))
      (when
          (catch 'tag
            (mapc
             (lambda (file)
               (unless (equal (file-name-nondirectory (file-name-sans-extension file))
                              (ebib--get-key-at-point))
                 (throw 'tag file)))
             (ebib--split-files files))
            nil)
        (user-error "Invalid file stem."))))

  (defun ps/ebib-validate-file-name ()
    "If entry at point has attachments, check that their stems match
the entry's unique key and that their extensions are listed in
`ps/ebib-valid-file-extensions'."
    (ps/ebib-validate-file-stem)
    (ps/ebib-valide-file-extension))

  (defun ps/ebib-rename-files ()
    "Rename files in entry at point so that their stems match its key."
    (interactive)
    (ebib--execute-when
      (entries
       (let* ((field "file")
              (key (ebib--get-key-at-point))
              (file-list (split-string
                          (ebib-get-field-value field key ebib--cur-db t t)
                          ";")))
         (unless (ps/ebib-valid-key-p key)
           (user-error "Entry has an invalid key; pleasse regenerate it."))
         (when file-list
           (ebib-delete-field-contents field t)
           (dolist (filename file-list)
             (let ((stem (file-name-sans-extension (file-name-nondirectory filename)))
                   (extension (file-name-extension filename)))
               (unless (equal stem key)
                 (let ((new-filename
                        (ps/ebib--rename-and-abbreviate-file
                         (ps/ebib--extension-directories extension)
                         key
                         extension)))
                   (rename-file filename new-filename)
                   (setq filename new-filename)))
               (ebib-set-field-value field filename key ebib--cur-db ";")))
           (ebib--redisplay-field field)
           (ebib--redisplay-index-item field))))
      ;; (ebib-save-current-database nil))))
      (default
        (beep))))

  (defun ps/ebib--rename-and-abbreviate-file (directory key extension)
    "We abbreviate the filename so that it works when invoked by
different users, as long as they have the same folder structure."
    (file-name-concat
     (abbreviate-file-name
      directory)
     (file-name-with-extension key extension)))

  (defun ps/ebib-valid-key-p (&optional key)
    "docstring"
    (let ((key (or key
                   (ebib--get-key-at-point))))
      (string-match
       "^[_[:alnum:]-]\\{2,\\}[[:digit:]]\\{4\\}[_[:alnum:]]\\{2,\\}$"
       key)))

  (defun ps/ebib-switch-old-db ()
    "docstring"
    (interactive)
    (switch-to-buffer-other-window " 1:old.bib"))

  (defun ps/ebib-switch-new-db ()
    "docstring"
    (interactive)
    (switch-to-buffer-other-window " 2:new.bib"))

  (defun ps/ebib-copy-doi ()
    "docstring"
    (interactive)
    (ebib--execute-when
      (entries
       (let ((doi (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)))
         (unless doi
           (user-error "[Ebib] No DOI found in doi field"))
         ;; FIXME: `(return doi)' fails to return DOI; why?
         (kill-new doi)))))

  (defun ps/ebib-download-doi ()
    "docstring"
    (interactive)
    (let* ((key (ebib--get-key-at-point))
           (file (file-name-concat
                  ps/dir-library-pdf
                  (file-name-with-extension key ".pdf"))))
      (ps/ebib-copy-doi)
      (url-copy-file (scihub (current-kill 0)) file)
      (ebib-set-field-value "file" file key ebib--cur-db ";")))

  ;; We tweak the two functions below so that focus doesn't move away
  ;; from the current entry when the database is saved or reloaded.

  (defun ps/ebib--save-database (db &optional force)
    "Save the database DB.
The FORCE argument is used as in `ebib-save-current-database'."
    ;; See if we need to make a backup.
    (when (and (ebib-db-backup-p db)
               (file-exists-p (ebib-db-get-filename db)))
      (ebib--make-backup (ebib-db-get-filename db))
      (ebib-db-set-backup nil db))

    ;; Check if the file has changed on disk.
    (let ((db-modtime (ebib-db-get-modtime db))
          (file-modtime (ebib--get-file-modtime (ebib-db-get-filename db))))
      ;; If the file to be saved has been newly created, both modtimes are nil.
      (when (and db-modtime file-modtime
                 (time-less-p db-modtime file-modtime))
        (unless (or (and (listp force)
                         (eq 16 (car force)))
                    (yes-or-no-p (format "File `%s' changed on disk.  Overwrite? " (ebib-db-get-filename db))))
          (error "[Ebib] File not saved"))))

    ;; Now save the database.
    (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
    (with-temp-buffer
      (ebib--format-database-as-bibtex db)
      (write-region (point-min) (point-max) (ebib-db-get-filename db)))
    (ebib--pop-to-buffer (ebib--buffer 'entry))
    (ebib--set-modified nil db))

  (advice-add 'ebib--save-database :override #'ps/ebib--save-database)

  (defun ps/ebib-reload-current-database ()
    "Reload the current database from disk."
    (interactive)
    (ebib--execute-when
      (entries
       (when (or (and (ebib-db-modified-p ebib--cur-db)
                      (yes-or-no-p "Database modified.  Really reload from file? "))
                 (y-or-n-p "Reload current database from file? "))
         (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
         (ebib--reload-database ebib--cur-db)
         (ebib--set-modified nil ebib--cur-db)
         (ebib--update-buffers)
         ;; Adding this line so that entry doesn't change upon reload
         (ebib--pop-to-buffer (ebib--buffer 'entry))
         (message "Database reloaded")))
      (default
        (beep))))

  (advice-add 'ebib-reload-current-database :override #'ps/ebib-reload-current-database)

  ;; hack to solve the issue whereby hitting `RET' in
  ;; `ebib-index-mode' sometimes does not edit the entry at point
  (defun ps/ebib-edit-entry ()
    "Edit the current BibTeX entry."
    (interactive)
    (ebib--execute-when
      (entries
       (unless (string= (what-line) "Line 1")
         (ebib-prev-entry)
         (ebib-next-entry))
       (ebib--edit-entry-internal))
      (default
        (beep))))

  (advice-add 'ebib-edit-entry :override #'ps/ebib-edit-entry)



  (defun ps/ebib--extension-directories (extension)
    "Return directory associated with EXTENSION."
    (cond ((string= extension "pdf")
           ps/dir-library-pdf)
          ((string= extension "html")
           ps/dir-library-html)
          ((or (string= extension "webm")
               (string= extension "mp3")
               (string= extension "flac"))
           ps/dir-library-media)
          (t
           (user-error "Invalid file extension"))))

  (defun ps/ebib-attach-file (&optional most-recent)
    "Prompt the user for a file to attach to the current entry.

If MOST-RECENT is non-nil, attach the most recent file instead."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((key (ebib--get-key-at-point)))
         (unless (ps/ebib-valid-key-p key)
           (user-error "Entry has an invalid key; pleasse regenerate it."))
         (let* ((field "file")
                (file-to-attach
                 (if most-recent
                     (ps/newest-file ps/dir-downloads)
                   (let ((initial-folder
                          (completing-read "Select folder: "
                                           (list
                                            ps/dir-downloads
                                            ps/dir-library-html
                                            ps/dir-library-pdf
                                            ps/dir-library-media))))
                     (read-file-name
                      "File to attach: "
                      ;; Use key as default selection if key-based file exists
                      ;; else default to `initial-folder'
                      (if (catch 'found
                            (dolist (extension ps/ebib-valid-file-extensions)
                              (when (f-file-p (file-name-concat
                                               initial-folder
                                               (file-name-with-extension key extension)))
                                (throw 'found extension))))
                          (file-name-concat initial-folder key)
                        initial-folder)))))
                (extension (file-name-extension file-to-attach))
                (destination-folder
                 (ps/ebib--extension-directories extension))
                (file-name (ps/ebib--rename-and-abbreviate-file
                            destination-folder key extension)))
           (when (or (not (f-file-p file-name))
                     (y-or-n-p "File exists. Overwrite? "))
             (rename-file file-to-attach file-name t))
           (ps/ebib--update-file-field-contents key file-name)
           (when (string= (file-name-extension file-name) "pdf")
             ;; open the pdf to make sure it displays the web page correctly
             (ps/ebib-open-pdf-file)
             ;; ocr the pdf if necessary
             (ps/ocr-pdf (format "'%s' '%s'" (expand-file-name file-name) (expand-file-name file-name)))))))
      (default
        (beep))))

  (defun ps/ebib-search-internet-archive (&optional field search-query)
    "Run a search on the Internet Archive."
    (interactive)
    (ps/ebib-search
     ps/internet-archive
     field
     search-query))

  (defun ps/ebib-search-google-scholar (&optional field search-query)
    "Run a search on Google Scholar."
    (interactive)
    (ps/ebib-search
     ps/google-scholar
     field
     search-query))

  (defun ps/ebib-search-wikipedia (&optional field search-query)
    "Run a search on Wikipedia."
    (interactive)
    (ps/ebib-search
     ps/wikipedia
     field
     search-query))

  (defun ps/ebib-search-connected-papers (&optional field search-query)
    "Run a search on Connected Papers."
    (interactive)
    (ps/ebib-search
     ps/connected-papers
     field
     search-query))

  (defun ps/ebib-search-library-genesis (&optional field search-query)
    "Run a search on Library Genesis."
    (interactive)
    (ps/ebib-search
     ps/library-genesis
     field
     search-query))

  (defun ps/ebib-search-amazon (&optional field search-query)
    "Run a search on Amazon."
    (interactive)
    (ps/ebib-search
     ps/amazon
     field
     search-query))

  (defun ps/ebib-search-university-of-toronto (&optional field search-query)
    "Run a search on the University of Toronto Libraries."
    (interactive)
    (ps/ebib-search
     ps/university-of-toronto
     field
     search-query))

  (defun ps/ebib-search-hathitrust (&optional field search-query)
    "Run a search on HathiTrust."
    (interactive)
    (ps/ebib-search
     ps/hathitrust
     field
     search-query))

  (defun ps/ebib-search-goodreads (&optional field search-query)
    "Run a search on Goodreads."
    (interactive)
    (ps/ebib-search
     ps/goodreads
     field
     search-query))

  (defun ps/ebib-search-worldcat (&optional field search-query)
    "Run a search on Worldcat."
    (interactive)
    (ps/ebib-search
     ps/worldcat
     field
     search-query))

  (defun ps/ebib-search (search-engine &optional field search-query)
    "Run a search with SEARCH-ENGINE.

If invoked from `ebib', search for the value of FIELD. If no
FIELD is given, use the identifier if available, unless point is
in 'title' field, otherwise the field at point.

If not invoked from `ebib', prompt for search query."
    (let* ((name (nth 0 search-engine))
           (prefix (nth 1 search-engine))
           (suffix (nth 2 search-engine))
           (search-query
            (if search-query
                (url-hexify-string search-query)
              (if (member major-mode (list 'ebib-entry-mode 'ebib-index-mode))
                  (let* ((field (or field
                                    ;; if no field given, set `field'...
                                    (cond
                                     ;; ...to "title" if point is on "title" field,
                                     ((equal (ebib--current-field) "title")
                                      "title")
                                     ;; ...to "isbn" or "doi" if either field present,
                                     (ps/ebib-get-isbn)
                                     ((ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db)
                                      "doi")
                                     ;; ...else to the field at point.
                                     (t
                                      (ebib--current-field)))))
                         (value (ebib-get-field-value
                                 field
                                 (ebib--get-key-at-point)
                                 ebib--cur-db
                                 'noerror
                                 'unbraced
                                 'xref)))
                    (cond ((equal field "title")
                           (url-hexify-string value))
                          ;; ((equal field "isbn")
                          ;; (s-replace "-" "" value))
                          (t
                           value)))
                (url-hexify-string
                 (read-string
                  (concat
                   name
                   ": ")))))))
      (browse-url (concat prefix search-query suffix))))

  (defun ps/ebib-search-multi (&optional field search-query search-group)
    "docstring"
    (let ((search-query (or search-query
                            (unless (member major-mode (list 'ebib-entry-mode 'ebib-index-mode))
                              (read-string "Search query: ")))))
      (dolist (search-engine search-group)
        (funcall search-engine field search-query))))

  (defun ps/ebib-search-book (&optional field search-query)
    "The list of search engines is specified by the variable
`ps/ebib-search-book'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-search-book))

  (defun ps/ebib-download-book (&optional field search-query)
    "The list of search engines is specified by the variable
`ps/ebib-download-book'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-download-book))

  (defun ps/ebib-download-isbn (&optional field search-query)
    "The list of search engines is specified by the variable
`ps/ebib-download-isbn'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-download-book))

  (defun ps/ebib-search-article (&optional field search-query)
    "The list of search engines is specified by the variable
`ps/ebib-search-article'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-search-article))

  (defun ps/ebib-download-article (&optional field search-query)
    "The list of search engines is specified by the variable
`ps/ebib-download-article'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-search-article))

  (defun ps/ebib-search-book-by-title ()
    "docstring"
    (interactive)
    (if (or (ebib-get-field-value "booktitle" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
            (ebib-get-field-value "title" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
            (user-error "`title' field is empty!"))
        (ps/ebib-search-book "title")))

  (defun ps/ebib-download-book-by-title ()
    "docstring"
    (interactive)
    (if (or (ebib-get-field-value "booktitle" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
            (ebib-get-field-value "title" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
            (user-error "`title' field is empty!"))
        (ps/ebib-download-book "title")))

  (defun ps/ebib-search-book-by-isbn ()
    "docstring"
    (interactive)
    (if (ebib-get-field-value "isbn" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
        (ps/ebib-search-book "isbn")
      (user-error "`ISBN' field is empty!")))

  (defun ps/ebib-search-article-by-title ()
    "docstring"
    (interactive)
    (if (ebib-get-field-value "article" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
        (user-error "`title' field is empty!")
      (ps/ebib-search-article "title")))

  (defun ps/ebib-download-article-by-title ()
    "docstring"
    (interactive)
    (if (ebib-get-field-value "article" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
        (user-error "`title' field is empty!")
      (ps/ebib-download-article "title")))

  (defun ps/ebib-download-video (id)
    ""
    (let* ((key (ebib--get-key-at-point))
           (file-name
            (ps/ebib--rename-and-abbreviate-file
             ps/dir-library-media key "webm")))
      (youtube-dl id :directory ps/dir-library-media :destination key)
      (message (format "Downloading video from '%s'" (substring-no-properties id)))
      (ps/ebib--update-file-field-contents key file-name)))

  (defun ps/ebib-search-article-by-doi ()
    "docstring"
    (interactive)
    (if (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
        (ps/ebib-search-article "doi")
      (user-error "`DOI' field is empty!")))

  (defun ps/ebib-sentence-case ()
    "docstring"
    (interactive)
    (ebib--execute-when
      (entries
       (let* ((field (ebib--current-field))
              (value (ebib-get-field-value field (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref))
              (words (split-string value)))
         (setq words (mapcar
                      (lambda (word)
                        (if
                            ;; match words containing {} or \ which are probably
                            ;; LaTeX or protected words
                            (string-match "\\$\\|{\\|}\\|\\\\" word)
                            word
                          (s-downcase word)))
                      words))
         ;; capitalize first word
         (setf (car words) (s-capitalize (car words)))
         (setq value (mapconcat 'identity words " "))
         (ebib-set-field-value field value (ebib--get-key-at-point) ebib--cur-db 'overwrite 'unbraced)
         (ebib--store-multiline-text (current-buffer))
         (ebib--redisplay-field field)
         (ebib--redisplay-index-item field)
         (ebib-save-current-database nil)))
      (default
        (beep))))

  (defun ps/ebib-open-current-bibtex-file ()
    "Open bibtex file associated with the current entry."
    (interactive)
    (when-let ((file (ebib-db-get-filename ebib--cur-db)))
      (find-file file)))

  (defun ps/ebib-auto-save-new-db ()
    "docstring"
    (when (ebib-db-modified-p (nth 0 ebib--databases))
      (ebib-save-current-database t))
    (run-with-timer 10 nil #'ps/ebib-auto-save-new-db))

  (defun ps/ebib-auto-save-old-db ()
    "docstring"
    (when (ebib-db-modified-p (nth 1 ebib--databases))
      (cancel-function-timers #'ps/ebib-auto-save-old-db)
      (run-with-idle-timer 30 nil #'ps/ebib-auto-save-old-db)))

  ;; mysteriously, setting REPEAT to `t' does not restart the timer.
  ;; So instead the function the timer calls itself starts a new
  ;; timer.
  (run-with-timer 30 nil #'ps/ebib-auto-save-new-db)
  ;; (run-with-idle-timer 30 nil #'ps/ebib-auto-save-old-db)


  (defun ps/ebib-open-key (key)
    "Open the entry for KEY in Ebib."
    (ebib--execute-when
      (entries
       (let ((file))
         (if (member key (ebib-db-list-keys (nth 0 ebib--databases)))
             (setq file ps/file-bibliography-new)
           (setq file ps/file-bibliography-old))
         (ebib file key)
         (ebib--pop-to-buffer (ebib--buffer 'entry))))
      (default
        (ebib--error "No database is loaded"))))

  (defun ps/ebib-fix-authors ()
    "Rearrange the name of each author so that last name comes before
first name, and names are separated by a semicolon."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((field "author")
             (authors-fixed))
         (when-let ((authors
                     (replace-regexp-in-string
                      "\n "
                      ""
                      (substring-no-properties
                       (ebib-get-field-value
                        field
                        (ebib--get-key-at-point)
                        ebib--cur-db
                        'noerror
                        'unbraced
                        'xref)))))
           (dolist (author (split-string authors ", "))
             (push (replace-regexp-in-string "\\(.*\\) \\(.*\\)" "\\2, \\1" author) authors-fixed))
           (ebib-set-field-value
            field
            (string-join authors-fixed "; ")
            (ebib--get-key-at-point)
            ebib--cur-db
            'overwrite)
           (ebib--store-multiline-text (current-buffer))
           (ebib--redisplay-field field)
           (ebib--redisplay-index-item field)
           (ebib-save-current-database nil))))
      (default
        (beep))))

  (defvar ps/ebib-sort-toggle 'Title)

  (defun ps/ebib-sort-toggle ()
    "Toggle between sorting by timestamp, author, and title."
    (interactive)
    (unless (string= (ebib-db-get-filename ebib--cur-db) ps/file-bibliography-new)
      (user-error (format "Due to performane issues, this command only works on database `%s'"
                          (file-name-nondirectory ps/file-bibliography-new))))
    (ebib--execute-when
      (entries
       (let ((order 'ascend))
         (cond ((eq ps/ebib-sort-toggle 'Timestamp)
                (setq ps/ebib-sort-toggle 'Author))
               ((eq ps/ebib-sort-toggle 'Author)
                (setq ps/ebib-sort-toggle 'Title))
               ((eq ps/ebib-sort-toggle 'Title)
                (setq ps/ebib-sort-toggle 'Timestamp)
                (setq order 'descend)))
         (ebib--index-sort (symbol-name ps/ebib-sort-toggle) order)
         (goto-char (point-min))
         (message (format "Sorting by %s" ps/ebib-sort-toggle))))
      (default
        (beep))))


  (defun ps/ebib-merge-databases (source target)
    "Move the contents of SOURCE to TARGET."
    (find-file-noselect source)
    (find-file-noselect target)
    (with-current-buffer (file-name-nondirectory target)
      (goto-char (point-max))
      (insert-file-contents source))
    (with-current-buffer (file-name-nondirectory source)
      (erase-buffer)))

  (defun ps/ebib-merge-old-new ()
    "Merge the old and new bibliography files."
    (interactive)
    (ps/ebib-merge-databases ps/file-bibliography-old ps/file-bibliography-new))

  (defun ps/ebib-end-of-index-buffer ()
    "Move to the end of the index buffer."
    (interactive)
    (when (equal major-mode 'ebib-index-mode)
      (goto-char (point-max))
      (forward-line -1)))

  (defun ps/ebib-duplicate-entry ()
    "Duplicate the entry at point."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((key (ebib--get-key-at-point)))
         (save-window-excursion
           (find-file zotra-default-bibliography)
           (goto-char (point-max))
           (ebib--format-entry key ebib--cur-db)
           (bibtex-narrow-to-entry)
           (goto-char (point-min))
           (replace-regexp "^\\(@.*{.*\\)," "\\1-dup,")
           (save-buffer))
         (ebib-switch-to-database-nth 1)
         (ps/ebib-reload-current-database-no-confirm)))
      (default
        (beep))))

  :hook
  ;; (ebib-index-mode-hook . doom-modeline-mode)
  (ebib-entry-mode-hook . visual-line-mode)

  :general
  ("A-i" 'ebib)
  (ebib-multiline-mode-map
   "s-c" 'ebib-quit-multiline-buffer-and-save)
  (ebib-entry-mode-map
   "TAB" 'ebib-goto-next-set
   "<backtab>" 'ebib-goto-prev-set
   "SPC" 'ps/ebib-open-file-dwim
   "H-s" 'ebib-save-current-database
   "!" 'ebib-generate-autokey
   "," 'ps/ebib-title-case
   "." 'ps/ebib-sentence-case
   "/" (lambda! (ps/ebib-attach-file t))
   "?" 'ps/ebib-attach-file
   "a" 'ps/ebib-search-amazon
   "A" 'ebib-add-field
   "b" 'ps/ebib-open-current-bibtex-file
   "c" 'ebib-copy-current-field-contents
   "D" 'ebib-delete-current-field-contents
   "d" 'ps/ebib-download-dwim
   "E" 'ebib-edit-keyname
   "g" 'ps/ebib-search-library-genesis
   "G" 'ps/ebib-search-goodreads
   "h" 'ps/ebib-open-html-file
   "i" 'ebib-browse-doi
   "i" 'ps/ebib-download-by-identifier
   "I" 'ps/ebib-search-book-by-isbn
   "n" 'ps/ebib-open-org-file
   "o" 'ps/ebib-search-connected-papers
   "p" 'ps/ebib-open-pdf-file
   "P" 'ps/ebib-open-pdf-file-externally
   "Q" 'ebib-quit
   "r" 'ps/ebib-rename-files
   "s" 'ps/ebib-search-dwim
   "t" 'ps/ebib-search-book-dwim
   "u" 'ebib-browse-url
   "v" 'ps/ebib-open-webm-file
   "V" 'ps/ebib-search-internet-archive
   "w" 'ps/ebib-search-worldcat
   "W" 'ps/ebib-search-wikipedia
   "x" 'ps/ebib-search-university-of-toronto
   "y" 'ps/ebib-search-hathitrust
   "z" 'ps/ebib-search-google-scholar
   "1" (lambda! (ebib-view-file-in-field 1))
   "2" (lambda! (ebib-view-file-in-field 2)))
  (ebib-index-mode-map
   "<return>" 'ebib-edit-entry
   "A-C-s-SPC" 'ps/ebib-end-of-index-buffer
   "d" 'ps/ebib-duplicate-entry
   "D" 'ebib-delete-entry
   "k" 'ebib-prev-entry
   "l" 'ebib-next-entry
   "s" 'ps/ebib-sort-toggle
   "H-s" 'ebib-save-current-database
   "Q" 'ebib-quit))
#+end_src

The macro below generates the commands correcty. But attempting to define key bindings results in duplicate commands. I'm not sure what's on; it seems to be related to ~use-package~.

*** TODO Add imdb movies to ebib
:PROPERTIES:
:ID:       B801240B-B0F4-46EB-859F-9755ECCFB3DF
:END:
- First export them to csv.
- Then convert the csv to bibtex
  https://www.google.com/search?q=csv+to+bibtex&oq=csv+to+bib&aqs=chrome.0.0i512j69i57j0i512l2j0i22i30j0i10i22i30l5.7911j0j9&sourceid=chrome&ie=UTF-8
*** TODO Fix ebib issues Leo reported
:PROPERTIES:
:ID:       359ADA5E-7B2F-4BF9-94CC-DE0BB5A516C9
:END:
EA Survey 2018 / 2019

Wildeford 2018 EA Survey
comienzan con las mismas palabras
por qué ebib no recarga
*** TODO [#6] Figure out difference between ~date~ and ~urldate~ bibtex fields
:PROPERTIES:
:ID:       7B7EA121-F1C0-4EAD-99F5-AAF4162DFDE9
:END:
*** resources
:PROPERTIES:
:ID:       A05D6298-646A-4E47-B3B2-07A14EABCEC5
:END:
[[https://juanjose.garciaripoll.com/blog/ebib-biblio-interface/index.html][eBib-Biblio interface, aka. Mendeley for Emacs]]


*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       C9E6B4A2-BB3C-4D2F-B6F8-D315C422676B
:END:
**** DONE Crear función Hathi Trust
CLOSED: [2022-09-05 Mon 10:43]
:PROPERTIES:
:ID:       D7AD63FA-0E01-48EB-9B55-F1CE8584F7D0
:ARCHIVE_TIME: 2022-09-05 Mon 20:19
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 10:45]--[2022-09-05 Mon 10:54] =>  0:09
CLOCK: [2022-09-05 Mon 10:34]--[2022-09-05 Mon 10:43] =>  0:09
:END:
**** DONE [#6] Remove ~year~ field
CLOSED: [2022-12-05 Mon 23:32]
:PROPERTIES:
:ID:       EB854917-C82F-4114-B779-EF1E83BF7EF4
:ARCHIVE_TIME: 2022-12-05 Mon 23:32
:END:
It doesn't seem to be a proper field ([[https://joostkremers.github.io/ebib/ebib-manual.html#displaying-and-sorting-the-entries-list][manual]]):

#+begin_quote
Furthermore, the column label "Year" does not simply display the contents of the year field. Rather, it first checks the contents of the date field, which is biblatex’s replacement of the year field, and extracts the first year in it. Only if the date field is empty does it display the year field.
#+end_quote

**** DONE set up ebib for youtube
CLOSED: [2022-12-26 Mon 00:33]
:PROPERTIES:
:ID:       FAA1F1C8-3663-489A-8DF4-8D5360C26C6B
:ARCHIVE_TIME: 2022-12-26 Mon 00:33
:END:
** biblio
:PROPERTIES:
:ID:       4EDDE179-9DE5-4F31-9FB4-17A5B68F6557
:END:
:LOGBOOK:
CLOCK: [2022-07-16 Sat 15:22]--[2022-07-16 Sat 15:26] =>  0:04
CLOCK: [2022-07-16 Sat 15:17]--[2022-07-16 Sat 15:18] =>  0:01
:END:
/[[https://github.com/cpitclaudel/biblio.el][biblio]] is a package to browse and import bibliographic references from CrossRef, DBLP, HAL, arXiv, Dissemin, and doi.org./

#+begin_src emacs-lisp :results silent
(use-package biblio
  :defer 15
  :config
  (defvar ps/biblio-arxiv-regexp "\\([[:digit:]]\\{4\\}\\.[[:digit:]]\\{4,5\\}\\)")
  (defun ps/biblio-arxiv-id-p (string)
    "Return `t' if string has the form of an arXiv ID."
    (string-match ps/biblio-arxiv-regexp string)))
#+end_src
** persid
:PROPERTIES:
:ID:       57366A1C-A55A-47F8-8B62-E3412D674879
:END:
/[[https://github.com/rougier/persid][persid]] is a persistent identifier library for Emacs./

To check out.

** zotra
:PROPERTIES:
:ID:       815B8CEA-D36D-4E47-B728-D86FEFB736DF
:END:
:LOGBOOK:
CLOCK: [2022-08-31 Wed 16:37]--[2022-08-31 Wed 17:37] =>  1:00
CLOCK: [2022-08-31 Wed 14:05]--[2022-08-31 Wed 14:17] =>  0:12
CLOCK: [2022-07-16 Sat 21:03]--[2022-07-16 Sat 21:15] =>  0:12
CLOCK: [2022-07-16 Sat 15:26]--[2022-07-16 Sat 15:40] =>  0:14
:END:
/[[https://github.com/mpedramfar/zotra][zotra]] provides functions to get bibliographic information from a URL via [[https://www.zotero.org/support/translators][Zotero translators]], but without relying on the Zotero client./

#+begin_src emacs-lisp :results silent
(use-package zotra
  :straight (zotra
             :host github
             :repo "mpedramfar/zotra")
  :demand t
  :init
  (defun ps/zotra-run-translator-server ()
    "Start translator server in the background."
    (interactive)
    (let ((shell-command-buffer-name-async "*zotra-translation-server*"))
    (async-shell-command
     (format
      "cd %s; nvm use 14; npm start"
      ps/dir-translation-server))))

  (run-with-timer 5 nil 'ps/zotra-run-translator-server)

  :custom
  (zotra-use-curl nil)
  (zotra-url-retrieve-timeout 10)
  (zotra-default-bibliography ps/file-bibliography-new)
  (zotra-default-entry-format "biblatex")
  (zotra-after-add-entry-hook nil)
  (zotra-download-attachment-default-directory ps/dir-downloads)
  (zotra-backend 'translation-server)
  (zotra-cli-command "/Users/pablostafforini/Dropbox/source/zotra-cli/bin/index.js")

  :config
  (defun ps/zotra-add-entry (url-or-search-string &optional is-search bibfile entry-format)
  (let ((bibfile
         (or bibfile zotra-default-bibliography
             (completing-read
              "Bibfile: "
              (append (directory-files "." t ".*\\.bib$")
                      (org-cite-list-bibliography-files))))))
    (find-file bibfile)
    (widen)
    (goto-char (point-max))
    (when (not (looking-at "^")) (insert "\n"))
    (insert (zotra-get-entry url-or-search-string is-search entry-format))
    (save-excursion
      (save-restriction
        (bibtex-narrow-to-entry)
        (bibtex-beginning-of-entry)
        (goto-char (point-max))
        (when (not (looking-at "^")) (insert "\n"))
        (advice-add 'select-safe-coding-system-interactively :override #'ps/select-safe-coding-system-interactively)
        (save-buffer)
        (advice-remove 'select-safe-coding-system-interactively #'ps/select-safe-coding-system-interactively)
        (run-hooks 'zotra-after-add-entry-hook)))))


  (defun ps/zotra-after-add-entry-function ()
    "Function to trigger with `zotra-after-add-entry-hook'."
    (revert-buffer nil t)
    (goto-char (point-max))
    (bibtex-set-field "timestamp" (format-time-string ebib-timestamp-format nil "GMT"))
    (bibtex-clean-entry)
    (org-ref-clean-bibtex-entry)
    (save-buffer)
    (ps/ebib-reload-current-database-no-confirm)
    (let ((citekey (ps/bibtex-get-key)))
      (ebib ps/file-bibliography-new citekey)
      (ps/ebib-open-key citekey)))



  (defun ps/select-safe-coding-system-interactively (from to codings unsafe
                                                          &optional rejected default)
    "Select interactively a coding system for the region FROM ... TO.
FROM can be a string, as in `write-region'.
CODINGS is the list of base coding systems known to be safe for this region,
  typically obtained with `find-coding-systems-region'.
UNSAFE is a list of coding systems known to be unsafe for this region.
REJECTED is a list of coding systems which were safe but for some reason
  were not recommended in the particular context.
DEFAULT is the coding system to use by default in the query."
    ;; At first, if some defaults are unsafe, record at most 11
    ;; problematic characters and their positions for them by turning
    ;;	(CODING ...)
    ;; into
    ;;	((CODING (POS . CHAR) (POS . CHAR) ...) ...)
    (if unsafe
        (setq unsafe
              (mapcar (lambda (coding)
                        (cons coding
                              (if (stringp from)
                                  (mapcar (lambda (pos)
                                            (cons pos (aref from pos)))
                                          (unencodable-char-position
                                           0 (length from) coding
                                           11 from))
                                (mapcar (lambda (pos)
                                          (cons pos (char-after pos)))
                                        (unencodable-char-position
                                         from to coding 11)))))
                      unsafe)))

    (setq codings (sanitize-coding-system-list codings))

    (let ((window-configuration (current-window-configuration))
          (bufname (buffer-name))
          coding-system)
      (save-excursion
        ;; If some defaults are unsafe, make sure the offending
        ;; buffer is displayed.
        (when (and unsafe (not (stringp from)))
          (pop-to-buffer bufname)
          (goto-char (apply #'min (mapcar (lambda (x) (or (car (cadr x)) (point-max)))
                                          unsafe))))
        ;; Then ask users to select one from CODINGS while showing
        ;; the reason why none of the defaults are not used.
        (with-output-to-temp-buffer "*Warning*"
          (with-current-buffer standard-output
            (if (and (null rejected) (null unsafe))
                (insert "No default coding systems to try for "
                        (if (stringp from)
                            (format "string \"%s\"." from)
                          (format-message "buffer `%s'." bufname)))
              (insert
               "These default coding systems were tried to encode"
               (if (stringp from)
                   (concat " \"" (if (> (length from) 10)
                                     (concat (substring from 0 10) "...\"")
                                   (concat from "\"")))
                 (format-message
                  " the following\nproblematic characters in the buffer `%s'"
                  bufname))
               ":\n")
              (select-safe-coding-system--format-list unsafe)
              (when rejected
                (insert "These safely encode the text in the buffer,
but are not recommended for encoding text in this context,
e.g., for sending an email message.\n ")
                (dolist (x rejected)
                  (princ " ") (princ x))
                (insert "\n"))
              (when unsafe
                (insert (if rejected "The other coding systems"
                          "However, each of them")
                        (substitute-command-keys
                         " encountered characters it couldn't encode:\n"))
                (dolist (coding unsafe)
                  (insert (format "  %s cannot encode these:" (car coding)))
                  (let ((i 0)
                        (func1
                         (lambda (bufname pos)
                           (when (buffer-live-p (get-buffer bufname))
                             (pop-to-buffer bufname)
                             (goto-char pos))))
                        (func2
                         (lambda (bufname pos coding)
                           (when (buffer-live-p (get-buffer bufname))
                             (pop-to-buffer bufname)
                             (if (< (point) pos)
                                 (goto-char pos)
                               (forward-char 1)
                               (search-unencodable-char coding)
                               (forward-char -1))))))
                    (dolist (elt (cdr coding))
                      (insert " ")
                      (if (stringp from)
                          (insert (if (< i 10) (cdr elt) "..."))
                        (if (< i 10)
                            (insert-text-button
                             (cdr elt)
                             :type 'help-xref
                             'face 'link
                             'help-echo
                             "mouse-2, RET: jump to this character"
                             'help-function func1
                             'help-args (list bufname (car elt)))
                          (insert-text-button
                           "..."
                           :type 'help-xref
                           'face 'link
                           'help-echo
                           "mouse-2, RET: next unencodable character"
                           'help-function func2
                           'help-args (list bufname (car elt)
                                            (car coding)))))
                      (setq i (1+ i))))
                  (insert "\n"))
                (insert (substitute-command-keys "\

Click on a character (or switch to this window by `\\[other-window]'\n\
and select the characters by RET) to jump to the place it appears,\n\
where `\\[universal-argument] \\[what-cursor-position]' will give information about it.\n"))))
            (insert (substitute-command-keys "\nSelect \
one of the safe coding systems listed below,\n\
or cancel the writing with \\[keyboard-quit] and edit the buffer\n\
   to remove or modify the problematic characters,\n\
or specify any other coding system (and risk losing\n\
   the problematic characters).\n\n"))
            (let ((pos (point))
                  (fill-prefix "  "))
              (dolist (x codings)
                (princ "  ") (princ x))
              (insert "\n")
              (fill-region-as-paragraph pos (point)))))

        ;; Read a coding system.
        (setq coding-system 'utf-8)
        (setq last-coding-system-specified coding-system))

      (kill-buffer "*Warning*")
      (set-window-configuration window-configuration)
      coding-system))

  ;; Ugly hack to fix encoding issues.
  ;; TODO: Fix this properly.
  (advice-add 'zotra-add-entry :override #'ps/zotra-add-entry)

  ;; (defun ps/zotra-add-entry-from-search-advice ()
  ;; "Functionsps/ebib-sort-toggle to call after `zotra-add-entry-from-search' is run."
  ;; (ebib-switch-to-database-nth 1)
  ;; (ps/ebib-reload-current-database-no-confirm))

  ;; (advice-add 'zotra-add-entry-from-search :after #'ps/zotra-add-entry-from-search-advice)

  :hook
  (zotra-after-add-entry-hook . ps/zotra-after-add-entry-function)

  :general
  (ebib-index-mode-map
   "i" 'zotra-add-entry-from-search))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       B8B5D792-0C5B-4058-87CB-BF933B2E7AF9
:END:
**** DONE configure zotra
CLOSED: [2022-11-07 Mon 14:13]
:PROPERTIES:
:ID:       975FD5E1-AD70-4770-8857-090F30DC9341
:ARCHIVE_TIME: 2022-11-07 Mon 14:13
:END:
:LOGBOOK:
CLOCK: [2022-10-10 Mon 20:09]--[2022-10-10 Mon 20:17] =>  0:08
CLOCK: [2022-10-10 Mon 19:29]--[2022-10-10 Mon 19:59] =>  0:30
:END:

**** DONE [#5] Make sure all new bibtex entries have a ~timestamp~ field
CLOSED: [2022-12-21 Wed 00:18]
:PROPERTIES:
:ID:       5B05526E-8279-4C39-80F8-D0B81C665912
:ARCHIVE_TIME: 2022-12-21 Wed 00:18
:END:

** scihub
:PROPERTIES:
:ID:       29ABF514-563B-463D-9FDB-CF2C8AA25F83
:END:
/[[https://github.com/emacs-pe/scihub.el][scihub]] supports downloading papers from Sci-Hub./

#+begin_src emacs-lisp :results silent
(use-package scihub
  :custom
  (scihub-download-directory ps/dir-downloads)
  (scihub-open-after-download nil)
  (scihub-fetch-domain 'scihub-fetch-domains-lovescihub)
  ;; run `scihub-homepage' for a list of available scihub webservers
  ;; if the URL below stops working
  (scihub-homepage "http://sci-hub.wf"))
#+end_src

* spaced-repetition
:PROPERTIES:
:ID:       823BBBEC-8C97-489E-AE9D-9B88FD28259A
:END:
** anki-editor
:PROPERTIES:
:ID:       AEA197FC-3C2F-4452-B044-319827859DF5
:END:
:LOGBOOK:
CLOCK: [2022-01-15 Sat 19:12]--[2022-01-15 Sat 19:24] =>  0:12
CLOCK: [2021-12-28 Tue 10:10]--[2021-12-28 Tue 12:43] =>  2:33
CLOCK: [2021-12-11 Sat 22:30]--[2021-12-11 Sat 22:44] =>  0:14
CLOCK: [2021-10-13 Wed 22:54]--[2021-10-14 Thu 00:18] =>  1:24
CLOCK: [2021-10-13 Wed 22:54]--[2021-10-13 Wed 22:54] =>  0:00
CLOCK: [2021-10-02 Sat 14:09]--[2021-10-02 Sat 14:28] =>  0:19
CLOCK: [2021-10-02 Sat 13:06]--[2021-10-02 Sat 13:16] =>  0:10
CLOCK: [2021-07-13 Tue 12:03]--[2021-07-13 Tue 12:12] =>  0:09
CLOCK: [2021-07-13 Tue 10:35]--[2021-07-13 Tue 11:01] =>  0:26
CLOCK: [2021-07-12 Mon 21:40]--[2021-07-12 Mon 23:13] =>  1:33
CLOCK: [2021-07-10 Sat 14:29]--[2021-07-10 Sat 15:12] =>  0:43
CLOCK: [2021-05-27 Thu 15:49]--[2021-05-27 Thu 16:54] =>  1:05
CLOCK: [2021-05-26 Wed 21:05]--[2021-05-26 Wed 23:24] =>  2:19
CLOCK: [2021-04-08 Thu 21:50]--[2021-04-08 Thu 22:35] =>  0:45
CLOCK: [2021-04-05 Mon 22:19]--[2021-04-05 Mon 22:44] =>  0:25
CLOCK: [2021-03-17 Wed 19:31]--[2021-03-17 Wed 19:33] =>  0:02
CLOCK: [2021-03-17 Wed 17:46]--[2021-03-17 Wed 17:56] =>  0:10
:END:
/[[https://github.com/louietan/anki-editor][anki-editor]] is a minor mode for making Anki cards with Org./

#+begin_src emacs-lisp :results silent :tangle no
(use-package anki-editor
  ;; this version handles mathjax correctly
  ;; :straight (:fork (:repo "louietan/anki-editor" :branch "develop"))
  ;; this version simplifies the tree structure
  ;; :straight
  ;; (:type git :host github :repo "louietan/anki-editor"
  ;; :fork (:host github :repo "leoc/anki-editor"
  ;; :branch "develop"))
  :if (equal (system-name) ps/computer-hostname-pablo)
  :init
  (setq-default anki-editor-use-math-jax t) ; github.com/louietan/anki-editor/issues/60#issuecomment-617441799
  ;; create custom key map
  (progn
    (defvar anki-editor-mode-map (make-sparse-keymap))
    (add-to-list 'minor-mode-map-alist (cons 'anki-editor-mode
                                             anki-editor-mode-map)))

  :custom
  (anki-editor-create-decks t)
  (anki-editor-org-tags-as-anki-tags t)
  :config
  (defun ps/anki-editor-open-note-externally ()
    "Copy note id to clipboard, switch to Anki desktop, and open note in browser."
    (interactive)
    (let ((note-id (org-entry-get nil "ANKI_NOTE_ID")))
      (if (not note-id)
          (error "Note id not found")
        (progn
          (kill-new (concat "nid:" note-id))
          (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"496A3425-8985-4117-AE0F-ABD6DC85FB9F\"'")))))

  (defun ps/anki-editor-push-notes-under-heading (&optional match scope)
    "Push notes under heading to Anki."
    (interactive)
    (anki-editor-push-notes '(4) match scope))

  ;; the two modified functions below allow for notes with empty fields to be pushed without error
  ;; github.com/leoc/anki-editor/pull/1
  (defun ps/anki-editor--build-field-from-content-at-point (name)
    "Build a field with NAME entry from the heading at point."
    (let* ((element (org-element-at-point))
           (format (anki-editor-entry-format))
           (begin (cl-loop for eoh = (org-element-property :contents-begin element)
                           then (org-element-property :end subelem)
                           while eoh
                           for subelem = (progn
                                           (goto-char eoh)
                                           (org-element-context))
                           while (memq (org-element-type subelem)
                                       '(drawer planning property-drawer))
                           finally return (and eoh (org-element-property :begin subelem))))
           (end (org-element-property :contents-end element))
           (raw (or (and begin
                         end
                         (buffer-substring-no-properties
                          begin
                          ;; in case the buffer is narrowed,
                          ;; e.g. by `org-map-entries' when
                          ;; scope is `tree'
                          (min (point-max) end)))
                    "")))
      (cons name (anki-editor--export-string raw format))))

  (defun ps/anki-editor--build-fields ()
    "Build a list of fields from subheadings of current heading.

Return a list of cons of (FIELD-NAME . FIELD-CONTENT)."
    (save-excursion
      (cl-loop with inhibit-message = t ; suppress echo message from `org-babel-exp-src-block'
               initially (unless (org-goto-first-child)
                           (cl-return `(,(anki-editor--build-field-from-content-at-point "Back"))))
               for last-pt = (point)
               for element = (org-element-at-point)
               for heading = (substring-no-properties
                              (org-element-property :raw-value element))
               for format = (anki-editor-entry-format)
               ;; contents-begin includes drawers and scheduling data,
               ;; which we'd like to ignore, here we skip these
               ;; elements and reset contents-begin.
               for begin = (cl-loop for eoh = (org-element-property :contents-begin element)
                                    then (org-element-property :end subelem)
                                    while eoh
                                    for subelem = (progn
                                                    (goto-char eoh)
                                                    (org-element-context))
                                    while (memq (org-element-type subelem)
                                                '(drawer planning property-drawer))
                                    finally return (and eoh (org-element-property :begin subelem)))
               for end = (org-element-property :contents-end element)
               for raw = (or (and begin
                                  end
                                  (buffer-substring-no-properties
                                   begin
                                   ;; in case the buffer is narrowed,
                                   ;; e.g. by `org-map-entries' when
                                   ;; scope is `tree'
                                   (min (point-max) end)))
                             "")
               for content = (anki-editor--export-string raw format)
               collect (cons heading content)
               ;; proceed to next field entry and check last-pt to
               ;; see if it's already the last entry
               do (org-forward-heading-same-level nil t)
               until (= last-pt (point)))))

  (advice-add #'anki-editor--build-fields :override #'ps/anki-editor--build-fields)
  (advice-add #'anki-editor--build-field-from-content-at-point :override #'ps/anki-editor--build-field-from-content-at-point)

  :general
  ;; ("A-i" 'anki-editor-mode)
  (anki-editor-mode-map
   "s-z" 'anki-editor-cloze-region
   "s-i" 'anki-editor-insert-note
   "s-h" 'ps/anki-editor-push-notes-under-heading
   "s-c" 'anki-editor-push-new-notes
   "s-a" 'anki-editor-push-notes ; push all notes
   "s-x" 'ps/anki-editor-open-note-externally))
#+end_src

Of possible interest:
- [[https://emacstil.com/til/2021/11/19/anki-org/][Anki Org – Emacs TIL – Today I learned in Emacs]]
**** Archive                                                                                                         :ARCHIVE:
:PROPERTIES:
:ID:       94D5EA30-9B67-4384-A4A8-A251EA5EA4FC
:END:
***** DONE Check this anki-editor config
CLOSED: [2021-07-10 Sat 13:29]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-10 Sat 13:29
:ID:       6F9CAACC-8CBD-4C1B-9DC3-E2400EE36116
:END:
:LOGBOOK:
CLOCK: [2021-07-10 Sat 12:58]--[2021-07-10 Sat 13:29] =>  0:31
:END:
https://yiufung.net/post/anki-org/

***** DONE Consider posting comment about Anki editor using code blocks
CLOSED: [2021-07-13 Tue 11:06]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-13 Tue 11:06
:ID:       C2ED39C9-4649-401D-B2BC-2D55FC3990FC
:END:
This is not about Org Roam, but about integrating it, and org mode, with Anki. (I imagine there is interest in this integration here, given that the main image in the Org Roam GitHub page shows the template for an Anki card, and that org users are disproportionally likely to also be Anki users.) My question is whether it is in principle possible to extend or modify Anki editor, or develop a similar package, so that babel code blocks rather than org headings are the card delimiters. While I’m really excited about

[2021-07-13 Tue 11:06] No longer necessary with the Anki develop branch.

** org-drill
:PROPERTIES:
:ID:       34FB61E2-5BF6-44F1-B3C4-759D61DB2D34
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 11:55]--[2021-05-04 Tue 12:12] =>  0:17
:END:
/[[https://gitlab.com/phillord/org-drill/][org-drill]] is a spaced-repetition package for Emacs/

#+begin_src emacs-lisp :results silent
(use-package org-drill
  :config
  (add-to-list 'org-modules 'org-drill))
#+end_src

*** TODO [#7] Check org drill for manage music listening
:PROPERTIES:
:Effort:   1:00
:ID:       AA10D76D-6ACC-4A58-BCFF-4253DC7B55F0
:END:
:LOGBOOK:
CLOCK: [2021-05-07 Fri 09:45]--[2021-05-07 Fri 09:45] =>  0:00
:END:

Could be a pilot test for integrating notes and spaced repetition

When to use Anki versus org-drill? Use Anki for everything, except tags that require you to be in front of a computer.

* email
:PROPERTIES:
:ID:       2CF6D256-143D-4F3E-8383-36CB090FC4F2
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 20:05]--[2021-12-11 Sat 20:15] =>  0:10
CLOCK: [2021-07-12 Mon 18:56]--[2021-07-12 Mon 19:03] =>  0:07
CLOCK: [2021-07-10 Sat 20:11]--[2021-07-10 Sat 20:20] =>  0:09
CLOCK: [2021-04-08 Thu 10:10]--[2021-04-08 Thu 10:52] =>  0:42
CLOCK: [2021-04-05 Mon 21:03]--[2021-04-05 Mon 21:42] =>  0:39
:END:

** smtpmail-multi
:PROPERTIES:
:ID:       DDFE6DC9-A986-4E79-BF5B-A99124B65BA2
:END:
/[[https://github.com/vapniks/smtpmail-multi][smtpmail-multi]] allows for  different smtp servers for sending mail./

#+begin_src emacs-lisp :results silent
(use-package smtpmail-multi
  :after mu4e
  :demand t
  :custom
  (smtpmail-multi-accounts
   `((gmail . (,ps/personal-gmail
               "smtp.gmail.com"
               587
               ,ps/personal-gmail
               starttls nil nil nil))
     (gpe . (,ps/personal-gpe-email
             "smtp.gmail.com"
             587
             ,ps/personal-gpe-email
             starttls nil nil nil))))

  (smtpmail-multi-associations
   `((,ps/personal-gmail gmail)
     (,ps/personal-gpe-email gpe)))

  (smtpmail-multi-default-account (quote gmail)))
#+end_src

** sendmail
:PROPERTIES:
:ID:       25BB02C1-B537-4D2F-AF95-3B1217A58E6D
:END:
/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Sending.html][sendmail]] is a mode that provides mail-sending facilities from within Emacs./

#+begin_src emacs-lisp :results silent
(use-feature sendmail
  :custom
  (send-mail-function 'smtpmail-multi-send-it))
#+end_src

** async-mail-sending
:PROPERTIES:
:ID:       BEF562DB-61D5-4AB5-8B8A-44DD866FE285
:END:
/[[https://github.com/lordpretzel/async-email-sending][async-email-sending]] enables asynchronous sending of emails in Emacs using the new built-in sqlite support in Emacs 29./

To try once I switch to Emacs 29.

** message
:PROPERTIES:
:ID:       67208BCE-6FFD-48B2-A5AD-7B72BAF31692
:END:
/[[https://www.gnu.org/software/emacs/manual/html_mono/message.html][message]] is a message composition mode./

#+begin_src emacs-lisp :results silent
(use-feature message
  :custom
  (message-kill-buffer-on-exit t "`message-send-and-exit' kills buffer, rather than burying it")
  (message-send-mail-function 'smtpmail-multi-send-it)
  :hook
  (message-mode-hook . (lambda () (auto-fill-mode -1)))
  :general
  ((message-mode-map org-msg-edit-mode-map)
   "s-c" 'message-send-and-exit
   "s-f" 'message-goto-from
   "s-s" 'message-goto-subject
   "s-t" 'message-goto-to
   "s-A-b" 'message-goto-bcc
   "s-A-c" 'message-goto-cc
   "s-A-s" 'message-send)
  (message-mode-map
   "s-b" 'message-goto-body))
#+end_src
*** TODO [#4] Configure ~message-send-mail-function~ so that messages are sent asynchronously
:PROPERTIES:
:ID:       6A48B9FE-3FC9-4D41-B124-F9D7D3898CB4
:Effort:   0:45
:END:
[[https://turkja.fi/posts/emacs-and-smtp/][Emacs and SMTP with gmail | Jarkko Turkulainen]]
** mml
:PROPERTIES:
:ID:       2A87061B-BE45-443B-AB2C-893A69C20003
:END:
/[[https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/Composing.html][mml]] is a library that parses a MML (MIME Meta Language) and generates MIME messages./

#+begin_src emacs-lisp :results silent
(use-feature mml
  :general
  (message-mode-map
   "s-a" 'mml-attach-file))
#+end_src

** mu4e
:PROPERTIES:
:ID:       1B568415-F030-437B-921C-B4A65B370A6E
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 09:23]--[2022-07-19 Tue 09:48] =>  0:25
CLOCK: [2022-07-19 Tue 08:37]--[2022-07-19 Tue 09:01] =>  0:24
CLOCK: [2022-07-18 Mon 23:00]--[2022-07-18 Mon 23:54] =>  0:54
CLOCK: [2022-07-15 Fri 14:22]--[2022-07-15 Fri 14:46] =>  0:24
CLOCK: [2022-07-11 Mon 22:30]--[2022-07-12 Tue 00:07] =>  1:37
CLOCK: [2022-07-09 Sat 22:07]--[2022-07-09 Sat 23:16] =>  1:09
CLOCK: [2022-06-09 Thu 22:38]--[2022-06-09 Thu 22:55] =>  0:17
CLOCK: [2022-05-30 Mon 17:03]--[2022-05-30 Mon 17:21] =>  0:18
CLOCK: [2022-05-30 Mon 03:45]--[2022-05-30 Mon 04:19] =>  0:34
CLOCK: [2022-05-29 Sun 10:31]--[2022-05-29 Sun 10:55] =>  0:24
CLOCK: [2022-05-24 Tue 14:59]--[2022-05-24 Tue 15:16] =>  0:17
CLOCK: [2022-05-13 Fri 16:30]--[2022-05-13 Fri 17:02] =>  0:32
CLOCK: [2021-12-06 Mon 23:37]--[2021-12-07 Tue 00:24] =>  0:47
CLOCK: [2021-12-03 Fri 15:48]--[2021-12-03 Fri 16:15] =>  0:27
CLOCK: [2021-11-18 Thu 14:17]--[2021-11-18 Thu 14:22] =>  0:05
CLOCK: [2021-10-25 Mon 10:27]--[2021-10-25 Mon 10:30] =>  0:03
CLOCK: [2021-10-20 Wed 20:07]--[2021-10-20 Wed 20:15] =>  0:08
CLOCK: [2021-10-02 Sat 13:00]--[2021-10-02 Sat 13:06] =>  0:06
CLOCK: [2021-10-01 Fri 22:04]--[2021-10-01 Fri 22:28] =>  0:24
CLOCK: [2021-09-29 Wed 21:39]--[2021-09-29 Wed 22:02] =>  0:23
CLOCK: [2021-09-16 Thu 21:00]--[2021-09-16 Thu 21:11] =>  0:11
CLOCK: [2021-09-16 Thu 20:12]--[2021-09-16 Thu 20:16] =>  0:04
CLOCK: [2021-09-10 Fri 11:02]--[2021-09-10 Fri 11:12] =>  0:10
CLOCK: [2021-08-21 Sat 20:44]--[2021-08-21 Sat 21:07] =>  0:23
CLOCK: [2021-08-20 Fri 12:46]--[2021-08-20 Fri 12:50] =>  0:04
CLOCK: [2021-08-17 Tue 14:45]--[2021-08-17 Tue 14:52] =>  0:07
CLOCK: [2021-08-17 Tue 09:48]--[2021-08-17 Tue 09:59] =>  0:11
CLOCK: [2021-08-16 Mon 21:08]--[2021-08-16 Mon 21:11] =>  0:03
CLOCK: [2021-08-16 Mon 19:41]--[2021-08-16 Mon 20:05] =>  0:24
CLOCK: [2021-08-16 Mon 14:12]--[2021-08-16 Mon 17:22] =>  3:10
CLOCK: [2021-08-15 Sun 13:34]--[2021-08-15 Sun 13:46] =>  0:12
CLOCK: [2021-08-14 Sat 17:53]--[2021-08-14 Sat 18:13] =>  0:20
CLOCK: [2021-08-13 Fri 21:36]--[2021-08-13 Fri 22:05] =>  0:29
CLOCK: [2021-08-12 Thu 15:57]--[2021-08-12 Thu 16:25] =>  0:28
CLOCK: [2021-08-12 Thu 09:28]--[2021-08-12 Thu 09:54] =>  0:26
CLOCK: [2021-08-10 Tue 20:37]--[2021-08-10 Tue 20:38] =>  0:01
CLOCK: [2021-08-09 Mon 23:06]--[2021-08-09 Mon 23:45] =>  0:39
CLOCK: [2021-08-09 Mon 22:40]--[2021-08-09 Mon 23:00] =>  0:20
CLOCK: [2021-08-09 Mon 22:16]--[2021-08-09 Mon 22:30] =>  0:14
CLOCK: [2021-08-09 Mon 21:40]--[2021-08-09 Mon 22:05] =>  0:25
CLOCK: [2021-08-09 Mon 20:35]--[2021-08-09 Mon 21:28] =>  0:53
CLOCK: [2021-08-09 Mon 19:37]--[2021-08-09 Mon 20:05] =>  0:24
CLOCK: [2021-08-09 Mon 18:57]--[2021-08-09 Mon 19:21] =>  0:24
CLOCK: [2021-08-09 Mon 18:33]--[2021-08-09 Mon 18:51] =>  0:18
CLOCK: [2021-08-08 Sun 22:08]--[2021-08-08 Sun 22:36] =>  0:28
CLOCK: [2021-08-08 Sun 21:10]--[2021-08-08 Sun 21:44] =>  0:34
CLOCK: [2021-08-08 Sun 20:27]--[2021-08-08 Sun 21:02] =>  0:35
CLOCK: [2021-08-08 Sun 19:47]--[2021-08-08 Sun 20:01] =>  0:14
CLOCK: [2021-08-08 Sun 19:12]--[2021-08-08 Sun 19:42] =>  0:30
CLOCK: [2021-08-08 Sun 17:51]--[2021-08-08 Sun 18:12] =>  0:21
CLOCK: [2021-08-08 Sun 15:29]--[2021-08-08 Sun 15:45] =>  0:16
CLOCK: [2021-08-08 Sun 15:27]--[2021-08-08 Sun 15:28] =>  0:01
CLOCK: [2021-08-08 Sun 12:14]--[2021-08-08 Sun 13:04] =>  0:50
CLOCK: [2021-08-08 Sun 10:50]--[2021-08-08 Sun 10:54] =>  0:04
CLOCK: [2021-08-06 Fri 12:40]--[2021-08-06 Fri 14:16] =>  1:36
CLOCK: [2021-08-06 Fri 12:28]--[2021-08-06 Fri 12:38] =>  0:10
CLOCK: [2021-08-06 Fri 11:26]--[2021-08-06 Fri 11:31] =>  0:05
CLOCK: [2021-08-05 Thu 21:33]--[2021-08-05 Thu 21:49] =>  0:16
CLOCK: [2021-08-05 Thu 19:40]--[2021-08-05 Thu 20:00] =>  0:20
CLOCK: [2021-08-05 Thu 19:12]--[2021-08-05 Thu 19:20] =>  0:08
CLOCK: [2021-08-05 Thu 13:57]--[2021-08-05 Thu 14:50] =>  0:53
CLOCK: [2021-08-05 Thu 13:42]--[2021-08-05 Thu 13:53] =>  0:11
CLOCK: [2021-08-05 Thu 13:08]--[2021-08-05 Thu 13:16] =>  0:08
CLOCK: [2021-04-18 Sun 21:36]--[2021-04-18 Sun 22:25] =>  0:49
CLOCK: [2021-04-18 Sun 20:55]--[2021-04-18 Sun 21:27] =>  0:32
CLOCK: [2021-04-15 Thu 20:52]--[2021-04-15 Thu 21:10] =>  0:18
CLOCK: [2021-04-15 Thu 16:13]--[2021-04-15 Thu 16:31] =>  0:18
:END:
/[[https://github.com/djcb/mu][mu4e]] is an an emacs-based e-mail client./

- [[https://www.youtube.com/watch?v=yZRyEhi4y44]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][A Complete Guide to Email in Emacs using Mu and Mu4e]]. Advanced setup, for MacOS. But uses OfflineMAP rather than isync.
- [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e for Dummies : emacs]].
- [[https://www.ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html][Reading IMAP email in Emacs]]. Very thorough and clearly explained tutorial, written in 2021. Looks like the best resource so far.
- [[https://gist.github.com/areina/3879626][Manage your email in emacs with mu4e · GitHub]]. Instructions from 2016, with updates in comments.
- [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]. Very nice appearance/layout.

- How to set up ~offlineimap~ to retrieve password from ~pass~: https://unix.stackexchange.com/a/48355
- How to install ~mu4e~: https://emacs.stackexchange.com/questions/46156/how-to-install-mu-and-mu4e-with-gui-emacs
- https://www.sastibe.de/2021/01/setting-up-emacs-as-mail-client/

  https://emacs.readthedocs.io/en/latest/mu4e__email_client.html

To re-index the database without restarting Emacs, run ~pkill -2 -u $UID mu~ or ~then ~mu index~ from the terminal. Or try [[https://github.com/djcb/mu/issues/8#issuecomment-396649525][this script]].

If you get a ~pinentry~ problem, try running this on the termnal ~gpgconf --kill gpg-agent~.

To debug "Update process returned with non-zero exit code", ~(start-process-shell-command "test-mu4e" "test-mu4e" mu4e-get-mail-command)~
https://mu-discuss.narkive.com/mxM4AVIW/how-to-debug-non-zero-exit-code

To initialize the database (after reinstalling), ~mu init --maildir=~/Maildir --my-address=jim@example.com~. If you have multiple email addresses, include each address as a separate ~--my-address~ parameter, e.g. ~mu init --maildir=~/Mail --my-address=jim@example.com --my-address=bob@example.com~. Then run ~mu index~. See [[https://www.djcbsoftware.nl/code/mu/mu4e/Initializing-the-message-store.html][documentation]].

[2021-08-12 Thu 09:45] If you encounter problems with mu and Straight, see [[https://github.com/raxod502/straight.el/issues/491#issuecomment-760150634][this thread]].

[2022-07-11 Mon 23:58] Note: ~mu~ is now pinned in ~brew~ (~brew pin mu~) to version 1.6.11. The most recent version (1.8.5) wasn't working well with [[id:DADEABFE-0E73-4E8F-9973-771FFEF55B60][org-msg]] (see [[https://github.com/jeremy-compostella/org-msg/issues/153][this issue]] and [[https://groups.google.com/g/mu-discuss/c/V1WxQzglkZA/m/Av9vJ_BkAgAJ][this thread]]). Once the issue is resolved, unpin it and upgrade to the latest version.

Here's the process I followed:

1. ~$ brew uninstall mu~
2. download [[https://raw.githubusercontent.com/Homebrew/homebrew-core/c42744ba370044e5363e1a6547014c810304b520/Formula/mu.rb][this formula]]
3. ~$ HOMEBREW_NO_INSTALL_CLEANUP=1 brew install /Users/pablostafforini/Downloads/mu.rb~
4. ~$ brew pin mu~

[2023-01-30 Mon 17:12] The problem is still not solved.

#+begin_src emacs-lisp :results silent
(use-package mu4e
  :if (equal (system-name) ps/computer-hostname-pablo)
  ;; :demand t
  :defer 5
  :straight (:local-repo
             "/opt/homebrew/Cellar/mu/1.8.14/share/emacs/site-lisp/mu/mu4e"
             :pre-build
             ()))
  #+end_src
  
  #+begin_src emacs-lisp :results silent :tangle no
  :init
  (setq ps/mu4e-inbox-folder "/Inbox")
  (setq ps/mu4e-daily-folder "/Daily")

  :custom
  (mu4e-debug t "uncomment when debugging")
  (mail-user-agent 'mu4e-user-agent)
  (read-mail-command 'mu4e)
  (mu4e-split-view 'single-window)
  (mu4e-headers-show-target nil)
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-update-interval 180)
  (mu4e-drafts-folder "/[Gmail]/Drafts")
  (mu4e-sent-folder "/[Gmail]/Sent Mail")
  (mu4e-refile-folder "/[Gmail]/All Mail")
  (mu4e-trash-folder "/[Gmail]/Trash")
  (mu4e-maildir-shortcuts
   `((,ps/mu4e-inbox-folder . ?i)
     (,ps/mu4e-daily-folder . ?y)
     (,mu4e-drafts-folder  . ?d)
     (,mu4e-sent-folder    . ?t)
     (,mu4e-trash-folder   . ?x)
     (,mu4e-refile-folder  . ?a)))
  (mu4e-headers-results-limit 1000)
  (mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (mu4e-view-show-images t)
  (mu4e-view-show-addresses t)
  (mu4e-headers-visible-lines 25)
  (mu4e-headers-include-related nil)
  (mu4e-change-filenames-when-moving t "required for correct Gmail refiling")
  (mu4e-sent-messages-behavior 'delete "Gmail already keeps a copy")
  (mu4e-attachment-dir ps/dir-downloads)
  (mu4e-compose-format-flowed t)
  (mu4e-hide-index-messages t)
  (mu4e-confirm-quit nil)
  (mu4e-html2text-command 'mu4e-shr2text "requires `mu4e-contrib'")
  ;; performance improvements
  ;; groups.google.com/g/mu-discuss/c/hRRNhM5mwr0
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html
  (mu4e-index-cleanup t "`nil' improves performance")
  (mu4e-index-lazy-check t "`t' improves performance")
  (mu4e-compose-dont-reply-to-self t)

  :config
  (require 'mu4e-contrib)

  (mu4e t)
  (defun ps/mu4e-gmail-fix-flags (mark msg)
    (message "fixing flags") ; for testing
    (cond ((eq mark 'trash)  (mu4e-action-retag-message msg "-\\Inbox,+\\Trash,-\\Draft"))
          ((eq mark 'refile) (mu4e-action-retag-message msg "-\\Inbox"))
          ((eq mark 'flag)   (mu4e-action-retag-message msg "+\\Starred"))
          ((eq mark 'unflag) (mu4e-action-retag-message msg "-\\Starred"))))

  (defun ps/mu4e-headers-archive ()
    "In headers mode, archive message at point, without asking for
confirmation."
    (interactive)
    (mu4e-headers-mark-for-refile)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-archive ()
    "In view mode, archive message at point, without asking for
confirmation."
    (interactive)
    (mu4e-view-mark-for-refile)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-headers-org-capture (&optional arg)
    "In headers mode, capture message at point with `org-capture'
 and, unless invoked with a prefix argument, archive it."
    (interactive)
    (org-capture nil "e")
    (unless arg
      (ps/mu4e-headers-archive)))

  (defun ps/mu4e-view-org-capture (&optional arg)
    "In view mode, capture message at point with `org-capture' and,
 unless invoked with a prefix argument, archive it."
    (interactive)
    (org-capture nil "e")
    (unless arg
      (ps/mu4e-view-archive)))

  (defun ps/mu4e-headers-trash ()
    "In headers mode, trash message at point without asking for
confirmation."
    (interactive)
    (mu4e-headers-mark-for-trash)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-trash ()
    "In view mode, trash message at point without asking for
confirmation."
    (interactive)
    (mu4e-view-mark-for-trash)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-headers-move ()
    "In headers mode, move and execute message at point without
asking for confirmation."
    (interactive)
    (mu4e-headers-mark-for-move)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-move ()
    "In view mode, move and execute message at point without asking
for confirmation."
    (interactive)
    (mu4e-view-mark-for-move)
    (mu4e-mark-execute-all t))

  ;; copied from David Wilson
  ;; github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Mail-05.org#creating-a-mail-processing-workflow
  (defun ps/store-link-to-mu4e-query ()
    (interactive)
    (let ((org-mu4e-link-query-in-headers-mode t))
      (call-interactively 'org-store-link)))

  ;; copied from github.com/danielfleischer/mu4easy#mu4e
  (setf (alist-get 'trash mu4e-marks)
        '(:char ("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                ;; Here's the main difference to the regular trash mark, no +T
                ;; before -N so the message is not marked as IMAP-deleted:
                :action (lambda (docid msg target)
                          (mu4e~proc-move docid
                                          (mu4e~mark-check-target target) "+S-u-N"))))

  (defun ps/mu4e-view-in-gmail ()
    "Open Gmail in a browser and view message at point in it."
    (interactive)
    (let* ((id (url-hexify-string
                (plist-get (mu4e-message-at-point) :message-id)))
           (url (concat "https://mail.google.com/mail/u/0/#search/rfc822msgid%3A" id)))
      (browse-url url)))

  ;; github.com/djcb/mu/issues/2198
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieving-mail.html
  (defun ps/mu4e-reindex-db ()
    "Reindex `mu' database."
    (interactive)
    (when (shell-command "pkill -2 -u $UID mu")
      (shell-command "sleep 1")
      (shell-command "mu index")))

  (defun ps/mu4e-copy-sum ()
    "Copy amount in subject line."
    (interactive)
    (when (eq major-mode 'mu4e-headers-mode)
      (save-excursion
        (re-search-forward "\\(\\$\\)\\([[:digit:]]+.[[:digit:]]+\\)")
        (kill-new (match-string 2)))))

  (defun ps/mu4e-compose-new-externally ()
    "Start writing a new message in Gmail."
    (interactive)
    (browse-url "https://mail.google.com/mail/u/0/#inbox?compose=new"))

  (defun ps/mu4e-mark-execute-all-no-confirm ()
    "Execute the actions for all marked messages in this buffer,
without asking for user confirmation."
    (interactive)
    (mu4e-mark-execute-all))

  ;; (defun ps/mu4e--main-menu ()
  ;; "mu4e main view in the minibuffer."
  ;; (interactive)
  ;; (let ((func (mu4e-read-option
  ;; "Doit:"
  ;; '(("all" . mu4e-refile-folder)
  ;; ("compose" . mu4e-compose-new)
  ;; ("drafts" . mu4e-drafts-folder)
  ;; ("gmail-compose" . ps/mu4e-compose-new-externally)
  ;; ("inbox" . ps/mu4e-inbox-folder)
  ;; ("jump" . mu4e~headers-jump-to-maildir()
  ;; ("reindex" . ps/mu4e-reindex-db)
  ;; ("search" . mu4e-search)
  ;; ("sent" . mu4e-sent-folder)
  ;; ("trash" . mu4e-trash-folder)
  ;; ("bookmarks" . mu4e-headers-search-bookmark)
  ;; ("update" . mu4e-update-mail-and-index)
  ;; ("help" . mu4e-display-manual))))))
  ;; (call-interactively func)
  ;; (when (eq func mu4e-context-switch)
  ;; (sit-for 1)
  ;; (mu4e--main-menu)))))

  ;; (advice-add 'mu4e--main-menu :override #'ps/mu4e--main-menu)

  (defun ps/mu4e-goto-archive ()
    "Go to `archive' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-archive-folder "\"")))

  (defun ps/mu4e-goto-daily ()
    "Go to `daily' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-daily-folder "\"")))

  (defun ps/mu4e-goto-drafts ()
    "Go to `drafts' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-drafts-folder "\"")))

  (defun ps/mu4e-goto-inbox ()
    "Go to `inbox' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-inbox-folder "\"")))

  (defun ps/mu4e-goto-sent ()
    "Go to `sent' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-sent-folder "\"")))

  (defun ps/mu4e-goto-trash ()
    "Go to `trash' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-trash-folder "\"")))

  (defun ps/mu4e-update-all-mail (arg)
    "Get new mail by running `mu4e-get-mail-command' set to `mbsync
-a'."
    (interactive "P")
    (let ((mu4e-get-mail-command
           (if arg
               "mbsync -a --pull-new"
             "mbsync -a")))
      (mu4e-update-mail-and-index t)))

  ;; (run-with-timer (* 60 25) t 'ps/mu4e-update-all-mail)

  (defun ps/mu4e-set-account ()
    "Set the account for composing a message."
    (let ((mail
           (cdr
            (car
             (ignore-errors
               (mu4e-message-field mu4e-compose-parent-message :to))))))
      (if mail
          (setq user-mail-address mail)
        (setq user-mail-address ps/personal-gmail))))


  (defun ps/mu4e-headers-mark-read-and-archive ()
    "In headers mode, mark message at point as read and archive
it, without asking for confirmation."
    (interactive)
    (mu4e-headers-mark-for-read)
    (mu4e-mark-execute-all t)
    (forward-line -1)
    (ps/mu4e-headers-archive))

  :hook
  (mu4e-view-mode-hook . (lambda () "prevent line breaks" (toggle-truncate-lines 1)))
  (mu4e-mark-execute-pre-hook . ps/mu4e-gmail-fix-flags)
  (mu4e-compose-pre-hook . org-msg-mode)
  (mu4e-compose-pre-hook . ps/mu4e-set-account)
  ;; (mu4e-compose-mode-hook . (lambda () "prevent accumulation of drafts" (auto-save-visited-mode 1)))

  :general
  ("A-m" 'mu4e)
  ((mu4e-main-mode-map mu4e-headers-mode-map mu4e-view-mode-map)
   "c" 'mu4e-compose-new)
  ((mu4e-headers-mode-map mu4e-view-mode-map)
   "$" 'ps/mu4e-copy-sum
   "," 'mu4e-copy-message-path
   "<" 'mu4e-headers-split-view-shrink
   ">" 'mu4e-headers-split-view-grow
   "s-f" 'mu4e-compose-forward
   "i" 'mu4e-select-other-view
   "r" 'mu4e-compose-reply)
  (mu4e-main-mode-map
   "a" 'ps/mu4e-goto-archive
   "d" 'ps/mu4e-goto-drafts
   "g" 'ps/mu4e-compose-new-externally
   "h" 'mu4e-display-manual
   "i" 'ps/mu4e-goto-inbox
   "j" 'mu4e~headers-jump-to-maildir
   "r" 'ps/mu4e-reindex-db
   "s" 'mu4e-headers-search
   "t" 'ps/mu4e-goto-send
   "u" 'mu4e-update-mail-and-index
   "y" 'ps/mu4e-goto-daily
   "x" 'ps/mu4e-goto-trash)
  (mu4e-headers-mode-map
   "*" 'mu4e-headers-mark-all
   "A" 'mu4e-headers-mark-all-unread-read
   "d" 'mu4e-headers-mark-for-delete
   "D" 'ps/mu4e-headers-trash
   "e" 'ps/mu4e-headers-archive
   "E" 'ps/mu4e-headers-mark-read-and-archive
   "f" 'ps/mu4e-headers-view-message
   "k" 'mu4e-headers-prev
   "l" 'mu4e-headers-next
   "m" 'mu4e-headers-mark-for-something
   "o" 'ps/mu4e-headers-org-capture
   "R" 'mu4e-headers-mark-for-refile
   "V" 'mu4e-headers-mark-for-move
   "v" 'ps/mu4e-headers-move
   "x" 'ps/mu4e-mark-execute-all-no-confirm)
  (mu4e-view-mode-map
   "," 'mu4e-view-headers-next
   "." 'mu4e-view-headers-prev
   "d" 'mu4e-view-mark-for-delete
   "D" 'ps/mu4e-view-trash
   "e" 'ps/mu4e-view-archive
   "x" 'ps/mu4e-view-in-gmail
   "L" 'mu4e-view-save-attachments
   "m" 'mu4e-view-mark-for-something
   "o" 'ps/mu4e-view-org-capture
   "v" 'ps/mu4e-view-move
   "w" 'mu4e-copy-message-path
   "A-C-s-u" nil
   "A-C-s-p" nil))
#+end_src

- [[https://github.com/morzahavi/.emacs.d/blob/3c5dcd402f19b4b6a9c07942825de52a874e870c/modules/email/mu4e/config.el][.emacs.d/config.el at 3c5dcd402f19b4b6a9c07942825de52a874e870c · morzahavi/.emacs.d · GitHub]]. Highly elaborate config.
- https://ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html. Excellent setup instructions.
- Package to try: [[https://github.com/rougier/mu4e-thread-folding][GitHub - rougier/mu4e-thread-folding: Functions for folding threads in mu4e headers view]]
  - See also [[https://gist.github.com/rougier/98e83fb50e19fb73fe34a7ecc5fc1ccc][this]] (discussed [[https://www.reddit.com/r/emacs/comments/pvpb6d/mu4e_very_fast_thread_folding/][here]])

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       7914B367-02AA-4BB6-876E-DB154B692D86
:END:
**** DONE Adapt config from Nan Zhong
CLOSED: [2021-08-10 Tue 20:39]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-10 Tue 20:39
:ID:       BC944B2C-E4B7-4CF1-BD84-C777F984CB79
:END:
:LOGBOOK:
CLOCK: [2021-08-10 Tue 20:38]--[2021-08-10 Tue 20:39] =>  0:01
CLOCK: [2021-08-08 Sun 18:25]--[2021-08-08 Sun 18:53] =>  0:28
:END:
[[https://github.com/nanzhong/nanzho.ng/blob/e68934dc2804a5148ebda9b0c4f444c45a875be8/posts/better-email-with-mu4e/index.org][post]]
**** DONE Fix mu4e issues
CLOSED: [2021-08-17 Tue 14:54]
:PROPERTIES:
:ARCHIVE_TIME: 2021-08-17 Tue 14:54
:ID:       9566DEA1-45A9-40ED-AA40-5C1B0A9EE6AB
:END:
:LOGBOOK:
CLOCK: [2021-08-17 Tue 14:52]--[2021-08-17 Tue 14:54] =>  0:02
CLOCK: [2021-08-16 Mon 22:30]--[2021-08-17 Tue 00:49] =>  2:19
CLOCK: [2021-08-16 Mon 21:45]--[2021-08-16 Mon 22:27] =>  0:42
CLOCK: [2021-08-15 Sun 23:10]--[2021-08-16 Mon 00:41] =>  1:31
CLOCK: [2021-08-15 Sun 22:53]--[2021-08-15 Sun 23:02] =>  0:09
CLOCK: [2021-08-14 Sat 00:00]--[2021-08-14 Sat 00:05] =>  0:05
CLOCK: [2021-08-13 Fri 23:35]--[2021-08-13 Fri 23:46] =>  0:11
CLOCK: [2021-08-13 Fri 23:17]--[2021-08-13 Fri 23:26] =>  0:09
CLOCK: [2021-08-13 Fri 22:43]--[2021-08-13 Fri 23:03] =>  0:20
CLOCK: [2021-08-13 Fri 22:11]--[2021-08-13 Fri 22:31] =>  0:20
CLOCK: [2021-08-13 Fri 21:12]--[2021-08-13 Fri 21:31] =>  0:19
:END:
- [X] ~mbsync~ fails to create trash folder
  - when I delete the local [Gmail]/Trash folder and I move a message to the trash using Gmail, running ~mbsync -a~ does not return an error, but it does not create a local ~[Gmail]/Trash~ either.
  - I then set the ~mu4e~ variable ~mu4e-trash-folder~ to ~"/[Gmail]/Trash"~ and run ~mu4e~. I am asked if I want to create that folder and confirm that I do. Then I run ~mbsync -a~ from the terminal and get this error message:
    Maildir notice: no UIDVALIDITY, creating new.
    Error: channel gmail: far side box [Gmail]/Trash cannot be opened.
  - From ~mu4e~ I then move the email in trash to ~[Gmail]/All mail~, and from ~Dired~ delete the ~[Gmail]/Trash~ folder. I configure ~mbsync~ and ~mu4e~ to use ~[Gmail]/Bin~ as the trash folder, then run ~mbsync -a~. No error is logged. Then from ~mu4e~ I move a couple of emails to ~[Gmail]/Bin~ and run ~mbsync -a~. No errors are logged, but the emails do not show up in the Gmail trash.
  - I now repeat all the steps in the previous bullet point, but using instead ~[Gmail]/Bin2~ as a test. This results in the creation of a ~[Gmail]/Bin2~ "label" on Gmail (i.e. an entity different from the native Gmail bin).
  - I now reverse all these steps (delete the new label from Gmail, delete the corresponding folder in my hard drive, and set the trash folder on both ~mbsync~ and ~mu4e~ to ~[Gmail]/Bin~. The key issue is whether Gmail now also creates a new label or not. If not, it means it's treating ~[Gmail]/Bin~ and ~[Gmail]/Bin2~ differently, which suggests ~[Gmail]/Bin~ is the folder Gmail recognizes as the trash folder. But no: I now see that it creates another folder, so it's treating the two equally.
  - SOLVED! I had to change the Gmail settings: labels > tick 'Show in IMAP' for Trash.
- [X] Multiple drafts are created per message (both on mu and on Gmail), which are not discarded when the email is sent.
  It's very likely this is caused by ~org-msg~.
  SOLVED! With the function above.
- [X] Sent items appear unread
  Need to check if this persists. Something to try is other values of the ~mu4e-sent-messages-behavior~ variable.

  [2021-08-17 Tue 14:54] I'm almost certain this is now solved, though I haven't double-checked.
- [X] Trashed items can't be opened:
  - When ~mu4e~ trashes a message, it can be opened, but only before a sync is completed.
  Original message trashed:
  1629083497.01b8b230b0fa8074.192.168.1.2:2,T

  After sync:
  1629083497.01b8b230b0fa8074.192.168.1.2,U=12:2,T
  1629083249.4bc482bca235ddd3.192.168.1.2,U=11:2,T

  The first file is the original, but a second one is created.

  [2021-08-17 Tue 14:53] This was solved by deleting the databse and reindexing.
- [X] Archived items are not moved out of inbox
  This was fixed by tweaking the hook. Maybe it's because it now calls a proper function rather than a lambda? But there are differences between the function and the lambda, so it's probably that.
  [2021-08-16 Mon 00:02] Now the problem has reappeared. :( Next steps:
  - Restore previous states of version-controlled init file and see if it works with any of them.

  I restored version from two days ago and the issue appears fixed. I tried various actions and they all worked fine:

  2021-06-10: d - Moved message to trash
  2021-06-09: D - Expunges it
  2021-06-08: v i - Moved it to inbox
  2021-06-07: v d - Moved it to drafts
  2021-06-06: + - starred it

  It did this both on mu4e and gmail, and the emails could be opened without a problem after sync.

  [2021-08-17 Tue 14:53] This was solved by copying Daniel Fleischer's [[https://github.com/danielfleischer/mu4easy][mbsync configuration]].
- [X] Marking and deleting behaves differently than moving to trash
  This is simply because ~mu4e~ has separate ~delete~ and ~trash~ commands.

**** DONE [#5] Fix "error in process filter" problem
CLOSED: [2021-09-27 Mon 14:48]
:PROPERTIES:
:Effort:   2:00
:ARCHIVE_TIME: 2021-09-27 Mon 14:48
:ID:       6DAFB873-7B62-4EF3-81B7-E6CF8FED64BC
:END:
To try:
- [X] Set ~mu4e-index-lazy-check~ to ~nil~
  Problems persisted.
- [ ] Set ~mu4e-index-cleanup~ to ~t~
  [2021-08-29 Sun 13:05] Has been working fine for the past several days.

  I did notice an error message, which probably precedes the problem I'm trying to fix, though I haven't encountered any manifestation of the problem. The [[https://sourceforge.net/p/isync/mailman/isync-devel/?limit=250&page=2][mbsync]] list contains a discussion:

  "it's just telling you that you modified the message in both stores in ways that cannot be reconciled (which means it drops the less interesting change, e.g., a flag update on one end when the message was deleted on the other end)."

  [2021-09-01 Wed 12:44] Seems to be working fine. I will now enable periodic checking of messages, setting ~mu4e-update-interval~ to ~600~.

  [2021-09-06 Mon 09:16] Sometimes I experience the old problem where mu4e stops working. I think this happens because I launch it while it is in the process of checking for email. See [[https://www.djcbsoftware.nl/code/mu/mu4e/Retrieving-mail.html][here]].
- [ ] Set ~mu4e-index-cleanup~ to ~t~ and ~mu4e-index-lazy-check~ to ~nil~

  bottom line: with both variables set to ~t~ it has worked fine for over a few weeks. so marking as DONE.
**** DONE Figure out why sent messages are not being saved
CLOSED: [2021-10-20 Wed 19:38]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-10-20 Wed 19:38
:ID:       E775187D-CF83-4936-8BC7-D5F0307D0D77
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:30]--[2021-10-20 Wed 19:38] =>  0:08
:END:
Setting ~mu4e-sent-messages-behavior~ to ~sent~ solves the issue.

**** DONE Create command to open in Gmail
CLOSED: [2021-12-11 Sat 11:17]
:PROPERTIES:
:ARCHIVE_TIME: 2021-12-11 Sat 11:17
:ID:       D266FFD9-B9D0-4B2C-949B-C0A2207E4E44
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 10:58]--[2021-12-11 Sat 11:17] =>  0:19
CLOCK: [2021-12-10 Fri 20:24]--[2021-12-10 Fri 21:08] =>  0:44
:END:

**** DONE Figure out how to re-index mu database without restarting Emacs
CLOSED: [2022-02-20 Sun 16:57]
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-20 Sun 16:57
:ID:       18F8F2FD-A9C8-43BE-9216-4E732E900B72
:END:
~pkill -2 -u $UID mu~
**** DONE [#4] Fix cert issue
CLOSED: [2022-02-23 Wed 16:33]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2022-02-23 Wed 16:33
:ID:       7BEC34EF-51D7-4D6C-8DC6-34769C6F6146
:END:
:LOGBOOK:
CLOCK: [2021-12-10 Fri 22:35]--[2021-12-10 Fri 23:19] =>  0:44
:END:
Posted a question [[https://emacs.stackexchange.com/questions/69719/fingerprint-has-changed-message-when-attempting-to-connect-to-smtp-gmail-com][here]].
**** DONE [#5] Fix 'Buffer " *mu4e-update*" has a running process; kill it? (y or n) y'
CLOSED: [2022-06-06 Mon 20:03]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2022-06-08 Wed 21:42
:ID:       38F9293B-610E-426A-AFD8-27278859495F
:END:
:LOGBOOK:
CLOCK: [2022-06-06 Mon 19:53]--[2022-06-06 Mon 20:03] =>  0:10
:END:
~(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))~
**** DONE [#7] Cleanup 'drafts' folder in mu4e
CLOSED: [2022-06-10 Fri 14:06]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2022-06-10 Fri 14:06
:ID:       99679FED-8701-4590-8028-D6073275CD02
:END:
:LOGBOOK:
CLOCK: [2022-06-10 Fri 13:38]--[2022-06-10 Fri 14:06] =>  0:28
CLOCK: [2022-06-02 Thu 19:31]--[2022-06-02 Thu 19:51] =>  0:20
CLOCK: [2022-06-02 Thu 18:54]--[2022-06-02 Thu 19:31] =>  0:37
:END:
**** DONE [#6] Figure out why drafts are not synchronized with Gmail
CLOSED: [2022-06-10 Fri 14:06]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2022-06-10 Fri 14:06
:ID:       73DD715A-DC15-4CC6-97B9-2C0C7E9CBC8B
:END:
:LOGBOOK:
CLOCK: [2022-05-07 Sat 18:15]--[2022-05-07 Sat 18:29] =>  0:14
:END:
**** DONE Disable auto-save
CLOSED: [2022-06-10 Fri 14:08]
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-10 Fri 14:08
:ID:       0E80B380-4658-4FD2-B013-A7F5A18C7BD6
:END:
:LOGBOOK:
CLOCK: [2022-06-10 Fri 13:34]--[2022-06-10 Fri 13:38] =>  0:04
:END:
I don't think this is possible given that I have ~auto-save-visited-mode~ enabled. It can be disabled on a per-buffer basis, but I this would require the buffer in question to be modified in a special way. (It would work for a typical file-visiting buffer, but not for the ~org-msg~ buffer.) So I've resigned myself to not synchronize the drafts folder, i.e. exclude this folder in the ~mbsync~ config file. I don't think this is a big deal because I hardly ever want to save messages to a drafts folder.
**** DONE Configure mbsync to send with gpe Google account
CLOSED: [2022-07-21 Thu 17:37]
:PROPERTIES:
:ID:       76CE0EAD-FE7C-48E4-AEA5-44C9DE67611E
:ARCHIVE_TIME: 2022-08-29 Mon 21:07
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 17:57]--[2022-07-21 Thu 18:17] =>  0:20
CLOCK: [2022-07-21 Thu 16:30]--[2022-07-21 Thu 17:36] =>  1:06
CLOCK: [2022-07-21 Thu 15:21]--[2022-07-21 Thu 15:57] =>  0:36
:END:
**** DONE Tweak ~ps/mu4e-set-account~ to change signature
CLOSED: [2022-07-26 Tue 17:03]
:PROPERTIES:
:ID:       055B82FE-BC58-4EDE-91B6-94797E6A431E
:ARCHIVE_TIME: 2022-08-29 Mon 21:07
:END:
I should use an [[https://stackoverflow.com/questions/27664267/python-dictionary-or-map-in-elisp][association list]] with email-signature pairs
**** DONE [#5] Diagnose why database has to be constant resynched
CLOSED: [2022-12-21 Wed 00:19]
:PROPERTIES:
:Effort:   0:30
:ID:       97DD58AE-03CB-435B-B866-A7531C107FB5
:ARCHIVE_TIME: 2022-12-21 Wed 00:19
:END:
** mu4e-org
:PROPERTIES:
:ID:       6E72E4DE-4CFE-4BC0-BC3C-39FB3D6EB526
:END:
[2023-01-28 Sat] I don't know what this does. Disabling for the time being.

#+begin_src emacs-lisp :results silent :tangle no
(use-feature mu4e-org
  :after mu4e
  :demand t)
#+end_src

** mu4e-alert
:PROPERTIES:
:ID:       32C6498F-B3C5-4D50-8ACC-8DD83FF48448
:END:
/[[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] supports desktop notifications and modeline display for mu4e./

#+begin_src emacs-lisp :results silent
(use-package mu4e-alert
  :after mu4e
  :demand t
  :custom
  ;; Notify about unread emails in inbox only
  (mu4e-alert-interesting-mail-query "flag:unread AND maildir:/inbox")
  :config
  (mu4e-alert-enable-mode-line-display))
#+end_src

** org-msg
:PROPERTIES:
:ID:       DADEABFE-0E73-4E8F-9973-771FFEF55B60
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:14]--[2022-07-22 Fri 19:16] =>  1:02
CLOCK: [2022-07-22 Fri 10:45]--[2022-07-22 Fri 11:14] =>  0:29
CLOCK: [2021-12-18 Sat 14:19]--[2021-12-18 Sat 14:22] =>  0:03
CLOCK: [2021-08-17 Tue 21:26]--[2021-08-17 Tue 21:33] =>  0:07
CLOCK: [2021-08-05 Thu 12:49]--[2021-08-05 Thu 13:03] =>  0:14
:END:
/[[https://github.com/jeremy-compostella/org-msg][org-msg]] is a global minor mode mixing up Org mode and Message mode to compose and reply to emails in a HTML-friendly style./

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-msg
  :after (org mu4e)
  :defer 3
  :custom
  (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (org-msg-startup "hidestars indent inlineimages")
  ;; (org-msg-greeting-fmt "\nHi *%s*,\n\n")
  (org-msg-recipient-names `((,ps/personal-gmail . "Pablo")))
  (org-msg-greeting-name-limit 3)
  (org-msg-default-alternatives '((new		. (text html))
                                  (reply-to-html	. (text html))
                                  (reply-to-text	. (text))))
  (org-msg-convert-citation t)
  (org-msg-signature ps/personal-signature)

  :config
  (org-msg-mode)

  (defun ps/org-msg-grammarly ()
    "Enable `grammarly-mode' in `org-msg-edit-mode'."
    (interactive)
    (if (eq major-mode 'org-mode)
        (org-msg-edit-mode)
      (org-mode)
      (require 'lsp-grammarly)
      (lsp)))

  (defun ps/org-msg-toggle-accounts ()
    "Toggle between personal and GPE email accounts."
    (interactive)
    (if (eq user-mail-address ps/personal-gmail)
        (setq user-mail-address ps/personal-gpe-email)
      (setq user-mail-address ps/personal-gmail))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "From: .*" nil t)
        (replace-match (format "From: %s <%s>" ps/personal-name user-mail-address)))
      (let ((new-signature
             (if (eq user-mail-address ps/personal-gmail)
                 ps/personal-signature
               ps/gpe-signature))
            (current-signature
             (if (eq user-mail-address ps/personal-gmail)
                 ps/gpe-signature
               ps/personal-signature)))
        (while (search-forward current-signature nil t)
          (replace-match new-signature)))))

  (defun ps/org-msg-kill-message ()
    "Save the current message to the kill ring."
    (interactive)
    (goto-char (org-msg-start))
    (re-search-forward "^:END:\n")
    (let ((beg (point)))
      (goto-char (org-msg-end))
      (search-backward "#+begin_signature" nil t)
      (kill-region beg (point))))

  (defun ps/org-msg-open-in-wordtune ()
    "Save the current message to the kill ring and open it in
Wordtune."
    (interactive)
    (ps/org-msg-kill-message)
    (browse-url "https://app.wordtune.com/v2/editor/"))

  (defun ps/org-msg-open-in-grammarly ()
    "Save the current message to the kill ring and open it in
Grammarly."
    (interactive)
    (ps/org-msg-kill-message)
    (browse-url "https://app.grammarly.com/ddocs/1789329083"))

  :general
  (org-msg-edit-mode-map
   "s-a" 'org-msg-attach
   "s-b" 'org-msg-goto-body
   "s-g" 'ps/org-msg-open-in-grammarly
   "s-x" 'ps/org-msg-kill-message
   "s-w" 'ps/org-msg-open-in-wordtune)
  (org-mode-map
   "A-s-g" 'ps/org-msg-grammarly))
#+End_src

*** TODO [#5] Figure out how to make ~org-msg~ preserve formatting of quoted emails
:PROPERTIES:
:ID:       E379BBD3-8C33-47F2-8CCF-FB15BFAF14DD
:Effort:   0:30
:END:
I.e. the message quoted when on replies to, or forwards, an existing email.

*** TODO [#5] Increase font size as suggested [[mu4e:msgid:CAERy4vxjiA9KpE4z7k7fkL71xcSZffO6zPBN8O5bN62vfijZoA@mail.gmail.com][by Amy]]
:PROPERTIES:
:Effort:   0:25
:ID:       3F610D3D-B076-4DF5-B1AC-B9A163A5A04C
:END:
:LOGBOOK:
CLOCK: [2022-06-08 Wed 20:13]--[2022-06-08 Wed 20:36] =>  0:23
CLOCK: [2021-12-07 Tue 12:46]--[2021-12-07 Tue 12:47] =>  0:01
:END:
Also add spacing (properties are ~padding~ / ~margin~)
This is controlled with ~org-msg-enforce-css~.
*** TODO [#5] Figure out how to include LaTeX/Mathjax
:PROPERTIES:
:Effort:   0:30
:ID:       E128A0A2-DA3E-4435-ADBF-472E7268678D
:END:

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       4F355806-D1F5-4EAD-86ED-F5E7DC016A07
:END:
**** DONE Enable emojis for email
CLOSED: [2022-05-07 Sat 19:06]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-07 Sat 19:06
:ID:       C1066A80-072C-414C-872E-9FE491331D53
:END:
:LOGBOOK:
CLOCK: [2022-04-27 Wed 09:42]--[2022-04-27 Wed 09:49] =>  0:07
:END:


** htmlize
:PROPERTIES:
:ID:       F22F2F4B-619E-4A7C-BF65-8FF5CE7953C4
:END:
/[[https://github.com/hniksic/emacs-htmlize][htmlize]] converts buffer text and decorations to HTML./

#+begin_src emacs-lisp :results silent :tangle no
(use-package htmlize
  :custom
  (htmlize-ignore-face-size nil))
#+end_src

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       D9FA47E0-E55D-48DA-B0BE-BBB66ACFABCD
:END:
*** DONE Fix text reflow on rmail
CLOSED: [2021-07-12 Mon 12:09]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-12 Mon 12:09
:ID:       262CCFDF-F608-4A35-A983-2A6CF21635F7
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 12:06]--[2021-07-12 Mon 12:22] =>  0:16
:END:
# Had to add a hook to disable auto-fill-mode.
w
* messaging
:PROPERTIES:
:ID:       7DD09AFA-70A6-4E9D-AA78-C8E8421A9673
:END:
:LOGBOOK:
:END:
** telega
:PROPERTIES:
:ID:       E5B6D1B4-6225-4F69-8522-F8405127E1DE
:END:
:LOGBOOK:
CLOCK: [2022-09-30 Fri 19:27]--[2022-09-30 Fri 20:50] =>  1:23
CLOCK: [2022-09-30 Fri 19:14]--[2022-09-30 Fri 19:26] =>  0:12
CLOCK: [2022-07-15 Fri 14:46]--[2022-07-15 Fri 15:26] =>  0:40
CLOCK: [2022-07-07 Thu 14:30]--[2022-07-07 Thu 14:49] =>  0:19
CLOCK: [2022-07-07 Thu 14:25]--[2022-07-07 Thu 14:30] =>  0:05
CLOCK: [2022-07-07 Thu 03:55]--[2022-07-07 Thu 09:50] =>  5:55
CLOCK: [2022-07-06 Wed 14:43]--[2022-07-06 Wed 15:10] =>  0:27
CLOCK: [2022-07-05 Tue 11:46]--[2022-07-05 Tue 12:17] =>  0:31
CLOCK: [2022-03-02 Wed 15:00]--[2022-03-02 Wed 17:29] =>  2:29
CLOCK: [2021-12-04 Sat 13:13]--[2021-12-04 Sat 13:15] =>  0:02
CLOCK: [2021-11-27 Sat 14:46]--[2021-11-27 Sat 14:54] =>  0:08
CLOCK: [2021-11-22 Mon 13:27]--[2021-11-22 Mon 13:44] =>  0:17
CLOCK: [2021-11-19 Fri 08:24]--[2021-11-19 Fri 08:52] =>  0:28
CLOCK: [2021-11-18 Thu 21:46]--[2021-11-18 Thu 21:51] =>  0:05
CLOCK: [2021-11-18 Thu 12:05]--[2021-11-18 Thu 12:07] =>  0:02
CLOCK: [2021-11-17 Wed 17:18]--[2021-11-17 Wed 17:19] =>  0:01
CLOCK: [2021-11-16 Tue 21:37]--[2021-11-16 Tue 22:38] =>  1:01
CLOCK: [2021-10-23 Sat 12:46]--[2021-10-23 Sat 13:05] =>  0:19
CLOCK: [2021-10-22 Fri 14:39]--[2021-10-22 Fri 15:14] =>  0:35
CLOCK: [2021-10-10 Sun 11:49]--[2021-10-10 Sun 12:51] =>  1:02
CLOCK: [2021-10-09 Sat 21:02]--[2021-10-09 Sat 22:21] =>  1:19
CLOCK: [2021-10-09 Sat 20:05]--[2021-10-09 Sat 20:14] =>  0:09
CLOCK: [2021-10-09 Sat 14:30]--[2021-10-09 Sat 15:02] =>  0:32
CLOCK: [2021-10-08 Fri 23:15]--[2021-10-08 Fri 23:37] =>  0:22
CLOCK: [2021-10-08 Fri 15:38]--[2021-10-08 Fri 17:03] =>  1:25
CLOCK: [2021-10-08 Fri 13:29]--[2021-10-08 Fri 14:15] =>  0:46
CLOCK: [2021-10-08 Fri 12:30]--[2021-10-08 Fri 12:48] =>  0:18
CLOCK: [2021-10-07 Thu 15:39]--[2021-10-07 Thu 15:58] =>  0:19
CLOCK: [2021-10-05 Tue 15:50]--[2021-10-05 Tue 15:59] =>  0:09
CLOCK: [2021-10-02 Sat 23:03]--[2021-10-02 Sat 23:27] =>  0:24
CLOCK: [2021-08-14 Sat 16:05]--[2021-08-14 Sat 16:13] =>  0:08
CLOCK: [2021-08-05 Thu 11:06]--[2021-08-05 Thu 11:22] =>  0:16
CLOCK: [2021-08-04 Wed 18:19]--[2021-08-04 Wed 18:32] =>  0:13
CLOCK: [2021-08-03 Tue 23:33]--[2021-08-03 Tue 23:48] =>  0:15
CLOCK: [2021-08-03 Tue 23:13]--[2021-08-03 Tue 23:26] =>  0:13
CLOCK: [2021-05-17 Mon 11:55]--[2021-05-17 Mon 12:05] =>  0:10
CLOCK: [2021-04-06 Tue 18:05]--[2021-04-06 Tue 18:34] =>  0:29
:END:
/[[https://github.com/zevlg/telega.el][telega]] is an unofficial Emacs Telegram client./

To upgrade TDLib with homebrew, run ~brew upgrade tdlib --fetch-HEAD~ in a terminal, then ~M-x telega-server-build~.

#+begin_src emacs-lisp :results silent
(use-package telega
  :defer 5
  :custom
  (telega-server-libs-prefix "/opt/homebrew")
  (telega-chat-input-markups '("markdown2" "org"))
  (telega-use-images t)
  (telega-emoji-font-family 'noto-emoji)
  (telega-emoji-use-images nil)
  (telega-filters-custom '(("Main" . main)
			   ("Important" or mention
			    (and unread unmuted))
			   ("Archive" . archive)
			   ("Online" and
			    (not saved-messages) (user is-online))
			   ("Groups" type basicgroup supergroup)
			   ("Channels" type channel)))
  (telega-completing-read-function 'completing-read)

  :config
  (defun ps/telega-switch-to ()
    "Switch to the most recent chat buffer. If none exists,
switch to the root buffer, starting telega if necessary."
    (interactive)
    (ps/window-split-if-unsplit)
    (if (> (frame-width) ps/frame-width-threshold)
	(winum-select-window-3)
      (winum-select-window-2))
    (let* ((rootbuf "*Telega Root*")
	   (buf (or
		 (let ((chatbuf))
		   (mapc (lambda (x)
			   (when (with-current-buffer x
				   (eq major-mode 'telega-chat-mode))
			     (switch-to-buffer x)
			     (setq chatbuf x)))
			 (buffer-list))
		   chatbuf)
		 (get-buffer rootbuf))))
      (if buf
	  (progn
	    (switch-to-buffer rootbuf)
	    (beginning-of-buffer)
	    (forward-line 3))
	(telega))))

  (defun ps/telega-chat-org-capture ()
    "Capture chat message at point with `org-capture'."
    (interactive)
    (org-capture nil "n"))

  (defun ps/telega-chat-org-capture-leo ()
    "Capture chat message at point with `org-capture' and turn it
into a task for Leo."
    (interactive)
    (telega-msg-copy-text (telega-msg-at (point)))
    (org-capture nil "lt"))

  (defun ps/telega-move-downloaded-file (file)
    "Move downloaded file(s) to `ps/dir-downloads' directory."
    (let* ((old-path (plist-get (plist-get file :local) :path))
	   (file-name (file-name-nondirectory old-path))
	   (new-path (concat ps/dir-downloads "/" file-name)))
      (rename-file old-path new-path)))


  (defun ps/telega-docs-change-notify (&optional change-begins change-ends)
    "TODO: write docstring"
    (interactive (list (region-beginning) (region-end)))
    (unless (telega-server-live-p)
      (user-error "Please launch Telega before running this command."))
    (if (equal (buffer-file-name) ps/file-tlon-docs)
	(progn
	  (unless (region-active-p)
	    (user-error "Please select the region containing the changes you introduced."))
	  (let ((docs-section (org-get-heading)))
	    (telega-chat--pop-to-buffer (telega-chat-get "-661475865"))
	    (insert (format "FYI: I've made some changes to `docs.org` in section '%s' (%s–%s). Run `ps/telega-docs-change-open` (`.`) with point on this message to see the changes." docs-section change-begins change-ends))))
      (user-error "You aren't visiting `docs.org'!")))

  (defun ps/telega-docs-change-open (msg)
    "TODO: write docstring"
    (interactive (list (telega-msg-for-interactive)))
    (let* ((content (plist-get msg :content))
	   (msg-text (or (telega-tl-str content :text)
			 (telega-tl-str content :caption)
			 ;; See FR https://t.me/emacs_telega/34839
			 (and (telega-msg-match-p msg '(type VoiceNote))
			      (telega-tl-str (plist-get content :voice_note)
					     :recognized_text)))))
      (with-temp-buffer
	(insert msg-text)
	(goto-char (point-min))
	(re-search-forward "(\\([[:digit:]]*\\)–\\([[:digit:]]*\\))")
	(let ((change-begins (string-to-number (match-string 1)))
	      (change-ends (string-to-number (match-string 2))))
	  (find-file ps/file-tlon-docs)
	  (org-show-all)
	  (org-hide-drawer-all)
	  (org-highlight change-begins change-ends)
	  (goto-char change-begins))
	(message "The highlighting is not persistent and will disappear when you close the buffer. You can also remove it by running `ps/org-unhighlight' or by reverting the buffer."))))

  (defun ps/telega-filters-push-archive ()
    "Set active filters list to `archive'."
    (interactive)
    (telega-filters-push '(archive)))

  (defun ps/telega-filters-push-main ()
    "Set active filters list to `main'."
    (interactive)
    (telega-filters-push '(main)))

  (defun ps/telega-chat-mode ()
    (require 'company)
    (add-hook 'completion-at-point-functions
	      #'telega-chatbuf-complete-at-point nil 'local))


  (telega-mode-line-mode 1)

  :hook
  (telega-chat-mode-hook . ps/telega-chat-mode)
  (telega-chat-mode-hook . (lambda () (setq default-directory (file-name-as-directory ps/dir-downloads))))
  (telega-chat-mode-hook . (lambda () (setq line-spacing nil)))
  (telega-chat-mode-hook . telega-autoplay-mode)

  :general
  ("C-f" 'ps/telega-switch-to)
  ((telega-msg-button-map telega-root-mode-map)
   "k" 'telega-button-backward
   "l" 'telega-button-forward
   "o" 'ps/telega-chat-org-capture)
  (telega-chat-mode-map
   "M-p" nil
   "<return>" 'newline
   "A-C-s-r" 'telega-chatbuf-beginning-of-thing
   "C-<return>" 'telega-chatbuf-input-send
   "s-<return>" (lambda! (telega-chatbuf-input-send "org"))
   "s-," 'telega-chatbuf-goto-pinned-message
   "s-a" 'telega-chatbuf-attach
   "s-c" 'telega-mnz-chatbuf-attach-code
   "s-d" 'telega-chatbuf-goto-date
   "s-f" 'telega-chatbuf-filter
   "s-m" 'telega-chatbuf-attach-media
   "s-r" 'telega-msg-add-reaction
   "s-s" 'telega-chatbuf-filter-search
   "s-t" 'telega-sticker-choose-favorite-or-recent
   "s-v" 'ps/markdown-paste-from-org
   "A-s-v" 'telega-chatbuf-attach-clipboard
   "s-z" 'telega-mnz-chatbuf-attach-code
   "A-s-e" 'telega-chatbuf-edit-prev
   "A-s-s" 'ps/telega-chatbuf-attach-most-recent-screenshot
   "A-s-t" 'ps/telega-chatbuf-attach-most-recent-file
   "A-s-v" 'telega-chatbuf-attach-clipboard
   "" 'telega-chatbuf-attach-voice-note)
  (telega-msg-button-map
   "<return>" 'push-button
   "." 'ps/telega-docs-change-open
   "," 'telega-chatbuf-goto-pinned-message
   "a" (lambda! (end-of-buffer) (ps/kill-this-buffer))
   "F" 'telega-msg-forward-marked-or-at-point
   "C" 'telega-msg-copy-link
   "L" 'ps/telega-chat-org-capture-leo
   "s" 'telega-chatbuf-filter-search
   "w" 'telega-browse-url
   "W" 'telega-chatbuf-filter-cancel)
  (telega-chat-button-map
   "a" nil
   "o" nil)
  (telega-root-mode-map
   "SPC" 'telega-root-next-unread
   "." 'telega-chat-with
   "a" 'telega-chat-toggle-archive
   "m" 'telega-chat-toggle-muted)
   (telega-root-view-map
    "a" 'ps/telega-filters-push-archive
    "m" 'ps/telega-filters-push-main)
   (telega-webpage-mode-map
    "x" 'telega-webpage-browse-url)
   (dired-mode-map
    "A-s-a" 'ps/telega-dired-attach-send))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       212BC00E-8977-4E9B-ACD5-8183A09D5B0E
:END:
**** DONE Use ~telega-file-downloaded-hook~ to move saved files to ~downloads~ folder
CLOSED: [2021-11-28 Sun 15:14]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-28 Sun 15:14
:ID:       A4C3E175-F0C5-4614-A849-96285E76B5ED
:END:
:LOGBOOK:
CLOCK: [2021-11-28 Sun 13:30]--[2021-11-28 Sun 14:23] =>  0:53
:END:
https://t.me/emacs_telega/21925
**** DONE [#7] Integrate telega with company
CLOSED: [2022-07-26 Tue 22:15]
:PROPERTIES:
:Effort:   1:00
:ID:       64FD58BF-4B0F-4739-8B24-756F42F5A68F
:ARCHIVE_TIME: 2022-07-26 Tue 22:15
:END:
https://zevlg.github.io/telega.el/#completing-input-in-chatbuf
search for "setup might look like"
**** DONE [#7] Use different face for ~telega-entity-type-code~
CLOSED: [2022-10-22 Sat 02:47]
:PROPERTIES:
:ID:       38E1DD37-4086-44E9-88CD-2ADEE53F7646
:Effort:   0:25
:ARCHIVE_TIME: 2022-10-22 Sat 02:47
:END:
:LOGBOOK:
CLOCK: [2022-10-10 Mon 18:30]--[2022-10-10 Mon 18:39] =>  0:09
CLOCK: [2022-10-09 Sun 21:39]--[2022-10-09 Sun 23:48] =>  2:09
:END:

| telega                      | org       | background | foreground      |
|-----------------------------+-----------+------------+-----------------|
| telega-entity-type-code     | org-code  | bg-alt     | fg-special-mild |
| telega-entity-type-pre      | org-block | bg-dim     | bg-main         |
| telega-entity-type-text-url |           |            |                 |


I think this should be done using the ~:inherit~ property.

Find an exhaustive list of all telega entity types. See the function ~telega--entity-to-properties~.

Prot already defines some of these faces, but the colors are

#+begin_src  markdown :tangle no
Hi @protesilaos,

Thank you for developing and maintaining this excellent package. My apologies for reopening an issue, but I thought it would be preferable to post my comment here rather than open a new issue, given that it also concerns `telega` faces and considering that it is of comparatively minor importance.

Telega has faces for code (`telega-entity-type-code`) and code blocks (`telega-entity-type-pre`), but they are currently set to inherit `fixed-pitch`. Since all text in Telega is fixed-pitch, there is currently no visual element allowing the user to discern code and code blocks from normal text. Hence, I was wondering if these two faces should instead inherit `org-code` and `org-block`, respectively. Screenshots attached.
#+end_src

https://gitlab.com/protesilaos/modus-themes/-/issues/271

** telega-mnz
:PROPERTIES:
:ID:       473F7E47-4980-4A4A-8EC7-C008DB30BA22
:END:
/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-mnz.el][telega-mnz]] displays syntax highlighting in Telega code blocks./

#+begin_src emacs-lisp :results silent
(use-feature telega-mnz
  :after telega
  :demand t
  :custom
  (telega-mnz-use-language-detection nil)

  :config
  (add-hook 'telega-load-hook 'global-telega-mnz-mode))

  ;; :hook
  ;; (telega-load-hook . global-telega-mnz-mode))
#+end_src


** telega-dired-dwim
:PROPERTIES:
:ID:       F38952F5-975A-4868-9E6B-BC74CA491BE2
:END:
/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-dired-dwim.el][telega-dired-dwim]] enables Dired file attachments in Telega chat buffers./

#+begin_src emacs-lisp :results silent
(use-feature telega-dired-dwim
  :after telega
  :demand t
  :config
  ;; copied from github.com/zevlg/telega.el/issues/231
  (defun ps/telega-dired-attach-func (file)
    "Identify msg type for FILE."
    (let ((file-ext (file-name-extension file)))
      (cond ((member file-ext '("mp3" "flac"))
             #'telega-chatbuf-attach-audio)
            ((member file-ext '("mp4" "mkv"))
             #'telega-chatbuf-attach-video)
            ((image-type-from-file-name file)
             #'telega-chatbuf-attach-photo)
            (t
             #'telega-chatbuf-attach-file))))

  (defun ps/telega-dired-attach-send ()
    "Send the marked files."
    (interactive)
    (let ((dired-files (dired-get-marked-files)))
      (unless dired-files
        (user-error "No marked files"))
      (with-current-buffer (telega-chat--pop-to-buffer
                            (telega-completing-read-chat
                             (format "Send %d files to: " (length dired-files))))
        (let ((inhibit-read-only t)
              (buffer-undo-list t))
          (dolist (file dired-files)
            (funcall (ps/telega-dired-attach-func file) file))))))

  (defun ps/telega-chatbuf-attach-most-recent-screenshot ()
    "Attach most recently captured screenshot as photo."
    (interactive)
    (if-let ((screenshot (ps/newest-file default-directory "\\.png$")))
        (telega-chatbuf-attach-photo screenshot)
      (user-error (format "No screenshots found in %s" default-directory))))

  (defun ps/telega-chatbuf-attach-most-recent-file ()
    "Attach most recently saved file in `downloads' folder."
    (interactive)
    (if-let ((file (ps/newest-file ps/dir-downloads)))
          (telega-chatbuf-attach-file file)
        (user-error (format "No files found in %s" ps/dir-downloads)))))
#+end_src

** ol-telega
:PROPERTIES:
:ID:       E973DAC8-E1DE-4B94-80C6-CF80BD0F0836
:END:
/[[https://github.com/zevlg/telega.el/blob/master/contrib/ol-telega.el][ol-telega]] enables Org mode links to Telega chats and messages./

#+begin_src emacs-lisp :results silent
(use-feature ol-telega)
#+end_src

** slack
:PROPERTIES:
:ID:       94F76C3D-9547-431D-93AB-8814F4218AFF
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 10:44]--[2022-07-14 Thu 10:46] =>  0:02
CLOCK: [2022-07-12 Tue 13:32]--[2022-07-12 Tue 13:51] =>  0:19
CLOCK: [2022-07-11 Mon 14:43]--[2022-07-11 Mon 15:08] =>  0:25
CLOCK: [2022-07-09 Sat 19:16]--[2022-07-09 Sat 19:25] =>  0:09
CLOCK: [2022-07-09 Sat 15:17]--[2022-07-09 Sat 16:24] =>  1:07
CLOCK: [2022-07-08 Fri 18:57]--[2022-07-08 Fri 19:26] =>  0:29
CLOCK: [2022-07-08 Fri 17:58]--[2022-07-08 Fri 18:37] =>  0:39
CLOCK: [2022-07-08 Fri 13:56]--[2022-07-08 Fri 14:14] =>  0:18
CLOCK: [2022-07-08 Fri 13:42]--[2022-07-08 Fri 13:54] =>  0:12
CLOCK: [2022-07-02 Sat 14:13]--[2022-07-02 Sat 14:25] =>  0:12
CLOCK: [2022-06-08 Wed 16:59]--[2022-06-08 Wed 17:06] =>  0:07
CLOCK: [2021-06-25 Fri 21:41]--[2021-06-25 Fri 22:16] =>  0:35
CLOCK: [2021-05-29 Sat 14:10]--[2021-05-29 Sat 14:40] =>  0:30
CLOCK: [2021-04-18 Sun 13:08]--[2021-04-18 Sun 13:16] =>  0:08
CLOCK: [2021-04-12 Mon 19:40]--[2021-04-12 Mon 19:43] =>  0:03
CLOCK: [2021-04-11 Sun 14:18]--[2021-04-11 Sun 14:36] =>  0:18
CLOCK: [2021-04-07 Wed 12:41]--[2021-04-07 Wed 12:42] =>  0:01
CLOCK: [2021-03-29 Mon 16:52]--[2021-03-29 Mon 17:15] =>  0:23
:END:
/[[https://github.com/yuya373/emacs-slack][slack]] is a Slack client for Emacs./

#+begin_src emacs-lisp :results silent :tangle no
(use-package slack
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :defer 60
  :commands slack-select-rooms
  :custom
  (slack-file-dir ps/dir-downloads)
  ;; (slack-prefer-current-team t)

  :config
  (slack-register-team
   :default t
   :name "EA Forum Moderators"
   :token (auth-source-pick-first-password
           :host "eaforummoderators"
           :user ps/personal-gmail))

  (slack-register-team
   :name "CEA Core"
   :token (auth-source-pick-first-password
           :host "cea-core"
           :user ps/personal-gmail))

  (slack-register-team
   :name "Altruismo Eficaz y Racionalidad"
   :token (auth-source-pick-first-password
           :host "altruismo-eficaz"
           :user ps/personal-gmail)
   :cookie (auth-source-pick-first-password
            :host "altruismo-eficaz^cookie"
            :user (concat ps/personal-gmail "^cookie")))

  (slack-register-team
   :name "Samotsvety Forecasting"
   :token (auth-source-pick-first-password
           :host "samotsvety"
           :user ps/personal-gmail)
   :cookie (auth-source-pick-first-password
            :host "samotsvety^cookie"
            :user (concat ps/personal-gmail "^cookie")))

  (slack-register-team
   :name "Future Fund Regrantors"
   :token (auth-source-pick-first-password
           :host "futurefundregrantors"
           :user ps/personal-gmail)
   :cookie (auth-source-pick-first-password
            :host "futurefundregrantors^cookie"
            :user (concat ps/personal-gmail "^cookie")))

  (slack-register-team
   :name "EA Bahamas"
   :token (auth-source-pick-first-password
           :host "eabahamas"
           :user ps/personal-gmail)
   :cookie (auth-source-pick-first-password
            :host "eabahamas^cookie"
            :user (concat ps/personal-gmail "^cookie")))

  (slack-register-team
   :name "EAOxfordOffice"
   :token (auth-source-pick-first-password
           :host "eaoxfordoffice"
           :user ps/personal-email)
   :cookie (auth-source-pick-first-password
            :host "eaoxfordoffice^cookie"
            :user (concat ps/personal-email "^cookie")))

  (defun ps/slack-chat-org-capture ()
    "Capture Slack message at point with `org-capture'."
    (interactive)
    (org-capture nil "s"))

  (slack-start)

  :hook
  (slack-buffer-mode-hook . (lambda () (setq line-spacing nil)))

  :general
  ("A-s" 'slack-channel-select)
  ((slack-mode-map slack-buffer-mode-map)
   "s-a" 'slack-all-threads
   "s-c" 'slack-channel-select
   "s-g" 'slack-group-select
   "s-m" 'slack-im-select
   "H-s-t" 'slack-change-current-team
   "s-u" 'slack-select-rooms
   "H-s-u" 'slack-select-unread-rooms) ; `slack-all-unreads' not working
  ((slack-thread-message-buffer-mode-map slack-message-buffer-mode-map)
   "d" 'slack-thread-show-or-create
   "e" 'slack-message-edit
   "k" 'slack-buffer-goto-prev-message
   "l" 'slack-buffer-goto-next-message
   "o" 'ps/slack-chat-org-capture
   "r" 'slack-message-add-reaction
   "R" 'slack-message-remove-reaction
   "z" 'slack-message-write-another-buffer)
  (slack-message-compose-buffer-mode-map
   "s-c" 'slack-message-send-from-buffer
   "s-f" 'slack-message-select-file
   "s-m" 'slack-message-embed-mention))
#+end_src

*** TODO [#6] Disable ~emacs-slack~ notifications
:PROPERTIES:
:ID:       6CF836CF-74C0-4D80-98D8-0F3CA29182DE
:Effort:   1:00
:END:
** ol-emacs-slack
:PROPERTIES:
:ID:       5F9F6EF6-55A5-4DD4-BB81-BBA16266364B
:END:
/[[https://github.com/ag91/ol-emacs-slack][ol-emacs-slack]] provides ~org-store-link~ support for [[94F76C3D-9547-431D-93AB-8814F4218AFF][slack]]./

#+begin_src emacs-lisp :results silent :tangle no
(use-package ol-emacs-slack
  :straight (ol-emacs-slack
             :host github
             :repo "ag91/ol-emacs-slack")
  :after slack
  :demand t)
#+end_src

** erc
:PROPERTIES:
:ID:       4FB5ECDA-2DB5-40F5-8BBE-6B0D4B51524D
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:18]--[2021-06-03 Thu 14:40] =>  0:22
CLOCK: [2021-06-02 Wed 12:02]--[2021-06-02 Wed 12:39] =>  0:37
:END:
/[[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][erc]] is an IRC client for Emacs./

#+begin_src emacs-lisp :results silent
(use-feature erc
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :custom
  (erc-server "irc.libera.chat")
  (erc-user-full-name user-full-name)
  (erc-nick (auth-source-pass-get "user" "auth-sources/erc/libera"))
  (erc-password (auth-source-pass-get 'secret "auth-sources/erc/libera"))
  (erc-prompt-for-nickserv-password nil)
  ;; erc-track-shorten-start 8 ; characters to display in modeline
  (erc-autojoin-channels-alist '(("irc.libera.chat")))
  (erc-kill-buffer-on-part nil)
  (erc-auto-query t)

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling)

  (defun ps/erc-notify (nickname message)
    "Displays a notification message for ERC."
    (let* ((channel (buffer-name))
           (nick (erc-hl-nicks-trim-irc-nick nickname))
           (title (if (string-match-p (concat "^" nickname) channel)
                      nick
                    (concat nick " (" channel ")")))
           (msg (s-trim (s-collapse-whitespace message))))
      (alert (concat nick ": " msg) :title title))))
#+end_src

** circe
:PROPERTIES:
:ID:       B5B892BD-A0E2-4D54-977E-58C1CF3CC248
:END:
:LOGBOOK:
CLOCK: [2021-10-07 Thu 14:31]--[2021-10-07 Thu 15:23] =>  0:52
:END:
/[[https://github.com/emacs-circe/circe][circe]] is another IRC client for Emacs./

#+begin_src emacs-lisp :results silent
(use-package circe)
#+end_src


** accord
:PROPERTIES:
:ID:       143D57CF-122E-4FE2-8437-4FB1DE13BC94
:END:
To try:
https://www.reddit.com/r/emacs/comments/ja1nyd/accord_interact_with_discord_via_emacs/

* web
:PROPERTIES:
:ID:       A1741EF4-6B22-498C-A60B-845A26AFAFE7
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 23:40]--[2021-10-21 Thu 00:05] =>  0:25
CLOCK: [2021-05-19 Wed 17:02]--[2021-05-19 Wed 17:43] =>  0:41
CLOCK: [2021-05-18 Tue 18:26]--[2021-05-18 Tue 18:54] =>  0:28
:END:
- [[http://www.howardism.org/Technical/Emacs/browsing-in-emacs.html][Emacs-focused Web Browsing]]
- [[https://protesilaos.com/codelog/2021-03-25-emacs-eww/][EWW and my extras (text-based Emacs web browser) | Protesilaos Stavrou]]

** browse-url
:PROPERTIES:
:ID:       0373B505-A028-4537-871F-3CCC2E5EADB1
:END:
#+begin_src emacs-lisp :results silent
(use-feature browse-url
  :custom
  (browse-url-browser-function 'browse-url-default-macosx-browser)
  (browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
  (browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
  (browse-url-handlers
   '(("gnu\\.org"  . eww-browse-url)
     ("protesilaos\\.com" . eww-browse-url)
     ("orgmode\\.org" . eww-browse-url)
     ;; My VPN settings apply to Firefox only (via split tunneling),
     ;; so the websites requiring VPN access are listed below, and
     ;; will be opened with this browser.
     ;; [2022-10-30 Sun] Disabling until I configure split tunneling
     ;; ("libgen" . browse-url-firefox)
     ;; ("hathitrust\\.org" . browse-url-firefox)
     ;; Use the default MacOS browser for all other websites
     ("." . browse-url-default-macosx-browser)))

  :general
  (mhtml-mode-map
   "s-x" 'browse-url-of-buffer)
  (dired-mode-map
   "e" 'browse-url-of-dired-file))
#+end_src

** shr
:PROPERTIES:
:ID:       3E08CE1B-E73A-4440-A545-D2D3480D951B
:END:
:LOGBOOK:
CLOCK: [2021-08-11 Wed 14:04]--[2021-08-11 Wed 14:09] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature shr
  :defer 15
  :custom
  (shr-bullet "• ")
  (shr-use-colors nil)
  (shr-use-fonts t)
  (shr-image-animate nil)
  (shr-width nil)
  (shr-discard-aria-hidden t)
  (shr-cookie-policy t)

  :general
  (mhtml-mode-map
   "s-w" 'shr-render-buffer))
#+end_src

** shr-tag-pre-highlight
:PROPERTIES:
:ID:       8956AD37-95A4-4A73-9287-9F70A406E9AF
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:33]--[2021-11-19 Fri 12:35] =>  0:02
:END:
[[https://github.com/xuchunyang/shr-tag-pre-highlight.el][shr-tag-pre-highlight]] adds syntax highlighting for code blocks in HTML rendered by ~shr~.

#+begin_src emacs-lisp :results silent
(use-package shr-tag-pre-highlight
  :after shr
  :defer 30
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight)))
#+end_src

** eww
:PROPERTIES:
:ID:       E9E3FE6F-5580-4D21-90D8-6B0E595C10F7
:END:
:LOGBOOK:
CLOCK: [2021-05-18 Tue 17:41]--[2021-05-18 Tue 18:26] =>  0:45
CLOCK: [2021-05-04 Tue 22:07]--[2021-05-04 Tue 22:25] =>  0:18
CLOCK: [2021-05-02 Sun 21:22]--[2021-05-02 Sun 21:32] =>  0:10
CLOCK: [2021-04-21 Wed 16:35]--[2021-04-21 Wed 16:40] =>  0:05
CLOCK: [2021-03-25 Thu 13:48]--[2021-03-25 Thu 14:14] =>  0:26
:END:

#+begin_src emacs-lisp :results silent
(use-feature eww
  ;; :defer 30
  :custom
  (eww-search-prefix "https://www.google.com/search?q=")
  (eww-restore-desktop t)
  (eww-desktop-remove-duplicates t)
  (eww-header-line-format nil)
  (eww-download-directory ps/dir-downloads)
  (eww-suggest-uris
   '(eww-links-at-point
     thing-at-point-url-at-point))
  (eww-history-limit 1000)
  (eww-browse-url-new-window-is-tab nil)

  :config
  ;; inspired by Prot
  (defun ps/rename-buffer ()
    "Rename EWW buffer using page title or URL.
To be used by `eww-after-render-hook'."
    (let ((name (if (eq "" (plist-get eww-data :title))
                    (plist-get eww-data :url)
                  (plist-get eww-data :title))))
      (rename-buffer (format "%s" (truncate-string-to-width name 14)) t)))

  (defun ps/org-open-at-point-with-eww ()
    "Open org link at point with eww."
    (interactive)
    (let ((browse-url-handlers nil)
          (browse-url-browser-function #'eww-browse-url))
      (org-open-at-point)))

  (defun ps/url-to-pdf (url)
    ;; TODO: Default to eww buffer or kill-ring if content is URL.
    "Generate PDF of URL."
    (interactive "MUrl: ")
    (let* ((title (ps/org-web-tools--org-title-for-url url))
           (slug (org-hugo-slug title))
           (file-name (file-name-with-extension slug ".pdf"))
           (output-file (file-name-concat ps/dir-downloads file-name))
           (shell-command-buffer-name-async title))
      (async-shell-command
       (format
        "'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --headless --print-to-pdf-no-header --print-to-pdf='%s' %s"
        output-file
        url))))

  (defvar ps/eww-readable-exceptions
    '("protesilaos\\.com"))

  (defun ps/eww-readable-autoview ()
    "Automatically view the main 'readable' parts of the current web
page for all websites except those in `ps/eww-readable-exceptions'."
    (let ((current-url (eww-current-url)))
      (dolist (url ps/eww-readable-exceptions)
        (unless (string-match-p (concat "^\\(?:https?://\\)?\\(?:www\\.\\)?" url) current-url)
          (eww-readable)))))

  ;; The following four commands copied from
  ;; github.com/gopar/.emacs.d#eww
  (defun ps/eww-edit-current-url (&optional arg)
    (interactive)
    (let* ((url (eww-copy-page-url))
           (uris (eww-suggested-uris)))
      (setq url (read-string "Edit URL or new search: " url 'eww-promt-history uris))
      (setq url (eww--dwim-expand-url url))
      (eww url (if arg 4 nil))))

  (defun ps/open-eww-with-recent-kill-ring (&optional arg)
    "Open current EWW with most recent item in kill ring.
If prefix arg is passed, then open in new EWW buffer."
    (interactive "P")
    (if arg
        (with-current-buffer
            (if (eq major-mode 'eww-mode) (clone-buffer)
              (generate-new-buffer "*eww*"))
          (eww-mode)
          (eww (current-kill 0)))
      (eww (current-kill 0))))

  (defun ps/eww-go-up-url-heirarchy ()
    "Go up the URL heirarchy."
    (interactive)
    (let* ((url (url-generic-parse-url (eww-current-url)))
           (filepath (url-filename url))
           (paths (s-split "/" filepath))
           (new-path (s-join "/" (butlast paths 1)))
           (new-url nil))
      (setq new-url (url-parse-make-urlobj
                     (url-type url)
                     (url-user url)
                     (url-password url)
                     (url-host url)
                     (url-port url)
                     new-path
                     (url-target url)
                     nil
                     (url-fullness url)))
      (eww-browse-url (url-recreate-url new-url))))

  (defun ps/eww-go-to-root-url-heirarchy ()
    "Go to root of current URL heirarchy"
    (interactive)
    (let* ((url (url-generic-parse-url (eww-current-url)))
           (new-url nil))
      (setq new-url (url-parse-make-urlobj
                     (url-type url)
                     (url-user url)
                     (url-password url)
                     (url-host url)
                     (url-port url)
                     ""
                     (url-target url)
                     nil
                     (url-fullness url)))
      (eww-browse-url (url-recreate-url new-url))))

  :hook
  (eww-after-render-hook . ps/rename-buffer)
  (eww-after-render-hook . ps/eww-readable-autoview)

  :general
  ("A-w" 'eww)
  (eww-mode-map
   "[" 'eww-previous-url
   "]" 'eww-next-url
   "j" 'eww-back-url
   ";" 'eww-forward-url
   "r" 'eww-readable
   "g" nil
   "g e" 'ps/eww-edit-current-url
   "g u" 'ps/eww-go-up-url-heirarchy
   "g U" 'ps/eww-go-to-root-url-heirarchy
   "p" 'ps/open-eww-with-recent-kill-ring
   "o" 'eww-toggle-fonts
   "p" 'ps/eww-pdf-of-current-webpage
   ":" (lambda! (eww-follow-link '(4)))
   "x" 'eww-browse-with-external-browser))
#+end_src

*** TODO [#5] Integrate eww Chrome, Firefox history
:PROPERTIES:
:ID:       2C3DB6DF-B599-49DF-AD30-41C77D2326D7
:END:
*** TODO [#6] Create command to background open in ~eww~
:PROPERTIES:
:ID:       52CAC919-6942-466F-AA47-4FF86F7F13AE
:END:
*** TODO [#6] Create command to create PDF of URL
:PROPERTIES:
:ID:       19C5F99D-E00D-4552-8B6C-81150C61DF2F
:Effort:   0:25
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 13:51]--[2022-07-25 Mon 14:01] =>  0:10
CLOCK: [2022-07-19 Tue 21:36]--[2022-07-19 Tue 22:31] =>  0:55
CLOCK: [2022-07-19 Tue 20:49]--[2022-07-19 Tue 21:05] =>  0:16
:END:
*** Archive                                                         :ARCHIVE:
:PROPERTIES:
:ID:       6ED17D19-FE7B-4AC2-8D62-8FB3F65F1DA1
:END:
**** DONE Check out these functions for implementing ~vimium~ on ~eww~
CLOSED: [2022-12-21 Wed 00:32]
:PROPERTIES:
:ID:       4858793B-10A2-4014-84A8-5264551ED1CD
:ARCHIVE_TIME: 2022-12-21 Wed 00:32
:END:
https://github.com/gopar/.emacs.d#eww
** w3m
:PROPERTIES:
:ID:       986E4522-7EE1-477A-89EB-08855BCBECEE
:END:
:LOGBOOK:
CLOCK: [2021-03-29 Mon 21:25]--[2021-03-29 Mon 21:41] =>  0:16
:END:

#+begin_src emacs-lisp :results silent
(use-package w3m
  :custom
  (mm-text-html-renderer 'w3m)
  :general
  ((w3m-mode-map mu4e-view-mode-map)
   "s-<return>" 'w3m-view-url-with-browse-url)) ; open externally
#+end_src

** elfeed
:PROPERTIES:
:ID:       FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5
:END:
:LOGBOOK:
CLOCK: [2021-12-06 Mon 18:29]--[2021-12-06 Mon 18:41] =>  0:12
CLOCK: [2021-11-19 Fri 17:02]--[2021-11-19 Fri 19:27] =>  2:25
CLOCK: [2021-11-19 Fri 10:34]--[2021-11-19 Fri 10:40] =>  0:06
CLOCK: [2021-11-16 Tue 15:17]--[2021-11-16 Tue 15:27] =>  0:10
CLOCK: [2021-10-09 Sat 13:56]--[2021-10-09 Sat 14:30] =>  0:34
CLOCK: [2021-08-05 Thu 22:25]--[2021-08-05 Thu 22:27] =>  0:02
CLOCK: [2021-07-26 Mon 18:54]--[2021-07-26 Mon 19:12] =>  0:18
CLOCK: [2021-07-06 Tue 15:50]--[2021-07-06 Tue 16:16] =>  0:26
CLOCK: [2021-07-04 Sun 12:44]--[2021-07-04 Sun 13:02] =>  0:18
CLOCK: [2021-07-04 Sun 12:05]--[2021-07-04 Sun 12:37] =>  0:32
CLOCK: [2021-07-04 Sun 11:26]--[2021-07-04 Sun 11:55] =>  0:29
CLOCK: [2021-07-04 Sun 10:36]--[2021-07-04 Sun 10:53] =>  0:17
CLOCK: [2021-06-25 Fri 22:16]--[2021-06-25 Fri 22:18] =>  0:02
CLOCK: [2021-06-25 Fri 12:36]--[2021-06-25 Fri 12:58] =>  0:22
CLOCK: [2021-06-24 Thu 19:49]--[2021-06-24 Thu 19:59] =>  0:10
CLOCK: [2021-06-23 Wed 21:34]--[2021-06-23 Wed 21:46] =>  0:12
CLOCK: [2021-06-22 Tue 18:19]--[2021-06-22 Tue 18:24] =>  0:05
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:05] =>  0:00
CLOCK: [2021-06-16 Wed 21:58]--[2021-06-16 Wed 22:17] =>  0:19
CLOCK: [2021-05-20 Thu 12:33]--[2021-05-20 Thu 12:43] =>  0:10
CLOCK: [2021-05-18 Tue 12:58]--[2021-05-18 Tue 13:07] =>  0:09
CLOCK: [2021-05-14 Fri 10:38]--[2021-05-14 Fri 10:40] =>  0:02
CLOCK: [2021-04-13 Tue 08:10]--[2021-04-13 Tue 08:21] =>  0:11
CLOCK: [2021-04-08 Thu 21:19]--[2021-04-08 Thu 21:50] =>  0:31
:END:
/[[https://github.com/skeeto/elfeed][elfeed]] is a web feeds client./

| key   | command                          | behavior                      |
|-------+----------------------------------+-------------------------------|
| RET   | ~eww-follow-link '(4)~             | open link at point in Chrome  |
| S-RET | ~eww-follow-link~                  | open link at point in eww     |
| x     | ~elfeed-show-visit~                | open link of buffer in Chrome |
| v     | ~ps/elfeed-show-visit-in-eww~      | open link of buffer in eww    |
| c     | ~elfeed-kill-link-url-at-point~    | copy link at point            |
| w     | ~ps/elfeed-kill-link-url-of-entry~ | copy link of buffer           |
| f     | ~ace-link-eww '(4)~                | open link selected in Chrome  |
| F     | ~ace-link-eww~                     | open link selected in eww     |

These key bindings produce the same behavior in eww.

#+begin_src emacs-lisp :results silent
(use-package elfeed
  :custom
  (elfeed-db-directory (file-name-concat ps/dir-emacs "var/elfeed"))

  :config
  (setq-default elfeed-search-filter "+unread -wiki")
  ;; Borrowed from Prot
  (defun ps/elfeed-show-visit-in-eww (&optional link)
    "Browse current entry's link or optional LINK in `eww'. Only show
the readable part once the website loads. This can fail on
poorly-designed websites."
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (or link (elfeed-entry-link entry))))
      (eww link)
      (add-hook 'eww-after-render-hook 'eww-readable nil t)))

  (defun ps/elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (defun ps/elfeed-full-update ()
    "*Really* update feeds!"
    (interactive)
    (let ((elfeed-search-buffer "*elfeed-search*"))
      (when (and (get-buffer elfeed-search-buffer)
                 (not (equal (buffer-name) elfeed-search-buffer)))
        (kill-buffer elfeed-search-buffer)))
    (elfeed-org)
    (elfeed-unjam)
    (elfeed-update))

  (defun ps/elfeed-kill-link-url-of-entry ()
    "Add link of current entry to kill ring."
    (interactive)
    (let ((link (elfeed-entry-link elfeed-show-entry)))
      (when link
        (message "Copied link: %s" link)
        (kill-new link))))

  (defun ps/elfeed-filter-tags (tags)
    (elfeed-search-set-filter tags)
    (if (string= tags "")
        (message "Showing everything")
      (message (concat "Showing " tags))))

  (defvar ps/elfeed-toggle-read-entries t)
  (defun ps/elfeed-toggle-read-entries ()
    "Toggle between showing and hiding read entries."
    (interactive)
    (if ps/elfeed-toggle-read-entries
        (ps/elfeed-filter-tags "")
      (ps/elfeed-filter-tags "+unread"))
    (setq ps/elfeed-toggle-read-entries (not ps/elfeed-toggle-read-entries)))

  (defvar ps/elfeed-toggle-wiki-entries t)
  (defun ps/elfeed-toggle-wiki-entries ()
    "Toggle between showing all, or only 'wiki', unread entries."
    (interactive)
    (if ps/elfeed-toggle-wiki-entries
        (ps/elfeed-filter-tags "+unread +wiki")
      (ps/elfeed-filter-tags "+unread -wiki"))
    (setq ps/elfeed-toggle-wiki-entries (not ps/elfeed-toggle-wiki-entries)))

  (defun ps/elfeed-toggle-fixed-pitch ()
    "Toggle between fixed pitch and variable pitch."
    (interactive)
    (if shr-use-fonts
        (setq shr-use-fonts nil)
      (setq shr-use-fonts t))
    (elfeed-show-refresh))

  (defun ps/elfeed-toggle-session ()
    "Start or end an `elfeed' session."
    (interactive)
    (if (or
         (equal major-mode 'elfeed-search-mode)
         (equal major-mode 'elfeed-show-mode))
        (progn
          (global-writeroom-mode 0)
          (kill-matching-buffers "^\*elfeed\-*\*" nil t))
      (elfeed)
      (global-writeroom-mode 1)
      (ps/elfeed-full-update)))

  ;; Not working
  ;; xenodium.com/open-emacs-elfeed-links-in-background/
  (defun ps/elfeed-search-browse-background-url ()
    "Open current `elfeed' entry (or region entries) in browser without losing focus."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (mapc (lambda (entry)
              (cl-assert (memq system-type '(darwin)) t "open command is macOS only")
              (start-process (concat "open " (elfeed-entry-link entry))
                             nil "open" "--background" (elfeed-entry-link entry))
              (elfeed-untag entry 'unread)
              (elfeed-search-update-entry entry))
            entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
        (forward-line))))

  ;; github.com/skeeto/elfeed/issues/190#issuecomment-384346895
  (setq elfeed-show-mode-hook
        (lambda ()
          (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family ps/face-variable-pitch :size 15))
          (setq fill-column 120)
          (setq elfeed-show-entry-switch #'ps/show-elfeed)))

  (defun ps/show-elfeed (buffer)
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (goto-char (point-min))
      (re-search-forward "\n\n")
      (fill-individual-paragraphs (point) (point-max))
      (setq buffer-read-only t))
    (switch-to-buffer buffer))

  ;; update feeds every five mins, starting one min after startup
  ;; UPFATE: disabling to diagnose freezes
  ;; (run-at-time 100 600 'ps/elfeed-full-update)

  :general
  ;; ("A-f" (lambda! (elfeed) (ps/elfeed-full-update)))
  ("A-f" 'ps/elfeed-toggle-session)
  (eww-mode-map
     "c" 'elfeed-kill-link-url-at-point)
  (elfeed-show-mode-map
   "q" nil)
  (elfeed-search-mode-map
   "A" 'ps/elfeed-mark-all-as-read
   "d" 'elfeed-update
   "e" 'ps/elfeed-toggle-read-entries
   "f" 'ps/avy-elfeed-search-show-entry
   "q" 'ps/elfeed-toggle-session
   "U" 'ps/elfeed-full-update
   "j" 'elfeed-unjam
   "o" 'elfeed-org
   "w" 'ps/elfeed-toggle-wiki-entries)
  (elfeed-show-mode-map
   "S-<return>" 'eww-follow-link
   "<return>" (lambda! (eww-follow-link '(4)))
   "<tab>" (lambda! (elfeed-show-next-link) (recenter))
   "b" nil
   "q" 'elfeed
   "i" 'ps/elfeed-toggle-fixed-pitch
   "j" 'elfeed-show-next
   ";W" 'elfeed-show-prev
   "v" 'ps/elfeed-show-visit-in-eww
   "w" 'ps/elfeed-kill-link-url-of-entry
   "x" 'elfeed-show-visit))
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       93D26DD3-A658-4892-AA96-2CF05CD37556
:END:
**** DONE Configure Elfeed
CLOSED: [2021-04-07 Wed 22:44] SCHEDULED: <2021-04-07 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-11 Sun 08:22
:ID:       D3E88324-ACED-4E0F-B5F9-34616259C95E
:END:
:LOGBOOK:
CLOCK: [2021-04-07 Wed 21:44]--[2021-04-07 Wed 22:44] =>  1:00
:END:

**** DONE [#6] Figure out why Elfeed is not updating properly
CLOSED: [2021-06-23 Wed 21:46]
:PROPERTIES:
:Effort:   0:15
:ARCHIVE_TIME: 2021-06-23 Wed 21:46
:ID:       44E12BD7-F126-4DD7-A352-9E781CFE063F
:END:
**** CANCELLED [#7] Figure out how to make elfeed display formatting properly
CLOSED: [2021-11-14 Sun 10:33]
:PROPERTIES:
:ARCHIVE_TIME: 2021-11-14 Sun 10:33
:Effort:   1:30
:ID:       FD4E903E-8F47-4292-AE45-ED19932E6136
:END:
:LOGBOOK:
CLOCK: [2021-08-05 Thu 22:27]--[2021-08-05 Thu 23:05] =>  0:38
:END:
Italics, boldface, colors are not shown.

I [[https://github.com/skeeto/elfeed/issues/434][opened]] an issue.

[2021-11-14 Sun 10:33] No longer using elfeed for Wikipedia.
** elfeed-org
:PROPERTIES:
:ID:       DF954E99-17CB-4698-934E-53E038C654EF
:END:

#+begin_src emacs-lisp :results silent
(use-package elfeed-org
  :after elfeed
  :custom
  (rmh-elfeed-org-files (list ps/file-feeds-pablo ps/file-feeds-tlon))
  :config
  (elfeed-org))
#+end_src

** elfeed-score
:PROPERTIES:
:ID:       613BE063-E193-4C4D-9FFA-D0B9DBB73805
:END:
Check it out. It may be helpful for discovering relevant content for the Wiki. To briefly see it in action, see the first couple of minutes of [[https://emacsconf.org/2021/talks/research/][this video]].

** google-this
:PROPERTIES:
:ID:       877DFFD8-8121-4CEC-B8EC-175EB8526641
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 14:43]--[2022-07-21 Thu 14:56] =>  0:13
CLOCK: [2022-07-21 Thu 14:30]--[2022-07-21 Thu 14:30] =>  0:00
CLOCK: [2021-05-22 Sat 21:42]--[2021-05-22 Sat 21:50] =>  0:08
:END:

#+begin_src emacs-lisp :results silent
(use-package google-this
  :config
  ;; Tweak original function to offer contents of kill ring if there
  ;; is no symbol or word at point.
  (defun ps/google-this-pick-term (prefix)
    "Decide what \"this\" is and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                       (thing-at-point 'word)
                       (current-kill 0))))
         (term (read-string (concat "Googling [" term "]: ") nil nil term)))
      term))

  (advice-add 'google-this-pick-term :override #'ps/google-this-pick-term)

  :general
  ("H-g" 'google-this-search)
  :bind-keymap
  ("H-G" . google-this-mode-submap))
#+end_src

** engine-mode
:PROPERTIES:
:ID:       437B98FC-3667-43C4-9EF6-470E23FE7561
:END:
:LOGBOOK:
CLOCK: [2021-04-21 Wed 20:39]--[2021-04-21 Wed 20:41] =>  0:02
:END:
/[[https://github.com/hrs/engine-mode][engine-mode]] is a minor mode for defining and querying search engines through Emacs./

#+begin_src emacs-lisp :results silent
(use-package engine-mode
  :init
  (engine-mode)
  :config
  (defengine Amazon
    "https://www.amazon.com/s?k=%s"
    :keybinding "a")
  (defengine EABlogs
    "https://cse.google.com/cse?cx=013594344773078830993:k3igzr2se6y&q=%s"
    :keybinding "b")
  (defengine MercadoLibre
    "https://listado.mercadolibre.com.ar/%s"
    :keybinding "c")
  (defengine EAForum
    "https://forum.effectivealtruism.org/search?terms=%s"
    :keybinding "f")
  (defengine GitHub
    "https://github.com/search?q=%s&type=Code"
    :keybinding "g")
  (defengine IMDb
    "http://www.imdb.com/find?s=all;q=%s"
    :keybinding "i")
  (defengine LibGen
    "http://libgen.li/index.php?req=%s"
    :keybinding "l")
  (defengine Metaforecast
    "https://metaforecast.org/?query=%s"
    :keybinding "m")
  (defengine GoogleMaps
    "https://www.google.com/maps?q=%s"
    :keybinding "p")
  (defengine Reddit
    "https://www.reddit.com/search?q=%s"
    :keybinding "r")
  (defengine GoogleScholar
    "https://scholar.google.com/scholar?hl=en&q=%s"
    :keybinding "s")
  (defengine GoogleTranslate
    "https://translate.google.com/#auto/en/%s"
    :keybinding "t")
  (defengine SciHub
    "https://sci-hub.se/%s"
    :keybinding "u")
  (defengine Wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")
  (defengine YouTube
    "http://www.youtube.com/results?search_query=%s"
    :keybinding "y")
  (engine/set-keymap-prefix (kbd "A-H-g")))
#+end_src


** emacs-webkit
:PROPERTIES:
:ID:       FD609FAA-D60B-4B3F-8B1A-55292EBC286A
:END:
https://github.com/akirakyle/emacs-webkit

Unstable, not yet on Melpa. Best to wait for a stable release.

[2022-07-24 Sun 15:53] No new commits since September 2021. [[https://github.com/akirakyle/emacs-webkit/issues/34#issuecomment-912244110][This user]] notes that it doesn't work on macOS.

** eaf
:PROPERTIES:
:ID:       4CDDA7F2-07D5-4D09-A8D5-3A271946491A
:END:
:LOGBOOK:
CLOCK: [2022-07-24 Sun 16:09]--[2022-07-24 Sun 17:21] =>  1:12
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-package eaf
  :straight (eaf
             :type git
             :host github
             :repo "emacs-eaf/emacs-application-framework"
             :files ("*.el" "*.py" "core" "app" "*.json")
             :includes (eaf-browser) ; Straight won't try to search for these packages when we make further use-package invocations for them
             :pre-build (("python3" "install-eaf.py" "--install" "browser" "--ignore-sys-deps"))
             ))
#+end_src

** eaf-browser
:PROPERTIES:
:ID:       22BD9052-06E6-4D5F-9E72-C9A154AF6F8E
:END:
#+begin_src emacs-lisp :results silent
(use-package eaf-browser
  :custom
  (eaf-browser-continue-where-left-off t)
  (browse-url-browser-function 'eaf-open-browser)
  (eaf-browser-enable-adblocker t)
  ;; the history file is stored in `.emacs.d/eaf/browser/history/log.txt'
  (eaf-browser-chrome-history-file "/Users/pablostafforini/Library/Application Support/Google/Chrome/Default/History")
  :config
  (defalias 'browse-web #'eaf-open-browser)
  (eaf-bind-key ps/kill-this-buffer "q" eaf-browser-keybinding))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       E3B60EF3-B637-4826-A6B3-57D5D65BEBA7
:END:
**** DONE Follow up with Andy Stewart on [[mu4e:msgid:emacs-eaf/eaf-browser/issues/38/1193426292@github.com][Re: [emacs-eaf/eaf-browser] 'eaf-import-chrome-bookmarks' triggers 'wrong-number-of-arguments' error (Issue #38)]]
CLOSED: [2022-07-25 Mon 13:47] SCHEDULED: <2022-07-24 Sun>
:PROPERTIES:
:ID:       DF2F1759-8105-484E-BFE4-44C377747413
:ARCHIVE_TIME: 2022-09-05 Mon 20:20
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 10:50]--[2022-07-25 Mon 11:53] =>  1:03
CLOCK: [2022-07-24 Sun 22:52]--[2022-07-25 Mon 00:05] =>  1:13
:END:

** osm
:PROPERTIES:
:ID:       1DCEE01C-1951-45F0-B9B8-60977E2D4314
:END:
:LOGBOOK:
CLOCK: [2022-05-16 Mon 19:11]--[2022-05-16 Mon 19:19] =>  0:08
:END:
/[[https://github.com/minad/osm][osm]] is an OpenStreetMap viewer for Emacs./

#+begin_src emacs-lisp :results silent
(use-package osm
  :straight (osm
             :host github
             :repo "minad/osm")
  :init
  ;; Load Org link support
  (with-eval-after-load 'org
    (require 'osm-ol)))
#+end_src

** twittering-mode
:PROPERTIES:
:ID:       125BC626-0D89-468E-9026-AF3CF58939F2
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 14:40]--[2022-07-19 Tue 15:56] =>  1:16
CLOCK: [2022-07-18 Mon 19:53]--[2022-07-18 Mon 20:04] =>  0:11
CLOCK: [2022-07-12 Tue 21:47]--[2022-07-12 Tue 22:16] =>  0:29
CLOCK: [2022-07-12 Tue 20:45]--[2022-07-12 Tue 21:30] =>  0:45
CLOCK: [2021-05-20 Thu 19:22]--[2021-05-20 Thu 19:36] =>  0:14
CLOCK: [2021-05-16 Sun 20:34]--[2021-05-16 Sun 21:22] =>  0:48
CLOCK: [2021-04-03 Sat 17:59]--[2021-04-03 Sat 18:15] =>  0:16
:END:
/[[https://github.com/hayamiz/twittering-mode][twittering-mode]] is a Twitter client for Emacs./

#+begin_src emacs-lisp :results silent
(defalias 'epa--decode-coding-string 'decode-coding-string) ; github.com/sfromm/emacs.d#twitter
(use-package twittering-mode
  :if (equal (system-name) ps/computer-hostname-pablo)
  :custom
  (twittering-use-master-password t)

  :config
  (defun ps/twittering-account-select (arg)
    "docstring"
    (interactive
     (list
      (completing-read "Select account: " '("EA News" "Future Matters" "GPE"))))
    (cond ((string= arg "EA News") (ps/twittering-ea-news))
          ((string= arg "Future Matters") (ps/twittering-future-matters))
          ((string= arg "GPE") (ps/twittering-gpe))))

  ;; github.com/hayamiz/twittering-mode/issues/83#issuecomment-343649348
  (defun ps/twittering-reload ()
    "Reload `twittering-mode'."
    (require 'twittering-mode)
    ;; Clear existing twit buffers
    (mapcar
     (lambda (buffer)
       (twittering-deactivate-buffer buffer)
       (kill-buffer buffer))
     (twittering-get-buffer-list))
    (twittering-unregister-killed-buffer)
    ;; Clear variables
    (setq twittering-private-info-file-loaded nil)
    (setq twittering-account-authorization nil)
    (setq twittering-oauth-access-token-alist nil)
    (setq twittering-buffer-info-list nil)
    (setq twittering-timeline-data-table (make-hash-table :test 'equal))
    (twit))

  (defun ps/twittering-ea-news ()
    "Start a `twittering-mode' session with the `ea_dot_news'
account."
    (interactive)
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-ea-news.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/ea_dot_news")
    (ps/twittering-reload))

  (defun ps/twittering-future-matters ()
    "Start a `twittering-mode' session with the `futurematters_'
account."
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-future-matters.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/futurematters_")
    (ps/twittering-reload))

  (defun ps/twittering-mode-get-uri ()
    "Get URI of tweet at point."
    (or (get-text-property (point) 'uri)
        (if (get-text-property (point) 'field)
            (let* ((id (get-text-property (point) 'id))
                   (status (twittering-find-status id)))
              (twittering-get-status-url-from-alist status))
          nil)))

  (defun ps/twittering-mode-open-externally ()
    "Open URI of tweet at point with external web browser."
    (interactive)
    (browse-url (ps/twittering-mode-get-uri)))

  (defun ps/twittering-mode-open-internally ()
    "Open URI of tweet at point with internal web browser."
    (interactive)
    (eaf-open (eaf-wrap-url (ps/twittering-mode-get-uri)) "browser"))

  (defun ps/twittering-mode-search-people-externally (&optional query)
    "Search for Twitter users in an external browser."
    (interactive)
    (let ((query (or query
                     (read-string "Search for person: "))))
      (browse-url (concat
                   "https://twitter.com/search?q="
                   query
                   "&src=typed_query&f=user"))))

  (defun ps/twittering-mode-org-capture-future-matters-research ()
    "Launch 'Future Matters: Research' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "lr"))

  (defun ps/twittering-mode-org-capture-future-matters-news ()
    "Launch 'Future Matters: News' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "ln"))

  ;; what follows copied from github.com/sfromm/emacs.d#twitter
  (defun ps/twittering-toggle-icons ()
    "Toggle use of icons in twittering mode."
    (interactive)
    (if (eq twittering-icon-mode t)
        (twittering-icon-mode nil)
      (twittering-icon-mode t)))

    (defun ps/twittering-add-image-format (format-table-func status-sym prefix-sym)
    "Adds the I format code to display images in the twittering-mode format table."
    (let ((format-table (funcall format-table-func status-sym prefix-sym)))
      (push `("I" .
              (let* ((entities (cdr (assq 'entity ,status-sym)))
                     text)
                (mapc (lambda (url-info)
                        (setq text (or (cdr (assq 'media-url url-info)) "")))
                      (cdr (assq 'media entities)))
                (if (string-equal "" text)
                    text
                  (let ((twittering-convert-fix-size 720))
                    (twittering-make-icon-string nil nil text))))) format-table)))

  (advice-add #'twittering-generate-format-table :around #'ps/twittering-add-image-format)

  :general
  ("A-t" 'ps/twittering-account-select)
  (twittering-mode-map
   "s-m" 'twittering-replies-timeline
   "s-r" 'twittering-mentions-timeline
   "c" 'twittering-push-tweet-onto-kill-ring
   "d" 'twittering-delete-status
   "A-C-s-f" 'twittering-goto-next-status
   "A-C-s-r" 'twittering-goto-previous-status
   "g" 'twittering-update-status-interactive
   "n" 'ps/twittering-mode-org-capture-future-matters-news
   "P" 'ps/twittering-mode-search-people-externally
   "q" 'twittering-kill-buffer
   "r" 'ps/twittering-mode-org-capture-future-matters-research
   "s" 'twittering-search
   "S" 'ps/twittering-mode-search-people-externally
   "t" 'twittering-update-status-interactive
   "u" 'twittering-push-uri-onto-kill-ring
   "x" 'ps/twittering-mode-open-externally
   "X" 'ps/twittering-mode-open-internally)
  (twittering-edit-mode-map
   "s-p" 'ps/twittering-mode-search-people-externally
   "s-c" 'twittering-edit-post-status))
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       964A8BEC-3FAD-4E9B-98C4-7E6CC7A46CD8
:END:
**** DONE Make ~twittering-mode~ not ask for passwords every time
CLOSED: [2022-07-19 Tue 19:29]
:PROPERTIES:
:ID:       2C96944E-DCBF-4683-8A1E-D2791EE84227
:ARCHIVE_TIME: 2022-07-21 Thu 14:57
:END:
See [[https://www.emacswiki.org/emacs/TwitteringMode][EmacsWiki: Twittering Mode]].

[2022-07-19 Tue 19:29] This was related to [[id:37064B69-E447-45E8-9C54-84A415521849][pinentry-mac]].

** mastodon
:PROPERTIES:
:ID:       252C88FE-B66D-4A8F-8286-78777F418EC3
:END:
#+begin_src emacs-lisp :results silent

#+end_src
https://holgerschurig.github.io/en/emacs-mastodon-hydra/
** reddit
:PROPERTIES:
:ID:       CEDBA9CB-F7FB-4E7F-8CAB-C96812BE1517
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-package md4rd
  :custom
  (md4rd-subs-active '(emacs))
  (md4rd--oauth-access-token
   (auth-source-pass-get 'secret "auth-sources/reddit"))
  (md4rd--oauth-refresh-token
   (auth-source-pass-get "refresh" "auth-sources/reddit"))

  :config
  (run-with-timer 0 3540 'md4rd-refresh-login)

  :hook
  (md4rd-mode-hook . md4rd-indent-all-the-lines))
#+end_src

** hugo
:PROPERTIES:
:ID:       7C6912C7-B5CB-4A04-8145-A89B891F7A0C
:END:
:LOGBOOK:
CLOCK: [2021-04-11 Sun 09:02]--[2021-04-11 Sun 09:06] =>  0:04
:END:
- [[https://lucidmanager.org/productivity/create-websites-with-org-mode-and-hugo/][Create Websites with Emacs: Blogging with Org Mode and Hugo]]
- [[https://sidhartharya.me/exporting-org-roam-notes-to-hugo/][Exporting Org Roam notes to hugo - Sidharth Arya]]

** org-download
:PROPERTIES:
:ID:       A9F101D1-4130-4297-A2B3-203B15AA408B
:END:
:LOGBOOK:
CLOCK: [2021-06-23 Wed 11:43]--[2021-06-23 Wed 11:51] =>  0:08
:END:
https://www.reddit.com/r/emacs/comments/d28915/how_do_i_set_up_orgdownload_for_drag_and_drop/
https://github.com/mpereira/.emacs.d#org-download

#+begin_src emacs-lisp :results silent
(use-package org-download
  :after org
  :general
  ("H-s-v" 'org-download-clipboard))
#+end_src
** org-web-tools
:PROPERTIES:
:ID:       F139F57B-7CBB-49C9-A061-B827B25DB3DA
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 10:50]--[2021-11-19 Fri 12:00] =>  1:10
CLOCK: [2021-11-18 Thu 20:43]--[2021-11-18 Thu 21:30] =>  0:47
CLOCK: [2021-10-01 Fri 21:10]--[2021-10-01 Fri 21:51] =>  0:41
:END:
This package renders [[https://github.com/rexim/org-cliplink][org-cliplink]], which I used to have installed, unnecessary, since the latter's functionality is replicated by ~org-web-tools-insert-link-for-url~, which is one among many useful commands.

#+begin_src emacs-lisp :results silent
(use-package org-web-tools
  :defer 30
  :commands ps/org-web-tools--youtube-dl
  :config
  ;; This function slightly tweaks `org-web-tools-insert-link-for-url'
  ;; so that it can be used with `org-capture'
  ;; blog.lazkani.io/posts/text-editors/bookmark-with-org-capture/
  (defun ps/org-web-tools-insert-link-for-clipboard-url ()
    "Extend org-web-tools-inster-link-for-url to take URL from
clipboard or kill-ring"
    (org-web-tools--org-link-for-url (org-web-tools--get-first-url)))

  ;; Version for EA Forum
  (defun ps/org-web-tools-insert-link-for-clipboard-url-ea-forum ()
    "Extend org-web-tools-inster-link-for-url to take URL from
clipboard or kill-ring"
    (replace-regexp-in-string
     " - EA Forum" ""
     (org-web-tools--org-link-for-url (org-web-tools--get-first-url))))

  (cl-defun ps/org-web-tools--org-title-for-url (&optional (url (org-web-tools--get-first-url)))
    "Return title of HTML page at URL. If URL is not given, look for
first URL in `kill-ring'. If page at URL has no title, return
URL."
    (let* ((html (org-web-tools--get-url url))
           (title (org-web-tools--html-title html)))
      (if title
          title
        (message "HTML page at URL has no title")
        url)))

  (defun ps/org-web-tools-insert-title-for-url-ea-forum (url)
    "Insert title of HTML page at URL.

If URL is not given, look for first URL in `kill-ring'."
    (interactive (list (org-web-tools--get-first-url)))
    (insert
     (replace-regexp-in-string
      " - EA Forum" ""
      (concat "Articles/" (ps/org-web-tools--org-title-for-url url)))))

  (defun ps/org-web-tools-insert-title-for-clipboard-url-ea-forum ()
    "Extend `org-web-tools-inster-link-for-url' to take URL from
clipboard or kill-ring"
    (replace-regexp-in-string
     " - EA Forum" ""
     (ps/org-web-tools--org-title-for-url (org-web-tools--get-first-url))))

  (defun ps/org-web-tools--youtube-dl (url)
    "Create org link to local copy of YouTube video downloaded from
URL. To be used in conjunction with associated `org-capture'
template."
    (let* ((html (org-web-tools--get-url url))
           (title (org-web-tools--html-title html))
           (file-path (file-name-concat ps/dir-downloads (file-name-with-extension (org-hugo-slug title) "webm"))))
      (if title
          (org-link-make-string (concat "file:" file-path) title)
        (user-error "HTML page at URL has no title"))))

  (defun ps/org-web-tools--get-first-url ()
    "Return URL in clipboard, or first URL in the `kill-ring', or nil
if none."
    (current-kill 0) ; added so that clipboard is pushed to kill ring; it won't otherwise
    (cl-loop for item in (append (list (gui-get-selection 'CLIPBOARD))
                                 kill-ring)
             when (and item (string-match (rx bol "http" (optional "s") "://") item))
             return item))

  (advice-add 'org-web-tools--get-first-url :override #'ps/org-web-tools--get-first-url)

  :general
  ("s-A-k" 'org-web-tools-insert-link-for-url))
#+end_src
** request
:PROPERTIES:
:ID:       4B7C17EE-0346-4059-AFF1-24DD7A609ADE
:END:

#+begin_src emacs-lisp :results silent
(use-package request
  :defer 15)
#+end_src

** mullvad
:PROPERTIES:
:ID:       F932B1C7-4BC0-45AB-A736-3E4DC4FBA09E
:END:
:LOGBOOK:
CLOCK: [2022-09-29 Thu 16:52]--[2022-09-29 Thu 18:01] =>  1:09
CLOCK: [2022-09-29 Thu 15:39]--[2022-09-29 Thu 16:26] =>  0:47
:END:
This section collects a few functions I created for interfacing with Mullvad, a VPN service. To use these commands, you must first run ~mullvad account login [your account number]~ in the terminal.  To find your account number, go to "settings" > "account".

#+begin_src emacs-lisp :results silent
(defvar ps/mullvad-servers
  '(("London" . "gb4-wireguard")
    ("Madrid" . "es-mad-wg-101")
    ("Malmö" . "se1-wireguard")
    ("Frankfurt" . "de5-wireguard")
    ("New York" . "us276-wireguard")
    ("São Paulo" . "br1-wireguard")
    ("Switzerland" . "ch5-wireguard"))
  "Specify the optimal Mullvad VPN servers for each city.")

(defvar ps/mullvad-websites
  '(("Library Genesis" . "Malmö")
    ("HathiTrust" . "New York")
    ("Criterion Channel" . "New York")
    ("Pirate Bay" . "Malmö")
    ("Wise" . "Madrid"))
  "For each website that requires a VPN connection, specify the
optimal server city.")

(defun ps/mullvad-connect-to-server (server)
  "Prompt the user to select from a list of servers and connection
durations, and connect to the server for that duration.

The list of servers is defined in `ps/mullvad-servers'."
  (interactive
   (list
    (completing-read
     "Select server: "
     ps/mullvad-servers)))
  (let* ((duration (call-interactively 'ps/mullvad-disconnect-after))
         (server (cdr (assoc server ps/mullvad-servers)))
         (connection (replace-regexp-in-string
                      "Setting location constraint to \\(.*\\)\n.*\n.*" "\\1"
                      (shell-command-to-string (format
                                                "mullvad relay set hostname %s; mullvad connect"
                                                server)))))
    (if duration
        (message (format "Connected to server %s. Disconnecting in %s minutes." connection duration))
      (message (format "Connected to server %s." connection)))))

(defun ps/mullvad-connect-to-website (website)
  "Prompt the user to select from a list of websites and connection
durations, set optimal VPN server for it, and connect to it for
that duration."
  (interactive
   (list
    (completing-read
     "Select website: "
     ps/mullvad-websites)))
  (let* ((duration (call-interactively 'ps/mullvad-disconnect-after))
         (city (cdr (assoc website ps/mullvad-websites)))
         (server (cdr (assoc city ps/mullvad-servers)))
         (connection (replace-regexp-in-string
                      "Setting location constraint to \\(.*\\)\n.*\n.*" "\\1"
                      (shell-command-to-string (format
                                                "mullvad relay set hostname %s; mullvad connect"
                                                server)))))
    (if duration
        (message (format "Connected to Mullvad server %s. Disconnecting in %s minute(s)." connection duration))
      (message (format "Connected to Mullvad server %s." connection)))))

(defun ps/mullvad-disconnect ()
  "Disconnect from server."
  (interactive)
  (shell-command "mullvad disconnect")
  (message "Disconnected from Mullvad server."))

(defun ps/mullvad-disconnect-after (duration)
  "End connection to Mullvad VPN server after DURATION minutes."
  (interactive
   (list (completing-read
          "Select duration (minutes): "
          '("1" "5" "10" "30" "60" "120" "custom" "unlimited"))))
  (when (equal duration "custom")
    (setq duration (read-string "Enter duration (minutes): ")))
  (unless (equal duration "unlimited")
    ;; If a previous timer is running, cancel it.
    (cancel-function-timers #'ps/mullvad-disconnect)
    ;; Now run a new timer.
    (run-with-timer
     (* (string-to-number duration) 60)
     nil
     #'ps/mullvad-disconnect)
    duration))
#+end_src

*** Archive                         :ARCHIVE:
:PROPERTIES:
:ID:       41575F1D-9348-4E44-A189-49F5B2B4990A
:END:
**** CANCELLED Set up split tunneling for Firefox
CLOSED: [2022-11-07 Mon 14:13]
:PROPERTIES:
:ID:       70B128D0-2B14-4302-87D6-7E39A5B6EC32
:ARCHIVE_TIME: 2022-11-07 Mon 14:13
:END:
Too complicated.
* multimedia
:PROPERTIES:
:ID:       358E28B5-0274-43A0-AE9C-AA004B4775E5
:END:
** mpv
:PROPERTIES:
:ID:       8D75E528-AA79-4512-B4A9-6EB7A56F9026
:END:
/[[https://github.com/kljohann/mpv.el][mpv]] provides various functions to control [[https://en.wikipedia.org/wiki/Mpv_(media_player)][mpv]]./

#+begin_src emacs-lisp :results silent
(use-package mpv)
#+end_src

** youtube-dl-emacs
:PROPERTIES:
:ID:       26EEEF20-5CDC-4855-A03D-AFEBB784D637
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:18]--[2021-11-19 Fri 12:33] =>  0:15
CLOCK: [2021-10-14 Thu 18:14]--[2021-10-14 Thu 19:00] =>  0:46
CLOCK: [2021-10-14 Thu 17:50]--[2021-10-14 Thu 18:14] =>  0:24
:END:
/[[https://github.com/skeeto/youtube-dl-emacs][youtube-dl-emacs]] lets you control the [[https://youtube-dl.org/][youtube-dl]] download manager from Emacs./

Note that this package also works with [[https://github.com/yt-dlp/yt-dlp][yt-dlp]], a ~youtube-dl~ fork.

#+begin_src emacs-lisp :results silent
(use-package youtube-dl
  :custom
  (youtube-dl-program "yt-dlp")
  (youtube-dl-arguments '(
                          "--no-mtime"
                          "--restrict-filenames"
                          "--write-subs"
                          "--write-auto-subs"
                          ;; the below arguments aren't working
                          ;; "--sub-langs 'en-orig,en,fr,de,it,la,pt,es,sv,ca,ru'"
                          ;; "--skip=translated_subs"
                          ))
  (youtube-dl-directory ps/dir-downloads)

  :config
  ;; TODO:
  ;; - make it work even when point is at start of heading
  ;; - archive subitltes
  (defun ps/org-archive-watched-video ()
    "Archive TODO and associated file in video watchlist."
    (interactive)
    (when (ps/org-link-get-url-at-point)
      (let ((filename (s-replace "file:" "" (ps/org-link-get-url-at-point))))
        (rename-file
         filename
         (expand-file-name
          (file-name-nondirectory filename)
          (file-name-as-directory (expand-file-name
                                   "archive"
                                   (file-name-directory filename))))))
      (org-archive-to-archive-sibling))))
#+end_src

*** TODO [#4] Fix naming problem for videos
:PROPERTIES:
:Effort:   0:45
:ID:       F4F4B47A-6B45-41DD-831C-0C23D67C4398
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 20:22]--[2022-09-05 Mon 21:28] =>  1:06
:END:
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       126B3CB9-D2C0-4257-B1C4-C49041F84F05
:END:
**** DONE Create command to archive watched videos
CLOSED: [2022-05-22 Sun 13:55]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-23 Mon 20:58
:ID:       6EA38525-A50F-489C-856F-ECF54C8D40E1
:END:
:LOGBOOK:
CLOCK: [2022-05-21 Sat 18:48]--[2022-05-21 Sat 19:18] =>  0:30
:END:
** mentor
:PROPERTIES:
:ID:       E3F6210D-F6CD-4397-9004-3D31B5623D18
:END:
/[[https://github.com/skangas/mentor][mentor]] is an Emacs frontend for the rTorrent bittorrent client./

[2022-10-07 Fri 21:48] I wasn't able to make it work.

#+begin_src emacs-lisp :results silent :tangle no
(use-package mentor
  :custom
  (mentor-rtorrent-download-directory ps/dir-downloads)
  (mentor-rtorrent-external-rpc "~/.rtorrent-rpc.socket")
  :general
  (mentor-mode-map
   "SPC" 'mentor-download-load-magnet-link-or-url
   "<return>" 'mentor-download-load-torrent))
#+end_src

** espotify
:PROPERTIES:
:ID:       5879A8B7-0889-4FCD-A16A-77D0BCEE4804
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 14:50]--[2022-06-22 Wed 15:10] =>  0:20
:END:
[2022-06-22 Wed 15:07] I can't make this work. Maybe related to the [[id:86EE7A94-E470-45DB-B0A5-0AE717A15353][dbus problem]]?

#+begin_src emacs-lisp :results silent :tangle no
(use-package espotify
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :defer 20
  :custom
  (espotify-service-name "spotify")
  (espotify-use-system-bus-p nil)
  (espotify-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (espotify-client-secret (auth-source-pass-get 'secret "auth-sources/spotify")))
#+end_src

** smudge
:PROPERTIES:
:ID:       B5010216-E345-4F6D-9033-DE354D7E707A
:END:
:LOGBOOK:
CLOCK: [2021-05-21 Fri 10:45]--[2021-05-21 Fri 10:59] =>  0:14
CLOCK: [2021-05-20 Thu 19:49]--[2021-05-20 Thu 20:00] =>  0:11
CLOCK: [2021-05-20 Thu 19:11]--[2021-05-20 Thu 19:13] =>  0:02
CLOCK: [2021-05-19 Wed 21:40]--[2021-05-19 Wed 21:52] =>  0:12
CLOCK: [2021-05-19 Wed 20:34]--[2021-05-19 Wed 21:13] =>  0:39
CLOCK: [2021-05-19 Wed 16:37]--[2021-05-19 Wed 16:59] =>  0:22
CLOCK: [2021-05-19 Wed 11:26]--[2021-05-19 Wed 12:23] =>  0:57
:END:
/[[https://github.com/danielfm/smudge][smudge]] lets you control Spotify from Emacs./

#+begin_src emacs-lisp :results silent :tangle no
(use-package smudge
  :after auth-source-pass
  ;; :defer 600
  :custom
  (smudge-oauth2-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (smudge-oauth2-client-secret (auth-source-pass-get 'secret "auth-sources/spotify"))
  (smudge-player-status-format "[%a - %t ◷ %l]")
  (smudge-api-search-limit 100) ; values >100 result in a 400 error
  (smudge-status-location nil)
  :config
  ;; should renew credentials and store with `pass'
  (defun ps/smudge ()
    "Turn on global smudge remote mode and go to my playlists."
    (interactive)
    (global-smudge-remote-mode 1)
    (smudge-my-playlists))
  (defun ps/smudge-track-load-more ()
    "Move point to end of playlist buffer and load more tracks."
    (interactive)
    (end-of-buffer)
    (smudge-track-load-more))
  :general
  ("A-y" 'ps/smudge)
  (smudge-track-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "t" 'smudge-track-search
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more)
  (smudge-playlist-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more))
#+end_src

** read-aloud
:PROPERTIES:
:ID:       71DBC03A-D68C-4E5D-B495-55DE31F6DC2F
:END:
/[[https://github.com/gromnitsky/read-aloud.el][read-aloud]] is a simple Emacs interface to TTS (text-to-speech) engines./

As a side note, to give Emacs access to the microphone on MacOS, clone ~https://github.com/DocSystem/tccutil~ and from the cloned repo, run ~sudo python3 tccutil.py -p /opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/Emacs.app --micro -e~ (some discussion [[https://scsynth.org/t/emacs-scsynth-and-microphone-permissions/3253][here]]).

#+begin_src emacs-lisp :results silent
(use-package read-aloud
  :defer 20
  :config
  (setq read-aloud-engine "say")

  :general
  ("A-C-r" 'read-aloud-this)) ; remember that `A-C-d' starts/stops dictation
#+end_src

** EMMS
:PROPERTIES:
:ID:       3B176388-5D13-478F-8E13-9C8C93AB9D10
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 12:18]--[2022-09-05 Mon 13:11] =>  0:53
CLOCK: [2022-09-05 Mon 12:09]--[2022-09-05 Mon 12:12] =>  0:03
CLOCK: [2021-05-04 Tue 21:41]--[2021-05-04 Tue 21:56] =>  0:15
:END:
/[[https://www.gnu.org/software/emms/][EMMS]] (Emacs MultiMedia System) is media player software for Emacs./

#+begin_src emacs-lisp :results silent :tangle no
(use-package emms
  :demand t
  :custom
  (emms-source-file-default-directory ps/dir-music-tango)
  (emms-playlist-buffer-name "*Music*")
  (emms-info-asynchronously t)
  (emms-info-functions '(emms-info-libtag) "make sure libtag is the only thing delivering metadata")
  (emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find "~1 order of magnitude faster; requires GNU find: `brew install findutils'")
  :config
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (require 'emms-info-libtag) ;;; load functions that will talk to emms-print-metadata which in turn talks to libtag and gets metadata
  (require 'emms-info-metaflac)
  (add-to-list 'emms-info-functions 'emms-info-libtag)
  (require 'emms-mode-line)
  (emms-mode-line 1)
  (require 'emms-playing-time)
  (emms-playing-time 1))
#+end_src

[2021-05-04 Tue 22:22] ~emms-print-metadata~ needs to be installed manually. I followed [[https://hack.org/mc/blog/emms.html][this]], installed the three dependencies via brew but wasn't able to complete the instructions. The ~emms~ directory is currently located in the user path.

[2022-09-05 Mon 13:08] I think the key question is whether I can create "smart" playlists or reproduce that functionality in some way, i.e. generate lists of tracks based on metadata (such as all tracks recorded in 1927).

*** resources
:PROPERTIES:
:ID:       C043F6EF-C922-4803-8361-E94ACE1C60F0
:END:
[[https://sqrtminusone.xyz/posts/2021-09-07-emms/][My EMMS and elfeed setup]]
* passwords
:PROPERTIES:
:ID:       D412C998-40EE-4638-959A-C2530EC9F247
:END:
:LOGBOOK:
:END:
** plstore
:PROPERTIES:
:ID:       5257E611-7953-4898-B743-25803EC7D9B4
:END:
#+begin_src emacs-lisp :results silent
(use-feature plstore
  :init
  (setq-default plstore-cache-passphrase-for-symmetric-encryption t))
#+end_src
** epg-config
:PROPERTIES:
:ID:       012F15A3-7717-4B09-9F43-74DA6F5F7C1A
:END:

#+begin_src emacs-lisp :results silent
(use-feature epg-config
  :custom
  (epg-pinentry-mode 'loopback)) ; use minibuffer for password entry
#+end_src

** auth-source
:PROPERTIES:
:ID:       291F9998-9940-4249-A048-92B5F2A2895E
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 12:33]--[2021-05-29 Sat 13:02] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source
  :defer 5
  :preface
  (eval-when-compile
    (defvar auth-sources))
  :custom
  (auth-source-debug t) ; uncomment for debugging
  (auth-sources '(macos-keychain-internet macos-keychain-generic)))
#+end_src

** emacs-oauth2-auto
:PROPERTIES:
:ID:       C7B36982-D472-4248-8C61-B7EB0ED6ACF6
:END:
#+begin_src emacs-lisp :results silent
(use-package emacs-oauth2-auto
  :straight (emacs-oauth2-auto
             :host github
                   :repo "telotortium/emacs-oauth2-auto")

  )
#+end_src

** pass
:PROPERTIES:
:ID:       518D3C1F-AFD6-4B72-8980-CAD10BBAEDDE
:END:
:LOGBOOK:
CLOCK: [2022-06-03 Fri 16:18]--[2022-06-03 Fri 16:35] =>  0:17
CLOCK: [2022-06-03 Fri 16:38]--[2022-06-03 Fri 16:44] =>  0:06
CLOCK: [2021-07-20 Tue 09:33]--[2021-07-20 Tue 10:14] =>  0:41
CLOCK: [2021-05-29 Sat 15:44]--[2021-05-29 Sat 16:28] =>  0:44
CLOCK: [2021-05-26 Wed 17:46]--[2021-05-26 Wed 18:04] =>  0:18
CLOCK: [2021-05-14 Fri 14:55]--[2021-05-14 Fri 15:07] =>  0:12
CLOCK: [2021-04-12 Mon 13:12]--[2021-04-12 Mon 13:20] =>  0:08
CLOCK: [2021-04-11 Sun 14:36]--[2021-04-11 Sun 14:47] =>  0:11
CLOCK: [2021-04-11 Sun 12:14]--[2021-04-11 Sun 12:28] =>  0:14
CLOCK: [2021-04-11 Sun 12:01]--[2021-04-11 Sun 12:10] =>  0:09
:END:
/[[https://github.com/NicolasPetton/pass][pass]] is a major mode for password-store./

#+begin_src emacs-lisp :results silent
(use-package pass
  ;; :demand t
  :defer 6
  :config
  (defun ps/pass-open-at-point ()
    "Open the URL associated with the entry at point and its password
to the clipboard."
    (interactive)
    (when (eq major-mode 'pass-mode)
      (pass-copy)
      (pass--with-closest-entry entry
        (let* ((inhibit-message t)
               (parsed-entries (password-store-parse-entry entry))
               (field password-store-url-field))
          (unless (assoc field parsed-entries)
            (user-error "Field `%s' not in  %s" field entry))
          (browse-url (password-store-get-field entry field))))))

  (defun ps/pass-quit ()
    "Kill the buffer quitting the window."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (eq major-mode 'pass-view-mode)
          (quit-window t))
        (kill-buffer buf))))
  (advice-add 'pass-quit :override #'ps/pass-quit)

  (defun ps/pass-edit ()
    "Edit the entry at point, without confirmation."
    (interactive)
    (pass--with-closest-entry entry
      (password-store-edit entry)))

  (defun ps/pass-git-sync ()
    "Synchronize with remote repository."
    (interactive)
    ;; (shell-command "pass git config pull.rebase false")
    (shell-command "pass git pull; pass git push"))

  (defun ps/pass-magit-pull-tlon ()
    "Pull changes from remote `tlon' repo."
    (interactive)
    (let ((default-directory ps/dir-dropbox-tlon-pass))
      (magit-pull-from-pushremote nil)))

  (defun ps/pass-magit-push-tlon ()
    "Push local changes to remote `tlon' repo."
    (interactive)
    (let ((default-directory ps/dir-dropbox-tlon-pass))
      (call-interactively #'magit-push-current-to-pushremote)))

  (defun ps/pass-magit-merge-tlon ()
    "Merge local changes into remote `tlon' repo."
    (interactive)
    (let ((default-directory ps/dir-dropbox-tlon-pass))
      (magit-merge-plain (magit-branch-or-commit-at-point))))

  (defun ps/pass-fix-pinentry ()
    "Fix periodic pinentry problem."
    (interactive)
    (shell-command "pkill gpg-agent; gpg-agent --pinentry-program=/usr/bin/pinentry-gtk-2 --daemon"))

  :general
  ("A-H-o" 'pass)
  (pass-mode-map
   "c" 'pass-copy
   "d" 'pass-kill
   "<return>" 'ps/pass-edit
   "SPC" 'ps/pass-open-at-point
   "e" 'ps/pass-edit
   "y" 'ps/pass-git-sync)
  (pass-view-mode-map
   "s-c" 'pass-view-toggle-password
   "s-s" 'server-edit))
#+end_src

*** TODO Fix pass
SCHEDULED: <2023-01-31 Tue>
:PROPERTIES:
:ID:       9FC76175-03AB-42F1-91FC-933A31323991
:END:
k0A@S1NN03za94U
+1 (510) 944-9071‬

Taxpayer number
32087850635

File number
0804874237

Webfile number
FQ062851


Full name of most important person?
Gaverick Matheny

Where for vacation?
Bhutan

First pet?
Marron

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       BADBCCAF-DC50-4FCE-A4C2-3606418D0F9C
:END:
**** DONE [#3] Fix Pass discrepancy local/remote discrepancy
CLOSED: [2021-07-20 Tue 21:50]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-20 Tue 21:50
:ID:       A999E246-9B7C-4BB7-B9C9-75F8C9EAA731
:END:
:LOGBOOK:
CLOCK: [2021-07-20 Tue 21:41]--[2021-07-20 Tue 21:50] =>  0:09
:END:
- [ ] Determine what the best folder structure is
- [ ] Use Dired to structure my ~pass~ folder accordingly
- [ ] Push changes to remote repository
  First do a test run with a single file to see how it works.
**** DONE Revise ~midnight~ declaration for Pass
CLOSED: [2021-07-20 Tue 21:56]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-20 Tue 21:56
:ID:       B4890C5D-1026-4C9B-860A-173102B6B43A
:END:
:LOGBOOK:
CLOCK: [2021-07-20 Tue 21:50]--[2021-07-20 Tue 21:55] =>  0:05
:END:
Determine if this is best done by pulling and pushing or if there is a better option.

**** DONE [#5] Fix Pass edit issue
CLOSED: [2021-07-26 Mon 18:54]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2021-07-26 Mon 18:54
:ID:       A99981DA-2D26-487D-AF3B-20F6F0DB68B9
:END:
:LOGBOOK:
CLOCK: [2021-07-06 Tue 21:49]--[2021-07-06 Tue 23:24] =>  1:35
CLOCK: [2021-06-15 Tue 18:55]--[2021-06-15 Tue 19:03] =>  0:08
:END:
There seem to be two problems that I need to fix:
1. [ ] I get an error message when I try to edit a record.
2. [ ] Even ignoring the error message, it appears that ~pass~ is not integrated with git.
   I don't understand the reason for (2), since ~$ pass edit~ works well (I believe; I should test this), and apparently invoking ~edit~ within the pass Emacs buffer simply calls ~pass edit~.

**** DONE [#4] Fix GitHub authentication issue
CLOSED: [2021-08-15 Sun 22:14]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-08-15 Sun 22:14
:ID:       F494438C-18D9-4799-8AD8-4C08A7FAA059
:END:
:LOGBOOK:
CLOCK: [2021-08-15 Sun 21:43]--[2021-08-15 Sun 22:14] =>  0:31
CLOCK: [2021-07-26 Mon 18:23]--[2021-07-26 Mon 18:54] =>  0:31
:END:
https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/
Wait until I can no longer access GitHub, to determine which repositories are affected.

Done. Followed steps [[https://gist.github.com/jonjack/bf295d4170edeb00e96fb158f9b1ba3c][here]].
**** CANCELLED [#4] Move password repository to Dropbox
CLOSED: [2022-06-03 Fri 16:43]
:PROPERTIES:
:Effort:   1:00
:ID:       243B8F7F-4320-46F8-89EF-82FF6262C988
:ARCHIVE_TIME: 2022-06-03 Fri 16:43
:END:
** auth-source-pass
:PROPERTIES:
:ID:       00772E1B-A97C-46B5-8DE9-77462AAE0189
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 15:10]--[2021-05-29 Sat 15:44] =>  0:34
CLOCK: [2021-05-29 Sat 13:52]--[2021-05-29 Sat 14:10] =>  0:18
CLOCK: [2021-05-26 Wed 18:56]--[2021-05-26 Wed 19:23] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source-pass
  :demand t
  :after (auth-source pass)
  :custom
  (auth-source-debug t)
  (auth-source-do-cache nil)
  :config
  (auth-source-pass-enable))
#+end_src

Note: to work, entries must conform to the pattern ~auth-sources/host~.

- Also check [[https://git.sr.ht/~sirn/dotfiles/tree/85b9d5249712e3c35e6140083be1629be1d2b643/etc/emacs/packages/editor-auth.el][~sirn/dotfiles: etc/emacs/packages/editor-auth.el - sourcehut git]]

** pass-otp
:PROPERTIES:
:ID:       A9670B03-7C37-47F8-8B3C-8ACFBBA53081
:END:
[[https://github.com/tadfisher/pass-otp][GitHub - tadfisher/pass-otp: A pass extension for managing one-time-password (OTP) tokens]]

** Archive                                                                                                             :ARCHIVE:
:PROPERTIES:
:ID:       53229CB3-1BAF-4F8C-933E-A1D623E8EA9B
:END:
*** DONE [#5] Diagnose error
CLOSED: [2021-04-20 Tue 22:24]
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-20 Tue 22:24
:ID:       05A3D0BF-304E-4AF0-80AC-233BBE768AEA
:END:

*** DONE Fix GPG ID issue
CLOSED: [2021-06-07 Mon 19:25]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-07 Mon 19:25
:ID:       8B2F3263-674A-46B7-8001-FA7AA696C2BA
:END:

https://github.com/android-password-store/Android-Password-Store/issues/1089

*** DONE [#3] Export private keys
CLOSED: [2022-07-25 Mon 13:48]
:PROPERTIES:
:ID:       5E74E0A2-B2B6-4130-9697-921A3A865D42
:Effort:   0:30
:ARCHIVE_TIME: 2022-08-28 Sun 16:01
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 13:48]--[2022-07-25 Mon 13:51] =>  0:03
:END:
* notifications
:PROPERTIES:
:ID:       7F48BD07-3570-46C7-A535-87CA5833E84E
:END:
** alert
:PROPERTIES:
:ID:       694AAC2E-669E-40D4-9794-5E352D77734C
:END:
:LOGBOOK:
CLOCK: [2022-07-28 Thu 11:50]--[2022-07-28 Thu 12:02] =>  0:12
CLOCK: [2022-03-31 Thu 18:32]--[2022-03-31 Thu 18:49] =>  0:17
CLOCK: [2022-03-31 Thu 16:33]--[2022-03-31 Thu 16:33] =>  0:00
CLOCK: [2021-04-08 Thu 18:18]--[2021-04-08 Thu 18:29] =>  0:11
CLOCK: [2021-03-27 Sat 16:50]--[2021-03-27 Sat 17:00] =>  0:10
:END:
/[[https://github.com/jwiegley/alert][alert]] is a Growl-like alerts notifier for Emacs./

#+begin_src emacs-lisp :results silent
(use-package alert
  ;; :defer 10
  :demand t
  :custom
  (alert-fade-time 2)

  :config
  (if (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier)
    (setq alert-default-style 'notifications))

  (defun ps/alert-dismiss-osx-notification ()
    "docstring"
    (interactive)
    (let ((shell-command-buffer-name "*alert-dismiss-osx-notification*"))
      (shell-command "osascript ~/Library/Scripts/notifications.applescript")
      (kill-buffer shell-command-buffer-name)))

  :general
  ("H-\"" 'ps/alert-dismiss-osx-notification))
#+end_src

*** TODO Fix ~alert~
:PROPERTIES:
:ID:       5469B1A2-7284-43A7-86B4-75ACA49DCEC9
:END:
** dbus
:PROPERTIES:
:ID:       6DFC9E2F-E77A-4966-9AA6-D0DFDA17E11B
:END:
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       6EB0E5A6-5DFF-4385-8F4F-35C5CC45A4D1
:END:
**** CANCELLED [#5] Fix ~dbus~
CLOSED: [2022-07-13 Wed 16:45]
:PROPERTIES:
:Effort:   0:30
:ID:       86EE7A94-E470-45DB-B0A5-0AE717A15353
:ARCHIVE_TIME: 2022-07-13 Wed 16:45
:END:
:LOGBOOK:
CLOCK: [2022-07-13 Wed 15:35]--[2022-07-13 Wed 16:45] =>  1:10
CLOCK: [2022-07-11 Mon 09:26]--[2022-07-11 Mon 09:44] =>  0:18
CLOCK: [2022-06-09 Thu 13:29]--[2022-06-09 Thu 13:49] =>  0:20
:END:
#+begin_src emacs-lisp :tangle no
Debugger entered--Lisp error: (dbus-error "No connection to bus" :session)
dbus-message-internal(1 :session "org.freedesktop.Notifications" "/org/freedesktop/Notifications" "org.freedesktop.Notifications" "Notify" dbus-call-method-handler :string "Emacs" :uint32 0 :string "/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/..." :string "Org mode message" :string "Task ‘Anki daily reviews [0/23]’ should be finishe..." (:array) ((:dict-entry "urgency" (:variant :byte 0))) :int32 3000)
apply(dbus-message-internal 1 :session "org.freedesktop.Notifications" "/org/freedesktop/Notifications" "org.freedesktop.Notifications" "Notify" dbus-call-method-handler (:string "Emacs" :uint32 0 :string "/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/..." :string "Org mode message" :string "Task ‘Anki daily reviews [0/23]’ should be finishe..." (:array) ((:dict-entry "urgency" (:variant :byte 0))) :int32 3000))
dbus-call-method(:session "org.freedesktop.Notifications" "/org/freedesktop/Notifications" "org.freedesktop.Notifications" "Notify" :string "Emacs" :uint32 0 :string "/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/..." :string "Org mode message" :string "Task ‘Anki daily reviews [0/23]’ should be finishe..." (:array) ((:dict-entry "urgency" (:variant :byte 0))) :int32 3000)
notifications-notify(:title "Org mode message" :body "Task ‘Anki daily reviews [0/23]’ should be finishe..." :timeout 3000 :urgency low)
org-show-notification("Task ‘Anki daily reviews [0/23]’ should be finishe...")
org-notify("Task ‘Anki daily reviews [0/23]’ should be finishe..." nil)
org-clock-notify-once-if-expired()
org-clock-update-mode-line()
org-clock-in()
ps/org-id-notes-with-clock("i")
(closure (bootstrap-version t) nil (interactive) (ps/org-id-notes-with-clock "i"))()
funcall-interactively((closure (bootstrap-version t) nil (interactive) (ps/org-id-notes-with-clock "i")))
hydra--call-interactively-remap-maybe((closure (bootstrap-version t) nil (interactive) (ps/org-id-notes-with-clock "i")))
hydra-org-notes/lambda-H-i-and-exit()
funcall-interactively(hydra-org-notes/lambda-H-i-and-exit)
command-execute(hydra-org-notes/lambda-H-i-and-exit)
#+end_src

My diagnosis is that ~dbus~ is just not working at all. I've came to this conclusion after noticing that the ~tmr~ notifications also trigger this error (~tmr~ relies on ~dbus~ to generate these alerts).

[2022-07-13 Wed 16:40]
https://github.com/zbentley/dbus-osx-examples/blob/master/installation/README.md
- I followed the instructions and confirm that it passed the test, using the first (homebrew) method. However, I still get the same error on Emacs
- I tried the alternative methods but these didn't pass the test.
- I also checked the following links:
https://github.com/jimeh/emacs-builds/issues/17#issuecomment-997455295
https://www.mail-archive.com/emacs-orgmode@gnu.org/msg137704.html

Man, I give up.

* calc
:PROPERTIES:
:ID:       29FF5CB1-E727-4CDC-B745-6A9B5711549C
:END:
** calc
:PROPERTIES:
:ID:       50FAD2F3-E501-408E-A9A2-8358FAA87C1C
:END:

#+begin_src emacs-lisp :results silent
(use-feature calc
  :general
  ("A-c" 'calc
   "A-M-c" 'quick-calc)
  ((calc-mode-map calc-alg-map)
   "C-k" nil))
#+end_src

** constants
:PROPERTIES:
:ID:       E9DB498C-A4B6-4665-8CA1-40BBAC219B76
:END:
/[[https://github.com/emacsmirror/constants][constants]] provides physical values of physical constants and units./

#+begin_src emacs-lisp :results silent
(use-package constants)
#+end_src

* games
:PROPERTIES:
:ID:       5694074B-989E-4B06-B9EB-5807AAB36DDC
:END:
** tetris
:PROPERTIES:
:ID:       F4C5A232-7788-4240-9CE2-B6761C905786
:END:
#+begin_src emacs-lisp :results silent
(use-feature tetris
  :general
  (tetris-mode-map
  "k" 'tetris-rotate-prev
  "l" 'tetris-move-down
  "j" 'tetris-move-left
  ";" 'tetris-move-right))
#+end_src

* misc.
:PROPERTIES:
:ID:       EB8682EE-77BC-4D88-AA87-5ECB804C8B53
:END:
#+begin_src emacs-lisp :results silent
;; github.com/Gleek/emacs.d/blob/761dad7e97accd6d1537a201c5d447a6be1d155c/core/core-util.el#L31
(defun ps/random-alnum (&optional length)
  (let ((times (or length 5))
        (random ""))
    (setq-local random "")
    (dotimes (_ times)
      (setq random (concat random (let* ((alnum "abcdefghijklmnopqrstuvwxyz0123456789")
             (i (% (abs (random)) (length alnum))))
                       (substring alnum i (1+ i))))))
    random))
#+end_src

** unpackaged
:PROPERTIES:
:ID:       484FDD89-4C12-4624-82CB-FC36795C0A8F
:END:
:LOGBOOK:
:END:

#+begin_src emacs-lisp :results silent
(use-package unpackaged
  :straight (unpackaged :host github :repo "alphapapa/unpackaged.el")
  :commands (unpackaged/org-forward-to-entry-content))
#+end_src

** macos
:PROPERTIES:
:ID:       DA6E75E5-8D85-4CAF-A921-F7A3A77B0362
:END:
#+begin_src emacs-lisp :results silent
(defun ps/eject-external-hard-drive ()
  "Eject external hard drive. Assumes only one external hard drive
is connected."
  (interactive)
  (let ((list-external
         (shell-command-to-string
          "diskutil list external")))
    (string-match
     "/dev/disk\\([[:digit:]]\\) (external, physical):"
     list-external)
    (shell-command
     (format
      "diskutil eject disk%s"
      (match-string 1 list-external)))))
#+end_src

** midnight-mode
:PROPERTIES:
:ID:       C6B68696-DCCC-4143-A0BC-E5EEE249AACF
:END:
:LOGBOOK:
CLOCK: [2022-08-29 Mon 16:53]--[2022-08-29 Mon 17:06] =>  0:13
CLOCK: [2022-07-15 Fri 10:10]--[2022-07-15 Fri 11:10] =>  1:00
CLOCK: [2022-07-13 Wed 10:43]--[2022-07-13 Wed 10:56] =>  0:13
CLOCK: [2022-05-06 Fri 08:00]--[2022-05-06 Fri 08:15] =>  0:15
CLOCK: [2022-01-05 Wed 07:59]--[2022-01-05 Wed 08:37] =>  0:38
CLOCK: [2021-12-23 Thu 08:03]--[2021-12-23 Thu 08:20] =>  0:17
CLOCK: [2021-12-15 Wed 17:44]--[2021-12-15 Wed 17:53] =>  0:09
CLOCK: [2021-11-18 Thu 22:20]--[2021-11-18 Thu 22:58] =>  0:38
CLOCK: [2021-07-10 Sat 18:47]--[2021-07-10 Sat 19:28] =>  0:41
CLOCK: [2021-07-08 Thu 10:09]--[2021-07-08 Thu 10:33] =>  0:24
CLOCK: [2021-07-07 Wed 23:25]--[2021-07-07 Wed 23:46] =>  0:21
CLOCK: [2021-05-28 Fri 14:34]--[2021-05-28 Fri 14:46] =>  0:12
:END:

#+begin_src emacs-lisp :results silent
(use-feature midnight
  :if (equal (system-name) ps/computer-hostname-pablo)
  :defer 600
  :custom
  (clean-buffer-list-kill-never-buffer-names
   '("*mu4e-headers*" " *mu4e-update*")) ; not sure if the space is part of the buffer name
  (clean-buffer-list-kill-never-regexps
   '("\\` \\*Minibuf-.*\\*\\'" "^untitled.*"))
  (clean-buffer-list-delay-general 2) ; kill buffers unused for more than three days

  :config
  (midnight-mode)
  (midnight-delay-set 'midnight-delay "4:30am")

  :hook
  (midnight-hook . ps/ledger-update-commodities)
  (midnight-hook . org-gcal-sync)
  ;; (midnight-hook . ps/org-id-update-id-locations)
  ;; (midnight-hook . org-roam-db-sync)
  (midnight-hook . ps/pass-git-sync)
  (midnight-hook . clean-buffer-list))
;; (midnight-hook . straight-prune-build)
#+end_src

*** SOMEDAY [#6] Fix coinprices
:PROPERTIES:
:ID:       8E1274F1-2A21-463C-875F-F9D8DAE587F1
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-01-01 Sun 23:07]--[2023-01-01 Sun 23:08] =>  0:01
:END:
#+begin_src emacs-lisp :results silent :tangle no
Traceback (most recent call last):
  File "/Users/pablostafforini/Dropbox/ledger/coinprices/coinprices.py", line 4, in <module>
    from dotenv import load_dotenv
ModuleNotFoundError: No module named 'dotenv'
#+end_src

I'm not tracking prices anymore so this is probably not worth it currently.
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       D894A551-F2E1-436D-8D4A-C12779C64F8D
:END:
**** DONE [#5] Figure out how to enable midnight-mode at startup without causing all the hooks to be executed
CLOSED: [2021-07-22 Thu 18:33]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-07-22 Thu 18:33
:ID:       ECA8732A-0FD3-436A-BB11-DD84C4A57116
:END:

**** DONE Check why midnight isn't working
CLOSED: [2021-07-29 Thu 22:19]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-07-29 Thu 22:19
:ID:       AB453B4E-A5CA-4930-8E67-BA0DFFBAEF06
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 22:13]--[2021-07-29 Thu 22:19] =>  0:06
:END:
**** DONE [#4] Fix midnight-mode
CLOSED: [2021-10-03 Sun 18:39]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-10-03 Sun 18:39
:ID:       8F67E628-BE03-4213-9071-5F392A40ABA7
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 18:25]--[2021-10-03 Sun 18:39] =>  0:14
CLOCK: [2021-10-02 Sat 12:52]--[2021-10-02 Sat 12:58] =>  0:06
CLOCK: [2021-09-30 Thu 20:38]--[2021-09-30 Thu 20:42] =>  0:04
CLOCK: [2021-09-30 Thu 19:14]--[2021-09-30 Thu 19:27] =>  0:13
CLOCK: [2021-09-29 Wed 09:07]--[2021-09-29 Wed 09:22] =>  0:15
:END:
Is not running.

Also, should emit a message whenever it runs successfully, so I know something has to be investigated if I don't see that message when I check Emacs first thing in the morning.

**** DONE [#7] Diagnose why ledger hooks aren't working
CLOSED: [2022-01-03 Mon 22:50]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2022-01-03 Mon 22:50
:ID:       5C35B700-6A0C-46C6-94E2-EF48D190F603
:END:
- ~commodities.py~ wasn't working because I hadn't updated the location of the database file in the file itself.
- ~coinprices.py~ wasn't working because I was using the wrong Python version.
**** DONE Fix midnight
CLOSED: [2022-02-18 Fri 17:33]
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-18 Fri 17:34
:ID:       C39C158B-FF50-4615-9CE4-0AD08D041A5D
:END:
:LOGBOOK:
CLOCK: [2022-02-18 Fri 17:28]--[2022-02-18 Fri 17:33] =>  0:05
:END:

**** DONE Fix midnight
CLOSED: [2022-05-06 Fri 08:25]
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-06 Fri 08:25
:Effort:   0:30
:ID:       9D307F4C-F5F3-4908-B4C6-D5091859D74C
:END:
:LOGBOOK:
CLOCK: [2022-04-25 Mon 10:39]--[2022-04-25 Mon 11:31] =>  0:18
CLOCK: [2022-04-23 Sat 15:48]--[2022-04-23 Sat 15:48] =>  0:00
CLOCK: [2022-04-23 Sat 15:44]--[2022-04-23 Sat 15:46] =>  0:02
CLOCK: [2022-04-12 Tue 09:34]--[2022-04-12 Tue 09:36] =>  0:02
CLOCK: [2022-04-11 Mon 17:17]--[2022-04-11 Mon 17:19] =>  0:02
CLOCK: [2022-04-06 Wed 13:07]--[2022-04-06 Wed 13:19] =>  0:12
CLOCK: [2022-04-05 Tue 16:44]--[2022-04-05 Tue 16:46] =>  0:02
CLOCK: [2022-03-31 Thu 09:34]--[2022-03-31 Thu 09:36] =>  0:02
CLOCK: [2022-03-30 Wed 13:23]--[2022-03-30 Wed 13:23] =>  0:00
CLOCK: [2022-03-26 Sat 16:54]--[2022-03-26 Sat 16:58] =>  0:04
CLOCK: [2022-03-17 Thu 10:55]--[2022-03-17 Thu 10:58] =>  0:03
CLOCK: [2022-03-15 Tue 16:54]--[2022-03-15 Tue 17:04] =>  0:10
CLOCK: [2022-03-10 Thu 16:09]--[2022-03-10 Thu 16:16] =>  0:07
CLOCK: [2022-02-25 Fri 11:51]--[2022-02-25 Fri 12:03] =>  0:12
:END:
To try:
- [X] ~:demand t~
- [X] ~:demand t~ /and/ ~(midnight-delay-set 'midnight-delay "4:00am")~ [[https://www.emacswiki.org/emacs/MidnightMode#:~:text=Midnight%20mode%20is%20a%20package,easily%20turn%20on%20Midnight%20mode.][Emacs Wiki]] says that midnight needs to be "enabled" with the function ~midnight-delay-set~. So it appears that that function is not an optional way to specify a "midnight" at times other than midnight, but is required for midnight to run at all.
[2022-03-16 Wed 10:29] Didn't work. Now trying commenting out all the lines except one hook and the two functions.
[2022-03-17 Thu 10:55] Didn't work. But maybe I forgot to launch Magit? Trying again tonight.
[2022-03-26 Sat 16:55] It worked! For the record, here's the working config

#+begin_src emacs-lisp :results silent
(use-feature midnight
  :demand t
  :config
  (midnight-mode)
  (midnight-delay-set 'midnight-delay 16200) ; this causes all the hooks to run immediately
  :hook
  (midnight-hook . (lambda () (ps/magit-midnight-update ps/dir-org)))
  )
#+end_src

Now I'll gradually uncomment remaining lines:
- [ ] ~midnight-hook~
- [ ] ~midnight-mode-hook~
- [ ] rest

[2022-04-25 Mon 11:32] ~magit-midnight-update~ need to be executed at the end, apparently, which means they should be declared at the beginning.
**** CANCELLED [#5] Replace ~midnight-mode~ with CRON
CLOSED: [2022-06-19 Sun 10:45]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2022-06-19 Sun 10:45
:ID:       BE3F308F-9108-4EA1-9C64-F624561E34B8
:END:
**** DONE Create new respositories
CLOSED: [2022-06-25 Sat 18:38] SCHEDULED: <2022-06-25 Sat>
:PROPERTIES:
:ID:       D8F7F7BF-0000-4696-BBD8-B1E9ED2C54CD
:ARCHIVE_TIME: 2022-07-08 Fri 22:38
:END:
:LOGBOOK:
CLOCK: [2022-06-25 Sat 15:14]--[2022-06-25 Sat 15:50] =>  0:36
:END:
**** CANCELLED [#4] Diagnose why midnight does not update all repositories
CLOSED: [2022-12-17 Sat 04:37]
:PROPERTIES:
:ID:       067F2688-FEF5-458A-946B-A901999F9AD2
:ARCHIVE_TIME: 2022-12-17 Sat 04:37
:END:
** keycast
:PROPERTIES:
:ID:       8D51F4B0-7443-420B-919F-7AA9B0EC0CE9
:END:
/[[https://github.com/tarsius/keycast/tree/a12ef1fb480b56c34c92f48fc7f7aa8a1d7c4c4b][keycast]] shows the current command and its key in the mode line./

#+begin_src emacs-lisp :results silent
(use-package keycast
  :config
  (with-eval-after-load 'keycast
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" mode-line-keycast))))
#+end_src

** keyfreq
:PROPERTIES:
:ID:       9EC2F318-4E9A-4E66-852E-2EB5510AC9BC
:END:
:LOGBOOK:
CLOCK: [2021-07-11 Sun 18:35]--[2021-07-11 Sun 18:38] =>  0:03
CLOCK: [2021-02-07 Sun 13:55]--[2021-02-07 Sun 13:57] =>  0:02
CLOCK: [2021-02-07 Sun 13:25]--[2021-02-07 Sun 13:37] =>  0:12
:END:

The [[https://github.com/dacap/keyfreq][keyfreq]] package track Emacs command frequency.

#+begin_src emacs-lisp :results silent :tangle no
(use-package keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src

** custom
:PROPERTIES:
:ID:       7C328D33-DCFE-4E47-8B58-7C27E7F7C1DB
:END:

#+begin_src emacs-lisp :results silent
(use-feature custom
  :custom
  (custom-safe-themes t)
  (custom-file (file-name-concat ps/dir-downloads "delete.me") "move unintended customizations to a garbage file"))
#+end_src

** productivity
:PROPERTIES:
:ID:       4C1989D5-13B4-4047-9BAC-C983A7097F45
:END:
The following functions, created by [[https://200ok.ch/posts/2022-12-06_how_much_did_you_get_done_today.html][Alain Lafon]], produce a count of the ~TODOs~ added or removed from all agenda files in the last day:

#+begin_src emacs-lisp :results silent
(defun ps/count-lines-with-expression (s exp)
  "Count the number of lines in the string S that contain the regular expression EXP."
  (let ((count 0))
    (mapc (lambda (line)
            (when (string-match-p exp line)
              (setq count (+ 1 count))))
          (split-string s "\n"))
    count))

(defun ps/productivity-of-the-day ()
  (seq-reduce
   (lambda (acc it)
     (let* ((folder (file-name-directory it))
            (file (file-name-nondirectory it))
            (base-cmd (concat "cd "
                              folder
                              "; git log --since=midnight -p "
                              file
                              "| grep TODO"))
            (changed (shell-command-to-string base-cmd))
            (added (count-lines-with-expression changed "^\\+"))
            (removed (count-lines-with-expression changed "^\\-")))
       (cons (+ (car acc) added)
             (- (cdr acc) removed))))
   org-agenda-files
   '(0 . 0)))
#+end_src
*** TODO [#4] Tweak ~ps/productivity-of-the-day~ function to compute value created
:PROPERTIES:
:ID:       1B86CB4D-D297-4C6D-99F7-49A80B7B0688
:END:
By considering both tasks completed and their associated priorities.
**** TODO [#2] Implement percentile feedback
:PROPERTIES:
:ID:       B37445B2-EED7-41E1-9413-73E4E02F394E
:END:
- Approach it as a package. Perhaps at some point you can release it publicly.
- This minor mode works unobtrusively: when it is enabled, it operates in the background, triggered by the org commands ~org-clock-in~ and ~org-clock-out~.
- The "subjective day" starts when the first task of the calendar day is clocked in.
- Upon clocking out a task, compute value generated.
    - Each task should have a value associated to its completion, and an estimated completion time ("effort estimate").
    - If the task is completed, the value generated is its completion value.
    - If the task is not completed, the value generated is the fraction of its duration by its effort estimate, multiplied by its completion value.
- Add this value to the running value since the day started.
- Calculate fraction of past days in which I had produced at least this much value at this point of the subjective day.
This may be useful: [cite:@Wellons2018OptionsForStructured]

** Archive                                                         :ARCHIVE:
:PROPERTIES:
:ID:       EDC5DFF7-CCA3-4C1B-8E08-9629392A168E
:END:
*** DONE Implement 'Org and Mac OS X' suggestions
CLOSED: [2021-03-09 Tue 14:35]
:PROPERTIES:
:ARCHIVE_TIME: 2021-03-09 Tue 22:48
:ID:       AA57F15A-8A33-4133-80D3-34A3D76C1E0A
:END:
:LOGBOOK:
CLOCK: [2021-03-09 Tue 14:20]--[2021-03-09 Tue 14:35] =>  0:15
:END:
https://orgmode.org/worg/org-mac.html
*** DONE [#5] Check org mode features you may not know about
CLOSED: [2021-03-17 Wed 15:41]
:PROPERTIES:
:ARCHIVE_TIME: 2021-03-17 Wed 22:27
:ID:       6674D53C-E3FA-4DB7-A9B5-ABDFC06E95EC
:END:
:LOGBOOK:
CLOCK: [2021-03-17 Wed 15:10]--[2021-03-17 Wed 15:17] =>  0:07
CLOCK: [2021-03-16 Tue 16:40]--[2021-03-16 Tue 17:07] =>  0:27
CLOCK: [2021-03-16 Tue 16:18]--[2021-03-16 Tue 16:33] =>  0:15
:END:
https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/

| description                       | key binding | function             |
|-----------------------------------+-------------+----------------------|
| insert all stored links as a list | C-c C-M-l   | org-insert-all-links |
| turn list into a checklist        | C-u C-c C-c | org-ctrl-c-ctrl-c    |

*** DONE Debugging ~org-cycle~ issue
CLOSED: [2021-07-12 Mon 18:29]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-12 Mon 18:29
:ID:       FFFE23B6-0A69-4A06-B214-0821354D0069
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 16:00]--[2021-07-12 Mon 18:29] =>  2:29
:END:

It turned out to be a bug upstream. See [[https://github.com/emacs-mirror/emacs/blob/master/lisp/outline.el][here]]. I wasted over two hours with this.
*** CANCELLED Check out org-super-links
CLOSED: [2021-07-16 Fri 15:45]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-16 Fri 19:01
:ID:       AE8D8A51-6B2B-4D09-8B10-951E58F6BA70
:END:
:LOGBOOK:
CLOCK: [2021-07-16 Fri 14:22]--[2021-07-16 Fri 14:33] =>  0:11
:END:
https://github.com/toshism/org-super-links
"One thing that I do wish would get m ore recognition is org-super-links, which is a whole thing that's a bit hard to explain. In one word though: back links. Combined with unique IDs (this one is buried somewhere in the manual, here's a link that kind of explains it) it means links are never broken when you refile headers. So say I'm writing about spaceships, the header will have a property "back links" which will link back to all the other entries I wrote about spaceships, and it will never break. It's not well known because every org-mode user and their mom are all about org-roam these days.. I vented about this enough, to me it's an overkill."

Not sure how it differs from org-roam.

[2021-07-16 Fri 15:45] As far as I can tell, this provides similar functionality as ~org-roam~. But it's much less developed, so better to use the latter.
*** DONE Create function to add effort estimates to all tasks missing this information
CLOSED: [2021-07-27 Tue 16:12]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-27 Tue 16:12
:ID:       16F5D3FA-B37F-439C-86FE-6EA4E464FF08
:END:
:LOGBOOK:
CLOCK: [2021-07-26 Mon 21:10]--[2021-07-26 Mon 21:15] =>  0:05
CLOCK: [2021-06-17 Thu 21:52]--[2021-06-17 Thu 22:05] =>  0:13
CLOCK: [2021-06-17 Thu 20:47]--[2021-06-17 Thu 20:56] =>  0:09
:END:
No need to create function. I simply set the highest option to '99:00' and ~org-agenda-sort-noeffort-is-high~ to ~t~.
*** DONE [#5] Advice org-ctrl-c-ctrl-c so that it triggers org2blog-complete when point is on relevant tag
CLOSED: [2021-10-01 Fri 21:48]
:PROPERTIES:
:Effort:   0:40
:ARCHIVE_TIME: 2021-10-01 Fri 21:48
:ID:       F6B35E6D-470E-4923-B509-1D7A441CED46
:END:
Seems to be working without the need to advice anything.

* personal projects
:PROPERTIES:
:ID:       9D7B5C99-2380-4159-A8C8-4021CC0482DE
:END:
** Tlon
:PROPERTIES:
:ID:       9BE75448-80A0-4CD7-9341-97F723C44A4A
:END:

#+begin_src emacs-lisp :results silent
(defun ps/tlon-meeting-with-fede ()
  (interactive)
  (ps/tlon--meeting-with
   "CE0C7638-97F1-4509-8212-5B77F4A4AF29"
   "56CBB3F8-8E75-4298-99B3-899365EB75E0"
   "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1"))

(defun ps/tlon-meeting-with-leo ()
  (interactive)
  (ps/tlon--meeting-with
   "76A01EAA-74BC-41FC-9050-E6BDC0D56029"
   "51610BEB-7583-4C84-8FC2-A3B28CA79FAB"
   "8B2F18B4-A309-4F29-A5E6-CD40E010970D"))

(defun ps/tlon--meeting-with (tareas-id meetings-id pending-id)
  ;; "[person] > Meetings > Pending for next meeting" org heading in `work-dashboard.org'
  (ps/org-id-goto pending-id)
  (let ((contents (ps/org-get-heading-contents)))
    (ps/org-clear-heading-contents)
    ;; "[person] > Meetings" org heading in `work-dashboard.org'
    (ps/org-id-goto meetings-id)
    (org-narrow-to-subtree)
    (goto-char (point-max))
    (org-insert-heading)
    (ps/org-time-stamp-inactive-current-time)
    (unless (string= contents "")
      (insert (concat "\nTo discuss:\n" contents "\n"))))
  (forward-line)
  (ps/org-narrow-to-entry-and-children)
  (ps/window-split-if-unsplit)
  (ps/switch-to-last-window)
  ;; "Tareas" org heading in `tareas.org'
  (ps/org-id-goto tareas-id)
  (ps/org-narrow-to-entry-and-children)
  (ps/switch-to-last-window))
#+end_src

** Keyboard Maestro
:PROPERTIES:
:ID:       1776C0C3-CEEC-4DED-B609-4DF0DF83B0C2
:END:
These bindings allow Keyboard Maestro to trigger various Emacs processes.

#+begin_src emacs-lisp :results silent
(general-define-key
 "C-H-M-S-c" 'ps/org-copy-heading-contents
 "C-H-M-S-g" 'orgmdb-fill-movie-properties
 "C-H-M-S-n" 'ps/create-new-wiki-entry
 ;; "C-H-M-S-i" 'ps/org-switch-to-id ; delete
 "C-H-M-S-w" 'ps/org-wiki-add-datestamp-to-heading-from-clipboard)
#+end_src

* Local variables
:PROPERTIES:
:ID:       9F0FFFD3-3A33-4EB5-BD56-CD40AE6A23C5
:END:
# Local Variables:
# eval: (ps/buffer-local-set-key (kbd "H-;") 'hydra-org-config/body)
# eval: (ps/buffer-local-set-key (kbd "H-i") 'use-package-report)
# End:
