#+title: Fede's config

* tangle flags
:PROPERTIES:
:ID:       4241A319-CECB-41DC-87DA-C0FD778CD187
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-tangle-flags)
(
 (:aide . nil)
 (:anki-editor . nil)
 (:auto-commit-mode . nil)
 (:bbdb . nil)
 (:copilot . nil)
 (:corfu-doc-terminal . nil)
 (:corfu-terminal . nil)
 (:display-wttr . t)
 (:erc . nil)
 (:espotify . nil)
 (:flycheck . t)
 (:flymake . t)
 (:frame . t)
 (:forge . t)
 (:git-auto-commit-mode . nil)
 (:hammy . nil)
 (:jinx . t)
 (:keytar . nil)
 (:midnight . nil)
 (:mixed-pitch . nil)
 (:mu4e . nil)
 (:mullvad . t)
 (:ns-win . nil)
 (:org-gcal . nil)
 (:org-roam . t)
 (:org2blog . nil)
 (:orgmdb . nil)
 (:outline . nil)
 (:pdf-tools . t)
 (:puni . nil)
 (:remember . nil)
 (:server . nil)
 (:slack . nil)
 (:spelling . nil)
 (:tlon . t)
 (:tlon-init . t)
 (:theme-loaddefs . nil)
 (:twittering-mode . nil)
 (:vulpea . nil)
 (:window . t)
 (:yasnippet . t)
 )
#+end_src

* paths
:PROPERTIES:
:ID:       79C65A15-D040-48C0-98FC-8DC092804E76
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-paths-override)
(
 (paths-init-dir . (getenv "HOME"))
 (paths-dir-bibliography . (file-name-concat (getenv "HOME") ".local/bibliography-tlon/"))
 (paths-dir-google-drive . (file-name-concat (getenv "HOME") "google_drive/My Drive/"))
 (paths-dir-music . (file-name-concat paths-dir-google-drive "Music/"))
 (paths-dir-movies . (file-name-concat paths-dir-google-drive "Movies/"))
 (paths-dir-dotfiles . (file-name-concat (getenv "HOME") "source/dotfiles/"))
 (paths-dir-external-repos . (file-name-concat (getenv "HOME") "source/"))
 (paths-dir-tlon-repos . paths-dir-external-repos)
 (paths-dir-org . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-dir-org-roam . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-dir-tlon-biblioteca-altruismo-eficaz . (file-name-concat paths-dir-tlon-repos "biblioteca-altruismo-eficaz/"))
 (paths-dir-org-roam . "")
 (paths-dir-org-images . (file-name-concat paths-dir-google-drive "org-images/"))
 (paths-dir-websites . "")
 (paths-dir-notes . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-file-notes . (file-name-concat paths-dir-org "notes.org"))
 (paths-file-feeds-pablo . "")
 (paths-file-anki . "")
 (paths-file-karabiner . "")
 (paths-file-karabiner-edn . "")
 (paths-file-wiki-notes . "")
 (paths-file-wiki-published . "")
 (paths-file-wiki-help . "")
 (paths-file-library . "")
 (paths-file-quotes . "")
 (paths-file-films . "")
 (paths-file-org2blog . "")
 (paths-file-straight-profile . "")
 (paths-file-orb-noter-template . "")
 (paths-file-orb-capture-template . "")
 (paths-file-ffrp . "")
 (paths-file-rcg . "")
 (paths-file-ean . "")
 (paths-file-cookies . "")
 (paths-file-work . "")
 (paths-file-tlon-tareas-fede . (file-name-concat paths-dir-dropbox-tlon-fede "tareas.org"))
 (paths-tlon-babel-todos-jobs-id . "")
 (paths-tlon-babel-todos-generic-id . "F7EEAF78-A82B-4F8D-88FE-E6FBF9034BBA")
 )
#+end_src

* code overrides
:PROPERTIES:
:ID:       71ED9AC5-9D0A-40E0-BA58-7AA7FA36793A
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-code-override)
((:zotra-startup . ((ignore)))
 (:window-border . ((ignore)))
 (:window-split . ((ignore)))
 ;; (:modus-themes-load . ((modus-themes-load-theme 'modus-vivendi)))
 (:citar-keybindings . ((ignore)))
 ;; (:frame-extras-maximize-frame . ((ignore)))
 ;; (:org-fold . ((ignore)))
 )
#+end_src

Doom modeline
#+begin_src emacs-lisp :tangle no
 (:doom-modeline
  . ((setq doom-modeline-mu4e nil) ; avoid distractions
     (setq doom-modeline-time nil) ; we display time (and date) in the tab-bar
     (setq doom-modeline-buffer-encoding t) ; FEDE ==> I want to show encoding
     (setq doom-modeline-irc t)
     (setq doom-modeline-irc-buffers t)
     (setq doom-modeline--flycheck-icon nil)
     (setq doom-modeline-github t)
     (setq doom-modeline-github-interval (* 10 60))
     (setq doom-modeline-buffer-file-name-style 'truncate-nil) ; FEDE ==> Full filenames, please!
     (setq doom-modeline-enable-word-count t)

     (doom-modeline-def-modeline 'main
       '(bar workspace-name window-number modals matches follow remote-host buffer-position word-count parrot selection-info buffer-info)
       '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker time))

     (add-hook 'magit-status-mode-hook 'doom-modeline--github-fetch-notifications)

     (dolist (cons  '((display-time-mode-hook . doom-modeline-override-display-time-modeline)
                      (display-battery-mode-hook . doom-modeline-override-battery-modeline)
                      (doom-modeline-mode-hook . doom-modeline-override-display-time-modeline)
                      (doom-modeline-mode-hook . doom-modeline-override-battery-modeline)))
       (remove-hook (car cons) (cdr cons)))))
#+end_src

* fede's early-init
:PROPERTIES:
:ID:       0C6ACEE9-21F3-49C2-A091-F02DDFCF6B3C
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-early-init)
;; recommended for straight/elpaca (github.com/radian-software/straight.el#getting-started)
(setq package-enable-at-startup nil)

;; github.com/emacscollective/no-littering#native-compilation-cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (file-name-concat (getenv "HOME")
    ".config/emacs-profiles/var/eln-cache/")))
#+end_src

* late init
:PROPERTIES:
:ID:       3FB5128E-FBBA-4C4B-BFC9-8186878DDB4E
:END:


** startup
:PROPERTIES:
:ID:       5E67511F-C40D-4BFC-84AA-353DA60585DE
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq user-full-name "Federico Stafforini")
(setq user-mail-address "fstafforini@gmail.com")
#+end_src
** window
:PROPERTIES:
:ID:       8EF5C4DE-C641-4770-83F1-638DD324238B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'window
  (setq split-width-threshold 160)
  (message "`window' late-init config loaded".))
#+end_src

** nginx-mode
:PROPERTIES:
:ID:       20402D51-C4D0-4CB4-8523-D57EA6BEED0C
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(use-package nginx-mode :demand t)
#+end_src

** ns-win
:PROPERTIES:
:ID:       72CD77BE-CB5B-4052-AA5A-40CE41DCA867
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'ns-win
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-right-option-modifier 'alt)
    (setq mac-command-modifier 'hyper)
    (setq mac-option-modifier 'meta)
    (setq mac-right-command-modifier 'super)
    (setq mac-function-modifier '(:button 2)))
  (message "`ns-win' late-init config loaded."))
#+end_src

** fancy-battery-mode
:PROPERTIES:
:ID:       D59EED4B-A6AF-45D0-92F2-26F15E3F6B21
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'fancy-battery-mode
  (fancy-battery-mode -1)
  (message "`fancy-battery-mode' late-init config loaded."))
#+end_src

#+RESULTS:

** frame-extras
:PROPERTIES:
:ID:       F24B3E2D-ACB2-49EB-AE1C-BDCE5C8A1239
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'frame-extras
  (remove-function after-focus-change-function #'frame-extras-maximize-frame)
  (message "`frame-extras' late-init config loaded."))
#+end_src

** simple
:PROPERTIES:
:ID:       D5957624-5E90-404B-B86D-72F1D79A1401
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'simple
  (setq global-mark-ring-max 100)
  (setq mark-ring-max 100)
  (setq shift-select-mode t)
  (message "`simple' late-init config loaded."))
#+end_src

** files
:PROPERTIES:
:ID:       93EA6DFF-EE82-4CE4-8E1A-B4054E71D473
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'files
  (setq make-backup-files nil)
  (message "`files' late-init config loaded."))
#+end_src

** cua-base
:PROPERTIES:
:ID:       ECA4B30E-DE5C-4ACC-87AA-30975B8398EC
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(cua-selection-mode 1)
;; disable C-return or it will interfere with org
(define-key cua-global-keymap (kbd "<C-return>") nil)
#+end_src

** dired
:PROPERTIES:
:ID:       303394D7-3C61-4D9D-8765-028BD4254DA9
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'dired
  (general-define-key
   :keymaps 'dired-mode-map
   "n" 'find-file)

  (transient-define-prefix dired-fedes-dispatch ()
    "Fede's version of Pablo's dispatcher."
    ["Dired folders"
     [("d" "dotfiles" (lambda () (interactive) (dired paths-dir-dotfiles)))
      ("e" "emacs: current profile dir" (lambda () (interactive) (dired paths-dir-emacs)))
      ("p" "emacs: profiles" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") ".config/emacs-profiles"))))
      ("s" "source" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") "source"))))
      ("v" "movies" (lambda () (interactive) (dired paths-dir-movies)))
      ("w" "downloads" (lambda () (interactive) (dired paths-dir-downloads)))
      ("x" "Dropbox" (lambda () (interactive) (dired paths-dir-dropbox)))
      ("z" "Google Drive" (lambda () (interactive) (dired paths-dir-google-drive)))]

     ["Special"
      ("." "File at point" (lambda () (interactive) (dired-at-point)))
      ("/" "Root" (lambda () (interactive) (dired "/")))
      ("SPC" "user" (lambda () (interactive) (dired "~/")))
      (";" "Current buffer" dired-jump)
      ("H-;" "Current buffer in other window" dired-jump-other-window)]

     ["System config"
      ("n" "Local ningx config" (lambda () (interactive) (dired "/opt/homebrew/etc/nginx/sites-available/")))
      ("w" "nginx home" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") "www"))))]

     ["DigitalOcean"
      ("N" "/config/nginx/sites-available" (lambda () (interactive) (dired "/ssh:root@tlon.team:/etc/nginx/sites-available/")))
      ("H" "/home/fede" (lambda () (interactive) (dired "/ssh:fede@tlon.team:/home/fede")))]

     ["Tlön: Google Drive"
      ("t H-b" "Google Drive: Babel" (lambda () (interactive) (dired paths-dir-google-drive-tlon-babel)))
      ("t H-n" "Google Drive: EAN" (lambda () (interactive) (dired paths-dir-google-drive-tlon-EAN)))
      ("t H-m" "Google Drive: FM" (lambda () (interactive) (dired paths-dir-google-drive-tlon-FM)))
      ("t H-g" "Google Drive: GPE" (lambda () (interactive) (dired paths-dir-google-drive-tlon-GPE)))
      ("t H-h" "Google Drive: HEAR" (lambda () (interactive) (dired paths-dir-google-drive-tlon-HEAR)))
      ("t H-d" "Google Drive: LBDLH" (lambda () (interactive) (dired paths-dir-google-drive-tlon-LBDLH)))
      ("t H-p" "Google Drive: LP" (lambda () (interactive) (dired paths-dir-google-drive-tlon-LP)))
      ("t H-r" "Google Drive: RAE" (lambda () (interactive) (dired paths-dir-google-drive-tlon-RAE)))
      ("t H-t" "Google Drive: tlon" (lambda () (interactive) (dired paths-dir-google-drive-tlon)))
      ("t H-c" "Google Drive: core" (lambda () (interactive) (dired paths-dir-google-drive-tlon-core)))
      ("t H-l" "Google Drive: leo" (lambda () (interactive) (dired paths-dir-google-drive-tlon-leo)))
      ("t H-f" "Google Drive: fede" (lambda () (interactive) (dired paths-dir-google-drive-tlon-fede)))
      ]
     ["Tlön: Dropbox"
      ("t b" "Dropbox: Babel" (lambda () (interactive) (dired paths-dir-dropbox-tlon-babel)))
      ("t n" "Dropbox: EAN" (lambda () (interactive) (dired paths-dir-dropbox-tlon-EAN)))
      ("t m" "Dropbox: FM" (lambda () (interactive) (dired paths-dir-dropbox-tlon-FM)))
      ("t g" "Dropbox: GPE" (lambda () (interactive) (dired paths-dir-dropbox-tlon-GPE)))
      ("t h" "Dropbox: HEAR" (lambda () (interactive) (dired paths-dir-dropbox-tlon-HEAR)))
      ("t d" "Dropbox: LBDLH" (lambda () (interactive) (dired paths-dir-dropbox-tlon-LBDLH)))
      ("t p" "Dropbox: LP" (lambda () (interactive) (dired paths-dir-dropbox-tlon-LP)))
      ("t r" "Dropbox: RAE" (lambda () (interactive) (dired paths-dir-dropbox-tlon-RAE)))
      ("t t" "Dropbox: tlon" (lambda () (interactive) (dired paths-dir-dropbox-tlon)))
      ("t c" "Dropbox: core" (lambda () (interactive) (dired paths-dir-dropbox-tlon-core)))
      ("t f" "Dropbox: fede" (lambda () (interactive) (dired paths-dir-dropbox-tlon-fede)))
      ("t l" "Dropbox: leo" (lambda () (interactive) (dired paths-dir-dropbox-tlon-leo)))
      ]])
  (message "`dired' late-init config loaded."))
#+end_src

** forge
:PROPERTIES:
:ID:       4540F42A-BE3F-4D98-A0E7-3E65DA0C2CA2
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(eval-after-load 'forge
  (setq forge-owned-accounts `(("fstafforini"))))
#+end_src

** key bindings
:PROPERTIES:
:ID:       B641FFEE-128A-4961-8A18-C8097C046A0C
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(general-define-key
 "<kp-delete>" 'delete-char
 "<home>" 'beginning-of-line
 "<end>" 'end-of-line
 "H-q" 'delete-window
 "H-w" 'files-extras-kill-this-buffer
 "H-k" 'org-extras-work-dispatch
 "H-o" 'find-file
 "H-d" 'dired-fedes-dispatch
 "H-/" 'comment-line
 "H-\\" 'window-extras-split-if-unsplit
 "H-;" 'org-extras-work-dispatch
 "H-g" nil
 "H-h" 'other-window
 "H-H" 'window-extras-buffer-move-dwim
 "s-i" 'org-clock-in
 "s-o" 'org-clock-out
 "A-s-j" 'org-clock-goto
 "A-s-x" 'org-clock-cancel
 "<M-right>" 'forward-word
 "<M-left>" 'backward-word
 "<M-H-SPC>" 'execute-extended-command
 "H-:" 'eval-expression
 "<M-backspace>" 'backward-kill-word
 "<M-delete>" 'kill-word
 "C--" 'back-button-global-backward
 "C-_" 'back-button-global-forward
 "H-i" nil
 "<C-delete>" nil
 "<C-left>" nil
 "<C-S-left>" nil
 "<C-right>" nil
 "<C-S-right>" nil
 "<C-up>" nil
 "<C-S-up>" nil
 "<C-down>" nil
 "<C-S-down>" nil)

(global-unset-key (kbd "C--"))
(general-unbind "C--")
(keymap-unset minibuffer-mode-map "s-i")

;; (general-define-key
;; :keymap 'yas-minor-mode-map
;; "TAB" nil
;; "s-TAB" 'yas-expand)

#+end_src

** org
:PROPERTIES:
:ID:       A20984A0-7402-4775-92E9-39929324DCD2
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org
  (setq org-structure-template-alist
        '(("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("l" . "export latex")
          ("q" . "quote"))
        ("s" . "src")
        ("se" . "src emacs-lisp")
        ("sc" . "src css")
        ("sj" . "src javascript")
        ("sm" . "src markdown")
        ("sp" . "src python")
        ("sq" . "src sql")
        ("ss" . "src shell")
        ("st" . "src typescript")
        ("sx" . "src jsx")
        ("v" . "verse")
        ("w" . "WP")))

(setq-default org-support-shift-select 'always
              org-replace-disputed-keys t)

(general-define-key
 :keymap 'org-mode-map
 "s-i" 'org-clock-in
 "s-o" 'org-clock-out
 "M-<right>" nil
 "M-<left>" nil
 "M-<up>" nil
 "M-<down>" nil
 "M-S-<right>" nil
 "M-S-<left>" nil
 "M-S-<up>" nil
 "M-S-<down>" nil
 "H-<right>" 'org-metaright
 "H-<left>" 'org-metaleft
 "H-<up>" 'org-metaup
 "H-<down>" 'org-metadown
 "M-<right>" 'forward-word
 "M-<left>" 'backward-word)

;; remove unwanted keybindings from Pablo
(keymap-unset org-mode-map "s-i"
	      (message "`org' late-init config loaded."))
#+end_src

** org-capture
:PROPERTIES:
:ID:       F29D9BDF-C2BB-4301-9E40-70018729229A
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-capture
  (dolist (template `(("b" "Tlön: BAE" entry
                       (id "33BFC41C-324A-47E1-A313-8233A36B2346")
                       "** TODO %?\n" :prepend t)
                      ("r" "Tlön: RAE" entry
                       (id "87906C3B-B52B-4816-BCCA-BE3EA4B88968")
                       "** TODO %?\n" :prepend t)
                      ("f" "Tlön: FM" entry
                       (id "809F6C1D-DDF7-4C6B-BB84-FFC082BE8601")
                       "** TODO %?\n" :prepend t)
                      ("d" "Tlön: LBDLH" entry
                       (id "0079A5CD-A07B-4919-A76C-4F6E6841512D")
                       "** TODO %?\n" :prepend t)
                      ("u" "Tlön: EAN" entry
                       (id "B168E4F1-D2E1-4D59-B88C-4CF924E82624")
                       "** TODO %?\n" :prepend t)
                      ("i" "Tlön: EAI" entry
                       (id "715D2C4E-4BEE-4EC4-B432-720DA35C21A9")
                       "** TODO %?\n" :prepend t)
                      ("h" "Tlön: HEAR" entry
                       (id "B157C986-D75D-4244-A522-43DCBA2F0C8E")
                       "** TODO %?\n" :prepend t)
                      ("g" "Tlön: GPE" entry
                       (id "97F7D54F-4F4A-45A4-9616-A0B548A049BE")
                       "** TODO %?\n" :prepend t)
                      ("c" "Tlön: Core" entry
                       (id "7EDB8441-7EFA-43CC-B3DE-5682D55BCEE1")
                       "** TODO %?\n" :prepend t)))
    (push template org-capture-templates))
  (message "`org-capture' late-init config loaded."))
#+end_src

** org-agenda
:PROPERTIES:
:ID:       84547352-3F99-4A1E-88CE-945FCD28C803
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-agenda
  (setq org-agenda-files
        `(,paths-file-tlon-tareas-fede
          "/Users/fede/Library/CloudStorage/Dropbox/org/todo.org"))

  (setq org-agenda-files-excluded nil)

  (setq org-agenda-custom-commands
        '(("j" "Agenda + TODOs"
           (
            (tags-todo "+fede"
                       (;; (tags "fede")
                        (org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Mensajes para Fede")))
            (tags-todo "+pablo"
                       (;; (tags "fede")
                        (org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Mensajes para Pablo")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Library/CloudStorage/Dropbox/tlon/fede/tareas.org\""
                       ((org-agenda-max-entries 10)
                        (org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Trabajo")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Library/CloudStorage/Dropbox/org/todo.org\""
                       ((org-agenda-max-entries 10)
                        (org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Personal")))
            (tags-todo "+SCHEDULED<=\"<today>\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Scheduled for today")))
            (tags-todo "+DEADLINE<=\"<today>\" +DEADLINE>=\"<today -2m>\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Upcoming deadlines")))
            (agenda "" ((org-agenda-span 14)))
            (todo "WAITING"
                  ((org-agenda-overriding-header "WAITING")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Dropbox/tlon/fede/tareas.org\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Trabajo - Todos")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Dropbox/org/todo.org\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Personal - Todos")))))))
  (message "`org-agenda' late-init config loaded."))
#+end_src

** org-extras
:PROPERTIES:
:ID:       E0CFFE8C-FDC1-4D7D-B484-A8E7BC87CB98
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-extras
  (setq org-extras-bbdb-anniversaries-heading nil)
  (simple-extras-init-disable-funs 90 '(org-extras-fold-show-all-headings
                                        org-extras-hide-properties
                                        org-extras-hide-logbook
                                        org-extras-show-properties
                                        org-extras-show-logbook
                                        org-extras-toggle-properties
                                        org-extras-toggle-logbook))
  (cancel-timer org-extras-agenda-switch-to-agenda-current-day-timer)
  (message "`org-extras' late-init config loaded."))
#+end_src
** org-roam
:PROPERTIES:
:ID:       C16FEC1D-DA7E-44D1-92BE-D13D28B6C089
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-roam
  (setq org-roam-directory paths-dir-org-roam)
  (message "`org-roam' late-init config loaded."))
#+end_src

** org-tidy-mode
:PROPERTIES:
:ID:       8F1B85FF-6AC1-4169-8F24-F80B61A298AC
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-tidy-mode
  (remove-hook 'org-mode-hook #'org-tidy-mode)
  (org-tidy-mode -1)
  (message "`org-tidy-mode' late-init config loaded."))
#+end_src

** outline
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'outline
(keymap-unset emacs-lisp-mode-map "M-<right>")
  (message "`outline' late-init config loaded."))
#+end_src

** consult
:PROPERTIES:
:ID:       306F1791-DDC6-4F33-A5CD-EC1F1DA5E778
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'consult
  (setq consult-preview-key nil)
  (message "`consult' late-init config loaded."))
#+end_src

** tlon-babel
:PROPERTIES:
:ID:       27C0F2A5-14EC-4456-90B0-3E16AD8EF35B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'tlon-babel
  (setq tlon-babel-todos-jobs-id "CE0C7638-97F1-4509-8212-5B77F4A4AF29")
  (setq tlon-babel-todos-generic-id "CE0C7638-97F1-4509-8212-5B77F4A4AF29")
  (tlon-babel-init)
  (message "`tlon-babel' late-init config loaded."))
#+end_src

** jinx
:PROPERTIES:
:ID:       BD4F6E88-01BE-4625-AF75-7DB04DE8F8D3
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'jinx
  (dolist (hook '(text-mode-hook prog-mode-hook conf-mode-hook))
    (remove-hook hook #'jinx-mode))
  (message "`jinx' late-init config loaded."))
#+end_src

** tab-bar-extras
:PROPERTIES:
:ID:       6AC832A6-0F9D-450E-BFA2-0271AF4F2FB6
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'tab-bar-extras
  (setq tab-bar-extras-reset-wttr nil)

  ;; (remove-hook 'modus-themes-after-load-theme-hook #'tab-bar-extras-reset)

  ;; Rewrite Pablo's tab-bar-extras-global-mode-string -- remove fancy battery
  (setq tab-bar-extras-global-mode-string
        `(,tab-bar-extras-prefix-element
          ;; ,tab-bar-extras-date-element
          ;; ,tab-bar-extras-separator-element
          ,tab-bar-extras-chemacs-element
          ;; ,tab-bar-extras-separator-element
          ;; ,tab-bar-extras-battery-element
          ,tab-bar-extras-telega-element
          ,tab-bar-extras-github-element
          ;; ,tab-bar-extras-pomodoro-element
          ;; ,tab-bar-extras-suffix-element
          ))

  (setq global-mode-string tab-bar-extras-global-mode-string)
  (setq tab-bar-extras-reset-wttr nil)
  (message "`tab-bar-extras' late-init config loaded."))
#+end_src

** hl-sentence
:PROPERTIES:
:ID:       48D3B0B5-5626-4B9C-803E-5D156E3A1036
:END:
Disable hl-sentence because I do not like it...
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'hl-sentence
  (remove-hook 'markdown-mode-hook #'hl-sentence-mode)
  (message "`hl-sentence' late-init config loaded."))
#+end_src

** telega
:PROPERTIES:
:ID:       3CD1A0F0-BF55-47FE-9E81-9FEAC9A9AE6B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
;; (setq telega-server-libs-prefix "/opt/homebrew/Cellar/tdlib/HEAD-ec788c7/")
  #+end_src

** yasnippet
:PROPERTIES:
:ID:       FEF9B315-DE3F-4F4D-AB5F-DC71BEE19B54
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'yasnippet
  (keymap-unset yas-minor-mode-map "TAB")
  (keymap-set yas-minor-mode-map "s-TAB" 'yas-expand)
  (message "`yasnippet' late-init config loaded."))
#+end_src

** faces-extras
:PROPERTIES:
:ID:       555F14B7-A0D0-4B7A-980F-E157C1B87EFB
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'faces-extras
  (setq faces-extras-fixed-pitch-font "Iosevka Nerd Font")
  (setq faces-extras-fixed-pitch-size 150)
  (setq faces-extras-variable-pitch-size 160)

  (remove-hook 'org-mode-hook #'faces-extras-load-custom-faces)

  (defun faces-extras-load-custom-faces ()
    "My custom faces, to be used in conjunction with theme."
    (interactive)
    (set-face-attribute 'default nil :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
    (set-face-attribute 'fixed-pitch nil :family faces-extras-fixed-pitch-font :height 1.0)
    (set-face-attribute 'variable-pitch nil :family faces-extras-variable-pitch-font :height faces-extras-variable-pitch-size)
    (set-face-attribute 'org-drawer nil :foreground "LightSkyBlue" :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-property-value nil :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-todo nil :family faces-extras-fixed-pitch-font :height 1.0)
    (set-face-attribute 'org-archived nil :family faces-extras-fixed-pitch-font :height 0.9)
    (set-face-attribute 'org-document-title nil :family faces-extras-fixed-pitch-font :height 1.0)
    (set-face-attribute 'org-special-keyword nil :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-tag nil :family faces-extras-fixed-pitch-font :height 0.9)
    (set-face-attribute 'org-code nil :family faces-extras-fixed-pitch-font :height 1.0)
    (set-face-attribute 'org-level-1 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-2 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-3 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-4 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-5 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-6 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-7 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-level-8 nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'org-date nil :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-modern-date-active nil :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-modern-date-inactive nil :family faces-extras-fixed-pitch-font :height 0.8)
    (set-face-attribute 'org-modern-tag nil :family faces-extras-fixed-pitch-font :height 0.9)
    (set-face-attribute 'org-quote nil :family faces-extras-variable-pitch-font :height  faces-extras-variable-pitch-size)
    (set-face-attribute 'corfu-default nil :family faces-extras-fixed-pitch-font :height 1)
    (set-face-attribute 'gh-notify-notification-repo-face nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal)
    (set-face-attribute 'gh-notify-notification-unread-face nil :family faces-extras-fixed-pitch-font :height 1.0 :weight 'normal :foreground "#00a6c9")
    (set-face-attribute 'flycheck-error nil :underline '(:color "#ff0000" :style wave))
    (set-face-attribute 'flycheck-warning nil :underline '(:color "#0000ff" :style wave))
    (set-face-attribute 'jinx-misspelled nil :underline '(:color "#008000" :style wave))
    (set-face-attribute 'window-divider nil :foreground (face-attribute 'mode-line-inactive :background))
    (set-face-attribute 'tab-bar nil
                        ;; slightly increase the width of the tab-bar
                        :box `(:line-width 4 :color ,(face-attribute 'mode-line :background) :style nil)
                        :background (face-background 'mode-line)))

  (add-hook 'org-mode-hook #'faces-extras-load-custom-faces)
  (faces-extras-load-custom-faces)
  (message "`faces-extras' late-init config loaded."))
#+end_src

** tareas
:PROPERTIES:
:ID:       B891DE59-5914-4452-B1F0-F856C1DA8F6E
:END:

  #+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(find-file paths-file-tlon-tareas-fede)
#+end_src

** After init callback
:PROPERTIES:
:ID:       712F1BEF-5B9F-42E3-96B7-4482FC9FADFF
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
;; Code run on a long timer: aimed at running after all of Pablo's deferred calls
(run-at-time 60 nil (lambda
                      ()
                      (message "Running Fede's last hook")
                      (setq display-time-format "%a %e %b %R")
                      (tab-bar-extras-reset)
                      (cancel-function-timers 'org-extras-agenda-switch-to-agenda-current-day)
                      (cancel-function-timers 'citar-extras-update-old-bibliography)
                      ))
#+end_src

** post-init-hook
:PROPERTIES:
:ID:       A2F2A628-A3F3-44FF-B02E-AF755A2D58E7
:END:

This should be at the very end of the ~late-init~ file.

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(add-hook 'tlon-init-post-init-hook (lambda ()  (message "Running Fede's last hook")))
(run-hooks 'tlon-init-post-init-hook)
#+end_src

* local variables
:PROPERTIES:
:ID:       D706DE65-4291-4950-876D-1E38F5B330F6
:END:
# Local Variables:
# eval: (files-extras-buffer-local-set-key (kbd "s-y") 'org-decrypt-entry)
# org-crypt-key: "tlon.shared@gmail.com"
# End:
