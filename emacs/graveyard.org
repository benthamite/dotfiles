#+filetags: :project:
* Pablo's Emacs package graveyard
:PROPERTIES:
:ID:       AACAE0F4-0B25-475B-831B-3F1E91E6349D
:END:
:LOGBOOK:
CLOCK: [2021-06-27 Sun 15:59]--[2021-06-27 Sun 16:25] =>  0:26
:END:

This is a place where I move Emacs packages I no longer use.

** unpackaged
:PROPERTIES:
:ID:       484FDD89-4C12-4624-82CB-FC36795C0A8F
:END:
:LOGBOOK:
:END:

/[[https://github.com/alphapapa/unpackaged.el][unpackaged]] is a collection of useful Emacs Lisp code that isn't substantial enough to be packaged./

[2024-11-24 Sun] Disabling since the package was throwing lots of errors due to the use of =:general= and other =use-package= keywords requiring external dependencies.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package unpackaged
  :ensure (:host github
           :repo "alphapapa/unpackaged.el")
  :commands (unpackaged/org-forward-to-entry-content))
#+end_src

** visual-regexp
:PROPERTIES:
:ID:       0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942
:END:

/[[https://github.com/benma/visual-regexp.el][visual-regexp]] provides visual feedback to regexp search and replace./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package visual-regexp
  :disabled
  :hook
  (isearch-mode-hook . (lambda () (require 'visual-regexp))))
#+end_src

** dall-e-shell
:PROPERTIES:
:ID:       A7D68397-66E3-4085-AF8C-7A17935654E7
:END:

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package dall-e-shell
  :after chatgpt-shell)
#+end_src

** chatgpt-shell
:PROPERTIES:
:ID:       6EC52CD8-EBCB-4A26-B1BA-001096C16030
:END:


/[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]] comint-shell based interaction with ChatGPT./

I use =gptel= for text-based AI interaction, but for other modalities (such as images) I use =chatgpt-shell=.

[2024-10-13 Sun]=gptel= now supports multi-modal models, so I’m moving this to the graveyard.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package chatgpt-shell
  :ensure (:files ("*.el"))
  :after gptel-extras
  :defer t
  :custom
  (chatgpt-shell-root-path no-littering-var-directory)
  (chatgpt-shell-openai-key gptel-api-key)
  (dall-e-shell-openai-key gptel-api-key)
  (shell-maker-transcript-default-path gptel-extras-dir))
#+end_src

** general
:PROPERTIES:
:ID:       70C622E0-FAC7-4AB1-841F-36437858218C
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 18:46]--[2021-07-25 Sun 18:56] =>  0:10
:END:

/[[https://github.com/noctuid/general.el][general]] supports more convenient key definitions./

I only use this package to define key bindings for multiple keymaps at once. Currently, ~use-package~ does not support such concise definitions, though there is an [[https://github.com/jwiegley/use-package/pull/1051][open pull request]] to add this feature.

[2024-09-30 Mon 21:02] No longer using.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package general
  :ensure (:wait t)
  :demand t
  :custom
  (general-describe-priority-keymaps '(local global org-mode-map))
  (general-describe-keybinding-sort-function #'general-sort-by-car)

  :config
  (general-override-mode)
  (general-auto-unbind-keys))
#+end_src

** async-mail-sending
:PROPERTIES:
:ID:       BEF562DB-61D5-4AB5-8B8A-44DD866FE285
:END:
:LOGBOOK:
CLOCK: [2023-12-01 Fri 21:37]--[2023-12-01 Fri 21:50] =>  0:13
:END:

/[[https://github.com/lordpretzel/async-email-sending][async-email-sending]] enables asynchronous sending of emails in Emacs using the new built-in sqlite support in Emacs 29./

<2023-12-01 Fri> Failed to send an email when I tested it. So not using for the time being.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package async-email-sending
  :disabled
  :ensure (async-email-sending
           :host github
           :repo "lordpretzel/async-email-sending")
  ;; needs to be set via `customize'
  :custom (async-email-sending-use-async-send-mail t))
#+end_src

*** TODO [#5] Open issue
:PROPERTIES:
:ID:       C1790096-C90A-4C28-9257-34223AC4341C
:END:

** fancy-battery
:PROPERTIES:
:ID:       DDFE34BA-7C23-459E-B4E2-2957D2535700
:END:

/[[https://github.com/emacsorphanage/fancy-battery][fancy-battery]] displays battery information in the modeline./

[2024-09-29 Sun] Superseded by =battery=.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package fancy-battery
  :custom
  (fancy-battery-show-percentage t)

  :config
  (fancy-battery-mode))
#+end_src

** password-store
:PROPERTIES:
:ID:       80D05BB8-D440-417A-8D94-61F4EB79EA00
:END:

/[[https://github.com/zx2c4/password-store][password-store]] provides functions for working with pass, the standard Unix password manager./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package password-store
  :ensure (:host github
            :repo "zx2c4/password-store"
            :files ("contrib/emacs/*.el"))
  :after password-store-otp
  :disabled)
#+end_src

** unfill
:PROPERTIES:
:ID:       DF5137EA-79B3-4A5F-8D6C-7222CD8D4F4A
:END:

 /[[https://github.com/purcell/unfill][unfill]] provides functions to do the reverse of =fill-paragraph= and =fill-region=./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package unfill
  :defer 10)
#+end_src

** persid
:PROPERTIES:
:ID:       57366A1C-A55A-47F8-8B62-E3412D674879
:END:

/[[https://github.com/rougier/persid][persid]] is a persistent identifier library for Emacs./

[2024-09-24 Tue] I think this adds nothing given that I’m already using zotra.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package persid
  :ensure (persid
           :host github
           :repo "rougier/persid")
  :disabled)
#+end_src

** biblio
:PROPERTIES:
:ID:       63D8DE23-E17B-43B9-B623-95F404D134A0
:END:
/[[https://github.com/cpitclaudel/biblio.el][biblio]] supports browsing and importing bibliographic references from various databases./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package biblio)
#+end_src

** ledger-prices
:PROPERTIES:
:ID:       1A1A2A24-6FE4-462D-A6A3-E5E22521558D
:END:
:LOGBOOK:
CLOCK: [2023-10-24 Tue 18:58]--[2023-10-24 Tue 20:33] =>  1:35
:END:

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package ledger-prices
  :ensure (ledger-prices
           :host github
           :repo "benthamite/ledger-prices")
  :defer 5
  :after ledger-mode
  :config
  (setq ledger-prices-api-key-finnhub (auth-source-pass-get 'secret "chrome/api.finnhub.io"))
  (setq ledger-prices-api-key-exchangerates (auth-source-pass-get 'secret "chrome/api.exchangeratesapi.io"))
  (setq ledger-prices-pricedb-file paths-file-ledger-db))
#+end_src

** emacs-eat
:PROPERTIES:
:ID:       94971F2F-FF78-4088-BBDB-A95ADEDECE9B
:END:

/[[https://codeberg.org/akib/emacs-eat][emacs-eat]] is a terminal emulator./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package eat
  :ensure (:host codeberg
                 :repo "akib/emacs-eat"
                 :files ("*.el" ("term" "term/*.el") "*.texi"
                         "*.ti" ("terminfo/e" "terminfo/e/*")
                         ("terminfo/65" "terminfo/65/*")
                         ("integration" "integration/*")
                         (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** visual-regexp-steroids
:PROPERTIES:
:ID:       375D8037-D6A0-4519-A3B2-32E88810DA6D
:END:

/[[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] extends visual-regexp to support additional regexp engines./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package visual-regexp-steroids
  ;; :after visual-regexp
  :custom
  (vr/engine 'python)
  (vr/command-python
        (concat "python3 "
                (file-name-concat user-emacs-directory "elpacs/builds/visual-regexp-steroids/regexp.py")))

  :bind
  (:map isearch-mode-map
   ("C-H-s" . vr/isearch-forward)
   ("C-H-r" . vr/isearch-backward)))
#+end_src

** transient-showcase
:PROPERTIES:
:ID:       72949AB3-4ACF-4E55-AACB-8AAA0D7058B6
:END:
/[[https://github.com/positron-solutions/transient-showcase][transient-showcase]] provides code examples for interactive explanations of ~transient~./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package transient-showcase
  :disabled t
  :ensure (:host github
                 :repo "positron-solutions/transient-showcase")
  :after transient)
#+end_src

** hl-sentence
:PROPERTIES:
:ID:       1E12C3EF-BBB1-45CD-845D-3E1AEEB4EE30
:END:

/[[https://github.com/milkypostman/hl-sentence][hl-sentence]] highlights sentences rather than lines./

I use =hl-line= by default, but replace it with =hl-sentence= in modes (specifically, =org-mode= and =markdown-mode=) where the sentence is the more natural syntactic unit. I use the same face set by ~lin~ so that there are no stylistic changes between highlighted sentences in these modes and highlighted lines in all the other modes. See the above sections and the =modus-themes-extras-set-faces= function from ~modus-themes-extras~.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package hl-sentence
  :ensure (:host github
		 :repo "milkypostman/hl-sentence")
  :defer 7)
#+end_src

** dired-open-with
:PROPERTIES:
:ID:       554C33D0-2B10-4B14-8717-91176B144313
:END:



/[[https://github.com/FrostyX/dired-open-with][dired-open-with]] is an 'open with' dialog for opening files in external applications from Dired./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package dired-open-with
  :disabled
  :general
  (dired-mode-map
   "E" 'dired-open-with))
#+end_src

** pomodoro-centile
:PROPERTIES:
:ID:       89ED4046-C75A-441C-BEF8-DC4322F0167F
:END:

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package pomodoro-centile
  :ensure (:host github
                 :repo "benthamite/pomodoro-centile"
                 :depth nil)
  :after org-pomodoro
  :disabled
  :demand t
  :config
  (setq pomodoro-centile-history-file (file-name-concat paths-dir-dropbox "misc/pomodoro-centile-history"))
  (setq pomodoro-centile-day-offset 4))
#+end_src

** internet-archive
:PROPERTIES:
:ID:       89CD61F5-D883-4A4F-9210-EA238235AD34
:END:

/[[https://github.com/benthamite/internet-archive][internet-archive]] supports the downloading of books from the Internet Archive./

[2024-09-14 Sat] Superseded by the the =annas-archive= functions in =eww-extras=.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package internet-archive
  :ensure (internet-archive
           :host github
           :repo "benthamite/internet-archive"
           :depth nil)
  :defer 10
  :config
  (setq internet-archive-ade-close-when-done t)
  (add-hook 'internet-archive-protocol-hook #'frame-extras-restore-focus))
#+end_src

** consult-gh
:PROPERTIES:
:ID:       117CEC74-9092-4EE7-BFD3-F34D71F1313C
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 09:34]--[2023-07-05 Wed 09:48] =>  0:14
:END:

/[[https://github.com/armindarvish/consult-gh][consult-gh]] provides an interface to interact with GitHub repositories./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package consult-gh
  :ensure (consult-gh
           :host github
           :repo "armindarvish/consult-gh")
  :after consult embark transient vertico forge
  :demand t
  :config
  (require 'consult-gh-embark)
  (require 'consult-gh-forge)
  (require 'consult-gh-transient)
  (setq consult-gh-default-clone-directory "~/source")
  (setq consult-gh-repo-maxnum 30)
  (setq consult-gh-issues-maxnum 100)
  (setq consult-gh-show-preview nil)
  (setq consult-gh-preview-key "M-o")
  (setq consult-gh-preview-buffer-mode 'org-mode)
  (setq consult-gh-repo-action #'consult-gh--repo-browse-files-action)
  (setq consult-gh-issue-action #'consult-gh-forge--issue-view-action)
  (setq consult-gh-pr-action #'consult-gh-forge--pr-view-action)
  (setq consult-gh-code-action #'consult-gh--code-view-action)
  (setq consult-gh-file-action #'consult-gh--files-view-action)
  (setq consult-gh-issues-state-to-show "all")

  (dolist (org '("tlon-team" "benthamite"))
    (push org consult-gh-default-orgs-list))

  (dolist (var '(consult-gh--known-orgs-list
                 consult-gh--known-repos-list))
    (push var savehist-additional-variables))

  :general
  ("H-G" 'consult-gh))
#+end_src

** consult-mu
:PROPERTIES:
:ID:       834A9797-AD26-44B5-BE4E-1CE52184E265
:END:

/[[https://github.com/armindarvish/consult-mu][consult-mu]] provides a dynamically updated search interface to mu4e./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package consult-mu
  :elpaca (consult-mu :type git
                      :host github
                      :repo "armindarvish/consult-mu"
                      :branch "develop"
                      :files (:defaults "extras/*")
                      :includes (consult-mu-compose
                                 consult-mu-contacts-embark
                                 consult-mu-contacts))
  :after consult mu4e
  :demand t
  :config
  (setq consult-git-log-grep-open-function #'magit-show-commit)

  :general
  ((magit-status-mode-map magit-log-mode-map)
   "s-l" 'consult-git-log-grep))
#+end_src

** org-block-cafp
:PROPERTIES:
:ID:       5D18297C-CB85-47D0-9637-D38F3BD01332
:END:

/[[https://github.com/xenodium/org-block-capf][org-block-cafp]] adds support for org block completion at point./

[2024-08-28 Wed] Replaced with [[https://github.com/isamert/corg.el][corg]].
#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package org-block-capf
  :elpaca (org-block-capf :host github :repo "xenodium/org-block-capf")
  :after org
  :demand t
  :config
  (add-hook 'org-mode-hook #'org-block-capf-add-to-completion-at-point-functions))
#+end_src

** hexrgb
:PROPERTIES:
:ID:       A9DD66E0-49A5-4A8C-8F45-016DECFF0BF0
:END:

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package hexrgb
  :elpaca (hexrgb
           :host github
           :repo "emacsmirror/hexrgb")
  :demand t
  )
#+end_src

** org-auctex
:PROPERTIES:
:ID:       F2B7F20E-244D-4582-80E9-DA54964E2B73
:END:


/[[https://github.com/karthink/org-auctex][org-auctex]] provides better latex previews for =org-mode==./

#+begin_src emacs-lisp
(use-package org-auctex
  :elpaca (org-auctex
           :host github
           :repo "karthink/org-auctex"
           :build (:not elpaca--check-version)) ; thinks current version < 13.1
  :after org auctex
  :demand t)
#+end_src

** auctex
:PROPERTIES:
:ID:       2D596638-0091-48AD-B171-8109E6CE945C
:END:

/[[https://elpa.gnu.org/packages/auctex.html][auctex]] is an integrated environment for TeX./

#+begin_src emacs-lisp
;; adapted from github.com/radian-software/straight.el/issues/836#issuecomment-927098560
(use-package auctex
  :elpaca (:type git
                 :host nil
                 :repo "https://git.savannah.gnu.org/git/auctex.git"
                 :pre-build (("./autogen.sh")
                             ("./configure" "--without-texmf-dir" "--with-lispdir=.")
                             ("make")))
  :mode
  ("\\.tex\\'" . latex-mode) ; Must first activate the inferior Emacs latex mode
  :hook
  (LaTeX-mode . TeX-PDF-mode)
  (LaTeX-mode . flycheck-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-cdlatex)
  :init
  (load "auctex.el" nil t t)
  (load "preview-latex.el" nil t t)
  (require 'reftex)

  (setq-default TeX-master 'dwim)

  (setq TeX-data-directory (expand-file-name "auctex" elpaca-repos-directory)
        TeX-lisp-directory TeX-data-directory

                                        ; Or custom-set-variables as follows.
                                        ; M-x describe-variable RET preview-TeX-style-dir RET
                                        ;`(preview-TeX-style-dir ,(concat ".:" (straight--repos-dir "auctex") "latex:"))
        preview-TeX-style-dir (concat ".:" (expand-file-name "auctex" elpaca-repos-directory) "latex:")

        TeX-parse-self t ; parse on load
        TeX-auto-save t  ; parse on save
        TeX-auto-untabify t ; Automatically remove all tabs from a file before saving it.

                                        ;Type of TeX engine to use.
                                        ;It should be one of the following symbols:
                                        ;* ‘default’
                                        ;* ‘luatex’
                                        ;* ‘omega’
                                        ;* ‘xetex’
        TeX-engine 'xetex
        TeX-auto-local ".auctex-auto" ; Directory containing automatically generated TeX information.
        TeX-style-local ".auctex-style" ; Directory containing hand generated TeX information.

        ;; ##### Enable synctex correlation.
        ;; ##### From Okular just press `Shift + Left click' to go to the good line.
        ;; ##### From Evince just press `Ctrl + Left click' to go to the good line.
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t

        ;; automatically insert braces after sub/superscript in math mode
        TeX-electric-sub-and-superscript t
        ;; If non-nil, then query the user before saving each file with TeX-save-document.
        TeX-save-query nil

        TeX-view-program-selection '((output-pdf "PDF Tools"))
        ))
#+end_src

** remember
:PROPERTIES:
:ID:       438AD8A8-0F4F-4A1D-9BC9-110906944509
:END:


/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/textmodes/remember.el][remember]] is a mode for quickly jotting down things to remember./

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-feature remember
  :demand t
  :init
  (setq remember-data-file "~/.config/emacs-profiles/var/remember/notes")

  :config
  (setq remember-notes-auto-save-visited-file-name t)
  (setq remember-notes-buffer-name "*scratch*")
  (setq initial-buffer-choice
        (lambda () (kill-buffer remember-notes-buffer-name)
          (remember-notes))))
#+end_src

** mixed-pitch
:PROPERTIES:
:ID:       A8E80A11-25A4-4034-8A86-F7F6ADFD46C7
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 19:52]--[2022-05-04 Wed 19:54] =>  0:02
CLOCK: [2021-11-18 Thu 21:52]--[2021-11-18 Thu 22:20] =>  0:28
:END:

/[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows mixing fixed-pitch and variable-pitch fonts./

[2024-04-23 Tue] Moving to graveyard because it is not allowing me to control certain faces when active, such as =org-code= and =org-verbatim=. The user option ~modus-themes-mixed-fonts~ seems enough to get a similar experience without the drawbacks.

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package mixed-pitch
  ;; :demand t
  :disabled
  :config
  (setq mixed-pitch-set-height t)

  (dolist (hook '(elfeed-show-mode-hook
                  telega-webpage-mode-hook
                  eww-mode-hook
                  mu4e-view-mode-hook
                  outline-mode-hook))
    (add-hook hook #'mixed-pitch-mode)))
#+end_src

** tlon-core
:PROPERTIES:
:ID:       9BE75448-80A0-4CD7-9341-97F723C44A4A
:END:

#+begin_src emacs-lisp :tangle (tlon-init-tangle-conditionally)
(use-package tlon-core
  :elpaca (tlon-core
           :host github
           :repo "tlon-team/tlon-core"
           :depth nil) ; clone entire repo, not just last commit
  :defer 4
  :config
  (setq tlon-core-repo-dirs (expand-file-name "~/Library/CloudStorage/Dropbox/repos/"))

  :general
  (markdown-mode-map
   "s-y" 'simple-extras-slugify-clipboard))
#+end_src

** org-roam-browser-extension
:PROPERTIES:
:ID:       5461B907-53F6-4D99-B70C-45E9C3902EB4
:END:

[[https://github.com/madnificent/org-roam-browser-extension][org-roam-browser-extension]] indicates via a browser icon whether you have ~org-roam~ notes on the web page you are visiting.

Abandoned.
** org-mime
:PROPERTIES:
:ID:       EB437B48-CEB2-4727-8910-627061F4701F
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 17:42]--[2021-05-04 Tue 17:54] =>  0:12
CLOCK: [2021-03-29 Mon 17:15]--[2021-03-29 Mon 18:09] =>  0:54
:END:

/[[https://github.com/org-mime/org-mime][org-mime]] lets you send HTML email using Org-mode HTML export./

[2024-02-13 Tue] Temporarily disabling to test whether I need this.

[2024-03-10 Sun] Not needed. Moving to graveyard.

#+begin_src emacs-lisp :tangle no
(use-package org-mime
  :after org
  :general
  (org-mode-map
   "s-m" 'org-mime-htmlize
   "s-A-m" 'org-mime-org-subtree-htmlize))
#+end_src

** mpv
:PROPERTIES:
:ID:       8D75E528-AA79-4512-B4A9-6EB7A56F9026
:END:

/[[https://github.com/kljohann/mpv.el][mpv]] provides various functions to control [[https://en.wikipedia.org/wiki/Mpv_(media_player)][mpv]]./

[2024-02-28 Wed] Replaced with ~empv~.

#+begin_src emacs-lisp :results silent
(use-package mpv)
#+end_src

** whisper
:PROPERTIES:
:ID:       19FF2502-D4A0-41CC-8F72-E1CF1D960304
:END:

/[[https://github.com/natrys/whisper.el][whisper]] is a speech-to-Text interface for Emacs using OpenAI's whisper model and whisper.cpp as inference engine./

#+begin_src emacs-lisp
(use-package whisper
  :elpaca (whisper.el
           :host github
           :repo "natrys/whisper.el"
           :protocol ssh)
  :config
  (setq whisper-install-directory no-littering-var-directory)
  (setq whisper--ffmpeg-input-device ":0"))
#+end_src

** org-ai
:PROPERTIES:
:ID:       DE0368E4-FFE7-42D8-8557-2D5DD4DA5BF5
:END:

/[[https://github.com/rksm/org-ai][org-ai]] turns Emacs into your personal AI assistant using ChatGPT, DALL-E, and Whisper./

[2024-02-26 Mon] Superseded by ~gptel~.

#+begin_src emacs-lisp
(use-package org-ai
  :elpaca  (org-ai :type git :host github :repo "rksm/org-ai"
                   :local-repo "org-ai"
                   :files ("*.el" "README.md" "snippets"))
  :after org yasnippet
  :commands org-ai-mode
  :config
  (setq org-ai-openai-api-token (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-email-shared)))
  (setq org-ai-default-chat-model "gpt-4")
  (setq org-ai-default-chat-system-prompt "You are a helpful and competent assistant. Please omit any disclaimers")
  (setq org-ai-talk-say-words-per-minute 210)
  (setq org-ai-image-directory paths-dir-org-images)
  (org-ai-install-yasnippets)
  (require 'org-ai-talk))
#+end_src

** company
:PROPERTIES:
:ID:       D8BC79D0-C883-45A9-A5B2-98E88C59EE6B
:END:

I use ~completion-at-point~ for completion, not company. However, I still rely on company for a few completion backends.

[2024-02-18 Sun] I think the above is no longer the case, so moving to graveyard.
#+begin_src emacs-lisp :results silent
(use-package company)
#+end_src

** kind-icon
:PROPERTIES:
:ID:       DE439647-A62B-4C32-A0BB-AA7D4BB3D9DD
:END:

/[[https://github.com/jdtsmith/kind-icon][kind-icon]] provides SVG icons for in-region completion./

[2024-02-18 Sun] Replaced with =nerd-icons-corfu=.

#+begin_src emacs-lisp :results silent
(use-package kind-icon
  :after corfu
  :demand t

  :config
  (setq kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly

  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** all-the-icons-dired
:PROPERTIES:
:ID:       53778128-E0F3-4199-9D7D-2118904F39A9
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 10:49]--[2022-07-17 Sun 11:13] =>  0:24
:END:

/[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[id:46EB8CD9-E498-4F80-AC02-A116CFA58799][all-the-icons]]./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-dired
  :demand t
  :after all-the-icons dired
  :config
  (setq all-the-icons-dired-monochrome nil)

  (add-hook 'dired-mode-hook #'dired-extras-all-the-icons-activate))
#+end_src

** all-the-icons-completion
:PROPERTIES:
:ID:       A0DAA757-1CC9-460B-9F46-78A5145E7E61
:END:

/[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] adds icons to completion candidates./

[2024-02-18 Sun] Replaced with ~nerd-icons~.

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-completion
  :demand t
  :after all-the-icons marginalia vertico
  :config
  (all-the-icons-completion-mode)

  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** all-the-icons
:PROPERTIES:
:ID:       46EB8CD9-E498-4F80-AC02-A116CFA58799
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:13]--[2022-07-17 Sun 11:21] =>  0:08
CLOCK: [2021-05-20 Thu 18:21]--[2021-05-20 Thu 18:39] =>  0:18
CLOCK: [2021-05-06 Thu 06:01]--[2021-05-06 Thu 06:22] =>  0:21
:END:

/[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] collects various icon fonts and propertizes them./

[2024-02-18 Sun] Replaced with ~nerd-icons~.

#+begin_src emacs-lisp :results silent
(use-package all-the-icons
  :demand t)
#+end_src

** gh-notify-extras
:PROPERTIES:
:ID:       C0B10485-4BA9-4370-8D60-2B96A138FC3F
:END:


/[[file:extras/gh-notify-extras.el][gh-notify-extras]] collects my extensions for ~gh-notify~./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-personal-package gh-notify-extras
  :after gh-notify
  :disabled
  :general
  (gh-notify-mode-map
   "RET" 'gh-notify-extras-visit-notification
   "G" 'gh-notify-extras-full-refresh
   "x" 'gh-notify-extras-browse-externally
   "." 'gh-notify-extras-visit-next-notification))
#+end_src

** gh-notify
:PROPERTIES:
:ID:       02EE3FAE-133C-479E-B7C7-9B2BB2160DCA
:END:

/[[https://github.com/anticomputer/gh-notify][gh-notify]] is a veneer for the Magit/Forge GitHub porcelain./

[2024-02-09 Fri] Not working anymore, after Forge introduced various breaking changes.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-package gh-notify
  :elpaca (gh-notify
           :host github
           :repo "benthamite/gh-notify"
           :depth nil)
  :after forge
  :demand t
  :config
  ;; unset bindings for all the keys that were bound to self-insert-command in
  ;; `gh-notify-mode-map'
  (let ((char-table (cl-second gh-notify-mode-map)))
    (map-char-table (lambda (key def)
                      (when (eq def 'gh-notify--self-insert-command)
                        (set-char-table-range char-table key nil)))
                    char-table))
  :general
  (gh-notify-mode-map
   "g" 'gh-notify-forge-refresh
   "Q" 'files-extras-kill-this-buffer))
#+end_src

** multiple-cursors
:PROPERTIES:
:ID:       E3F6EB63-D6C1-474C-9129-B6424852EEC8
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:17] =>  0:00
:END:

/[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] supports multiple cursors in Emacs./

[2024-02-02 Fri] Instead of multiple cursors I basically always use kmacros.
#+begin_src emacs-lisp :results silent
(use-package multiple-cursors
  :general
  ("M-m" 'mc/mark-pop))
#+end_src

** use-package-ensure-system-package
:PROPERTIES:
:ID:       5C17424A-4950-4745-B7FD-F0CACEB48AFB
:END:


This is actually part of ~use-package~, so not needed.

#+begin_src emacs-lisp :results silent
(use-package use-package-ensure-system-package
  :demand t)
#+end_src

** dired-async
:PROPERTIES:
:ID:       241CB93C-0637-4208-B8CF-3DD74FF6F106
:END:

[2024-01-24 Wed] No longer using.

:PROPERTIES:
:ID:       966B615F-69EF-428D-82E5-6E68B64D0FDD
:END:

#+begin_src emacs-lisp
(use-feature dired-async
  :after async dired
  :demand t
  :config
  (dired-async-mode))
#+end_src

** guess-language
:PROPERTIES:
:ID:       F3163168-2247-4205-B08B-E8816DB02CE7
:END:
:LOGBOOK:
CLOCK: [2023-12-03 Sun 09:05]--[2023-12-03 Sun 09:25] =>  0:20
:END:

#+begin_src emacs-lisp
(use-package guess-language
  :demand t
  :config
  (setq guess-language-languages '(en es))
  (setq guess-language-min-paragraph-length 35)
  (defun my-custom-function (lang beginning end)
    (jinx-languages lang)
    (setq-local flycheck-languagetool-language lang)
    (message "Detected language: %s" lang))

  (add-hook 'guess-language-after-detection-functions #'my-custom-function))
#+end_src

** espotify
:PROPERTIES:
:ID:       5879A8B7-0889-4FCD-A16A-77D0BCEE4804
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 14:50]--[2022-06-22 Wed 15:10] =>  0:20
:END:

/[[https://codeberg.org/jao/espotify][espotify]] supports interacting with spotify API and players inside emacs./

[2022-06-22 Wed 15:07] I can't make this work. Maybe related to the [[id:86EE7A94-E470-45DB-B0A5-0AE717A15353][dbus problem]]?

[2023-12-01 Fri] I couldn’t make it work and it provides very limited functionality (which I can replicate with the media keys).

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :espotify)
(use-package espotify
  :after auth-source-pass
  :demand t
  :config
  (setq espotify-service-name "spotify")
  (setq espotify-use-system-bus-p t)
  (setq espotify-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (setq espotify-client-secret (auth-source-pass-get 'secret "auth-sources/spotify")))
#+end_src

** mu4e-contrib
:PROPERTIES:
:ID:       7D84D1E5-BFA6-4990-AD14-21C51BFD356E
:END:

[2023-11-26 Sun] Do I need this? Disabling to test.

[2023-12-01 Fri] Not using it.

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :mu4e)
(use-feature mu4e-contrib
  :disabled
  :after mu4e
  :demand t)
#+end_src

** hippie-expand
:PROPERTIES:
:ID:       06396799-A9FB-4417-AAE3-3654BC901B93
:END:

[2023-11-26 Sun] Not using it.

#+begin_src emacs-lisp :results silent
(use-feature hippie-exp
  :config
  ;; stackoverflow.com/a/8723712/4479455
  (advice-add 'hippie-expand
              :around (lambda ()
                        "Try to do case-sensitive matching (not effective with all functions)."
                        (let ((case-fold-search nil))
                          (apply orig-fun args))))
  (ad-activate 'hippie-expand)

  :general
  ("M-<tab>" 'hippie-expand))
#+end_src

** mu4e-alert
:PROPERTIES:
:ID:       32C6498F-B3C5-4D50-8ACC-8DD83FF48448
:END:

/[[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] supports desktop notifications and modeline display for mu4e./

[2023-11-25 Sat] I do not regard email messages as requiring immediate attention, so I now prefer not to be notified of unread messages.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mu4e)
(use-package mu4e-alert
  :after mu4e
  :demand t
  :config
  ;; Notify about unread emails in inbox only
  (setq mu4e-alert-interesting-mail-query "flag:unread AND maildir:/inbox")

  (mu4e-alert-enable-mode-line-display -1))
#+end_src

** osm
:PROPERTIES:
:ID:       1DCEE01C-1951-45F0-B9B8-60977E2D4314
:END:
:LOGBOOK:
CLOCK: [2022-05-16 Mon 19:11]--[2022-05-16 Mon 19:19] =>  0:08
:END:

/[[https://github.com/minad/osm][osm]] is an OpenStreetMap viewer for Emacs./

[2023-11-21 Tue] Not using.

#+begin_src emacs-lisp :results silent
(use-package osm
  :elpaca (osm
             :host github
             :repo "minad/osm")
  :init
  ;; Load Org link support
  (with-eval-after-load 'org
    (require 'osm-ol)))
#+end_src

** mentor
:PROPERTIES:
:ID:       E3F6210D-F6CD-4397-9004-3D31B5623D18
:END:
:LOGBOOK:
CLOCK: [2023-03-07 Tue 00:53]--[2023-03-07 Tue 01:30] =>  0:37
:END:

/[[https://github.com/skangas/mentor][mentor]] is an Emacs frontend for the rTorrent bittorrent client./

[2022-10-07 Fri 21:48] I wasn't able to make it work.

#+begin_src emacs-lisp :results silent
(use-package mentor
  :config
  (setq mentor-rtorrent-download-directory paths-dir-downloads)
  (setq mentor-rtorrent-external-rpc (expand-file-name "~/.rtorrent-rpc.socket"))

  :general
  (mentor-mode-map
   "SPC" 'mentor-download-load-magnet-link-or-url
   "<return>" 'mentor-download-load-torrent))
#+end_src

** keytar
:PROPERTIES:
:ID:       773AD672-8356-4097-990D-96BD160DAD40
:END:

/[[https://github.com/emacs-grammarly/keytar][keytar]] is an Emacs Lisp interface for [[https://www.npmjs.com/package/keytar][keytar]]./

This package is required by lsp-grammarly.

[2023-11-16 Thu] No longer using ~grammarly~.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :keytar)
(use-package keytar
** lsp-ui
:PROPERTIES:
:ID:       FE34C313-80BF-4095-B2F0-6228041DFCFF
:END:

/[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] provides UI integrations for lsp-mode./

[2023-11-16 Thu] No longer using ~lsp~.

#+begin_src emacs-lisp :results silent
(use-package lsp-ui
  :after lsp-mode
  :demand t
  :config
  (setq lsp-ui-doc-show-with-cursor t)) ; move the cursor over a symbol to show its documentation
#+end_src
  :defer t)
#+end_src

** google-this
:PROPERTIES:
:ID:       877DFFD8-8121-4CEC-B8EC-175EB8526641
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 14:43]--[2022-07-21 Thu 14:56] =>  0:13
CLOCK: [2022-07-21 Thu 14:30]--[2022-07-21 Thu 14:30] =>  0:00
CLOCK: [2021-05-22 Sat 21:42]--[2021-05-22 Sat 21:50] =>  0:08
:END:

/[[https://github.com/Malabarba/emacs-google-this][google-this]] is a set of emacs functions and bindings to google under point./

[2023-05-09 Tue 10:07] Replacing with ~engine-mode~

#+begin_src emacs-lisp :results silent :tangle no
(use-package google-this
  :config/el-patch
  ;; Tweak original function to offer contents of kill ring if there
  ;; is no symbol or word at point.
  (defun google-this-pick-term (prefix)
    "Decide what \"this\" and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                       (thing-at-point 'word)
                       (el-patch-swap
                         (buffer-substring-no-properties (line-beginning-position)
                                                         (line-end-position))
                         (current-kill 0)))))
           (term (read-string (concat "Googling [" term "]: ") nil nil term)))
      term))

  :general
  ("H-g" 'google-this-search)
  :bind-keymap
  ("H-G" . google-this-mode-submap))
#+end_src

** smudge
:PROPERTIES:
:ID:       B5010216-E345-4F6D-9033-DE354D7E707A
:END:
:LOGBOOK:
CLOCK: [2021-05-21 Fri 10:45]--[2021-05-21 Fri 10:59] =>  0:14
CLOCK: [2021-05-20 Thu 19:49]--[2021-05-20 Thu 20:00] =>  0:11
CLOCK: [2021-05-20 Thu 19:11]--[2021-05-20 Thu 19:13] =>  0:02
CLOCK: [2021-05-19 Wed 21:40]--[2021-05-19 Wed 21:52] =>  0:12
CLOCK: [2021-05-19 Wed 20:34]--[2021-05-19 Wed 21:13] =>  0:39
CLOCK: [2021-05-19 Wed 16:37]--[2021-05-19 Wed 16:59] =>  0:22
CLOCK: [2021-05-19 Wed 11:26]--[2021-05-19 Wed 12:23] =>  0:57
:END:

/[[https://github.com/danielfm/smudge][smudge]] lets the user control Spotify from Emacs./

[2023-11-15 Wed] Not using it.

#+begin_src emacs-lisp :results silent
(use-package smudge
  :disabled
  :after auth-source-pass
  ;; :defer 600
  :config
  (setq smudge-oauth2-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (setq smudge-oauth2-client-secret (auth-source-pass-get 'secret "auth-sources/spotify"))
  (setq smudge-player-status-format "[%a - %t ◷ %l]")
  (setq smudge-api-search-limit 100) ; values >100 result in a 400 error
  (setq smudge-status-location nil)

  ;; should renew credentials and store with `pass'
  (defun ps/smudge ()
    "Turn on global smudge remote mode and go to my playlists."
    (interactive)
    (global-smudge-remote-mode 1)
    (smudge-my-playlists))

  (defun ps/smudge-track-load-more ()
    "Move point to end of playlist buffer and load more tracks."
    (interactive)
    (end-of-buffer)
    (smudge-track-load-more))

  :general
  ("A-y" 'ps/smudge)
  (smudge-track-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "t" 'smudge-track-search
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more)
  (smudge-playlist-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more))
#+end_src


** md4rd
:PROPERTIES:
:ID:       CEDBA9CB-F7FB-4E7F-8CAB-C96812BE1517
:END:

/[[https://github.com/ahungry/md4rd][md4rd]] is an Emacs mode for browsing Reddit./

[2023-04-04 Tue 18:57]
#+begin_src emacs-lisp :results silent :tangle no
(use-package md4rd
  :config
  (setq md4rd-subs-active '(emacs))
  (setq md4rd--oauth-access-token
        (auth-source-pass-get 'secret "auth-sources/reddit"))
  (setq md4rd--oauth-refresh-token
        (auth-source-pass-get "refresh" "auth-sources/reddit"))

  (add-hook 'md4rd-mode-hook #'md4rd-indent-all-the-lines))
#+end_src


** twittering-mode
:PROPERTIES:
:ID:       125BC626-0D89-468E-9026-AF3CF58939F2
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 14:40]--[2022-07-19 Tue 15:56] =>  1:16
CLOCK: [2022-07-18 Mon 19:53]--[2022-07-18 Mon 20:04] =>  0:11
CLOCK: [2022-07-12 Tue 21:47]--[2022-07-12 Tue 22:16] =>  0:29
CLOCK: [2022-07-12 Tue 20:45]--[2022-07-12 Tue 21:30] =>  0:45
CLOCK: [2021-05-20 Thu 19:22]--[2021-05-20 Thu 19:36] =>  0:14
CLOCK: [2021-05-16 Sun 20:34]--[2021-05-16 Sun 21:22] =>  0:48
CLOCK: [2021-04-03 Sat 17:59]--[2021-04-03 Sat 18:15] =>  0:16
:END:

/[[https://github.com/hayamiz/twittering-mode][twittering-mode]] is a Twitter client for Emacs./

[2023-11-11 Sat 06:27] Stopped working.

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :ps/twittering-mode)
(use-package twittering-mode
  :defer t
  :config
  (defalias 'epa--decode-coding-string 'decode-coding-string) ; github.com/sfromm/emacs.d#twitter
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)
  (setq twittering-use-icon-storage t)
  (setq twittering-icon-storage-limit 10000)
  (setq twittering-timeline-header "Refresh buffer contents\n")
  (setq twittering-timeline-footer "")
  (setq twittering-status-format "%FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}
%FOLD[   ]{%FILL{%t}%QT{
%FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[ ]{%FILL{%t}}
}}}
%FACE[twitter-divider]{                                                                                                }
")

  (defun ps/twittering-account-select (arg)
    "docstring"
    (interactive
     (list
      (completing-read "Select account: " '("EA News" "Future Matters" "anonymous"))))
    (cond ((string= arg "EA News") (ps/twittering-ea-news))
          ((string= arg "Future Matters") (ps/twittering-future-matters))
          ((string= arg "anonymous") (ps/twittering-anonymous))))

  (defface twitter-divider
    '((((background dark))  (:underline (:color "#141519")))
      (((background light)) (:underline (:color "#d3d3d3"))))
    "The vertical divider between tweets."
    :group 'twittering-mode)

  ;; github.com/hayamiz/twittering-mode/issues/83#issuecomment-343649348
  (defun ps/twittering-reload ()
    "Reload `twittering-mode'."
    (require 'twittering-mode)
    ;; Clear existing twit buffers
    (mapcar
     (lambda (buffer)
       (twittering-deactivate-buffer buffer)
       (kill-buffer buffer))
     (twittering-get-buffer-list))
    (twittering-unregister-killed-buffer)
    ;; Clear variables
    (setq twittering-private-info-file-loaded nil)
    (setq twittering-account-authorization nil)
    (setq twittering-oauth-access-token-alist nil)
    (setq twittering-buffer-info-list nil)
    (setq twittering-timeline-data-table (make-hash-table :test 'equal))
    (twit))

    ;; TODO: create macro for this
  (defun ps/twittering-ea-news ()
    "Start a `twittering-mode' session with the `ea_dot_news' account."
    (interactive)
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-ea-news.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/ea_dot_news")
    (ps/twittering-reload))

  (defun ps/twittering-future-matters ()
    "Start a `twittering-mode' session with the `futurematters_' account."
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-future-matters.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/futurematters_")
    (ps/twittering-reload))

(defun ps/twittering-anonymous ()
    "Start a `twittering-mode' session with anonymous account."
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-anonymous.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/anonymous")
    (ps/twittering-reload))

  (defun ps/twittering-mode-get-uri ()
    "Get URI of tweet at point."
    (or (get-text-property (point) 'uri)
        (if (get-text-property (point) 'field)
            (let* ((id (get-text-property (point) 'id))
                   (status (twittering-find-status id)))
              (twittering-get-status-url-from-alist status))
          nil)))

  (defun ps/twittering-mode-open-externally ()
    "Open URI of tweet at point with external web browser."
    (interactive)
    (browse-url (ps/twittering-mode-get-uri)))

  (defun ps/twittering-mode-open-internally ()
    "Open URI of tweet at point with internal web browser."
    (interactive)
    (eaf-open (eaf-wrap-url (ps/twittering-mode-get-uri)) "browser"))

  (defun ps/twittering-mode-search-people-externally (&optional query)
    "Search for Twitter users in an external browser."
    (interactive)
    (let ((query (or query
                     (read-string "Search for person: "))))
      (browse-url (concat
                   "https://twitter.com/search?q="
                   query
                   "&src=typed_query&f=user"))))

  (defun ps/twittering-mode-org-capture-future-matters-research ()
    "Launch 'Future Matters: Research' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "tlmr"))

  (defun ps/twittering-mode-org-capture-future-matters-news ()
    "Launch 'Future Matters: News' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "tlmn"))

  ;; what follows copied from github.com/sfromm/emacs.d#twitter
  (defun ps/twittering-toggle-icons ()
    "Toggle use of icons in twittering mode."
    (interactive)
    (if (eq twittering-icon-mode t)
        (twittering-icon-mode nil)
      (twittering-icon-mode t)))

  (defun ps/twittering-add-image-format (format-table-func status-sym prefix-sym)
    "Adds the I format code to display images in the twittering-mode format table."
    (let ((format-table (funcall format-table-func status-sym prefix-sym)))
      (push `("I" .
              (let* ((entities (cdr (assq 'entity ,status-sym)))
                     text)
                (mapc (lambda (url-info)
                        (setq text (or (cdr (assq 'media-url url-info)) "")))
                      (cdr (assq 'media entities)))
                (if (string-equal "" text)
                    text
                  (let ((twittering-convert-fix-size 720))
                    (twittering-make-icon-string nil nil text))))) format-table)))

  (advice-add #'twittering-generate-format-table :around #'ps/twittering-add-image-format)

  ;; github.com/sfromm/emacs.d#twitter
  (defun tlon-org-twittering-store-link ()
    "Store a link to a tweet."
    (when (and (twittering-buffer-p) (twittering-get-id-at))
      (let ((status (twittering-find-status (twittering-get-id-at))))
        (apply 'org-store-link-props
               :type "twittering"
               :link (concat "twittering:"
                             (or (cdr (assq 'retweeting-id status))
                                 (cdr (assq 'id status))))
               :description (format "@%s: %s"
                                    (cdr (assq 'user-screen-name status))
                                    (cdr (assq 'text status)))
               :url (twittering-get-status-url-from-alist status)
               :date
               (format-time-string (org-time-stamp-format)
                                   (cdr (assq 'created-at status)))
               :date-timestamp
               (format-time-string (org-time-stamp-format t)
                                   (cdr (assq 'created-at status)))
               (apply 'append
                      (mapcar
                       (lambda (sym)
                         (let ((name (symbol-name sym)))
                           `(,(intern (concat ":" name))
                             ,(or (cdr (assq sym status))
                                  (concat "[no " name "]")))))
                       '(text
                         id
                         user-id user-name user-screen-name user-description
                         user-url user-location
                         source source-url
                         retweeting-user-id retweeting-user-name
                         retweeting-user-screen-name
                         retweeting-user-description
                         retweeting-user-url
                         retweeting-user-location
                         retweeting-source retweeting-source-url)))))))

  (org-link-set-parameters "twittering"
                           :follow #'tlon-org-twittering-open
                           :store #'tlon-org-twittering-store-link)

  (defun tlon-org-twittering-open (id-str)
    (twittering-visit-timeline (concat ":single/" id-str)))

  :general
  ("A-t" 'ps/twittering-account-select)
  (twittering-mode-map
   "s-m" 'twittering-replies-timeline
   "s-r" 'twittering-mentions-timeline
   "g" (lambda! (twittering-get-and-render-timeline)) ; refresh
   "c" 'twittering-push-tweet-onto-kill-ring
   "d" 'twittering-delete-status
   "A-C-s-f" 'twittering-goto-next-status
   "A-C-s-r" 'twittering-goto-previous-status
   "n" 'ps/twittering-mode-org-capture-future-matters-news
   "P" 'ps/twittering-mode-search-people-externally
   "q" 'twittering-kill-buffer
   "r" 'ps/twittering-mode-org-capture-future-matters-research
   "s" 'twittering-search
   "S" 'ps/twittering-mode-search-people-externally
   "t" 'twittering-update-status-interactive
   "u" 'twittering-push-uri-onto-kill-ring
   "x" 'ps/twittering-mode-open-externally
   "X" 'ps/twittering-mode-open-internally)
  (twittering-edit-mode-map
   "s-p" 'ps/twittering-mode-search-people-externally
   "s-c" 'twittering-edit-post-status))
#+end_src

** doom-snippets
:PROPERTIES:
:ID:       F0017D7B-DEBD-460B-8DF6-1134ECF42A7A
:END:

/[[https://github.com/doomemacs/snippets][doom-snippets]] is another snippet library./

[2023-10-14 Sat 13:37] I don’t really need another snippet library, especially given that the snippets in the different libraries sometimes conflict.

#+begin_src emacs-lisp
(use-package doom-snippets
  :elpaca (doom-snippets :type git :host github :repo "doomemacs/snippets" :files ("*.el" "*"))
  :after yasnippet
  :demand t)
#+end_src


** xwwp
:PROPERTIES:
:ID:       1A0D1889-F54B-4552-AE4B-8C140C90E3DC
:END:

/[[Enhance the Emacs xwidget-webkit browser][xwwp]] enhance the Emacs xwidget-webkit browser./

[2023-10-12 Thu] Buggy, mysterious. Too much hassle to make it work the way I want it.

#+begin_src emacs-lisp
(use-package xwwp
  :elpaca (xwwp
           :host github
           :repo "kchanqvq/xwwp")
  :after xwidget
  :demand t
  )
#+end_src

** txl
:PROPERTIES:
:ID:       BE78F0BD-D676-4E19-838A-2E6BD4504F52
:END:

/[[https://github.com/tmalsburg/txl.el][txl]] provides direct access to DeepL's machine translation API./

[2023-10-11 Wed] Superseded by ~go-translate~.

#+begin_src emacs-lisp
(use-package txl
  :elpaca (txl
           :host github
           :repo "tmalsburg/txl.el")
  :config
  (setq txl-languages '(EN-US . ES))
  (setq txl-deepl-api-key (auth-source-pass-get "key" (concat "tlon/BAE/deepl.com/" ps/tlon-email)))
  (setq txl-deepl-api-url "https://api-free.deepl.com/v2/translate")

  :general
  ("A-H-y" 'txl-translate-region-or-paragraph)
  (txl-edit-translation-mode-map
   "RET" 'txl-accept-translation
   "q" 'txl-dismiss-translation))
#+end_src

** consult-flyspell
:PROPERTIES:
:ID:       272C2359-045B-49A7-8DFB-71F9B349D07D
:END:

/[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]] integrates flyspell with consult./

[2023-10-05 Thu] I don’t use ~flyspell~ anymore.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package consult-flyspell
  :after consult flyspell)
#+end_src

** outshine
:PROPERTIES:
:ID:       7103E713-B985-465E-BC75-F73A096EB4EF
:END:

/[[https://github.com/alphapapa/outshine][outlshine]] extends the functionality of ~outline-minor-mode~./

Replaced by ~outli~.

#+begin_src emacs-lisp
(use-package outshine
  :after outline
  :demand t
  :config
  (setq outshine-use-speed-commands t)
  (add-hook 'emacs-lisp-mode-hook 'outshine-mode))
#+end_src

** flymake-json
:PROPERTIES:
:ID:       DA345E42-66A9-411B-AEDD-B087EA7267A7
:END:

[2023-08-26 Sat] No longer using ~flymake~.

#+begin_src emacs-lisp
(use-package flymake-json
  :demand t)
#+end_src

** flymake
:PROPERTIES:
:ID:       2259FE72-2958-4507-AD6D-4CB3F9B2E676
:END:

/flymake is a universal on-the-fly syntax checker./

[2023-08-26 Sat] Replaced by ~flycheck~

#+begin_src emacs-lisp :tangle no
(use-feature flymake
  ;; copied from Prot
  :config
  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t)
  (setq flymake-proc-compilation-prevents-syntax-check t)
  (setq flymake-wrap-around nil)
  (setq flymake-mode-line-format
        '("" flymake-mode-line-exception flymake-mode-line-counters))
  (setq flymake-mode-line-counter-format
        '(" " flymake-mode-line-error-counter
          flymake-mode-line-warning-counter
          flymake-mode-line-note-counter ""))
  :general
  (flymake-mode-map
   "C-c f l" 'flymake-goto-next-error
   "C-c f k" 'flymake-goto-prev-error))
#+end_src

** bicycle
:PROPERTIES:
:ID:       0AF1245D-2786-40B9-9176-783B9B9397AD
:END:

/[[https://github.com/tarsius/bicycle][bicycle]] provides commands for cycling the visibility of outline sections and code blocks./

[2023-07-22 Sat] Disabling to test whether I need it.

[2023-08-16 Wed] Not using it.

#+begin_src emacs-lisp :results silent :tangle no
(use-package bicycle
  :after outline
  :demand t
  :general
  (outline-minor-mode-map
   ("s-TAB" . bicycle-cycle)
   ("S-TAB" . bicycle-cycle-global)))
#+end_src

** github-review
:PROPERTIES:
:ID:       7AB2F3A1-F542-4F27-A576-470630DC0909
:END:
:LOGBOOK:
CLOCK: [2023-04-10 Mon 16:25]--[2023-04-10 Mon 16:50] =>  0:25
CLOCK: [2023-04-10 Mon 14:44]--[2023-04-10 Mon 14:49] =>  0:05
:END:

/[[https://github.com/charignon/github-review][github-review]] provides Emacs support for GitHub code reviews ./

<2023-08-12 Sat> No longer using.

#+begin_src emacs-lisp
(use-package github-review
  :after forge
  :config
  (setq github-review-view-comments-in-code-lines t)
  (setq github-review-reply-inline-comments t)

  :general
  (github-review-mode-map
   "s-m" 'github-review-comment
   "s-r" 'github-review-reject
   "s-a" 'github-review-approve))
#+end_src

** code-review
:PROPERTIES:
:ID:       A0887865-7CAC-47E6-A894-D49F07BCBAF9
:END:
:LOGBOOK:
CLOCK: [2023-04-10 Mon 14:31]--[2023-04-10 Mon 14:44] =>  0:13
:END:

/[[https://github.com/wandersoncferreira/code-review][code-review]] helps perform code reviews from Emacs./

<2023-08-12 Sat> No longer using.

#+begin_src emacs-lisp :results silent
(use-package code-review
  :after magit forge emojify
  :demand t
  :config
  (setq code-review-fill-column 80)
  (setq code-review-auth-login-marker 'forge)

  (add-hook 'code-review-mode-hook #'emojify-mode))
#+end_src

** dumb-jump
:PROPERTIES:
:ID:       BF9AD57C-A2BC-450B-8EAE-0FAAC951A52D
:END:

/[[https://github.com/jacktasia/dumb-jump][dumb-jump]] is a "jump to definition" package for 50+ languages./

~dumb-jump-go~, which seems like the only command I’d use, has been superseded by ~xref-find-definitions~.

#+begin_src emacs-lisp :results silent
(use-package dumb-jump)
#+end_src

** pen
:PROPERTIES:
:ID:       DEEF7EF7-E79C-427B-9E1D-86D22FC2056E
:END:

I'm reasonably satisfied with the other AI packages I'm using so I don't see much need for installing this one, especially given the complexity of the configuration.

*** CANCELLED [#5] Check out pen.el
CLOSED: [2023-08-07 Mon 15:29]
:PROPERTIES:
:ID:       2743B1F0-CCA8-4F48-8DC4-EF93E1A4607F
:END:

https://github.com/mullikine/pen.el
Disscussion [[https://www.reddit.com/r/emacs/comments/zhwhww/comment/izp8rxy/?utm_source=reddit&utm_medium=web2x&context=3][here]].

** typo
:PROPERTIES:
:ID:       91B4CAB7-76CD-4E56-9D5C-ECBBBDB04A04
:END:

#+begin_src emacs-lisp
(use-package typo
  :demand t
  :config
  (defun ps/typo-mode-enable-conditionally ()
    "Activate minor-mode in relevant text modes."
    (if (or (and (eq major-mode 'org-mode)
                 (not (org-in-src-block-p)))
            (catch 'found
              (dolist (mode '(markdown-mode
                              org-msg-edit-mode
                              outline-mode
                              telega-chat-mode))
                (when (eq major-mode mode)
                  (throw 'found t)))))
        (typo-mode)
      (typo-mode -1)))

  (add-hook 'post-command-hook #'ps/typo-mode-enable-conditionally))
#+end_src

** flyspell-correct
:PROPERTIES:
:ID:       5E8AA3D3-68AE-407E-B662-524B8B0AAD43
:END:

/[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] provides distraction-free words correction with flyspell via selected interface./

No longer using ~flyspell~.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package flyspell-correct
  :demand t
  :after flyspell)
#+end_src

** flyspell-lazy
:PROPERTIES:
:ID:       180FEF70-1430-4FFB-8909-A2B03694D3C5
:END:

/[[https://github.com/rolandwalker/flyspell-lazy][flyspell-lazy]] improves Emacs flyspell responsiveness using idle timers./

No longer using ~flyspell~.

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package flyspell-lazy
  :after flyspell
  :demand t
  :config
  (flyspell-lazy-mode))
#+end_src

** flyspell
:PROPERTIES:
:ID:       78ABBC76-7474-4C1C-A9B0-E8BEC972E75E
:END:
:LOGBOOK:
CLOCK: [2023-03-30 Thu 23:58]--[2023-03-31 Fri 00:15] =>  0:17
CLOCK: [2022-09-14 Wed 15:02]--[2022-09-14 Wed 15:06] =>  0:04
CLOCK: [2022-08-31 Wed 20:51]--[2022-08-31 Wed 21:00] =>  0:09
CLOCK: [2022-07-26 Tue 16:59]--[2022-07-26 Tue 17:01] =>  0:02
CLOCK: [2021-08-18 Wed 13:04]--[2021-08-18 Wed 13:16] =>  0:12
CLOCK: [2021-07-16 Fri 19:11]--[2021-07-16 Fri 19:31] =>  0:20
CLOCK: [2021-07-12 Mon 13:01]--[2021-07-12 Mon 13:11] =>  0:10
CLOCK: [2021-05-05 Wed 20:35]--[2021-05-05 Wed 20:55] =>  0:20
CLOCK: [2021-04-10 Sat 20:58]--[2021-04-10 Sat 21:40] =>  0:42
CLOCK: [2021-04-10 Sat 20:10]--[2021-04-10 Sat 20:16] =>  0:06
:END:


Replaced by ~jinx~.

#+begin_src emacs-lisp :results silent
(use-feature flyspell
  :demand t
  :after ispell
  :config
  (setq flyspell-issue-message-flag nil) ; auto-save personal dictionary whenever a word is added, avoiding prompts

  (defun ps/flyspell-save-word ()
    "Save word at point to personal dictionary."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

  (defun ps/flyspell-save-word-and-next ()
    "Save word at point to personal dictionary and go to next error."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location)))
    (flyspell-goto-next-error))

  ;; pragmaticemacs.wordpress.com/2015/08/27/jump-back-to-previous-typo/
  (defun ps/flyspell-goto-previous-error (arg)
    "Go to arg previous spelling error."
    (interactive "p")
    (while (/= 0 arg)
      (let ((pos (point))
            (min (point-min)))
        (if (and (eq (current-buffer) flyspell-old-buffer-error)
                 (eq pos flyspell-old-pos-error))
            (progn
              (if (= flyspell-old-pos-error min)
                  ;; goto beginning of buffer
                  (progn
                    (message "Restarting from end of buffer")
                    (goto-char (point-max)))
                (backward-word 1))
              (setq pos (point))))
        ;; seek the next error
        (while (and (> pos min)
                    (let ((ovs (overlays-at pos))
                          (r '()))
                      (while (and (not r) (consp ovs))
                        (if (flyspell-overlay-p (car ovs))
                            (setq r t)
                          (setq ovs (cdr ovs))))
                      (not r)))
          (backward-word 1)
          (setq pos (point)))
        ;; save the current location for next invocation
        (setq arg (1- arg))
        (setq flyspell-old-pos-error pos)
        (setq flyspell-old-buffer-error (current-buffer))
        (goto-char pos)
        (when (= pos min)
          (progn
            (message "No more missspelled words!")
            (setq arg 0))))))

  (advice-add 'flyspell-region :around
              #'telega-chatbuf-input-as-region-advice)

  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)

  :general
  ("M-p" 'flyspell-buffer
   "A-M-," 'ps/flyspell-goto-previous-error
   "A-M-." 'flyspell-goto-next-error)
  (flyspell-mode-map
   "C-," nil
   "C-." nil
   "C-;" nil)
  (flyspell-mouse-map ;; this key map becomes active only when point is on a highlighted word
   "s-a" 'flyspell-auto-correct-word
   "s-s" 'ps/flyspell-save-word
   "A-s-s" 'ps/flyspell-save-word-and-next
   "s-c" 'flyspell-correct-wrapper))
#+end_src

** ispell
:PROPERTIES:
:ID:       4C7A4F1F-41B8-49AB-B0F8-0EB092F88696
:END:
:LOGBOOK:
CLOCK: [2023-02-21 Tue 23:46]--[2023-02-22 Wed 01:19] =>  1:33
CLOCK: [2022-07-19 Tue 11:25]--[2022-07-19 Tue 11:47] =>  0:22
CLOCK: [2021-08-03 Tue 10:05]--[2021-08-03 Tue 10:13] =>  0:08
CLOCK: [2021-07-27 Tue 11:32]--[2021-07-27 Tue 11:39] =>  0:07
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-feature ispell
  :defer 10
  :config
  (setq ispell-silently-savep t)
  (setq ispell-program-name "/opt/homebrew/bin/aspell")

  (defvar ps/ispell-languages '("espanol" "english")
    "List of languages to use for ispell.")

  (defun ps/ispell-toggle-language ()
    "Toggle ispell dictionaries between languages defined in
 `ps/ispell-languages'."
    (interactive)
    (let ((one (car ps/ispell-languages))
          (two (cadr ps/ispell-languages)))
      (if (string= ispell-local-dictionary one)
          (ispell-change-dictionary two)
        (ispell-change-dictionary one)))
    (flyspell-buffer))
    ;; (message "Language set to %s" ispell-local-dictionary))

  ;; emacs.stackexchange.com/a/74070/32089
  ;; I think this was causing Emacs to freeze; disabling
  ;; (defun suppress-messages (old-fun &rest args)
  ;;   (cl-flet ((silence (&rest args1) (ignore)))
  ;;     (advice-add 'message :around #'silence)
  ;;     (unwind-protect
  ;;         (apply old-fun args)
  ;;       (advice-remove 'message #'silence))))

  (add-to-list 'ispell-extra-args "--sug-mode=ultra") ; github.com/rolandwalker/flyspell-lazy#notes

  ;; (advice-add 'ispell-init-process :around #'suppress-messages)
  ;; (advice-add 'ispell-kill-ispell :around #'suppress-messages)


  :general
  ("M-A-p" 'ps/ispell-toggle-language))
#+end_src

** corfu-doc-terminal
:PROPERTIES:
:ID:       731DF77F-1269-4E04-90A5-DA2BB9446665
:END:

/[[https://codeberg.org/akib/emacs-corfu-doc-terminal][corfu-doc-terminal]] enables corfu-doc popup on terminal./

[2023-06-16 Fri 10:34] Removing, due to hard-to-diagnose errors.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/corfu-doc-terminal)
(use-package corfu-doc-terminal
  :elpaca (corfu-doc-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git")
  :after corfu-terminal
  :demand t
  :config
  (corfu-doc-terminal-mode))
#+end_src

** corfu-terminal
:PROPERTIES:
:ID:       6B55F343-3A3E-42CE-9353-6630DC7C4F46
:END:

/[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]] enables corfu popups on terminal./

[2023-06-16 Fri 10:34] Removing, due to hard-to-diagnose errors.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/corfu-terminal)
(use-package corfu-terminal
  :after corfu
  :defer 30
  :config
  (corfu-terminal-mode))
#+end_src

** gptai
:PROPERTIES:
:ID:       BEB02F5A-AE8E-40BF-B8A7-93A6A5B7D88A
:END:

[2023-06-07 Wed 22:11] Replaced with gptel.

#+begin_src emacs-lisp
(use-package gptai
  :demand t
  :config
  (setq gptai-model "gpt-4")
  (setq gptai-username (auth-source-pass-get "username" "tlon/core/openai.com"))
  (setq gptai-api-key (auth-source-pass-get "key" "tlon/core/openai.com"))
  )
#+end_src

** openai
:PROPERTIES:
:ID:       822430F1-51B8-4754-80B0-EC17DD931CB5
:END:
:LOGBOOK:
CLOCK: [2023-03-17 Fri 21:54]--[2023-03-17 Fri 22:24] =>  0:30
:END:

/[[https://github.com/emacs-openai/openai][openai]] is an Elisp library for the OpenAI API./

No longer using ~chatgpt~.

#+begin_src emacs-lisp
(use-package openai
  :elpaca (openai
             :host github
             :repo "emacs-openai/openai")
  :config
  (setq openai-key (auth-source-pass-get "key" "tlon/core/openai.com")))
#+end_src

** chatgpt
:PROPERTIES:
:ID:       2D5B778F-E663-4569-8104-77E6D986FA90
:END:
:LOGBOOK:
CLOCK: [2023-03-21 Tue 22:51]--[2023-03-21 Tue 23:01] =>  0:10
CLOCK: [2023-03-21 Tue 13:10]--[2023-03-21 Tue 13:27] =>  0:17
:END:

/[[https://github.com/emacs-openai/chatgpt][chatgpt]] supports prompting GPT from within Emacs./

[2023-06-07 Wed 21:57] Replacing it with ~org-ai~.

#+begin_src emacs-lisp
(use-package chatgpt
  :elpaca (chatgpt
             :host github
             :repo "emacs-openai/chatgpt")
  :config
  (setq chatgpt-model "gpt-4")
  (setq chatgpt-input-method 'minibuffer)
  (setq chatgpt-animate-text nil)

  :general
  ("A-C-g" 'chatgpt))
#+end_src

** codegpt
:PROPERTIES:
:ID:       5008C40C-EC84-4817-9BE6-92996986D25E
:END:

/[[https://github.com/emacs-openai/codegpt#-using-chatgpt][codegpt]]  is a completion interface for GPT./

[2023-06-07 Wed 21:57] Replacing it with ~org-ai~.

#+begin_src emacs-lisp
(use-package codegpt
  :elpaca (codegpt
             :host github
             :repo "emacs-openai/codegpt")
  :after openai
  :config
  (setq codegpt-model "text-davinci-003"))
#+end_src

** emojify
:PROPERTIES:
:ID:       92919C07-A782-4079-AE20-75B248D34A13
:END:

/[[https://github.com/iqbalansari/emacs-emojify][emojify]] displays emojis in Emacs./

[2023-05-26 Fri 07:31] Moving to graveyard. Replaced by built-in emoji support in Emacs 29.

#+begin_src emacs-lisp :results silent
(use-package emojify
  :config
  (emojify-set-emoji-styles '(unicode))
  (add-hook 'elpaca-after-init-hook #'global-emojify-mode)

  :general
  ("H-e" 'emojify-insert-emoji))
#+end_src

** rg
:PROPERTIES:
:ID:       A75847C6-5259-46DD-8D03-4EE3314E86E6
:END:

/[[https://github.com/dajva/rg.el][rg]] is a search tool based on ripgrep./

[2023-05-23 Tue 12:03] Replaced by ~consult-ripgrep~.

#+begin_src emacs-lisp :results silent
(use-package rg
  :defer 15
  :config
  (setq rg-executable "rg")
  (setq rg-command-line-flags '("--multiline"))
  (setq rg-group-result t))
#+end_src

** biblio
:PROPERTIES:
:ID:       4EDDE179-9DE5-4F31-9FB4-17A5B68F6557
:END:
:LOGBOOK:
CLOCK: [2022-07-16 Sat 15:22]--[2022-07-16 Sat 15:26] =>  0:04
CLOCK: [2022-07-16 Sat 15:17]--[2022-07-16 Sat 15:18] =>  0:01
:END:

/[[https://github.com/cpitclaudel/biblio.el][biblio]] is a package to browse and import bibliographic references from CrossRef, DBLP, HAL, arXiv, Dissemin, and doi.org./

[2023-05-16 Tue 19:46] Not needed.

#+begin_src emacs-lisp :results silent
(use-package biblio
  :defer 15
  :config
  (defvar ps/biblio-arxiv-regexp "\\([[:digit:]]\\{4\\}\\.[[:digit:]]\\{4,5\\}\\)")
  (defun ps/biblio-arxiv-id-p (string)
    "Return `t' if string has the form of an arXiv ID."
    (string-match ps/biblio-arxiv-regexp string)))
#+end_src

** dirvish
:PROPERTIES:
:ID:       174FB591-3A37-48B9-8EF1-CF1B2AB39F6D
:END:
:LOGBOOK:
CLOCK: [2023-05-14 Sun 09:32]--[2023-05-14 Sun 09:49]--[2023-05-14 Sun 09:53] =>  0:17
:END:

/[[https://github.com/alexluigit/dirvish][dirvish]] is an improved version of dired./

[2023-05-14 Sun 09:49] I tried it briefly but found it buggy and mostly unnecessary.

#+begin_src emacs-lisp
(use-package dirvish
  :demand t
  (dirvish-override-dired-mode -1))
#+end_src

** dictionary
:PROPERTIES:
:ID:       64B69D26-CE6D-4FFD-8218-799A6159ED42
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:38]--[2021-08-02 Mon 22:09] =>  0:31
:END:

[2023-05-11 Thu 20:14] Replaced by ~powerthesaurus~~.

#+begin_src emacs-lisp :results silent
(use-feature dictionary
  :config
  (setq dictionary-server "dict.org"))
#+end_src

** osx-dictionary
:PROPERTIES:
:ID:       BE7CC99E-B42E-4DAF-B60D-2246CB188379
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:40]--[2021-06-25 Fri 21:41] =>  0:01
CLOCK: [2021-04-03 Sat 18:49]--[2021-04-03 Sat 18:54] =>  0:05
:END:

/[[https://github.com/xuchunyang/osx-dictionary.el][osx-dictionary]] is a Mac OS X Dictionary.app interface for Emacs./

[2023-05-11 Thu 20:14] Replaced by ~powerthesaurus~~.

#+begin_src emacs-lisp :results silent
(use-package osx-dictionary
  :general
  ("H-y" 'osx-dictionary-search-input))
#+end_src

** exec-paths-from-shell
:PROPERTIES:
:ID:       31238246-249F-42E8-BE80-06DB327259FD
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 09:16]--[2023-04-30 Sun 09:34] =>  0:18
CLOCK: [2021-06-30 Wed 14:24]--[2021-06-30 Wed 15:25] =>  1:01
CLOCK: [2021-06-29 Tue 16:17]--[2021-06-29 Tue 17:44] =>  1:27
CLOCK: [2021-02-06 Sat 22:29]--[2021-02-06 Sat 22:52] =>  0:23
CLOCK: [2021-02-05 Fri 18:46]--[2021-02-05 Fri 19:00] =>  0:14
CLOCK: [2021-02-05 Fri 19:09]--[2021-02-05 Fri 19:14] =>  0:05
:END:

/[[https://github.com/purcell/exec-paths-from-shell][exec-paths-from-shell]] makes Emacs use the $PATH set up by the user's shell./

[2023-04-30 Sun 10:14] This shouldn't be needed if Emacs is launched from the Terminal, as I do. Disabling for the time being; will remove if noticed no issues.

#+begin_src emacs-lisp :results silent
(use-package exec-paths-from-shell
  :disabled
  :if (eq system-type 'darwin)
  :init
  (dolist (var '("NVM_DIR"))
    (add-to-list 'exec-paths-from-shell-variables var))

  :config
  (exec-paths-from-shell-initialize))
#+end_src

*** resources
:PROPERTIES:
:ID:       23633754-5D4D-4473-8E61-B700551AC7C5
:END:
[[https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html][Shell startup scripts — flowblok’s blog]]

** aide
:PROPERTIES:
:ID:       5BCD6E4D-0264-4CB6-A0D8-0A6225A671B6
:END:

/[[https://github.com/junjizhi/aide.el][aide]] is an Emacs front end for GPT APIs like OpenAI./

[2023-04-29 Sat 17:03] I have no need for this package given that I'm already using several other GTP-4 packages.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/aide)
(use-package aide
  :elpaca (aide
             :host github
             :repo "junjizhi/aide.el")
  :after request
  :commands aide-openai-complete-region
  :config
  (setq openai-api-key (auth-source-pass-get 'secret "auth-sources/openai.com")))
#+end_src

** cape-yasnippet
:PROPERTIES:
:ID:       E1783BB4-D7BD-4264-B490-5E2F903CCCA7
:END:

/[[https://github.com/elken/cape-yasnippet][cape-yasnippet]] provides completion-at-point for yasnippet./

[2023-04-06 Thu 01:03] Seems buggy.

#+begin_src emacs-lisp :results silent :tangle no
(use-package cape-yasnippet
  :elpaca (cape-yasnippet
           :host github
           :repo "elken/cape-yasnippet")
  :after cape yasnippet
  :defer 20)
#+end_src

** straight
:PROPERTIES:
:ID:       40207396-12B9-4374-9341-713E88772275
:END:


Replaced with ~elpaca~.

#+begin_src emacs-lisp :results silent
(defhydra hydra-straight (:hint nil)
  "
_c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
_C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
_r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
_R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))
#+end_src

** emacs-sqlite3
:PROPERTIES:
:ID:       7A7A0C7B-AC94-40ED-A50E-AAB67D9522E8
:END:

[2023-04-05 Wed 22:56] Obsolete.

#+begin_src emacs-lisp :results silent
(use-feature emacsql-sqlite3
  :if (version< emacs-version "29.0")
  :demand t)
#+end_src

** eglot-grammarly
:PROPERTIES:
:ID:       4C20D1C9-F6CB-42A0-963F-91D48E212248
:END:

/[[https://github.com/emacs-grammarly/eglot-grammarly][eglot-grammarly]] is an Egot client for Grammarly./

[2023-04-05 Wed 22:38] I'm using ~lsp-grammarly~.

#+begin_src emacs-lisp :tangle (ps/init-get-tangle-flag :ps/spelling)
(use-package eglot-grammarly
  :elpaca (:host github :repo "emacs-grammarly/eglot-grammarly")
  :defer t
  :config
  (add-hook 'text-mode markdown-mode
            (lambda ()
              (require 'eglot-grammarly)
              (eglot-ensure))))
#+end_src

** git-timemachine
:PROPERTIES:
:ID:       8D9F7AC2-EB01-4ED7-84BA-7BD6AF11A7F9
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:37]--[2021-06-25 Fri 21:40] =>  0:03
:END:

/[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] lets you walk through git revisions of a file./

[2023-04-05 Wed 19:54] I don't see the need for this, given ~magit-log-buffer-file~.

#+begin_src emacs-lisp :results silent
(use-package git-timemachine
  :elpaca
  (git-timemachine
   :type git
   :host codeberg
   :repo "pidu/git-timemachine")
  :general
  ("A-H-t" 'git-timemachine))
#+end_src

** org-protocol-capture-html
:PROPERTIES:
:ID:       B7DA6C67-C8F4-4D46-B17B-5DB01D2A059A
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 14:48]--[2022-07-17 Sun 19:16] =>  4:28
CLOCK: [2022-07-17 Sun 11:55]--[2022-07-17 Sun 12:30] =>  0:35
:END:

/[[https://github.com/alphapapa/org-protocol-capture-html][org-protocol-capture-html]] supports capturing HTML from the browser selection into Emacs as org-mode content./

[2023-04-04 Tue 21:55] I'm relying on zotra/ebib to capture pages, so I don't need this.

#+begin_src emacs-lisp :results silent
(use-package org-protocol-capture-html
  :after org-protocol)
#+end_src

** constants
:PROPERTIES:
:ID:       E9DB498C-A4B6-4665-8CA1-40BBAC219B76
:END:

/[[https://github.com/emacsmirror/constants][constants]] provides physical values of physical constants and units./

[2023-04-04 Tue 21:51] Never really used it.

#+begin_src emacs-lisp :results silent :tangle no
(use-package constants)
#+end_src

** iy-go-to-char
:PROPERTIES:
:ID:       3BF309B9-5082-4810-96E5-39A07EA101A2
:END:

/[[https://github.com/doitian/iy-go-to-char][iy-go-to-char]] supports moving to the previous and next character, like ~t~ and ~f~ do in vim./

[2023-04-04 Tue 19:36] Not using it.

#+begin_src emacs-lisp :results silent
(use-package iy-go-to-char
  :config
  (defun ps/avy-goto-line-then-word-then-char-above ()
    "Go to visible line below point, then to word ahead of point,
then to selected character immediately ahead of point."
    (interactive)
    (ps/avy-goto-line-then-word-above)
    (call-interactively 'iy-go-to-char))

  (defun ps/avy-goto-line-then-word-then-char-below ()
    "Go to visible line below point, then to word ahead of point,
then to selected character immediately ahead of point."
    (interactive)
    (ps/avy-goto-line-then-word-below)
    (call-interactively 'iy-go-to-char))

  :general
  ("C-H-s-j" 'iy-go-to-char-backward
   "C-H-s-;" 'iy-go-to-char
   "C-H-s-i" 'ps/avy-goto-line-then-word-then-char-above
   "C-H-s-o" 'ps/avy-goto-line-then-word-then-char-below))
#+end_src

** anki-editor
:PROPERTIES:
:ID:       AEA197FC-3C2F-4452-B044-319827859DF5
:END:
:LOGBOOK:
CLOCK: [2022-01-15 Sat 19:12]--[2022-01-15 Sat 19:24] =>  0:12
CLOCK: [2021-12-28 Tue 10:10]--[2021-12-28 Tue 12:43] =>  2:33
CLOCK: [2021-12-11 Sat 22:30]--[2021-12-11 Sat 22:44] =>  0:14
CLOCK: [2021-10-13 Wed 22:54]--[2021-10-14 Thu 00:18] =>  1:24
CLOCK: [2021-10-13 Wed 22:54]--[2021-10-13 Wed 22:54] =>  0:00
CLOCK: [2021-10-02 Sat 14:09]--[2021-10-02 Sat 14:28] =>  0:19
CLOCK: [2021-10-02 Sat 13:06]--[2021-10-02 Sat 13:16] =>  0:10
CLOCK: [2021-07-13 Tue 12:03]--[2021-07-13 Tue 12:12] =>  0:09
CLOCK: [2021-07-13 Tue 10:35]--[2021-07-13 Tue 11:01] =>  0:26
CLOCK: [2021-07-12 Mon 21:40]--[2021-07-12 Mon 23:13] =>  1:33
CLOCK: [2021-07-10 Sat 14:29]--[2021-07-10 Sat 15:12] =>  0:43
CLOCK: [2021-05-27 Thu 15:49]--[2021-05-27 Thu 16:54] =>  1:05
CLOCK: [2021-05-26 Wed 21:05]--[2021-05-26 Wed 23:24] =>  2:19
CLOCK: [2021-04-08 Thu 21:50]--[2021-04-08 Thu 22:35] =>  0:45
CLOCK: [2021-04-05 Mon 22:19]--[2021-04-05 Mon 22:44] =>  0:25
CLOCK: [2021-03-17 Wed 19:31]--[2021-03-17 Wed 19:33] =>  0:02
CLOCK: [2021-03-17 Wed 17:46]--[2021-03-17 Wed 17:56] =>  0:10
:END:

/[[https://github.com/louietan/anki-editor][anki-editor]] is a minor mode for making Anki cards with Org./

[2023-04-04 Tue 18:11] Poorly maintained.

#+begin_src emacs-lisp :results silent :tangle (ps/init-get-tangle-flag :ps/anki-editor)
(use-package anki-editor
  :disabled
  ;; this version handles mathjax correctly
  ;; :elpaca (:fork (:repo "louietan/anki-editor" :branch "develop"))
  ;; this version simplifies the tree structure
  ;; :elpaca
  ;; (:type git :host github :repo "louietan/anki-editor"
  ;; :fork (:host github :repo "leoc/anki-editor"
  ;; :branch "develop"))
  :init
  (setq-default anki-editor-use-math-jax t) ; github.com/louietan/anki-editor/issues/60#issuecomment-617441799
  ;; create custom key map
  (progn
    (defvar anki-editor-mode-map (make-sparse-keymap))
    (add-to-list 'minor-mode-map-alist (cons 'anki-editor-mode
                                             anki-editor-mode-map)))

  :config
  (setq anki-editor-create-decks t)
  (setq anki-editor-org-tags-as-anki-tags t)
  (defun ps/anki-editor-open-note-externally ()
    "Copy note id to clipboard, switch to Anki desktop, and open note in browser."
    (interactive)
    (let ((note-id (org-entry-get nil "ANKI_NOTE_ID")))
      (if (not note-id)
          (error "Note id not found")
        (progn
          (kill-new (concat "nid:" note-id))
          (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"496A3425-8985-4117-AE0F-ABD6DC85FB9F\"'")))))

  (defun ps/anki-editor-push-notes-under-heading (&optional match scope)
    "Push notes under heading to Anki."
    (interactive)
    (anki-editor-push-notes '(4) match scope))

  ;; the two modified functions below allow for notes with empty fields to be pushed without error
  ;; github.com/leoc/anki-editor/pull/1
  (defun ps/anki-editor--build-field-from-content-at-point (name)
    "Build a field with NAME entry from the heading at point."
    (let* ((element (org-element-at-point))
           (format (anki-editor-entry-format))
           (begin (cl-loop for eoh = (org-element-property :contents-begin element)
                           then (org-element-property :end subelem)
                           while eoh
                           for subelem = (progn
                                           (goto-char eoh)
                                           (org-element-context))
                           while (memq (org-element-type subelem)
                                       '(drawer planning property-drawer))
                           finally return (and eoh (org-element-property :begin subelem))))
           (end (org-element-property :contents-end element))
           (raw (or (and begin
                         end
                         (buffer-substring-no-properties
                          begin
                          ;; in case the buffer is narrowed,
                          ;; e.g. by `org-map-entries' when
                          ;; scope is `tree'
                          (min (point-max) end)))
                    "")))
      (cons name (anki-editor--export-string raw format))))

  (defun ps/anki-editor--build-fields ()
    "Build a list of fields from subheadings of current heading.

Return a list of cons of (FIELD-NAME . FIELD-CONTENT)."
    (save-excursion
      (cl-loop with inhibit-message = t ; suppress echo message from `org-babel-exp-src-block'
               initially (unless (org-goto-first-child)
                           (cl-return `(,(anki-editor--build-field-from-content-at-point "Back"))))
               for last-pt = (point)
               for element = (org-element-at-point)
               for heading = (substring-no-properties
                              (org-element-property :raw-value element))
               for format = (anki-editor-entry-format)
               ;; contents-begin includes drawers and scheduling data,
               ;; which we'd like to ignore, here we skip these
               ;; elements and reset contents-begin.
               for begin = (cl-loop for eoh = (org-element-property :contents-begin element)
                                    then (org-element-property :end subelem)
                                    while eoh
                                    for subelem = (progn
                                                    (goto-char eoh)
                                                    (org-element-context))
                                    while (memq (org-element-type subelem)
                                                '(drawer planning property-drawer))
                                    finally return (and eoh (org-element-property :begin subelem)))
               for end = (org-element-property :contents-end element)
               for raw = (or (and begin
                                  end
                                  (buffer-substring-no-properties
                                   begin
                                   ;; in case the buffer is narrowed,
                                   ;; e.g. by `org-map-entries' when
                                   ;; scope is `tree'
                                   (min (point-max) end)))
                             "")
               for content = (anki-editor--export-string raw format)
               collect (cons heading content)
               ;; proceed to next field entry and check last-pt to
               ;; see if it's already the last entry
               do (org-forward-heading-same-level nil t)
               until (= last-pt (point)))))

  (advice-add #'anki-editor--build-fields :override #'ps/anki-editor--build-fields)
  (advice-add #'anki-editor--build-field-from-content-at-point :override #'ps/anki-editor--build-field-from-content-at-point)

  :general
  ;; ("A-i" 'anki-editor-mode)
  (anki-editor-mode-map
   "s-z" 'anki-editor-cloze-region
   "s-i" 'anki-editor-insert-note
   "s-h" 'ps/anki-editor-push-notes-under-heading
   "s-c" 'anki-editor-push-new-notes
   "s-a" 'anki-editor-push-notes ; push all notes
   "s-x" 'ps/anki-editor-open-note-externally))
#+end_src

Of possible interest:
- [[https://emacstil.com/til/2021/11/19/anki-org/][Anki Org – Emacs TIL – Today I learned in Emacs]]

** puni
:PROPERTIES:
:ID:       1E0E065E-46CE-4961-8620-6554935CE68F
:END:

/[[https://github.com/AmaiKinono/puni][puni]] is a structural editing package that supports many major modes out of the box./

[2023-04-04 Tue 18:10] Can't be bothered to explore it.

#+begin_src emacs-lisp :tangle (ps/init-get-tangle-flag :ps/puni)
(use-package puni
  :disabled
  :demand t
  :config
  (dolist (hook '(prog-mode-hook
                  sgml-mode-hook
                  nxml-mode-hook
                  tex-mode-hook
                  eval-expression-minibuffer-setup-hook))
    (add-hook hook #'puni-mode))

  :general
  (puni-mode-map
   "C-M-a" 'puni-beginning-of-sexp
   "C-M-b" 'puni-backward-sexp
   "C-M-e" 'puni-end-of-sexp
   "C-M-f" 'puni-forward-sexp
   "C-S-k" 'puni-backward-kill-line
   "C-c DEL" 'puni-force-delete
   "C-d" 'puni-forward-delete-char
   "C-k" nil
   "C-w" nil
   "DEL" 'puni-backward-delete-char
   "M-(" 'puni-syntactic-backward-punct
   "M-)" 'puni-syntactic-forward-punct
   "M-DEL"    'puni-backward-kill-word))
#+end_src
** emacs-native-shell-complete
:PROPERTIES:
:ID:       878E8350-28A3-4C00-94ED-D3C29EFF68D7
:END:
:LOGBOOK:
CLOCK: [2022-06-17 Fri 17:41]--[2022-06-17 Fri 17:55] =>  0:14
:END:

/[[https://github.com/CeleritasCelery/emacs-native-shell-complete][emacs-native-shell-complete]] provides completion in shell buffers using native mechanisms./

[2023-04-04 Tue 18:10] Not using.

#+begin_src emacs-lisp
(use-package emacs-native-shell-complete
  :disabled
  :after shell
  :demand t
  :elpaca (emacs-native-shell-complete
             :host github
             :repo "CeleritasCelery/emacs-native-shell-complete"))
#+end_src

** pcmpl-args
:PROPERTIES:
:ID:       6F7AFAFF-B44A-4465-BB01-EA3368A24EF0
:END:

/[[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]] provies enhanced shell completion./

[2023-04-04 Tue 18:09] Not using.

#+begin_src emacs-lisp :results silent
(use-package pcmpl-args
  :disabled
  :defer 5)
#+end_src

** eshell-git-prompt
:PROPERTIES:
:ID:       D8CACBDA-19AA-4D2F-9707-07B37AE3DF89
:END:

/[[https://github.com/xuchunyang/eshell-git-prompt][eshell-git-prompt]] provides themes for eshell./

[2023-04-04 Tue 18:09] Not using.
#+begin_src emacs-lisp :results silent
(use-package eshell-git-prompt
  :disabled
  :after eshell
  :demand t
  :config
  (eshell-git-prompt-use-theme 'powerline))
#+end_src

** consult-notes
:PROPERTIES:
:ID:       5C00C666-754D-4779-9C48-A7B262EE525C
:END:

/[[https://github.com/mclear-tools/consult-notes][consult-notes]]: Use consult to search notes./

[2022-10-05 Wed 14:50] Performance seemed abysmal when I tried it. Maybe it can be optimized?

#+begin_src emacs-lisp :results silent
(use-package consult-notes
:disabled)
#+end_src

** hammy
:PROPERTIES:
:ID:       79C8D6B8-7D86-4B63-82C2-61E6DFFC4152
:END:

/[[https://github.com/alphapapa/hammy.el][hammy]] provides programmable, interactive interval timers./

[2023-04-04 Tue 18:08] Not using because I can't get dbus to work.

#+begin_src emacs-lisp :results silent :tangle (ps/init-get-tangle-flag :ps/hammy)
(use-package
  :disabled
  :elpaca (hammy
             :host github
             :repo "alphapapa/hammy.el")

  :config
  (hammy-define "Move"
    :documentation "Don't forget to stretch your legs."
    :intervals
    ;; A list of intervals, each defined with the `interval' function.
    (list (interval
           ;; The name of the interval is a string, used when selecting
           ;; hammys and shown in the mode line.
           :name "💺"
           ;; The duration of the interval: a number of seconds, a string
           ;; passed to `timer-duration', or a function which returns such.
           :duration "45 minutes"
           ;; Optionally, a face in which to show the
           ;; interval's name in the mode line.
           :face 'font-lock-type-face
           ;; A list of actions to take before starting the interval
           ;; (really, one or a list of functions to call with the hammy
           ;; as the argument).  The `do' macro expands to a lambda,
           ;; which the interval's `before' slot is set to.  In its
           ;; body, we call two built-in helper functions.
           :before (do (announce "Whew!")
                       (notify "Whew!"))
           ;; We want this interval to not automatically advance to the
           ;; next one; rather, we want the user to call the
           ;; `hammy-next' command to indicate when the standing-up is
           ;; actually happening.  So we provide a list of actions to
           ;; take when it's time to advance to the next interval.  We
           ;; wrap the list in a call to the built-in `remind' function,
           ;; which causes the actions to be repeated every 10 minutes
           ;; until the user manually advances to the next interval.
           :advance (remind "10 minutes"
                            ;; Every 10 minutes, while the hammy is waiting
                            ;; to be advanced to the next interval, remind
                            ;; the user by doing these things:
                            (do (announce "Time to stretch your legs!")
                                (notify "Time to stretch your legs!")
                              (play-sound-file "~/Misc/Sounds/mooove-it.wav"))))
          (interval :name "🤸"
                    :duration "5 minutes"
                    :face 'font-lock-builtin-face
                    :before (do (announce "Mooove it!")
                                (notify "Mooove it!"))
                    ;; Again, the interval should not advance automatically
                    ;; to the next--the user should indicate when he's
                    ;; actually sat down again.  (If we omitted the
                    ;; `:advance' slot, the interval would automatically
                    ;; advance when it reached its duration.)
                    :advance (do (announce "Time for a sit-down...")
                                 (notify "Time for a sit-down...")
                               (play-sound-file org-pomodoro-finished-sound)))))

  (hammy-mode))
#+end_src

** elisp-bug-hunter
:PROPERTIES:
:ID:       0C19171B-8DFA-4E06-9E17-45C1F9158C28
:END:

/[[https://github.com/Malabarba/elisp-bug-hunter][elisp-bug-hunter]] hunts down errors in elisp files./

[2023-04-04 Tue 18:01] Doesn't work with Chemacs.

#+begin_src emacs-lisp :results silent
(use-package bug-hunter
  :general
  ("<f5>" 'bug-hunter-init-file))
#+end_src

** scihub
:PROPERTIES:
:ID:       29ABF514-563B-463D-9FDB-CF2C8AA25F83
:END:

/[[https://github.com/emacs-pe/scihub.el][sc/sihub]] supports downloading papers from Sci-Hub./

[2023-04-01 Sat 20:55] No longer working.

#+begin_src emacs-lisp :results silent
(use-package scihub
  :config
  (setq scihub-download-directory paths-dir-downloads)
  (setq scihub-open-after-download nil)
  (setq scihub-fetch-domain 'scihub-fetch-domains-lovescihub)
  ;; run `scihub-homepage' for a list of available scihub webservers
  ;; if the URL below stops working
  (setq scihub-homepage "http://sci-hub.ee"))
#+end_src

** gpt
:PROPERTIES:
:ID:       6BA1A737-40A1-4253-8FC8-E211F6060BC9
:END:

/[[https://github.com/stuhlmueller/gpt.el][gpt]] is an Emacs package for calling instruction-following language models./

[2023-03-21 Tue 19:22] Replaced with chatgpt, which connects to the OpenAI API via an Elisp library.

#+begin_src emacs-lisp :results silent
(use-package gpt
  :commands gpt-dwim

  :config
  (setq gpt-openai-key (auth-source-pass-get 'secret "auth-sources/openai.com"))
  (setq gpt-openai-engine "text-davinci-003")

  :general
  ("A-C-g" 'gpt-dwim))
#+end_src

** ox-reveal
:PROPERTIES:
:ID:       019A6815-F80E-4A8E-9CDC-854F28D7E42A
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 13:27]--[2021-11-18 Thu 13:45] =>  0:18
:END:

[2023-03-18 Sat 09:56] Not using it.

#+begin_src emacs-lisp :results silent
(use-package ox-reveal
  ;; :defer 300
  :config
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src

- [[https://revealjs.com/][The HTML presentation framework | reveal.js]]
- [[https://www.youtube.com/watch?v=je_xPoqtnSM][GNU/Emacs Org-mode For Presentation Slides/HTML Slides (Emacs org-reveal) - YouTube]]

** epc
:PROPERTIES:
:ID:       474AA19E-D682-4A5E-9853-845333D82912
:END:

#+begin_src emacs-lisp :results silent
(use-package epc)
#+end_src

** cider
:PROPERTIES:
:ID:       308A0DCB-A51A-493F-B729-A0156ED1C4B7
:END:

/[[https://github.com/clojure-emacs/cider][cider]] is CIDER is the "Clojure(Script) Interactive Development Environment that Rocks"./

[2023-03-18 Sat 09:50] Not using Clojure.

#+begin_src emacs-lisp :results silent
(use-package cider)
#+end_src

** parse-csv
:PROPERTIES:
:ID:       55B470DB-E9D2-45B1-8E74-58CB9DDF7D27
:END:

[2023-03-18 Sat 09:50] Not using it.

#+begin_src emacs-lisp :results silent
(use-package parse-csv)
#+end_src

** edit-indirect
:PROPERTIES:
:ID:       1F18FACA-0A55-4B8F-98C3-800C07D62257
:END:

[2023-03-10 Fri 20:10] Not using it.

#+begin_src emacs-lisp :results silent
(use-package edit-indirect)
#+end_src

** elmacro
:PROPERTIES:
:ID:       B7816A82-2E9C-434F-AAB3-A92FA5F3368B
:END:

[2023-03-10 Fri 19:49] Not using anymore.

#+begin_src emacs-lisp :results silent
(use-package elmacro)
#+end_src

** fontaine
:PROPERTIES:
:ID:       B375DC03-A71F-4F87-8B03-59437D9CA857
:END:

/[[https://protesilaos.com/emacs/fontaine][fontaine]] lets the user specify presets of font configurations and set them on demand on graphical Emacs frames./

I haven't yet explored this package.

[2023-03-07 Tue 13:49] I don't think I have a need for this at the moment. But perhaps in the future?

#+begin_src emacs-lisp
(use-package fontaine
  :disabled
  :demand t
  :config
  (fontaine-mode))
#+end_src

** paradox
:PROPERTIES:
:ID:       2263DD83-80FF-4180-903B-33FEB83C8179
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:11]--[2021-06-03 Thu 14:16] =>  0:05
:END:

Not using.

#+begin_src emacs-lisp :results silent
(use-package paradox
  :disabled
  ;; :defer 600
  :config
  (setq paradox-column-width-package 27)
  (setq paradox-column-width-version 13)
  (setq paradox-execute-asynchronously t)
  (setq paradox-hide-wiki-packages t)
  (setq paradox-github-token
   (setq auth-source-pass-get 'secret "auth-sources/api.github.com"))
  ;; (paradox-enable)
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src

** keyfreq
:PROPERTIES:
:ID:       9EC2F318-4E9A-4E66-852E-2EB5510AC9BC
:END:
:LOGBOOK:
CLOCK: [2021-07-11 Sun 18:35]--[2021-07-11 Sun 18:38] =>  0:03
CLOCK: [2021-02-07 Sun 13:55]--[2021-02-07 Sun 13:57] =>  0:02
CLOCK: [2021-02-07 Sun 13:25]--[2021-02-07 Sun 13:37] =>  0:12
:END:

/[[https://github.com/dacap/keyfreq][keyfreq]] track Emacs command frequency./

#+begin_src emacs-lisp :results silent
(use-package keyfreq
  :disabled
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src

** org-drill
:PROPERTIES:
:ID:       34FB61E2-5BF6-44F1-B3C4-759D61DB2D34
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 11:55]--[2021-05-04 Tue 12:12] =>  0:17
:END:

/[[https://gitlab.com/phillord/org-drill/][org-drill]] is a spaced-repetition package for Emacs/

I like the idea but Anki provides too many features I need for a migration to be feasible.

#+begin_src emacs-lisp :results silent
(use-package org-drill
  :disabled
  :config
  (add-to-list 'org-modules 'org-drill))
#+end_src

*** CANCELLED [#7] Check org drill for manage music listening
CLOSED: [2024-05-14 Tue 23:14]
:PROPERTIES:
:Effort:   1:00
:ID:       AA10D76D-6ACC-4A58-BCFF-4253DC7B55F0
:END:
:LOGBOOK:
CLOCK: [2021-05-07 Fri 09:45]--[2021-05-07 Fri 09:45] =>  0:00
:END:

Could be a pilot test for integrating notes and spaced repetition

When to use Anki versus org-drill? Use Anki for everything, except tags that require you to be in front of a computer.

** org-roam-timestamps
:PROPERTIES:
:ID:       F9892121-725F-4BD7-9AAE-7E93460F5C58
:END:

/[[https://github.com/tefkah/org-roam-timestamps][org-roam-timestamps]] adds modified and creation timestamps to the org-roam property drawer./

[2023-03-07 Tue 13:47] I don't really need this, and it clutters my org drawers. Moving to graveyard. All my notes are under version control anyway, so their creation and modification times can be obtained from the git repository rather than having to be stored explicitly as an ~org-mode~ heading property.

#+begin_src emacs-lisp :tangle (ps/init-get-tangle-flag :ps/org-roam)
(use-package org-roam-timestamps
  :disabled
  :after org-roam
  :demand t
  :config
  (setq org-roam-timestamps-remember-timestamps nil)
  (setq org-roam-timestamps-timestamp-parent-file t)

  (org-roam-timestamps-mode))
#+end_src

** google-translate
:PROPERTIES:
:ID:       44F5E93D-AF2C-4842-96CE-8539E8C7FF96
:END:
:LOGBOOK:
CLOCK: [2022-06-29 Wed 10:13]--[2022-06-29 Wed 10:29] =>  0:16
CLOCK: [2021-07-09 Fri 21:33]--[2021-07-09 Fri 21:39] =>  0:06
CLOCK: [2021-05-31 Mon 21:27]--[2021-05-31 Mon 21:41] =>  0:14
:END:
/[[https://github.com/atykhonov/google-translate][google-translate]] is an Emacs interface to Google Translate./

[2022-08-31 Wed] I should probably replace this with [[id:F3063A73-ED50-42BD-8ABD-8D7FC68758FD][reverso]].

[2023-01-25 Wed] I'm replacing it with [[id:BE78F0BD-D676-4E19-838A-2E6BD4504F52][txl]].

#+begin_src emacs-lisp :results silent
(use-package google-translate
  :disabled
  :defer 20
  :functions (my-google-translate-at-point google-translate--search-tkk)

  :config
  (setq google-translate-default-target-language "en")
  (setq google-translate-default-source-language "es")

  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))

  (setq google-translate-backend-method 'curl)

  (defun ps/google-translate-dwim (&optional reverse-p)
    "Translate region if active, word if at point, else prompt for
text. If invoked with a prefix argument, perform a reverse
translation."
    (interactive "P")
    (let ((google-translate-default-source-language ps/ispell-language)
          (google-translate-default-target-language
           (if (string= ps/ispell-language "en")
               "es"
             "en")))
      (if reverse-p
          (google-translate-at-point-reverse)
        (google-translate-at-point))))

  ;; modify original function so that it prompts for text to translate
  ;; if region is inactive and no word is at point.
  (defun ps/%google-translate-at-point (override-p reverse-p)
    (let* ((langs (google-translate-read-args override-p reverse-p))
           (source-language (car langs))
           (target-language (cadr langs))
           (bounds nil))
      (google-translate-translate
       source-language target-language
       (cond ((string-equal major-mode "pdf-view-mode") (car (pdf-view-active-region-text)))
             ((use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)))
             (t (or (and (setq bounds (bounds-of-thing-at-point 'word))
                         (buffer-substring-no-properties (car bounds) (cdr bounds)))
                    (google-translate-query-translate)))))))

  (advice-add '%google-translate-at-point :override #'ps/%google-translate-at-point)

  :general
  ("H-A-y" 'ps/google-translate-dwim))
#+end_src

** git-gutter
:PROPERTIES:
:ID:       ECD5FD26-F74B-473A-AF56-9B67F635C924
:END:
[2022-08-24 Wed 13:17] Disabling for the time being. I wasn't really using it, and found the sudden margin changes distracting and annoying.

#+begin_src emacs-lisp :results silent
(use-package git-gutter
  :disabled
   :defer 10
   :config
   (global-git-gutter-mode))
#+end_src

** projectile
:PROPERTIES:
:ID:       DD7DF8D4-CB05-4E98-8125-D453D25E092A
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 17:20]--[2021-07-22 Thu 17:24] =>  0:04
:END:
Disabling since I'm not really using it.

#+begin_src emacs-lisp :results silent
(use-package projectile
  :disabled
  :config
  (projectile-mode)
  :general
  ("H-p" 'projectile-command-map))
#+end_src

** persistent-scratch
:PROPERTIES:
:ID:       B6CB6A6C-0BCC-4A07-9608-BDCA6184C63A
:END:

/[[https://github.com/Fanael/persistent-scratch][persistent-scratch]] makes Emacs remember the scratch buffer across sessions./

[2023-03-06 Mon 21:50] Moving to graveyard since I now accomplish the same with ~remember~.

#+begin_src emacs-lisp :results silent
(use-package persistent-scratch
  :disabled
  :demand t
  :config
  (setq persistent-scratch-autosave-interval 30)
  ;; What follows is copied from umarahmad.xyz/blog/quick-scratch-buffers/
  ;; (persistent-scratch-scratch-buffer-p-function 'ps/persistent-scratch-buffer-identifier)

  (defun ps/persistent-scratch-buffer-identifier ()
    (string-match "^*scratch:" (buffer-name)))

  (defun ps/persistent-scratch-get-scratches ()
    (let ((scratch-buffers)
          (save-data
           (read
            (with-temp-buffer
              (let ((coding-system-for-read 'utf-8-unix))
                (insert-file-contents persistent-scratch-save-file))
              (buffer-string)))))
      (dolist (saved-buffer save-data)
        (push (substring (aref saved-buffer 0) (length "*scratch:")) scratch-buffers))
      scratch-buffers))

  (defun ps/persistent-scratch-quick-open ()
    (interactive)
    (let* ((scratch-buffers (ps/persistent-scratch-get-scratches))
           (chosen-scratch (concat "*scratch:"
                                   (completing-read
                                    "Choose a scratch: "
                                    scratch-buffers nil nil nil nil
                                    (ps/random-alnum 4))))
           (buffer-exists-p (get-buffer chosen-scratch)))
      (pop-to-buffer chosen-scratch)
      (unless buffer-exists-p
        (persistent-scratch-restore-this))
      (persistent-scratch-mode)))

  (persistent-scratch-setup-default))
#+end_src

** key bindings
:PROPERTIES:
:ID:       B24FFD2C-67E3-46D5-844B-8CF80AD28CE6
:END:
:LOGBOOK:
CLOCK: [2021-03-28 Sun 13:35]--[2021-03-28 Sun 14:31] =>  0:56
:END:

#+begin_src emacs-lisp :results silent :tangle no
(global-unset-key (kbd "C-a"))
(global-unset-key (kbd "C-b"))
(global-unset-key (kbd "C-d"))
(global-unset-key (kbd "C-f"))
(global-unset-key (kbd "C-F"))
(global-unset-key (kbd "C-j"))
(global-unset-key (kbd "C-k"))
(global-unset-key (kbd "C-n"))
(global-unset-key (kbd "C-o"))
(global-unset-key (kbd "C-p"))
(global-unset-key (kbd "C-r"))
(global-unset-key (kbd "C-t"))
(global-unset-key (kbd "C-y"))
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-,"))
(global-unset-key (kbd "C-."))
(global-unset-key (kbd "s-a"))
(global-unset-key (kbd "s-b"))
(global-unset-key (kbd "s-c"))
(global-unset-key (kbd "s-d"))
(global-unset-key (kbd "s-e"))
(global-unset-key (kbd "s-f"))
(global-unset-key (kbd "s-g"))
(global-unset-key (kbd "s-h"))
(global-unset-key (kbd "s-i"))
(global-unset-key (kbd "s-j"))
(global-unset-key (kbd "s-k"))
(global-unset-key (kbd "s-l"))
(global-unset-key (kbd "s-m"))
(global-unset-key (kbd "s-n"))
(global-unset-key (kbd "s-o"))
(global-unset-key (kbd "s-p"))
(global-unset-key (kbd "s-q"))
(global-unset-key (kbd "s-r"))
(global-unset-key (kbd "s-s"))
(global-unset-key (kbd "s-t"))
(global-unset-key (kbd "s-u"))
(global-unset-key (kbd "s-v"))
(global-unset-key (kbd "s-w"))
(global-unset-key (kbd "s-x"))
(global-unset-key (kbd "s-y"))
(global-unset-key (kbd "s-z"))
(global-unset-key (kbd "s-SPC"))
(global-unset-key (kbd "M-a"))
(global-unset-key (kbd "M-b"))
(global-unset-key (kbd "M-c"))
(global-unset-key (kbd "M-d"))
(global-unset-key (kbd "M-e"))
(global-unset-key (kbd "M-f"))
(global-unset-key (kbd "M-h"))
(global-unset-key (kbd "M-i"))
(global-unset-key (kbd "M-j"))
(global-unset-key (kbd "M-l"))
(global-unset-key (kbd "M-m"))
(global-unset-key (kbd "M-n"))
(global-unset-key (kbd "M-p"))
(global-unset-key (kbd "M-q"))
(global-unset-key (kbd "M-r"))
(global-unset-key (kbd "M-t"))
(global-unset-key (kbd "M-u"))
(global-unset-key (kbd "M-v"))
(global-unset-key (kbd "M-w"))
(global-unset-key (kbd "M-y"))
(global-unset-key (kbd "M-z"))
(global-unset-key (kbd "M-,"))
(global-unset-key (kbd "M-."))
(global-unset-key (kbd "H-n"))
(let ((map esc-map))
(unless (version< emacs-version "29.0")
(keymap-unset map "A-a")
(keymap-unset map "A-b")
(keymap-unset map "A-c")
(keymap-unset map "A-d")
(keymap-unset map "A-e")
(keymap-unset map "A-f")
(keymap-unset map "A-g")
(keymap-unset map "A-h")
(keymap-unset map "A-i")
(keymap-unset map "A-j")
(keymap-unset map "A-k")
(keymap-unset map "A-l")
(keymap-unset map "A-m")
(keymap-unset map "A-n")
(keymap-unset map "A-o")
(keymap-unset map "A-p")
(keymap-unset map "A-q")
(keymap-unset map "A-r")
(keymap-unset map "A-s")
(keymap-unset map "A-t")
(keymap-unset map "A-u")
(keymap-unset map "A-v")
(keymap-unset map "A-w")
(keymap-unset map "A-x")
(keymap-unset map "A-y")
(keymap-unset map "A-z")
(keymap-unset map "A-RET")
(keymap-unset map "A-DEL")
(keymap-unset map "A-SPC")
(keymap-unset map "A-.")
(keymap-unset map "A-,")
(keymap-unset map "A-/")
(keymap-unset map "A-(")
(keymap-unset map "A-=")
(keymap-unset map "A--")
(keymap-unset map "A-'")
(let ((map prog-mode-map))
  (keymap-unset map "M-q"))))
#+end_src

** emacs-webkit
:PROPERTIES:
:ID:       FD609FAA-D60B-4B3F-8B1A-55292EBC286A
:END:
https://github.com/akirakyle/emacs-webkit

Unstable, not yet on Melpa. Best to wait for a stable release.

[2022-07-24 Sun 15:53] No new commits since September 2021. [[https://github.com/akirakyle/emacs-webkit/issues/34#issuecomment-912244110][This user]] notes that it doesn't work on macOS.

** eaf
:PROPERTIES:
:ID:       4CDDA7F2-07D5-4D09-A8D5-3A271946491A
:END:
:LOGBOOK:
CLOCK: [2022-07-24 Sun 16:09]--[2022-07-24 Sun 17:21] =>  1:12
:END:
#+begin_src emacs-lisp :results silent
(use-package eaf
  :disabled
  :straight (eaf
             :type git
             :host github
             :repo "emacs-eaf/emacs-application-framework"
             :files ("*.el" "*.py" "core" "app" "*.json")
             :includes (eaf-browser) ; Straight won't try to search for these packages when we make further use-package invocations for them
             :pre-build (("python3" "install-eaf.py" "--install" "browser" "--ignore-sys-deps"))
             ))
#+end_src

** eaf-browser
:PROPERTIES:
:ID:       22BD9052-06E6-4D5F-9E72-C9A154AF6F8E
:END:
#+begin_src emacs-lisp :results silent
(use-package eaf-browser
  :config
  (setq eaf-browser-continue-where-left-off t)
  (setq browse-url-browser-function 'eaf-open-browser)
  (setq eaf-browser-enable-adblocker t)
  ;; the history file is stored in `.emacs.d/eaf/browser/history/log.txt'
  (setq eaf-browser-chrome-history-file "/Users/pablostafforini/Library/Application Support/Google/Chrome/Default/History")
  (defalias 'browse-web #'eaf-open-browser)
  (eaf-bind-key ps/kill-this-buffer "q" eaf-browser-keybinding))
#+end_src

** orgmdb
:PROPERTIES:
:ID:       504577FD-DACD-4D35-B9E6-307DF3D9BE7E
:END:
:LOGBOOK:
CLOCK: [2022-03-14 Mon 14:55]--[2022-03-14 Mon 15:13] =>  0:18
CLOCK: [2021-07-22 Thu 12:50]--[2021-07-22 Thu 12:52] =>  0:02
CLOCK: [2021-06-22 Tue 10:53]--[2021-06-22 Tue 11:28] =>  0:35
CLOCK: [2021-06-25 Fri 21:00]--[2021-06-25 Fri 21:03] =>  0:03
CLOCK: [2021-06-22 Tue 10:39]--[2021-06-22 Tue 10:53] =>  0:14
CLOCK: [2021-05-29 Sat 20:36]--[2021-05-29 Sat 21:01] =>  0:25
CLOCK: [2021-05-14 Fri 18:20]--[2021-05-14 Fri 18:24] =>  0:04
CLOCK: [2021-05-11 Tue 19:43]--[2021-05-11 Tue 20:01] =>  0:18
CLOCK: [2021-05-10 Mon 20:48]--[2021-05-10 Mon 21:10] =>  0:22
CLOCK: [2021-05-10 Mon 14:38]--[2021-05-10 Mon 14:47] =>  0:09
CLOCK: [2021-05-10 Mon 14:16]--[2021-05-10 Mon 14:17] =>  0:01
CLOCK: [2021-03-18 Thu 21:44]--[2021-03-18 Thu 21:50] =>  0:06
CLOCK: [2021-03-23 Tue 21:17]--[2021-03-23 Tue 21:41] =>  0:24
CLOCK: [2021-03-23 Tue 20:26]--[2021-03-23 Tue 21:13] =>  0:47
:END:
/[[https://github.com/isamert/orgmdb.el][orgmdb]] is an OMDb API client with some org-mode related convenience functions./

[2023-03-02 Thu 13:07] I'm using ~org-cite~ for films, too, so this is no longer relevant.

#+begin_src emacs-lisp :results silent
(use-package orgmdb
  :if (equal (system-name) ps/computer-hostname-pablo)
  :after auth-source-pass
  :defer 60
  :straight (orgmdb
             :host github
             :repo "isamert/orgmdb.el")
  :config
  (setq orgmdb-omdb-apikey (auth-source-pass-get 'secret "auth-sources/omdb"))
  (defun ps/orgdmb-see-movie-in-imdb (&optional arg)
    "Visit the IMDb page of the movie at point.

With optional prefix argument, open with eww."
    (interactive "P")
    (let ((url (concat "https://www.imdb.com/title/" (org-entry-get nil "IMDB-ID"))))
      (if arg
          (eww url)
        (browse-url url))))
  (defhydra hydra-orgmdb
    (:exit t :idle 0.5)
    "orgmdb"
    ("f" (orgmdb-fill-movie-properties nil) "Fill properties")
    ("r" (orgmdb-fill-movie-properties 4) "Fill properties and replace title")
    ("w" (ps/orgdmb-see-movie-in-imdb 4) "See in IMDb (eww)")
    ("x" (ps/orgdmb-see-movie-in-imdb) "See in IMDb (external)"))
  :general
  (org-mode-map
   ;; "s-A-g" 'hydra-orgmdb/body
   ))
#+end_src

** global-priorities-encyclopedia.org
:PROPERTIES:
:ID:       08E1895E-2E55-4CB0-BD9F-288505BB8B74
:END:
:LOGBOOK:
CLOCK: [2022-06-14 Tue 18:54]--[2022-06-14 Tue 18:58] =>  0:04
:END:

#+begin_src emacs-lisp :results silent
(defhydra global-priorities-encyclopedia
  (:exit t
         :idle 0.5)
  "Org headings: global-priorities-encyclopedia.org"
  ("a" (ps/org-id-goto "") "")
  ("b" (ps/org-id-goto "") "")
  ("c" (ps/org-id-goto "") "")
  ("d" (ps/org-id-goto "") "")
  ("e" (ps/org-id-goto "") "")
  ("f" (ps/org-id-goto "E7A7125B-F14B-44FD-AB23-59A3031F0FD9") "Fede")
  ("h" (ps/org-id-goto "") "")
  ("o" (ps/org-id-goto "") "")
  ("g" (ps/org-id-goto "") "")
  ("i" (ps/org-id-goto "") "")
  ("l" (ps/org-id-goto "A37A6AED-A64F-4845-94F1-9EE08F58DED2") "Leo")
  ("n" (ps/org-id-goto "") "")
  ("p" (ps/org-id-goto "") "")
  ("s" (ps/org-id-goto "") "")
  ("t" (ps/org-id-goto "") "")
  ("w" (ps/org-id-goto "") "")
  ("x" (ps/org-id-goto "") "")
  ("z" (ps/org-id-goto "") "")
  ("'" (ps/org-id-goto "") "")
  ("," (ps/org-id-goto "") "")
  ("." (ps/org-id-goto "") "")
  ("H-a" (ps/org-id-wiki-with-clock "a"))
  ("H-b" (ps/org-id-wiki-with-clock "b"))
  ("H-c" (ps/org-id-wiki-with-clock "c"))
  ("H-d" (ps/org-id-wiki-with-clock "d"))
  ("H-e" (ps/org-id-wiki-with-clock "e"))
  ("H-f" (ps/org-id-wiki-with-clock "f"))
  ("H-g" (ps/org-id-wiki-with-clock "g"))
  ("H-h" (ps/org-id-wiki-with-clock "h"))
  ("H-i" (ps/org-id-wiki-with-clock "i"))
  ("H-j" (ps/org-id-wiki-with-clock "j"))
  ("H-k" (ps/org-id-wiki-with-clock "k"))
  ("H-l" (ps/org-id-wiki-with-clock "l"))
  ("H-m" (ps/org-id-wiki-with-clock "m"))
  ("H-n" (ps/org-id-wiki-with-clock "n"))
  ("H-o" (ps/org-id-wiki-with-clock "o"))
  ("H-p" (ps/org-id-wiki-with-clock "p"))
  ("H-q" (ps/org-id-wiki-with-clock "q"))
  ("H-r" (ps/org-id-wiki-with-clock "r"))
  ("H-s" (ps/org-id-wiki-with-clock "s"))
  ("H-t" (ps/org-id-wiki-with-clock "t"))
  ("H-u" (ps/org-id-wiki-with-clock "u"))
  ("H-v" (ps/org-id-wiki-with-clock "v"))
  ("H-w" (ps/org-id-wiki-with-clock "w"))
  ("H-x" (ps/org-id-wiki-with-clock "x"))
  ("H-y" (ps/org-id-wiki-with-clock "y"))
  ("H-z" (ps/org-id-wiki-with-clock "z"))
  ("H-," (ps/org-id-wiki-with-clock ","))
  ("H-." (ps/org-id-wiki-with-clock "."))
  ("H-/" (ps/org-id-wiki-with-clock "/"))
  ("H-=" (ps/org-id-wiki-with-clock "="))
  ("H--" (ps/org-id-wiki-with-clock "-"))
  ("H-(" (ps/org-id-wiki-with-clock "("))
  ("H-'" (ps/org-id-wiki-with-clock "'"))
  ("H-SPC" (ps/org-id-wiki-with-clock "SPC"))
  ("H-RET" (ps/org-id-wiki-with-clock "RET"))
  ("H-TAB" (ps/org-id-wiki-with-clock "TAB"))
  )
#+end_src

** org-ql
:PROPERTIES:
:ID:       09C4BC5C-8308-497F-A8B6-B135B79AA848
:END:
:LOGBOOK:
CLOCK: [2022-04-27 Wed 18:24]--[2022-04-27 Wed 19:26] =>  1:02
CLOCK: [2021-11-21 Sun 14:20]--[2021-11-21 Sun 14:22] =>  0:02
CLOCK: [2021-07-31 Sat 15:31]--[2021-07-31 Sat 15:41] =>  0:10
CLOCK: [2021-07-26 Mon 21:36]--[2021-07-26 Mon 22:00] =>  0:24
CLOCK: [2021-07-26 Mon 21:29]--[2021-07-26 Mon 21:31] =>  0:02
CLOCK: [2021-06-13 Sun 20:52]--[2021-06-13 Sun 21:31] =>  0:39
CLOCK: [2021-05-11 Tue 12:14]--[2021-05-11 Tue 12:17] =>  0:03
CLOCK: [2021-05-10 Mon 21:10]--[2021-05-10 Mon 22:11] =>  1:01
CLOCK: [2021-05-08 Sat 21:58]--[2021-05-08 Sat 22:31] =>  0:33
CLOCK: [2021-04-07 Wed 17:51]--[2021-04-07 Wed 18:27] =>  0:36
CLOCK: [2021-04-07 Wed 17:21]--[2021-04-07 Wed 17:40] =>  0:19
CLOCK: [2021-04-02 Fri 16:45]--[2021-04-02 Fri 16:48] =>  0:03
CLOCK: [2021-03-01 Mon 15:41]--[2021-03-01 Mon 15:47] =>  0:06
CLOCK: [2021-03-01 Mon 13:46]--[2021-03-01 Mon 13:57] =>  0:11
CLOCK: [2021-02-28 Sun 19:35]--[2021-02-28 Sun 19:56] =>  0:21
CLOCK: [2021-02-28 Sun 19:07]--[2021-02-28 Sun 19:26] =>  0:19
CLOCK: [2021-02-27 Sat 09:40]--[2021-02-27 Sat 12:00] =>  2:20
CLOCK: [2021-02-06 Sat 22:52]--[2021-02-06 Sat 23:11] =>  0:19
:END:

The packages [[https://github.com/alphapapa/org-ql][org-ql]] and ~helm-org-ql~ offer blazing fast search of org headings. Previously, I used ~org-goto~ and ~org-refile~, but the initial cache build after restart took over ten seconds, and subsequently it was a choice between retaining an outdated cache or building one periodically and experiencing further delays or freezes. This is an invalauble set of packages if you have lots of org headings.

[2022-06-08 Wed 16:49] Consider migrating from ~helm-org-ql~ to [[https://www.reddit.com/r/orgmode/comments/v13ont/ann_orgqlfind_new_org_ql_command_using_emacss/][org-ql-find]] (since the former was my main reason for keeping ~helm~, this would allow me to migrate to a different completion setup).

[2022-06-22 Wed 08:11] Disabling while I explore ~consult-org-heading~.

[2022-12-31 Sat 18:37] I no longer see a need for this; instead, I use ~org-roam-node-find~ and ~consult-org-heading~.

#+begin_src emacs-lisp :results silent
(use-package org-ql
  :disabled
  :custom
  (org-ql-search-directories-files-recursive t)
  :config
  (defun ps/org-ql-find-agenda ()
    "docstring"
    (interactive)
    (org-ql-find org-agenda-files :query-prefix "!tags:ARCHIVE")))
#+end_src

** real-auto-save
:PROPERTIES:
:ID:       C81AC339-3CDB-4410-88D7-D18731145D8A
:END:

[2023-02-25 Sat 16:31] Disabling after experiencing mysterious behavior: ~real-auto-save~ would allegedly save the buffer but the buffer contents would not be actually saved to the file.

#+begin_src emacs-lisp :results silent
(use-package real-auto-save
  :disabled
  :demand t
  :custom
  (real-auto-save-interval 5))
#+end_src

** Metaculus
:PROPERTIES:
:ID:       655BDD93-46BA-4AF5-B5C8-1CDDEC4F3DCC
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-yasnippet-Metaculus
  (:exit t
         :idle 0.5)
  "Metaculus yasnippets"
  ("c" (ps/yasnippet-expand-by-key "") "sticking to current") ; bound to C-s-p, I need to find the snippet
  ("d" (ps/yasnippet-expand-by-key "mdef") "defer")
  ("f" (ps/yasnippet-expand-by-key "mfinal") "final prediction")
  ("l" (ps/yasnippet-expand-by-key "mcs") "community split")
  ("m" (ps/yasnippet-expand-by-key "mpost") "post mortem")
  ("p" (ps/yasnippet-expand-by-key "mst") "sticking to previous")
  ("s" (ps/yasnippet-expand-by-key "msheet") "spreadsheet")
  ("t" (ps/yasnippet-expand-by-key "mpass") "passage of time"))
#+end_src

** wiki-entries.org
:PROPERTIES:
:ID:       CC88D9BE-6617-4D53-BCCF-02097C2A81E1
:END:

[2023-02-21 Tue] No longer working on the Wiki.

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-wiki-entries
  (:exit t
         :idle 0.5)
  "wiki-entries.org headings"
  ("a" (ps/org-id-goto "AF906098-7A60-47D3-8C11-EBE97673E563" '(4)) "a")
  ("b" (ps/org-id-goto "F0F8744C-0729-46C3-9279-23EA29FBDC3E" '(4)) "b")
  ("c" (ps/org-id-goto "BD1484F6-57C0-4C15-A1CC-2B30C0F7271E" '(4)) "c")
  ("d" (ps/org-id-goto "9145DB82-8FEF-49BC-B7FD-5E9434AD3C09" '(4)) "d")
  ("e" (ps/org-id-goto "2E3D31FC-4796-4A3F-BDFF-F5D9653BCC24" '(4)) "e")
  ("f" (ps/org-id-goto "159BCED3-190D-403F-91C3-7D47F27CF4D1" '(4)) "f")
  ("g" (ps/org-id-goto "FDAB4C29-438E-40ED-B0A4-EB0DBBAD2913" '(4)) "g")
  ("h" (ps/org-id-goto "FF8D2857-67F5-4358-9F5A-421CA090E00D" '(4)) "h")
  ("i" (ps/org-id-goto "AB86A62C-B441-49BE-AA22-C603824AC4B4" '(4)) "i")
  ("j" (ps/org-id-goto "8231CB28-1B57-4663-8F3D-85B1CCD0F094" '(4)) "j")
  ("k" (ps/org-id-goto "8985B007-38AE-4520-9159-7326C64ED904" '(4)) "k")
  ("l" (ps/org-id-goto "A4591114-1168-4175-A52D-759497CD451D" '(4)) "l")
  ("m" (ps/org-id-goto "605014A2-FDFC-421B-9E8C-9ED6D315C091" '(4)) "m")
  ("n" (ps/org-id-goto "7720956E-2126-4869-9573-4669569C4BD0" '(4)) "n")
  ("o" (ps/org-id-goto "D908650E-91A0-4E45-9487-7EAEBE501F99" '(4)) "o")
  ("p" (ps/org-id-goto "F896D5A7-17B5-4044-9102-D8E59CD51975" '(4)) "p")
  ("q" (ps/org-id-goto "CDF9C8C4-6DE6-4898-A816-38119C1CBCDD" '(4)) "q")
  ("r" (ps/org-id-goto "D0BFC28D-2F56-4667-BFF4-E1E047E959DB" '(4)) "r")
  ("s" (ps/org-id-goto "E8841345-829B-4338-8355-4E6FF4F203E6" '(4)) "s")
  ("t" (ps/org-id-goto "961A1084-E300-49CB-AEBC-627DB628344D" '(4)) "t")
  ("u" (ps/org-id-goto "961A1084-E300-49CB-AEBC-627DB628344D" '(4)) "u")
  ("v" (ps/org-id-goto "0562CCC1-3CC2-4C43-8BEA-61BD5BBA3266" '(4)) "v")
  ("w" (ps/org-id-goto "9C1E1C22-5878-44AC-8A26-918915DA9AF9" '(4)) "w")
  ("x" (ps/org-id-goto "4AD979AA-FBEF-4640-A9B7-10186EE8BB21" '(4)) "x")
  ("y" (ps/org-id-goto "7AC51E00-0EC6-42B9-BBBC-AF9AFA466855" '(4)) "y")
  ("z" (ps/org-id-goto "8E6F4F80-1FCF-4228-B300-5BDC00F27982" '(4)) "z"))
#+end_src

** chatgpt
:PROPERTIES:
:ID:       D059F98D-55C4-4D8C-939D-3415FAC6AEB9
:END:
/[[https://github.com/joshcho/ChatGPT.el][chatgpt]] communicates with ChatGPT./

[2023-01-24 Tue] Superseded by [[id:6BA1A737-40A1-4253-8FC8-E211F6060BC9][gpt]]
#+begin_src emacs-lisp :results silent :tangle no
(use-package chatgpt
  :straight (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el"))

  :init
  (require 'python)
  (setq chatgpt-repo-path "~/.emacs.d/straight/repos/ChatGPT.el/")
  (setq chatgpt-python-interpreter "python3")

  :general
  (google-this-mode-submap
   "g" 'chatgpt-query))
#+end_src

** smartparens
:PROPERTIES:
:ID:       4CCBCEAB-AE0C-4D74-94B3-CA3AE6DCF5F0
:END:
/[[https://github.com/Fuco1/smartparens][smartparens]] is minor mode for handling parens pairs./

[2023-01-09 Mon 12:39] Replaced with [[https://github.com/AmaiKinono/puni][puni]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package smartparens
  :general
  (prog-mode-map
   "s-u" 'sp-cheat-sheet)
  :hook
  (prog-mode-hook . smartparens-mode))
#+end_src

** emacs-websearch
:PROPERTIES:
:ID:       3D76FDB6-7957-4673-8714-9580F4B6C795
:END:
[2022-12-26 Mon 20:24] I tried it as a potential substitute for [[id:437B98FC-3667-43C4-9EF6-470E23FE7561][engine-mode]], but didn't find a reason to migrate.

#+begin_src emacs-lisp :results silent
(use-package websearch)
#+end_src

** Wiki
:PROPERTIES:
:ID:       4373E661-B19D-4E6C-B7DE-C2A26619A515
:END:
:LOGBOOK:
CLOCK: [2021-12-09 Thu 22:13]--[2021-12-09 Thu 22:24] =>  0:11
CLOCK: [2021-12-06 Mon 21:43]--[2021-12-06 Mon 21:55] =>  0:12
CLOCK: [2021-05-23 Sun 22:20]--[2021-05-23 Sun 22:56] =>  0:36
CLOCK: [2021-05-20 Thu 10:58]--[2021-05-20 Thu 11:04] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(defun ps/org-append-unpublished-heading ()
  "Insert 'Unpublished' heading directly above the paragraph at
point."
  (interactive)
  (org-backward-paragraph)
  (insert "\n***** Unpublished  :noexport:")
  (org-align-all-tags))

;; [2022-07-13 Wed] Apparently not being used; delete after confirming that this is so.
;; (defun ps/org-duplicate-heading-in-wiki-published ()
;; "Create a duplicate of the heading at point or immediately above it in wiki-published.org, and a link to it at point."
;; (interactive)
;; (save-excursion
;; (ps/org-copy-heading-name)
;; (org-id-goto "A5217610-1806-4D8C-A679-617AB73DE2FF")
;; (widen)
;; (org-id-goto "A5217610-1806-4D8C-A679-617AB73DE2FF")
;; (org-insert-heading-respect-content)
;; (org-demote-subtree)
;; (org-yank)
;; (org-id-copy)
;; (ps/org-show-subtree-hide-drawers)
;; (ps/visit-file-or-switch-to-buffer paths-file-wiki-entries)
;; (ps/yasnippet-expand-by-key "wpe")
;; (current-kill 2)))

;; This may no longer necessary since org has now added doi support
(defun ps/org-format-doi-url ()
  (interactive)
  (org-narrow-to-subtree)
  (perform-replace "doi:" "http://doi.org/" nil nil nil))

;; Adapted from github.com/kaushalmodi/ox-hugo/blob/e42a824c3253e127fc8b86a5370c8d5b96a45166/ox-hugo.el#L1816-L1886
(defun ps/org-wiki-slug (str)
  "Convert string STR to a `slug' and return that string.
A `slug' is the part of a URL which identifies a particular page
on a website in an easy to read form.
Example: If STR is \"My First Post\", it will be converted to a
slug \"my-first-post\", which can become part of an easy to read
URL like \"https://example.com/posts/my-first-post/\".
In general, STR is a string.  But it can also be a string with
Markdown markup as that string passed to this function is often
the sub-headings of a post (which can contain bold, italics,
link, etc markup).
The `slug' generated from that STR follows these rules:
- Contain only lower case alphabet, number and hyphen characters
  ([[:alnum:]-]).
- Not have *any* HTML tag like \"<code>..</code>\",
  \"<span class=..>..</span>\", etc.
- Not contain any URLs (if STR happens to be a Markdown link).
- Replace \".\" in STR with \"dot\", \"&\" with \"and\",
  \"+\" with \"plus\".
- Replace parentheses with hyphens.  So \"foo (bar) baz\"
  becomes \"foo-bar-baz\".
- Replace non [[:alnum:]-] chars with spaces, and then one or
  more consecutive spaces with a single hyphen.
- At most two consecutive hyphens are allowed.
- No hyphens allowed at the leading or trailing end of the slug."
  (let* (;; All lower-case
         (str (downcase str))
         ;; Remove "<FOO>..</FOO>" HTML tags if present.
         (str (replace-regexp-in-string "<\\(?1:[a-z]+\\)[^>]*>.*</\\1>" "" str))
         ;; Remove URLs if present in the string.  The ")" in the
         ;; below regexp is the closing parenthesis of a Markdown
         ;; link: [Desc](Link).
         (str (replace-regexp-in-string (concat "\\](" ffap-url-regexp "[^)]+)") "]" str))
         ;; Replace "&" with " and ", "." with " dot ", "+" with
         ;; " plus ".
         (str (replace-regexp-in-string
               "&" " and "
               (replace-regexp-in-string
                "\\." " dot "
                (replace-regexp-in-string
                 "\\+" " plus " str))))
         ;; Replace all characters except alphabets, numbers and
         ;; parentheses with spaces.
         (str (replace-regexp-in-string "[^[:alnum:]()]" " " str))
         ;; On emacs 24.5, multibyte punctuation characters like "："
         ;; are considered as alphanumeric characters! Below evals to
         ;; non-nil on emacs 24.5:
         ;;   (string-match-p "[[:alnum:]]+" "：")
         ;; So replace them with space manually..
         (str (if (version< emacs-version "25.0")
                  (let ((multibyte-punctuations-str "：")) ;String of multibyte punctuation chars
                    (replace-regexp-in-string (format "[%s]" multibyte-punctuations-str) " " str))
                str))
         ;; Remove leading and trailing whitespace.
         (str (replace-regexp-in-string "\\(^[[:space:]]*\\|[[:space:]]*$\\)" "" str))
         ;; Replace 2 or more spaces with a single space.
         (str (replace-regexp-in-string "[[:space:]]\\{2,\\}" " " str))
         ;; Replace parentheses with hyphens.
         (str (replace-regexp-in-string "\\s-*([[:space:]]*\\([^)]+?\\)[[:space:]]*)\\s-*" " \\1 " str))
         ;; Remove any remaining parentheses character.
         (str (replace-regexp-in-string "[()]" "" str))
         ;; Replace spaces with hyphens.
         (str (replace-regexp-in-string " " "-" str))
         ;; Remove leading and trailing hyphens.
         (str (replace-regexp-in-string "\\(^[-]*\\|[-]*$\\)" "" str)))
    str))


(defun ps/create-new-wiki-entry ()
  "Create new EA Wiki entry."
  (interactive)
  (let* ((name (read-from-minibuffer "Entry name: "))
         (slug (org-hugo-slug name))
         (filename (concat slug ".org")))
    (find-file (expand-file-name filename paths-dir-wiki-entries))
    (insert "#+title: " name
            "\n[[https://forum.effectivealtruism.org/tag/" slug "][online entry]]\n")
    (ps/yasnippet-expand-by-name "wiki-new-entry-checklist")
    (org-insert-heading)
    (org-id-get-create)
    (org-schedule nil (current-time))
    (insert name)
    (org-set-tags "unprocessed:wiki")
    (org-end-of-meta-data)
    (insert "\n*" name "* is ")
    (push-mark)
    (insert "\n\n")
    (ps/yasnippet-expand-by-name "wiki-bibliography-external-related")
    (exchange-point-and-mark)))

(defun ps/create-new-hear-note ()
  "Create new HEAR note."
  (interactive)
  (let* ((name (read-from-minibuffer "Entry name: "))
         (slug (org-hugo-slug name))
         (filename (concat slug ".org")))
    (find-file (expand-file-name filename paths-dir-hear-notes))
    (insert "#+title: " name "\n\n")
    (org-insert-heading)
    (insert name "\n")
    (org-id-get-create)
    (org-back-to-heading)
    (org-set-tags "note")
    (ps/org-narrow-to-entry-and-children)))

(defun ps/org-wiki-add-datestamp-to-heading-from-clipboard ()
  "Find heading in Wiki list of articles whose name matches clipboard string and add the current date to it."

  (interactive)
  (ps/visit-file-or-switch-to-buffer paths-file-wiki-entries)
  (org-link-open-from-string (concat "[[*" (current-kill 0) "]]"))
  (org-schedule nil "today"))

(defun ps/org-export-to-ea-wiki ()
  (interactive)
  (org-narrow-to-subtree)
  (let ((org-export-show-temporary-export-buffer t))
    (org-html-export-as-html))
  ;; repair broken links
  (while (re-search-forward "\\(\\[BROKEN LINK: \\*\\)\\(.*?\\)\\(]\\)" nil t)
    (replace-match (concat "<A href=\"https://forum.effectivealtruism.org/topics/"
                           (downcase (replace-regexp-in-string "[ ,]" "-" (match-string 2))) ; replace spaces, commas with hyphens
                           "\">"
                           (match-string 2)
                           "</A>")))
  ;; repair IDs
  (goto-char 0)
  (while (re-search-forward "\\(<a href=\"[0-9A-Z_a-z-]*?\\)\\(\\.html\#ID-.\\{8\\}-.\\{4\\}-.\\{4\\}-.\\{4\\}-.\\{12\\}\\)\\(\">\\)\\(.*?\\)\\(</a>\\)" nil t)
    (replace-match (concat "<A href=\"https://forum.effectivealtruism.org/topics/"
                           (downcase (replace-regexp-in-string "[ ,]" "-" (match-string 4))) ; replace spaces, commas with hyphens
                           "\">"
                           (match-string 4)
                           "</A>")))

  ;; repair DOI links
  (goto-char 0)
  (while (re-search-forward "<a href=\"10" nil t)
    (replace-match "<a href=\"http://doi.org/10"))
  ;; promote <h> tags by one
  (setq count 3)
  (while (< count 6)
    (goto-char 0)
    (while (re-search-forward (concat "\\(\\Wh\\)\\("
                                      (number-to-string count)
                                      "\\)\\(\\W\\)")
                              nil t)
      (replace-match (concat "\\1" (number-to-string (- count 1)) "\\3")))
    (setq count (1+ count)))
  (browse-url-of-buffer)
  (sleep-for 0.5)
  (ps/kill-this-buffer)
  (ps/switch-to-last-window))

(defun ps/wiki-sort-related-entries ()
  "Sorts 'Related entries' section alphabetically."
  (interactive)
  (ps/org-narrow-to-entry-no-children)
  (goto-char 0)
  (forward-line)
  (insert "- ")
  (while (re-search-forward "[ ]*|[ ]*" nil t)
    (replace-match "\n- "))
  (org-sort-list nil ?a)
  (delete-char 2)
  (while (re-search-forward "\n- " nil t)
    (replace-match " | "))
  )
#+end_src

#+begin_src emacs-lisp :results silent
(defun ps/wiki-daily-word-count ()
  (interactive)
  (org-id-goto "6E725763-8B53-43EC-9197-C0FE7468328D")
  (widen)
  (org-id-goto "6E725763-8B53-43EC-9197-C0FE7468328D")
  (ps/org-count-words)
  (org-id-goto "A5217610-1806-4D8C-A679-617AB73DE2FF")
  (widen)
  (org-id-goto "A5217610-1806-4D8C-A679-617AB73DE2FF")
  (ps/org-count-words)
  (org-id-goto "1D51646A-8E3C-4CAC-AC00-26883FBD5365")
  (widen)
  (org-id-goto "1D51646A-8E3C-4CAC-AC00-26883FBD5365")
  (widen)
  (search-backward "TBLFM:")
  (forward-line -1)
  (org-table-insert-row `(0))
  (ps/org-time-stamp-inactive-current-date)
  (org-table-next-field)
  (org-table-next-field)
  (org-yank)
  (org-table-previous-field)
  (current-kill 1)
  (org-yank)
  (org-shifttab)
  (forward-line)
  (org-ctrl-c-ctrl-c))
#+end_src

*** DONE [#4] Modify new person command so that it removes accents from file name
CLOSED: [2024-05-14 Tue 23:15]
:PROPERTIES:
:ID:       7D683836-56EF-4B49-B577-FB73FF3C658B
:Effort:   0:40
:END:
*** Resources
:PROPERTIES:
:ID:       965413C5-F42F-4164-9BF7-CEE2C733157A
:END:
- [cite:@weakty2020HowOrgmodeRuns]

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       C426256A-7490-4DD0-8D43-DEE69AE57C62
:END:
**** DONE Fix ~ps/org-export-to-ea-wiki~
CLOSED: [2022-03-27 Sun 12:51]
:PROPERTIES:
:ARCHIVE_TIME: 2022-03-27 Sun 12:51
:ID:       E66F7B84-E6D0-48F5-ABFB-A6CCFBDBC57F
:END:
:LOGBOOK:
CLOCK: [2022-03-27 Sun 12:27]--[2022-03-27 Sun 12:37] =>  0:10
:END:
**** DONE Create function to sort related entries alphabetically
CLOSED: [2022-04-02 Sat 16:13]
:PROPERTIES:
:ARCHIVE_TIME: 2022-04-02 Sat 18:11
:ID:       C36CBE5B-D95D-4687-B45F-031A26846154
:END:
:LOGBOOK:
CLOCK: [2022-04-02 Sat 15:26]--[2022-04-02 Sat 16:13] =>  0:47
:END:


**** DONE Create command to create new person
CLOSED: [2022-05-31 Tue 11:03]
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-01 Wed 11:32
:ID:       E006B111-4486-42C4-AAFA-C18475CCD394
:END:
:LOGBOOK:
CLOCK: [2022-05-31 Tue 10:15]--[2022-05-31 Tue 11:03] =>  0:48
:END:

** org-superstar
:PROPERTIES:
:ID:       12BD56CF-07AA-4700-A07D-F36524BF8649
:END:
:LOGBOOK:
CLOCK: [2021-11-16 Tue 15:54]--[2021-11-16 Tue 16:12] =>  0:18
:END:
[2022-12-17 Sat 06:58] Replaced with [[id:FB673B28-FB6D-48EE-97B8-1E9C5D9F32FD][org-modern]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-superstar
  :custom
  (org-superstar-headline-bullets-list '(9673 9673 9673 9673))
  (org-modern-list '((42 . "○")
                                     (43 . "○")
                                     (45 . "○")))
  :hook
  (org-mode-hook . org-superstar-mode))
#+end_src

** osa-chrome
:PROPERTIES:
:ID:       5C3B8730-761F-43D1-A483-C98523D6F3AD
:END:
:LOGBOOK:
CLOCK: [2022-07-11 Mon 12:33]--[2022-07-11 Mon 12:37] =>  0:04
:END:

Requires emacs-mac.

[2022-12-14 Wed 21:52] Not using.
#+begin_src emacs-lisp :results silent :tangle no
(use-package osa-chrome
  :demand t)
#+end_src

** vlc
:PROPERTIES:
:ID:       AE13808C-BA71-4901-BC7D-16DA4D563813
:END:
:LOGBOOK:
CLOCK: [2021-05-28 Fri 19:00]--[2021-05-28 Fri 19:30] =>  0:30
CLOCK: [2021-05-28 Fri 18:18]--[2021-05-28 Fri 18:52] =>  0:34
CLOCK: [2021-04-12 Mon 20:43]--[2021-04-12 Mon 20:55] =>  0:12
CLOCK: [2021-04-12 Mon 12:42]--[2021-04-12 Mon 13:12] =>  0:30
CLOCK: [2021-04-11 Sun 17:35]--[2021-04-11 Sun 17:36] =>  0:01
CLOCK: [2021-04-11 Sun 12:28]--[2021-04-11 Sun 13:29] =>  1:01
CLOCK: [2021-04-11 Sun 11:27]--[2021-04-11 Sun 12:01] =>  0:34
CLOCK: [2021-04-11 Sun 10:20]--[2021-04-11 Sun 10:24] =>  0:04
:END:
[[https://github.com/xuchunyang/vlc.el][vlc]] lets you control the VLC media player from Emacs.

[2022-12-07 Wed] No longer using since abandoning vlc in favor of mpv.

#+begin_src emacs-lisp :results silent
(use-package vlc
  :config
  ;; from https://ag91.github.io/blog/2021/01/25/vlc-via-emacs-how-to-open-a-youtube-link/
  (defun vlc-add-uri (uri &optional noaudio novideo)
    "Add URI to playlist and start playback.
NOAUDIO and NOVIDEO are optional options. If NOAUDIO is non-nil,
disable audio. If NOVIDEO is non-nil, disable video. When called
interactively, with prefix arg, you can pick one."
    (interactive (cons (let ((uri (read-string "Add file or url: ")))
                         (if (s-starts-with-p "http" uri) uri
                           (concat "file://" (expand-file-name uri))))
                       (pcase current-prefix-arg
                         ('nil (list nil nil))
                         (_ (pcase (completing-read "Option: " '("noaudio" "novideo") nil t)
                              ("noaudio" (list t nil))
                              ("novideo" (list nil t)))))))
    (vlc-add uri noaudio novideo))

  (defun vlc-enqueue-uri (uri)
    "Add URI to playlist."
    (interactive (list (let ((uri (read-string "Add file or url: ")))
                         (if (s-starts-with-p "http" uri) uri
                           (concat "file://" (expand-file-name uri))))
                       ))
    (vlc-enqueue uri))

  (defun vlc-enqueue-uri-at-point ()
    "Add URI to playlist."
    (interactive)
    (let ((uri (thing-at-point 'url)))
      (when uri (vlc-enqueue uri))))

  (defun vlc-uris-in-clipboard ()
    (--> (with-temp-buffer
           (clipboard-yank)
           (buffer-substring-no-properties (point-min) (point-max)))
         (s-split "\n" it)
         (--filter (s-starts-with-p "http" it) it)))

  (defun vlc-enqueue-uris (uris)
    "Queue URIS to current VLC playlist."
    (interactive)
    (let ((uris (or uris (vlc-uris-in-clipboard))))
      (-each uris 'vlc-enqueue-uri)))

  ;; the formulas below were kindly shared with my by Andrea
  (defun ps/get-link-from-heading ()
    (let ((my/tmp-result))
      (save-excursion
        (ignore-errors
          (progn
            (org-narrow-to-subtree)
            (search-forward "youtu" nil 't)
            (setq my/tmp-result (org-element-property :raw-link (org-element-context)))))
        (widen))
      my/tmp-result))

  (defun ps/vlc-enqueue-all-in-heading ()
    "Enque all org links in heading at point."
    (interactive)
    (mapcar 'vlc-enqueue-uri (-remove 'null (-distinct (org-map-entries 'ps/get-link-from-heading nil 'tree)))))

  (defhydra hydra-vlc
    (:exit t
           :idle 0.5)
    "VLC commands"
    ("s" (vlc-start) "start")
    ("a" (vlc-add) "add")
    ("n" (vlc-next) "next")
    ("p" (vlc-previous) "previous")
    ("l" (ps/vlc-enqueue-all-in-heading) "enqueue all in heading")
    ("SPC" (lambda! (call-interactively #'vlc-play)) "play")
    ("k" (lambda! (call-interactively #'vlc-seek)) "seek")
    ("u" (vlc-enqueue-uri-at-point) "enqueue uri at point")
    ("RET" (lambda! (vlc-enqueue-uri-at-point) (call-interactively #'vlc-play)) "enqueue uri at point and play"))
  :general
  ("A-v" 'hydra-vlc/body))
#+end_src

- To check: https://github.com/mohkale/vlc-rc
  Main benefit would be to resume playback at a particular location, though VLC usually remembers this. Not sure how robust the VLC function is; I seem to remember that it would sometimes play from the beginning videos parts of which I had already watched.
** biblio-zotero
:PROPERTIES:
:ID:       D384FC60-56CD-4401-ADED-F2708964840F
:END:
:LOGBOOK:
CLOCK: [2022-07-16 Sat 15:40]--[2022-07-16 Sat 15:49] =>  0:09
:END:
This does the same as [[id:815B8CEA-D36D-4E47-B728-D86FEFB736DF][zotra]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package biblio-zotero
  :straight (biblio-zotero :type git :host github :repo "gkowzan/biblio-zotero")
  :after biblio
  :demand t
  :commands (biblio-zotero-insert-bibtex))
#+end_src

** doom-themes
:PROPERTIES:
:ID:       76685027-9575-48EF-982E-60148A0BD287
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package doom-themes
  :custom
  (doom-theme 'doom-gruvbox))
#+end_src

** minibuffer-line
:PROPERTIES:
:ID:       FC506575-08BF-44F6-A547-97DA1062184A
:END:
:LOGBOOK:
CLOCK: [2022-07-01 Fri 11:29]--[2022-07-01 Fri 11:34] =>  0:05
:END:
/[[https://elpa.gnu.org/packages/minibuffer-line.html][minibuffer-line]] displays status information in the minibuffer window./

[2022-10-28 Fri 22:45] Disabling since I'm now using the tab-bar to display this information.
#+begin_src emacs-lisp :results silent :tangle no
(use-package minibuffer-line
  :defer 10
  :custom
  (minibuffer-line-format '((:eval
                             (format-time-string "%F %R"))))
  (minibuffer-line-refresh-interval 30)
  :config
  (minibuffer-line-mode -1))
#+end_src
*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       C826A1C8-ABA5-4237-ACD0-460510205726
:END:
**** CANCELLED [#5] Set ~minibuffer-line-format~ spacing based on value of ~ps/monitor-type~
CLOSED: [2022-09-06 Tue 13:50]
:PROPERTIES:
:ID:       4C82FA13-9F21-4642-94B8-359AC270AFDE
:Effort:   0:25
:ARCHIVE_TIME: 2022-09-06 Tue 13:51
:END:
:LOGBOOK:
CLOCK: [2022-09-06 Tue 13:47]--[2022-09-06 Tue 13:50] =>  0:03
:END:
I no longer want to keep the time & date centered, so no need to set any custom spacing.
** consult-org-roam
:PROPERTIES:
:ID:       72C01454-CF59-41E3-A12C-DF356F2578E8
:END:
:LOGBOOK:
CLOCK: [2022-06-25 Sat 11:36]--[2022-06-25 Sat 12:46] =>  1:10
:END:
/[[https://github.com/jgru/consult-org-roam][consult-org-roam]] provides assorted convenience functions for operating [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]] with the help of [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]./

[2022-10-23 Sun 22:29] Disabling since it was interfering with ~consult-buffer~ and didn't find it useful anyway.

#+begin_src emacs-lisp :results silent :tangle no
(use-package consult-org-roam
  :defer 7
  :after (consult org-roam)
  :init
  (require 'consult-org-roam)
  ;; Activate the minor-mode
  (consult-org-roam-mode)

  :custom
  (consult-org-roam-grep-func #'consult-ripgrep)

  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
   consult-org-roam-forward-links
   :preview-key (kbd "M-.")))
#+end_src

** emacs-pubmed
:PROPERTIES:
:ID:       C957E1A2-1348-48D1-81B6-723F1B759008
:END:
:LOGBOOK:
CLOCK: [2022-07-16 Sat 15:49]--[2022-07-16 Sat 16:38] =>  0:49
:END:
/[[https://gitlab.com/fvdbeek/emacs-pubmed][emacs-pubmed]] is an Emacs interface to the PubMed database./

I don't think I need this, except for the ~scihub~ functionality. However, .[[https://emacs.stackexchange.com/questions/58861/using-org-ref-to-download-pdfs-using-sci-hub-as-a-fallback][this]] could be an alternative.

[2022-10-18 Tue 04:25] Replaced by [[id:29ABF514-563B-463D-9FDB-CF2C8AA25F83][scihub]].

#+begin_src emacs-lisp :results silent
(use-package pubmed
  :defer 10
  :commands (pubmed-search pubmed-advanced-search)
  :config
  (require 'pubmed-scihub)
  (setq pubmed-scihub-url "https://sci.hubg.org/")

  (defun ps/pubmed-scihub-save (&optional doi)
    "Download and save PDF from DOI."
    (interactive)
    (let* ((doi (or doi
                    (read-string "DOI: ")))
           (url (pubmed-scihub doi))
           (file-name (url-file-nondirectory url)))
      (unless (equal (file-name-extension file-name) "pdf")
        (setq file-name (file-name-with-extension file-name "pdf")))
      (let ((file-path (file-name-concat paths-dir-downloads file-name)))
        (url-copy-file url file-path 1)))))
#+end_src

** org-auto-tangle
:PROPERTIES:
:ID:       8EBF95D8-2E58-4EE6-90EA-644295B1B908
:END:
[2022-06-15 Wed 18:41]  I want to be able to selectively tangle parts of my config file with ~ps/org-tangle-config-file~, so auto-tangling isn't an option.

/[[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] lets you tangle an org file whenever it is saved./


#+begin_src emacs-lisp :tangle no
(use-package org-auto-tangle
  :defer 30
  :after org
  :hook
  (org-mode-hook . org-auto-tangle-mode))
#+end_src

** isearch+
:PROPERTIES:
:ID:       03CE22AA-6580-4755-9BB6-DE7DB8302E53
:END:
[2021-11-19 Fri 19:49] Disabling because it's generating an error.

[2022-06-20 Mon 22:48] Not using it.
#+begin_src emacs-lisp :results silent :tangle no
(use-package isearch+
  :general
  (isearch-mode-map
   "A-C-a" 'isearchp-toggle-regexp-quote-yank))
#+end_src

*** Archive                                                       :ARCHIVE:
:PROPERTIES:
:ID:       86320489-02F3-4DC8-A5F7-E43464D133A5
:END:
**** CANCELLED [#6] Diagnose and repair isearch+ ~C-SPC C-SPC~ error
CLOSED: [2022-06-20 Mon 22:47]
:PROPERTIES:
:Effort:   0:20
:ID:       A81336F8-303E-4888-AA14-9BCF5D1DD089
:ARCHIVE_TIME: 2022-06-20 Mon 22:47
:END:

** company-emoji
:PROPERTIES:
:ID:       EC423720-7E64-4D8B-B947-35AFC297836D
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 13:06]--[2022-05-06 Fri 13:16] =>  0:10
CLOCK: [2021-11-26 Fri 09:50]--[2021-11-26 Fri 10:23] =>  0:33
:END:

I'm no longer using company.

#+begin_src emacs-lisp :results silent :tangle no
(use-package company-emoji
  :after company
  :demand t
  :config
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)))

  ;; For when Emacs is started in GUI mode
  (--set-emoji-font nil)

  ;; Hook for when a frame is created with emacsclient
  ;; gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  (add-hook 'after-make-frame-functions '--set-emoji-font))
#+end_src

** company-statistics
:PROPERTIES:
:ID:       A393DCFE-4237-414E-AED6-D73D5B8F5EAF
:END:

[2022-10-04 Tue 00:53] I'm no longer using company.

#+begin_src emacs-lisp :results silent :tangle no
(use-package company-statistics
  :after company
  :demand t
  :hook
  (company-mode-hook . company-statistics-mode))
#+end_src

** company-flx
:PROPERTIES:
:ID:       A51FCCC5-7594-47F2-B4C4-13BF0726DCA1
:END:
/[[https://github.com/PythonNut/company-flx][company-flx]] provides flx fuzzy matching for [[id:012FDA89-1C00-410B-8A01-92F85B10C59C][company]]./

[2022-10-04 Tue 00:43] Replaced by [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package company-flx
  :after company
  :demand t
  :hook
  (company-mode-hook . company-flx-mode))
#+end_src

** company-quickhelp
:PROPERTIES:
:ID:       C9D64E35-ACDE-4931-94AD-4C9381B15299
:END:
/[[https://github.com/company-mode/company-quickhelp][company-quickhelp]] provides documentation popups for [[id:012FDA89-1C00-410B-8A01-92F85B10C59C][company]]./

[2022-10-04 Tue 00:42] Replaced by [[id:07DC5DEC-40BB-43CD-B679-9481C3691905][corfu-doc]].
#+begin_src emacs-lisp :results silent :tangle no
(use-package company-quickhelp
  :after company
  :demand t
  :custom
  (company-quickhelp-delay 0)
  :hook
  (company-mode-hook . company-quickhelp-mode))
#+end_src

** company
:PROPERTIES:
:ID:       012FDA89-1C00-410B-8A01-92F85B10C59C
:END:
:LOGBOOK:
CLOCK: [2021-11-23 Tue 21:50]--[2021-11-23 Tue 22:04] =>  0:14
CLOCK: [2021-11-23 Tue 20:29]--[2021-11-23 Tue 21:46] =>  1:17
CLOCK: [2021-07-29 Thu 19:29]--[2021-07-29 Thu 19:59] =>  0:30
CLOCK: [2021-07-17 Sat 12:32]--[2021-07-17 Sat 12:42] =>  0:10
CLOCK: [2021-07-16 Fri 22:04]--[2021-07-16 Fri 22:10] =>  0:06
CLOCK: [2021-07-16 Fri 19:08]--[2021-07-16 Fri 19:11] =>  0:03
CLOCK: [2021-06-21 Mon 17:04]--[2021-06-21 Mon 17:24] =>  0:20
CLOCK: [2021-06-21 Mon 10:30]--[2021-06-21 Mon 10:57] =>  0:27
CLOCK: [2021-06-08 Tue 18:15]--[2021-06-08 Tue 18:49] =>  0:34
CLOCK: [2021-05-20 Thu 21:51]--[2021-05-20 Thu 22:09] =>  0:18
CLOCK: [2021-04-27 Tue 11:13]--[2021-04-27 Tue 11:27] =>  0:14
:END:
[2022-10-04 Tue 00:41] Replaced by [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]].

#+begin_src emacs-lisp :results silent :tangle no
(use-package company
  :defer 25
  ;; :demand t
  :init
  ;; add yasnippet to all backends
  (defun ps/company-backend-with-yas (backends)
    "Add `:with' company-yasnippet to company BACKENDS."
    (if (and (listp backends) (memq 'company-yasnippet backends))
        backends
      (append (if (consp backends)
                  backends
                (list backends))
              '(:with company-yasnippet))))

  :custom
  (company-selection-wrap-around t)
  (company-dabbrev-downcase nil)
  (company-show-numbers t)
  (company-tooltip-limit 10)
  (company-minimum-prefix-length 2)
  (company-idle-delay 0)
  (company-echo-delay 0)
  (company-async-timeout 20)
  (company-global-modes '(not comint-mode
                              ;; eshell-mode
                              dired-mode
                              pdf-view-mode
                              ;; org-journal-mode
                              ;; org-mode
                              ;; org-msg-mode
                              ;; org-msg-edit-mode
                              ;; text-mode
                              ;; telega-chat-mode
                              ;; message-mode
                              help-mode))

  :config
  (setq company-backends '(company-capf
                           ;; company-pcomplete
                           ))
  (setq company-backends (mapcar #'ps/company-backend-with-yas company-backends))

  ;; Use the numbers 0-9 to select company completion candidates
  ;; reddit.com/r/emacs/comments/5jvawj/select_the_company_completion_candidate_by/
  (let ((map company-active-map))
    (mapc (lambda (x) (define-key map (format "%d" x)
                        `(lambda () (interactive) (company-complete-number ,x))))
          (number-sequence 0 9)))


  (defun ps/company-prog-mode ()
    "Setup `company-mode' for `prog-mode'."
    (add-to-list (make-local-variable 'company-backends)
                 '(company-keywords
                   company-files
                   ))
    (setq company-backends (mapcar #'ps/company-backend-with-yas company-backends)))

  (defun ps/company-messaging-mode ()
    "Setup `company-mode' for messaging (mail, chat, etc.)."
    (add-to-list (make-local-variable 'company-backends)
                 'company-emoji)
    (setq company-backends (mapcar #'ps/company-backend-with-yas company-backends)))

  :hook
  (after-init-hook . global-company-mode)
  (prog-mode-hook . ps/company-prog-mode)
  (message-mode-hook . ps/company-messaging-mode)
  (telega-chat-mode-hook . ps/company-messaging-mode)
  (slack-mode-hook . ps/company-messaging-mode)
  (slack-buffer-mode-hook . ps/company-messaging-mode)
  (slack-thread-message-buffer-mode-hook . ps/company-messaging-mode)
  (telega-root-mode-hook . ps/company-messaging-mode)
  (org-msg-edit-mode-hook . ps/company-messaging-mode))
#+end_src

- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/config.el][Doom Emacs Company module]]. Might be useful for ideas.

*** CANCELLED [#6] See if ~company-mode~ can be configured to change face when there's only one completion candidate when writing prose
CLOSED: [2024-05-14 Tue 23:15]
:PROPERTIES:
:Effort:   1:00
:ID:       696A4EF9-EFF1-4C12-B90A-0BFCE7434A4B
:END:
Maybe post question on Reddit or SE.
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       9BBD3FE1-8AAC-4C24-9BA0-7C4E1988134E
:END:
**** CANCELLED Report bug with org mode
CLOSED: [2021-07-06 Tue 23:27]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-06 Tue 23:27
:ID:       90EBCB82-5E7B-4623-BF1B-03D1CD5D0BBD
:END:
:STATES:
- Rescheduled from "[2021-06-25 Fri 16:00-16:30]" on [2021-06-25 Fri 16:40]
- Rescheduled from "[2021-06-22 Tue]" on [2021-06-21 Mon 22:47]
:END:
https://github.com/company-mode/company-mode/issues/1123m

This may have been solved in the current org version. Wait until I re-experience it to report.

I've decided it's not worth it.

**** DONE [#5] Diagnose why number selection isn't working
CLOSED: [2021-08-03 Tue 22:56]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-08-03 Tue 22:56
:ID:       F6977A8F-6101-43DA-9514-44AF49625E7A
:END:
:LOGBOOK:
CLOCK: [2021-08-03 Tue 22:53]--[2021-08-03 Tue 22:56] =>  0:03
:END:
It was because I was using the ~lambda!~ macro, which apparently doesn't work if preceded by ~`~.
**** DONE [#6] Fix Tony Aldon's code for having different minimum prefix length depending on whether it's code or prose
CLOSED: [2021-11-23 Tue 22:32]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-11-23 Tue 22:32
:ID:       86AED371-65A1-4738-9792-2CDF7E7489F2
:END:

** remember
:PROPERTIES:
:ID:       F828B700-4144-48F8-838C-A9744D315175
:END:
[2022-10-02 Sun 14:12] I installed this package only because I wanted to have a persistent ~*scratch*~ buffer. But I am now accomplishing this with [[id:B6CB6A6C-0BCC-4A07-9608-BDCA6184C63A][persistent scratch]].

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-feature remember
  :custom
  (remember-data-file "~/Google Drive/Apps/Emacs/notes")
  (remember-notes-buffer-name "\*scratch\*"))
#+end_src

** org-sidebar
:PROPERTIES:
:ID:       58CDC6FC-F1DE-48D2-B93E-110189DB5ECB
:END:
:LOGBOOK:
CLOCK: [2021-07-30 Fri 23:48]--[2021-07-31 Sat 00:14] =>  0:26
CLOCK: [2021-06-25 Fri 21:05]--[2021-06-25 Fri 21:14] =>  0:09
CLOCK: [2021-04-06 Tue 21:35]--[2021-04-06 Tue 21:54] =>  0:19
:END:
[2022-09-08 Thu 09:31] No longer using.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package org-sidebar
  :custom
  (org-sidebar-default-fns '(org-sidebar--todo-items))
  :config
  (defun ps/org-sidebar-toggle (&optional arg)
    "Toggle default sidebar window. If called with prefix argument, include
also upcoming items."
    (interactive "P")
    (if arg
        (progn
          (let ((org-sidebar-default-fns '(org-sidebar--upcoming-items org-sidebar--todo-items)))
            (org-sidebar-toggle)))
      (org-sidebar-toggle)))
  :general (org-mode-map
            "s-H-s" 'ps/org-sidebar-toggle
            "s-H-t" 'org-sidebar-tree-toggle))
#+end_src

** wiki-notes.org
:PROPERTIES:
:ID:       B7B8956F-08D9-49E0-873C-4513F6FD44B8
:END:

#+begin_src emacs-lisp :results silent :tangle (when (memq version '(normal)) (print paths-file-init))
(defhydra hydra-org-wiki-notes
  (:exit t
         :idle 0.5)
  "Org headings: wiki-notes.org"
  ("a" (ps/org-id-goto "D5418404-8C64-45FB-9A8F-389EFC5863D7") "Aaron")
  ("b" (ps/org-id-goto "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC") "EA Blogs")
  ("c" (ps/org-id-goto "DE373CAE-7E80-4BC0-AD13-803A468369BC") "Emacs")
  ("d" (ps/org-id-goto "AE09BAB8-5EA0-4CB0-AC5A-FF876CB9ABC5") "Entries for discussion")
  ("e" (ps/org-id-goto "91F8B865-BB88-4607-8E6B-FB00F6902DF6") "Email")
  ("f" (ps/org-id-goto "3A4E5FF6-8ACC-49AE-AE7C-F34E7A8E8853") "Feeds")
  ("h" (ps/org-id-goto "5ACC92AA-3962-43ED-BB1E-09EAA32D4F71") "changedetection")
  ("o" (ps/org-id-goto "75E10530-0363-4B2F-B2E6-F926630AD09D") "EA Forum")
  ("g" (ps/org-id-goto "4E6596D1-B924-4350-A0F7-2046BFAF5678") "Tags to process")
  ("i" (ps/org-id-goto "0E592BDD-2AA9-4079-B8BC-9FB046EEEE81") "Wikipedia watchlist")
  ("l" (ps/org-id-goto "A721B1D6-4DD7-4C91-8B6D-A707A3A0D436") "Leo")
  ("n" (ps/org-id-goto "8C50C11F-A1F3-46B4-B637-FBEA330DC5BA") "Mendeley")
  ("p" (ps/org-id-goto "8B4804E2-B1B1-41BB-B85D-769945AD57B2") "Posts and comment activity")
  ("s" (ps/org-id-goto "D9C17F29-497A-4F13-92E4-101C2F1730FB") "Slack")
  ("t" (ps/org-id-goto "207342A0-F493-4EBF-AECE-7300AD99B2A9") "Tag new entries")
  ("w" (ps/org-id-goto "5437B089-FEE2-46A7-9520-BE8E44C1FED4") "Wiki activity")
  ("x" (ps/org-id-goto "F8143BA4-2D5F-4F76-8DCC-CCE753459203") "Documents")
  ("z" (ps/org-id-goto "1F315DEA-00AF-445F-A187-ED125F9809E1") "Zotero")
  ("'" (ps/org-id-goto "6E725763-8B53-43EC-9197-C0FE7468328D") "wiki-entries.org")
  ("," (ps/org-id-goto "D134FD46-8600-4A9D-8EDA-1650364893BB") "Morning Wiki routine")
  ("." (ps/org-id-goto "DD2A4DF5-865C-439A-BEF9-48830772DF2B") "Evening Wiki routine")
  ("H-a" (ps/org-id-wiki-with-clock "a"))
  ("H-b" (ps/org-id-wiki-with-clock "b"))
  ("H-c" (ps/org-id-wiki-with-clock "c"))
  ("H-d" (ps/org-id-wiki-with-clock "d"))
  ("H-e" (ps/org-id-wiki-with-clock "e"))
  ("H-f" (ps/org-id-wiki-with-clock "f"))
  ("H-g" (ps/org-id-wiki-with-clock "g"))
  ("H-h" (ps/org-id-wiki-with-clock "h"))
  ("H-i" (ps/org-id-wiki-with-clock "i"))
  ("H-j" (ps/org-id-wiki-with-clock "j"))
  ("H-k" (ps/org-id-wiki-with-clock "k"))
  ("H-l" (ps/org-id-wiki-with-clock "l"))
  ("H-m" (ps/org-id-wiki-with-clock "m"))
  ("H-n" (ps/org-id-wiki-with-clock "n"))
  ("H-o" (ps/org-id-wiki-with-clock "o"))
  ("H-p" (ps/org-id-wiki-with-clock "p"))
  ("H-q" (ps/org-id-wiki-with-clock "q"))
  ("H-r" (ps/org-id-wiki-with-clock "r"))
  ("H-s" (ps/org-id-wiki-with-clock "s"))
  ("H-t" (ps/org-id-wiki-with-clock "t"))
  ("H-u" (ps/org-id-wiki-with-clock "u"))
  ("H-v" (ps/org-id-wiki-with-clock "v"))
  ("H-w" (ps/org-id-wiki-with-clock "w"))
  ("H-x" (ps/org-id-wiki-with-clock "x"))
  ("H-y" (ps/org-id-wiki-with-clock "y"))
  ("H-z" (ps/org-id-wiki-with-clock "z"))
  ("H-," (ps/org-id-wiki-with-clock ","))
  ("H-." (ps/org-id-wiki-with-clock "."))
  ("H-/" (ps/org-id-wiki-with-clock "/"))
  ("H-=" (ps/org-id-wiki-with-clock "="))
  ("H--" (ps/org-id-wiki-with-clock "-"))
  ("H-(" (ps/org-id-wiki-with-clock "("))
  ("H-'" (ps/org-id-wiki-with-clock "'"))
  ("H-SPC" (ps/org-id-wiki-with-clock "SPC"))
  ("H-RET" (ps/org-id-wiki-with-clock "RET"))
  ("H-TAB" (ps/org-id-wiki-with-clock "TAB"))
  )
#+end_src

#+begin_src emacs-lisp :results silent :tangle (when (memq version '(normal)) (print paths-file-init))
(defun ps/org-id-wiki-with-clock (key)
  (funcall (intern (concat "hydra-org-wiki-notes/lambda-" key "-and-exit")))
  (org-clock-in))
#+end_src

** smtpmail
:PROPERTIES:
:ID:       5C4E266E-0A98-4B4E-939C-A8268FE9795B
:END:
[2022-07-21 Thu 16:59] replaced by [[id:DDFE6DC9-A986-4E79-BF5B-A99124B65BA2][smtpmail-multi]].

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-feature smtpmail
  :custom
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-stream-type 'starttls)
  (smtpmail-smtp-service 587)
  (smtpmail-debug-info t)
  (smtpmail-debug-verbose t))
#+end_src

** org-wild-notifier
:PROPERTIES:
:ID:       672A178C-D2C3-4A2A-9B6F-19A6E2E4FF4F
:END:
I rely on phone notifications for events in my calendar, so I don't need this.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package org-wild-notifier
  :defer 10
  :config
  (org-wild-notifier-mode))
#+end_src

** buffer-move
:PROPERTIES:
:ID:       30B8A985-16FE-4D69-B53B-B3B1F8D2A19C
:END:
:LOGBOOK:
CLOCK: [2021-12-05 Sun 11:08]--[2021-12-05 Sun 11:22] =>  0:14
CLOCK: [2021-05-11 Tue 10:40]--[2021-05-11 Tue 10:44] =>  0:04
CLOCK: [2021-05-11 Tue 10:35]--[2021-05-11 Tue 10:37] =>  0:02
CLOCK: [2021-04-04 Sun 23:28]--[2021-04-04 Sun 23:33] =>  0:05
CLOCK: [2021-04-25 Sun 12:43]--[2021-04-25 Sun 13:27] =>  0:44
CLOCK: [2021-04-21 Wed 14:33]--[2021-04-21 Wed 14:38] =>  0:05
:END:
[2022-07-21 Thu 22:05] Replaced with version that requires no external dependencies.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package buffer-move
  :demand t
  :after winum
  :config
  (defun ps/buffer-move-to-other-window ()
    "Move the current buffer to the other window. If there is no
horizontal split, signal an error."
    (interactive)
    (let ((buffer-move-behavior 'move))
      (if (eq (winum-get-number) 1)
          (buf-move-right)
        (buf-move-left))))

  (defun ps/buffer-swap-with-other-buffer ()
    "Swap the current buffer and the buffer on the left of the split.
If there is no horizontal split, signal an error."
    (interactive)
    (if (eq (winum-get-number) 1)
        (buf-move-right)
      (buf-move-left)))

  :general
  ("A-M--" 'ps/buffer-move-to-other-window
   "M--" 'ps/buffer-swap-with-other-buffer))
#+end_src

** google-contacts
:PROPERTIES:
:ID:       8B9B8201-7052-4406-8187-D5F476859F6A
:END:

[2022-07-17 Sun 10:25] No longer using.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package google-contacts)
#+end_src

** Movement: 16 lines
:PROPERTIES:
:ID:       79482536-3B17-49A5-8E49-FB1D8072F1E6
:END:

[2022-07-17 Sun 09:34] For this type of movement, [[id:D83A1681-A3F0-4C70-9986-F01275320585][avy]] is much more efficient.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(general-define-key
 "A-C-s-M-," "C-u C-u <up>"
 "A-C-s-M-." "C-u C-u <down>")
#+end_src

** Movement: four lines
:PROPERTIES:
:ID:       9D064B92-5C9A-4426-9A54-1ECDCCF44802
:END:
[2022-07-17 Sun 09:34] For this type of movement, [[id:D83A1681-A3F0-4C70-9986-F01275320585][avy]] is much more efficient.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(general-define-key
 "A-C-s-M-k" "C-u <up>"
 "A-C-s-M-l" "C-u <down>")
#+end_src

** Movement: four words (disabled)
:PROPERTIES:
:ID:       85671D9D-F8EE-4811-8E18-4BB098520D68
:END:
[2022-07-17 Sun 09:34] For this type of movement, [[id:D83A1681-A3F0-4C70-9986-F01275320585][avy]] is much more efficient.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(general-define-key
 "A-C-s-M-u" "C-u A-C-s-u"
 "A-C-s-M-p" "C-u A-C-s-p")
#+end_src

** zotxt-emacs
:PROPERTIES:
:ID:       342E0030-A125-46FA-97A6-0540EC915546
:END:
:LOGBOOK:
CLOCK: [2021-07-06 Tue 12:45]--[2021-07-06 Tue 13:03] =>  0:18
:END:
[2021-07-06 Tue 12:53] I'm not sure this adds anything to ~helm-bibtex~ and ~org-ref~. I guess what I ideally want is the functionality provided by the latter packages, but with the ability to open the Zotero reference.

[2022-07-11 Mon 15:23] Moving to graveyard; not used.

#+begin_src emacs-lisp :results silent :tangle no
(use-package zotxt)
#+end_src

https://gist.github.com/andersjohansson/324a01364eb5a5435c65

** org-capture-ref
:PROPERTIES:
:ID:       1A90A85F-C707-4B2F-A104-505C5D5229C0
:END:
[[https://github.com/yantar92/org-capture-ref][org-capture-ref]] extracts metadata/bibtex info from websites for [[id:14F93A83-0BE7-42E3-891E-F6806192296B][org-capture]].

[2022-06-23 Thu 19:00] I use Zotero for generating the bibtex file, so this doesn't suit my workflow.

** centaur-tabs
:PROPERTIES:
:ID:       7364D4F3-5470-401C-AD8C-2C51FE6BD2C0
:END:
:LOGBOOK:
CLOCK: [2021-06-09 Wed 14:38]--[2021-06-09 Wed 14:46] =>  0:08
CLOCK: [2021-05-31 Mon 11:41]--[2021-05-31 Mon 11:45] =>  0:04
CLOCK: [2021-05-18 Tue 11:35]--[2021-05-18 Tue 11:56] =>  0:21
CLOCK: [2021-05-14 Fri 11:01]--[2021-05-14 Fri 11:08] =>  0:07
CLOCK: [2021-05-12 Wed 19:21]--[2021-05-12 Wed 19:39] =>  0:18
CLOCK: [2021-05-10 Mon 18:44]--[2021-05-10 Mon 19:31] =>  0:47
CLOCK: [2021-04-03 Sat 17:28]--[2021-04-03 Sat 17:35] =>  0:07
CLOCK: [2021-04-02 Fri 19:06]--[2021-04-02 Fri 19:25] =>  0:19
:END:

[2021-07-03 Sat 21:15] I eventually came to see that, although I liked the aesthetics of having a tab bar at the top, the tabs were actually not providing any useful functionality. Moreover, by arranging the tabs into distinct groups, and ordering the tabs within each group, ~centaur-tabs~ changes which buffers are shown when other buffers are killed. I spent some time customizing how tabs were grouped and sorted, but I never attained the behavior I desired. Perhaps I would have succeeded if I had spent more time, but since, as noted, I wasn't really deriving any benefit from this package, it made no sense to keep trying.

#+begin_src emacs-lisp :results silent :tangle no
(use-package centaur-tabs
  :demand t
  :custom
  (centaur-tabs-set-icons t)
  (centaur-tabs-height 18)
  (centaur-tabs-label-fixed-length 0)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-adjust-buffer-order t)
  :config
  (centaur-tabs-mode t)
  (centaur-tabs-enable-buffer-alphabetical-reordering)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

    Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ((or
        ;; (string-equal "*" (substring (buffer-name) 0 1))
        (memq major-mode '(magit-process-mode
                           magit-status-mode
                           magit-diff-mode
                           magit-log-mode
                           magit-file-mode
                           magit-blob-mode
                           magit-blame-mode
                           )))
       "Emacs")
      ((derived-mode-p 'prog-mode)
       "Editing")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-mode
                          org-src-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          diary-mode))
       "Org Mode")
      ((memq major-mode '(org-agenda-mode
                          org-agenda-clockreport-mode
                          org-agenda-log-mode))
       "Org Agenda Mode")
      ((derived-mode-p 'smudge-track-search-mode 'smudge-playlist-search-mode 'global-smudge-remote-mode 'smudge-device-select-mode)
       "Smudge")
      ((memq major-mode '(eww-mode))
       "Eww")
      ((memq major-mode '(elfeed-show-mode
                          elfeed-search-mode))
       "Elfeed")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  (defun centaur-tabs-hide-tab (x)
    "Do no to show buffer X in tabs."
    (let ((name (format "%s" x)))
      (or
       ;; Current window is not dedicated window.
       (window-dedicated-p (selected-window))
       ;; Buffer name not match below blacklist.
       (string-prefix-p "*epc" name)
       (string-prefix-p "*helm" name)
       (string-prefix-p "*Helm" name)
       (string-prefix-p "*Compile-Log*" name)
       (string-prefix-p "*lsp" name)
       (string-prefix-p "*company" name)
       (string-prefix-p "*Flycheck" name)
       (string-prefix-p "*tramp" name)
       (string-prefix-p " *Mini" name)
       (string-prefix-p "*help" name)
       (string-prefix-p "*straight" name)
       (string-prefix-p " *temp" name)
       (string-prefix-p "*Help" name)
       (string-prefix-p "*mybuf" name)
       (string-prefix-p "*Devices" name)
       (string-prefix-p "*elfeed-log*" name)
       ;; Is not magit buffer.
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name)))
       )))
  (defun ps/centaur-tabs-reload ()
    "Reload centaur-tabs so that icons are displayed with the correct background color after theme change."
    (centaur-tabs-mode 0)
    (centaur-tabs-mode 1))
  :hook
  (calc-mode-hook . centaur-tabs-local-mode)
  (calc-trail-mode-hook . centaur-tabs-local-mode)
  :general
  ("M-," 'centaur-tabs-backward
   "M-." 'centaur-tabs-forward))
#+end_src
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       1C15D463-9CF9-4174-9A38-A40956A9B9C0
:END:
**** DONE [#5] Reorganize Centaur Tab groups
CLOSED: [2021-06-07 Mon 19:21]
:PROPERTIES:
:Effort:   0:20
:ARCHIVE_TIME: 2021-06-07 Mon 19:21
:ID:       DA482CE9-A944-44FA-9CBE-EA4A755DD893
:END:
:LOGBOOK:
CLOCK: [2021-06-07 Mon 19:20]--[2021-06-07 Mon 19:21] =>  0:01
CLOCK: [2021-06-01 Tue 20:33]--[2021-06-01 Tue 20:33] =>  0:00
:END:
- One for tabs I never want to see:
  - Shell Command Output
- Org agenda together with other org buffers
  -
**** CANCELLED [#6] Group wiki buffers in separate group
CLOSED: [2021-07-24 Sat 21:33]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-07-24 Sat 21:33
:ID:       61E1516A-F102-41D9-B1FD-D7798ECC39C0
:END:
I think this can be done by using Projectile, which I'm not familiar with but should probably learn how to use anyway. [[https://github.com/ema2159/centaur-tabs/issues/30][This]] may be relevant.

** citeproc-org
:PROPERTIES:
:ID:       FDEAA0BD-9977-457A-A059-557341BD6670
:END:
:LOGBOOK:
CLOCK: [2021-07-19 Mon 11:13]--[2021-07-19 Mon 11:21] =>  0:08
:END:
This allows me to define custom citation formats using [[https://en.wikipedia.org/wiki/Citation_Style_Language][citation style language]].

[2021-07-19 Mon 11:33] Disabling since the maintainer says things will switch to the natively-supported citation system in org.

#+begin_src emacs-lisp :results silent :tangle no
(use-package citeproc-org
  :demand t)
#+end_src
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       DC6ED493-F8E3-4080-A6AB-2FF9790D06A7
:END:
** command-log-mode
:PROPERTIES:
:ID:       6740F5E0-B50D-400E-9801-341E4EE2BC90
:END:
:LOGBOOK:
CLOCK: [2021-03-27 Sat 21:17]--[2021-03-27 Sat 21:30] =>  0:13
:END:
[2021-03-29 Mon 21:14] Disabling since I get the impression it is slowing down Emacs.

#+begin_src emacs-lisp :results silent :tangle no
(require 'command-log-mode)
(global-command-log-mode 1)
(setq clm/logging-dir "~/Google Drive/Apps/Emacs/.log/")
#+end_src

** company-box
:PROPERTIES:
:ID:       CF053552-725B-4B67-ACFF-26342B642D08
:END:
:LOGBOOK:
CLOCK: [2021-11-24 Wed 11:17]--[2021-11-24 Wed 11:37] =>  0:20
CLOCK: [2021-06-29 Tue 14:33]--[2021-06-29 Tue 14:50] =>  0:17
CLOCK: [2021-05-21 Fri 07:35]--[2021-05-21 Fri 07:53] =>  0:18
:END:

[2021-07-30 Fri 23:20] Disabling since this causes weird "dead" frame to appear.

[2021-11-23 Tue 20:16] Reenabling. Trying again.

[2021-11-24 Wed 11:34] Confirmed that the "dead frame" issue persists. Replacing with ~company-quickhelp~.

#+begin_src emacs-lisp :results silent :tangle no
(use-package company-box
  ;; :defer 25
  :after company
  :custom
  (company
   (company-box-doc-delay 0)
   (company-box-show-single-candidate t)
   (company-tooltip-align-annotations t))
#+end_src

** company-jedi
:PROPERTIES:
:ID:       2CA18214-6CC6-40C6-A857-991B259ADD11
:END:
I think ~elpy~ renders this unnecessary.

#+begin_src emacs-lisp :results silent :tangle no
(use-package company-jedi
  ;; :defer 25
  :commands (company-jedi)
  :after (company python-mode))
#+end_src

** desktop
:PROPERTIES:
:ID:       6B6A970D-D6C5-455B-8233-2DF558163820
:END:
:LOGBOOK:
CLOCK: [2021-07-05 Mon 11:27]--[2021-07-05 Mon 12:03] =>  0:36
CLOCK: [2021-06-14 Mon 20:32]--[2021-06-14 Mon 20:47] =>  0:15
CLOCK: [2021-06-13 Sun 18:36]--[2021-06-13 Sun 18:45] =>  0:09
:END:
Mostly copied from [[https://protesilaos.com/dotemacs/#h:68d57dd2-4df1-4b7a-8766-231216e6cd9c][Prot]].

[2021-07-24 Sat 21:21] Removing. Too slow.

#+begin_src emacs-lisp :results silent :tangle no
(use-feature desktop
  :custom
  (desktop-dirname "~/.emacs.d/")
  (desktop-base-file-name "desktop")
  (desktop-save t)
  (desktop-missing-file-warning t)
  (desktop-files-not-to-save nil)
  (desktop-globals-to-clear nil)
  (desktop-load-locked-desktop t)
  (desktop-restore-eager 3)
  (desktop-restore-frames t)
  :config
  (desktop-save-mode 1))
#+end_src

** dired-plus
:PROPERTIES:
:ID:       A52EADEC-BB65-42B2-A727-4C9060B029ED
:END:
:LOGBOOK:
CLOCK: [2021-04-23 Fri 08:11]--[2021-04-23 Fri 09:14] =>  1:03
:END:
[[https://www.emacswiki.org/emacs/DiredPlus][Dired Plus]] enhances and extends Dired's native functionality. Not working. And probably not needed. To prevent Dired from opening a new buffer every time you navigate to a new folder, use ~a~ or ~i~ rather than ~RET~.

#+begin_src emacs-lisp :results silent :tangle no
(use-package dired+
  :straight (dired+ :type git :host github :repo "emacsmirror/dired-plus")
  :demand t
  :config
  (diredp-toggle-find-file-reuse-dir 1) ; reuses the same buffer for navigating directories
  (setq diredp-wrap-around-flag nil))
#+end_src
** dired-sidebar
:PROPERTIES:
:ID:       0F688463-263F-44BB-BDDD-A6719B674C09
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package dired-sidebar
  ;; :commands
  ;; (dired-sidebar-toggle-sidebar) ; I think this is unnecessary
  :general
  ("C-A-d" 'dired-sidebar-toggle-sidebar))
#+end_src

** elmacro
:PROPERTIES:
:ID:       03C96CC7-B209-4BCB-AC8F-E7F1EC9969B0
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:35]--[2021-06-25 Fri 21:36] =>  0:01
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package elmacro
  :general
  ("M-A-h" 'elmacro-show-last-macro))
#+end_src

** emojify
:PROPERTIES:
:ID:       E2190322-2E1A-4DED-BB19-B2EBF119C6FF
:END:
:LOGBOOK:
CLOCK: [2022-07-09 Sat 09:37]--[2022-07-09 Sat 09:56] =>  0:19
:END:
I don't think I needed, given that I use ~company-emoji~.

[2022-07-09 Sat 08:55] Enabling it to use with [[id:94F76C3D-9547-431D-93AB-8814F4218AFF][slack]].

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package emojify
  :hook
  (slack-mode-hook . emojify-mode))
#+end_src

** git-auto-commit-mode
:PROPERTIES:
:ID:       2350BB11-7490-45CF-A31C-06FE66E0FD94
:END:
:LOGBOOK:
CLOCK: [2021-02-05 Fri 16:14]--[2021-02-05 Fri 16:21] =>  0:07
:END:
#+begin_src emacs-lisp :results silent :tangle no
(use-package git-auto-commit-mode
  :demand t)
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       2FF609DA-08E9-4962-83D1-6A790A642338
:END:
**** CANCELLED [#5] Figure out why some files are not auto-pushed
CLOSED: [2021-02-05 Fri 16:14]
:PROPERTIES:
:Effort:   1:30
:ARCHIVE_TIME: 2021-02-05 Fri 22:31
:ID:       7E2CD218-EF16-4341-AFDE-C6C6B1B1ACAE
:END:
:LOGBOOK:
CLOCK: [2021-02-05 Fri 16:07]--[2021-02-05 Fri 16:14] =>  0:07
CLOCK: [2021-01-31 Sun 09:06]--[2021-01-31 Sun 09:11] =>  0:05
:END:
E.g. metaculus.org, ea.org.

[2021-01-31 Sun 09:07] It could be a time out issue, caused by a high number of commits. When this threshold is exceeded, no further pushes will be made. I recently manually pushed metaculus.org, then made a trivial change and saved the file. Then went to Gihub and could confirm that a new commit had been made with this trivial change, confirming my hypothesis. Will be observing the behavior in the coming days and then update this.

[2021-02-05 Fri 16:14] I have now decided not to use auto-push, so canceling.

**** DONE [#4] Fix git-auto-commit-mode issue where only some files are auto-committed on save
CLOSED: [2021-02-23 Tue 18:53]
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-23 Tue 22:12
:ID:       F16EA59A-93DF-4D46-B335-6671114016B6
:END:
:LOGBOOK:
CLOCK: [2021-02-23 Tue 17:55]--[2021-02-23 Tue 18:20] =>  0:25
CLOCK: [2021-02-11 Thu 16:56]--[2021-02-11 Thu 17:07] =>  0:11
:END:
[2021-02-11 Thu 16:58] I think this is because I'm saving buffers using ~save-all-buffers~ (~H-S~) rather than ~save-buffer~ (~C-s~). Whenever I use ~save-buffer~, I see a commit message in the mini-buffer, whereas this isn't always the case with ~save-all-buffers~. Make sure this is true and then post an issue on the developer's Github page.

[2021-02-12 Fri 22:47] The above is wrong. The reason some pages are not being committed is that they were auto-saved before I tried to save them manually, so the manual save does not trigger a commit event, and neither does the auto save. So I should remove git-auto-commit and instead create a key binding or, if necessary, a macro or function to quickly save all agenda files and trigger that command when I currently use ~save-all-buffers~.

[2021-02-23 Tue 18:47] I tried to disable ~git-auto-commit-mode~ but wasn't able to make [[https://emacs.stackexchange.com/a/20160][this]] function work, so the alternative was to commit manually without relying on a single key press. I find this even worse, so I'm re-enabling that package. My solution is to set ~dotspacemacs-auto-save-file-location~ to ~cache~ (rather than ~original~) so that auto-saving doesn't interfere with what files get auto-committed (otherwise if a file's most recent changes had been saved when I try to save it manually, ~git-auto-commit-mode~ will not be triggered, and hence no commits will be made).

**** CANCELLED [#3] Figure out why config file isn't auto-committing!
CLOSED: [2021-06-16 Wed 18:09]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-06-16 Wed 18:09
:ID:       8AE22A38-2014-463A-BD5F-40103DB2469E
:END:
:LOGBOOK:
CLOCK: [2021-06-16 Wed 18:07]--[2021-06-16 Wed 18:09] =>  0:02
:END:
:STATES:
- Not scheduled, was "[2021-06-16 Wed 18:00-18:30]" on [2021-06-16 Wed 18:07]
- Rescheduled from "[2021-06-16 Wed]" on [2021-06-15 Tue 22:52]
:END:
I now no longer think this should be fixed: on the contrary, it seems desirable to exclude config.org from the files that are auto-committing, since this is the one file where I would like to attach edit summaries to the commits, which I cannot do if the commits are created automatically.** org-weather
:LOGBOOK:
CLOCK: [2021-06-29 Tue 15:42]--[2021-06-29 Tue 16:17] =>  0:35
:END:
https://github.com/kautsig/org-weather

I could never make this work.

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-weather
  :demand t
  :straight (org-weather :host github :repo "kautsig/org-weather")
  :custom
  (org-weather-location "London, UK")
  :config
  (org-weather-refresh))
#+end_src

** gnus
:PROPERTIES:
:ID:       E484FDAF-0504-4AA8-B296-01B4440FF625
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 14:40]--[2021-05-29 Sat 15:10] =>  0:30
CLOCK: [2021-04-23 Fri 20:57]--[2021-04-23 Fri 21:48] =>  0:51
CLOCK: [2021-04-20 Tue 20:53]--[2021-04-20 Tue 20:55] =>  0:02
CLOCK: [2021-04-14 Wed 09:43]--[2021-04-14 Wed 09:52] =>  0:09
CLOCK: [2021-03-30 Tue 20:45]--[2021-03-30 Tue 21:45] =>  1:00
CLOCK: [2021-03-29 Mon 20:45]--[2021-03-29 Mon 20:57] =>  0:12
CLOCK: [2021-03-29 Mon 19:30]--[2021-03-29 Mon 20:02] =>  0:32
CLOCK: [2021-03-29 Mon 10:15]--[2021-03-29 Mon 10:48] =>  0:33
CLOCK: [2021-03-29 Mon 09:35]--[2021-03-29 Mon 09:51] =>  0:16
CLOCK: [2021-03-28 Sun 21:29]--[2021-03-28 Sun 22:06] =>  0:37
CLOCK: [2021-03-28 Sun 21:21]--[2021-03-28 Sun 21:26] =>  0:05
CLOCK: [2021-03-21 Sun 11:17]--[2021-03-21 Sun 11:46] =>  0:29
CLOCK: [2021-03-18 Thu 19:49]--[2021-03-18 Thu 20:02] =>  0:13
CLOCK: [2021-03-18 Thu 16:56]--[2021-03-18 Thu 17:00] =>  0:04
:END:

** goldendict
:PROPERTIES:
:ID:       3CE5ECC7-54EF-4000-8CAA-80DB6F703B5C
:END:
:LOGBOOK:
CLOCK: [2022-05-28 Sat 15:02]--[2022-05-28 Sat 15:10] =>  0:08
:END:
Crashes goldendict.
#+begin_src emacs-lisp :results silent :tangle no
(use-package goldendict)
#+end_src
** guess-language
:PROPERTIES:
:ID:       7280EF5E-6372-4AD7-8DAD-033A5C379CB7
:END:
Automatically detect language for Flyspell.

[2021-07-16 Fri 19:02] I think this is slowing things down. Also, it causes weird behavior in org-babel code blocks.

#+begin_src emacs-lisp :results silent :tangle no
(use-package guess-language
  :custom
  (guess-language-langcodes '((en . ("en" "English"))
                              (es . ("es" "Spanish"))))
  (guess-language-languages '(en es))
  (guess-language-min-paragraph-length 45)
  :hook
  (text-mode-hook . guess-language-mode))
#+end_src

** helm
:PROPERTIES:
:ID:       CA0C139F-5649-4328-B1B8-A4D3E2055E56
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 16:19]--[2022-06-21 Tue 16:20] =>  0:01
CLOCK: [2022-06-19 Sun 06:44]--[2022-06-19 Sun 07:00] =>  0:16
CLOCK: [2022-06-07 Tue 19:53]--[2022-06-07 Tue 20:30] =>  0:37
CLOCK: [2022-05-29 Sun 11:46]--[2022-05-29 Sun 12:13] =>  0:27
CLOCK: [2022-05-01 Sun 19:00]--[2022-05-01 Sun 19:34] =>  0:34
CLOCK: [2021-11-11 Thu 13:00]--[2021-11-11 Thu 13:08] =>  0:08
CLOCK: [2021-07-31 Sat 15:13]--[2021-07-31 Sat 15:31] =>  0:18
CLOCK: [2021-07-31 Sat 15:00]--[2021-07-31 Sat 15:05] =>  0:05
CLOCK: [2021-06-11 Fri 07:50]--[2021-06-11 Fri 08:06] =>  0:16
CLOCK: [2021-06-10 Thu 20:49]--[2021-06-10 Thu 21:20] =>  0:31
CLOCK: [2021-06-10 Thu 13:53]--[2021-06-10 Thu 14:01] =>  0:08
CLOCK: [2021-04-05 Mon 18:37]--[2021-04-05 Mon 18:53] =>  0:16
CLOCK: [2021-04-05 Mon 15:56]--[2021-04-05 Mon 16:17] =>  0:21
CLOCK: [2021-04-04 Sun 22:00]--[2021-04-04 Sun 22:14] =>  0:14
CLOCK: [2021-04-02 Fri 16:59]--[2021-04-02 Fri 17:11] =>  0:12
:END:
[[https://rnchzn.github.io/helm/doc/helm.html][manual]]
[[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own]]

I've considered migrating to ivy, but unfortunately Helm offers better support for org-related commands. Examples include ~helm-org-in-buffer-headings~, ~org-helm-ql~, ~org-rifle~, and others.

[2022-06-21 Tue 20:51] No longer using ~helm~.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package helm
  :demand t
  :custom
  (helm-M-x-show-short-doc t)
  (helm-truncate-lines t)
  (helm-split-window-inside-p t) ; show results at the bottom
  (helm-mode-fuzzy-match t) ; activate fuzzy matching globally (https://github.com/emacs-helm/helm/wiki/Fuzzy-matching)
  (helm-ff-file-name-history-use-recentf t)
  (helm-ff-newfile-prompt-p nil)
  (helm-ff-skip-boring-files t)
  (helm-ff-ido-style-backspace 'always)
  (helm-ff--auto-update-state t)
  (helm-M-x-fuzzy-match nil)
  ;; (helm-bookmark-show-location t)
  ;; (helm-buffers-fuzzy-matching t)
  ;; (helm-file-cache-fuzzy-match t)
  ;; (helm-imenu-fuzzy-match t)
  ;; (helm-recentf-fuzzy-match t)
  (helm-locate-command "mdfind -name %s %s") ; replace locate with spotlight on Mac
  :config
  (require 'helm-config)
  (require 'helm-for-files)
  (helm-mode 1)
  (cl-loop for ext in '("\\.elc$" "\\.py[cod]$")
           do (add-to-list 'helm-boring-file-regexp-list ext))
  (add-to-list 'helm-find-files-actions
               '("Attach files for mu4e" . ps/helm-mu4e-attach) t)

  ;; reddit.com/r/emacs/comments/3l3ukg/mu4e_and_helm_attachments/cv33w9b
  (defun ps/helm-mu4e-attach (_file)
    (gnus-dired-attach (helm-marked-candidates)))

  (defun ps/helm-ff-run-open-file-externally ()
    "Custom version of `helm-ff-run-open-file-externally'."
    (interactive)
    (with-helm-alive-p
     (helm-exit-and-execute-action 'helm-open-file-externally)))

  ;; I'm having trouble passing to `helm-exit-and-execute-action' in
  ;; the command above a custom function that is not a native Helm
  ;; action. So for the time being I'm just replacing the Helm
  ;; function itself.
  (defun helm-open-file-externally (file)
    (browse-url-of-file file))

  (advice-add 'helm-org-in-buffer-headings :before 'ps/org-widen-and-reveal)
  (advice-add 'helm-org-in-buffer-headings :after 'ps/org-narrow-to-entry-and-children)
  :general
  ("H-f" 'helm-for-files
   "H-F" 'helm-find-files
   "H-g" 'helm-google-suggest
   "H-A-b" 'helm-filtered-bookmarks
   ;; "" 'helm-all-mark-rings
   "H-A-r" 'helm-register
   "H-u" 'helm-apropos
   "M-x" 'helm-M-x
   "H-s-h" 'helm-org-in-buffer-headings)
  ((helm-read-file-map helm-find-files-map)
   "<backspace>" nil) ; disable maddening backspace behavior (absurd default!)
  (helm-map
   "s-e" 'ps/helm-ff-run-open-file-externally
   "TAB" 'helm-execute-persistent-action
   ;; Bizarrely, the two commands below scroll up/down the helm
   ;; window, i.e. the selected window, not the other window
   "A-C-s-y" 'scroll-other-window-down
   "A-C-s-h" 'scroll-other-window
   "A-C-s-t" 'helm-scroll-other-window-down
   "A-C-s-g" 'helm-scroll-other-window
   "C-k" nil
   "C-z" 'helm-select-action
   "C-v" 'helm-next-page
   "s-m" (lambda! (helm-select-nth-action 0))
   "s-," (lambda! (helm-select-nth-action 1))
   "s-." (lambda! (helm-select-nth-action 2))
   "s-j" (lambda! (helm-select-nth-action 3))
   "s-k" (lambda! (helm-select-nth-action 4))
   "s-l" (lambda! (helm-select-nth-action 5))
   "s-u" (lambda! (helm-select-nth-action 6))
   "s-i" (lambda! (helm-select-nth-action 7))
   "s-o" (lambda! (helm-select-nth-action 8))
   "s-SPC" (lambda! (helm-select-nth-action 9)))
  (helm-buffer-map
   "M-k" 'helm-buffer-run-kill-persistent))
#+end_src

- [[https://github.com/iqbalansari/dotEmacs/blob/master/config/helm.org][dotEmacs/helm.org at master · iqbalansari/dotEmacs · GitHub]]
*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       9455F2C4-CABA-411B-880D-482A09F20E7E
:END:
**** DONE Rebind Helm function keys
CLOSED: [2021-06-10 Thu 14:02]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-10 Thu 14:02
:ID:       2F27ADEC-EF38-4D93-B065-4E6122DC3EC3
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:49]--[2021-06-10 Thu 13:15] =>  0:26
:END:

**** DONE [#4] Make Helm sort results by frequency
CLOSED: [2021-11-21 Sun 18:41]
:PROPERTIES:
:Effort:   0:30
:ARCHIVE_TIME: 2021-11-21 Sun 18:41
:ID:       06897B94-76FE-46F8-96B2-D3F6B9051ACF
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 14:51]--[2021-07-31 Sat 15:00] =>  0:09
:END:
See [[https://www.reddit.com/r/emacs/comments/kitzsc/give_emacs_psychic_completion_powers_with/ggtlxce/?utm_source=reddit&utm_medium=web2x&context=3][this comment]].
**** CANCELLED Diagnose why ~mdfind~ isn't working properly when called from Emacs
CLOSED: [2022-06-21 Tue 20:52]
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-21 Tue 20:52
:ID:       B1678C17-5687-429C-9D40-AC12F20C3A0C
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 16:20]--[2022-06-21 Tue 17:00] =>  0:40
:END:
I give up. Switched to vertico+consult+embark+marginalia.
**** CANCELLED [#6] Create custom version of ~helm-for-files~ that works with narrowed buffers
CLOSED: [2022-06-21 Tue 20:52]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2022-06-21 Tue 20:52
:ID:       6B53BBEB-327E-4123-A512-04EB5D911BAF
:END:
I think the desired behavior is that point goes to the top-level heading, with all subheadings visible but not expanded.
** helm-ag
:PROPERTIES:
:ID:       D5E94E77-936F-4B85-85FC-62AE2E508CA4
:END:
[2022-06-21 Tue 20:49] Replaced by ~consult-ag~.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '(disabled)) (print paths-file-init))
(use-package helm-ag
  :general
  ("A-C-a" 'helm-ag))
#+end_src

** helm-bibtex
:PROPERTIES:
:ID:       54D9A0B5-3018-4F5D-B9A7-677E5CECA004
:END:
[2022-06-22 Wed 19:20] No longer using ~helm~.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package helm-bibtex
  :demand t
  :after bibtex-completion)
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       86815C02-16CC-406A-A005-427AFD02BC9A
:END:
**** DONE [#4] Modify 'library' capture template
CLOSED: [2021-07-31 Sat 12:51]
:PROPERTIES:
:Effort:   1:00
:ARCHIVE_TIME: 2021-07-31 Sat 12:51
:ID:       644CFF13-C079-4752-AA11-94D126480FC4
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 12:49]--[2021-07-31 Sat 12:51] =>  0:02
:END:
- [ ] Title should be a citation formatted according to ~bibtex-completion~
- [ ] Body should be an ~org-ref~ citation key.

**** DONE [#5] Tweak ~ps/bibtex-completion-export-zotero-database~ command to export old.bib
CLOSED: [2021-10-02 Sat 21:21]
:PROPERTIES:
:Effort:   0:25
:ARCHIVE_TIME: 2021-10-02 Sat 21:21
:ID:       947CB665-EE77-413D-A58A-EC96AB54B8C2
:END:
:LOGBOOK:
CLOCK: [2021-10-02 Sat 20:53]--[2021-10-02 Sat 21:22] =>  0:29
:END:

**** CANCELLED [#5] Diagnose cause of erratic duplicate 'notes' template
CLOSED: [2022-06-22 Wed 19:21]
:PROPERTIES:
:Effort:   0:25
:ID:       7B3454D7-8C2F-4F6C-81D9-E2E1E914D8F4
:ARCHIVE_TIME: 2022-06-22 Wed 19:21
:END:
:LOGBOOK:
CLOCK: [2022-02-15 Tue 13:48]--[2022-02-15 Tue 13:49] =>  0:01
:END:
I.e. if I select 'notes' on a reference that already contains notes, sometimes a duplicate template will be added.
**** CANCELLED [#4] Diagnose why loading of bibliography takes such a long time
CLOSED: [2022-06-22 Wed 19:21]
:PROPERTIES:
:Effort:   0:25
:ID:       77231999-EF60-47AE-9B3E-3CEF37EB348E
:ARCHIVE_TIME: 2022-06-22 Wed 19:21
:END:
** helm-mu
:PROPERTIES:
:ID:       580AD60B-FFEA-4DEA-8E41-B0CDB2514158
:END:
Stopped working.
#+begin_src emacs-lisp :results silent :tangle no
(use-package helm-mu
  :demand t
  :general
  ("A-M-m" 'helm-mu))
#+end_src

** helm-org-ql
:PROPERTIES:
:ID:       B0D9D5A9-D7E1-4950-9716-1B660D343C45
:END:
Replacing with ~org-ql-find~.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package helm-org-ql
  :after helm
  :config
  ;; Tweaked function so that it excludes archived headings.
  (cl-defun helm-org-ql-source (buffers-files &key (name "helm-org-ql"))
    "Return Helm source named NAME that searches BUFFERS-FILES with `helm-org-ql'."
    ;; Expansion of `helm-build-sync-source' macro.
    (helm-make-source name 'helm-source-sync
                      :candidates (lambda ()
                                    (let* ((query (org-ql--query-string-to-sexp (concat "tags: !ARCHIVE " helm-pattern)))
                                           (window-width (window-width (helm-window))))
                                      (when query
                                        (with-current-buffer (helm-buffer-get)
                                          (setq helm-org-ql-buffers-files buffers-files))
                                        (ignore-errors
                                          ;; Ignore errors that might be caused by partially typed queries.
                                          (org-ql-select buffers-files query
                                            :action `(helm-org-ql--heading ,window-width))))))
                      :match #'identity
                      :fuzzy-match nil
                      :multimatch nil
                      :nohighlight t
                      :volatile t
                      :keymap helm-org-ql-map
                      :action helm-org-ql-actions))

  (advice-add 'helm-org-ql-agenda-files :before #'ps/org-widen-and-reveal)
  (advice-add 'helm-org-ql-agenda-files :after #'ps/org-narrow-to-entry-and-children)

  :general
  (
   "H-j" 'helm-org-ql-agenda-files
   "A-H-j" 'helm-org-ql-org-directory
   )
  )
#+end_src

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       83F5DEAA-7151-4D5F-A40F-D4694A80A39A
:END:
**** DONE Check out Selectrum
CLOSED: [2021-06-13 Sun 18:23]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-13 Sun 18:23
:ID:       04639A24-3279-4F68-825B-26BFBA9EC65E
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:04]--[2021-06-10 Thu 12:08] =>  0:04
:END:
https://github.com/tpeacock19/org-ql-config

I don't see a reason to leave Helm.
**** DONE Post question about helm-org-ql recipe
CLOSED: [2021-07-18 Sun 18:35]
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-18 Sun 18:35
:ID:       1A28BA6D-20CD-4EB8-81DA-CCCFD70DA0C8
:END:
https://github.com/raxod502/straight.el/issues


I'm trying to install the [org-ql](https://github.com/alphapapa/org-ql) package with a version of `helm-org-ql` from a fork by [yantar92](https://github.com/yantar92/org-ql). Here's the recipe I'm using:

```
(use-package org-ql
:straight
(org-ql
:type git
:flavor melpa
:host github
:repo "alphapapa/org-ql"
:files (:defaults (:exclude "helm-org-ql.el"))))

(use-package helm-org-ql
:straight
(helm-org-ql
:type git
:host github
:repo "alphapapa/org-ql"
:fork (:host github
:repo "yantar92/org-ql")
:files ("helm-org-ql.el")))
```

Evaluating that code block returns the following error:

```
Warning (straight): Packages "org-ql" and "helm-org-ql" have incompatible recipes (:fork cannot be both nil and (:host github :repo "yantar92/org-ql")) Disable showing Disable logging
Warning (straight): Packages "helm-org-ql" and "org-ql" have incompatible recipes (:fork cannot be both (:host github :repo "yantar92/org-ql") and nil) Disable showing Disable logging
```

I'm not sure I understand what to do in response to this. I tried various changes that seemed sensible but none worked.

To make it work, I had to clone yantar92's repository and then use the recipe

```
(use-package helm-org-ql
:straight
(helm-org-ql
:local-repo "~/.emacs.d/local/org-ql"
:files ("helm-org-ql.el"))
```

This is okay, except that I'd like to be able to
**** DONE [#5] Restrict matching candidates to heading names
CLOSED: [2021-07-18 Sun 22:15]
:PROPERTIES:
:Effort:   0:16
:ARCHIVE_TIME: 2021-07-18 Sun 22:15
:ID:       952858A3-79A4-4396-ABD6-CC1EA205A637
:END:
:LOGBOOK:
CLOCK: [2021-07-18 Sun 18:35]--[2021-07-18 Sun 19:42] =>  1:07
:END:
I accomplished this using ~helm-imenu~.
**** DONE [#4] Sort helm org ql results by frequency
CLOSED: [2021-11-22 Mon 10:09]
:PROPERTIES:
:Effort:   0:45
:org-gcal-managed: org
:ARCHIVE_TIME: 2021-11-22 Mon 10:09
:ID:       363ED5A6-A42A-4BBC-ACD1-55AC14FEBB36
:END:
**** CANCELLED [#4] Disable fuzzy search
CLOSED: [2022-02-20 Sun 11:24]
:PROPERTIES:
:Effort:   0:30
:ID:       A5E92F57-0C75-45C3-BB4D-B7EC28D03414
:ARCHIVE_TIME: 2022-02-20 Sun 11:25
:END:
:LOGBOOK:
CLOCK: [2021-06-01 Tue 20:35]--[2021-06-01 Tue 20:40] =>  0:05
CLOCK: [2021-05-28 Fri 14:56]--[2021-05-28 Fri 15:00] =>  0:04
:END:
Enable both fuzzy search and archives with a prefix argument.

**** DONE [#4] Create custom helm-org-ql source
CLOSED: [2022-04-27 Wed 18:18]
:PROPERTIES:
:Effort:   0:50
:ID:       FF011A4C-8E3C-4717-9656-D303D9758A7B
:ARCHIVE_TIME: 2022-04-27 Wed 18:22
:END:
:LOGBOOK:
CLOCK: [2022-04-27 Wed 16:44]--[2022-04-27 Wed 18:19] =>  1:35
:END:
As suggested by Alphapapa [[https://github.com/alphapapa/org-ql/issues/210][here]].

[2021-06-13 Sun 20:55] I checked the link but I don't know enough Emacs Lisp to know what to do.

[2021-12-03 Fri 17:59] I think I now probably know enough to do it. And yantar92's fork is no longer working.

[2022-04-27 Wed 17:38] I tried tweaking this function, but strangely even just replacing the function in the source file with a verbatim replica here makes the command stop working!

[2022-04-27 Wed 18:17] Okay, I did it! But I need to modify the original function; I can't apply my usual method of creating a personal function and overriding the original with an advice. Not sure why.
**** DONE Follow up with Adam Porter on [[mu4e:msgid:alphapapa/org-ql/issues/210/1158456029@github.com][Re: [alphapapa/org-ql] Make helm-org-ql ignore archive siblings by default? (#210)]]
CLOSED: [2022-06-18 Sat 14:06] SCHEDULED: <2022-06-17 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-18 Sat 14:06
:ID:       0794EF45-CB8B-40DC-AC71-8188B78FCC57
:END:
:LOGBOOK:
CLOCK: [2022-06-18 Sat 11:22]--[2022-06-18 Sat 11:53] =>  0:31
:END:

** helm-pass
:PROPERTIES:
:ID:       27A45C51-0A2E-47B8-BA06-F9BCCCFC6680
:END:
[2022-06-21 Tue 20:50] No longer using ~helm~.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '(disabled)) (print paths-file-init))
(use-package helm-pass
  :general
  ("H-P" 'helm-pass))
#+end_src

** helm-rg
:PROPERTIES:
:ID:       EAEE284B-D54C-49A5-A523-8DA86F825B0C
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 16:07]--[2021-07-31 Sat 16:19] =>  0:12
:END:
[2022-06-21 Tue 20:44] Replaced by ~consult-ripgrep~.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '(disabled)) (print paths-file-init))
(use-package helm-rg
  :custom
  (helm-rg-default-directory paths-dir-org)
  (helm-rg-thing-at-point nil) ; do not prepopulate minibuffer
  :config
  (defun ps/helm-rg-root ()
    "Search entire hard drive."
    (interactive)
    (let ((helm-rg-default-directory "/"))
      (call-interactively #'helm-rg)))
  :general
  ("H-r" 'helm-rg
   "H-R" 'ps/helm-rg-root)
  )
#+end_src

** helm-slack
:PROPERTIES:
:ID:       E315A4AC-7265-447E-9A2E-AD24F041BECC
:END:
:LOGBOOK:
CLOCK: [2021-04-14 Wed 18:59]--[2021-04-14 Wed 19:07] =>  0:08
:END:

Not working. Seems abandoned.

#+begin_src emacs-lisp :results silent :tangle no
(use-package helm-slack
  :straight (helm-slack :type git :host github :repo "yuya373/helm-slack"))
#+end_src

** helm-swiper
:PROPERTIES:
:ID:       E2248367-B32E-4E11-8DEC-B942A9B919EC
:END:
After installing it, I realized I already have ~helm-swoop~, so I don't see a need for this. I'm keeping it for a while just in case I change my mind.

#+begin_src emacs-lisp :results silent :tangle no
(use-package swiper-helm
  :disabled
  ("C-s" 'swiper-helm))
#+end_src

** helm-swoop
:PROPERTIES:
:ID:       7BB8F4EF-B5D2-417C-90C0-D0B2BC3B4142
:END:
:LOGBOOK:
CLOCK: [2021-04-14 Wed 12:55]--[2021-04-14 Wed 13:14] =>  0:19
:END:
[2022-06-21 Tue 20:46] Migrated to ~consult~.
#+begin_src emacs-lisp :results silent :tangle (when (memq version '(disabled)) (print paths-file-init))
(use-package helm-swoop
  :custom
  (helm-swoop-pre-input-function (lambda () "")) ; do not start search with thing at point (press 'C-w' when you need it)
  :general
  ("C-a" 'helm-swoop)
  (helm-swoop-map
   "C-a" 'helm-multi-swoop-current-mode-from-helm-swoop
   "C-s" 'helm-next-line
   "C-r" 'helm-previous-line)
  (helm-multi-swoop-map
   "C-s" 'helm-next-line
   "C-r" 'helm-previous-line))
#+end_src

** helm-yasnippet
:PROPERTIES:
:ID:       E4FD1FE2-9684-4315-A235-6F1E398E0587
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:15]--[2021-06-25 Fri 21:16] =>  0:01
:END:
[2022-06-22 Wed 06:09] Replaced by [[id:437A790A-467F-46CB-9EE3-25AA91D43D89][consult-yasnippet]].

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package helm-c-yasnippet
  :after yasnippet
  :general
  ("A-C-y" 'helm-yas-complete))
#+end_src

** MacOS Contacts
:PROPERTIES:
:ID:       42394996-C7A1-4F43-99FD-5C87E2DC9E82
:END:
:LOGBOOK:
CLOCK: [2021-07-11 Sun 17:18]--[2021-07-11 Sun 18:02] =>  0:44
CLOCK: [2021-07-10 Sat 20:20]--[2021-07-10 Sat 20:35] =>  0:15
CLOCK: [2021-05-26 Wed 12:30]--[2021-05-26 Wed 12:39] =>  0:09
CLOCK: [2021-03-22 Mon 13:43]--[2021-03-22 Mon 13:54] =>  0:11
:END:

The following code block, courtesy of [[https://codeisgreat.org/writings.html][Pankaj Jangid]], doesn't require the installation of any packages, though it only works on Emacs 28. When point is on an address field of the Message mode, type a few words of the name whose email you want to insert and press ~ ~C-TAB~. The matching entry will be inserted; if multiple matches are found, they will be all displayed by your active completion system.

[2021-07-11 Sun 13:36] Freezes. Emailed the author.

[2021-07-11 Sun 22:25] The cause is async.

#+begin_src emacs-lisp :results silent :tangle no
(when (eq system-type 'darwin)
  (eval-and-compile (require 'eudcb-macos-contacts))
  (eudc-macos-contacts-set-server "localhost"))
(eval-when-compile (require 'message))
(define-key message-mode-map
  [(control ?c) (tab)] 'eudc-expand-inline)
(eval-when-compile (require 'sendmail))
(define-key mail-mode-map
  [(control ?c) (tab)] 'eudc-expand-inline)
#+end_src

To manage contacts within Emacs, I should check out [[https://www.gnu.org/software/hyperbole/][Hyperbole]]. Ideally I'd like my contacts to be synched bidirectionally with MacOS Contacts, because Google Contacts also syncs with them (which I use on my phone and on Gmail).

** Metaculus
:PROPERTIES:
:ID:       DC5340DF-AD35-4561-B815-E34CFE48EE4D
:END:
:LOGBOOK:
CLOCK: [2021-03-07 Sun 18:57]--[2021-03-07 Sun 19:01] =>  0:04
:END:

#+begin_src emacs-lisp :results silent :tangle no
(defun ps/switch-to-custom-id ()
  (interactive)
  (org-link-open-from-string (concat "[[#" (current-kill 0) "]]"))
  (ps/org-narrow-to-entry-and-children))
(defun ps/metaculus-first-question ()
  (interactive)
  (org-agenda-goto)
  (org-clock-in nil)
  (end-of-buffer nil)
  (left-char 2)
  (link-hint-open-link-at-point))
(defun ps/metaculus-next-question ()
  (interactive)
  (other-window 1)
  (org-agenda-todo "DONE")
  (org-agenda-next-line)
  (org-agenda-goto)
  (org-clock-in nil)
  (evil-goto-line nil)
  (org-open-at-point nil))
(defun ps/metaculus-next-question-defer ()
  (interactive)
  (other-window 1)
  (org-agenda-do-date-later 4)
  (org-agenda-next-line)
  (org-agenda-goto)
  (org-clock-in nil)
  (evil-goto-line nil)
  (org-open-at-point nil))
(defun ps/metaculus-next-question-keep-date ()
  (interactive)
  (other-window 1)
  (org-agenda-next-line)
  (org-agenda-goto)
  (org-clock-in nil)
  (evil-goto-line nil)
  (org-open-at-point nil))
#+end_src


#+begin_src emacs-lisp :results silent :tangle no
(global-set-key (kbd "C-H-M-c") 'ps/switch-to-custom-id)
(global-set-key (kbd "s-A-f") 'ps/metaculus-first-question)
(global-set-key (kbd "s-A-n") 'ps/metaculus-next-question)
(global-set-key (kbd "C-S-s-n") 'ps/metaculus-next-question-defer)
(global-set-key (kbd "C-H-A-s-n") 'ps/metaculus-next-question-keep-date)
#+end_src
** mini-modeline
:PROPERTIES:
:ID:       E0449F7C-CAB5-417C-AF42-F7859F4A4E94
:END:

I would like to have /both/ the regular modeline and a mini modeline. Unfortunately, enabling the mini modeline disables the regular modeline. So this is disabled.

#+begin_src emacs-lisp :results silent :tangle no
(use-package mini-modeline
  :config
  (mini-modeline-mode t))
#+end_src

** notmuch
:PROPERTIES:
:ID:       98B1D39A-3AFA-4F79-B738-91E35463425A
:END:
:LOGBOOK:
CLOCK: [2021-05-26 Wed 18:11]--[2021-05-26 Wed 18:51] =>  0:40
CLOCK: [2021-05-26 Wed 17:28]--[2021-05-26 Wed 17:46] =>  0:18
CLOCK: [2021-05-18 Tue 21:22]--[2021-05-18 Tue 22:33] =>  1:11
CLOCK: [2021-04-10 Sat 21:40]--[2021-04-10 Sat 21:58] =>  0:18
:END:
- [[https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/][Emacs, Notmuch, isync, and msmtp Setup · jonathanchu.is]]
- [[https://github.com/or/spacemail][GitHub - or/spacemail: Mail setup using offlineimap, notmuch, and spacemacs]]
- [[https://www.youtube.com/watch?v=GlrsoIwJ-UM][Using Emacs Episode 64 - notmuch - YouTube]]
- [[https://www.reddit.com/r/emacs/comments/gc7h2p/mu4e_and_gmail_deleting_a_message_from_both_inbox/fpaa4pi/?utm_source=reddit&utm_medium=web2x&context=3][mu4e and Gmail -- Deleting a message from both INBOX and "All Mail" : emacs]]
  Provides a detailed config. Looks very helpful.
- [[https://johngodlee.github.io/2018/07/15/mutt.html][Gmail on macOS command line: neomutt + offlineimap + notmuch + pass + vim + launchd (brew services) + w3m | John L. Godlee]]
  Very detailed offlineimap config. A bit overwhelming.
- [[https://jherrlin.github.io/posts/emacs-mu4e/][Mail in Emacs with mu4e and mbsync | jherrlin]]
- [[https://forsooth.org/posts/email-in-spacemacs/index.html][Email in spacemacs | forsooth!]]
  Has a method for using the MacOS key ring rather than GPG

** org-mac-ical
:PROPERTIES:
:ID:       ECD7C641-8B5A-4B18-BCA7-155A850F77F9
:END:
:LOGBOOK:
CLOCK: [2021-03-17 Wed 16:04]--[2021-03-17 Wed 16:40] =>  0:36
CLOCK: [2021-03-17 Wed 16:01]--[2021-03-17 Wed 16:03] =>  0:02
:END:
https://orgmode.org/worg/org-contrib/org-mac-iCal.html

Disabling to see if this was slowing things down.

[2021-03-17 Wed 16:35] I tried to make it work but I failed. The package hasn't been updated in a while and it's likely that changes to newer Mac versions have broken something. I also tried installing [[https://github.com/ndw/org-mac-iCal][this fork]], but I don't know how to install packages manually on Spacemacs. Separately, I think this package is causing problems with org agenda: when I restart Emacs, I often get an error message saying that one of my agenda files couldn't be found. Overall, trying any further doesn't seem worth the hassle; just look for an alternative or, if nothing suitable exists, wait until something develops it.

#+begin_src emacs-lisp :results silent :tangle no
(add-to-list 'org-modules 'org-mac-iCal)
#+end_src

#+begin_src emacs-lisp :results silent :tangle no
(setq diary-file "~/Dropbox/org/diary")
#+end_src

** org-mac-link
:PROPERTIES:
:ID:       CA982498-98D2-4C42-96DE-F41DF811F0A9
:END:
:LOGBOOK:
CLOCK: [2021-07-03 Sat 23:19]--[2021-07-03 Sat 23:29] =>  0:10
:END:
https://orgmode.org/worg/org-contrib/org-mac-link.html
[2021-07-14 Wed 08:40] Moving to graveyard: doesn't work reliably, and I don't really need it anyway.

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-mac-link
  :straight org-contrib)
#+end_src
** org-recent-headings
:PROPERTIES:
:ID:       B56DE2B8-1966-45D6-9685-E5112F2B574A
:END:
:LOGBOOK:
CLOCK: [2021-08-09 Mon 12:49]--[2021-08-09 Mon 12:49] =>  0:00
:END:
I wasn't really using it.
#+begin_src emacs-lisp :results silent :tangle no
(use-package org-recent-headings
  :demand t
  :config (org-recent-headings-mode))

(use-package helm-org-recent-headings
  :after org-recent-headings
  :general
  ("H-A-j" 'helm-org-recent-headings))
#+end_src
** org-ref
:PROPERTIES:
:ID:       35FB5BB5-6552-48C6-983A-F90011CCA908
:END:
:LOGBOOK:
CLOCK: [2022-06-18 Sat 15:29]--[2022-06-18 Sat 15:50] =>  0:21
CLOCK: [2021-11-06 Sat 18:29]--[2021-11-06 Sat 19:02] =>  0:33
CLOCK: [2021-09-21 Tue 21:41]--[2021-09-21 Tue 21:47] =>  0:06
CLOCK: [2021-08-09 Mon 13:55]--[2021-08-09 Mon 14:01] =>  0:06
CLOCK: [2021-07-27 Tue 18:51]--[2021-07-27 Tue 19:36] =>  0:45
CLOCK: [2021-07-25 Sun 15:42]--[2021-07-25 Sun 15:54] =>  0:12
CLOCK: [2021-07-08 Thu 21:39]--[2021-07-08 Thu 21:54] =>  0:15
CLOCK: [2021-07-06 Tue 13:06]--[2021-07-06 Tue 13:17] =>  0:11
CLOCK: [2021-07-04 Sun 13:42]--[2021-07-04 Sun 14:30] =>  0:48
CLOCK: [2020-09-10 Thu 10:07]--[2020-09-10 Thu 10:10] =>  0:03
CLOCK: [2020-08-16 Sun 19:02]--[2020-08-16 Sun 19:54] =>  0:52
CLOCK: [2020-08-16 Sun 18:34]--[2020-08-16 Sun 18:59] =>  0:25
CLOCK: [2020-08-16 Sun 18:22]--[2020-08-16 Sun 18:30] =>  0:08
:END:

have a single notes file, rather than one file per note. I address this by replacing the  org-ref command to create a note with the bibtex-completion equivalent (see
[cite:@80000Hours2021EffectiveAltruismTen]

[2022-06-22 Wed 15:51] Migrating to [[id:35FB5BB5-6552-48C6-983A-F90011CCA908][org-ref]] and [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]]; no longer needed.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
  (use-package org-ref
    :demand t
    :after (helm-bibtex bibtex-completion)
    :custom
    (org-ref-csl-default-style (expand-file-name "org-mode.csl" paths-dir-wiki-references))
    (org-ref-default-bibliography bibtex-completion-bibliography)
    (org-ref-bibliography-notes bibtex-completion-notes-path)
    (org-ref-pdf-directory paths-dir-downloads)

    ;; Make Helm-bibtex use file path specified in bibtex entry
    ;; See emacs.stackexchange.com/a/58248/32089
    (org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)

    ;; set up LaTeX to work with org-ref (https://nickgeorge.net/science/org_ref_setup/)
    (org-latex-pdf-process
     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "bibtex %b"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    ;; set org-ref to create one file per note
    (org-ref-notes-function 'org-ref-notes-function-many-files)
    (org-ref-notes-directory paths-dir-bibliographic-notes)

    ;; Added after upgrade to version 3
    (org-ref-insert-link-function 'org-ref-insert-link-hydra/body)
    (org-ref-insert-cite-function 'org-ref-cite-insert-helm)
    (org-ref-insert-label-function 'org-ref-insert-label-link)
    (org-ref-insert-ref-function 'org-ref-insert-ref-link)
    (org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

    :config
    (require 'org-ref-helm)
    (defun ps/org-ref-at-point (url field)
      (interactive)
      (browse-url
       (url-encode-url
        (format
         url
         (bibtex-completion-get-value
          field
          (bibtex-completion-get-entry (org-ref-get-bibtex-key-under-cursor)))))))

    (defun ps/org-ref-zotero-at-point ()
      (interactive)
      (ps/org-ref-at-point "zotero://select/items/0_%s" "zotero"))

    (defun ps/org-ref-goodreads-at-point ()
      (interactive)
      (ps/org-ref-at-point "https://www.goodreads.com/search?q=%s" "isbn"))

    (defun ps/org-ref-amazon-at-point ()
      (interactive)
      (ps/org-ref-at-point "https://www.amazon.com/s?k=%s" "isbn"))

    (defun ps/org-ref-wikipedia-at-point ()
      (interactive)
      (ps/org-ref-at-point "https://en.wikipedia.org/w/index.php?search=%s" "title"))

    ;; Not working. Not sure why.
    (defun ps/org-ref-open-pdf-at-point-externally ()
      "Open pdf with default MacOS application."
      (interactive)
      (let ((org-file-apps '(("\\.pdf\\'" . default)))
            (bibtex-completion-pdf-open-function '(lambda (fpath) (start-process "open" "*open*" "open" fpath))))
        (org-ref-open-pdf-at-point)))

    (defun ps/org-ref-copy-pdf-filename ()
      (interactive)
      (kill-new (org-ref-get-pdf-filename-bibtex-completion (org-ref-get-bibtex-key-under-cursor))))

    (defun ps/org-ref-copy-bibtex-key ()
      (interactive)
      (kill-new (car (org-ref-get-bibtex-key-and-file))))

    (defun ps/org-ref-paste-bibtex-key ()
      (interactive)
      (org-ref-insert-key-at-point (car kill-ring)))
    (require 'doi-utils)

    (defun ps/org-ref-cite-insert-helm-after-export (&optional arg)
      "Export Zotero database before running `org-ref-cite-insert-helm'. If invoked with
  prefix argument, export old database as well."
      (interactive "P")
      (if arg
          (ps/bibtex-completion-export-zotero-database '(4)))
      (ps/bibtex-completion-export-zotero-database)
      (org-ref-cite-insert-helm))

    (defun ps/org-ref-pdf-effort-estimate ()
      "Assign effort estimate based on word count."
      (interactive)
      (when-let* ((key (org-ref-get-bibtex-key-under-cursor))
                  (pdf (dolist (string (bibtex-completion-find-pdf key))
                         (when (string-match-p "\\.pdf$" string)
                           (cl-return string))))
                  (words (string-to-number
                          (shell-command-to-string
                           (format "pdftotext '%s' - | wc -w" pdf))))
                  (wpm 250) ; <- your reading speed
                  (minutes (/ words wpm)))
        (org-back-to-heading)
        (org-set-effort nil (org-duration-from-minutes minutes))))

    :general
    ("H-/" 'org-ref-cite-insert-helm
     "A-H-M-s-?" 'ps/org-ref-cite-insert-helm-after-export) ; command + ? intercepted by OSX
    (org-ref-citation-hydra/keymap
     "," 'ps/org-ref-copy-pdf-filename
     "a" 'ps/org-ref-amazon-at-point
     "c" 'ps/org-ref-copy-bibtex-key
     ;; "n" (lambda! (bibtex-completion-edit-notes (org-ref-get-bibtex-keys)))
     "g" 'ps/org-ref-goodreads-at-point
     "s" 'org-ref-google-scholar-at-point
     "P" 'ps/org-ref-open-pdf-at-point-externally
     "l" 'ps/bibtex-completion-replace-heading-with-bibliographic-info
     ;; "v" 'ps/org-ref-paste-bibtex-key
     ;; "w" 'ps/org-ref-wikipedia-at-point
     "z" 'ps/org-ref-zotero-at-point))
#+end_src
- [[https://www.anand-iyer.com/blog/2017/research-literature-management-with-emacs.html][Research Literature Management with Emacs | Anand Iyer]]
- [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/d2l16uj/][Help me with my org-mode workflow for note-taking? : emacs]]. See top-rated comment.
- [[https://emacs.stackexchange.com/questions/58861/using-org-ref-to-download-pdfs-using-sci-hub-as-a-fallback][org ref - Using org-ref to download pdfs using sci-hub as a fallback - Emacs Stack Exchange]]
- [[https://github.com/jkitchin/org-ref/issues/426][How to customize the format of Bibtexkey? · Issue #426 · jkitchin/org-ref]]
- [[https://github.com/dangom/org-thesis/blob/master/org-init.el#L384][org-thesis/org-init.el at master · dangom/org-thesis]]. Copy lines for defaulting to scihub.
- [[https://nickgeorge.net/science/org_ref_setup/][Setting up and configuring org-ref]]
- [[https://beepb00p.xyz/pkm-search.html][Building personal search infrastructure for your knowledge and code | beepb00p]]
- [[https://org-roam.discourse.group/t/workflow-for-working-with-pdfs/103][Workflow for working with PDFs - How To / Guides - Org-roam]]

*** Archive                                                                                                           :ARCHIVE:
:PROPERTIES:
:ID:       AAF59F35-F20F-4DBD-87BE-100D331F714A
:END:
**** DONE [#6] Set org-ref to use sci-hub by default
CLOSED: [2021-06-18 Fri 15:14]
:PROPERTIES:
:Effort:   0:45
:ARCHIVE_TIME: 2021-06-18 Fri 15:14
:ID:       4FA1ED56-15AD-4353-B0E6-D5B899117035
:END:
:LOGBOOK:
CLOCK: [2021-06-18 Fri 15:05]--[2021-06-18 Fri 15:14] =>  0:09
CLOCK: [2020-08-30 Sun 17:02]--[2020-08-30 Sun 17:17] =>  0:15
:END:
[[https://www.reddit.com/r/emacs/comments/fsjins/managing_my_annotated_bibliography_with_org_mode/fm2ugqo/?utm_source=reddit&utm_medium=web2x&context=3][This comment]] describes a possible implementation. Though I seem to recall seeing a way of configuring org-ref itself so that all its queries are by default done on Sci-Hub.
@Article{North_2019,
author       = {North, Ace R. and Burt, Austin and Godfray, H.
Charles J.},
title	       = {Modelling the potential of genetic control of
malaria mosquitoes at national scale},
journal      = {BMC Biology},
year	       = 2019,
volume       = 17,
number       = 1,
month	       = {Mar},
issn	       = {1741-7007},
doi	       = {10.1186/s12915-019-0645-5},
url	       = {http://dx.doi.org/10.1186/s12915-019-0645-5},
publisher    = {Springer Science and Business Media LLC}
}


https://emacs.stackexchange.com/questions/29309/how-to-debug-emacs-connection-problems
**** DONE Format bibtex keys properly
CLOSED: [2021-06-19 Sat 19:09]
:PROPERTIES:
:ARCHIVE_TIME: 2021-06-19 Sat 19:09
:ID:       E54B365A-57F9-46B0-B927-C83E5201FFAC
:END:
:LOGBOOK:
CLOCK: [2021-06-19 Sat 19:02]--[2021-06-19 Sat 19:09] =>  0:07
CLOCK: [2021-06-19 Sat 18:20]--[2021-06-19 Sat 18:30] =>  0:10
:END:
**** DONE [#5] Create function to assign effort estimate based on pdf word count
CLOSED: [2022-06-06 Mon 10:14]
:PROPERTIES:
:Effort:   1:40
:ARCHIVE_TIME: 2022-06-06 Mon 10:14
:ID:       FA92C479-F6C3-43FC-B5E4-46F660AE974A
:END:
:LOGBOOK:
CLOCK: [2022-05-30 Mon 05:05]--[2022-05-30 Mon 05:24] =>  0:19
CLOCK: [2021-12-13 Mon 18:19]--[2021-12-13 Mon 18:50] =>  0:31
CLOCK: [2021-12-13 Mon 17:16]--[2021-12-13 Mon 18:12] =>  0:56
:END:
**** CANCELLED [#6] Tweak org-ref hydra
CLOSED: [2022-06-22 Wed 19:20]
:PROPERTIES:
:Effort:   0:30
:ID:       89C319C0-4336-4585-AA02-EA97A747CB62
:ARCHIVE_TIME: 2022-06-23 Thu 08:39
:END:
Currently I've defined the key mappings but have not updated the menu to reflect these new definitions.
** org-rifle
:PROPERTIES:
:ID:       AA8E94F1-9D18-44E0-A45A-15BD28CF85F1
:END:
:LOGBOOK:
CLOCK: [2021-03-01 Mon 09:45]--[2021-03-01 Mon 09:58] =>  0:13
:END:

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package helm-org-rifle
  :general
  (org-mode-map
   "s-A-r" 'helm-org-rifle-org-directory))
#+end_src

** org-super-agenda
:PROPERTIES:
:ID:       C51B234E-FAC3-4B57-AC69-DFEA3EB52C1A
:END:
I never found the need to use this.

#+begin_src emacs-lisp :results silent :tangle no
(use-package org-super-agenda
  :after org-agenda
  :custom
  (org-super-agenda-groups
   '((:auto-property "STYLE")))
  :config
  (org-super-agenda-mode))
#+end_src

** quelpa
:PROPERTIES:
:ID:       85E17700-FE49-4668-85C8-BD782FADE946
:END:
:LOGBOOK:
CLOCK: [2021-05-20 Thu 20:56]--[2021-05-20 Thu 21:19] =>  0:23
CLOCK: [2021-05-15 Sat 09:40]--[2021-05-15 Sat 11:32] =>  1:52
CLOCK: [2021-05-14 Fri 14:38]--[2021-05-14 Fri 14:55] =>  0:17
CLOCK: [2021-04-03 Sat 19:35]--[2021-04-03 Sat 20:18] =>  0:43
:END:
/I am no longer using Quelpa. This subtree is kept for historical purposes only. The code blocks below are not tangled./

- If statistics is enabled (see below), use package can produce very useful reports. Invoke ~use-package-report~, then press ~S~ with point on the 'Time' column to sort the packages by time; pressing the key again reverses the sort order.
- [[https://jwiegley.github.io/use-package/keywords/][Keywords — use-package]]
- Useful Reddit thread: [[https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/][use-package Best Practices : emacs]]

For reasons I don't understand, the below formula throws an error message. I can make it work by removing the ~unless~ condition, but then it will load on startup every time, slowing down Emacs considerably.

#+begin_src emacs-lisp :results silent :tangle no
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
(setq quelpa-checkout-melpa-p nil
      quelpa-update-melpa-p nil)
#+end_src

#+begin_src emacs-lisp :results silent :tangle no
(quelpa '(quelpa-use-package
          :fetcher github
          :repo "quelpa/quelpa-use-package"))

(require 'quelpa-use-package)
#+end_src

** request
:PROPERTIES:
:ID:       23542939-8E88-43C6-8696-C7BCAAC2A937
:END:

This is needed for some [[id:DCD9D75D-7814-49D8-A3E0-33846D5A08FD][bibtex-completion]] functions.

[2022-06-23 Thu 08:32] No longer using [[id:DCD9D75D-7814-49D8-A3E0-33846D5A08FD][bibtex-completion]].

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package request
  :demand t
  :after bibtex-completion)
#+end_src
** selected
:PROPERTIES:
:ID:       BCC2F8F6-B790-4E90-876F-4A3532063BD8
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:14]--[2021-06-25 Fri 21:15] =>  0:01
CLOCK: [2021-04-06 Tue 16:19]--[2021-04-06 Tue 16:26] =>  0:07
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package selected
  :commands
  (selected-minor-mode)
  :custom
  (selected-org-mode-map (make-sparse-keymap))
  :config
  (selected-global-mode)
  :general
  (selected-keymap
   "<down>" 'move-text-down
   "<up>" 'move-text-up
   "/" 'undo-in-region
   "c" 'capitalize-region
   "d" 'downcase-region
   "D" 'delete-duplicate-lines
   "g" 'helm-google-suggest
   "m" 'apply-macro-to-region-lines
   "n" 'move-text-down
   "p" 'move-text-up
   "q" 'selected-off
   "s" 'sort-lines
   "u" 'upcase-region
   "w" 'count-words-region)
  (selected-org-mode-map
   "t" 'org-table-convert-region
   "-" 'org-ctrl-c-minus))
#+end_src
** spotlight
:PROPERTIES:
:ID:       2AAD3586-2010-4206-B912-BB13BD42A4F5
:END:
Not needed since ~consult-locate~ can be configured to call ~mfind~.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package spotlight)
#+end_src

** undo-tree
:PROPERTIES:
:ID:       BF2A8163-F19A-4780-A2B8-E501CC7CDBE2
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:16]--[2021-06-25 Fri 21:17] =>  0:01
CLOCK: [2021-05-15 Sat 22:26]--[2021-05-15 Sat 22:30] =>  0:04
:END:

#+begin_src emacs-lisp :results silent :tangle no
(use-package undo-tree
  :demand t
  :config
  (global-undo-tree-mode)
  :general
  (undo-tree-map
   "C-/" nil
   "H-z" nil
   "H-Z" nil
   "H-A-z" 'undo-tree-visualize))
#+end_src

** ya-org-capture
:PROPERTIES:
:ID:       48B9914C-0E5D-4E91-B309-212D0D53ED6B
:END:

Since I don't use yankpad, I don't need this package either.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package ya-org-capture
  :straight (ya-org-capture
             :host github
             :repo "ag91/ya-org-capture")
  :after yankpad
  :config
  (ya-org-capture/setup))
#+end_src

** yankpad
:PROPERTIES:
:ID:       FCC4AA49-E12C-416E-B25C-D754750607A3
:END:
https://github.com/Kungsgeten/yankpad
I don't really see the need for this. I'm happy with have separate files for my snippets.

#+begin_src emacs-lisp :results silent :tangle (when (memq version '()) (print paths-file-init))
(use-package yankpad)
#+end_src

** local variables
:PROPERTIES:
:ID:       6DF33C54-12B6-41B2-AF16-B7C61CCA5CDA
:END:
# Local Variables:
# eval: (files-extras-buffer-local-set-key (kbd "H-;") 'hydra-org-config/body)
# eval: (files-extras-buffer-local-set-key (kbd "s-a") 'org-archive-hierarchically)
# eval: (add-hook 'before-save-hook 'org-make-toc nil t)
# eval: (flycheck-mode -1)
# doom-modeline-enable-word-count: nil
# End:
