#+title: vulpea-extras: Extensions for Vulpea
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: vulpea-extras.info
#+texinfo_filename: vulpea-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Vulpea Extras: (vulpea-extras)
#+texinfo_dir_desc: Extensions for Vulpea

This manual describes the features and customization options for the Emacs Lisp file =vulpea-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=vulpea-extras.el= provides extensions for the =vulpea= package, which integrates Org Roam notes with the Org agenda. These extensions focus on automatically managing a "project" tag based on note content (TODOs, scheduled/deadline items, anniversaries) and updating the `org-agenda-files` list accordingly.

The main features include:

+ User options to exclude specific files or directories from project status checks.
+ Functions to determine if an Org Roam note qualifies as a "project" (contains active TODOs, scheduled/deadline items, or anniversaries).
+ A function to automatically add or remove the "project" tag from the current note's `:FILETAGS:` based on its content.
+ A function (intended for advising `org-agenda`) to dynamically update `org-agenda-files` to include all notes tagged "project" and recently modified notes.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

This section details the user-configurable variables provided by =vulpea-extras.el=.

** ~vulpea-extras-excluded-directories~
:PROPERTIES:
:CUSTOM_ID: h:vulpea-extras-excluded-directories
:END:

#+vindex: vulpea-extras-excluded-directories
A list of directory paths. Org Roam notes within these directories will be ignored by the ~vulpea-extras-project-p~ function, meaning they won't be automatically tagged as projects even if they contain TODO items or scheduled dates. Defaults to an empty list `()`.

** ~vulpea-extras-excluded-files~
:PROPERTIES:
:CUSTOM_ID: h:vulpea-extras-excluded-files
:END:

#+vindex: vulpea-extras-excluded-files
A list of specific file paths. These Org Roam notes will be ignored by ~vulpea-extras-project-p~. Defaults to a list containing `paths-file-tlon-tareas-leo` and `paths-file-tlon-tareas-fede` (presumably user-defined variables pointing to specific task files).

* Core Logic Functions
:PROPERTIES:
:CUSTOM_ID: h:core-logic-functions
:END:

These functions implement the logic for determining project status and managing tags.

** Check if Note is a Project
:PROPERTIES:
:CUSTOM_ID: h:vulpea-extras-project-p
:END:

#+findex: vulpea-extras-project-p
The function ~vulpea-extras-project-p~ checks if the current Org mode buffer represents an active "project". It returns non-nil if the buffer meets these criteria:
1. It's an Org mode buffer.
2. Its directory is *not* in ~vulpea-extras-excluded-directories~.
3. Its file path is *not* in ~vulpea-extras-excluded-files~.
4. It contains at least one headline that:
   - Is *not* tagged "ARCHIVE".
   - AND is either:
     - A TODO item (type 'todo).
     - OR is not DONE and has a :SCHEDULED: or :DEADLINE: property.

It uses `org-element-map` to efficiently search for such headlines.

** Check if Note Contains Anniversary
:PROPERTIES:
:CUSTOM_ID: h:vulpea-extras-anniversary-p
:END:

#+findex: vulpea-extras-anniversary-p
The function ~vulpea-extras-anniversary-p~ checks if the current Org mode buffer contains an Org Anniversary sexp (`%%(org-anniversary ...)`). It returns non-nil if such an expression is found anywhere in the buffer.

** Get Project Files from Org Roam DB
:PROPERTIES:
:CUSTOM_ID: h:vulpea-extras-project-files
:END:

#+findex: vulpea-extras-project-files
The function ~vulpea-extras-project-files~ queries the Org Roam database (`org-roam-db-query`) to find all noteslitellm.APIConnectionError: Error parsing chunk: Expecting property name enclosed in double quotes: line 1 column 2 (char
1),
Received chunk: {
Traceback (most recent call last):
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1570, in __next__
    return self._common_chunk_parsing_logic(chunk=chunk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1544, in _common_chunk_parsing_logic
    return self.handle_valid_json_chunk(chunk=chunk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1504, in handle_valid_json_chunk
    raise e
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1496, in handle_valid_json_chunk
    json_chunk = json.loads(chunk)
                 ^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", 
line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line
338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line
354, in raw_decode
    obj, end = self.scan_once(s, idx)
               ^^^^^^^^^^^^^^^^^^^^^^
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/litellm_core_utils/streamin
g_handler.py", line 1508, in __next__
    chunk = next(self.completion_stream)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1574, in __next__
    raise RuntimeError(f"Error parsing chunk: {e},\nReceived chunk: {chunk}")
RuntimeError: Error parsing chunk: Expecting property name enclosed in double quotes: line 1 column 2 (char 1),
Received chunk: {

Retrying in 0.2 seconds...
Okay, I will now populate the documentation files one by one, starting with `avy-extras.org`.

```org
emacs/extras/doc/avy-extras.org
<<<<<<< SEARCH
=======
#+title: avy-extras: Extensions for avy
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: avy-extras.info
#+texinfo_filename: avy-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Avy Extras: (avy-extras)
#+texinfo_dir_desc: Extensions for avy

This manual describes the features and customization options for the Emacs Lisp file =avy-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=avy-extras.el= provides extensions for the =avy= package, which enables quick navigation within Emacs buffers. These extensions offer specialized commands for jumping to words within lines, jumping to the end of lines, interacting with specific modes like Dired, Ebib, mu4e, Telega, and Elfeed, and implementing a character-based jump with repetition.

The main features include:

+ Commands to jump to words within the current visual line (whole line, before point, after point).
+ Commands to jump to the end of lines above or below the cursor.
+ Mode-specific commands to select and act on items in Dired, Ebib, mu4e headers, Telega chats, and Elfeed search results.
+ An action function to mark the region from the current point to the selected avy candidate.
+ Commands to jump to the next/previous occurrence of a character, with repetition support.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

This section details the user-configurable variables provided by =avy-extras.el=.

** The ~avy-extras-goto-char-timeout~ option
:PROPERTIES:
:CUSTOM_ID: h:avy-extras-goto-char-timeout
:END:

#+vindex: avy-extras-goto-char-timeout
The user option ~avy-extras-goto-char-timeout~ specifies the timeout duration (in seconds) for the character jump repetition feature provided by ~avy-extras-goto-char-forward~ and ~avy-extras-goto-char-backward~.

If the same key used to initiate the jump is pressed again within this timeout period, the command will jump to the next occurrence of that character. If the timeout expires or a different key is pressed, the repetition sequence ends. The default value is 1 second.

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=avy-extras.el= provides the following interactive commands:

** Jump to Word in Line
:PROPERTIES:
:CUSTOM_ID: h:jump-to-word-in-line
:END:

#+findex: avy-extras-goto-word-in-line
The command ~avy-extras-goto-word-in-line~ uses =avy-goto-word-0= to jump to the start of a word within the current visual line (from the beginning to the end of the visual line).

#+findex: avy-extras-goto-word-in-line-behind
The command ~avy-extras-goto-word-in-line-behind~ uses =avy-goto-word-0= to jump to the start of a word between the beginning of the current visual line and the current point position.

#+findex: avy-extras-goto-word-in-line-ahead
The command ~avy-extras-goto-word-in-line-ahead~ uses =avy-goto-word-0= to jump to the start of a word between the current point position and the end of the current visual line.

** Jump to End of Line
:PROPERTIES:
:CUSTOM_ID: h:jump-to-end-of-line
:END:

#+findex: avy-extras-goto-end-of-line-above
The command ~avy-extras-goto-end-of-line-above~ uses =avy-goto-line-above= to select a line above the cursor and then moves the point to the end of that selected line. It accepts optional arguments for OFFSET and BOTTOM-UP display, similar to the underlying =avy-goto-line-above= command.

#+findex: avy-extras-goto-end-of-line-below
The command ~avy-extras-goto-end-of-line-below~ uses =avy-goto-line-below= to select a line below the cursor and then moves the point to the end of that selected line. It accepts optional arguments for OFFSET and BOTTOM-UP display, similar to the underlying =avy-goto-line-below= command.

** Mode-Specific Jump and Act Commands
:PROPERTIES:
:CUSTOM_ID: h:mode-specific-jumps
:END:

These commands use =avy-goto-line= to select a line in a specific mode's buffer and then execute a relevant action for that line.

#+findex: avy-extras-dired-find-file
The command ~avy-extras-dired-find-file~ jumps to a line in a Dired buffer and then calls =dired-find-alternate-file= to visit the file or directory on that line.

#+findex: avy-extras-ebib-view-entry
The command ~avy-extras-ebib-view-entry~ jumps to a line in an Ebib buffer and then calls =ebib-edit-entry= to view the BibTeX entry on that line.

#+findex: avy-extras-headers-view-message
The command ~avy-extras-headers-view-message~ jumps to a line in a mu4e headers buffer and then calls =mu4e-headers-view-message= to view the email message on that line.

#+findex: avy-extras-telega-view-message
The command ~avy-extras-telega-view-message~ jumps to a line in a Telega chat buffer and then simulates pushing the button on that line (typically opening the chat or message).

#+findex: avy-extras-elfeed-search-show-entry
The command ~avy-extras-elfeed-search-show-entry~ jumps to a line in an Elfeed search buffer and then calls =elfeed-search-show-entry= interactively to display the feed item on that line.

** Jump to Character with Repetition
:PROPERTIES:
:CUSTOM_ID: h:jump-to-char
:END:

#+findex: avy-extras-goto-char-forward
The command ~avy-extras-goto-char-forward~ prompts for a character and jumps to the first occurrence of that character *after* the current point. Pressing the same character key again within the timeout specified by ~avy-extras-goto-char-timeout~ will jump to the next occurrence. Pressing any other key or letting the timeout expire ends the repetition.

#+findex: avy-extras-goto-char-backward
The command ~avy-extras-goto-char-backward~ prompts for a character and jumps to the first occurrence of that character *before* the current point. Pressing the same character key again within the timeout specified by ~avy-extras-goto-char-timeout~ will jump to the previous occurrence. Pressing any other key or letting the timeout expire ends the repetition.

* Avy Actions
:PROPERTIES:
:CUSTOM_ID: h:avy-actions
:END:

=avy-extras.el= defines the following function intended for use as an =avy-action=:

#+findex: avy-extras-action-mark-to-char
The function ~avy-extras-action-mark-to-char~ takes the point (PT) selected via Avy as input, activates the mark at the current point, and then moves the point to PT, effectively selecting the region between the original point and the Avy target.

* Internal Functions (for reference)
:PROPERTIES:
:CUSTOM_ID: h:internal-functions
:END:

These functions are used internally by the main commands but are not typically called directly by the user.

+ ~avy-extras-goto-char~: The core logic for jumping to a character in a given direction.
+ ~avy-extras-repeat-search~: Handles the repetition logic for the character jump commands, including the timeout.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:
