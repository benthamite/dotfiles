#+title: mu4e-extras: Extensions for mu4e
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: mu4e-extras.info
#+texinfo_filename: mu4e-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Mu4e Extras: (mu4e-extras)
#+texinfo_dir_desc: Extensions for mu4e

This manual describes the features and customization options for the Emacs Lisp file =mu4e-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=mu4e-extras.el= provides extensions for =mu4e=, the Emacs email client based on the `mu` indexer. These extensions focus on streamlining common actions (refiling, trashing, moving), managing read status synchronization issues with Gmail, integrating with Org capture, handling multiple email contexts (personal/work), and providing convenience commands.

The main features include:

+ Commands to refile, trash, or move messages without confirmation prompts.
+ A mechanism to track messages marked as read and refiled, and automatically re-mark them as read after synchronization to counteract a Gmail issue.
+ Similar mechanism to mark sent messages as read after synchronization.
+ Commands to update all mail (including Gmail's "All Mail") and reindex the `mu` database.
+ Integration with Org capture to capture a message and optionally refile it.
+ Commands to open the current message in the Gmail web interface or compose a new message externally.
+ Configuration helpers for setting up `mu4e-maildir-shortcuts` and multiple `mu4e-contexts` (e.g., for personal vs. work accounts with different signatures and HTML/plain text handling).
+ A command to copy numeric amounts found in email subjects.
+ Patches to modify default `mu4e` behavior (e.g., URL handling).

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

** ~mu4e-extras-inbox-folder~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-inbox-folder
:END:

#+vindex: mu4e-extras-inbox-folder
Specifies the maildir path (string) for the main inbox folder. Used by ~mu4e-extras-set-shortcuts~.

** ~mu4e-extras-daily-folder~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-daily-folder
:END:

#+vindex: mu4e-extras-daily-folder
Specifies the maildir path (string) for a "daily" folder. Used by ~mu4e-extras-set-shortcuts~.

** ~mu4e-extras-newsletters-folder~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-newsletters-folder
:END:

#+vindex: mu4e-extras-newsletters-folder
Specifies the maildir path (string) for a "newsletters" folder. (Not currently used by default functions).

** ~mu4e-extras-wide-reply~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-wide-reply
:END:

#+vindex: mu4e-extras-wide-reply
Controls the default behavior for replying when there are multiple recipients.
- =prompt=: Ask the user whether to "Reply to all".
- =t=: Always "Reply to all".
- =nil=: Always reply only to the sender.
Used by ~mu4e-extras-compose-reply~. Default is `prompt`.

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=mu4e-extras.el= provides the following interactive commands, mostly intended for use within =mu4e-headers-mode= or =mu4e-view-mode= buffers:

** Mail Management Actions (No Confirmation)
:PROPERTIES:
:CUSTOM_ID: h:mail-management-no-confirm
:END:

#+findex: mu4e-extras-headers-refile
~mu4e-extras-headers-refile~: Refiles the message at point in the headers buffer without confirmation.
#+findex: mu4e-extras-view-refile
~mu4e-extras-view-refile~: Refiles the current message in the view buffer without confirmation.
#+findex: mu4e-extras-headers-trash
~mu4e-extras-headers-trash~: Trashes the message at point in the headers buffer without confirmation.
#+findex: mu4e-extras-view-trash
~mu4e-extras-view-trash~: Trashes the current message in the view buffer without confirmation.
#+findex: mu4e-extras-headers-move
~mu4e-extras-headers-move~: Marks the message at point in the headers buffer for moving (prompts for target) and executes immediately without confirmation.
#+findex: mu4e-extras-view-move
~mu4e-extras-view-move~: Marks the current message in the view buffer for moving (prompts for target) and executes immediately without confirmation.
#+findex: mu4e-extras-mark-execute-all-no-confirm
~mu4e-extras-mark-execute-all-no-confirm~: Executes all pending marks (refile, trash, move, etc.) in the current buffer without confirmation.

** Read Status Management
:PROPERTIES:
:CUSTOM_ID: h:read-status
:END:

#+findex: mu4e-extras-headers-mark-read-and-refile
~mu4e-extras-headers-mark-read-and-refile~: Marks the message at point as read, marks it for refiling, and adds its message-id to a queue (~mu4e-extras-mark-as-read-queue~). This queue is processed later by ~mu4e-extras-reapply-read-status~ to ensure the message stays marked as read after syncing with Gmail. Executes the marks immediately.

** Mail Update and Indexing
:PROPERTIES:
:CUSTOM_ID: h:update-indexing
:END:

#+findex: mu4e-extras-init
~mu4e-extras-init~: Quits mu4e if running, then runs `mu init` asynchronously to initialize the database.
#+findex: mu4e-extras-update-all-mail-and-index
~mu4e-extras-update-all-mail-and-index~: Runs `mbsync gmail-all` (fetching all mail, including archives) and then indexes using `mu index`. Can run in background with prefix arg.
#+findex: mu4e-extras-check-all-mail
~mu4e-extras-check-all-mail~: Same as ~mu4e-extras-update-all-mail-and-index~ but always runs in the background. Intended for less frequent, full syncs.
#+findex: mu4e-extras-reindex-db
~mu4e-extras-reindex-db~: Attempts to kill any running `mu` process and then runs `mu index`.

** Composition and Viewing
:PROPERTIES:
:CUSTOM_ID: h:composition-viewing
:END:

#+findex: mu4e-extras-compose-reply
~mu4e-extras-compose-reply~: Initiates a reply to the message at point. If the sender is the user, calls `mu4e-compose-supersede`. If there are multiple recipients, behavior depends on ~mu4e-extras-wide-reply~ (prompt, always wide, or always narrow).
#+findex: mu4e-extras-compose-new-externally
~mu4e-extras-compose-new-externally~: Opens the Gmail web interface in the default browser, directly on the compose screen.
#+findex: mu4e-extras-view-in-gmail
~mu4e-extras-view-in-gmail~: Opens the current message in the Gmail web interface by searching for its RFC822 message ID.

** Integration and Misc
:PROPERTIES:
:CUSTOM_ID: h:integration-misc
:END:

#+findex: mu4e-extras-view-org-capture
~mu4e-extras-view-org-capture~: Captures the current message (view or headers buffer) using `org-capture`. Uses template key "e" by default, but respects `[org-capture key: KEY]` in the message body. With prefix arg, captures without refiling; otherwise, refiles the message after capture using ~mu4e-extras-view-refile~.
#+findex: mu4e-extras-copy-number-in-title
~mu4e-extras-copy-number-in-title~: Attempts to find and copy a number (potentially with commas/periods as separators) from the subject line of the message at point to the kill ring.

* Configuration Functions
:PROPERTIES:
:CUSTOM_ID: h:configuration-functions
:END:

These functions are intended for use in Emacs configuration files.

** ~mu4e-extras-gmail-fix-flags~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-gmail-fix-flags
:END:

#+findex: mu4e-extras-gmail-fix-flags
Intended for use with `mu4e-change-filenames-when-moving`. Translates standard mu4e marks (trash, refile, flag, unflag) into Gmail-specific flag changes (e.g., adding `+\Trash`, `+\Starred`).

** ~mu4e-extras-reapply-read-status~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-reapply-read-status
:END:

#+findex: mu4e-extras-reapply-read-status
Iterates through the message IDs stored in ~mu4e-extras-mark-as-read-queue~ and marks them as seen (`+S`) using `mu4e--server-move`. Clears the queue afterwards. Intended to be called after mail synchronization.

** ~mu4e-extras-reapply-read-status-set-timer~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-reapply-read-status-set-timer
:END:

#+findex: mu4e-extras-reapply-read-status-set-timer
Sets a 30-second timer to call ~mu4e-extras-reapply-read-status~ if the queue is not empty. Intended to be hooked into `mu4e-update-pre-hook` (though commentary notes potential issues).

** ~mu4e-extras-add-sent-to-mark-as-read-queue~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-add-sent-to-mark-as-read-queue
:END:

#+findex: mu4e-extras-add-sent-to-mark-as-read-queue
Intended for `message-sent-hook`. Adds the Message-ID of the sent message to the ~mu4e-extras-mark-as-read-queue~ so it can be marked as read after syncing.

** ~mu4e-extras-set-shortcuts~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-set-shortcuts
:END:

#+findex: mu4e-extras-set-shortcuts
Adds predefined shortcuts for the inbox and daily folders (defined by user options) to `mu4e-maildir-shortcuts`.

** ~mu4e-extras-set-face-locally~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-set-face-locally
:END:

#+findex: mu4e-extras-set-face-locally
Intended for `mu4e-view-mode-hook`. Remaps the `shr-text` face to have a smaller height (0.9) locally in view buffers.

** ~mu4e-extras-set-contexts~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-set-contexts
:END:

#+findex: mu4e-extras-set-contexts
Defines and sets `mu4e-contexts` for personal and work accounts, distinguishing between HTML and plain text composition. Associates different email addresses and Org Msg signatures with each context. Uses helper functions like ~mu4e-extras-msg-is-personal-p~ and ~mu4e-extras-msg-is-html-p~ for matching.

** ~mu4e-extras-set-index-params~
:PROPERTIES:
:CUSTOM_ID: h:mu4e-extras-set-index-params
:END:

#+findex: mu4e-extras-set-index-params
Adjusts `mu4e-index-lazy-check` and `mu4e-index-cleanup` based on Emacs idle time. If idle time is long, assumes user is away and performs a more thorough index (lazy check off, cleanup on). If idle time is short, assumes user is active and performs a faster index (lazy check on, cleanup off). Intended to be called before indexing (e.g., via a hook if available, or timer).

* Internal Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:internal-helpers
:END:

+ ~mu4e-extras-msg-is-personal-p~: Checks if a message's :to field matches personal email addresses.
+ ~mu4e-extras-msg-is-work-p~: Checks if a message's :to or :reply-to field matches work email addresses or groups.
+ ~mu4e-extras-msg-is-html-p~: Checks if a message contains a "text/html" part.

* Patched Functions
:PROPERTIES:
:CUSTOM_ID: h:patched-functions-mu4e
:END:

** ~mu4e--view-get-urls-num~
:PROPERTIES:
:CUSTOM_ID: h:mu4e--view-get-urls-num-patch
:END:

The internal function ~mu4e--view-get-urls-num~ is patched using =el-patch=. The patch modifies the behavior when prompting the user to select a URL number from a message. If there is only *one* URL in the message, the patched version automatically selects that URL (returns 1) instead of prompting the user to enter "1". If there are multiple URLs, the original prompting behavior is retained.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:
