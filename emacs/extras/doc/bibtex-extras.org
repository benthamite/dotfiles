#+title: bibtex-extras: Extensions for BibTeX mode
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: bibtex-extras.info
#+texinfo_filename: bibtex-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: BibTeX Extras: (bibtex-extras)
#+texinfo_dir_desc: Extensions for BibTeX mode

This manual describes the features and customization options for the Emacs Lisp file =bibtex-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=bibtex-extras.el= provides extensions for Emacs' built-in =bibtex-mode=. These extensions focus on manipulating BibTeX entries and fields, integrating with =ebib=, and providing helper functions for common tasks like getting entry keys or fields.

The main features include:

+ A list of valid BibLaTeX fields for reference or completion.
+ Functions to get the key or a specific field value from the current BibTeX entry.
+ Functions to add, update, or append values to fields within an entry.
+ A command to convert the "titleaddon" field (often used by Zotero) to the standard "journaltitle" field.
+ A command to kill (delete) a specific field from the current entry.
+ A command to move the current entry to a different bibliography file.
+ A command to open the current BibTeX entry directly in =ebib=.
+ Helper functions for sorting BibTeX entries based on specific criteria (e.g., presence of crossref).
+ Functions for attaching files downloaded via other packages (like =zotra= or =eww=) to the correct BibTeX entry.

* Variables
:PROPERTIES:
:CUSTOM_ID: h:variables
:END:

** ~bibtex-extras-biblatex-fields~
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-biblatex-fields
:END:

#+vindex: bibtex-extras-biblatex-fields
A constant list containing strings of valid field names according to the BibLaTeX standard. This can be used for completion or validation purposes.

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=bibtex-extras.el= provides the following interactive commands:

** Convert titleaddon to journaltitle
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-convert-titleaddon-to-journaltitle
:END:

#+findex: bibtex-extras-convert-titleaddon-to-journaltitle
The command ~bibtex-extras-convert-titleaddon-to-journaltitle~ searches for a field named "titleaddon" within the current BibTeX entry (narrowed view) and replaces the field name with "journaltitle". This is useful for correcting entries imported from tools like Zotero that might use "titleaddon" for the publication venue instead of the standard "journaltitle".

** Kill Field
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-kill-field
:END:

#+findex: bibtex-extras-kill-field
The command ~bibtex-extras-kill-field~ prompts the user for a field name (with completion using =bibtex-read-field-name=) and then deletes that field and its value from the current BibTeX entry.

** Move Entry
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-move-entry
:END:

#+findex: bibtex-extras-move-entry
The command ~bibtex-extras-move-entry~ moves the BibTeX entry specified by KEY to a TARGET bibliography file. It prompts the user for both KEY and TARGET file. It finds the source file of the KEY (using =ebib-extras-get-file-of-key=), kills the entry from the source buffer, saves it, then yanks the entry into the target buffer, saves it, and messages the user. It requires =ebib= to be active to locate the source file.

** Open in Ebib
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-open-in-ebib
:END:

#+findex: bibtex-extras-open-in-ebib
The command ~bibtex-extras-open-in-ebib~ opens the BibTeX entry at point in the =ebib= interface. It retrieves the current entry's key, saves the current buffer, ensures the corresponding database is loaded and up-to-date in =ebib=, switches to the =ebib= entry buffer for that key, and displays it.

** Set Field
:PROPERTIES:
:CUSTOM_ID: h:bibtex-extras-set-field
:END:

#+findex: bibtex-extras-set-field
The command ~bibtex-extras-set-field~ allows interactively setting the value of a field in the current BibTeX entry. It prompts for the FIELD name (with completion using ~bibtex-extras-biblatex-fields~) and the VALUE (pre-filling with the current value if the field exists). It then uses =bibtex-set-field= to update the entry.

* Utility Functions
:PROPERTIES:
:CUSTOM_ID: h:utility-functions
:END:

These functions provide helper functionalities used by other commands or for programmatic use.

+ ~bibtex-extras-get-key~: Returns the BibTeX key (e.g., "Author2024") of the entry at point.
+ ~bibtex-extras-add-or-update-field~: Adds a FIELD with VALUE if it doesn't exist, or updates the existing FIELD with VALUE.
+ ~bibtex-extras-append-to-field~: Appends VALUE to the existing content of FIELD, using an optional DELIMITER (defaults to ";"). If the field doesn't exist, it creates it with VALUE.
+ ~bibtex-extras-get-entry-as-string~: Returns the entire BibTeX entry at point (or specified by KEY) as a string. Can optionally return only the value of a specific FIELD within that entry.
+ ~bibtex-extras-get-field~: Returns the value of a specified FIELD within the current entry, cleaning up whitespace.
+ ~bibtex-extras-get-field-name~: Returns the name of the BibTeX field at point.
+ ~bibtex-extras-get-field-in-string~: Extracts the value of a FIELD from a given BibTeX entry STRING.
+ ~bibtex-extras-entry-sorter~: Helper function for sorting; returns a list containing the entry key and whether it has a "crossref" field. Used by ~bibtex-extras-lessp~.
+ ~bibtex-extras-lessp~: Predicate function for sorting BibTeX entries. It prioritizes entries with a "crossref" field (sorting them reverse-alphabetically by key) and then sorts remaining entries alphabetically by key. This mimics Ebib's sorting behavior.
+ ~bibtex-extras-attach-file-to-entry~: Attaches a FILE to the BibTeX entry whose key matches the base name of the FILE within a specified BIBTEX-FILE. Used as a callback for download functions.

* Patched Functions
:PROPERTIES:
:CUSTOM_ID: h:patched-functions
:END:

=bibtex-extras.el= modifies one core =bibtex-mode= function using =el-patch=:

** ~bibtex-autokey-get-year~
:PROPERTIES:
:CUSTOM_ID: h:bibtex-autokey-get-year-patch
:END:

The function ~bibtex-autokey-get-year~ is patched to include "urldate" in the list of fields it checks when trying to determine the year for generating an automatic key. This allows keys to be generated based on the URL access date if the "date" or "year" fields are missing.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:
