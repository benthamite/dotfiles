#+title: window-extras: Extensions for Emacs Windows
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: window-extras.info
#+texinfo_filename: window-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Window Extras: (window-extras)
#+texinfo_dir_desc: Extensions for Emacs Windows

This manual describes the features and customization options for the Emacs Lisp file =window-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=window-extras.el= provides extensions for managing Emacs windows within a frame. These extensions focus on switching between windows, splitting windows conditionally, and moving/swapping buffers between windows.

The main features include:

+ A command to switch to the most recently selected window (MRU).
+ A command to automatically split the frame if it's currently unsplit, potentially creating three windows if the frame is wide enough.
+ Commands to swap the buffers between the current and the MRU window.
+ Commands to move the current buffer to the MRU window or specifically to the window on the left or right, creating splits if necessary.
+ A function to check if the current frame is maximized.
+ A command to explicitly switch focus to the minibuffer window if it's active.
+ A command to select the leftmost or rightmost window in the current frame.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

This section details the user-configurable variables provided by =window-extras.el=.

** ~window-extras-frame-split-width-threshold~
:PROPERTIES:
:CUSTOM_ID: h:window-extras-frame-split-width-threshold
:END:

#+vindex: window-extras-frame-split-width-threshold
An integer specifying the frame width (in columns) threshold used by ~window-extras-split-if-unsplit~. If the frame width is greater than this threshold, the function will attempt to create a three-window layout; otherwise, it aims for a two-window layout (default: 350).

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=window-extras.el= provides the following interactive commands:

** Switch to Last Window (MRU)
:PROPERTIES:
:CUSTOM_ID: h:window-extras-switch-to-last-window
:END:

#+findex: window-extras-switch-to-last-window
The command ~window-extras-switch-to-last-window~ selects the most recently selected window in the current frame, including potentially the minibuffer window if it was the last one active. It uses the internal helper ~window-extras-get-last-window~.

** Split Frame if Unsplit
:PROPERTIES:
:CUSTOM_ID: h:window-extras-split-if-unsplit
:END:

#+findex: window-extras-split-if-unsplit
The command ~window-extras-split-if-unsplit~ checks if the current frame contains only one window.
- If yes, it splits the window horizontally to the right (=split-window-right=).
- It then checks if the frame width exceeds ~window-extras-frame-split-width-threshold~ and if there are currently only two windows.
- If both conditions are true, it splits the right window again (=split-window-right=) to create a third window.
- Finally, if a third window was created, it calls =balance-windows= to equalize their widths.
The goal is to quickly establish a two- or three-window layout if the frame is currently unsplit.

** Swap Buffers Between Windows
:PROPERTIES:
:CUSTOM_ID: h:window-extras-buffer-swap
:END:

#+findex: window-extras-buffer-swap
The command ~window-extras-buffer-swap~ swaps the buffer displayed in the currently selected window with the buffer displayed in the most recently used window (obtained via ~window-extras-get-last-window~). It uses the internal helper ~window-extras--move-or-swap~. If only one window exists initially, it calls ~window-extras-split-if-unsplit~ first.

** Move Buffer to Other Window
:PROPERTIES:
:CUSTOM_ID: h:window-extras-buffer-move
:END:

#+findex: window-extras-buffer-move
The command ~window-extras-buffer-move~ moves the buffer from the currently selected window to the specified TARGET-WINDOW (interactively, this argument seems unused, defaulting to the MRU window). The buffer previously in the target window (or the alternate buffer if moving to a newly created window) is moved into the current window. It uses the internal helper ~window-extras--move-or-swap~ and ensures the frame is split if necessary.

** Move Buffer Right
:PROPERTIES:
:CUSTOM_ID: h:window-extras-buffer-move-right
:END:

#+findex: window-extras-buffer-move-right
The command ~window-extras-buffer-move-right~ moves the current buffer to the window immediately to the right. If no window exists to the right, it first calls =split-window-right= to create one. It then calls ~window-extras-buffer-move~ to perform the move.

** Move Buffer Left
:PROPERTIES:
:CUSTOM_ID: h:window-extras-buffer-move-left
:END:

#+findex: window-extras-buffer-move-left
The command ~window-extras-buffer-move-left~ moves the current buffer to the window immediately to the left. If no window exists to the left (i.e., the current window is the leftmost), it first calls =split-window-right= (creating a window to the right) and then calls ~window-extras-buffer-move~ to move the buffer to the original window (which is now the left one). This logic ensures focus remains on the left side after the split and move.

** Switch to Minibuffer Window
:PROPERTIES:
:CUSTOM_ID: h:window-extras-switch-to-minibuffer-window
:END:

#+findex: window-extras-switch-to-minibuffer-window
The command ~window-extras-switch-to-minibuffer-window~ explicitly selects the minibuffer window *if* it is currently active (e.g., during a prompt).

** Select Side Window (Left/Right)
:PROPERTIES:
:CUSTOM_ID: h:window-extras-select-side-window
:END:

#+findex: window-extras-select-side-window
The command ~windowlitellm.APIConnectionError: Error parsing chunk: Expecting property name enclosed in double quotes: line 1 column 2 (char
1),
Received chunk: {
Traceback (most recent call last):
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1570, in __next__
    return self._common_chunk_parsing_logic(chunk=chunk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1544, in _common_chunk_parsing_logic
    return self.handle_valid_json_chunk(chunk=chunk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1504, in handle_valid_json_chunk
    raise e
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1496, in handle_valid_json_chunk
    json_chunk = json.loads(chunk)
                 ^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", 
line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line
338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line
354, in raw_decode
    obj, end = self.scan_once(s, idx)
               ^^^^^^^^^^^^^^^^^^^^^^
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/litellm_core_utils/streamin
g_handler.py", line 1508, in __next__
    chunk = next(self.completion_stream)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File 
"/Users/pablostafforini/.local/share/uv/tools/aider-chat/lib/python3.12/site-packages/litellm/llms/vertex_ai/gemini/verte
x_and_google_ai_studio_gemini.py", line 1574, in __next__
    raise RuntimeError(f"Error parsing chunk: {e},\nReceived chunk: {chunk}")
RuntimeError: Error parsing chunk: Expecting property name enclosed in double quotes: line 1 column 2 (char 1),
Received chunk: {

Retrying in 0.5 seconds...
Okay, I will populate the documentation files one by one, starting with `avy-extras.org`.

```org
emacs/extras/doc/avy-extras.org
<<<<<<< SEARCH
=======
#+title: avy-extras: Extensions for Avy
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: avy-extras.info
#+texinfo_filename: avy-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Avy Extras: (avy-extras)
#+texinfo_dir_desc: Extensions for Avy

This manual describes the features and customization options for the Emacs Lisp file =avy-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=avy-extras.el= provides extensions for the =avy= package, which enables quick navigation to visible text using a few keystrokes. These extensions offer specialized commands for jumping within lines, interacting with specific modes like Dired, Ebib, mu4e, Telega, and Elfeed, and introducing repeatable character jumps.

The main features include:

+ Commands to jump to words within the current visual line (ahead, behind, or anywhere).
+ Commands to jump to the end of lines above or below the cursor.
+ Mode-specific commands to jump to lines and perform actions in Dired, Ebib, mu4e, Telega, and Elfeed.
+ An action to mark the region from the current point to the selected Avy candidate.
+ Commands for repeatable forward and backward jumps to the first occurrence of a character.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

This section details the user-configurable variables provided by =avy-extras.el=.

** The ~avy-extras-goto-char-timeout~ option
:PROPERTIES:
:CUSTOM_ID: h:avy-extras-goto-char-timeout
:END:

#+vindex: avy-extras-goto-char-timeout
The user option ~avy-extras-goto-char-timeout~ specifies the timeout duration (in seconds) for the repeatable character jump commands (~avy-extras-goto-char-forward~ and ~avy-extras-goto-char-backward~).

If the same key used to initiate the jump is pressed again within this timeout period, Avy will jump to the next occurrence of that character in the specified direction. If the timeout expires or a different key is pressed, the repeat functionality is cancelled. The default value is 1 second.

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=avy-extras.el= provides the following interactive commands:

** Jump to Word in Line
:PROPERTIES:
:CUSTOM_ID: h:jump-to-word-in-line
:END:

#+findex: avy-extras-goto-word-in-line
The command ~avy-extras-goto-word-in-line~ uses =avy-goto-word-0= to jump to the beginning of a word within the current visual line (from the beginning to the end of the line).

#+findex: avy-extras-goto-word-in-line-behind
The command ~avy-extras-goto-word-in-line-behind~ uses =avy-goto-word-0= to jump to the beginning of a word between the start of the current visual line and the current point position.

#+findex: avy-extras-goto-word-in-line-ahead
The command ~avy-extras-goto-word-in-line-ahead~ uses =avy-goto-word-0= to jump to the beginning of a word between the current point position and the end of the current visual line.

** Jump to End of Line Above/Below
:PROPERTIES:
:CUSTOM_ID: h:jump-to-end-of-line
:END:

#+findex: avy-extras-goto-end-of-line-above
The command ~avy-extras-goto-end-of-line-above~ uses =avy-goto-line-above= to select a line above the cursor and then moves the point to the end of that line. It accepts optional arguments for offset and bottom-up candidate display, similar to the underlying Avy command.

#+findex: avy-extras-goto-end-of-line-below
The command ~avy-extras-goto-end-of-line-below~ uses =avy-goto-line-below= to select a line below the cursor and then moves the point to the end of that line. It accepts optional arguments for offset and bottom-up candidate display, similar to the underlying Avy command.

** Mode-Specific Jump and Actions
:PROPERTIES:
:CUSTOM_ID: h:mode-specific-jumps
:END:

These commands combine =avy-goto-line= with mode-specific actions:

#+findex: avy-extras-dired-find-file
~avy-extras-dired-find-file~: In a Dired buffer, jumps to the selected line and then calls =dired-find-alternate-file= to visit the file or directory on that line.

#+findex: avy-extras-ebib-view-entry
~avy-extras-ebib-view-entry~: In an Ebib buffer, jumps to the selected line and then calls =ebib-edit-entry= to view the corresponding entry.

#+findex: avy-extras-headers-view-message
~avy-extras-headers-view-message~: In a mu4e headers buffer, jumps to the selected line and then calls =mu4e-headers-view-message= to view the email.

#+findex: avy-extras-telega-view-message
~avy-extras-telega-view-message~: In a Telega buffer, jumps to the selected line and then simulates pushing the button at point (typically opening the chat or message).

#+findex: avy-extras-elfeed-search-show-entry
~avy-extras-elfeed-search-show-entry~: In an Elfeed search buffer, jumps to the selected line and then calls =elfeed-search-show-entry= interactively to display the feed item.

** Repeatable Character Jump
:PROPERTIES:
:CUSTOM_ID: h:repeatable-char-jump
:END:

#+findex: avy-extras-goto-char-forward
The command ~avy-extras-goto-char-forward~ prompts for a character and jumps to its first occurrence forward from the point. Pressing the same character key again within the timeout specified by ~avy-extras-goto-char-timeout~ jumps to the next forward occurrence. Pressing any other key or letting the timeout expire cancels the repeat.

#+findex: avy-extras-goto-char-backward
The command ~avy-extras-goto-char-backward~ prompts for a character and jumps to its first occurrence backward from the point. Pressing the same character key again within the timeout specified by ~avy-extras-goto-char-timeout~ jumps to the next backward occurrence. Pressing any other key or letting the timeout expire cancels the repeat.

* Avy Actions
:PROPERTIES:
:CUSTOM_ID: h:avy-actions
:END:

=avy-extras.el= defines the following action function for use with =avy-dispatch-alist=:

#+findex: avy-extras-action-mark-to-char
~avy-extras-action-mark-to-char~: Takes the point (PT) returned by Avy, activates the mark at the original point, and moves the point to PT, effectively selecting the region between the original point and the Avy target.

* Internal Functions (for reference)
:PROPERTIES:
:CUSTOM_ID: h:internal-functions
:END:

These functions are used internally by the main commands but are not typically called directly by the user.

+ ~avy-extras-goto-char~: The core function implementing the repeatable character jump logic. Called by ~avy-extras-goto-char-forward~ and ~avy-extras-goto-char-backward~.
+ ~avy-extras-repeat-search~: Handles the loop for repeating the character search within the timeout period. Called by ~avy-extras-goto-char~.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:
