#+title: abbrev-extras: Extensions for Emacs Abbreviations
#+author: Pablo Stafforini
#+email: YOUR-EMAIL-HERE ; TODO: Replace with actual email
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: abbrev-extras.info
#+texinfo_filename: abbrev-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Abbrev Extras: (abbrev-extras)
#+texinfo_dir_desc: Extensions for Emacs Abbreviations

This manual describes the features and customization options for the Emacs Lisp file =abbrev-extras.el=.

* COPYING
:PROPERTIES:
:COPYING: t
:CUSTOM_ID: h:copying
:END:

Copyright (C) 2025 Pablo Stafforini

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled "GNU Free
Documentation License".
#+end_quote

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=abbrev-extras.el= provides extensions for Emacs' built-in abbreviation facility (=abbrev.el=). Its primary goal is to simplify the process of adding mode-specific abbreviations interactively.

The main features include:

+ An interactive command to add abbreviations specific to a chosen major mode.
+ Automatic creation of the necessary abbrev table for the mode if it doesn't exist.
+ An option to automatically save the abbrev definitions to the user's abbrev file after adding a new one.
+ An interactive command to manually save the abbrev definitions.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

This section details the user-configurable variables provided by =abbrev-extras.el=.

** The ~abbrev-extras-write-file-p~ option
:PROPERTIES:
:CUSTOM_ID: h:abbrev-extras-write-file-p
:END:

#+vindex: abbrev-extras-write-file-p
The user option ~abbrev-extras-write-file-p~ controls whether the abbrev definitions are automatically written to the file specified by the standard Emacs variable ~abbrev-file-name~ after a new mode-specific abbrev is added using the ~abbrev-extras-add-mode-abbrev~ command.

- If non-nil (the default), the abbrevs are saved automatically.
- If nil, the abbrevs are only defined in the current Emacs session and need to be saved manually (e.g., using ~M-x write-abbrev-file~ or ~M-x abbrev-extras-write-abbrevs~).

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=abbrev-extras.el= provides the following interactive commands:

** Add a mode-specific abbrev
:PROPERTIES:
:CUSTOM_ID: h:abbrev-extras-add-mode-abbrev
:END:

#+findex: abbrev-extras-add-mode-abbrev
The command ~abbrev-extras-add-mode-abbrev~ allows the user to interactively define a new abbreviation that is specific to a particular major mode.

When invoked, it prompts the user for:

1.  *Major mode:* Uses minibuffer completion to select the major mode for which the abbrev should be active. The list of candidates includes all defined functions ending in "-mode".
2.  *Abbrev:* The abbreviation string itself (the short form).
3.  *Expansion:* The string the abbrev should expand to (the long form).

Internally, this command performs the following actions:

- It determines the correct abbrev table symbol for the selected mode (e.g., =org-mode-abbrev-table= for =org-mode=).
- It ensures that the abbrev table exists, creating it if necessary using ~abbrev-extras-maybe-create-abbrev-table~.
- It defines the abbreviation in the specified table using the standard ~define-abbrev~ function via the helper ~abbrev-extras-add-abbrev-to-table~.
- If the user option ~abbrev-extras-write-file-p~ is non-nil, it automatically saves all abbrev definitions to the ~abbrev-file-name~ using ~abbrev-extras-write-abbrevs~.

** Write abbrevs to file
:PROPERTIES:
:CUSTOM_ID: h:abbrev-extras-write-abbrevs
:END:

#+findex: abbrev-extras-write-abbrevs
The command ~abbrev-extras-write-abbrevs~ provides a way to manually save all defined abbrevs (both global and mode-specific) to the file specified by the standard Emacs variable ~abbrev-file-name~.

This is essentially a wrapper around the built-in ~write-abbrev-file~ command, providing a potentially more discoverable command name within the =abbrev-extras=*= namespace. It is particularly useful when ~abbrev-extras-write-file-p~ is set to nil.

* Internal Functions (for reference)
:PROPERTIES:
:CUSTOM_ID: h:internal-functions
:END:

These functions are used internally by the main commands but are not typically called directly by the user.

+ ~abbrev-extras-get-sorted-modes~: Returns a sorted list of symbols representing available major modes. Used to provide completion candidates for the mode prompt in ~abbrev-extras-add-mode-abbrev~.
+ ~abbrev-extras-add-abbrev-to-table~: Defines a given abbrev and expansion in a specified abbrev table symbol.
+ ~abbrev-extras-maybe-create-abbrev-table~: Creates an abbrev table variable if it is not already bound.

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:CUSTOM_ID: h:gnu-fdl
:END:

#+include: "../../../../source/denote/doclicense.texi" export texinfo

#+begin_export html
<pre>
                GNU Free Documentation License
                 Version 1.3, 3 November 2008
 [...] // FDL text omitted for brevity - assume full text is included
</pre>
#+end_export

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:
