#+title: Leo's config

* code override
:PROPERTIES:
:ID:       1DDFC928-66D5-4E09-B85C-7844082044D7
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-code-override)
(
 (:org-id-add-ids-to-headings-in-file . ((ignore)))
 )
#+end_src

* late init
:PROPERTIES:
:ID:       86F0B93D-E2A3-4064-977D-1002602B58F3
:END:

** startup
:PROPERTIES:
:ID:       461B08B4-7400-4AB7-B41F-690E5C1C741E
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq user-full-name "Leonardo Picón")
(setq user-mail-address "leonardodecartago@gmail.com")
#+end_src

** key bindings
:PROPERTIES:
:ID:       7B2B4853-D7B7-4C8A-B597-232E13605E1B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(when (eq system-type 'darwin) ;; mac specific settings
  (setq mac-right-option-modifier 'meta)
  (setq mac-command-modifier 'hyper)
  (setq mac-option-modifier 'alt)
  (setq mac-function-modifier '(:button 2))
  (setq mac-right-command-modifier 'super))
(tool-bar-mode -1)

(global-set-key [kp-delete] 'delete-char)   ;; sets fn-delete to be right-delete
(global-set-key (kbd "<home>") 'beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line)
(global-set-key (kbd "<S-right>") 'other-window)
(global-set-key (kbd "<S-left>") 'other-window)
(global-set-key (kbd "<A-right>") 'end-of-buffer)
(global-set-key (kbd "<A-left>") 'beginning-of-buffer)

(with-eval-after-load "org"
  (define-key org-mode-map (kbd "<M-right>") nil)
  (define-key org-mode-map (kbd "<M-left>") nil)
  (define-key org-mode-map (kbd "<M-up>") nil)
  (define-key org-mode-map (kbd "<M-down>") nil)
  (define-key org-mode-map (kbd "<M-S-right>") nil)
  (define-key org-mode-map (kbd "<M-S-left>") nil)
  (define-key org-mode-map (kbd "<M-S-up>") nil)
  (define-key org-mode-map (kbd "<M-S-down>") nil)
  (global-set-key (kbd "<H-right>") 'org-metaright)
  (global-set-key (kbd "<H-left>") 'org-metaleft)
  (global-set-key (kbd "<H-up>") 'org-metaup)
  (global-set-key (kbd "<H-down>") 'org-metadown)
  (global-set-key (kbd "<M-right>") 'forward-word)
  (global-set-key (kbd "<M-left>") 'backward-word)
  )
#+end_src

** org-capture
:PROPERTIES:
:ID:       D2052656-45F1-4FA1-AAB7-D001395AE789
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(use-feature emacs
  :after org-capture
  :demand t
  :config
  ;; If Emacs doesn't find an ID, run `M-x org-id-update-id-locations'
  (dolist (template `(("r" "Tlön: RAE" entry
                       (id "604dbb4c-4948-492e-b1cd-84b0a1451b4a")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("f" "Tlön: FM" entry
                       (id "5d94a97f-701f-4d0d-94ad-ff1b88bf0e82")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("d" "Tlön: LBDLH" entry
                       (id "0d6d7ebb-bb51-4505-9a29-68b79f8c12de")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("u" "Tlön: EAN" entry
                       (id "8b9c313a-3630-4b77-b924-a8f7f9e52d8d")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("h" "Tlön: HEAR" entry
                       (id "f3f14f2f-2b74-4ea7-a84f-4d9aae458201")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("g" "Tlön: GPE" entry
                       (id "e9b7041f-8721-495f-b5f7-97ad83ae061c")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("c" "Tlön: Core" entry
                       (id "68f0150e-9b0d-4bab-86c0-2bf878e19d9e")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("s" "To sort" entry
                       (id "107D27EC-B193-444E-B65B-9B1AD2A7CC65")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("m" "Tlön: Core: messaging" entry
                       (id "9387B56D-2940-4FB0-91EF-92879D58659E")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("e" "Tlön: Core: debugging Emacs" entry
                       (id "8402F53C-F547-4705-B79E-24D6286D2C9E")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("t" "Tlön: Core: Project t" entry
                       (id "12645897-A06F-44DD-876D-0FFC47D0E742")
                       "** TODO %?\n" :empty-lines 1 :prepend t)
                      ("tb" "tlon: bae")
                      ("tbP" "Tlön: BAE: Process topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbC" "Tlön: BAE: Check topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbU" "Tlön: BAE: Publish topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbV" "Tlön: BAE: Review topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbR" "Tlön: BAE: Revise topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbW" "Tlön: BAE: Rewrite topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbT" "Tlön: BAE: Translate topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbI" "Tlön: BAE: Import topic (via org-capture)" entry
                       (id "19FDA2D4-C33C-48DB-8C48-546816F095EB")
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbM" "Tlön: BAE: Misc [via org-capture] Misc" entry
                       (id "7CCD6226-DB0A-4742-9277-955FCB276137")
                       "** TODO [#5] %a\n" :empty-lines 1 :prepend t  :immediate-finish t)
                      ("p" "GPT-4" entry
                       (id "C5C5EF82-E7FC-461E-B7BE-FE921CEE9158")
                       "* %?\n\n" :empty-lines 1 :prepend t :jump-to-captured t)
                      ("tbJ" "Tlön: BAE: Create new job (via org-capture)" entry
                       (id ,paths-tlon-babel-todos-jobs-id)
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :jump-to-captured t)
                      ("tbG" "Tlön: BAE: Create new todo from GitHub (via org-capture)" entry
                       (id ,paths-tlon-babel-todos-generic-id)
                       "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)))
    (push template org-capture-templates))

  )
#+end_src

** org-extras
:PROPERTIES:
:ID:       A33C8C23-C628-4BBC-858F-EBCCE5FB9AC8
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(defun org-extras-capture-before-finalize-hook-function ()
  "Define behavior of `org-capture-before-finalize-hook'."
  (pcase (plist-get org-capture-plist :key)
    ("p"
     (org-ai-mode)
     (org-narrow-to-subtree)
     (forward-line)
     (forward-line)
     (insert "#+begin_ai\n[SYS]: You are a helpful assistant.\n\n[ME]:\n#+end_ai
")
     (message "finished"))))

(setq org-extras-bbdb-anniversaries-heading nil)
#+end_src

** file-extras
:PROPERTIES:
:ID:       E0504428-9E83-4267-B2C1-35583BF08074
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq files-extras-new-empty-buffer-major-mode 'org-mode)
#+end_src

** window-extras
:PROPERTIES:
:ID:       FF959105-FAE3-4D6C-B320-20B9F67DE6B1
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq window-extras-frame-split-width-threshold 350)
#+end_src

** hydra
:PROPERTIES:
:ID:       3F8128CC-0476-476D-A00C-8B0A2E15821D
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(defhydra hydra-org-work
  (:hint nil
         :idle 0
         :color blue)
  "Tlön dashboard"
  ("b" (org-id-goto "49adbb3e-b542-4752-a67b-16bc2eb44624") "BAE")
  ("r" (org-id-goto "604dbb4c-4948-492e-b1cd-84b0a1451b4a") "RAE")
  ("f" (org-id-goto "5d94a97f-701f-4d0d-94ad-ff1b88bf0e82") "FM")
  ("d" (org-id-goto "0d6d7ebb-bb51-4505-9a29-68b79f8c12de") "LBDLHD")
  ("u" (org-id-goto "8b9c313a-3630-4b77-b924-a8f7f9e52d8d") "EAN")
  ("h" (org-id-goto "f3f14f2f-2b74-4ea7-a84f-4d9aae458201") "HEAR")
  ("g" (org-id-goto "e9b7041f-8721-495f-b5f7-97ad83ae061c") "GPE")
  ("c" (org-id-goto "68f0150e-9b0d-4bab-86c0-2bf878e19d9e") "Core")
  ("s" (org-id-goto "107D27EC-B193-444E-B65B-9B1AD2A7CC65") "To sort")
  ("m" (org-id-goto "9387B56D-2940-4FB0-91EF-92879D58659E") "Messaging")
  ("e" (org-id-goto "8402F53C-F547-4705-B79E-24D6286D2C9E") "debugging Emacs")
  ("t" (org-id-goto "12645897-A06F-44DD-876D-0FFC47D0E742") "Project t")
  )


(global-set-key (kbd "H-;") 'org-extras-work-dispatch)
(put 'scroll-left 'disabled nil)
#+end_src

** modus-themes-extras
:PROPERTIES:
:ID:       4BD0E9B3-FB9E-47D3-AAB1-A93D6280EFF4
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(modus-themes-extras-load-theme-conditionally)
#+end_src

** forge
:PROPERTIES:
:ID:       7D0F0B29-25B4-485E-9138-0051BF3FAA8A
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq forge-owned-accounts "worldsaround")
#+end_src

** warnings
:PROPERTIES:
:ID:       0E6CBFCD-10E5-4A01-B6FE-12B26F6C7C08
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq warning-minimum-level :error)
#+end_src

** telega
:PROPERTIES:
:ID:       880FDECC-C882-4686-AB55-4F6BBC5D884D
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq telega-server-libs-prefix "/Users/cartago/source/td/tdlib")
#+end_src

** citar
:PROPERTIES:
:ID:       54D18706-0226-479A-A482-FD3E5AADFA47
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq citar-citeproc-csl-styles-dir paths-dir-tlon-csl-styles)
#+end_src

** tlon-init
:PROPERTIES:
:ID:       A38AB01A-19E7-4F42-BF0C-20207882BB67
:END:

#+begin_src emacs-lisp  :tangle (print tlon-init-file-late-init)
(run-hooks 'tlon-init-post-init-hook)
#+end_src

* tangle flags
:PROPERTIES:
:ID:       A4E7C5AD-1E55-4C6F-B0E5-8320D282A886
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-tangle-flags)
(
 (:anki-editor . nil)
 (:copilot . nil)
 (:corfu-terminal . nil)
 (:corfu-doc-terminal . nil)
 (:erc . nil)
 (:espotify . nil)
 (:hammy . nil)
 (:keytar . nil)
 (:lsp-grammarly . t)
 (:midnight . nil)
 (:mu4e . nil)
 (:org-gcal . nil)
 (:org-roam . nil)
 (:org2blog . nil)
 (:orgmdb . nil)
 (:remember . nil)
 (:slack . nil)
 (:twittering-mode . t)
 (:vulpea . nil)
 )
#+end_src

* paths-override
:PROPERTIES:
:ID:       0B85812B-1620-4F40-A5BA-534626B6B112
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-paths-override)
(
 (paths-file-cookies . (file-name-concat paths-dir-downloads "cookies.txt"))
 (paths-dir-chemacs-profiles . ".config/emacs-profiles/")
 (paths-dir-root . (file-name-as-directory (expand-file-name "/")))
 (paths-dir-system-apps . (file-name-concat paths-dir-root "Applications/"))
 (paths-dir-dropbox . (file-name-concat (expand-file-name "~") "Library/CloudStorage/Dropbox/"))
 (paths-dir-google-drive . (file-name-concat (expand-file-name "~") "Google Drive/"))
 (paths-dir-downloads . (file-name-concat (expand-file-name "~") "Downloads/"))
 (paths-dir-external-repos . (file-name-concat (expand-file-name "~") "source/"))
 (paths-dir-tlon-repos . paths-dir-external-repos)
 (paths-dir-babel-refs . (file-name-concat paths-dir-tlon-repos "babel-refs/"))
 (paths-dir-tlon-biblioteca-altruismo-eficaz . (file-name-concat (expand-file-name "~") "source/biblioteca-altruismo-eficaz/"))
 (paths-dir-emacs .   user-emacs-directory)
 (paths-dir-google-drive . (file-name-concat (expand-file-name "~") "google drive/"))
 (paths-dir-music . (file-name-concat paths-dir-google-drive "music/"))
 (paths-dir-movies . (file-name-concat (expand-file-name "~") "movies/"))
 (paths-dir-finance . (file-name-concat paths-dir-google-drive "finance/"))
 (paths-dir-audiobooks . (file-name-concat paths-dir-google-drive "audiobooks/"))
 (paths-dir-music-tango . (file-name-concat paths-dir-music "tango/"))
 (paths-dir-music-popular . (file-name-concat paths-dir-music "popular/"))
 (paths-dir-music-classical . (file-name-concat paths-dir-music "classical/"))
 (paths-dir-music-to-sort . (file-name-concat paths-dir-music "to sort/"))
 (paths-dir-anki . "")
 (paths-dir-archive . "")
 (paths-dir-inactive . "")
 (paths-dir-personal-bibliography . (file-name-concat (expand-file-name "~") "source/bibliography/"))
 (paths-dir-blog . "")
 (paths-dir-journal . "")
 (paths-dir-wiki . "")
 (paths-dir-wiki-entries . "")
 (paths-dir-wiki-references . "")
 (paths-dir-dotfiles . (file-name-concat (expand-file-name "~") "source/dotfiles/"))
 (paths-dir-karabiner . "")
 (paths-dir-bibliographic-notes .  (file-name-concat paths-dir-dropbox "bibliographic-notes/"))
 (paths-dir-yasnippets . (file-name-concat paths-dir-dotemacs "yasnippets/"))
 (paths-dir-abbrev . (file-name-concat paths-dir-dotemacs "abbrev/"))
 (paths-dir-private . (file-name-concat paths-dir-dropbox "private/"))
 (paths-dir-ledger . (file-name-concat paths-dir-dropbox "ledger/"))
 (paths-dir-notes . "")
 (paths-dir-people . "")
 (paths-dir-android . "")
 (paths-dir-ade . (file-name-concat (expand-file-name "~") "Documents/Digital Editions/"))
 (paths-dir-pdf-library . (file-name-concat paths-dir-google-drive "library-pdf/"))
 (paths-dir-html-library . (file-name-concat paths-dir-google-drive "library-html/"))
 (paths-dir-media-library . (file-name-concat paths-dir-google-drive "library-media/"))
 (paths-dir-emacs-var . (file-name-concat paths-dir-emacs "var/"))
 (paths-dir-tlon-docs . (file-name-concat (expand-file-name "~") "source/" "tlon-docs/"))
 (paths-dir-translation-server . (file-name-concat (expand-file-name "~") "source/" "translation-server/"))
 (paths-dir-PW . "")
 (paths-dir-google-drive-tlon . (file-name-concat paths-dir-google-drive "tlon/"))
 (paths-dir-google-drive-tlon-BAE . (file-name-concat paths-dir-google-drive-tlon "BAE/"))
 (paths-dir-google-drive-tlon-EAN . (file-name-concat paths-dir-google-drive-tlon "EAN/"))
 (paths-dir-google-drive-tlon-FM . (file-name-concat paths-dir-google-drive-tlon "FM/"))
 (paths-dir-google-drive-tlon-GPE . (file-name-concat paths-dir-google-drive-tlon "GPE/"))
 (paths-dir-google-drive-tlon-HEAR . (file-name-concat paths-dir-google-drive-tlon "HEAR/"))
 (paths-dir-google-drive-tlon-LBDLH . (file-name-concat paths-dir-google-drive-tlon "LBDLH/"))
 (paths-dir-google-drive-tlon-LP . (file-name-concat paths-dir-google-drive-tlon "LP/"))
 (paths-dir-google-drive-tlon-RAE . (file-name-concat paths-dir-google-drive-tlon "RAE/"))
 (paths-dir-google-drive-tlon-RCG . (file-name-concat paths-dir-google-drive-tlon "RCG/"))
 (paths-dir-dropbox-tlon . (file-name-concat paths-dir-dropbox "tlon/"))
 (paths-dir-google-drive-tlon-core . (file-name-concat paths-dir-google-drive-tlon "core/"))
 (paths-dir-google-drive-tlon-fede . (file-name-concat paths-dir-google-drive-tlon "fede/"))
 (paths-dir-google-drive-tlon-leo . (file-name-concat paths-dir-google-drive-tlon "leo/"))
 (paths-dir-dropbox-tlon-core . (file-name-concat paths-dir-dropbox-tlon "core/"))
 (paths-dir-dropbox-tlon-leo . (file-name-concat paths-dir-dropbox-tlon "leo/"))
 (paths-dir-dropbox-tlon-fede . (file-name-concat paths-dir-dropbox-tlon "fede/"))
 (paths-dir-dropbox-tlon-ledger . (file-name-concat paths-dir-dropbox-tlon-core "ledger/"))
 (paths-dir-dropbox-tlon-pass . (file-name-concat paths-dir-dropbox-tlon-core "pass/"))
 (paths-dir-dropbox-tlon-BAE . (file-name-concat paths-dir-dropbox-tlon "BAE/"))
 (paths-dir-dropbox-tlon-EAN . (file-name-concat paths-dir-dropbox-tlon "EAN/"))
 (paths-dir-dropbox-tlon-FM . (file-name-concat paths-dir-dropbox-tlon "FM/"))
 (paths-dir-dropbox-tlon-GPE . (file-name-concat paths-dir-dropbox-tlon "GPE/"))
 (paths-dir-dropbox-tlon-HEAR . (file-name-concat paths-dir-dropbox-tlon "HEAR/"))
 (paths-dir-dropbox-tlon-LBDLH . (file-name-concat paths-dir-dropbox-tlon "LBDLH/"))
 (paths-dir-dropbox-tlon-LP . (file-name-concat paths-dir-dropbox-tlon "LP/"))
 (paths-dir-dropbox-tlon-RAE . (file-name-concat paths-dir-dropbox-tlon "RAE/"))
 (paths-dir-dropbox-tlon-RCG . (file-name-concat paths-dir-dropbox-tlon "RCG/"))
 (paths-dir-emacs-local . (file-name-concat paths-dir-emacs "local/"))
 (paths-dir-org .   paths-dir-dropbox-tlon-leo)
 (paths-dir-org-roam . "")
 (paths-dir-org-images . "")
 (paths-dir-websites . "")
 (paths-dir-all-repos . paths-dir-people)
 (paths-file-notes . (file-name-concat paths-dir-org "notes.org"))
 (paths-file-inbox-desktop . (file-name-concat paths-dir-android "inbox-desktop.org"))
 (paths-file-inbox-mobile . (file-name-concat paths-dir-android "inbox-mobile.org"))
 (paths-file-calendar . (file-name-concat paths-dir-android "calendar.org"))
 (paths-file-feeds-pablo . "")
 (paths-file-tlon-feeds . (file-name-concat paths-dir-dropbox-tlon-core "feeds.org"))
 (paths-file-anki . "")
 (paths-file-init . (file-name-concat paths-dir-dotemacs "init.el"))
 (paths-file-config . (file-name-concat paths-dir-dotemacs "config.org"))
 (paths-file-karabiner . "")
 (paths-file-karabiner-edn . "")
 (paths-file-wiki-notes . (file-name-concat paths-dir-wiki "wiki-notes.org"))
 (paths-file-wiki-published . (file-name-concat paths-dir-wiki "wiki-published.org"))
 (paths-file-wiki-help . (file-name-concat paths-dir-wiki "wiki-help.org"))
 (paths-file-library . (file-name-concat paths-dir-notes "library.org"))
 (paths-file-quotes . (file-name-concat paths-dir-blog "quotes.org"))
 (paths-file-films . (file-name-concat paths-dir-notes "films.org"))
 (paths-file-tlon-tareas-leo . (file-name-concat paths-dir-dropbox-tlon-leo "tareas.org"))
 (paths-file-tlon-tareas-fede . (file-name-concat paths-dir-dropbox-tlon-fede "tareas.org"))
 (paths-file-org2blog . (file-name-concat paths-dir-blog ".org2blog.org"))
 (paths-file-straight-profile . "")
 (paths-file-orb-noter-template . (file-name-concat paths-dir-personal-bibliography "orb-noter-template.org"))
 (paths-file-orb-capture-template . (file-name-concat paths-dir-bibliographic-notes "${citekey}.org"))
 (paths-file-bookmarks . (file-name-concat paths-dir-dropbox "bookmarks"))
 (paths-file-variables . (file-name-concat paths-dir-dotemacs "variables.el"))
 (paths-file-ledger . (file-name-concat paths-dir-dropbox-tlon-leo "journal.ledger"))
 (paths-file-ledger-db . (file-name-concat paths-dir-ledger ".pricedb"))
 (paths-file-metaculus . (file-name-concat paths-dir-notes "metaculus.org"))
 (paths-file-gpe . (file-name-concat paths-dir-notes "global-priorities-encyclopedia.org"))
 (paths-file-fm . (file-name-concat paths-dir-notes "future-matters.org"))
 (paths-file-ffrp . (file-name-concat paths-dir-notes "future-fund-regranting-program.org"))
 (paths-file-rcg . (file-name-concat paths-dir-notes "riesgos-catastróficos-globales.org"))
 (paths-file-ean . (file-name-concat paths-dir-notes "ea.news.org"))
 (paths-file-cookies . "/Users/cartago/downloads/cookies.txt")
 (paths-file-work . (file-name-concat paths-dir-notes "work-dashboard.org"))
 (paths-file-tlon-ledger-schedule-file . (file-name-concat paths-dir-dropbox-tlon-ledger "ledger-schedule.ledger"))
 (paths-file-tlon-docs-bae . (file-name-concat paths-dir-tlon-docs "bae.org"))
 (paths-file-tlon-docs-core . (file-name-concat paths-dir-tlon-docs "core.org"))
 (paths-file-tlon-ledger . (file-name-concat paths-dir-dropbox-tlon-ledger "tlon.ledger"))
 (paths-file-tlon-babel . paths-file-tlon-tareas-leo)
 (paths-file-personal-bibliography-old . (file-name-concat paths-dir-personal-bibliography "old.bib"))
 (paths-file-personal-bibliography-new . (file-name-concat paths-dir-personal-bibliography "new.bib"))
 (paths-files-bibliography-personal . `(,paths-file-personal-bibliography-new
                                        ,paths-file-personal-bibliography-old))
 (paths-tlon-babel-todos-jobs-id . "19FDA2D4-C33C-48DB-8C48-546816F095EB")
 (paths-tlon-babel-todos-generic-id . "3311BBC7-41EF-4FA5-AC91-627ECD0AAC29"))
#+end_src

* local variables
:PROPERTIES:
:ID:       A3959E87-841E-44A5-B174-8B53F81F8979
:END:
# Local Variables:
# eval: (files-extras-buffer-local-set-key (kbd "s-y") 'org-decrypt-entry)
# org-crypt-key: "tlon.shared@gmail.com"
# End:
