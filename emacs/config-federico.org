#+title: Fede's config

* excluded packages
:PROPERTIES:
:ID:       4241A319-CECB-41DC-87DA-C0FD778CD187
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-excluded-packages)
(setq tlon-init-excluded-packages
      '(
        aide
        anki-editor
        auto-commit-mode
        ;; bbdb
        ;; copilot
        corfu-doc-terminal
        corfu-terminal
        ;; display-wttr
        erc
        espotify
        ;; flycheck
        ;; flymake
        frame
        ;; forge
        gdrive
        git-auto-commit-mode
        hammy
        ;; jinx
        keytar
        midnight
        mixed-pitch
        mu4e
        ;; mullvad
        ns-win
        org-gcal
        ;; org-roam
        org2blog
        orgmdb
        outline
        ;; pdf-tools
        puni
        remember
        ;; server
        slack
        ;; spelling
        ;; tlon-init
        theme-loaddefs
        twittering-mode
        ;; vulpea
        ;; window
        ;; yasnippet
        ))
#+end_src

* paths
:PROPERTIES:
:ID:       79C65A15-D040-48C0-98FC-8DC092804E76
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-paths-override)
(
 (paths-init-dir . (getenv "HOME"))
 (paths-dir-bibliography . (file-name-concat (getenv "HOME") ".local/bibliography-tlon/"))
 (paths-dir-google-drive . (file-name-concat (getenv "HOME") "google_drive/My Drive/"))
 (paths-dir-music . (file-name-concat paths-dir-google-drive "Music/"))
 (paths-dir-movies . (file-name-concat paths-dir-google-drive "Movies/"))
 (paths-dir-dotfiles . (file-name-concat (getenv "HOME") "source/dotfiles/"))
 (paths-dir-external-repos . (file-name-concat (getenv "HOME") "source/"))
 (paths-dir-tlon-repos . paths-dir-external-repos)
 (paths-dir-org . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-dir-org-roam . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-dir-tlon-biblioteca-altruismo-eficaz . (file-name-concat paths-dir-tlon-repos "biblioteca-altruismo-eficaz/"))
 (paths-dir-org-images . (file-name-concat paths-dir-google-drive "org-images/"))
 (paths-dir-websites . "")
 (paths-dir-notes . (file-name-concat paths-dir-dropbox "tlon/fede/"))
 (paths-file-notes . (file-name-concat paths-dir-org "notes.org"))
 (paths-file-feeds-pablo . "")
 (paths-file-anki . "")
 (paths-file-karabiner . "")
 (paths-file-karabiner-edn . "")
 (paths-file-wiki-notes . "")
 (paths-file-wiki-published . "")
 (paths-file-wiki-help . "")
 (paths-file-library . "")
 (paths-file-quotes . "")
 (paths-file-films . "")
 (paths-file-org2blog . "")
 (paths-file-straight-profile . "")
 (paths-file-orb-noter-template . "")
 (paths-file-orb-capture-template . "")
 (paths-file-ffrp . "")
 (paths-file-rcg . "")
 (paths-file-ean . "")
 (paths-file-cookies . "")
 (paths-file-work . "")
 (paths-file-tlon-tareas-fede . (file-name-concat paths-dir-dropbox-tlon-fede "tareas.org"))
 (paths-tlon-todos-jobs-id . "F7EEAF78-A82B-4F8D-88FE-E6FBF9034BBA")
 (paths-tlon-todos-generic-id . "F7EEAF78-A82B-4F8D-88FE-E6FBF9034BBA")
 (paths-dir-babel-refs . (file-name-concat paths-dir-external-repos "babel-refs"))
 (paths-dir-inactive . "")
 )
#+end_src

* code overrides
:PROPERTIES:
:ID:       71ED9AC5-9D0A-40E0-BA58-7AA7FA36793A
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-code-override)
((:zotra-startup . ((ignore)))
 (:window-border . ((ignore)))
 (:window-split . ((ignore)))
 ;; (:modus-themes-load . ((modus-themes-load-theme 'modus-vivendi)))
 (:citar-keybindings . ((ignore)))
 ;; (:frame-extras-maximize-frame . ((ignore)))
 ;; (:org-fold . ((ignore)))
 )
#+end_src

* fede's early-init
:PROPERTIES:
:ID:       0C6ACEE9-21F3-49C2-A091-F02DDFCF6B3C
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-early-init)
;; recommended for straight/elpaca (github.com/radian-software/straight.el#getting-started)
(setq package-enable-at-startup nil)

;; github.com/emacscollective/no-littering#native-compilation-cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (file-name-concat (getenv "HOME")
    ".config/emacs-profiles/var/eln-cache/")))
#+end_src

* late init
:PROPERTIES:
:ID:       3FB5128E-FBBA-4C4B-BFC9-8186878DDB4E
:END:

** startup
:PROPERTIES:
:ID:       5E67511F-C40D-4BFC-84AA-353DA60585DE
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(setq user-full-name "Federico Stafforini")
(setq user-mail-address "fstafforini@gmail.com")
#+end_src

** claendar-extras
:PROPERTIES:
:ID:       09286FD9-FE88-445D-BAC4-236A04211800
:END:
#+begin_src emacs-lisp
(with-eval-after-load 'calendar-extras
  (setq calendar-extras-location-name "Buenos Aires")
  (setq calendar-extras-use-geolocation nil))
#+end_src

** exec-path-from-shell
:PROPERTIES:
:ID:       483A1BF8-C5BA-43AA-A502-13EE72419362
:END:
#+begin_src emacs-lisp :tangle no
(use-package exec-path-from-shell
  :demand t
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "TLON_EMAIL")
  (setq tlon-core-email-shared (getenv "TLON_EMAIL"))
  (setq gptel-api-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
  ;; (gptel-make-anthropic "Claude"
  ;;   :stream t
  ;;   :key (auth-source-pass-get "key" (concat "tlon/core/anthropic.com/" tlon-core-email-shared)))

  ;; (gptel-make-gemini "Gemini"
  ;;   :stream t
  ;;   :key (auth-source-pass-get 'secret
  ;;                           (concat "tlon/core/makersuite.google.com/" tlon-core-email-shared)))
  (setq gpt-commit-openai-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
  (setq gpt-commit-model-name "gpt-4")
  (setq bib-isbndb-key
        (auth-source-pass-get "key" (concat "tlon/babel/isbndb.com/" tlon-core-email-shared)))

  (message (format "exec-path-from-shell: TLON_EMAIL=%s" (getenv "TLON_EMAIL")))
  )
#+end_src

** browse-url
:PROPERTIES:
:ID:       D2C8E7EB-0088-4E60-9F7F-49B4E1B40479
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'browse-url
  (setq browse-url-browser-function 'browse-url-chrome))
#+end_src

** window-extras
:PROPERTIES:
:ID:       47C50936-8F8E-4900-BED0-B64AE8DFE7F9
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'window-extras
  (setq split-width-threshold 160)
  (setq split-height-threshold nil)
  (setq split-window-preferred-function 'split-window-sensibly)

  (message "`window-extras' late-init config loaded."))
#+end_src

** nginx-mode
:PROPERTIES:
:ID:       20402D51-C4D0-4CB4-8523-D57EA6BEED0C
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(use-package nginx-mode :demand t)
#+end_src

** docker
:PROPERTIES:
:ID:       A024A856-47CE-4B85-9C42-9DD756D1CD8B
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(use-package docker
  :demand t)
#+end_src

** ns-win
:PROPERTIES:
:ID:       72CD77BE-CB5B-4052-AA5A-40CE41DCA867
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'ns-win
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-right-option-modifier 'alt)
    (setq mac-command-modifier 'hyper)
    (setq mac-option-modifier 'meta)
    (setq mac-right-command-modifier 'super)
    (setq mac-function-modifier '(:button 2)))
  (message "`ns-win' late-init config loaded."))
#+end_src

** fancy-battery-mode
:PROPERTIES:
:ID:       D59EED4B-A6AF-45D0-92F2-26F15E3F6B21
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'fancy-battery-mode
  (fancy-battery-mode -1)
  (message "`fancy-battery-mode' late-init config loaded."))
#+end_src

#+RESULTS:

** frame-extras
:PROPERTIES:
:ID:       F24B3E2D-ACB2-49EB-AE1C-BDCE5C8A1239
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'frame-extras
  (remove-function after-focus-change-function #'frame-extras-maximize-frame)
  (message "`frame-extras' late-init config loaded."))
#+end_src

** simple
:PROPERTIES:
:ID:       D5957624-5E90-404B-B86D-72F1D79A1401
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'simple
  (setq global-mark-ring-max 100)
  (setq mark-ring-max 100)
  (setq shift-select-mode t)
  (message "`simple' late-init config loaded."))
#+end_src

** files
:PROPERTIES:
:ID:       93EA6DFF-EE82-4CE4-8E1A-B4054E71D473
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'files
  (setq make-backup-files nil)
  (message "`files' late-init config loaded."))
#+end_src

** gptel
:PROPERTIES:
:ID:       66628F76-29A9-42EF-BEDC-FDC33D6E78D8
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'gptel
  (setq gptel-default-mode 'markdown-mode))
#+end_src

** gptel-extras
:PROPERTIES:
:ID:       3B1E43B8-BE9C-4FA1-B2CA-6BD8E9ED746F
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'gptel-extras
  ;; gptel config
  (setq gptel-default-mode 'markdown-mode
        gptel-extras-dir "/Users/fede/Dropbox/obsidian/gpt-4/")

  ;; Remove auto save file when opening gptel
  (advice-remove 'gptel #'gptel-extras-save-buffer)

  ;; Add a new advice for my preferred bahavior
  (defun gptel-extras-name-buffer (name _ _ _)
    "Give the `gptel' buffer a unique NAME right after it is created."
    (switch-to-buffer name)
    (rename-buffer "*gptel*" 'unique))

  (advice-add 'gptel :after #'gptel-extras-name-buffer)

  ;; redefine save function
  (defun gptel-extras-save-buffer ()
    "Save the `gptel' buffer on demand, in `gptel-extras-dir'."
    (interactive)
    (let* ((name (read-string "Enter buffer name: "))
           (extension (pcase major-mode
                        ('org-mode "org")
                        ('markdown-mode "md")
                        (_ (user-error "Unsupported major mode"))))
           (filename (file-name-concat gptel-extras-dir
                                       (file-name-with-extension (simple-extras-slugify name) extension))))
      (write-file filename 'confirm)))

  (message "`gptel-extras' late-init config loaded."))
#+end_src

** copilot
:PROPERTIES:
:ID:       46B3BF04-8E5A-427A-BBDA-5F0FCACB4C72
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'copilot-extras
  (remove-hook 'prog-mode-hook #'copilot-extras-enable-conditionally)
  (remove-hook 'text-mode-hook #'copilot-extras-enable-conditionally))
#+end_src

** cua-base
:PROPERTIES:
:ID:       ECA4B30E-DE5C-4ACC-87AA-30975B8398EC
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(cua-selection-mode 1)
;; disable C-return or it will interfere with org
(define-key cua-global-keymap (kbd "<C-return>") nil)
#+end_src

** dired
:PROPERTIES:
:ID:       303394D7-3C61-4D9D-8765-028BD4254DA9
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'dired
  ;; (general-define-key
   :keymaps 'dired-mode-map
   "n" 'find-file)

  (transient-define-prefix dired-fedes-dispatch ()
    "Fede's version of Pablo's dispatcher."
    ["Dired folders"
     [("d" "dotfiles" (lambda () (interactive) (dired paths-dir-dotfiles)))
      ("e" "emacs: current profile dir" (lambda () (interactive) (dired paths-dir-emacs)))
      ("p" "emacs: profiles" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") ".config/emacs-profiles"))))
      ("s" "source" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") "source"))))
      ("v" "movies" (lambda () (interactive) (dired paths-dir-movies)))
      ("w" "downloads" (lambda () (interactive) (dired paths-dir-downloads)))
      ("x" "Dropbox" (lambda () (interactive) (dired paths-dir-dropbox)))
      ("z" "Google Drive" (lambda () (interactive) (dired paths-dir-google-drive)))]

     ["Special"
      ("." "File at point" (lambda () (interactive) (dired-at-point)))
      ("/" "Root" (lambda () (interactive) (dired "/")))
      ("SPC" "user" (lambda () (interactive) (dired "~/")))
      (";" "Current buffer" dired-jump)
      ("H-;" "Current buffer in other window" dired-jump-other-window)]

     ["System config"
      ("n" "Local ningx config" (lambda () (interactive) (dired "/opt/homebrew/etc/nginx/sites-available/")))
      ("g" "nginx home" (lambda () (interactive) (dired (file-name-concat (getenv "HOME") "www"))))]

     ["DigitalOcean"
      ("N" "/config/nginx/sites-available" (lambda () (interactive) (dired "/ssh:root@tlon.team:/etc/nginx/sites-available/")))
      ("H" "/home/fede" (lambda () (interactive) (dired "/ssh:fede@tlon.team:/home/fede")))]

     ["Tlön: Google Drive"
      ("t H-b" "Google Drive: Babel" (lambda () (interactive) (dired paths-dir-google-drive-tlon)))
      ("t H-n" "Google Drive: EAN" (lambda () (interactive) (dired paths-dir-google-drive-tlon-EAN)))
      ("t H-m" "Google Drive: FM" (lambda () (interactive) (dired paths-dir-google-drive-tlon-FM)))
      ("t H-g" "Google Drive: GPE" (lambda () (interactive) (dired paths-dir-google-drive-tlon-GPE)))
      ("t H-h" "Google Drive: HEAR" (lambda () (interactive) (dired paths-dir-google-drive-tlon-HEAR)))
      ("t H-d" "Google Drive: LBDLH" (lambda () (interactive) (dired paths-dir-google-drive-tlon-LBDLH)))
      ("t H-p" "Google Drive: LP" (lambda () (interactive) (dired paths-dir-google-drive-tlon-LP)))
      ("t H-r" "Google Drive: RAE" (lambda () (interactive) (dired paths-dir-google-drive-tlon-RAE)))
      ("t H-t" "Google Drive: tlon" (lambda () (interactive) (dired paths-dir-google-drive-tlon)))
      ("t H-c" "Google Drive: core" (lambda () (interactive) (dired paths-dir-google-drive-tlon-core)))
      ("t H-l" "Google Drive: leo" (lambda () (interactive) (dired paths-dir-google-drive-tlon-leo)))
      ("t H-f" "Google Drive: fede" (lambda () (interactive) (dired paths-dir-google-drive-tlon-fede)))
      ]
     ["Tlön: Dropbox"
      ("t b" "Dropbox: Babel" (lambda () (interactive) (dired paths-dir-dropbox-tlon)))
      ("t n" "Dropbox: EAN" (lambda () (interactive) (dired paths-dir-dropbox-tlon-EAN)))
      ("t m" "Dropbox: FM" (lambda () (interactive) (dired paths-dir-dropbox-tlon-FM)))
      ("t g" "Dropbox: GPE" (lambda () (interactive) (dired paths-dir-dropbox-tlon-GPE)))
      ("t h" "Dropbox: HEAR" (lambda () (interactive) (dired paths-dir-dropbox-tlon-HEAR)))
      ("t d" "Dropbox: LBDLH" (lambda () (interactive) (dired paths-dir-dropbox-tlon-LBDLH)))
      ("t p" "Dropbox: LP" (lambda () (interactive) (dired paths-dir-dropbox-tlon-LP)))
      ("t r" "Dropbox: RAE" (lambda () (interactive) (dired paths-dir-dropbox-tlon-RAE)))
      ("t t" "Dropbox: tlon" (lambda () (interactive) (dired paths-dir-dropbox-tlon)))
      ("t c" "Dropbox: core" (lambda () (interactive) (dired paths-dir-dropbox-tlon-core)))
      ("t f" "Dropbox: fede" (lambda () (interactive) (dired paths-dir-dropbox-tlon-fede)))
      ("t l" "Dropbox: leo" (lambda () (interactive) (dired paths-dir-dropbox-tlon-leo)))
      ]])
  (message "`dired' late-init config loaded."))
#+end_src

** forge
:PROPERTIES:
:ID:       4540F42A-BE3F-4D98-A0E7-3E65DA0C2CA2
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'forge
  (setq forge-owned-accounts `(("fstafforini"))))
#+end_src

** key bindings
:PROPERTIES:
:ID:       B641FFEE-128A-4961-8A18-C8097C046A0C
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
;; (general-define-key
 "<kp-delete>" 'delete-char
 "<home>" 'beginning-of-line
 "<end>" 'end-of-line
 "H-q" 'delete-window
 "H-w" 'files-extras-kill-this-buffer
 "H-k" 'org-extras-work-dispatch
 "H-o" 'find-file
 "H-d" 'dired-fedes-dispatch
 "H-/" 'comment-line
 "H-\\" 'window-extras-split-if-unsplit
 "H-;" 'org-extras-work-dispatch
 "H-g" nil
 "H-h" 'other-window
 "H-H" 'window-extras-buffer-move-dwim
 "s-i" 'org-clock-in
 "s-o" 'org-clock-out
 "A-s-j" 'org-clock-goto
 "A-s-x" 'org-clock-cancel
 "<M-right>" 'forward-word
 "<M-left>" 'backward-word
 "<M-H-SPC>" 'execute-extended-command
 "H-:" 'eval-expression
 "<M-backspace>" 'backward-kill-word
 "<M-delete>" 'kill-word
 "C--" 'back-button-global-backward
 "C-_" 'back-button-global-forward
 "H-i" nil
 "<C-delete>" nil
 "<C-left>" nil
 "<C-S-left>" nil
 "<C-right>" nil
 "<C-S-right>" nil
 "<C-up>" nil
 "<C-S-up>" nil
 "<C-down>" nil
 "<C-S-down>" nil)

(global-unset-key (kbd "C--"))
;; (general-unbind "C--")
(keymap-unset minibuffer-mode-map "s-i")

 ;; (general-define-key
 :keymaps '(outline-mode-map emacs-lisp-mode-map)
 "<M-left>" 'backward-word
  "<M-right>" 'forward-word)

#+end_src

** org
:PROPERTIES:
:ID:       A20984A0-7402-4775-92E9-39929324DCD2
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org
  (setq org-structure-template-alist
        '(("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("l" . "export latex")
          ("q" . "quote")
          ("s" . "src")
          ("se" . "src emacs-lisp")
          ("sc" . "src css")
          ("sj" . "src javascript")
          ("sm" . "src markdown")
          ("sp" . "src python")
          ("sq" . "src sql")
          ("ss" . "src shell")
          ("st" . "src typescript")
          ("sx" . "src jsx")
          ("v" . "verse")
          ("w" . "WP")))

  (setq-default org-support-shift-select 'always
                org-replace-disputed-keys t)

  ;; (general-define-key
   :keymap 'org-mode-map
   "s-i" 'org-clock-in
   "s-o" 'org-clock-out
   "M-<right>" nil
   "M-<left>" nil
   "M-<up>" nil
   "M-<down>" nil
   "M-S-<right>" nil
   "M-S-<left>" nil
   "M-S-<up>" nil
   "M-S-<down>" nil
   "H-<right>" 'org-metaright
   "H-<left>" 'org-metaleft
   "H-<up>" 'org-metaup
   "H-<down>" 'org-metadown
   "M-<right>" 'forward-word
   "M-<left>" 'backward-word)

  ;; remove unwanted keybindings from Pablo
  (keymap-unset org-mode-map "s-i"
                (message "`org' late-init config loaded.")))
#+end_src

** org-capture
:PROPERTIES:
:ID:       F29D9BDF-C2BB-4301-9E40-70018729229A
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-capture
  (dolist (template `(("b" "Tlön: BAE" entry
                       (id "33BFC41C-324A-47E1-A313-8233A36B2346")
                       "** TODO %?\n" :prepend t)
                      ("r" "Tlön: RAE" entry
                       (id "87906C3B-B52B-4816-BCCA-BE3EA4B88968")
                       "** TODO %?\n" :prepend t)
                      ("f" "Tlön: FM" entry
                       (id "809F6C1D-DDF7-4C6B-BB84-FFC082BE8601")
                       "** TODO %?\n" :prepend t)
                      ("d" "Tlön: LBDLH" entry
                       (id "0079A5CD-A07B-4919-A76C-4F6E6841512D")
                       "** TODO %?\n" :prepend t)
                      ("u" "Tlön: EAN" entry
                       (id "B168E4F1-D2E1-4D59-B88C-4CF924E82624")
                       "** TODO %?\n" :prepend t)
                      ("i" "Tlön: EAI" entry
                       (id "715D2C4E-4BEE-4EC4-B432-720DA35C21A9")
                       "** TODO %?\n" :prepend t)
                      ("h" "Tlön: HEAR" entry
                       (id "B157C986-D75D-4244-A522-43DCBA2F0C8E")
                       "** TODO %?\n" :prepend t)
                      ("g" "Tlön: GPE" entry
                       (id "97F7D54F-4F4A-45A4-9616-A0B548A049BE")
                       "** TODO %?\n" :prepend t)
                      ("c" "Tlön: Core" entry
                       (id "7EDB8441-7EFA-43CC-B3DE-5682D55BCEE1")
                       "** TODO %?\n" :prepend t)))
    (push template org-capture-templates))
  (message "`org-capture' late-init config loaded."))
#+end_src

** org-agenda
:PROPERTIES:
:ID:       84547352-3F99-4A1E-88CE-945FCD28C803
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-agenda
  (setq org-agenda-files
        `(,paths-file-tlon-tareas-fede
          "/Users/fede/Library/CloudStorage/Dropbox/org/todo.org"))

  (setq org-agenda-files-excluded nil)

  (setq org-agenda-custom-commands
        '(("j" "Agenda + TODOs"
           (
            ;; (tags-todo "+fede"
            ;;            (;; (tags "fede")
            ;;             (org-agenda-sorting-strategy '(priority-down todo-state-down))
            ;;             (org-agenda-overriding-header "Mensajes para Fede")))
            ;; (tags-todo "+pablo"
            ;;            (;; (tags "fede")
            ;;             (org-agenda-sorting-strategy '(priority-down todo-state-down))
            ;;             (org-agenda-overriding-header "Mensajes para Pablo")))
            ;; (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Library/CloudStorage/Dropbox/tlon/fede/tareas.org\""
            ;;            ((org-agenda-max-entries 10)
            ;;             (org-agenda-sorting-strategy '(priority-down todo-state-down))
            ;;             (org-agenda-overriding-header "TODO - Trabajo")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Library/CloudStorage/Dropbox/org/todo.org\""
                       ((org-agenda-max-entries 20)
                        (org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Personal")))
            (tags-todo "+SCHEDULED<=\"<today>\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Scheduled for today")))
            (tags-todo "+DEADLINE<=\"<today>\" +DEADLINE>=\"<today -2m>\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "Upcoming deadlines")))
            (agenda "" ((org-agenda-span 14)))
            (todo "WAITING"
                  ((org-agenda-overriding-header "WAITING")))
            ;; (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Dropbox/tlon/fede/tareas.org\""
            ;;            ((org-agenda-sorting-strategy '(priority-down todo-state-down))
            ;;             (org-agenda-overriding-header "TODO - Trabajo - Todos")))
            (tags-todo "TODO=\"TODO\"+FILE=\"/Users/fede/Dropbox/org/todo.org\""
                       ((org-agenda-sorting-strategy '(priority-down todo-state-down))
                        (org-agenda-overriding-header "TODO - Personal - Todos")))))))
  (message "`org-agenda' late-init config loaded."))
#+end_src

** org-extras
:PROPERTIES:
:ID:       E0CFFE8C-FDC1-4D7D-B484-A8E7BC87CB98
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-extras
  (setq org-extras-bbdb-anniversaries-heading nil)
  (simple-extras-init-disable-funs 90 '(org-extras-fold-show-all-headings
                                        org-extras-hide-properties
                                        org-extras-hide-logbook
                                        org-extras-show-properties
                                        org-extras-show-logbook
                                        org-extras-toggle-properties
                                        org-extras-toggle-logbook))
  (cancel-timer org-extras-agenda-switch-to-agenda-current-day-timer)
  (remove-hook 'before-save-hook #'org-extras-id-auto-add-ids-to-headings-in-file)

  (message "`org-extras' late-init config loaded."))
#+end_src

** org-roam
:PROPERTIES:
:ID:       C16FEC1D-DA7E-44D1-92BE-D13D28B6C089
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-roam
  (setq org-roam-directory paths-dir-org-roam)
  (org-roam-db-autosync-mode 1)
  (message "`org-roam' late-init config loaded."))
#+end_src

** org-tidy
:PROPERTIES:
:ID:       8F1B85FF-6AC1-4169-8F24-F80B61A298AC
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'org-tidy
  (remove-hook 'org-mode-hook #'org-tidy-mode)
  (org-tidy-mode -1)
  (message "`org-tidy-mode' late-init config loaded."))
#+end_src

** outline
:PROPERTIES:
:ID:       FB1CC8B9-42C0-402B-8EEE-7B36688E94AF
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'outline
(keymap-unset emacs-lisp-mode-map "M-<right>")
  (message "`outline' late-init config loaded."))
#+end_src

** consult
:PROPERTIES:
:ID:       306F1791-DDC6-4F33-A5CD-EC1F1DA5E778
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'consult
  (setq consult-preview-key nil)
  (message "`consult' late-init config loaded."))
#+end_src

** tlon
:PROPERTIES:
:ID:       27C0F2A5-14EC-4456-90B0-3E16AD8EF35B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'tlon
  (setq tlon-todos-jobs-id "CE0C7638-97F1-4509-8212-5B77F4A4AF29")
  (setq tlon-todos-generic-id "CE0C7638-97F1-4509-8212-5B77F4A4AF29")
  (setq tlon-split-repo nil)
  (tlon-initialize))
#+end_src

** jinx
:PROPERTIES:
:ID:       BD4F6E88-01BE-4625-AF75-7DB04DE8F8D3
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'jinx
  (dolist (hook '(text-mode-hook prog-mode-hook conf-mode-hook))
    (remove-hook hook #'jinx-mode))
  (message "`jinx' late-init config loaded."))
#+end_src

** doom-modeline
:PROPERTIES:
:ID:       611B2410-F87D-4733-86E8-4442AB3D3D32
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'doom-modeline
  ;; buffer names are currently shown via the `breadcrumbs' package
  ;; to display them in the modeline, uncomment the line below and disable the `bradcrumbs' package
  ;; (setq doom-modeline-buffer-name t) ;
  (setq doom-modeline-buffer-file-name-style 'truncate-nil)) ; FEDE ==> Full filenames, please!
#+end_src

** tab-bar-extras
:PROPERTIES:
:ID:       6AC832A6-0F9D-450E-BFA2-0271AF4F2FB6
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'tab-bar-extras
    (prin1-to-string tab-bar-extras-global-mode-string)
    (setq tab-bar-extras-global-mode-string
          `(;;,tab-bar-extras-prefix-element
            ;;,tab-bar-extras-notification-status-element
            ;;,tab-bar-extras-date-element
            ;;,tab-bar-extras-separator-element
            ,tab-bar-extras-chemacs-element
            ,tab-bar-extras-separator-element
            ;;,tab-bar-extras-battery-element
            ,tab-bar-extras-telega-element
            ,tab-bar-extras-github-element
            ;;,tab-bar-extras-pomodoro-element
            ;;,tab-bar-extras-separator-element ; we add a separator at the end because `wttr' appends itself after it
            ))

  (setq global-mode-string tab-bar-extras-global-mode-string)
  (setq tab-bar-extras-reset-wttr nil)

  ;; (setq tab-bar-extras-global-mode-string
  ;;       `(,tab-bar-extras-prefix-element
  ;;         ;; ,tab-bar-extras-time-element
  ;;         ;; ,tab-bar-extras-separator-element
  ;;         ,tab-bar-extras-chemacs-element
  ;;         ;; ,tab-bar-extras-separator-element
  ;;         ;; ,tab-bar-extras-battery-element
  ;;         ,tab-bar-extras-telega-element
  ;;         ,tab-bar-extras-github-element
  ;;         ;; ,tab-bar-extras-pomodoro-element
  ;;         ;; ,tab-bar-extras-suffix-element
  ;;         ))

  ;; (setq tab-bar-extras-reset-wttr nil)
  )
#+end_src

** hl-sentence
:PROPERTIES:
:ID:       48D3B0B5-5626-4B9C-803E-5D156E3A1036
:END:
Disable hl-sentence because I do not like it...
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'hl-sentence
  (remove-hook 'markdown-mode-hook #'hl-sentence-mode)
  (message "`hl-sentence' late-init config loaded."))
#+end_src

** telega
:PROPERTIES:
:ID:       3CD1A0F0-BF55-47FE-9E81-9FEAC9A9AE6B
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'telega
  ;; (setq telega-server-libs-prefix "/opt/homebrew/Cellar/tdlib/HEAD-ec788c7/")
  )
#+end_src

** telega-extras
:PROPERTIES:
:ID:       22B6AE58-5D79-4CFA-8851-1787F9B94428
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'telega-extras
  (setq telega-extras-auto-share-audio-transcript nil)
  )
#+end_src

** yasnippet
:PROPERTIES:
:ID:       FEF9B315-DE3F-4F4D-AB5F-DC71BEE19B54
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'yasnippet
  (keymap-unset yas-minor-mode-map "TAB")
  (keymap-set yas-minor-mode-map "A-x" 'yas-expand)
  (message "`yasnippet' late-init config loaded."))
#+end_src

** face-remap (disable variable-pitch-mode)
:PROPERTIES:
:ID:       B3773C4A-C682-416C-8D2B-F4EE280BCCCE
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(dolist (hook '(elfeed-show-mode-hook
                telega-webpage-mode-hook
                eww-mode-hook
                mu4e-view-mode-hook
                outline-mode-hook))
  (remove-hook hook #'variable-pitch-mode))
#+end_src

** faces-extras
:PROPERTIES:
:ID:       555F14B7-A0D0-4B7A-980F-E157C1B87EFB
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(with-eval-after-load 'faces-extras
  (setq faces-extras-fixed-pitch-font "IosevkaTermSlab Nerd Font")
  (setq faces-extras-fixed-pitch-size 150)
  (setq faces-extras-fixed-pitch-height 1.0)
  (setq faces-extras-variable-pitch-height 1.1)
  (setq faces-extras-org-level-height 1.0)
  (setq faces-extras-org-block-height 1.0)
  (setq faces-extras-org-code-height 1.0)
  (setq faces-extras-org-date-height 0.9)
  (setq faces-extras-org-tag-height 0.9)
  (setq faces-extras-org-property-value-height 0.8)
  (faces-extras-set-custom-face-attributes)
  )
#+end_src

** tareas
:PROPERTIES:
:ID:       B891DE59-5914-4452-B1F0-F856C1DA8F6E
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(find-file paths-file-tlon-tareas-fede)
(org-tidy-mode -1)
#+end_src

** After init callback
:PROPERTIES:
:ID:       712F1BEF-5B9F-42E3-96B7-4482FC9FADFF
:END:
#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
;; Code run on a long timer: aimed at running after all of Pablo's deferred calls
(run-at-time
 60 nil
 (lambda ()
   (message "Running Fede's after init callback")
   (setq display-time-format "%a %e %b %R")
   (cancel-function-timers 'org-extras-agenda-switch-to-agenda-current-day)
   (cancel-function-timers 'citar-extras-update-old-bibliography)
   (org-tidy-mode -1)
   (global-flycheck-mode -1)
   (setq calendar-extras-use-geolocation nil)
       (setq tab-bar-extras-global-mode-string
          `(;;,tab-bar-extras-prefix-element
            ;;,tab-bar-extras-notification-status-element
            ;;,tab-bar-extras-date-element
            ;;,tab-bar-extras-separator-element
            ,tab-bar-extras-chemacs-element
            ,tab-bar-extras-separator-element
            ;;,tab-bar-extras-battery-element
            ,tab-bar-extras-telega-element
            ,tab-bar-extras-github-element
            ;;,tab-bar-extras-pomodoro-element
            ;;,tab-bar-extras-separator-element ; we add a separator at the end because `wttr' appends itself after it
            ))
  (setq tab-bar-extras-reset-wttr nil)
   (tab-bar-extras-reset)
   (raise-frame)
   (select-frame-set-input-focus (selected-frame))

   ))
#+end_src

** post-init-hook
:PROPERTIES:
:ID:       A2F2A628-A3F3-44FF-B02E-AF755A2D58E7
:END:

This should be at the very end of the ~late-init~ file.

#+begin_src emacs-lisp :tangle (print tlon-init-file-late-init)
(add-hook
 'tlon-init-post-init-hook
 (lambda ()
   (message "Running Fede's post-init-hook")
   (setq calendar-extras-use-geolocation t)
   (setq tlon-core-email-shared (getenv "TLON_EMAIL"))
   (setq gptel-api-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
   (setq gpt-commit-openai-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
   (setq gpt-commit-model-name "gpt-4")
   (setq bib-isbndb-key
         (auth-source-pass-get "key" (concat "tlon/babel/isbndb.com/" tlon-core-email-shared)))
   (global-flycheck-mode -1)
   (setq calendar-extras-use-geolocation nil)
   (org-tidy-mode -1)
   ))
(run-hooks 'tlon-init-post-init-hook)
#+end_src

* local variables
:PROPERTIES:
:ID:       D706DE65-4291-4950-876D-1E38F5B330F6
:END:
# Local Variables:
# eval: (files-extras-buffer-local-set-key (kbd "s-y") 'org-decrypt-entry)
# org-crypt-key: "tlon.shared@gmail.com"
# End:
