#+title: gptel-extras: Extensions for gptel
#+author: Pablo Stafforini
#+email: pablo@stafforini.com
#+language: en
#+options: ':t toc:t author:t email:t num:t
#+startup: content
#+export_file_name: gptel-extras.info
#+texinfo_filename: gptel-extras.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Gptel Extras: (gptel-extras)
#+texinfo_dir_desc: Extensions for gptel

This manual describes the features and customization options for the Emacs Lisp file =gptel-extras.el=.

* Overview
:PROPERTIES:
:CUSTOM_ID: h:overview
:END:

=gptel-extras.el= provides extensions for the =gptel= package, which integrates various Large Language Models (LLMs) like ChatGPT, Gemini, and local models into Emacs. These extensions focus on managing context (especially for coding with Aider-like workflows), handling model-specific quirks (like Gemini location restrictions), saving conversations, and providing convenience commands.

The main features include:

+ **Aider Context Management:**
  + Commands to generate, show, add, remove, and invalidate a cached repository map (similar to Aider's repo map) for providing project context to the LLM.
  + Option to automatically add the repo map and a `conventions.md` file to the context before sending a request.
  + Command to toggle the automatic inclusion of these context files.
+ **Model-Specific Handling:**
  + Automatic connection to a Mullvad VPN server (configurable) when using the Gemini model to bypass location restrictions.
+ **Conversation Management:**
  + Automatic saving of new `gptel` buffers to files in a dedicated directory (`gptel-extras-dir`).
  + Command to continue a conversation in a new, linked buffer.
+ **Convenience Commands:**
  + Summarize commit diffs from a Magit log region using an LLM.
  + Toggle between Org and Markdown as the default mode for `gptel` buffers.
  + Command to go to the end of the buffer and send the prompt.
  + Command (for Embark) to rewrite the function definition at point.
  + Command to fix garbled characters sometimes produced by LLMs.
+ **User Feedback:**
  + Option to display an alert message when the LLM finishes inserting its response.

* User Options
:PROPERTIES:
:CUSTOM_ID: h:user-options
:END:

** Aider Context Options
:PROPERTIES:
:CUSTOM_ID: h:aider-context-options
:END:

#+vindex: gptel-extras-add-repo-map-to-context
~gptel-extras-add-repo-map-to-context~: If non-nil, automatically add the repository map (generated by ~gptel-extras-get-repo-map~) to the context before sending a request via `gptel-send`. Default is nil.

#+vindex: gptel-extras-add-conventions-to-context
~gptel-extras-add-conventions-to-context~: If non-nil, automatically add the `conventions.md` file (if it exists in the project root) to the context before sending a request via `gptel-send`. Default is nil.

#+vindex: gptel-extras-repo-map-cache-ttl
~gptel-extras-repo-map-cache-ttl~: Time-to-live (in seconds) for the cached repository map. After this duration, the cache is considered stale. Default is 3600 (1 hour).

#+vindex: gptel-extras-repo-map-invalidate-on-git-changes
~gptel-extras-repo-map-invalidate-on-git-changes~: If non-nil, invalidate the repository map cache if the git HEAD reference changes in the repository. Default is t.

** Miscellaneous Options
:PROPERTIES:
:CUSTOM_ID: h:misc-options
:END:

#+vindex: gptel-extras-gemini-mullvad-disconnect-after
~gptel-extras-gemini-mullvad-disconnect-after~: Number of minutes after which to automatically disconnect the Mullvad VPN connection initiated for a Gemini request. Default is 1.

#+vindex: gptel-extras-dir
~gptel-extras-dir~: The directory where `gptel` conversation buffers are automatically saved by ~gptel-extras-save-buffer~. Default: `~/Documents/notes/gptel/`.

#+vindex: gptel-extras-chatgpt-import-dir
~gptel-extras-chatgpt-import-dir~: The directory where ChatGPT conversation files are saved by the ~gptel-extras-import-chatgpt-conversations~ command. Default: `~/Documents/notes/chatgpt/`.

#+vindex: gptel-extras-alert-when-finished
~gptel-extras-alert-when-finished~: Controls when to display an alert message after `gptel` finishes inserting a response. Can be `t` (always), `nil` (never), or a list of model symbols (e.g., `'(gemini-pro)`). Default is `nil`.

* Commands
:PROPERTIES:
:CUSTOM_ID: h:commands
:END:

=gptel-extras.el= provides the following interactive commands:

** Summarize Commit Diffs
:PROPERTIES:
:CUSTOM_ID: h:gptel-extras-summarize-commit-diffs
:END:

#+findex: gptel-extras-summarize-commit-diffs
The command ~gptel-extras-summarize-commit-diffs~ takes the active region in a `magit-log-mode` buffer, extracts the diffs for the selected commits, and sends them to the configured LLM with a prompt asking for a concise Org mode summary suitable for changelogs. With a prefix argument, includes diff stats (`--stat`) in the prompt. The summary is displayed in a dedicated `*Commit Summary*` buffer. Uses a template file (`gptel-extras-changelog-file`) to structure the prompt.

** Aider Context Management
:PROPERTIES:
:CUSTOM_ID: h:aider-context-commands
:END:

#+findex: gptel-extras-show-repo-map
~gptel-extras-show-repo-map~: Generates (or retrieves from cache) the repository map for the current project and displays it in a dedicated buffer (e.g., `*Repo Map: project-name*`).

#+findex: gptel-extras-add-repo-map-to-context
~gptel-extras-add-repo-map-to-context~: Generates/retrieves the repo map, removes any existing repo map buffer from the `gptel` context, adds the current repo map buffer to the context, prepending explanatory text.

#+findex: gptel-extras-add-conventions-to-context
~gptel-extras-add-conventions-to-context~: Adds the `conventions.md` file from the current project root to the `gptel` context.

#+findex: gptel-extras-remove-repo-map-from-context
~gptel-extras-remove-repo-map-from-context~: Removes the dedicated repo map buffer from the `gptel` context list.

#+findex: gptel-extras-invalidate-repo-map-cache
~gptel-extras-invalidate-repo-map-cache~: Invalidates (removes) the cached repository map for the current project (or a specified REPO).

#+findex: gptel-extras-toggle-aider-files
~gptel-extras-toggle-aider-files~: Toggles the user options ~gptel-extras-add-repo-map-to-context~ and ~gptel-extras-add-conventions-to-context~ simultaneously, enabling or disabling the automatic inclusion of these files in the context.

** Conversation Management
:PROPERTIES:
:CUSTOM_ID: h:conversation-management
:END:

#+findex: gptel-extras-continue-in-new-buffer
~gptel-extras-continue-in-new-buffer~: Creates a new `gptel` buffer with a name derived from the current buffer's heading (appending or incrementing a number). Inserts a link to the new buffer at the end of the original buffer. Useful for splitting long conversations.

#+findex: gptel-extras-kill-buffer-then-reopen-file
~gptel-extras-kill-buffer-then-reopen-file~: Saves the current `gptel` buffer, kills it, and then reopens the file it was visiting. Intended as a workaround for potential issues where `gptel` becomes unresponsive.

** ChatGPT Import
:PROPERTIES:
:CUSTOM_ID: h:chatgpt-import
:END:

#+findex: gptel-extras-import-chatgpt-conversations
The command ~gptel-extras-import-chatgpt-conversations~ prompts for a JSON file containing ChatGPT conversations (as exported from the ChatGPT website). It then iterates through each conversation in the file, creating a new Org mode file for each one in the directory specified by ~gptel-extras-chatgpt-import-dir~. The filename is a slugified version of the conversation title. Inside each file, user prompts are formatted as level-3 headings, and the corresponding assistant responses are placed as text beneath them.

** Miscellaneous Commands
:PROPERTIES:
:CUSTOM_ID: h:misc-commands
:END:

#+findex: gptel-extras-toggle-major-mode
~gptel-extras-toggle-major-mode~: Toggles the `gptel-default-mode` variable between `org-mode` and `markdown-mode`.

#+findex: gptel-extras-goto-end-and-send
~gptel-extras-goto-end-and-send~: Moves point to the end of the current buffer and then calls `gptel-send`.

#+findex: gptel-extras-rewrite-defun
~gptel-extras-rewrite-defun~: Marks the function definition at point and calls `gptel-rewrite` on it. Intended for use with `embark`.

#+findex: gptel-extras-fix-garbled-chars
~gptel-extras-fix-garbled-chars~: Replaces occurrences of `let/` with `let*` and `=(` with `` `(`` from point to the end of the buffer. Useful for fixing common LLM output errors in Lisp code.

#+findex: gptel-extras-search-and-ask-model
~gptel-extras-search-and-ask-model~: Prompts the user for a search query. It then opens the default web browser to search for the query using ~gptel-extras-search-prefix~. Simultaneously, it creates a new `gptel` buffer named after the query, sets the model and backend buffer-locally according to ~gptel-extras-search-model~, and sends the same query as a prompt to that model.

* Configuration Functions
:PROPERTIES:
:CUSTOM_ID: h:configuration-functions-gptel
:END:

** ~gptel-extras-save-buffer~
:PROPERTIES:
:CUSTOM_ID: h:gptel-extras-save-buffer
:END:

#+findex: gptel-extras-save-buffer
This function is designed to be added as `:after` advice to the main `gptel` function. When `gptel` is called interactively to create a *new* buffer (not reusing an existing one), this function:
1. Switches to the newly created buffer.
2. Determines the appropriate file extension based on the buffer's major mode (Org or Markdown).
3. Constructs a filename using a slugified version of the buffer name and saves the buffer to `gptel-extras-dir`.
4. If in Org mode, inserts the buffer name as a level-1 heading at the beginning.
5. Restores the `gptel--save-state` function to `before-save-hook` (it's temporarily removed during the initial save).

** ~gptel-extras-add-context-files~
:PROPERTIES:
:CUSTOM_ID: h:gptel-extras-add-context-files
:END:

#+findex: gptel-extras-add-context-files
This function is added as `:before` advice to `gptel-send`. Before sending the request, it calls ~gptel-extras-add-repo-map-to-context~ and ~gptel-extras-add-conventions-to-context~ if their respective user options are enabled.

** ~gptel-extras-alert-when-finished~
:PROPERTIES:
:CUSTOM_ID: h:gptel-extras-alert-when-finished
:END:

#+findex: gptel-extras-alert-when-finished
This function is added to `gptel-post-response-functions`. After `gptel` inserts a response, it displays an alert message if configured to do so via ~gptel-extras-alert-when-finished~.

** ~gptel-extras-set-mullvad~
:PROPERTIES:
:CUSTOM_ID: h:gptel-extras-set-mullvad
:END:

#+findex: gptel-extras-set-mullvad
This function is added as `:around` advice to `gptel-curl-get-response`. If the selected `gptel-model` is `gemini-pro`, it connects to Mullvad VPN (using `mullvad-connect-to-website`) before executing the original function, and sets a timer to disconnect after ~gptel-extras-gemini-mullvad-disconnect-after~ minutes.

* Utility Functions (Internal/Helpers)
:PROPERTIES:
:CUSTOM_ID: h:utility-functions-gptel
:END:

+ ~gptel-extras-get-repo~: Determines the current project repository path.
+ ~gptel-extras-get-git-head-ref~: Gets the current git HEAD ref for a repo.
+ ~gptel-extras-repo-map-cache-valid-p~: Checks if the cached repo map is valid based on TTL and git changes.
+ ~gptel-extras-get-repo-map~: Retrieves the repo map, either from cache or by generating it using `aider --show-repo-map`.
+ ~gptel-extras-create-repo-map~: Creates the repo map buffer.
+ ~gptel-extras--with-top-level-heading~ (macro): Helper to execute code at the first level-1 heading.
+ ~gptel-extras--generate-next-heading~: Generates the next heading name for continuation buffers.
+ ~gptel-extras--insert-continuation-link~: Inserts the "Continued here" link.
+ ~gptel-extras-ensure-gptel-mode~: Checks if the current buffer is in `gptel-mode`.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:function-index
:END:

- =gptel-extras-import-chatgpt-conversations=: [[h:chatgpt-import][ChatGPT Import]]
- =gptel-extras-search-and-ask-model=: [[h:misc-commands][Miscellaneous Commands]]

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:variable-index
:END:

- =gptel-extras-chatgpt-import-dir=: [[h:misc-options][Miscellaneous Options]]
