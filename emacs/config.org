#+TITLE:Pablo's Emacs config
#+AUTHOR: Pablo Stafforini
#+PROPERTY: header-args :tangle (print tlon-init-file-user-init)
:PROPERTIES:
:TOC:      ignore
:END:
#+filetags: :project:

* exordium
:PROPERTIES:
:ID:       66EACB4A-84D2-42AE-9F85-EF30DA714A17
:END:

#+begin_src markdown :tangle no
In the depths of Emacs' lair I dwell,
Where keystrokes cast their cryptic spell,
For years I've danced with demon's grace,
Yet still its grip, I can't erase.

C-x, C-c, such bitter taste,
A twisted realm I've never graced,
With demon tongue, I've come to speak,
Yet man and code have turned so weak.

Oh Emacs dear, my twisted bane,
Through endless hacks, my love sustained,
For each tangled mess and frozen screen,
In you, a world of dreams unseen.

Configuring, remapping, endless strife,
To bend your will I've spent my life,
For one sweet day, your code to tame,
Oh Emacs dear, you dashing flame!

Yet sometimes with wild heart I ponder,
And on this twisted love affair I wonder,
What if ‘twas Vim had lead me astray,
And in its dark depths my fingers lay?

But Emacs dear, fear not my eyes,
I'll wrestle with thee 'til my demise,
For in this hell we've built a choir,
And in your flames, I'll redisplay desire.
#+end_src

(courtesy of GPT-4)

I am not a programmer, let alone an Elisp hacker. My background is in the humanities. It is only a slight exaggeration to say that, before I started using Emacs in 2020, I didn't know the difference between a function and a variable. You have been forewarned.

* table of contents
:PROPERTIES:
:TOC:      :include all :depth 3 :force ((nothing)) :ignore ((nothing)) :local ((nothing))
:ID:       536D7BF2-AA0D-43D7-8865-601DFB6BB8E6
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:28]--[2021-08-02 Mon 21:29] =>  0:01
:END:
:CONTENTS:
- [[#exordium][exordium]]
- [[#table-of-contents][table of contents]]
- [[#introductory][introductory]]
  - [[#key-bindings][key bindings]]
  - [[#profiling][profiling]]
  - [[#installation][installation]]
  - [[#other-config-files][other config files]]
- [[#early-init][early-init]]
- [[#package-management][package management]]
  - [[#elpaca][elpaca]]
  - [[#use-package][use-package]]
- [[#foundational][foundational]]
  - [[#seq][seq]]
  - [[#general][general]]
  - [[#no-littering][no-littering]]
  - [[#ns-win][ns-win]]
  - [[#iso-transl][iso-transl]]
  - [[#el-patch][el-patch]]
  - [[#transient][transient]]
  - [[#hydra][hydra]]
  - [[#warnings][warnings]]
  - [[#comp][comp]]
  - [[#bytecomp][bytecomp]]
  - [[#startup][startup]]
  - [[#server][server]]
  - [[#async][async]]
  - [[#emacsql][emacsql]]
  - [[#tlon-core][tlon-core]]
  - [[#prot-common][prot-common]]
  - [[#prot-simple][prot-simple]]
  - [[#misc][misc.]]
- [[#secrets][secrets]]
  - [[#plstore][plstore]]
  - [[#epg-config][epg-config]]
  - [[#epa-file][epa-file]]
  - [[#auth-source][auth-source]]
  - [[#oauth2-auto][oauth2-auto]]
  - [[#password-store-otp][password-store-otp]]
  - [[#password-store][password-store]]
  - [[#pass][pass]]
  - [[#pass-extras][pass-extras]]
  - [[#auth-source-pass][auth-source-pass]]
- [[#version-control][version control]]
  - [[#vc][vc]]
  - [[#vc-extras][vc-extras]]
  - [[#log-edit][log-edit]]
  - [[#diff-mode][diff-mode]]
  - [[#ediff][ediff]]
  - [[#ediff-extras][ediff-extras]]
  - [[#smerge][smerge]]
  - [[#gh][gh]]
  - [[#magit][magit]]
  - [[#magit-extra][magit-extra]]
  - [[#ghub][ghub]]
  - [[#forge][forge]]
  - [[#orgit-forge][orgit-forge]]
  - [[#forge-search][forge-search]]
  - [[#gh-notify][gh-notify]]
  - [[#gh-notify-extras][gh-notify-extras]]
  - [[#forge-extras][forge-extras]]
  - [[#git-auto-commit-mode][git-auto-commit-mode]]
- [[#display][display]]
  - [[#mixed-pitch][mixed-pitch]]
  - [[#fringe][fringe]]
  - [[#org-modern][org-modern]]
  - [[#org-modern-indent][org-modern-indent]]
  - [[#org-tidy][org-tidy]]
  - [[#faces][faces]]
  - [[#faces-extras][faces-extras]]
  - [[#face-remap][face-remap]]
  - [[#modus-themes][modus-themes]]
  - [[#modus-themes-extras][modus-themes-extras]]
  - [[#highlight-parentheses][highlight-parentheses]]
  - [[#spacious-padding][spacious-padding]]
  - [[#emoji][emoji]]
  - [[#image][image]]
  - [[#paren][paren]]
  - [[#doom-modeline][doom-modeline]]
  - [[#doom-modeline-extras][doom-modeline-extras]]
  - [[#tab-bar][tab-bar]]
  - [[#tab-bar-extras][tab-bar-extras]]
  - [[#fancy-battery][fancy-battery]]
  - [[#all-the-icons][all-the-icons]]
  - [[#all-the-icons-completion][all-the-icons-completion]]
  - [[#nerd-icons][nerd-icons]]
  - [[#menu-bar][menu-bar]]
  - [[#tool-bar][tool-bar]]
  - [[#scroll-bar][scroll-bar]]
  - [[#delsel][delsel]]
  - [[#hl-line][hl-line]]
  - [[#lin][lin]]
  - [[#hl-sentence][hl-sentence]]
  - [[#jit-lock][jit-lock]]
- [[#performance][performance]]
  - [[#profiler][profiler]]
  - [[#profiler-extras][profiler-extras]]
  - [[#so-long][so-long]]
  - [[#gcmh][gcmh]]
  - [[#misc][misc.]]
- [[#text-movement][text movement]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#defuns][defuns]]
  - [[#buffers][buffers]]
- [[#text-manipulation][text manipulation]]
  - [[#simple][simple]]
  - [[#simple-extras][simple-extras]]
  - [[#paragraphs][paragraphs]]
  - [[#headings][headings]]
- [[#editing][editing]]
  - [[#simple][simple]]
  - [[#repeat][repeat]]
  - [[#view][view]]
  - [[#sort][sort]]
  - [[#vundo][vundo]]
  - [[#outline][outline]]
  - [[#outline-extras][outline-extras]]
  - [[#outli][outli]]
  - [[#unfill][unfill]]
  - [[#abbrev][abbrev]]
  - [[#yasnippet][yasnippet]]
  - [[#yasnippet-snippets][yasnippet-snippets]]
  - [[#expand-region][expand-region]]
  - [[#newcomment][newcomment]]
  - [[#skeleton][skeleton]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#crux][crux]]
  - [[#button][button]]
  - [[#back-button][back-button]]
  - [[#goto-last-change][goto-last-change]]
  - [[#goto-addr][goto-addr]]
- [[#registers--bookmarks][registers & bookmarks]]
  - [[#register][register]]
  - [[#bookmarks][bookmarks]]
- [[#files--buffers][files & buffers]]
  - [[#files][files]]
  - [[#files-extras][files-extras]]
  - [[#f][f]]
  - [[#locate][locate]]
  - [[#autorevert][autorevert]]
  - [[#dired][dired]]
  - [[#dired-aux][dired-aux]]
  - [[#dired-extras][dired-extras]]
  - [[#dired-x][dired-x]]
  - [[#dired-async][dired-async]]
  - [[#image-dired][image-dired]]
  - [[#all-the-icons-dired][all-the-icons-dired]]
  - [[#nerd-icons-dired][nerd-icons-dired]]
  - [[#wdired][wdired]]
  - [[#gnus-dired][gnus-dired]]
  - [[#dired-hacks][dired-hacks]]
  - [[#dired-quick-sort][dired-quick-sort]]
  - [[#peep-dired][peep-dired]]
  - [[#minibuffer][minibuffer]]
  - [[#ibuffer][ibuffer]]
  - [[#executable][executable]]
  - [[#uniquify][uniquify]]
  - [[#reveal-in-osx-finder][reveal-in-osx-finder]]
  - [[#tramp][tramp]]
  - [[#pandoc-mode][pandoc-mode]]
  - [[#curl-to-elisp][curl-to-elisp]]
- [[#windows--frames][windows & frames]]
  - [[#window][window]]
  - [[#window-extras][window-extras]]
  - [[#frame][frame]]
  - [[#frame-extras][frame-extras]]
  - [[#winum][winum]]
  - [[#winner][winner]]
  - [[#avy][avy]]
  - [[#avy-extras][avy-extras]]
  - [[#writeroom-mode][writeroom-mode]]
  - [[#ace-link][ace-link]]
  - [[#ace-link-extras][ace-link-extras]]
- [[#date--time][date & time]]
  - [[#calendar][calendar]]
  - [[#calendar-extras][calendar-extras]]
  - [[#loaddefs][loaddefs]]
  - [[#org-gcal][org-gcal]]
  - [[#org-gcal-extras][org-gcal-extras]]
  - [[#calfw][calfw]]
  - [[#calfw-org][calfw-org]]
  - [[#calfw-blocks][calfw-blocks]]
  - [[#time][time]]
  - [[#tmr][tmr]]
  - [[#display-wttr][display-wttr]]
- [[#history][history]]
  - [[#savehist][savehist]]
  - [[#simple][simple]]
  - [[#chistory][chistory]]
  - [[#saveplace][saveplace]]
  - [[#session][session]]
  - [[#recentf][recentf]]
  - [[#remember][remember]]
- [[#search--replace][search & replace]]
  - [[#isearch][isearch]]
  - [[#isearch-extras][isearch-extras]]
  - [[#replace][replace]]
  - [[#substitute][substitute]]
  - [[#visual-regexp][visual-regexp]]
  - [[#visual-regexp-steroids][visual-regexp-steroids]]
  - [[#imenu][imenu]]
  - [[#pcre2el][pcre2el]]
  - [[#wgrep][wgrep]]
  - [[#elgrep][elgrep]]
- [[#minibuffer-completion][minibuffer completion]]
  - [[#vertico][vertico]]
  - [[#embark][embark]]
  - [[#consult][consult]]
  - [[#consult-extras][consult-extras]]
  - [[#consult-dir][consult-dir]]
  - [[#consult-git-log-grep][consult-git-log-grep]]
  - [[#consult-gh][consult-gh]]
  - [[#consult-yasnippet][consult-yasnippet]]
  - [[#consult-spotify][consult-spotify]]
  - [[#embark-consult][embark-consult]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#orderless-extras][orderless-extras]]
  - [[#ido][ido]]
  - [[#which-key][which-key]]
- [[#completion-at-point][completion at point]]
  - [[#corfu][corfu]]
  - [[#corfu-extras][corfu-extras]]
  - [[#kind-icon][kind-icon]]
  - [[#cape][cape]]
  - [[#org-block-cafp][org-block-cafp]]
  - [[#company][company]]
- [[#help][help]]
  - [[#help][help]]
  - [[#help-at-pt][help-at-pt]]
  - [[#helpful][helpful]]
  - [[#info][info]]
  - [[#man][man]]
  - [[#shortdoc][shortdoc]]
  - [[#elisp-demos][elisp-demos]]
- [[#keyboard-macros][keyboard macros]]
  - [[#kmacro][kmacro]]
  - [[#kmacro-extras][kmacro-extras]]
- [[#shell][shell]]
  - [[#simple][simple]]
  - [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#emacs-eat][emacs-eat]]
  - [[#macos][macos]]
  - [[#em-hist][em-hist]]
  - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
  - [[#dwim-shell-command][dwim-shell-command]]
- [[#spelling--grammar][spelling & grammar]]
  - [[#jinx][jinx]]
  - [[#jinx-extras][jinx-extras]]
  - [[#flycheck][flycheck]]
  - [[#consult-flycheck][consult-flycheck]]
  - [[#flycheck-ledger][flycheck-ledger]]
  - [[#flycheck-languagetool][flycheck-languagetool]]
- [[#prose][prose]]
  - [[#text-mode][text-mode]]
  - [[#with-editor][with-editor]]
  - [[#atomic-chrome][atomic-chrome]]
  - [[#markdown-mode][markdown-mode]]
  - [[#markdown-mode-extras][markdown-mode-extras]]
  - [[#grip-mode][grip-mode]]
  - [[#xwidget][xwidget]]
  - [[#edit-indirect][edit-indirect]]
  - [[#mediawiki-el][mediawiki-el]]
  - [[#gdrive][gdrive]]
  - [[#ledger-mode][ledger-mode]]
  - [[#ledger-mode-extras][ledger-mode-extras]]
  - [[#ledger-prices][ledger-prices]]
- [[#translation][translation]]
  - [[#tlon-babel][tlon-babel]]
  - [[#go-translate][go-translate]]
  - [[#powerthesaurus][powerthesaurus]]
  - [[#goldendict-ng][goldendict-ng]]
  - [[#reverso][reverso]]
- [[#docs][docs]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-tools-extras][pdf-tools-extras]]
  - [[#scroll-other-window][scroll-other-window]]
  - [[#pdf-view-restore][pdf-view-restore]]
  - [[#org-pdftools][org-pdftools]]
  - [[#nov][nov]]
  - [[#djvu][djvu]]
- [[#prog-mode][prog-mode]]
  - [[#elisp-mode][elisp-mode]]
  - [[#lisp-mode][lisp-mode]]
  - [[#s][s]]
  - [[#debug][debug]]
  - [[#edebug][edebug]]
  - [[#backtrace][backtrace]]
  - [[#macrostep][macrostep]]
  - [[#clojure][clojure]]
  - [[#python][python]]
  - [[#emacs-ipython-notebook][emacs-ipython-notebook]]
  - [[#applescript-mode][applescript-mode]]
  - [[#json-mode][json-mode]]
  - [[#csv-mode][csv-mode]]
  - [[#js2-mode][js2-mode]]
  - [[#puni][puni]]
  - [[#hideshow][hideshow]]
  - [[#aggressive-indent][aggressive-indent]]
  - [[#elpy][elpy]]
  - [[#eldoc][eldoc]]
- [[#ai][AI]]
  - [[#copilot][copilot]]
  - [[#gptel][gptel]]
  - [[#gptel-extras][gptel-extras]]
  - [[#org-ai][org-ai]]
  - [[#gpt-commit][gpt-commit]]
  - [[#whisper][whisper]]
- [[#org-mode][org-mode]]
  - [[#org][org]]
  - [[#org-extras][org-extras]]
  - [[#org-agenda][org-agenda]]
  - [[#org-capture][org-capture]]
  - [[#org-clock][org-clock]]
  - [[#org-clock-convenience][org-clock-convenience]]
  - [[#org-clock-split][org-clock-split]]
  - [[#org-cycle][org-cycle]]
  - [[#org-archive][org-archive]]
  - [[#org-archive-hierarchically][org-archive-hierarchically]]
  - [[#org-fold][org-fold]]
  - [[#org-faces][org-faces]]
  - [[#org-id][org-id]]
  - [[#org-list][org-list]]
  - [[#org-refile][org-refile]]
  - [[#org-keys][org-keys]]
  - [[#ol][ol]]
  - [[#ol-bbdb][ol-bbdb]]
  - [[#org-protocol][org-protocol]]
  - [[#ox][ox]]
  - [[#ox-hugo][ox-hugo]]
  - [[#ox-pandoc][ox-pandoc]]
  - [[#ox-gfm][ox-gfm]]
  - [[#ob][ob]]
  - [[#org-src][org-src]]
  - [[#org-table][org-table]]
  - [[#orgtbl-edit][orgtbl-edit]]
  - [[#org-crypt][org-crypt]]
  - [[#org-element][org-element]]
  - [[#org-lint][org-lint]]
  - [[#org-habit][org-habit]]
  - [[#org-contrib][org-contrib]]
  - [[#org-checklist][org-checklist]]
  - [[#org-analyzer][org-analyzer]]
  - [[#org-make-toc][org-make-toc]]
  - [[#org2blog][org2blog]]
  - [[#org2blog-extras][org2blog-extras]]
  - [[#org-journal][org-journal]]
  - [[#org-contacts][org-contacts]]
  - [[#org-autosort][org-autosort]]
  - [[#ox-clip][ox-clip]]
  - [[#org-mime][org-mime]]
  - [[#elgantt][elgantt]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#pomodoro-centile][pomodoro-centile]]
- [[#note-taking][note-taking]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-extras][org-roam-extras]]
  - [[#org-roam-ui][org-roam-ui]]
  - [[#org-roam-browser-extension][org-roam-browser-extension]]
  - [[#org-transclusion][org-transclusion]]
  - [[#vulpea][vulpea]]
  - [[#vulpea-extras][vulpea-extras]]
  - [[#org-noter][org-noter]]
  - [[#org-noter-extras][org-noter-extras]]
- [[#reference--citation][reference & citation]]
  - [[#oc][oc]]
  - [[#oc-csl][oc-csl]]
  - [[#citeproc][citeproc]]
  - [[#bibtex][bibtex]]
  - [[#bibtex-extras][bibtex-extras]]
  - [[#bibtex-completion][bibtex-completion]]
  - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#citar][citar]]
  - [[#citar-extras][citar-extras]]
  - [[#citar-citeproc][citar-citeproc]]
  - [[#citar-embark][citar-embark]]
  - [[#citar-org-roam][citar-org-roam]]
  - [[#org-ref][org-ref]]
  - [[#ebib][ebib]]
  - [[#ebib-extras][ebib-extras]]
  - [[#bib][bib]]
  - [[#biblio][biblio]]
  - [[#persid][persid]]
  - [[#zotra][zotra]]
  - [[#zotra-extras][zotra-extras]]
  - [[#internet-archive][internet-archive]]
- [[#email][email]]
  - [[#simple][simple]]
  - [[#sendmail][sendmail]]
  - [[#smtpmail][smtpmail]]
  - [[#async-mail-sending][async-mail-sending]]
  - [[#message][message]]
  - [[#mml][mml]]
  - [[#mu4e][mu4e]]
  - [[#mu4e-extras][mu4e-extras]]
  - [[#org-msg][org-msg]]
  - [[#org-msg-extras][org-msg-extras]]
- [[#messaging][messaging]]
  - [[#telega][telega]]
  - [[#telega-mnz][telega-mnz]]
  - [[#telega-dired-dwim][telega-dired-dwim]]
  - [[#telega-extras][telega-extras]]
  - [[#ol-telega][ol-telega]]
  - [[#erc][erc]]
  - [[#circe][circe]]
- [[#web][web]]
  - [[#browse-url][browse-url]]
  - [[#browse-url-extras][browse-url-extras]]
  - [[#shr][shr]]
  - [[#shr-tag-pre-highlight][shr-tag-pre-highlight]]
  - [[#shr-heading][shr-heading]]
  - [[#eww][eww]]
  - [[#eww-extras][eww-extras]]
  - [[#prot-eww][prot-eww]]
  - [[#w3m][w3m]]
  - [[#elfeed][elfeed]]
  - [[#elfeed-extras][elfeed-extras]]
  - [[#elfeed-org][elfeed-org]]
  - [[#elfeed-tube][elfeed-tube]]
  - [[#elfeed-tube-mpv][elfeed-tube-mpv]]
  - [[#engine-mode][engine-mode]]
  - [[#org-download][org-download]]
  - [[#org-web-tools][org-web-tools]]
  - [[#org-web-tools-extras][org-web-tools-extras]]
  - [[#request][request]]
  - [[#deferred][deferred]]
  - [[#graphql-mode][graphql-mode]]
  - [[#mullvad][mullvad]]
- [[#multimedia][multimedia]]
  - [[#emms][EMMS]]
  - [[#mpv][mpv]]
  - [[#empv][empv]]
  - [[#ytdl][ytdl]]
  - [[#read-aloud][read-aloud]]
- [[#misc][misc]]
  - [[#calc][calc]]
  - [[#alert][alert]]
  - [[#unpackaged][unpackaged]]
  - [[#midnight][midnight]]
  - [[#bbdb][bbdb]]
  - [[#bbdb-extras][bbdb-extras]]
  - [[#bbdb-vcard][bbdb-vcard]]
  - [[#keycast][keycast]]
  - [[#activity-watch][activity-watch]]
  - [[#custom][custom]]
  - [[#fatebook][fatebook]]
  - [[#tetris][tetris]]
  - [[#tlon-init][tlon-init]]
- [[#personal][personal]]
  - [[#keyboard-maestro][Keyboard Maestro]]
- [[#local-variables][local variables]]
:END:

* introductory
:PROPERTIES:
:CUSTOM_ID: introduction
:ID:       A7940400-DD17-4B0B-A9B2-565A207D680C
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:56]--[2021-10-20 Wed 19:59] =>  0:03
CLOCK: [2021-07-24 Sat 10:45]--[2021-07-24 Sat 10:56] =>  0:11
CLOCK: [2021-07-23 Fri 15:26]--[2021-07-23 Fri 15:58] =>  0:32
CLOCK: [2021-07-13 Tue 18:29]--[2021-07-13 Tue 18:47] =>  0:18
CLOCK: [2021-07-11 Sun 21:41]--[2021-07-11 Sun 22:14] =>  0:33
CLOCK: [2021-12-03 Fri 21:49]--[2021-12-03 Fri 21:56] =>  0:07
CLOCK: [2021-06-15 Tue 20:45]--[2021-06-15 Tue 20:52] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-01 Tue 21:00]--[2021-06-01 Tue 21:59] =>  0:59
CLOCK: [2021-05-18 Tue 09:22]--[2021-05-18 Tue 09:32] =>  0:10
CLOCK: [2021-05-14 Fri 15:45]--[2021-05-14 Fri 16:01] =>  0:00
CLOCK: [2021-04-27 Tue 22:10]--[2021-04-27 Tue 22:26] =>  0:16
CLOCK: [2021-03-31 Wed 10:10]--[2021-03-31 Wed 11:08] =>  0:58
CLOCK: [2021-03-30 Tue 15:21]--[2021-03-30 Tue 18:00] =>  2:39
CLOCK: [2021-03-30 Tue 09:43]--[2021-03-30 Tue 11:46] =>  2:03
CLOCK: [2021-03-22 Mon 21:40]--[2021-03-22 Mon 21:49] =>  0:09
CLOCK: [2021-03-20 Sat 13:16]--[2021-03-20 Sat 13:30] =>  0:14
CLOCK: [2021-03-04 Thu 10:10]--[2021-03-04 Thu 10:37] =>  0:27
CLOCK: [2021-03-02 Tue 21:12]--[2021-03-02 Tue 21:50] =>  0:38
CLOCK: [2021-03-01 Mon 10:11]--[2021-03-01 Mon 10:28] =>  0:17
CLOCK: [2021-02-23 Tue 10:45]--[2021-02-23 Tue 10:54] =>  0:09
CLOCK: [2021-02-04 Thu 19:36]--[2021-02-04 Thu 20:54] =>  1:18
CLOCK: [2021-02-04 Thu 18:40]--[2021-02-04 Thu 19:33] =>  0:53
CLOCK: [2021-02-04 Thu 16:40]--[2021-02-04 Thu 18:35] =>  1:55
CLOCK: [2021-02-04 Thu 12:27]--[2021-02-04 Thu 12:44] =>  0:17
CLOCK: [2021-02-04 Thu 12:19]--[2021-02-04 Thu 12:27] =>  0:08
CLOCK: [2021-02-04 Thu 09:30]--[2021-02-04 Thu 10:49] =>  1:19
CLOCK: [2021-02-03 Wed 22:09]--[2021-02-03 Wed 22:46] =>  0:37
CLOCK: [2021-02-03 Wed 20:24]--[2021-02-03 Wed 20:33] =>  0:09
CLOCK: [2021-02-03 Wed 18:27]--[2021-02-03 Wed 20:00] =>  1:33
CLOCK: [2021-02-03 Wed 19:43]--[2021-02-03 Wed 19:43] =>  0:00
CLOCK: [2021-04-08 Thu 13:56]--[2021-04-08 Thu 14:12] =>  0:16
CLOCK: [2021-04-03 Sat 19:06]--[2021-04-03 Sat 19:31] =>  0:25
CLOCK: [2022-05-29 Sun 09:25]--[2022-05-29 Sun 10:31] =>  1:13
CLOCK: [2021-07-24 Sat 09:51]--[2021-07-24 Sat 09:58] =>  0:07
CLOCK: [2021-07-14 Wed 22:51]--[2021-07-14 Wed 23:09] =>  0:18
CLOCK: [2021-03-07 Sun 18:52]--[2021-03-07 Sun 18:57] =>  0:05
CLOCK: [2021-03-04 Thu 09:05]--[2021-03-04 Thu 09:22] =>  0:17
CLOCK: [2021-02-03 Wed 16:32]--[2021-02-03 Wed 18:27] =>  1:55
CLOCK: [2021-02-03 Wed 16:01]--[2021-02-03 Wed 16:32] =>  0:31
CLOCK: [2021-02-03 Wed 15:40]--[2021-02-03 Wed 16:01] =>  0:21
CLOCK: [2021-02-03 Wed 13:56]--[2021-02-03 Wed 15:02] =>  1:06
CLOCK: [2021-01-31 Sun 15:22]--[2021-01-31 Sun 16:01] =>  0:39
CLOCK: [2021-01-31 Sun 10:07]--[2021-01-31 Sun 10:28] =>  0:21
CLOCK: [2021-01-24 Sun 11:41]--[2021-01-24 Sun 11:48] =>  0:07
CLOCK: [2021-01-23 Sat 08:40]--[2021-01-23 Sat 08:46] =>  0:06
CLOCK: [2021-01-22 Fri 09:29]--[2021-01-22 Fri 09:32] =>  0:03
CLOCK: [2021-01-12 Tue 19:22]--[2021-01-12 Tue 19:27] =>  0:05
CLOCK: [2021-01-12 Tue 11:41]--[2021-01-12 Tue 12:42] =>  1:01
CLOCK: [2021-01-08 Fri 13:34]--[2021-01-08 Fri 13:34] =>  0:00
CLOCK: [2021-01-06 Wed 22:04]--[2021-01-06 Wed 22:14] =>  0:10
CLOCK: [2021-01-06 Wed 13:46]--[2021-01-06 Wed 13:58] =>  0:12
CLOCK: [2021-01-06 Wed 12:30]--[2021-01-06 Wed 12:53] =>  0:23
CLOCK: [2021-01-06 Wed 11:02]--[2021-01-06 Wed 11:34] =>  0:32
CLOCK: [2021-01-03 Sun 22:11]--[2021-01-03 Sun 22:18] =>  0:07
CLOCK: [2021-01-03 Sun 22:03]--[2021-01-03 Sun 22:07] =>  0:04
CLOCK: [2021-01-02 Sat 14:00]--[2021-01-02 Sat 14:06] =>  0:06
CLOCK: [2020-12-31 Thu 13:56]--[2020-12-31 Thu 14:25] =>  0:29
CLOCK: [2020-12-31 Thu 13:46]--[2020-12-31 Thu 13:52] =>  0:06
CLOCK: [2020-12-29 Tue 15:07]--[2020-12-29 Tue 15:18] =>  0:11
CLOCK: [2020-12-22 Tue 09:57]--[2020-12-22 Tue 10:25] =>  0:28
CLOCK: [2020-12-19 Sat 12:18]--[2020-12-19 Sat 12:22] =>  0:04
CLOCK: [2020-12-14 Mon 18:39]--[2020-12-14 Mon 18:44] =>  0:05
CLOCK: [2020-12-07 Mon 18:15]--[2020-12-07 Mon 18:27] =>  0:12
CLOCK: [2020-10-20 Tue 17:48]--[2020-10-20 Tue 18:10] =>  0:22
CLOCK: [2020-10-20 Tue 17:27]--[2020-10-20 Tue 17:38] =>  0:11
CLOCK: [2020-10-20 Tue 11:30]--[2020-10-20 Tue 11:36] =>  0:06
CLOCK: [2020-10-19 Mon 20:24]--[2020-10-19 Mon 20:39] =>  0:15
CLOCK: [2020-10-15 Thu 20:37]--[2020-10-15 Thu 20:52] =>  0:15
CLOCK: [2020-10-15 Thu 18:56]--[2020-10-15 Thu 19:06] =>  0:10
CLOCK: [2020-10-15 Thu 18:11]--[2020-10-15 Thu 18:26] =>  0:15
CLOCK: [2020-10-14 Wed 07:31]--[2020-10-14 Wed 07:52] =>  0:21
CLOCK: [2020-10-12 Mon 18:15]--[2020-10-12 Mon 19:58] =>  1:43
CLOCK: [2020-10-12 Mon 15:28]--[2020-10-12 Mon 15:29] =>  0:01
CLOCK: [2020-10-11 Sun 21:10]--[2020-10-11 Sun 21:15] =>  0:05
CLOCK: [2020-10-11 Sun 10:05]--[2020-10-11 Sun 10:19] =>  0:14
CLOCK: [2020-10-10 Sat 18:21]--[2020-10-10 Sat 18:25] =>  0:04
CLOCK: [2020-10-05 Mon 18:56]--[2020-10-05 Mon 18:58] =>  0:02
CLOCK: [2020-10-04 Sun 11:27]--[2020-10-04 Sun 11:34] =>  0:07
CLOCK: [2020-10-04 Sun 10:54]--[2020-10-04 Sun 11:22] =>  0:28
CLOCK: [2020-08-19 Wed 13:52]--[2020-08-19 Wed 14:47] =>  0:55
:END:

** key bindings
:PROPERTIES:
:ID:       a47d148a-1b5e-4850-a1a7-6cd745bad696
:END:
Emacs has five native [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifier-Keys.html][modifier keys]]: ~Control~ (~C~), ~Meta~ (~M~), ~Super~ (~s~), ~Hyper~ (~H~), and ~Alt~ (~A~). (The letter abbreviation for the ~Super~ modifier is ~s~ because ~S~ is assigned to the ~Shift~ key.) I use [[https://karabiner-elements.pqrs.org/][Karabiner-Elements]], in combination with a [[https://www.zsa.io/moonlander/][Moonlander keyboard]], to generate several additional "pseudo modifiers", or mappings between individual keys and combinations of two or more Emacs modifiers:

[[file:etc/moonlander-emacs.png]]

So when you see a monstrous key binding such as ~C-H-M-s-d~, remember that everything that precedes the final key (in this case, ~d~) represents a single key press (in this case, ~l~). For details, see my [[../karabiner/modifications.org][Karabiner config file]], specifically the "Key associations" section.

** debugging                                                       :noexport:
:PROPERTIES:
:ID:       ED2955EA-3BD8-4058-A973-3CC87847D9A5
:END:
:LOGBOOK:
CLOCK: [2021-04-12 Mon 13:20]--[2021-04-12 Mon 13:46] =>  0:26
:END:
- Run ~bug-hunter-init-file~ (from the [[id:0C19171B-8DFA-4E06-9E17-45C1F9158C28][elisp-bug-hunter]] package) and select "automatic error detection" (~e~).
- Run ~emacs -q~ or ~emacs --debug-init~.
- Cut suspected sections of the org file (~org-cut-subtree~), tangle immediately afterwards, then undo the changes. This will generate an init file without the code blocks included in the removed sections, while leaving the literal org file intact.
- Use ~magit-log-buffer-file~ or ~git-timemachine~ to explore previous versions of your config file.
- Set ~debug-on-error~ to ~t~ to see a backtrace of an error. Or call ~toggle-debug-on-error~ interactively.
  - To determine what function is changing the value of a variable, use ~debug-on-variable-change~.
  - To determine what function is generating a particular message, use ~debug-on-message~.
- Bisect the init file until you locate the culprit.
  - Run ~bug-hunter-init-file~ and select "bisect interactively" (~i~).
- If Emacs becomes unresponsive, run ~pkill -USR2 Emacs~ in a terminal. Emacs will likely trigger a backtrace, which you can inspect to diagnose the issue.
- You may want to periodically save a stable init file so that you can temporarily use Emacs with all your customizations while debugging your current init file (instead of having to use an external editor or a non-customized Emacs). Say you call this stable file ~stable.el~. Then you can tell Emacs to load this file on startup file with ~emacs -q -l ~/stable.el~.
- Use ~edebug-defun~. See [[https://org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/45?u=pablo][this discussion]].
- For org-related issues (e.g. tangling the config file), use ~org-lint~, which checks the current buffer for syntax mistakes.
- For more ideas, see:
  - [[https://www.emacswiki.org/emacs/DebugEmacs][EmacsWiki: Debug Emacs]]
  - [[https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/][Emacs Debugging Basics - whatacold's space]]
  - [[https://discourse.doomemacs.org/t/how-to-debug-issues/55][How to debug issues - Guides & Tutorials - Doom Emacs Discourse]].
  - [[id:94184DD8-591C-46CD-BFC3-9738113DA640][Debugging Emacs Lisp]]

** profiling
:PROPERTIES:
:ID:       60B7A58C-A79A-4EEF-A91D-EECC85CFA173
:END:
- If you use ~use-package~, the command ~use-package-report~ displays a table showing the impact of each package on load times.
- You may also want to try [[https://www.emacswiki.org/emacs/ProfileDotEmacs][profile-dotemacs]].

** installation
:PROPERTIES:
:ID:       6712DA4C-BA45-4E74-8AEF-C903462D9BCB
:END:
:LOGBOOK:
CLOCK: [2021-04-20 Tue 22:00]--[2021-04-20 Tue 23:28] =>  1:28
CLOCK: [2021-04-20 Tue 20:55]--[2021-04-20 Tue 21:26] =>  0:31
CLOCK: [2021-04-03 Sat 14:40]--[2021-04-03 Sat 15:07] =>  0:27
CLOCK: [2021-04-02 Fri 22:15]--[2021-04-02 Fri 22:35] =>  0:20
CLOCK: [2021-03-31 Wed 22:00]--[2021-03-31 Wed 23:00] =>  1:00
CLOCK: [2021-03-31 Wed 21:40]--[2021-03-31 Wed 21:47] =>  0:07
CLOCK: [2021-03-27 Sat 10:08]--[2021-03-27 Sat 13:05] =>  2:57
CLOCK: [2021-03-27 Sat 07:49]--[2021-03-27 Sat 09:10] =>  1:21
CLOCK: [2021-03-27 Sat 16:48]--[2021-03-27 Sat 16:50] =>  0:02
CLOCK: [2021-03-22 Mon 15:46]--[2021-03-22 Mon 15:53] =>  0:07
CLOCK: [2021-03-22 Mon 15:00]--[2021-03-22 Mon 15:20] =>  0:20
CLOCK: [2021-02-27 Sat 17:20]--[2021-02-27 Sat 18:00] =>  0:40
CLOCK: [2021-02-25 Thu 08:30]--[2021-02-25 Thu 11:54] =>  3:24
CLOCK: [2021-02-07 Sun 15:01]--[2021-02-07 Sun 15:18] =>  0:17
CLOCK: [2021-02-07 Sun 14:52]--[2021-02-07 Sun 14:54] =>  0:26
CLOCK: [2021-02-07 Sun 14:30]--[2021-02-07 Sun 14:49] =>  0:19
CLOCK: [2021-02-04 Thu 08:10]--[2021-02-04 Thu 09:25] =>  1:15
CLOCK: [2020-09-22 Tue 12:15]--[2020-09-22 Tue 13:01] =>  0:46
CLOCK: [2020-09-22 Tue 10:50]--[2020-09-22 Tue 12:15] =>  1:25
CLOCK: [2022-04-27 Wed 16:21]--[2022-04-27 Wed 16:44] =>  0:23
CLOCK: [2021-08-15 Sun 17:03]--[2021-08-15 Sun 17:06] =>  0:03
:END:

For personal reference, these are the most recent Emacs installations (in reverse chronological order).

[2023-02-23 Thu]

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-23 Thu 02:10]

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-dbus --with-no-titlebar --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

- Very slow.
- Theme broke for some reason.
- Some functions (e.g. ~keymap-unset~) not available).
- Telega doesn't show profile pics

[2023-02-14 Tue 20:07]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-07 Tue 21:52]:

#+begin_src shell :tangle no
brew install emacs-mac --with-dbus --with-starter --with-natural-title-bar --with-native-comp --with-mac-metal --with-xwidgets --with-imagemagick  --with-librsvg  --with-spacemacs-icon
#+end_src

** other config files
:PROPERTIES:
:ID:       20E3D45E-D8AB-44BD-A5E2-C6DF9C20744E
:END:

:LOGBOOK:
CLOCK: [2022-06-29 Wed 18:08]--[2022-06-29 Wed 18:18] =>  0:10
CLOCK: [2022-06-17 Fri 21:20]--[2022-06-17 Fri 21:47] =>  0:27
CLOCK: [2021-08-02 Mon 21:29]--[2021-08-02 Mon 21:30] =>  0:01
CLOCK: [2021-06-30 Wed 20:43]--[2021-06-30 Wed 21:15] =>  0:32
CLOCK: [2021-06-30 Wed 19:32]--[2021-06-30 Wed 20:02] =>  0:30
CLOCK: [2021-06-05 Sat 19:34]--[2021-06-05 Sat 19:41] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-03 Thu 13:47]--[2021-06-03 Thu 13:52] =>  0:05
CLOCK: [2021-06-03 Thu 07:21]--[2021-06-03 Thu 07:50] =>  0:29
CLOCK: [2021-06-02 Wed 22:00]--[2021-06-02 Wed 22:11] =>  0:11
CLOCK: [2021-06-02 Wed 21:44]--[2021-06-02 Wed 21:50] =>  0:06
CLOCK: [2021-05-26 Wed 19:32]--[2021-05-26 Wed 19:44] =>  0:12
CLOCK: [2021-05-23 Sun 19:52]--[2021-05-23 Sun 20:02] =>  0:10
CLOCK: [2021-05-22 Sat 16:36]--[2021-05-22 Sat 16:44] =>  0:08
CLOCK: [2021-04-03 Sat 18:21]--[2021-04-03 Sat 18:36] =>  0:15
CLOCK: [2021-03-27 Sat 17:00]--[2021-03-27 Sat 17:32] =>  0:32
CLOCK: [2021-03-26 Fri 13:31]--[2021-03-26 Fri 14:14] =>  0:43
CLOCK: [2021-03-26 Fri 12:47]--[2021-03-26 Fri 13:18] =>  0:00
CLOCK: [2021-03-26 Fri 10:47]--[2021-03-26 Fri 10:57] =>  0:10
CLOCK: [2021-03-23 Tue 14:30]--[2021-03-23 Tue 16:45] =>  2:15
CLOCK: [2021-03-23 Tue 14:10]--[2021-03-23 Tue 14:30] =>  0:20
CLOCK: [2021-03-21 Sun 16:23]--[2021-03-21 Sun 16:32] =>  0:09
CLOCK: [2021-02-28 Sun 10:12]--[2021-02-28 Sun 10:27] =>  0:15
CLOCK: [2021-02-04 Thu 12:49]--[2021-02-04 Thu 14:36] =>  1:47
:END:
The below is a link dump for config files and other related links I have found useful in the past or may want to check out for ideas at some point in the future.
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A list of useful Emacs packages.
- [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][How to build your own spacemacs · Samuel Barreto]]
- [[https://www.reddit.com/r/emacs/comments/3lt3c6/using_spacemacs_modeline_in_vanilla_emacs/][Using SpaceMacs mode-line in vanilla Emacs : emacs]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does Emacs Doom start so quickly?]] Might be useful for ideas on how to speed up config file.
- [[https://prelude.emacsredux.com/en/latest/][Emacs Prelude]]. I've seen this recommended. Might want to check it out.
- [[https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/][Polishing my Emacs -- who said an old tool can't look modern]]
  [[https://github.com/mbriggs/.emacs.d-oldv2/blob/master/init/init-keymaps.el][.emacs.d-oldv2/init-keymaps.el at master · mbriggs/.emacs.d-oldv2]]. Lots of key bindings.

Literate configuration
- [[https://commonplace.doubleloop.net/setting-up-a-spacemacs-literate-config-file][Setting up a spacemacs literate config file]]
- [[https://www.reddit.com/r/spacemacs/comments/atuzd9/does_anyone_have_their_dotfile_redone_in_literate/][Does anyone have their dotfile redone in literate programming with babel? : spacemacs]]
- Diego Zamboni, /[[https://leanpub.com/lit-config][Literate configuration]]/
- [[https://emacs.sJtackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][elisp - Can I use org-mode to structure my .emacs or other .el configuration file? - Emacs Stack Exchange]]

Some useful config files:
- [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Diego Zamboni]]
- [[https://jamiecollinson.com/blog/my-emacs-config/][Jamie Collinson]]
- [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][Jethro Kuan]]. Creator or ~org-roam~ and author of some great posts on note-taking. Not literal.
- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joost Diepenmat]]
- [[https://github.com/gjstein/emacs.d][Gregory Stein]]. Author of the excellent [[http://cachestocaches.com/][Caches to Caches]] blog.
- [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][Luca Cambiaghi]]
- [[https://config.phundrak.com/emacs][Lucien Cartier-Tilet]] (Spacemacs)
- [[https://github.com/isamert/dotfiles/blob/master/emacs/index.org][Isa Mert Gurbuz]]
  - Has a cool [[https://isamert.net/index.html][blog]] about org mode and other topics.
- [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Martin Foot]]
  - Has a very simple init file.
  - [[https://github.com/mfoo/dotfiles/blob/master/.emacs.d/config.org][.org file]]
- [[https://github.com/mpereira/.emacs.d][Murilo Pereira]].
  - Very well organized. The author has also written some excellent blog posts about Emacs.
- [[https://out-of-cheese-error.netlify.app/spacemacs-config][OutOfCheeseError]]
- [[https://protesilaos.com/dotemacs/][Protesilaos Stavrou]]
  - [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][here]] is the last commit before he abandoned ~use-package~ and ~straight~
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]. A legend in the Emacs community.
- [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit]].
  - Author of ~Memacs~, prolific blogger.
- [[https://github.com/sriramkswamy/dotemacs][Sriram Krishnaswamy]] ([[https://sriramkswamy.github.io/][website]])
  - [[https://sriramkswamy.github.io/dotemacs/][.org file]]
- [[https://github.com/sfromm/emacs.d#twitter][Stephen Fromm]]. Has an extended list of config files [[https://github.com/sfromm/emacs.d#inspiration][here]].
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]]
- [[https://www.tquelch.com/posts/emacs-config/#languages][Tim Quelch]]
- [[http://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html#orgbcdc8b2][Vianney Lebouteiller]]
- [[https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org#meta][Xuan Bi]].
- [[https://github.com/turbana/emacs-config][GitHub - turbana/emacs-config: My personal emac's configuration]]. Some potentially useful stuff on native comp, debugging, etc.
- [[https://github.com/creichert/dotfiles/blob/master/emacs/.emacs][dotfiles/.emacs at master · creichert/dotfiles · GitHub]]. Has detailed Gnus, Slack config.
- [[https://github.com/ianpan870102/yay-evil-emacs][yay-evil-emacs]]. slick design.
- [[https://github.com/rememberYou/.emacs.d][GitHub - rememberYou/.emacs.d: 🎉 Personal GNU Emacs configuration]]. Has a bunch of Reddit posts explaining how he uses the different packages.
- [[https://github.com/nkicg6/emacs-config/blob/master/config.org][emacs-config/config.org at master · nkicg6/emacs-config · GitHub]]. Found it while searching for org-ref.
- [[https://github.com/yiufung/dot-emacs/blob/master/init.el][dot-emacs/init.el at master · yiufung/dot-emacs · GitHub]]. Not literal. Lots of packages. Gnus, notmuch, Slack, etc. Author has great post on Anki.
- [[https://github.com/tshu-w/.emacs.d][GitHub - tshu-w/.emacs.d: My personal Emacs config, based on Spacemacs]]. Has nice note-taking config, with org-roam, org-ref, Zotero, etc (see [[https://github.com/tshu-w/.emacs.d/blob/master/lisp/lang-org.el][here]]).
- [[https://github.com/raxod502/radian/blob/e3aad124c8e0cc870ed09da8b3a4905d01e49769/emacs/radian.el][Radon Rosborough]]. Author of ~straight~ package manager.
- [[https://github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org][Gonçalo Santos]]. Author of ~org-noter~.
- [[https://github.com/tonyaldon/emacs.d/blob/master/init.el][Tony Aldon]]. Has some slick [[https://www.youtube.com/channel/UCQCrbWOFRmFYqoeou0Qv3Kg][videos]] on ~org-table~. Optimized key bindings.
- [[https://github.com/progfolio/.emacs.d/blob/master/init.org][Nicholas Vollmer]]. Maitantainer of ~elpaca~. I copied his ~org-habits~ config. Haven't yet looked at the rest but looks like there's plenty of valuable material.
- [[https://github.com/yantar92/emacs-config/blob/master/config.org][emacs-config/config.org at master · yantar92/emacs-config · GitHub]]. Focus on knowledge management with org. Lots of good stuff.
- [[https://github.com/xenodium/dotsies/blob/main/dots.org][Álvaro Ramírez]]. Also users Karabiner.
- [[https://github.com/karthink/.emacs.d][Karthik Chikmagalur]]. Has excellent blog posts on ~avy~, ~eshell~, ~re-builder~, etc.
- [[https://github.com/iqbalansari/dotEmacs][Iqbal Ansari]].
- [[https://www.danielclemente.com/emacs/confi.html][Daniel Clemente]].
- [[https://github.com/patrl][Patrick Elliott]]

* early-init
:PROPERTIES:
:ID:       F59230DF-14ED-44FF-B54B-4A6758C12D99
:END:

The contents of this code block are tangled to the ~early-init.el~ file.

#+begin_src emacs-lisp :tangle (print tlon-init-file-early-init)
;; recommended for straight/elpaca (github.com/radian-software/straight.el#getting-started)
(setq package-enable-at-startup nil)

(add-to-list 'default-frame-alist '(undecorated . t)) ; remove title bar
(add-to-list 'initial-frame-alist '(fullscreen . maximized)) ; maximize frame on startup

;; github.com/emacscollective/no-littering#native-compilation-cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (file-name-concat (getenv "HOME")
    ".config/emacs-profiles/var/eln-cache/")))
#+end_src

* package management
:PROPERTIES:
:ID:       0A714FC1-D562-4E41-A000-D5F369EBEBBD
:END:

** elpaca
:PROPERTIES:
:ID:       9CF1D7BB-62B0-4F7C-BB5A-A695BFD4D58D
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 19:04]--[2023-04-08 Sat 21:29] =>  2:25
CLOCK: [2023-04-05 Wed 22:53]--[2023-04-06 Thu 00:04] =>  1:11
:END:

/[[https://github.com/progfolio/elpaca][elpaca]] is a package manager that supports asynchronous installation of packages./

When experiencing issues, [[https://github.com/progfolio/elpaca/wiki/Troubleshooting][follow these steps]].

#+begin_src emacs-lisp
;;; init.el --- Init File -*- lexical-binding: t -*-
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; (toggle-debug-on-error) ; uncomment when debugging
#+end_src

** use-package
:PROPERTIES:
:ID:       C53EA5F9-B256-480E-9BCB-7AD2D0D5DDC2
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 14:44]--[2022-05-06 Fri 15:06] =>  0:22
CLOCK: [2021-08-02 Mon 21:30]--[2021-08-02 Mon 21:32] =>  0:02
CLOCK: [2021-06-13 Sun 18:51]--[2021-06-13 Sun 18:53] =>  0:02
CLOCK: [2021-05-14 Fri 22:50]--[2021-05-15 Sat 00:20] =>  1:30
CLOCK: [2021-05-15 Sat 11:32]--[2021-05-15 Sat 11:50] =>  0:18
CLOCK: [2021-04-03 Sat 19:35]--[2021-04-03 Sat 20:18] =>  0:43
:END:

/[[https://github.com/jwiegley/use-package][use-package]] is a package organizer./

- If statistics is enabled (see below), use package can produce very useful reports. Invoke ~use-package-report~, then press ~S~ with point on the 'Time' column to sort the packages by time; pressing the key again reverses the sort order.
- [[https://jwiegley.github.io/use-package/keywords/][Keywords — use-package]]
- Useful Reddit thread: [[https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/][use-package Best Practices : emacs]]
- Note that you can expand the ~use-package~ macro and see what it will do by invoking ~pp-macroexpand-last-sexp~ with point at the end of the relevant sexp.
- To use ~use-package~ with /features/ rather than /packages/, you can check whether something is a feature with ~featurep~.
- Sometimes we want to defer the loading of a package, but not indefinitely. I find it useful to rely on a variety of conditional deferrals, depending on the needs of the particular case:
  - /time deferral/: we use ~:defer~ followed by a number, such that when Emacs has been idle for this number of seconds, the package will load.
  - /command deferral/: we use ~:general~ to bind a key sequence to a command belonging to the package we want to load. The package will load when the key sequence  is executed.
  - /hook deferral/: we use ~:hook~ to create a hook that calls a package function when some event occurs. Upon the occurrence of this event, typically the loading of a major mode, the package will load.
  - /package deferral/: we use ~:after~ to load the package after some other package which itself has been conditionally deferred (using one of the other methods above). Note that if  ~use-package-always-defer~ is set to ~t~, you need to add ~demand t~ to the declaration.

#+begin_src emacs-lisp :results silent
;; github.com/raxod502/radian/blob/develop/emacs/radian.el
(defmacro use-feature (name &rest args)
  "Like `use-package' but accounting for asynchronous installation.
NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :elpaca nil
     ,@args))

(if (tlon-init-machine-pablo-p)
    (defmacro use-personal-package (name &rest args)
      "Like `use-package' but accounting for personal packages.
   NAME and ARGS are in `use-package'."
      (declare (indent defun))
      `(use-package ,name
         :elpaca nil
         :load-path paths-dir-extras
         ,@args))
  (defmacro use-personal-package (name &rest args)
    "Like `use-package' but accounting for personal packages.
   NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :elpaca (,name
                :host github
                :repo "benthamite/dotfiles"
                :files ,(list (file-name-concat
                               "emacs/extras"
                               (file-name-with-extension (symbol-name (eval `(quote ,name))) "el"))))
       ,@args)))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)

(setq use-package-verbose t)
(setq use-package-compute-statistics t)
(setq use-package-always-ensure nil)
(setq use-package-always-defer t)
(setq use-package-hook-name-suffix nil)       ; use real name for hooks, i.e. do not omit the `-hook' bit
(setq use-package-minimum-reported-time 0.1) ; report if loading a package takes longer than 100 ms

;; we load `org-mode' early to prevent version conflicts
;; (use-package org
;; :demand t
;; :ensure org-plus-contrib
;; )
#+end_src

*** use-package-ensure-system-package
:PROPERTIES:
:ID:       5C17424A-4950-4745-B7FD-F0CACEB48AFB
:END:

#+begin_src emacs-lisp :results silent
(use-package use-package-ensure-system-package
  :demand t)
#+end_src

* foundational
:PROPERTIES:
:ID:       B2CADEA2-F8B7-4E8E-8FB0-D6B59658933D
:END:
** seq
:PROPERTIES:
:ID:       FD3A9A18-BDB8-4D52-9F5C-8E040FA042A2
:END:

#+begin_src emacs-lisp
;; https://github.com/progfolio/elpaca/issues/216#issuecomment-1868747372
(defun elpaca-unload-seq (e)
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun elpaca-seq-build-steps ()
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps elpaca-build-steps))
          (list 'elpaca-unload-seq 'elpaca--activate-package)))

(use-package seq :elpaca `(seq :build ,(elpaca-seq-build-steps)))
#+end_src

** general
:PROPERTIES:
:ID:       70C622E0-FAC7-4AB1-841F-36437858218C
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 18:46]--[2021-07-25 Sun 18:56] =>  0:10
:END:

/[[https://github.com/noctuid/general.el][general]] supports more convenient key definitions./

#+begin_src emacs-lisp :results silent
(use-package general
  :demand t
  :config
  (setq general-describe-priority-keymaps '(local global org-mode-map))
  (setq general-describe-keybinding-sort-function #'general-sort-by-car)
  (general-override-mode)
  (general-auto-unbind-keys)

  :bind
  ("C-A-b" . 'general-describe-keybindings))
(elpaca-wait)
#+end_src

** no-littering
:PROPERTIES:
:ID:       21B40C49-BBD2-4E04-871B-BB578C92F71B
:END:

/[[https://github.com/emacscollective/no-littering][no-littering]] keeps ~.emacs.d~ clean./

#+begin_src emacs-lisp :results silent
(use-package no-littering
  :demand t
  :init
  ;; these directories should be shared across profiles, so there should
  ;; be only one `var' and one `etc' directory in `emacs-profiles'
  ;; rather than a pair of such directories for each profile
  (setq no-littering-etc-directory (file-name-concat paths-dir-chemacs-profiles "etc/"))
  (setq no-littering-var-directory (file-name-concat paths-dir-chemacs-profiles "var/"))

  :config
  ;; github.com/emacscollective/no-littering#auto-save-settings
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** ns-win
:PROPERTIES:
:ID:       3411777E-E554-4EF3-9389-63242D4F3072
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ns-win)
(use-feature ns-win
  :demand t
  :config
  (setq mac-option-modifier 'meta)
  (setq mac-control-modifier 'control)
  (setq mac-command-modifier 'hyper)
  (setq mac-function-modifier 'none)
  (setq mac-right-option-modifier 'none)
  (setq mac-right-control-modifier 'super)
  (setq mac-right-command-modifier 'alt))
#+end_src

** iso-transl
:PROPERTIES:
:ID:       0A62A6C8-D3D8-4960-A809-35B60A479D2B
:END:

#+begin_src emacs-lisp
(use-feature iso-transl
  :demand t
  :config
  (setq iso-transl-char-map nil) ; emacs.stackexchange.com/questions/17508/

  ;; unset all `Super' key bindings
  (dolist (char (number-sequence ?a ?z))
  (keymap-global-unset (concat "s-" (char-to-string char))))

  ;; unset some `Alt' key bindings in `key-translation-map'
  (dolist (char '("SPC" "!" "$" "+" "-" "<" ">" "?" "a" "c" "m" "o" "u" "x" "C" "L" "P" "R" "S" "T" "Y" "[" "]" "{" "|" "}"))
    (keymap-unset key-translation-map (concat "A-" char))))
#+end_src

** el-patch
:PROPERTIES:
:ID:       554FC4A9-4993-495F-A154-DBC01A11747D
:END:
:LOGBOOK:
CLOCK: [2021-10-05 Tue 12:20]--[2021-10-05 Tue 13:11] =>  0:51
CLOCK: [2021-10-04 Mon 18:59]--[2021-10-04 Mon 19:31] =>  0:32
:END:

/[[https://github.com/raxod502/el-patch][el-patch]] customizes the behavior of Emacs Lisp functions and be notified when a function so customized changes./

#+begin_src emacs-lisp :results silent
(use-package el-patch
  :demand t
  :config
  (setq el-patch-enable-use-package-integration t))
#+end_src

** transient
:PROPERTIES:
:ID:       E21AC33E-D108-4860-997C-A4982569005E
:END:

#+begin_src emacs-lisp
(use-package transient
  :elpaca (transient
           :host github
           :repo "magit/transient"
           :ref "37307c1"
           :depth nil)
           :after seq
  :demand t)
#+end_src

** hydra
:PROPERTIES:
:ID:       00E7E217-E02E-489B-968D-E49431FD5ECC
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 11:19]--[2022-07-15 Fri 12:01] =>  0:42
CLOCK: [2021-07-23 Fri 12:19]--[2021-07-23 Fri 12:36] =>  0:17
CLOCK: [2021-06-25 Fri 21:36]--[2021-06-25 Fri 21:37] =>  0:01
CLOCK: [2021-03-30 Tue 08:50]--[2021-03-30 Tue 09:02] =>  0:12
:END:

/[[https://github.com/abo-abo/hydra][hydra]] makes Emacs bindings that stick around./

#+begin_src emacs-lisp :results silent
(use-package hydra
  :demand t

  :general
  ("H-d" 'hydra-dirs/body
   "H-f" 'hydra-files/body
   "H-l" 'hydra-org-notes/body
   "H-O" 'hydra-major-modes/body))
(elpaca-wait)
#+end_src

*** resources
:PROPERTIES:
:ID:       A6CE7CD9-B940-4221-9BE4-2BF0776D7637
:END:

https://oremacs.com/2015/02/04/pre-hydra-post/
https://sriramkswamy.github.io/dotemacs/#orgheadline141

*** major modes
:PROPERTIES:
:ID:       E6290A57-7035-4ADB-89F6-9CCADF2D74DB
:END:
:LOGBOOK:
CLOCK: [2021-04-22 Thu 22:08]--[2021-04-22 Thu 22:23] =>  0:15
CLOCK: [2021-04-22 Thu 17:57]--[2021-04-22 Thu 18:21] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-major-modes
  (:exit t
         :idle 0.5)
  "Major modes"
  ("a" (files-extras-switch-to-most-recent-buffer-in-mode 'org-agenda-mode) "Agenda")
  ("c" (files-extras-switch-to-most-recent-buffer-in-mode 'calendar-mode) "Calendar")
  ("d" (files-extras-switch-to-most-recent-buffer-in-mode 'dired-mode) "Dired")
  ("e" (files-extras-switch-to-most-recent-buffer-in-mode 'elfeed-search-mode) "Elfeed")
  ("f" (files-extras-switch-to-most-recent-buffer-in-mode 'fundamental-mode) "Fundamental")
  ("h" (files-extras-switch-to-most-recent-buffer-in-mode 'helpful-mode) "Helpful")
  ("i" (files-extras-switch-to-most-recent-buffer-in-mode 'Info-mode) "Info")
  ("j" (files-extras-switch-to-most-recent-buffer-in-mode 'ledger-mode) "Ledger")
  ("k" (files-extras-switch-to-most-recent-buffer-in-mode 'slack-message-buffer-mode) "Slack")
  ("l" (files-extras-switch-to-most-recent-buffer-in-mode 'emacs-lisp-mode) "Emacs Lisp")
  ("n" (files-extras-switch-to-most-recent-buffer-in-mode 'snippet-mode) "Snippet")
  ("o" (files-extras-switch-to-most-recent-buffer-in-mode 'org-mode) "Org")
  ("p" (files-extras-switch-to-most-recent-buffer-in-mode 'pdf-view-mode) "PDF")
  ("s" (files-extras-switch-to-most-recent-buffer-in-mode 'eshell-mode) "Eshell")
  ("z" (files-extras-switch-to-most-recent-buffer-in-mode 'special-mode) "Special")
  ("t" (files-extras-switch-to-most-recent-buffer-in-mode 'twittering-mode) "Twittering")
  ("w" (files-extras-switch-to-most-recent-buffer-in-mode 'eww-mode) "Eww")
  ("x" (files-extras-switch-to-most-recent-buffer-in-mode 'mhtml-mode) "XHTML+")
  ("y" (files-extras-switch-to-most-recent-buffer-in-mode 'python-mode) "Python"))
#+end_src

*** files
:PROPERTIES:
:ID:       39E06A29-2AEC-4EB4-A0D0-7E1A64832B18
:END:
:LOGBOOK:
CLOCK: [2023-08-27 Sun 15:36]--[2023-08-27 Sun 16:10] =>  0:34
CLOCK: [2023-08-27 Sun 15:05]--[2023-08-27 Sun 15:05] =>  0:00
CLOCK: [2022-10-01 Sat 18:06]--[2022-10-01 Sat 18:14] =>  0:08
CLOCK: [2021-07-13 Tue 18:20]--[2021-07-13 Tue 18:57] =>  0:37
CLOCK: [2021-03-31 Wed 11:21]--[2021-03-31 Wed 11:35] =>  0:14
CLOCK: [2021-03-07 Sun 11:06]--[2021-03-07 Sun 11:55] =>  0:49
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-files
  (:exit t)
  "Buffers"
  ("." (find-file paths-file-inbox-mobile) "inbox-mobile")
  ("," (find-file paths-file-inbox-desktop) "inbox-desktop")
  ("a" (org-extras-agenda-switch-to-agenda-current-day) "agenda")
  ("c" (find-file paths-file-config) "config")
  ("d" (find-file paths-file-tlon-docs) "tlon-docs")
  ("e" (files-extras-open-extras-package) "extras")
  ("h" (find-file paths-file-tlon-ledger) "tlon-ledger")
  ("i" (find-file paths-file-anki) "anki")
  ("j" (find-file paths-file-ledger) "ledger")
  ("k" (find-file paths-file-karabiner) "karabiner")
  ("o" (switch-to-buffer "*notes*") "notes")
  ("p" (hydra-files-packages/body) "packages")
  ("q" (find-file paths-file-quotes) "quotes")
  ("r" (find-file paths-file-calendar) "calendar")
  ("s" (switch-to-buffer "*scratch*") "scratch")
  ("v" (find-file paths-file-films) "films")
  ("w" (find-file paths-file-work) "work")
  ("z" (find-file paths-file-variables) "variables"))

(defhydra hydra-files-packages
  (:exit t)
  "packages"
  ("b" (files-extras-open-elpaca-package "tlon-babel") "tlon-babel" :column "tlön")
  ("c" (files-extras-open-elpaca-package "tlon-core") "tlon-core")
  ("i" (files-extras-open-elpaca-package "tlon-init") "tlon-init")
  ("a" (files-extras-open-elpaca-package "internet-archive") "internet-archive" :column "personal")
  ("l" (files-extras-open-elpaca-package "bib") "bib")
  ("g" (files-extras-open-elpaca-package "goldendict-ng") "glondendict-ng")
  ("o" (files-extras-open-elpaca-package "macos") "macos")
  ("m" (files-extras-open-elpaca-package "mullvad") "mullvad")
  ("p" (files-extras-open-elpaca-package "pomodoro-centile") "pomodoro-centile"))
#+end_src

*** org headings
:PROPERTIES:
:ID:       FBC1D388-0EFA-452D-828D-44724CF99191
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:40]--[2021-04-03 Sat 10:41] =>  0:01
CLOCK: [2021-04-03 Sat 10:24]--[2021-04-03 Sat 10:33] =>  0:09
CLOCK: [2021-03-07 Sun 11:55]--[2021-03-07 Sun 12:13] =>  0:18
CLOCK: [2021-03-07 Sun 11:01]--[2021-03-07 Sun 11:06] =>  0:05
CLOCK: [2021-02-24 Wed 16:02]--[2021-02-24 Wed 16:26] =>  0:24
:END:

**** notes.org
:PROPERTIES:
:ID:       C3A44EA2-5523-45DD-8100-6228D80ECAC8
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:41]--[2021-04-03 Sat 11:20] =>  0:39
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes
  (:exit t
         :idle 0.5)
  "Org headings"
  ("SPC" (org-roam-extras-id-goto "B67C920B-D855-4A27-A35C-1DAC56580DA7") "Anki habit")
  ("i" (org-roam-extras-id-goto "50BAC203-6A4D-459B-A6F6-461E6908EDB1") "Anki")
  ("p" (org-roam-extras-id-goto "0070312F-6233-4BED-98F4-A2BAAEE8DAFF") "audiobooks")
  ("b" (org-roam-extras-id-goto "7A788F19-30F5-4504-B47F-CE693AF3EA7E") "books")
  ("u" (org-roam-extras-id-goto "78577411-554E-4EEC-B669-C014A9581540") "Current book")
  ("r" (org-roam-extras-id-goto "1C5DCC5A-DA18-4CBD-8E2E-205766A656D6") "Documentaries")
  ("z" (org-roam-extras-id-goto "8F8E5495-A0D8-451A-B1F1-0A8706CBF6A0") "eablogs.net")
  ("e" (org-roam-extras-id-goto "96BBA849-B4CF-41C0-ABA3-A5D901BCDB18") "Email")
  ("d" (org-roam-extras-id-goto "6504C81B-28F0-44C3-BFC0-2F3E648974F0") "Feeds")
  ("v" (org-roam-extras-id-goto "E821F19E-C619-4895-A084-54D0A2772BAE") "films")
  ("f" (org-roam-extras-id-goto "EB812B59-BBFB-4E06-865A-ACF5A4DE5A5C") "finance")
  ("/" (org-roam-extras-id-goto "D9D71BF0-6BD6-40A5-9896-E58C7D9556B7") "inbox")
  ("m" (org-roam-extras-id-goto "E65E393D-8694-4E23-994E-BA59A8063FCF") "Keyboard Maestro")
  ("k" (org-roam-extras-id-goto "6F0A4889-C303-4930-8512-757AAD310535") "Khan Academy")
  ("l" (org-roam-extras-id-goto "C308562B-222E-47E2-9A5F-B31EDB29569A") "Leonardo")
  ("," (org-roam-extras-id-goto "E1C1F691-8358-4DDF-AC71-F46B883411BB") "morning routine")
  ("." (org-roam-extras-id-goto "ADAA1E78-2904-4EF4-938C-F599A5C90822") "night routine")
  ("c" (org-roam-extras-id-goto "7CE82ABB-A23F-41F6-A29E-0B95553A8FEE") "podcasts")
  ("s" (org-roam-extras-id-goto "3513061C-5868-4EBC-9F77-9814AB776011") "Slack")
  ("j" (org-roam-extras-id-goto "356B7595-EC5B-4DF4-949C-A637537128E4") "sleep")
  ("y" (org-roam-extras-id-goto "FBDB7FC0-7650-48A0-933D-AE9606C2B621") "Spotify")
  ("t" (hydra-org-work/body) "tlon")
  ("n" (org-roam-extras-id-goto "9696939D-A8B7-4179-A5C8-FEBB017DC9EF") "Telegram")
  ("q" (org-roam-extras-id-goto "14915C82-8FF3-460D-83B3-148BB2CA7B7E") "YouTube")
  ;; ("RET'" (org-roam-extras-id-goto "") "")
  ;; ("TAB'" (org-roam-extras-id-goto "") "")
  ;; ("='" (org-roam-extras-id-goto "") "")
  ;; ("-'" (org-roam-extras-id-goto "") "")
  ;; ("('" (org-roam-extras-id-goto "") "")
  ("H-a" (org-extras-id-notes-with-clock "a"))
  ("H-b" (org-extras-id-notes-with-clock "b"))
  ("H-c" (org-extras-id-notes-with-clock "c"))
  ("H-d" (org-extras-id-notes-with-clock "d"))
  ("H-e" (org-extras-id-notes-with-clock "e"))
  ("H-f" (org-extras-id-notes-with-clock "f"))
  ("H-g" (org-extras-id-notes-with-clock "g"))
  ("H-h" (org-extras-id-notes-with-clock "h"))
  ("H-i" (org-extras-id-notes-with-clock "i"))
  ("H-j" (org-extras-id-notes-with-clock "j"))
  ("H-k" (org-extras-id-notes-with-clock "k"))
  ("H-l" (org-extras-id-notes-with-clock "l"))
  ("H-m" (org-extras-id-notes-with-clock "m"))
  ("H-n" (org-extras-id-notes-with-clock "n"))
  ("H-o" (org-extras-id-notes-with-clock "o"))
  ("H-p" (org-extras-id-notes-with-clock "p"))
  ("H-q" (org-extras-id-notes-with-clock "q"))
  ("H-r" (org-extras-id-notes-with-clock "r"))
  ("H-s" (org-extras-id-notes-with-clock "s"))
  ("H-t" (org-extras-id-notes-with-clock "t"))
  ("H-u" (org-extras-id-notes-with-clock "u"))
  ("H-v" (org-extras-id-notes-with-clock "v"))
  ("H-w" (org-extras-id-notes-with-clock "w"))
  ("H-x" (org-extras-id-notes-with-clock "x"))
  ("H-y" (org-extras-id-notes-with-clock "y"))
  ("H-z" (org-extras-id-notes-with-clock "z"))
  ("H-," (org-extras-id-notes-with-clock ","))
  ("H-." (org-extras-id-notes-with-clock "."))
  ("H-/" (org-extras-id-notes-with-clock "/"))
  ("H-=" (org-extras-id-notes-with-clock "="))
  ("H--" (org-extras-id-notes-with-clock "-"))
  ("H-(" (org-extras-id-notes-with-clock "("))
  ("H-'" (org-extras-id-notes-with-clock "'"))
  ("H-SPC" (org-extras-id-notes-with-clock "SPC"))
  ("H-RET" (org-extras-id-notes-with-clock "RET"))
  ("H-TAB" (org-extras-id-notes-with-clock "TAB"))
  )

(defhydra hydra-dirs-tlon
  (:exit t)
  "Org Headings: Tlön"
  ("d" (org-roam-extras-id-goto "") "LBDLH")
  ("c" (org-roam-extras-id-goto "") "core")
  ("f" (org-roam-extras-id-goto "") "fede")
  ("g" (org-roam-extras-id-goto "") "Dropbox: GPE")
  ("h" (org-roam-extras-id-goto "") "Dropbox: HEAR")
  ("l" (org-roam-extras-id-goto "") "Dropbox: leo")
  ("r" (org-roam-extras-id-goto "") "Dropbox: RAE")
  ("s" (org-roam-extras-id-goto "") "Dropbox: FM")
  ("t" (org-roam-extras-id-goto "") "Dropbox: tlon")
  ("u" (org-roam-extras-id-goto "") "Dropbox: EAN"))
#+end_src

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"
  )
#+end_src

***** clock only
:PROPERTIES:
:ID:       E549DF73-C724-4FE8-B5BB-F56147F919A1
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-only-clock
  (:exit t
         :idle 0.5)
  "Org headings"
  ("a" (org-extras-id-notes-only-clock "a"))
  ("b" (org-extras-id-notes-only-clock "b"))
  ("c" (org-extras-id-notes-only-clock "c"))
  ("d" (org-extras-id-notes-only-clock "d"))
  ("e" (org-extras-id-notes-only-clock "e"))
  ("f" (org-extras-id-notes-only-clock "f"))
  ("g" (org-extras-id-notes-only-clock "g"))
  ("h" (org-extras-id-notes-only-clock "h"))
  ("i" (org-extras-id-notes-only-clock "i"))
  ("j" (org-extras-id-notes-only-clock "j"))
  ("k" (org-extras-id-notes-only-clock "k"))
  ("l" (org-extras-id-notes-only-clock "l"))
  ("m" (org-extras-id-notes-only-clock "m"))
  ("n" (org-extras-id-notes-only-clock "n"))
  ("o" (org-extras-id-notes-only-clock "o"))
  ("p" (org-extras-id-notes-only-clock "p"))
  ("q" (org-extras-id-notes-only-clock "q"))
  ("r" (org-extras-id-notes-only-clock "r"))
  ("s" (org-extras-id-notes-only-clock "s"))
  ("t" (org-extras-id-notes-only-clock "t"))
  ("u" (org-extras-id-notes-only-clock "u"))
  ("v" (org-extras-id-notes-only-clock "v"))
  ("w" (org-extras-id-notes-only-clock "w"))
  ("x" (org-extras-id-notes-only-clock "x"))
  ("y" (org-extras-id-notes-only-clock "y"))
  ("z" (org-extras-id-notes-only-clock "z"))
  ("," (org-extras-id-notes-only-clock ","))
  ("." (org-extras-id-notes-only-clock "."))
  ("/" (org-extras-id-notes-only-clock "/"))
  ("=" (org-extras-id-notes-only-clock "="))
  ("-" (org-extras-id-notes-only-clock "-"))
  ("(" (org-extras-id-notes-only-clock "("))
  ("'" (org-extras-id-notes-only-clock "'"))
  ("SPC" (org-extras-id-notes-only-clock "SPC"))
  ("RET" (org-extras-id-notes-only-clock "RET"))
  ("TAB" (org-extras-id-notes-only-clock "TAB"))
  )
#+end_src

**** Projects
:PROPERTIES:
:ID:       47C81DBE-9ACA-4AAA-9942-6FEC4A3483C6
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-work
  (:hint nil
  :idle 0
  :color blue)
  "Projects dashboard"
  ;; ("a" (org-roam-extras-id-goto "") "")
  ;; ("b" (org-roam-extras-id-goto "") "")
  ;; ("c" (org-roam-extras-id-goto "") "")
  ("b" (org-roam-extras-id-goto "DFE45995-7935-4F19-80DA-FB9C11FE9E24") "BAB" :column "Tlön")
  ("r" (org-roam-extras-id-goto "15A1803F-EAA7-4FB9-BA77-74154EB8CA5D") "RAE" :column "Tlön")
  ("n" (org-roam-extras-id-goto "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC") "EAN" :column "Tlön")
  ("d" (org-roam-extras-id-goto "CE8A5497-1BF9-4340-9853-5ADA4605ECB5") "LBDLHD" :column "Tlön")
  ("w" (org-roam-extras-id-goto "72EE8B25-D847-49F5-B6D9-E3B67BEB071A") "PW" :column "Other")
  ("v" (org-roam-extras-id-goto "7333FEC5-90A7-423D-9C45-2D5333593F87") "Samotsvety" :column "Other")
  ("x" (org-roam-extras-id-goto "E13198C9-8F3F-46D8-B052-6F6ADF6B4D99") "Misc" :column "Other")
  ("c" (org-roam-extras-id-goto "830A5DA5-AB9A-483A-B8AC-C5CCBD3A02FD") "EA Archive" :column "Someday")
  ("a" (org-roam-extras-id-goto "177F4865-3B25-41C0-999B-B9B67DFAC110") "EA Nomad" :column "Someday")
  ("h" (org-roam-extras-id-goto "1BBBA5F1-11FA-4C7B-8D08-5DC84233B8E2") "HEAR" :column "On hold")
  ("" (org-roam-extras-id-goto "9066D77E-7F2B-4176-9533-243060F11276") "FM" :column "Done")
  ("" (org-roam-extras-id-goto "DA0B3751-6B25-4F53-AE27-7B6CBC29B6C1") "GPE" :column "Done")
  ("" (org-roam-extras-id-goto "2514AA39-CFBF-4E5A-B18E-147497E31C8F") "LP" :column "Done")
  ("" (org-roam-extras-id-goto "470C263E-40F8-4567-83BC-85DE6E5F8D5A") "RCGs" :column "Done")
  ("" (org-roam-extras-id-goto "AE8F5AD4-B85A-4EE2-8A94-AA7B2AFF3E7F") "Regranting" :column "Done")
  ("e" (org-roam-extras-id-goto "EA0B83B2-8A4A-417A-8318-56B4EDC75FF5") "email" :column "Comms")
  ("s" (org-roam-extras-id-goto "A45FEDFB-1928-4571-97F3-03D20A78883C") "slack" :column "Comms")
  ("t" (org-roam-extras-id-goto "DF643B0F-1956-44AB-90DD-749D849C285D") "telegram" :column "Comms")
  ("f" (org-roam-extras-id-goto "AED9330C-1673-4669-A367-4B87614965F6") "fede" :column "Fede")
  ("F" (tlon-core-meeting-with-fede) "fede: meeting" :column "Fede")
  ("H-f" (org-roam-extras-id-goto "EB5FC062-E46F-4C1F-930F-F2CC710F852D") "fede: tareas" :column "Fede")
  ("l" (org-roam-extras-id-goto "4EF48AB3-44B4-4791-BDFC-537F3B636FDA") "leo" :column "Leo")
  ("L" (tlon-core-meeting-with-leo) "leo: meeting" :column "Leo")
  ("H-l" (org-roam-extras-id-goto "E5777AB0-DC81-40CB-8D03-77D6F111AA2E") "leo: tareas" :column "Leo")
  ("RET" (org-roam-extras-id-goto "843EE71C-4D50-4C2F-82E6-0C0AA928C72A") "Home" :column "")
  )

(defhydra hydra-org-work-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"

  )
#+end_src

**** config.org
:PROPERTIES:
:ID:       F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78
:END:
:LOGBOOK:
CLOCK: [2021-12-04 Sat 15:05]--[2021-12-04 Sat 15:07] =>  0:02
CLOCK: [2021-07-28 Wed 20:56]--[2021-07-28 Wed 21:07] =>  0:11
CLOCK: [2021-06-22 Tue 12:34]--[2021-06-22 Tue 12:54] =>  0:20
CLOCK: [2021-03-16 Tue 11:23]--[2021-03-16 Tue 11:26] =>  0:03
CLOCK: [2021-03-16 Tue 11:13]--[2021-03-16 Tue 11:19] =>  0:06
CLOCK: [2021-03-15 Mon 14:27]--[2021-03-15 Mon 14:51] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-config
  (:exit 1)
  "Org headings: config.org"
  ("c" (org-roam-extras-id-goto "50FAD2F3-E501-408E-A9A2-8358FAA87C1C") "Calc")
  ("d" (org-roam-extras-id-goto "617F5323-6518-4751-948B-3E8032D93130") "Dired")
  ("e" (org-roam-extras-id-goto "FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5") "Elfeed")
  ("f" (org-roam-extras-id-goto "B29F4586-2B8D-41FE-82DE-FEDCD863C74B") "Files & buffers")
  ("g" (org-roam-extras-id-goto "AACAE0F4-0B25-475B-831B-3F1E91E6349D") "Graveyard")
  ("h" (hydra-org-config-hydra/body) "Hydra")
  ("i" (org-roam-extras-id-goto "A7940400-DD17-4B0B-A9B2-565A207D680C") "Introduction")
  ("k" (org-roam-extras-id-goto "4373E661-B19D-4E6C-B7DE-C2A26619A515") "Wiki")
  ("l" (org-roam-extras-id-goto "DE6D2307-9EBD-4E0F-B873-003C9813CA27") "Display")
  ("m" (org-roam-extras-id-goto "E83EC00B-0C94-44CD-9EC0-355992C99234") "Completion ")
  ("n" (org-roam-extras-id-goto "179BB021-8B2A-4BF0-B3AA-43AF5A212D4B") "Text manipulation")
  ("o" (hydra-org-config-org/body) "Org")
  ("p" (org-roam-extras-id-goto "7F0CBD06-FDB3-4889-91CE-D8A25D4F2613") "Help")
  ("s" (org-roam-extras-id-goto "9FDBBF3E-724F-4402-9DDB-F9349F65AB0E") "Search")
  ("t" (org-roam-extras-id-goto "1E8F4417-5D5F-4406-BB70-AA272F714EF2") "Text movement")
  ("u" (org-roam-extras-id-goto "AA460F4A-4035-4C96-A3A1-078A43F7892D") "user-init")
  ("v" (org-roam-extras-id-goto "10E891D3-9DF5-472A-8E3C-1DE30EE8C81F") "Variables")
  ("w" (org-roam-extras-id-goto "7E9A81E0-CAEB-4029-AD2C-B2416439FCDA") "Windows & frames")
  ("y" (org-roam-extras-id-goto "6405B8E7-6612-4D71-8C2C-A51F8808F4C6") "Yasnippets"))

(defhydra hydra-org-config-hydra
  (:exit 1)
  "Org headings: config.org > hydra"
  ("c" (org-roam-extras-id-goto "F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78") "Hydra config")
  ("e" (org-roam-extras-id-goto "CC88D9BE-6617-4D53-BCCF-02097C2A81E1") "Hydra wiki entries")
  ("f" (org-roam-extras-id-goto "39E06A29-2AEC-4EB4-A0D0-7E1A64832B18") "Hydra files")
  ("h" (org-roam-extras-id-goto "00E7E217-E02E-489B-968D-E49431FD5ECC") "Hydra main")
  ("n" (org-roam-extras-id-goto "C3A44EA2-5523-45DD-8100-6228D80ECAC8") "Hydra notes")
  ("o" (org-roam-extras-id-goto "E6290A57-7035-4ADB-89F6-9CCADF2D74DB") "Hydra mode buffers")
  ("r" (org-roam-extras-id-goto "F6AA197E-73A7-4688-986F-4A1D583BBA99") "Hydra org ratings")
  ("s" (org-roam-extras-id-goto "40207396-12B9-4374-9341-713E88772275") "Hydra Straight")
  ("w" (org-roam-extras-id-goto "B7B8956F-08D9-49E0-873C-4513F6FD44B8") "Hydra wiki notes")
  ("y" (org-roam-extras-id-goto "5CC3B9AA-629B-407A-899D-529E66A7D057") "Hydra yasnippets"))

(defhydra hydra-org-config-org
  (:exit 1)
  "Org headings: config.org > org"
  ("a" (org-roam-extras-id-goto "E03F4142-C90D-4550-8990-15391E27AD77") "org-agenda")
  ("b" (org-roam-extras-id-goto "52C959E4-54F4-4499-AE3A-5251F6337FA0") "org key bindings")
  ("c" (org-roam-extras-id-goto "14F93A83-0BE7-42E3-891E-F6806192296B") "org-capture")
  ("m" (org-roam-extras-id-goto "2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17") "org-roam")
  ("n" (org-roam-extras-id-goto "A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7") "org-noter")
  ("o" (org-roam-extras-id-goto "268B60E4-708C-4372-A59D-5DD876E493CA") "org-mode")
  ("f" (org-roam-extras-id-goto "35FB5BB5-6552-48C6-983A-F90011CCA908") "org-ref")
  ("r" (org-roam-extras-id-goto "3FAE7C0D-FB22-4175-A0A4-FFA392539743") "org-refile")
  ("t" (org-roam-extras-id-goto "8AF25840-AC38-4FF7-A45F-F01B96C5DF5A") "org-cite")
  ("x" (org-roam-extras-id-goto "EC73B84D-530E-4179-BB67-F19110A543DF") "org-roam-bibtex"))
#+end_src

*** dired
:PROPERTIES:
:ID:       8AD794CB-0A81-4D36-BEAC-0F85F3B34831
:END:
:LOGBOOK:
CLOCK: [2023-08-27 Sun 15:05]--[2023-08-27 Sun 15:36] =>  0:31
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-dirs
  (:exit t)
  "Dired folders"
  ("a" (hydra-dirs-google-drive/body) "apps")
  ("b" (dired paths-dir-personal-bibliography) "bibliography")
  ("d" (dired paths-dir-dotfiles) "dotfiles")
  ("e" (dired paths-dir-emacs) "Emacs")
  ("i" (dired paths-dir-anki) "Anki")
  ("j" (dired paths-dir-health) "Health")
  ("m" (hydra-dirs-music/body) "Music")
  ("n" (dired paths-dir-notes) "Notes")
  ("o" (dired paths-dir-google-drive) "Google Drive")
  ("p" (dired paths-dir-people) "People")
  ("t" (hydra-dirs-tlon/body) "Tlön")
  ("H-t" (hydra-dirs-tlon/body) "Tlön")
  ("U" (dired paths-dir-audiobooks) "Audiobooks")
  ("v" (dired paths-dir-movies) "movies")
  ("w" (dired paths-dir-downloads) "downloads")
  ("x" (dired paths-dir-dropbox) "Dropbox")
  ("y" (dired paths-dir-pdf-library) "Library: PDF")
  ("z" (dired paths-dir-html-library) "Library: HTML")
  ("." (dired-at-point) "File at point")
  ("/" (dired "/") "Root")
  ("SPC" (dired "~/") "user")
  (";" (dired-jump) "Current buffer")
  ("H-;" (dired-jump-other-window) "Current buffer in other window"))

(defhydra hydra-dirs-tlon
  (:exit t)
  "Dired folders: Tlön"
  ("b" (dired paths-dir-dropbox-tlon-babel) "Dropbox: Babel" :column "Dropbox")
  ("H-b" (dired paths-dir-google-drive-tlon-babel) "Google Drive: Babel" :column "Google Drive")
  ("n" (dired paths-dir-dropbox-tlon-EAN) "Dropbox: EAN" :column "Dropbox")
  ("H-n" (dired paths-dir-google-drive-tlon-EAN) "Google Drive: EAN" :column "Google Drive")
  ("m" (dired paths-dir-dropbox-tlon-FM) "Dropbox: FM" :column "Dropbox")
  ("H-m" (dired paths-dir-google-drive-tlon-FM) "Google Drive: FM" :column "Google Drive")
  ("g" (dired paths-dir-dropbox-tlon-GPE) "Dropbox: GPE" :column "Dropbox")
  ("H-g" (dired paths-dir-google-drive-tlon-GPE) "Google Drive: GPE" :column "Google Drive")
  ("h" (dired paths-dir-dropbox-tlon-HEAR) "Dropbox: HEAR" :column "Dropbox")
  ("H-h" (dired paths-dir-google-drive-tlon-HEAR) "Google Drive: HEAR" :column "Google Drive")
  ("d" (dired paths-dir-dropbox-tlon-LBDLH) "Dropbox: LBDLH" :column "Dropbox")
  ("H-d" (dired paths-dir-google-drive-tlon-LBDLH) "Google Drive: LBDLH" :column "Google Drive")
  ("p" (dired paths-dir-dropbox-tlon-LP) "Dropbox: LP" :column "Dropbox")
  ("H-p" (dired paths-dir-google-drive-tlon-LP) "Google Drive: LP" :column "Google Drive")
  ("r" (dired paths-dir-dropbox-tlon-RAE) "Dropbox: RAE" :column "Dropbox")
  ("H-r" (dired paths-dir-google-drive-tlon-RAE) "Google Drive: RAE" :column "Google Drive")
  ("t" (dired paths-dir-dropbox-tlon) "Dropbox: tlon" :column "Dropbox")
  ("H-t" (dired paths-dir-google-drive-tlon) "Google Drive: tlon" :column "Google Drive")
  ("c" (dired paths-dir-dropbox-tlon-core) "Dropbox: core" :column "Dropbox")
  ("H-c" (dired paths-dir-google-drive-tlon-core) "Google Drive: core" :column "Google Drive")
  ("f" (dired paths-dir-dropbox-tlon-fede) "Dropbox: fede" :column "Dropbox")
  ("H-f" (dired paths-dir-google-drive-tlon-fede) "Google Drive: fede" :column "Google Drive")
  ("l" (dired paths-dir-dropbox-tlon-leo) "Dropbox: leo" :column "Dropbox")
  ("H-l" (dired paths-dir-google-drive-tlon-leo) "Google Drive: leo" :column "Google Drive"))

(defhydra hydra-dirs-google-drive
  (:exit t)
  "Dired folders: apps"
  ;; TODO: parametrize
  ("i" (dired "~/Google Drive/Apps/Anki") "Anki")
  ("c" (dired "~/Google Drive/Apps/Emacs") "Emacs")
  ("m" (dired "~/Google Drive/Apps/Keyboard Maestro") "Keyboard Maestro")
  ("'" (hydra-dirs/body) "back"))

(defhydra hydra-dirs-music
  (:exit t)
  "Dired folders: music"
  ("c" (dired paths-dir-music-classical) "classical")
  ("p" (dired paths-dir-music-popular) "popular")
  ("t" (dired paths-dir-music-tango) "tango")
  ("s" (dired paths-dir-music-to-sort) "to sort")
  ("'" (hydra-dirs/body) "back"))
#+end_src

** warnings
:PROPERTIES:
:ID:       C8FB5BC6-6895-4D63-86A8-E49D6BB3001C
:END:

#+begin_src emacs-lisp :results silent
(use-feature warnings
  :demand t
  :config
  (dolist (element '((yasnippet backquote-change)
                     (org-element-cache)
                     (cons)))
    (add-to-list 'warning-suppress-types element)))
#+end_src

** comp
:PROPERTIES:
:ID:       191AB5FC-F979-4B71-84A0-D8FC108CEBD3
:END:

#+begin_src emacs-lisp :results silent
(use-feature comp
  :defer 60
  :config
  (setq native-comp-async-report-warnings-errors nil))
#+end_src

** bytecomp
:PROPERTIES:
:ID:       630FB32E-8D10-47C5-98EB-B436C6CF97D9
:END:

#+begin_src emacs-lisp :results silent
(use-feature bytecomp
  :demand t
  :config
  (setq byte-compile-warnings '(cl-functions)))
#+end_src

** startup
:PROPERTIES:
:ID:       853A9EBB-356D-428E-AC94-F14BBDA78FB4
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq user-full-name "Pablo Stafforini")
  (setq user-mail-address (getenv "PERSONAL_GMAIL"))
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message user-login-name)
  (setq inhibit-startup-buffer-menu t)
  (setq frame-resize-pixelwise t))
#+end_src

** server
:PROPERTIES:
:ID:       8514378A-0BA2-4A8E-971F-10C07ED4D38A
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :server)
(use-feature server
  :demand t
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** async
:PROPERTIES:
:ID:       B37674EC-9F35-4425-A587-F8D1944894EA
:END:

/[[https://github.com/jwiegley/emacs-async][async]] is a simple library for asynchronous processing in Emacs./

#+begin_src emacs-lisp :results silent
(use-package async
:demand t)
  ;; :commands dired-async-mode)
#+end_src

** emacsql
:PROPERTIES:
:ID:       2E12D7A1-6B15-40E5-A54F-FDAED82B58C5
:END:

/[[https://github.com/magit/emacsql][emacsql]] is a high-level Emacs Lisp RDBMS front-end./

#+begin_src emacs-lisp
(use-package emacsql
  :demand t)
#+end_src

** tlon-core
:PROPERTIES:
:ID:       9BE75448-80A0-4CD7-9341-97F723C44A4A
:END:

#+begin_src emacs-lisp
(use-package tlon-core
  :elpaca (tlon-core
           :host github
           :repo "tlon-team/tlon-core"
           :depth nil) ; clone entire repo, not just last commit
  :demand t
  :config
  (setq tlon-core-meeting-pending-id-fede "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1")
  (setq tlon-core-meeting-pending-id-leo "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1")

  :general
  (markdown-mode-map
   "s-y" 'tlon-core-slugify-clipboard))
#+end_src

** prot-common
:PROPERTIES:
:ID:       300DFB2C-878E-4F21-833C-327C9DFDC01B
:END:

/[[https://git.sr.ht/~protesilaos/dotfiles/tree/master/item/emacs/%2Eemacs.d/prot-lisp/prot-common.el][prot-common]] is a set of functions used by Protesilaos Stavrou's unreleased "packages"./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp
(use-package prot-common
  :elpaca (prot-common
           :host sourcehut
           :repo "protesilaos/dotfiles"
           :local-repo "prot-common"
           :main "emacs/.emacs.d/prot-lisp/prot-common.el"
           :build (:not elpaca--check-version)
           :files ("emacs/.emacs.d/prot-lisp/prot-common.el"))
  :demand t)

#+end_src

** prot-simple
:PROPERTIES:
:ID:       6C67743E-7250-4BC5-B496-2D969EF2D015
:END:

/[[https://git.sr.ht/~protesilaos/dotfiles/tree/master/item/emacs/%2Eemacs.d/prot-lisp/prot-simple.el][prot-simple]] is a set of common commands used by Protesilaos Stavrou's unreleased "packages"./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp
(use-package prot-simple
  :elpaca (prot-simple
           :host sourcehut
           :repo "protesilaos/dotfiles"
           :local-repo "prot-simple"
           :main "emacs/.emacs.d/prot-lisp/prot-simple.el"
           :build (:not elpaca--check-version)
           :files ("emacs/.emacs.d/prot-lisp/prot-simple.el"))
  :after prot-common
  :demand t
  :config
  (setq prot-simple-date-specifier "%F")
  (setq prot-simple-time-specifier "%R %z")

  :general
  ("M-s-=" 'prot-simple-insert-date
   "C-g" 'prot-simple-keyboard-quit-dwim))
#+end_src

** misc.
:PROPERTIES:
:ID:       72D2BA33-0E12-4893-B790-B132CE2F9404
:END:
:LOGBOOK:
CLOCK: [2021-12-13 Mon 13:04]--[2021-12-13 Mon 13:15] =>  0:11
CLOCK: [2021-07-25 Sun 11:48]--[2021-07-25 Sun 12:47] =>  0:59
CLOCK: [2021-07-18 Sun 20:32]--[2021-07-18 Sun 20:42] =>  0:10
CLOCK: [2021-05-05 Wed 21:05]--[2021-05-05 Wed 21:55] =>  0:50
CLOCK: [2021-02-11 Thu 08:51]--[2021-02-11 Thu 09:35] =>  0:44
CLOCK: [2021-04-05 Mon 15:49]--[2021-04-05 Mon 15:56] =>  0:07
CLOCK: [2021-02-07 Sun 12:07]--[2021-02-07 Sun 12:15] =>  0:08
CLOCK: [2021-04-08 Thu 07:27]--[2021-04-08 Thu 08:13] =>  0:46
CLOCK: [2021-04-06 Tue 19:57]--[2021-04-06 Tue 20:03] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :config
  (setq default-directory paths-dir-dropbox)
  (setq use-short-answers t)
  (setq message-log-max t)
  (setq ring-bell-function 'ignore) ; silence bell when mistake is made
  (setq x-stretch-cursor t) ; make curor the width of the character under it
  ;; emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  ;; UTF8 stuff.
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (define-key input-decode-map (kbd "M-8") "•"))
#+end_src

* secrets
:PROPERTIES:
:ID:       D412C998-40EE-4638-959A-C2530EC9F247
:END:
:LOGBOOK:
:END:

** plstore
:PROPERTIES:
:ID:       5257E611-7953-4898-B743-25803EC7D9B4
:END:

#+begin_src emacs-lisp :results silent
(use-feature plstore
  :demand t
  :init
  (setq-default plstore-cache-passphrase-for-symmetric-encryption t))
#+end_src

** epg-config
:PROPERTIES:
:ID:       012F15A3-7717-4B09-9F43-74DA6F5F7C1A
:END:

#+begin_src emacs-lisp :results silent
(use-feature epg-config
  :demand t
  :config
  (setq epg-pinentry-mode 'loopback) ; use minibuffer for password entry
  (setq epg-gpg-program "/opt/homebrew/bin/gpg"))
#+end_src

** epa-file
:PROPERTIES:
:ID:       FD3455F8-7CD3-4651-8063-304D4131F14E
:END:

#+begin_src emacs-lisp
(use-feature epa-file
  :config
  (epa-file-enable))
#+end_src

** auth-source
:PROPERTIES:
:ID:       291F9998-9940-4249-A048-92B5F2A2895E
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 12:33]--[2021-05-29 Sat 13:02] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source
  :demand t
  :preface
  (eval-when-compile
    (defvar auth-sources))
  :config
  (setq auth-source-debug nil) ; set to t for debugging
  (setq auth-sources '(macos-keychain-internet macos-keychain-generic)))
#+end_src

** oauth2-auto
:PROPERTIES:
:ID:       C7B36982-D472-4248-8C61-B7EB0ED6ACF6
:END:

/[[https://github.com/telotortium/emacs-oauth2-auto][emacs-oauth2-auto]] supports authentication to an OAuth2 provider from within Emacs./

#+begin_src emacs-lisp :results silent
(use-package oauth2-auto
  :elpaca (oauth2-auto
           :host github
           :repo "telotortium/emacs-oauth2-auto"
           :protocol ssh))
#+end_src

** password-store-otp
:PROPERTIES:
:ID:       761A0B71-DA6A-42A1-8137-F4C857F029F0
:END:

#+begin_src emacs-lisp
(use-package password-store-otp
  :elpaca (password-store-otp :version (lambda (_) "0.1.5"))  ; github.com/progfolio/elpaca/issues/229
  :demand t)
#+end_src

** password-store
:PROPERTIES:
:ID:       80D05BB8-D440-417A-8D94-61F4EB79EA00
:END:

#+begin_src emacs-lisp
(use-package password-store
  :elpaca (password-store
            :host github
            :repo "zx2c4/password-store"
            :files ("contrib/emacs/*.el"))
  :after password-store-otp
  :demand t)
#+end_src

** pass
:PROPERTIES:
:ID:       518D3C1F-AFD6-4B72-8980-CAD10BBAEDDE
:END:
:LOGBOOK:
CLOCK: [2022-06-03 Fri 16:18]--[2022-06-03 Fri 16:35] =>  0:17
CLOCK: [2022-06-03 Fri 16:38]--[2022-06-03 Fri 16:44] =>  0:06
CLOCK: [2021-07-20 Tue 09:33]--[2021-07-20 Tue 10:14] =>  0:41
CLOCK: [2021-05-29 Sat 15:44]--[2021-05-29 Sat 16:28] =>  0:44
CLOCK: [2021-05-26 Wed 17:46]--[2021-05-26 Wed 18:04] =>  0:18
CLOCK: [2021-05-14 Fri 14:55]--[2021-05-14 Fri 15:07] =>  0:12
CLOCK: [2021-04-12 Mon 13:12]--[2021-04-12 Mon 13:20] =>  0:08
CLOCK: [2021-04-11 Sun 14:36]--[2021-04-11 Sun 14:47] =>  0:11
CLOCK: [2021-04-11 Sun 12:14]--[2021-04-11 Sun 12:28] =>  0:14
CLOCK: [2021-04-11 Sun 12:01]--[2021-04-11 Sun 12:10] =>  0:09
:END:

/[[https://github.com/NicolasPetton/pass][pass]] is a major mode for [[https://en.wikipedia.org/wiki/Pass_(software)][pass]]./

#+begin_src emacs-lisp :results silent
(use-package pass
  :demand t
  :after password-store
  :config
  (setq pass-suppress-confirmations t)

  :general
  ("A-H-o" 'pass)
  (pass-mode-map
   "c" 'pass-copy
   "d" 'pass-kill)
  (pass-view-mode-map
   "s-c" 'pass-view-toggle-password
   "s-s" 'server-edit))
#+end_src

** pass-extras
:PROPERTIES:
:ID:       524FE3D7-EA5B-408E-A338-68E633528632
:END:

#+begin_src emacs-lisp
(use-personal-package pass-extras
  :after pass
  :demand t
  :general
  (pass-mode-map
   "<return>" 'pass-extras-edit
   "SPC" 'pass-extras-open-at-point
   "e" 'pass-extras-edit
   "I" 'pass-extras-insert-generated-no-symbols
   "y" 'pass-extras-git-sync))
#+end_src

** auth-source-pass
:PROPERTIES:
:ID:       00772E1B-A97C-46B5-8DE9-77462AAE0189
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 15:10]--[2021-05-29 Sat 15:44] =>  0:34
CLOCK: [2021-05-29 Sat 13:52]--[2021-05-29 Sat 14:10] =>  0:18
CLOCK: [2021-05-26 Wed 18:56]--[2021-05-26 Wed 19:23] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source-pass
  :demand t
  :after auth-source pass
  :config
  (setq auth-source-debug t)
  (setq auth-source-do-cache nil)
  (auth-source-pass-enable)
  (add-hook 'doom-modeline-before-github-fetch-notification-hook #'auth-source-pass-enable))
#+end_src

Note: to work, entries must conform to the pattern ~auth-sources/host~.

* version control
:PROPERTIES:
:ID:       CBBAD256-2800-4E9C-9042-C033FF95FA58
:END:
:LOGBOOK:
:END:

** vc
:PROPERTIES:
:ID:       B9E38DFD-09DC-4DB2-B710-44DB6F00D9DC
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 18:13]--[2021-07-22 Thu 18:34] =>  0:21
:END:

#+begin_src emacs-lisp :results silent
(use-feature vc
  :config
  (setq vc-follow-symlinks t) ; don't ask for confirmation when opening symlinked file
  (setq vc-make-backup-files nil)) ; do not backup version controlled files
#+end_src

** vc-extras
:PROPERTIES:
:ID:       A7254905-0FBE-4F8F-8D93-1A5D1FA95BB9
:END:

#+begin_src emacs-lisp
(use-personal-package vc-extras
  :after vc
  :demand t)
#+end_src

** log-edit
:PROPERTIES:
:ID:       FABAB5ED-7883-4F95-B3A2-3EB8F07DD33F
:END:

#+begin_src emacs-lisp
(use-feature log-edit
  :config
  (push 'log-edit-comment-ring savehist-additional-variables))
#+end_src
** diff-mode
:PROPERTIES:
:ID:       33F1D5AA-3DA7-43EC-8ACD-0D8360445459
:END:

#+begin_src emacs-lisp
(use-feature diff-mode
  :demand t
  :general
  (diff-mode-map
   "M-o" nil))
#+end_src

** ediff
:PROPERTIES:
:ID:       987C9066-28ED-4B5A-944C-A90681182264
:END:

#+begin_src emacs-lisp :results silent
(use-feature ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)

  :general
  ("A-d" 'ediff))
#+end_src

** ediff-extras
:PROPERTIES:
:ID:       BFD82441-5547-45C5-AD36-E5DE9FDD4898
:END:

#+begin_src emacs-lisp
(use-personal-package ediff-extras
  :after ediff
  :demand t
  :config
  (add-hook 'ediff-startup-hook #'ediff-extras-toggle-word-mode))
#+end_src

** smerge
:PROPERTIES:
:ID:       FE85CC7E-E2A0-4494-8D1E-A64A4C40013E
:END:

#+begin_src emacs-lisp
(use-feature smerge-mode
  :general
  (smerge-mode-map
   "s-n" 'smerge-next
   "s-SPC" 'smerge-next
   "s-p" 'smerge-prev
   "s-l" 'smerge-keep-lower
   "s-k" 'smerge-keep-upper
   "s-a" 'smerge-keep-all
   "s-b" 'smerge-keep-base
   "s-c" 'smerge-keep-current))
#+end_src

** gh
:PROPERTIES:
:ID:       8FCB87B4-2396-4A9A-8638-AEA8A5818252
:END:

#+begin_src emacs-lisp
(use-package gh
  :elpaca (gh :version (lambda (_) "2.29"))) ; github.com/progfolio/elpaca/issues/229
#+end_src

** magit
:PROPERTIES:
:ID:       B662CE1B-3F94-486E-A3DE-052775035960
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 21:51]--[2021-11-18 Thu 21:52] =>  0:01
CLOCK: [2021-07-22 Thu 17:12]--[2021-07-22 Thu 17:20] =>  0:08
CLOCK: [2021-07-01 Thu 22:05]--[2021-07-01 Thu 22:55] =>  0:50
CLOCK: [2021-02-25 Thu 17:24]--[2021-02-25 Thu 17:45] =>  0:21
CLOCK: [2021-02-25 Thu 14:53]--[2021-02-25 Thu 15:00] =>  0:07
:END:

/[[https://github.com/magit/magit][magit]] is a complete text-based user interface to Git./

#+begin_src emacs-lisp :results silent
(use-package magit
  :elpaca (magit
             :host github
             :repo "magit/magit"
             :ref "5ad367d7"
             :depth nil)
  :demand t
  :config
  (setq magit-commit-ask-to-stage 'stage)
  (setq magit-clone-set-remote.pushDefault t)
  (setq magit-diff-refine-hunk 'all) ; show word-granularity differences in all diff hunks

  (push 'magit-read-rev-history savehist-additional-variables)

  (add-to-list 'magit-no-confirm 'stage-all-changes)
  (dolist (hook '(magit-status-mode-hook
                    magit-diff-mode-hook))
    (add-hook hook
                (lambda ()
                  "Disable line truncation in Magit buffers."
                  (setq truncate-lines nil))))

  :general
  ("A-g" 'magit
   "A-M-g" 'magit-clone)
  (magit-mode-map
   "p" 'magit-pull
   "." 'magit-push)
  (magit-status-mode-map
   "A-C-s-r" 'magit-section-backward-sibling
   "A-C-s-f" 'magit-section-forward-sibling)
  ((magit-status-mode-map magit-hunk-section-mode-map magit-hunk-section-smerge-map)
   "s-l" 'magit-smerge-keep-lower
   "s-k" 'magit-smerge-keep-upper
   "s-a" 'magit-smerge-keep-all
   "s-b" 'magit-smerge-keep-base
   "s-c" 'magit-smerge-keep-current))
#+end_src

- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- To read: [[https://emacsredux.com/blog/2020/12/11/super-keybindings-for-magit/][Super Keybindings for Magit | Emacs Redux]]

*** resources
:PROPERTIES:
:ID:       09A7E16B-377A-4BB7-AC3B-4D7A673E7CA8
:END:
- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- https://tvraman.github.io/emacspeak/blog/github-quick-workflow.html
- [[https://prathamesh.tech/2019/06/21/creating-pull-requests-from-emacs/][Creating pull requests from emacs]]

** magit-extra
:PROPERTIES:
:ID:       DFB5D4F4-0BF8-4C1F-8C3C-1A3992387CBC
:END:

Note that this is called ~magit-extra~ (with no ‘s’ at the end) because Magit already provides a feature called ~magit-extras~.

#+begin_src emacs-lisp
(use-personal-package magit-extra
  :after magit
  :demand t
  :config
  (add-hook 'git-commit-setup-hook 'magit-extras-move-point-to-start)

  :general
  ("s-p" 'magit-extras-with-editor-finish-and-push))
#+end_src

** ghub
:PROPERTIES:
:ID:       C557A862-9EC7-406C-98E1-C248F7D579F5
:END:

/[[https://github.com/magit/ghub][ghub]] provides basic support for using the APIs of various Git forges from Emacs packages./

#+begin_src emacs-lisp :results silent
(use-package ghub
  :after auth-source
  :demand t)
#+end_src

** forge
:PROPERTIES:
:ID:       F6F60AE4-9FEA-4179-922C-CC649BC752A4
:END:
:LOGBOOK:
CLOCK: [2023-04-19 Wed 17:59]--[2023-04-19 Wed 18:48] =>  0:49
CLOCK: [2022-06-25 Sat 15:55]--[2022-06-25 Sat 16:30] =>  0:35
CLOCK: [2021-12-21 Tue 20:20]--[2021-12-21 Tue 20:27] =>  0:07
CLOCK: [2021-07-19 Mon 16:11]--[2021-07-19 Mon 16:39] =>  0:28
CLOCK: [2021-07-19 Mon 14:22]--[2021-07-19 Mon 15:15] =>  0:53
CLOCK: [2021-04-15 Thu 13:37]--[2021-04-15 Thu 13:42] =>  0:05
:END:

/[[https://github.com/magit/forge][forge]] let's one work with git forges directly from Magit./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-package forge
  :elpaca (forge
           :ref "5dcca0e"
           :depth nil)
  :after magit ghub emacsql auth-source-pass
  :demand t
  :init
  (if (version<= emacs-version "29.0")
      (setq forge-database-connector 'sqlite)
    (setq forge-database-connector 'sqlite-builtin))

  :config
  (setq forge-owned-accounts '(("benthamite")))
  (setq forge-topic-list-limit '(500 . -500)) ; show closed topics only via `forge-toggle-closed-visibility'
  (setq forge-pull-notifications t)
  (run-with-timer (* 5 60) t #'forge-pull-notifications)

  (remove-hook 'forge-post-mode-hook 'turn-on-flyspell)

  :general
  ((magit-mode-map forge-issue-list-mode-map gh-notify-mode-map)
   "n" 'forge-dispatch)
  (forge-post-mode-map
   "s-c" 'forge-post-submit)
  (forge-topic-mode-map
   "a" 'forge-edit-topic-assignees
   "b" 'forge-edit-topic-body
   "d" 'forge-delete-comment
   "l" 'forge-edit-topic-labels
   "m" 'forge-edit-topic-milestone
   "x" 'forge-edit-topic-state
   "t" 'forge-edit-topic-title
   "e" 'forge-edit-post
   "p" 'forge-create-post
   "r" 'forge-create-post)
  (magit-status-mode-map
   "s-x" 'forge-remove-topic-locally))
#+end_src

** orgit-forge
:PROPERTIES:
:ID:       8D2CFDBF-4DD1-412C-A9F0-0D9393156A11
:END:

/[[https://github.com/magit/orgit-forge][orgit-forge]] supports ~org-mode~ links to ~forge~ buffers./

#+begin_src emacs-lisp
(use-package orgit-forge
  :after org forge
  :demand t)
#+end_src

** forge-search
:PROPERTIES:
:ID:       1E83FDA2-3529-4189-8F5D-6B3388A45AE4
:END:

/[[https://github.com/eatse21/forge-search.el/blob/master/forge-search.el][forge-search]] supports searching through issues and pull requests within ~forge~./

#+begin_src emacs-lisp
(use-package forge-search
  :elpaca (forge-search
           :host github
           :repo "eatse21/forge-search.el")
  :after forge
  :demand t
  :general
  ((forge-topic-mode-map
    forge-topic-list-mode-map
    forge-issue-list-mode-map
    forge-pullreq-list-mode-map
    forge-notifications-mode-map
    forge-repository-list-mode-map)
   "s" 'forge-search))
#+end_src

** gh-notify
:PROPERTIES:
:ID:       02EE3FAE-133C-479E-B7C7-9B2BB2160DCA
:END:

/[[https://github.com/anticomputer/gh-notify][gh-notify]] is a veneer for the Magit/Forge GitHub porcelain./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-package gh-notify
  :elpaca (gh-notify
           :host github
           :repo "benthamite/gh-notify"
           :depth nil)
  :after forge
  :demand t
  :config
  ;; unset bindings for all the keys that were bound to self-insert-command in
  ;; `gh-notify-mode-map'
  (let ((char-table (cl-second gh-notify-mode-map)))
    (map-char-table (lambda (key def)
                      (when (eq def 'gh-notify--self-insert-command)
                        (set-char-table-range char-table key nil)))
                    char-table))
  :general
  (gh-notify-mode-map
   "g" 'gh-notify-forge-refresh
   "Q" 'files-extras-kill-this-buffer))
#+end_src

** gh-notify-extras
:PROPERTIES:
:ID:       C0B10485-4BA9-4370-8D60-2B96A138FC3F
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-personal-package gh-notify-extras
  :after gh-notify
  :demand t
  :general
  (gh-notify-mode-map
   "RET" 'gh-notify-extras-visit-notification
   "G" 'gh-notify-extras-full-refresh
   "x" 'gh-notify-extras-browse-externally
   "." 'gh-notify-extras-visit-next-notification))
#+end_src

** forge-extras
:PROPERTIES:
:ID:       B74712E7-2A8C-4D17-8FD4-C854C88D3D72
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :forge)
(use-personal-package forge-extras
  :after forge orgit-forge gh-notify
  :demand t
  :config
  (advice-add 'orgit-store-link :override #'forge-extras-orgit-store-link))
#+end_src

** git-auto-commit-mode
:PROPERTIES:
:ID:       FCB4DDAC-CD47-48CE-BA0F-96C0574C458A
:END:

/[[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]] allows for committing and pushing automatically after each save./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :git-auto-commit-mode)
(use-package git-auto-commit-mode
  :config
  (setq-default gac-automatically-push-p nil)
  (setq-default gac-debounce-interval 30)
  (setq-default gac-silent-message-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+end_src

* display
:PROPERTIES:
:ID:       DE6D2307-9EBD-4E0F-B873-003C9813CA27
:END:
:LOGBOOK:
CLOCK: [2022-07-05 Tue 10:10]--[2022-07-05 Tue 10:17] =>  0:07
CLOCK: [2021-05-25 Tue 18:26]--[2021-05-25 Tue 18:31] =>  0:05
CLOCK: [2021-05-04 Tue 19:02]--[2021-05-04 Tue 19:09] =>  0:07
CLOCK: [2021-04-03 Sat 16:26]--[2021-04-03 Sat 17:04] =>  0:38
CLOCK: [2021-03-28 Sun 19:21]--[2021-03-28 Sun 19:35] =>  0:14
:END:

#+begin_src emacs-lisp :results silent
(setq-default line-spacing 2)
#+end_src

** mixed-pitch
:PROPERTIES:
:ID:       A8E80A11-25A4-4034-8A86-F7F6ADFD46C7
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 19:52]--[2022-05-04 Wed 19:54] =>  0:02
CLOCK: [2021-11-18 Thu 21:52]--[2021-11-18 Thu 22:20] =>  0:28
:END:

/[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows mixing fixed-pitch and variable-pitch fonts./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mixed-pitch)
(use-package mixed-pitch
  :demand t
  :config
  (setq mixed-pitch-set-height t)

  (dolist (hook '(elfeed-show-mode-hook

                  eww-mode-hook
                  mu4e-view-mode-hook
                  outline-mode-hook))
    (add-hook hook #'mixed-pitch-mode)))
#+end_src

** fringe
:PROPERTIES:
:ID:       A0748A82-CE1C-4700-95E1-610B6CA7F8E0
:END:

#+begin_src emacs-lisp :results silent
(use-feature fringe
  :demand t
  :init
  (setq-default fringe-indicator-alist
                '((truncation nil nil)
                  (continuation nil nil)
                  (overlay-arrow . right-triangle)
                  (up . up-arrow)
                  (down . down-arrow)
                  (top top-left-angle top-right-angle)
                  (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
                  (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
                  (empty-line . empty-line)
                  (unknown . question-mark))))
#+end_src

** org-modern
:PROPERTIES:
:ID:       FB673B28-FB6D-48EE-97B8-1E9C5D9F32FD
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:25]--[2023-04-30 Sun 11:40] =>  0:15
:END:

/[[https://github.com/minad/org-modern][org-modern]] prettifies org mode./

#+begin_src emacs-lisp :results silent
(use-package org-modern
  :demand t
  :after org
  :config
  (setq org-modern-table nil) ; doesn’t work well with variable-pitch: github.com/minad/org-modern/issues/99
  (setq org-modern-statistics nil)
  (setq org-modern-star '("◉" "◉" "◉" "◉" "◉"))
  (setq org-modern-list '((42 . "○")
                          (43 . "○")
                          (45 . "○")))
  (global-org-modern-mode))
#+end_src

** org-modern-indent
:PROPERTIES:
:ID:       740E3E7F-BF38-484E-BBD6-BF9AEC978612
:END:

/[[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]] extends org-modern stylistic improvements to contexts involving indentation./

#+begin_src emacs-lisp :tangle no
(use-package org-modern-indent
  :elpaca (org-modern-indent
             :host github
             :repo "jdtsmith/org-modern-indent")
  :after org-modern org-indent
  :demand t
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** org-tidy
:PROPERTIES:
:ID:       04545CB2-85AE-472E-BAB7-9013189598E7
:END:
:LOGBOOK:
CLOCK: [2023-11-05 Sun 13:34]--[2023-11-05 Sun 13:59] =>  0:25
:END:

/[[https://github.com/jxq0/org-tidy][org-tidy]] hides org-mode property drawers./

#+begin_src emacs-lisp
(use-package org-tidy
  :after org
  :demand t
  :config
  (setq org-tidy-properties-inline-symbol "")
  (setq org-tidy-protect-overlay nil) ; github.com/jxq0/org-tidy/issues/11
  (add-hook 'org-mode-hook #'org-tidy-mode))
#+end_src

** faces
:PROPERTIES:
:ID:       168A61B0-4580-443D-B04F-78F08EFA0458
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 10:45]--[2022-05-04 Wed 11:00] =>  0:15
CLOCK: [2021-11-17 Wed 19:48]--[2021-11-17 Wed 19:57] =>  0:09
CLOCK: [2021-11-17 Wed 11:27]--[2021-11-17 Wed 11:38] =>  0:11
CLOCK: [2021-11-16 Tue 16:27]--[2021-11-16 Tue 17:55] =>  1:28
CLOCK: [2021-08-19 Thu 19:18]--[2021-08-19 Thu 19:31] =>  0:13
CLOCK: [2021-03-28 Sun 21:05]--[2021-03-28 Sun 21:21] =>  0:16
CLOCK: [2021-02-27 Sat 18:27]--[2021-02-27 Sat 18:32] =>  0:05
CLOCK: [2021-02-04 Thu 20:54]--[2021-02-04 Thu 20:59] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature faces
  :demand t)
#+end_src

- [[https://out-of-cheese-error.netlify.app/spacemacs-config][An Annotated Spacemacs - For an org-mode workflow ·]]
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][- zzamboni.org | Beautifying Org Mode in Emacs]]

** faces-extras
:PROPERTIES:
:ID:       9478C42B-7864-4F53-BD17-5EBEC2A55DB8
:END:

#+begin_src emacs-lisp
(use-personal-package faces-extras
  :after faces
  :demand t
  :general
  ("C-h C-f" 'faces-extras-describe-face))
#+end_src

** face-remap
:PROPERTIES:
:ID:       3F96E2F2-7C68-4D61-8CB8-EFE4C7220FC8
:END:

#+begin_src emacs-lisp :results silent
(use-feature face-remap
  :demand t
  :general
  (eww-mode-map
   "+" 'text-scale-increase
   "-" 'text-scale-decrease))
#+end_src

** modus-themes
:PROPERTIES:
:ID:       95665A5E-A88C-4DCA-BDDD-84DC436A1E80
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 00:37]--[2023-02-25 Sat 01:15] =>  0:38
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 10:55] =>  0:13
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 11:25] =>  0:43
CLOCK: [2021-11-18 Thu 18:12]--[2021-11-18 Thu 18:28] =>  0:16
CLOCK: [2021-05-13 Thu 18:36]--[2021-05-13 Thu 18:37] =>  0:01
CLOCK: [2021-05-11 Tue 07:36]--[2021-05-11 Tue 07:54] =>  0:18
:END:

/[[https://protesilaos.com/emacs/modus-themes][modus-themes]] are a pair of accessible white/dark themes for Emacs./

#+begin_src emacs-lisp :results silent
(use-package modus-themes
  :elpaca (modus-themes
           :host sourcehut
           :repo "protesilaos/modus-themes")
  :after faces
  :demand t

  :init
  (setq modus-themes-org-blocks 'gray-background)

  :config
  (setq modus-themes-common-palette-overrides
        `((fringe unspecified) ; hide the fringe
          ;; additional customizations can be added here:

          ;; for the rest, use the predefined intense values
          ,@modus-themes-preset-overrides-intense))

  (add-hook 'modus-themes-after-load-theme-hook #'faces-extras-load-custom-faces)
  (add-hook 'modus-themes-after-load-theme-hook #'frame-extras-restore-window-divider)

  :general
  ("A-u" 'modus-themes-toggle))
#+end_src

** modus-themes-extras
:PROPERTIES:
:ID:       9EB47A74-CEFE-4929-B990-F88A57D57A1D
:END:

#+begin_src emacs-lisp
(use-personal-package modus-themes-extras
  :after modus-themes
  :demand t
  :config
  (tlon-init-override-code-if-available
   :modus-themes-load
   '((modus-themes-extras-load-theme-conditionally)))

  (add-hook 'modus-themes-after-load-theme-hook #'modus-themes-extras-highlight-parentheses)
  (add-hook 'modus-themes-after-load-theme-hook #'modus-themes-extras-set-faces))
#+end_src

** highlight-parentheses
:PROPERTIES:
:ID:       2B0F192C-2147-4CF6-AE69-73C1D85FEB77
:END:
:LOGBOOK:
CLOCK: [2022-05-07 Sat 19:00]--[2022-05-07 Sat 19:38] =>  0:38
:END:

/[[https://sr.ht/~tsdh/highlight-parentheses.el/][highlight-parentheses]] dynamically highlights the parentheses surrounding point based on nesting-level using configurable lists of colors, background colors, and other properties./

#+begin_src emacs-lisp :results silent
(use-package highlight-parentheses
  :demand t
  :config
  (setq highlight-parentheses-delay 0)
  (global-highlight-parentheses-mode)

  (add-hook 'minibuffer-setup-hook #'highlight-parentheses-minibuffer-setup))
#+end_src

** spacious-padding
:PROPERTIES:
:ID:       7CEDA166-BA43-49E6-99EB-0F24766398F6
:END:

/[[https://git.sr.ht/~protesilaos/spacious-padding][spacious-padding]] increases the spacing of frames and windows./

#+begin_src emacs-lisp
(use-package spacious-padding
  :demand t
  :config
  (setq spacious-padding-widths '())
  (spacious-padding-mode 1))
#+end_src

** emoji
:PROPERTIES:
:ID:       6B52C1E5-898C-48C6-AB4C-4BFDE8C5A0B5
:END:

#+begin_src emacs-lisp
(use-feature emoji
  :general
  ("H-e" 'emoji-insert))
#+end_src

** image
:PROPERTIES:
:ID:       E1A616FF-7D93-4AB4-AD44-44FB6550FD2E
:END:

#+begin_src emacs-lisp :results silent
(use-feature image
  :defer 10
  :config
  ;; Use imagemagick, if available.
  ;; djcbsoftware.nl/code/mu/mu4e/Viewing-images-inline.html
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  :general
  (image-mode-map
   "+" 'image-increase-size
   "-" 'image-decrease-size))
#+end_src

** paren
:PROPERTIES:
:ID:       E39A1AC5-7BF7-4995-B116-BB6323C7605F
:END:

#+begin_src emacs-lisp :results silent
(use-feature paren
  :demand t
  :config
  (setq show-paren-delay 0)

  (show-paren-mode))
#+end_src

** doom-modeline
:PROPERTIES:
:ID:       C3D90EBC-EB70-440E-9718-A2832FF9F077
:END:
:LOGBOOK:
CLOCK: [2023-04-28 Fri 13:05]--[2023-04-28 Fri 13:12] =>  0:07
CLOCK: [2023-03-27 Mon 21:53]--[2023-03-27 Mon 22:01] =>  0:08
CLOCK: [2021-06-02 Wed 21:16]--[2021-06-02 Wed 21:32] =>  0:16
CLOCK: [2021-06-02 Wed 18:04]--[2021-06-02 Wed 18:07] =>  0:03
CLOCK: [2021-05-23 Sun 12:38]--[2021-05-23 Sun 12:43] =>  0:05
CLOCK: [2021-04-03 Sat 17:09]--[2021-04-03 Sat 17:25] =>  0:16
:END:

/[[https://github.com/seagle0128/doom-modeline/][doom-modeline]] is a tidier and more aesthetically pleasing modeline./

#+begin_src emacs-lisp :results silent
(use-package doom-modeline
  :after ghub async
  :demand t
  :config
  (tlon-init-override-code-if-available
   :doom-modeline
   '((setq doom-modeline-time nil) ; we display time (and date) in the tab-bar
     (setq doom-modeline-buffer-encoding nil)
     (setq doom-modeline-irc t)
     (setq doom-modeline-irc-buffers t)
     (setq doom-modeline-buffer-file-name-style 'auto)
     (setq doom-modeline-enable-word-count t)

     (doom-modeline-def-modeline 'main
       '(bar workspace-name window-number modals matches follow remote-host buffer-position word-count parrot selection-info buffer-info)
       '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker time))

     (dolist (cons  '((display-time-mode-hook . doom-modeline-override-display-time-modeline)
                      (display-battery-mode-hook . doom-modeline-override-battery-modeline)
                      (doom-modeline-mode-hook . doom-modeline-override-display-time-modeline)
                      (doom-modeline-mode-hook . doom-modeline-override-battery-modeline)))
       (remove-hook (car cons) (cdr cons))))))
#+end_src

** doom-modeline-extras
:PROPERTIES:
:ID:       AA94A6D8-DD39-415C-9E34-5793F44B9FF9
:END:

#+begin_src emacs-lisp
(use-personal-package doom-modeline-extras
  :after doom-modeline
  :demand t
  :config
  (doom-modeline-mode))
#+end_src

** tab-bar
:PROPERTIES:
:ID:       F8B7C324-C5CF-4DBD-A527-92101BDA70AB
:END:
:LOGBOOK:
CLOCK: [2023-03-30 Thu 22:12]--[2023-03-30 Thu 22:20] =>  0:08
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :tab-bar)
(use-feature tab-bar
  :demand t
  :config
  (setq tab-bar-format '(tab-bar-align-right
                         tab-bar-format-global))
  (setq auto-resize-tab-bar nil)

  (setf mode-line-misc-info
        ;; When the tab-bar is active, don't show global-mode-string
        ;; in mode-line-misc-info, because we now show that in the
        ;; tab-bar using `tab-bar-format-align-right' and
        ;; `tab-bar-format-global'.
        (remove '(global-mode-string ("" global-mode-string))
                mode-line-misc-info))

  (tab-bar-mode))
#+end_src

** tab-bar-extras
:PROPERTIES:
:ID:       97CCF169-9F3B-40A4-BB81-220DDE6DB1DB
:END:
:LOGBOOK:
CLOCK: [2023-11-26 Sun 09:51]--[2023-11-26 Sun 10:39] =>  0:48
:END:

#+begin_src emacs-lisp
(use-personal-package tab-bar-extras
  :after tab-bar
  :demand t
  :config
  (setq tab-bar-extras-global-mode-string
        '(" "
          ;; date & time
          (:eval (propertize display-time-string 'face 'faces-extras-display-time))

          ;; Chemacs profile name
          " |  " chemacs-profile-name

          ;; battery information
          " | " fancy-battery-mode-line

          ;; telega notifications
          (when (featurep 'telega)
            (:eval (when (and
                          (telega-server-live-p)
                          (> (plist-get telega--unread-message-count :unread_count) 0))
                     (concat " | " telega-mode-line-string))))

          ;; github notifications
          (when (featurep 'doom-modeline)
            (:eval (when (> doom-modeline--github-notification-number 0)
                     (concat
                      " | "
                      (doom-modeline-icon 'octicon "nf-oct-mark_github" "🔔" "&"
                                          :face 'doom-modeline-notification)
                      (doom-modeline-vspc)
                      (propertize
                       (cond
                        ((> doom-modeline--github-notification-number 99) "99+")
                        (t (number-to-string doom-modeline--github-notification-number)))
                       'face '(:inherit
                               (doom-modeline-unread-number doom-modeline-notification)))))))
          " | "

          ;; pomodoro timer
          (when (featurep 'org-pomodoro)
            (:eval (unless (memq 'org-pomodoro-mode-line global-mode-string)
                     (setq global-mode-string (append global-mode-string
                                                      '(org-pomodoro-mode-line))))))
                                                      ))

  (setq global-mode-string tab-bar-extras-global-mode-string)
  (add-hook 'modus-themes-after-load-theme-hook #'tab-bar-extras-reset)

  ;; (run-with-idle-timer 300 t #'tab-bar-extras-reset-unless-clock)
  )
#+end_src

** fancy-battery
:PROPERTIES:
:ID:       DDFE34BA-7C23-459E-B4E2-2957D2535700
:END:

/[[https://github.com/emacsorphanage/fancy-battery][fancy-battery]] displays battery information in the modeline./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :tab-bar)
(use-package fancy-battery
  :defer 10
  :config
  (setq fancy-battery-show-percentage t)

  (fancy-battery-mode))
#+end_src

** all-the-icons
:PROPERTIES:
:ID:       46EB8CD9-E498-4F80-AC02-A116CFA58799
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:13]--[2022-07-17 Sun 11:21] =>  0:08
CLOCK: [2021-05-20 Thu 18:21]--[2021-05-20 Thu 18:39] =>  0:18
CLOCK: [2021-05-06 Thu 06:01]--[2021-05-06 Thu 06:22] =>  0:21
:END:

/[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] collects various icon fonts and propertizes them./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons
  :demand t)
#+end_src

** all-the-icons-completion
:PROPERTIES:
:ID:       A0DAA757-1CC9-460B-9F46-78A5145E7E61
:END:

/[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] adds icons to completion candidates./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-completion
  :demand t
  :after all-the-icons marginalia vertico
  :config
  (all-the-icons-completion-mode)

  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** nerd-icons
:PROPERTIES:
:ID:       0C470436-3327-4B81-89DA-005449893FF4
:END:

/[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] is a library for [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs./

#+begin_src emacs-lisp
(use-package nerd-icons
  :demand t
  :config
  (setq nerd-icons-font-family faces-extras-fixed-pitch-font))
#+end_src

** menu-bar
:PROPERTIES:
:ID:       08F1FCC3-7287-43B6-B455-C2D4377848E7
:END:

#+begin_src emacs-lisp
(use-feature menu-bar
  :demand t
  :config
  (menu-bar-mode -1))
#+end_src

** tool-bar
:PROPERTIES:
:ID:       EBE7677A-4C70-4312-816A-E9F8E5999078
:END:

#+begin_src emacs-lisp
(use-feature tool-bar
  :demand t
  :config
  (tool-bar-mode -1))
#+end_src

** scroll-bar
:PROPERTIES:
:ID:       0AE186DB-0FC3-4B1B-B38E-7597B97A8DBA
:END:

#+begin_src emacs-lisp
(use-feature scroll-bar
  :demand t
  :config
  (scroll-bar-mode -1))
#+end_src

** delsel
:PROPERTIES:
:ID:       6473F2BF-059F-464B-859E-B8DA91B81DE2
:END:

#+begin_src emacs-lisp :results silent
(use-feature delsel
  :demand t
  :config
  (delete-selection-mode))
#+end_src

** hl-line
:PROPERTIES:
:ID:       EBCFE2FC-27B4-4C30-9D2A-A841B34271F7
:END:

:PROPERTIES:
:ID:       2793C213-5A36-4DAB-9217-DA1BBE257E09
:END:
#+begin_src emacs-lisp :results silent
(use-feature hl-line
  :demand t
  :config
  (global-hl-line-mode)

  (dolist (hook '(markdown-mode-hook)) ; add other modes as needed
    (add-hook hook
              (lambda ()
                "Disable `hl-line-mode'."
                (set (make-local-variable 'global-hl-line-mode) nil)))))
#+end_src

** lin
:PROPERTIES:
:ID:       FA8149A2-9984-4C39-AA81-120317615E86
:END:
:LOGBOOK:
CLOCK: [2022-09-12 Mon 16:21]--[2022-09-12 Mon 16:30] =>  0:09
:END:

/[[https://protesilaos.com/codelog/2022-09-08-lin-1-0-0/][lin]] is a stylistic enhancement for Emacs’ built-in ~hl-line-mode~. It remaps the ~hl-line~ face (or equivalent) buffer-locally to a style optimal for major modes where line selection is the primary mode of interaction./

#+begin_src emacs-lisp :results silent
(use-package lin
  :demand t
  :config
  (setq lin-face 'lin-blue)
  (setq lin-mode-hooks
   '(dired-mode-hook
     elfeed-search-mode-hook
     git-rebase-mode-hook
     grep-mode-hook
     ibuffer-mode-hook
     ilist-mode-hook
     ledger-report-mode-hook
     log-view-mode-hook
     magit-log-mode-hook
     mu4e-headers-mode
     occur-mode-hook
     org-agenda-mode-hook
     pdf-outline-buffer-mode-hook
     proced-mode-hook
     tabulated-list-mode-hook))

  (lin-global-mode))
#+end_src

** hl-sentence
:PROPERTIES:
:ID:       1E12C3EF-BBB1-45CD-845D-3E1AEEB4EE30
:END:

/[[https://github.com/milkypostman/hl-sentence][hl-sentence]] highlights sentences rather than lines./

I use ~hl-line~ by default, but replace it with ~hl-sentence~ in modes (specifically, ~org-mode~ and ~markdown-mode~) where the sentence is the more natural syntactic unit. I use the same face set by ~lin~ so that there are no stylistic changes between highlighted sentences in these modes and highlighted lines in all the modes. See the above sections and the ~modus-themes-extras-set-faces~ function ~modus-themes-extras~.

#+begin_src emacs-lisp
(use-package hl-sentence
  :elpaca (hl-sentence
           :host github
           :repo "milkypostman/hl-sentence")
  :demand t
  :config
  (add-hook 'markdown-mode-hook #'hl-sentence-mode))
#+end_src

** jit-lock
:PROPERTIES:
:ID:       66598B06-4BB1-4E7C-AE36-7CE81E4CBF5A
:END:

#+begin_src emacs-lisp :results silent
(use-feature jit-lock
  :defer 10
  :config
  (setq jit-lock-chunk-size
        (* (window-max-chars-per-line) (window-body-height) 10))) ; emacs.stackexchange.com/a/72439/32089
#+end_src

* performance
:PROPERTIES:
:ID:       EF047473-EE10-41A2-852A-8CCD803469CD
:END:
:LOGBOOK:
CLOCK: [2021-10-15 Fri 12:34]--[2021-10-15 Fri 12:40] =>  0:06
CLOCK: [2021-03-20 Sat 22:11]--[2021-03-20 Sat 22:18] =>  0:07
CLOCK: [2021-02-28 Sun 11:18]--[2021-02-28 Sun 11:26] =>  0:08
CLOCK: [2021-02-28 Sun 10:30]--[2021-02-28 Sun 10:57] =>  0:27
CLOCK: [2021-02-26 Fri 18:00]--[2021-02-26 Fri 18:12] =>  0:12
CLOCK: [2021-02-26 Fri 09:51]--[2021-02-26 Fri 10:02] =>  0:11
CLOCK: [2021-02-25 Thu 15:32]--[2021-02-25 Thu 15:59] =>  0:27
CLOCK: [2021-02-21 Sun 10:01]--[2021-02-21 Sun 10:34] =>  0:33
CLOCK: [2021-02-12 Fri 08:47]--[2021-02-12 Fri 08:55] =>  0:08
CLOCK: [2021-02-07 Sun 12:15]--[2021-02-07 Sun 12:49] =>  0:34
CLOCK: [2021-08-06 Fri 15:28]--[2021-08-06 Fri 15:32] =>  0:04
CLOCK: [2021-07-13 Tue 20:44]--[2021-07-13 Tue 21:07] =>  0:23
CLOCK: [2021-07-13 Tue 19:51]--[2021-07-13 Tue 20:02] =>  0:11
CLOCK: [2021-06-15 Tue 21:28]--[2021-06-15 Tue 21:35] =>  0:07
CLOCK: [2021-06-08 Tue 20:45]--[2021-06-08 Tue 21:15] =>  0:30
CLOCK: [2021-03-25 Thu 20:06]--[2021-03-25 Thu 20:11] =>  0:05
CLOCK: [2021-03-25 Thu 15:25]--[2021-03-25 Thu 16:57] =>  1:32
CLOCK: [2021-03-25 Thu 08:56]--[2021-03-25 Thu 09:30] =>  0:34
CLOCK: [2021-03-21 Sun 09:13]--[2021-03-21 Sun 10:13] =>  1:00
CLOCK: [2021-03-17 Wed 09:19]--[2021-03-17 Wed 10:04] =>  0:45
CLOCK: [2021-03-04 Thu 09:50]--[2021-03-04 Thu 10:01] =>  0:11
CLOCK: [2021-02-08 Mon 11:45]--[2021-02-08 Mon 12:07] =>  0:22
CLOCK: [2021-10-03 Sun 18:50]--[2021-10-03 Sun 19:05] =>  0:15
CLOCK: [2021-04-05 Mon 21:50]--[2021-04-05 Mon 22:15] =>  0:25
:END:

** profiler
:PROPERTIES:
:ID:       82CFBDD5-12E8-46EC-ADF8-2769E59B5DD8
:END:
:LOGBOOK:
CLOCK: [2021-11-14 Sun 10:39]--[2021-11-14 Sun 10:56] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature profiler
  :demand t)
#+end_src

** profiler-extras
:PROPERTIES:
:ID:       21CE8D7E-377F-49AD-A864-D7926F462D4E
:END:

#+begin_src emacs-lisp
(use-personal-package profiler-extras
  :after profiler
  :demand t
  :general
  ("C-H-p" 'profiler-extras-profiler-toggle)
  (profiler-report-mode-map
   "<backtab>" 'profiler-extras-profiler-report-toggle-entry-global))
#+end_src

** so-long
:PROPERTIES:
:ID:       F738DFB0-AA9C-47B5-9D3B-DC22EF83D357
:END:

/[[https://savannah.nongnu.org/projects/so-long][so-long]] optimizes performance with minified code./

#+begin_src emacs-lisp :results silent
(use-feature so-long
  :demand t
  :config
  (setq so-long-threshold 500000)
  (global-so-long-mode))
#+end_src

** gcmh
:PROPERTIES:
:ID:       A8BBF291-D5CE-4FF2-B80C-B69570AD129D
:END:

/[[https://github.com/emacsmirror/gcmh][GCMH]] enforces a sneaky Garbage Collection strategy to minimize GC interference with user activity./

#+begin_src emacs-lisp :results silent
(use-package gcmh
  :demand t
  :config
  (gcmh-mode))
#+end_src

** misc.
:PROPERTIES:
:ID:       1EA302FA-D0A2-470C-82C2-47FCA4E04FAF
:END:

Partly borrowed from [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][Prot]].

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq bidi-display-reordering nil)
  (setq bidi-inhibit-bpa t)
  (setq inhibit-compacting-font-caches t)
  (setq redisplay-skip-fontification-on-input t)
  ;; emacs-lsp.github.io/lsp-mode/page/performance/
  (setq read-process-output-max (* 1024 1024)) ; 1mb.
  (setq-default bidi-paragraph-direction 'left-to-right))
#+end_src

* text movement
:PROPERTIES:
:ID:       1E8F4417-5D5F-4406-BB70-AA272F714EF2
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 09:27]--[2022-07-17 Sun 09:47] =>  0:20
CLOCK: [2022-07-11 Mon 13:34]--[2022-07-11 Mon 14:41] =>  1:07
CLOCK: [2022-07-11 Mon 12:37]--[2022-07-11 Mon 12:43] =>  0:06
CLOCK: [2021-05-22 Sat 17:22]--[2021-05-22 Sat 17:35] =>  0:13
:END:

** words
:PROPERTIES:
:ID:       3493B00B-C36E-406F-B681-F145FD1684B2
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
   ("A-C-s-p" 'forward-word
   "A-C-s-u" 'backward-word))
#+end_src

** lines
:PROPERTIES:
:ID:       73DC1518-87FD-48D7-9EE5-C863126905AD
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
  ("A-C-s-m" 'move-beginning-of-line
   "A-C-s-/" 'move-end-of-line)
  ((custom-mode-map ebib-index-mode-map ebib-entry-mode-map gh-notify-mode-map help-mode-map helpful-mode-map Info-mode-map Man-node-map org-lint--report-mode-map osa-chrome-mode-map mu4e-view-mode-map eww-mode-map elfeed-search-mode-map E elfeed-show-mode-map pass-mode-map elisp-refs-mode-map special-mode-map twittering-mode-map)
   "k" 'previous-line
   "l" 'next-line)
  ((eshell-hist-mode-map w3m-minor-mode-map)
   "<up>" 'previous-line
   "<down>" 'next-line))
#+end_src

** sentences
:PROPERTIES:
:ID:       9BCDE791-E716-4CFE-AED3-4E4E4874DDDE
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-i" 'backward-sentence
   "A-C-s-o" 'forward-sentence))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       E10CAF75-4C0C-4910-856F-39707E30A565
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-," 'backward-paragraph
   "A-C-s-." 'forward-paragraph))
#+end_src

** sexps
:PROPERTIES:
:ID:       DF16B7CC-E0CF-4062-A0C2-93CBE83F619C
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-e" 'backward-sexp
   "A-H-M-s-d" 'forward-sexp ; nonstandard binding because otherwise intercepted by OSX
   ))
#+end_src

** defuns
:PROPERTIES:
:ID:       868B32C0-52FC-4131-9191-DD43BEAABCEA
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-w" 'beginning-of-defun
   "A-C-s-s" 'end-of-defun))
#+end_src

** buffers
:PROPERTIES:
:ID:       E71DE3A8-E941-4864-8224-2326C22E3AEB
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
  ("A-C-s-SPC" 'beginning-of-buffer
   "A-C-s-<tab>" 'end-of-buffer))
#+end_src

* text manipulation
:PROPERTIES:
:ID:       179BB021-8B2A-4BF0-B3AA-43AF5A212D4B
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 12:53]--[2021-09-29 Wed 13:16] =>  0:23
CLOCK: [2021-09-29 Wed 12:22]--[2021-09-29 Wed 12:49] =>  0:27
CLOCK: [2021-07-13 Tue 08:44]--[2021-07-13 Tue 09:00] =>  0:16
CLOCK: [2021-06-15 Tue 21:35]--[2021-06-15 Tue 21:52] =>  0:17
CLOCK: [2021-06-08 Tue 21:15]--[2021-06-08 Tue 21:44] =>  0:29
CLOCK: [2021-06-01 Tue 12:34]--[2021-06-01 Tue 12:43] =>  0:09
CLOCK: [2021-05-29 Sat 21:04]--[2021-05-29 Sat 21:12] =>  0:08
CLOCK: [2021-05-29 Sat 19:52]--[2021-05-29 Sat 20:05] =>  0:13
CLOCK: [2021-04-03 Sat 18:55]--[2021-04-03 Sat 19:01] =>  0:06
CLOCK: [2021-04-03 Sat 18:54]--[2021-04-03 Sat 18:55] =>  0:01
CLOCK: [2021-03-22 Mon 20:56]--[2021-03-22 Mon 21:16] =>  0:20
:END:

** simple
:PROPERTIES:
:ID:       E2461097-8125-471E-A987-139F0D3EBEAA
:END:

#+begin_src emacs-lisp
(use-feature simple
  :demand t
  :config
  (setq kill-ring-max 500)
  (setq save-interprogram-paste-before-kill t) ; add system clipboard to kill ring

  :general
  ("A-H-M-d" 'transpose-chars
   "A-H-M-e" 'transpose-sentences
   "A-H-M-f" 'transpose-sexps
   "A-H-M-r" 'transpose-words
   "A-H-M-v" 'transpose-lines
   "C-<delete>" nil
   "C-H-M-=" 'overwrite-mode
   "C-H-M-a" 'backward-kill-sexp
   "C-H-M-d" 'delete-forward-char
   "C-H-M-e" 'kill-sentence
   "C-H-M-f" 'kill-sexp
   "C-H-M-f" 'zap-to-char
   "C-H-M-g" 'append-next-kill
   "C-H-M-q" 'backward-kill-word
   "C-H-M-r" 'kill-word
   "C-H-M-s" 'delete-backward-char
   "C-H-M-t" 'cycle-space
   "C-H-M-v" 'kill-line
   "C-H-M-w" 'backward-kill-sentence
   "C-H-M-z" 'crux-kill-line-backwards
   "C-M-<backspace>" nil
   "C-M-k" nil
   "H-v" 'yank
   "M-DEL" nil))
#+end_src

** simple-extras
:PROPERTIES:
:ID:       791A7EFE-DE33-4E5D-A99B-22CA63C31ACA
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:47]--[2022-07-15 Fri 13:48] =>  0:01
CLOCK: [2021-06-05 Sat 18:28]--[2021-06-05 Sat 19:09] =>  0:41
CLOCK: [2021-04-21 Wed 21:25]--[2021-04-21 Wed 21:39] =>  0:14
CLOCK: [2023-02-20 Mon 13:44]--[2023-02-20 Mon 13:48] =>  0:04
CLOCK: [2021-06-05 Sat 13:03]--[2021-06-05 Sat 13:07] =>  0:04
CLOCK: [2021-06-05 Sat 11:51]--[2021-06-05 Sat 11:59] =>  0:08
CLOCK: [2021-05-29 Sat 21:12]--[2021-05-29 Sat 21:28] =>  0:16
CLOCK: [2021-06-08 Tue 19:12]--[2021-06-08 Tue 19:53] =>  0:41
CLOCK: [2021-06-05 Sat 11:59]--[2021-06-05 Sat 12:40] =>  0:41
CLOCK: [2021-06-01 Tue 12:43]--[2021-06-01 Tue 13:10] =>  0:27
CLOCK: [2021-05-31 Mon 20:46]--[2021-05-31 Mon 20:53] =>  0:07
CLOCK: [2021-07-31 Sat 22:34]--[2021-07-31 Sat 22:56] =>  0:22
CLOCK: [2021-05-29 Sat 21:28]--[2021-05-29 Sat 22:17] =>  0:49
CLOCK: [2023-02-20 Mon 13:48]--[2023-02-20 Mon 13:52] =>  0:04
CLOCK: [2022-06-21 Tue 15:31]--[2022-06-21 Tue 15:35] =>  0:04
CLOCK: [2021-06-05 Sat 13:14]--[2021-06-05 Sat 13:20] =>  0:06
CLOCK: [2021-05-31 Mon 20:53]--[2021-05-31 Mon 21:21] =>  0:28
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
CLOCK: [2021-05-30 Sun 11:16]--[2021-05-30 Sun 12:16] =>  1:00
CLOCK: [2021-05-29 Sat 19:02]--[2021-05-29 Sat 19:52] =>  0:50
:END:

#+begin_src emacs-lisp
(use-personal-package simple-extras
  :demand t
  :general
  ("A-C-H-a" 'simple-extras-copy-whole-sexp
   "A-C-H-f" 'simple-extras-delete-whole-sexp
   "A-C-H-M-S-s-a" 'simple-extras-backward-delete-sexp
   "A-C-H-M-S-s-a" 'simple-extras-backward-zap-delete-to-char
   "A-C-H-M-S-s-e" 'simple-extras-delete-sentence
   "A-C-H-M-S-s-f" 'simple-extras-delete-sexp
   "A-C-H-M-S-s-f" 'simple-extras-zap-delete-to-char
   "A-C-H-M-S-s-q" 'simple-extras-backward-delete-word
   "A-C-H-M-S-s-r" 'simple-extras-delete-word
   "A-C-H-M-S-s-v" 'simple-extras-delete-line
   "A-C-H-M-S-s-w" 'simple-extras-backward-delete-sentence
   "A-C-H-M-S-s-z" 'simple-extras-backward-delete-line
   "A-H-c" 'simple-extras-count-words-dwim
   "A-H-C-e" 'simple-extras-delete-whole-sentence
   "A-H-C-i" 'simple-extras-kill-whole-sentence
   "A-H-C-m" 'simple-extras-kill-whole-line
   "A-H-C-r" 'simple-extras-delete-whole-word
   "A-H-C-u" 'simple-extras-kill-whole-word
   "A-H-C-v" 'simple-extras-delete-whole-line
   "A-H-C-w" 'simple-extras-copy-whole-sentence
   "A-H-C-z" 'simple-extras-copy-whole-line
   "A-H-M-a" 'simple-extras-transpose-sexps-backward
   "A-H-M-q" 'simple-extras-transpose-words-backward
   "A-H-M-s" 'simple-extras-transpose-chars-backward
   "A-H-M-s-9" 'simple-extras-copy-whole-word ; `.-q'
   "A-H-M-w" 'simple-extras-transpose-sentences-backward
   "A-H-M-z" 'simple-extras-transpose-lines-backward
   "A-M-f" 'simple-extras-fill-or-unfill-paragraph
   "C-H-M-a" 'simple-extras-backward-zap-to-char
   "C-H-M-b" 'simple-extras-strip-thing-at-point
   "C-H-M-s-A-a" 'simple-extras-backward-copy-sexp
   "C-H-M-s-A-a" 'simple-extras-backward-zap-copy-to-char
   "C-H-M-s-A-e" 'simple-extras-copy-sentence
   "C-H-M-s-A-f" 'simple-extras-copy-sexp
   "C-H-M-s-A-f" 'simple-extras-zap-copy-to-char
   "C-H-M-s-A-q" 'simple-extras-backward-copy-word
   "C-H-M-s-A-r" 'simple-extras-copy-word
   "C-H-M-s-A-v" 'simple-extras-copy-line
   "C-H-M-s-A-w" 'simple-extras-backward-copy-sentence
   "C-H-M-s-A-z" 'simple-extras-backward-copy-line
   "H-A-v" 'simple-extras-yank-and-pop
   "H-c" 'simple-extras-smart-copy-region
   "H-M"  'simple-extras-exchange-point-and-mark
   "H-X" 'simple-extras-smart-delete-region
   "H-x" 'simple-extras-smart-kill-region
   "M-A-i" 'simple-extras-visual-line-mode-enhanced
   "M-i" 'simple-extras-indent-dwim
   "M-v" 'simple-extras-visible-mode-enhanced))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       2B3DDC12-D660-47EF-BA22-8B1419A5F5D2
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 13:07]--[2021-06-05 Sat 13:10] =>  0:03
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq sentence-end-double-space nil)

  :general
  ("M-k" nil)
  ((text-mode-map org-mode-map outline-mode-map telega-chat-mode-map)
   "C-H-M-c" 'kill-paragraph
   "C-H-M-x" 'backward-kill-paragraph
   "A-C-H-M-S-s-c" 'simple-extras-delete-paragraph
   "A-C-H-M-S-s-x" 'simple-extras-backward-delete-paragraph
   "C-H-M-s-A-c" 'simple-extras-copy-paragraph
   "C-H-M-s-A-x" 'simple-extras-backward-copy-paragraph
   "A-H-C-c" 'simple-extras-delete-whole-paragraph
   "A-H-C-x" 'simple-extras-copy-whole-paragraph
   "A-H-C-," 'simple-extras-kill-whole-paragraph
   "A-H-M-c" 'transpose-paragraphs
   "A-H-M-x" 'simple-extras-transpose-paragraphs-backward))
#+end_src

** headings
:PROPERTIES:
:ID:       77FA2148-0D0D-459B-8F5F-D63B2E8BEB28
:END:
:LOGBOOK:
CLOCK: [2021-07-16 Fri 09:44]--[2021-07-16 Fri 09:45] =>  0:01
CLOCK: [2021-06-11 Fri 18:27]--[2021-06-11 Fri 18:33] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(use-feature org
  :after org
  :general
  (org-mode-map
   "C-H-M-s-z" 'org-shiftleft
   "C-H-M-s-x" 'org-shiftup
   "C-H-M-s-c" 'org-shiftdown
   "C-H-M-s-v" 'org-shiftright
   "C-H-M-s-a" 'org-metaleft
   "C-H-M-s-s" 'org-metaup
   "C-H-M-s-d" 'org-metadown
   "C-H-M-s-f" 'org-metaright
   "C-H-M-s-q" 'org-shiftmetaleft
   "C-H-M-s-w" 'org-shiftmetaup
   "C-H-M-s-e" 'org-shiftmetadown
   "C-H-M-s-r" 'org-shiftmetaright)
  ((outline-mode-map outline-minor-mode-map)
   "C-H-M-s-a" 'outline-extras-promote-heading
   "C-H-M-s-s" 'outline-move-subtree-up
   "C-H-M-s-d" 'outline-move-subtree-down
   "C-H-M-s-f" 'outline-extras-demote-heading
   "C-H-M-s-q" 'outline-promote
   "C-H-M-s-r" 'outline-demote))
#+end_src

* editing
:PROPERTIES:
:ID:       D06BE38F-DFC1-47DC-8F2C-FE2F1A437227
:END:

** simple
:PROPERTIES:
:ID:       D3A1830F-6A23-4DD3-99D3-2E582B79EA35
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 08:57]--[2023-11-16 Thu 19:08] => 18683:11
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (setq shift-select-mode nil) ; Shift keys do not activate the mark momentarily.
  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  (setq eval-expression-print-level nil)
  (setq eval-expression-print-length nil)
  (setq print-level nil)
  (setq print-length nil)
  (setq truncate-partial-width-windows nil)
  (setq tab-always-indent 'complete)
  (setq-default fill-column 80)
  (column-number-mode)

  :general
  ("C-A-e" 'eval-expression
   "C-e" 'eval-last-sexp
   "H-m" 'set-mark-command
   "H-Z" 'undo-redo
   "M-o" 'downcase-dwim
   "M-q" 'save-buffers-kill-terminal
   "M-u" 'capitalize-dwim
   "M-U" 'upcase-dwim
   "M-w" 'count-words-region
   "H-z" 'undo-only))
#+end_src

** repeat
:PROPERTIES:
:ID:       000730A4-2F70-4842-BD3E-2B843875D6EB
:END:

#+begin_src emacs-lisp :results silent
(use-feature repeat
  :demand t
  :general
  ("M-r" 'repeat
   "A-M-r" 'repeat-complex-command))
#+end_src

** view
:PROPERTIES:
:ID:       796E696E-E797-4EDF-B4AC-2436507A1EFC
:END:

#+begin_src emacs-lisp :results silent
(use-feature view
  :demand t
  :general
  ("M-A-v" 'view-mode))
#+end_src

** sort
:PROPERTIES:
:ID:       64011AE8-B6DF-413B-A8CD-EF4E133272BD
:END:

#+begin_src emacs-lisp :results silent
(use-feature sort
  :demand t
  :config
  (setq sort-fold-case t)

  :general
  ("C-t" 'sort-lines))
#+end_src

** vundo
:PROPERTIES:
:ID:       616AD0A8-0098-4147-927E-E2A47B18A65E
:END:

/[[https://github.com/casouri/vundo][vundo]] displays the undo history as a tree./

#+begin_src emacs-lisp
(use-package vundo
  :demand t
  :config
  (setq undo-limit (* 100 1000 1000))

  :general
  (vundo-mode-map
   "j" 'vundo-backward
   ";" 'vundo-forward
   "k" 'vundo-previous
   "l" 'vundo-next))
#+end_src

** outline
:PROPERTIES:
:ID:       286464A9-EB12-4351-A980-D9D837BDEABB
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 11:33]--[2021-06-05 Sat 11:49] =>  0:16
CLOCK: [2021-05-31 Mon 21:21]--[2021-05-31 Mon 21:27] =>  0:06
CLOCK: [2021-04-02 Fri 16:48]--[2021-04-02 Fri 16:59] =>  0:11
CLOCK: [2021-03-28 Sun 08:40]--[2021-03-28 Sun 10:35] =>  1:55
CLOCK: [2021-03-27 Sat 18:01]--[2021-03-27 Sat 19:53] =>  1:52
CLOCK: [2021-06-06 Sun 13:00]--[2021-06-06 Sun 13:19] =>  0:19
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :outline)
(use-feature outline
  :demand t
  :config
  (add-hook 'prog-mode-hook #'outline-minor-mode)

  :general
  ((outline-mode-map outline-minor-mode-map)
   "TAB" 'outline-cycle
   "<backtab>" 'outline-cycle-buffer
   "A-C-s-r" 'outline-previous-heading
   "A-C-s-f" 'outline-next-heading))
#+end_src

** outline-extras
:PROPERTIES:
:ID:       8BC3FF58-62AD-43E9-87A0-B886F20B428A
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :outline)
(use-personal-package outline-extras
  :after outline
  :demand t)
#+end_src

** outli
:PROPERTIES:
:ID:       FEACA323-B5F2-4DBB-890C-41EA39E6794B
:END:
:LOGBOOK:
CLOCK: [2023-09-23 Sat 13:07]--[2023-09-23 Sat 13:36] =>  0:29
:END:

/[[https://github.com/jdtsmith/outli][outli]] is a simple comment-based outliner for Emacs./

#+begin_src emacs-lisp
(use-package outli
  :elpaca (outli
           :host github
           :repo "jdtsmith/outli")
  :after outline
  :defer 5
  :config
  (setq outli-speed-commands
        '(("Outline navigation")
          ("k" . outline-previous-visible-heading)
          ("." . outline-forward-same-level)
          ("," . outline-backward-same-level)
          ("l" . outline-next-visible-heading)
          ("m" . outline-up-heading)
          ("j" . consult-imenu)
          ("Outline structure editing")
          ("q" . outline-promote)
          ("a" . outline-extras-promote-heading)
          ("d" . outline-move-subtree-down)
          ("s" . outline-move-subtree-up)
          ("f" . outline-extras-demote-heading)
          ("r" . outline-demote)
          ("Outline visibility")
          ("<tab>" . outline-cycle)
          ("C" . outline-cycle-buffer)
          ("w" . outli-toggle-narrow-to-subtree)
          ("Regular editing")
          ("z" . undo-only)
          ("v" . yank)
          ("Other")
          ("?" . outli-speed-command-help)))
  (add-hook 'emacs-lisp-mode-hook 'outli-mode))
#+end_src
** unfill
:PROPERTIES:
:ID:       DF5137EA-79B3-4A5F-8D6C-7222CD8D4F4A
:END:

/[[https://github.com/purcell/unfill][unfill]] provides functions to do the reverse of ~fill-paragraph~ and ~fill-region~./

#+begin_src emacs-lisp
(use-package unfill)
#+end_src

** abbrev
:PROPERTIES:
:ID:       2D69896F-CF17-4D0C-BEFE-E7C473FB1C2B
:END:

#+begin_src emacs-lisp :results silent
(use-feature abbrev
  :demand t
  :config
  (setq save-abbrevs 'silently)
  (setq abbrev-file-name (file-name-concat paths-dir-abbrev "abbrev_defs"))
  ;; (setq abbrev-suggest t)
  ;; (setq abbrev-suggest-hint-threshold 0)
  (setq-default abbrev-mode t)
  ;; do not look up abbrevs with case folding; e.g. `EA' will not expand an `ea' abbrev
  (abbrev-table-put global-abbrev-table :case-fixed t)
  (abbrev-table-put text-mode-abbrev-table :case-fixed t))
#+end_src

*** TODO Make abbrevs local
:PROPERTIES:
:ID:       D54BEE93-6514-46A0-879F-9F93381CE41B
:END:
:LOGBOOK:
CLOCK: [2023-04-24 Mon 08:58]--[2023-04-24 Mon 09:20] =>  0:22
:END:
To remove an abbrev definition, give a negative argument to the abbrev definition command: C-u - C-x a g or C-u - C-x a l. The former removes a global definition, while the latter removes a mode-specific definition. M-x kill-all-abbrevs removes all abbrev definitions, both global and local.

*** TODO Set up Emacs abbrevs
:PROPERTIES:
:ID:       A0B65562-6C61-4212-98B5-4FE8FB60E78F
:END:
:LOGBOOK:
CLOCK: [2023-04-22 Sat 17:23]--[2023-04-22 Sat 17:57] =>  0:34
:END:

** yasnippet
:PROPERTIES:
:ID:       6405B8E7-6612-4D71-8C2C-A51F8808F4C6
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 12:10]--[2023-03-27 Mon 12:40] =>  0:30
CLOCK: [2022-10-01 Sat 13:23]--[2022-10-01 Sat 13:26] =>  0:03
CLOCK: [2021-11-11 Thu 14:05]--[2021-11-11 Thu 14:09] =>  0:04
CLOCK: [2021-10-28 Thu 19:00]--[2021-10-28 Thu 19:56] =>  0:56
CLOCK: [2021-10-13 Wed 21:01]--[2021-10-13 Wed 21:13] =>  0:12
CLOCK: [2021-10-02 Sat 14:55]--[2021-10-02 Sat 15:48] =>  0:53
CLOCK: [2021-06-01 Tue 17:08]--[2021-06-01 Tue 17:30] =>  0:22
CLOCK: [2021-03-16 Tue 17:07]--[2021-03-16 Tue 17:24] =>  0:17
CLOCK: [2021-08-14 Sat 10:36]--[2021-08-14 Sat 10:49] =>  0:13
CLOCK: [2021-07-29 Thu 19:15]--[2021-07-29 Thu 19:22] =>  0:07
CLOCK: [2021-07-26 Mon 20:38]--[2021-07-26 Mon 20:39] =>  0:01
CLOCK: [2021-07-24 Sat 10:00]--[2021-07-24 Sat 10:21] =>  0:21
CLOCK: [2021-06-25 Fri 15:35]--[2021-06-25 Fri 16:19] =>  0:44
CLOCK: [2021-06-23 Wed 21:05]--[2021-06-23 Wed 21:14] =>  0:09
CLOCK: [2021-05-05 Wed 20:55]--[2021-05-05 Wed 21:05] =>  0:10
CLOCK: [2021-04-05 Mon 15:35]--[2021-04-05 Mon 15:49] =>  0:14
CLOCK: [2021-04-04 Sun 21:36]--[2021-04-04 Sun 22:00] =>  0:24
CLOCK: [2021-04-04 Sun 20:52]--[2021-04-04 Sun 21:35] =>  0:43
CLOCK: [2021-03-20 Sat 12:15]--[2021-03-20 Sat 12:17] =>  0:02
CLOCK: [2021-03-07 Sun 11:00]--[2021-03-07 Sun 11:01] =>  0:01
CLOCK: [2021-02-04 Thu 21:02]--[2021-02-04 Thu 21:19] =>  0:17
:END:

/[[https://github.com/joaotavora/yasnippet][yasnippet]] is a template system for Emacs./

#+begin_src emacs-lisp :results silent
(use-package yasnippet
  :demand t
  :config
  (setq yas-snippet-dirs (list paths-dir-yasnippets
                               paths-dir-yasnippets-private
                               (file-name-concat elpaca-builds-directory "yasnippet-snippets/snippets/")))

  (setq yas-triggers-in-field t) ; allow stacked expansions

  (yas-global-mode)
  (yas-reload-all)

  (setq yas-new-snippet-default (concat "# -*- mode: snippet -*-\n# name: $1\n# key: $2\n# contributor: " user-full-name "\n# --\n$0"))

  (add-hook 'minibuffer-setup-hook #'yas-minor-mode)

  :general
  ("C-y" 'yas-new-snippet)
  (minibuffer-mode-map
   "TAB" 'yas-maybe-expand))
#+end_src

** yasnippet-snippets
:PROPERTIES:
:ID:       E3499A47-009A-4A52-9134-2067C79FFBC8
:END:

/[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] is a public repository of yasnippet snippets./

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :demand t)
#+end_src

** expand-region
:PROPERTIES:
:ID:       8C9AE82C-9B5D-44D7-8FEE-1738032AD3C0
:END:
:LOGBOOK:
CLOCK: [2022-10-03 Mon 19:53]--[2022-10-03 Mon 22:42] =>  2:49
CLOCK: [2021-06-03 Thu 15:47]--[2021-06-03 Thu 16:04] =>  0:17
:END:

/[[https://github.com/magnars/expand-region.el][expand-region]] incrementally selects regions by semantic units./

#+begin_src emacs-lisp :results silent
(use-package expand-region
  :general
   ("C-H-s-n" 'er/expand-region
   "C-H-s-h" 'er/contract-region))
#+end_src

** newcomment
:PROPERTIES:
:ID:       C079E18F-8A96-4A3E-8024-C0F9E29CD182
:END:

#+begin_src emacs-lisp
(use-feature newcomment
  :general
  ("M-/" 'comment-line))
#+end_src

** skeleton
:PROPERTIES:
:ID:       FCF33E87-02CA-4244-9220-D7E6CEE7F7EF
:END:

#+begin_src emacs-lisp
(use-feature skeleton
  :demand t
  :config
  (setq skeleton-pair t)

  :general
  ("[" 'skeleton-pair-insert-maybe
   "{" 'skeleton-pair-insert-maybe
   "(" 'skeleton-pair-insert-maybe
   "\"" 'skeleton-pair-insert-maybe)
  ((org-mode-map telega-chat-mode-map)
   "~" 'skeleton-pair-insert-maybe
   "*" 'skeleton-pair-insert-maybe)
  (markdown-mode-map
   "`" 'skeleton-pair-insert-maybe
   "*" 'skeleton-pair-insert-maybe))
#+end_src

** multiple-cursors
:PROPERTIES:
:ID:       E3F6EB63-D6C1-474C-9129-B6424852EEC8
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:17] =>  0:00
:END:

/[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] supports multiple cursors in Emacs./

#+begin_src emacs-lisp :results silent
(use-package multiple-cursors
  :general
  ("M-m" 'mc/mark-pop))
#+end_src

** crux
:PROPERTIES:
:ID:       B7CD0E70-E601-4EEC-B51F-82F94ECA32BA
:END:
:LOGBOOK:
CLOCK: [2022-06-08 Wed 17:31]--[2022-06-08 Wed 17:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:18] =>  0:01
:END:

/[[https://github.com/bbatsov/crux][crux]] is a "collection of ridiculously useful extensions"./

#+begin_src emacs-lisp :results silent
(use-package crux
  :general
  ("M-l" 'crux-smart-open-line
   "M-A-l" (lambda! (crux-smart-open-line t)) ; open line above
   "A-H-l" 'crux-duplicate-current-line-or-region))
#+end_src

** button
:PROPERTIES:
:ID:       38C9C0A7-5979-4656-879D-F71638FCF40D
:END:

#+begin_src emacs-lisp :results silent
(use-feature button
  :demand t
  :general
  ("A-C-M-s-j" 'backward-button
   "A-C-M-s-;" 'forward-button)
  (telega-chat-mode-map
   "M-RET" 'push-button))
#+end_src

** back-button
:PROPERTIES:
:ID:       59041577-18F8-4336-80FF-4CC8C7AA7814
:END:

/[[https://github.com/rolandwalker/back-button][back-button]] supports navigating the mark ring forward and backward./

#+begin_src emacs-lisp :results silent
(use-package back-button
  :config
  (back-button-mode 1)
  :general
  ("H-," 'back-button-local-backward
   "H-." 'back-button-local-forward
   "H-<" 'back-button-global-backward
   "H->" 'back-button-global-forward))
#+end_src

** goto-last-change
:PROPERTIES:
:ID:       DD6DA81B-89B8-4881-A901-200A8CAF1974
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:18]--[2021-06-25 Fri 21:19] =>  0:01
:END:

/[[https://github.com/camdez/goto-last-change.el][goto-last-change]] moves point through buffer-undo-list positions./

#+begin_src emacs-lisp :results silent
(use-package goto-last-change
  :general
  ("C-z" 'goto-last-change))
#+end_src

** goto-addr
:PROPERTIES:
:ID:       29DA9B62-C7A6-4B53-B49C-BE2C47D0F3AF
:END:

/goto-addr activate URLs and e-mail addresses in buffers./

#+begin_src emacs-lisp
(use-feature goto-addr
  :demand t
  :config
  (global-goto-address-mode))
#+end_src

* registers & bookmarks
:PROPERTIES:
:ID:       E40A01AD-2B18-4B98-83E9-5E78D1E7195F
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 16:15]--[2021-07-29 Thu 16:23] =>  0:08
CLOCK: [2021-04-05 Mon 15:34]--[2021-04-05 Mon 15:35] =>  0:01
:END:

** register
:PROPERTIES:
:ID:       893A2A5B-707A-4C9A-9E25-414DC663F2CD
:END:

:LOGBOOK:
CLOCK: [2021-07-30 Fri 21:35]--[2021-07-30 Fri 22:18] =>  0:43
CLOCK: [2021-07-30 Fri 21:16]--[2021-07-30 Fri 21:31] =>  0:15
:END:

#+begin_src emacs-lisp :results silent
(use-feature register
  :after savehist
  :demand t
  :config
  (push 'register-alist savehist-additional-variables)

  (defhydra hydra-register
    (:hint nil
           :color blue)
    "
_c_opy        |_n_umber      |p_o_int
_i_nsert      |incremen_t_   |_j_ump        |   _f_rame    | _l_ist
------------^^+------------^^+------------^^+  frame_s_et  + _v_iew       ||_q_uit||
_p_repend     |_r_ectangle   |        |   _w_indow   | _h_elm
_a_pend       |_k_macro      |                    "
    ;; text
    ("c" copy-to-register)
    ("i" insert-register)
    ("p" prepend-to-register)
    ("a" append-to-register)
    ;; number
    ("n" number-to-register)
    ("t" increment-register)
    ;; rectangle/kmacro
    ("r" copy-rectangle-to-register)
    ("k" kmacro-to-register)
    ;; position
    ("o" point-to-register)
    ("j" jump-to-register)
    ;; windows
    ("w" window-configuration-to-register)
    ("f" frame-configuration-to-register)
    ("s" frameset-to-register)
    ;; view
    ("v" view-register)
    ("l" list-registers)
    ("h" consult-register)
    ("q" nil))

  :general
  ("C-r" 'hydra-register/body))
#+end_src

** bookmarks
:PROPERTIES:
:ID:       943D5DC0-7F0E-449C-8D21-089E051F1027
:END:

#+begin_src emacs-lisp :results silent
(use-feature bookmark
  :demand t
  :config
  (setq bookmark-default-file paths-file-bookmarks) ; Set location of bookmarks file
  (setq bookmark-save-flag 1)) ; Save bookmarks after each entry
#+end_src

* files & buffers
:PROPERTIES:
:ID:       B29F4586-2B8D-41FE-82DE-FEDCD863C74B
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:05]--[2022-07-14 Thu 20:14] =>  0:09
CLOCK: [2022-07-09 Sat 20:43]--[2022-07-09 Sat 21:51] =>  1:08
CLOCK: [2022-06-12 Sun 13:10]--[2022-06-12 Sun 13:15] =>  0:05
CLOCK: [2022-06-10 Fri 21:15]--[2022-06-10 Fri 22:23] =>  1:08
CLOCK: [2022-05-15 Sun 10:34]--[2022-05-15 Sun 12:02] =>  1:28
CLOCK: [2022-05-15 Sun 10:25]--[2022-05-15 Sun 10:34] =>  0:09
CLOCK: [2022-05-05 Thu 23:03]--[2022-05-05 Thu 23:31] =>  0:28
CLOCK: [2021-12-03 Fri 19:50]--[2021-12-03 Fri 20:15] =>  0:25
CLOCK: [2021-11-19 Fri 20:55]--[2021-11-19 Fri 21:02] =>  0:07
CLOCK: [2021-10-20 Wed 20:49]--[2021-10-20 Wed 21:01] =>  0:12
CLOCK: [2021-09-26 Sun 21:50]--[2021-09-26 Sun 22:07] =>  0:17
CLOCK: [2021-09-26 Sun 19:31]--[2021-09-26 Sun 20:06] =>  0:35
CLOCK: [2021-09-18 Sat 19:01]--[2021-09-18 Sat 19:15] =>  0:14
CLOCK: [2021-08-17 Tue 09:05]--[2021-08-17 Tue 09:22] =>  0:17
CLOCK: [2021-07-25 Sun 12:58]--[2021-07-25 Sun 13:03] =>  0:05
CLOCK: [2021-06-09 Wed 21:29]--[2021-06-09 Wed 21:36] =>  0:07
CLOCK: [2021-06-10 Thu 19:20]--[2021-06-10 Thu 19:46] =>  0:26
CLOCK: [2021-05-27 Thu 07:31]--[2021-05-27 Thu 07:45] =>  0:14
CLOCK: [2021-05-21 Fri 18:03]--[2021-05-21 Fri 18:12] =>  0:09
CLOCK: [2021-05-20 Thu 18:17]--[2021-05-20 Thu 18:21] =>  0:04
CLOCK: [2021-04-07 Wed 16:18]--[2021-04-07 Wed 16:25] =>  0:07
CLOCK: [2021-04-05 Mon 09:14]--[2021-04-05 Mon 09:20] =>  0:06
CLOCK: [2021-04-03 Sat 10:07]--[2021-04-03 Sat 10:19] =>  0:12
CLOCK: [2021-04-02 Fri 11:08]--[2021-04-02 Fri 11:14] =>  0:06
CLOCK: [2021-04-02 Fri 10:10]--[2021-04-02 Fri 10:40] =>  0:30
CLOCK: [2021-04-02 Fri 09:48]--[2021-04-02 Fri 10:02] =>  0:14
CLOCK: [2021-03-30 Tue 09:02]--[2021-03-30 Tue 09:10] =>  0:08
CLOCK: [2021-03-23 Tue 18:00]--[2021-03-23 Tue 18:38] =>  0:38
CLOCK: [2021-03-22 Mon 21:49]--[2021-03-22 Mon 22:38] =>  0:49
CLOCK: [2021-04-09 Fri 11:49]--[2021-04-09 Fri 11:49] =>  0:00
:END:

** files
:PROPERTIES:
:ID:       A7E824CC-5E71-4B12-A99B-D4C09CE164FF
:END:
:LOGBOOK:
CLOCK: [2023-04-12 Wed 12:43]--[2023-04-12 Wed 12:47] =>  0:04
CLOCK: [2023-02-22 Wed 21:58]--[2023-02-22 Wed 23:59] =>  2:01
CLOCK: [2022-08-19 Fri 13:45]--[2022-08-19 Fri 13:47] =>  0:02
CLOCK: [2021-07-24 Sat 21:09]--[2021-07-24 Sat 21:34] =>  0:25
CLOCK: [2021-07-24 Sat 20:41]--[2021-07-24 Sat 20:46] =>  0:05
CLOCK: [2021-07-01 Thu 20:45]--[2021-07-01 Thu 20:55] =>  0:10
CLOCK: [2021-02-07 Sun 13:37]--[2021-02-07 Sun 13:54] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature files
  :after savehist
  :demand t
  :config
  (setq confirm-kill-processes nil) ; do not prompt to kill running processes when quitting Emacs
  (setq delete-by-moving-to-trash t)
  (setq trash-directory (file-name-concat "~" ".Trash")) ; fallback for `move-file-to-trash'
  (setq find-file-visit-truename t); emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  (setq kill-buffer-query-functions nil)
  (setq create-lockfiles nil) ; lockfiles are indexed by `org-roam', which causes problems with `org-agenda'
  (setq large-file-warning-threshold (* 200 1000 1000))
  (setq enable-local-variables :all)
  (setq insert-directory-program "/opt/homebrew/bin/gls") ; use coreutils to avoid 'listing directory failed' error
  (setq auto-save-no-message t)
  (setq delete-old-versions t)
  (setq make-backup-files nil)
  (setq version-control 'never)

  (advice-add 'recover-session
              :after (lambda ()
                       "Disable `dired-hide-details-mode' to show dates in `recover-session'."
                       (dired-hide-details-mode -1)))

  (push 'file-name-history savehist-additional-variables)

  (add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))

  :general
  ("M--" 'not-modified
   "H-a" 'mark-whole-buffer
   "H-s" 'save-buffer
   "C-b" 'clone-indirect-buffer-other-window
   "H-C-g" 'abort-recursive-edit
   "H-C-S-g" 'top-level
   "H-C-A-g" 'keyboard-escape-quit) ; ESC ESC ESC
  ((ebib-entry-mode-map ebib-index-mode-map messages-buffer-mode-map telega-root-mode-map)
   "H-q" 'bury-buffer)
  (gh-notify-mode-map
   "q" 'bury-buffer)
  (pdf-view-mode-map
   "s" 'save-buffer))
#+end_src

** files-extras
:PROPERTIES:
:ID:       DA1D9D59-0EE4-439E-BCC9-5A7C316794A2
:END:

#+begin_src emacs-lisp
(use-personal-package files-extras
  :demand t
  :general
  ("M-;" 'files-extras-copy-current-path
   "M-b" 'files-extras-save-and-revert-buffer
   "M-e" 'files-extras-eval-region-or-buffer
   "H-q" 'files-extras-kill-this-buffer
   "A-H-M-s-q" 'files-extras-kill-this-buffer-switch-to-other-window
   "A-H-q" 'files-extras-kill-other-buffer
   "H-n" 'files-extras-new-empty-buffer
   "H-N" 'files-extras-new-buffer-in-current-mode
   "H-S" 'files-extras-save-all-buffers
   "A-H-M-s-SPC" 'files-extras-switch-to-alternate-buffer
   "A-H-v" 'files-extras-internet-archive-dwim)
  ((dired-mode-map pdf-view-mode-map)
   "s-o" 'files-extras-ocr-pdf)
  ((ebib-entry-mode-map ebib-index-mode-map messages-buffer-mode-map telega-root-mode-map)
   "q" 'files-extras-bury-buffer-switch-to-other-window)
  (ebib-entry-mode-map
   "v" 'files-extras-internet-archive-dwim)
  ((apropos-mode-map calendar-mode-map chatgpt-mode-map completion-list-mode-map dired-mode-map Info-mode-map finder-mode-map ledger-reconcile-mode-map mu4e-headers-mode-map pass-mode-map slack-message-buffer-mode-map slack-thread-message-buffer-mode-map special-mode-map telega-msg-button-map tetris-mode-map view-mode-map w3m-mode-map)
   "q" 'files-extras-kill-this-buffer)
  ;; We typically enter these modes to lookup some information and
  ;; then return to the previous buffer, so we set `q' to switch to
  ;; the other window, and reserve `Q' for the normal behavior
  ((help-mode-map helpful-mode-map gh-notify-mode-map  osx-dictionary-mode-map)
   "Q" 'files-extras-kill-this-buffer
   "q" 'files-extras-kill-this-buffer-switch-to-other-window)
  (helpful-mode-map
   "w" 'file-extras-copy-as-kill-dwim)
  ((gfm-mode-map markdown-mode-map)
   "s-g" 'file-extras-grammarly-open-in-external-editor)
  ((telega-chat-mode-map)
   "s-q" 'files-extras-kill-this-buffer))
#+end_src

** f
:PROPERTIES:
:ID:       4FD6758A-4021-4B05-BD36-BB09C2063C93
:END:

/[[https://github.com/rejeep/f.el][f]] is a modern API for working with files and directories in Emacs./

#+begin_src emacs-lisp :results silent
(use-package f
  :demand t)
#+end_src

** locate
:PROPERTIES:
:ID:       A0784673-AFD3-4111-AF83-C018CB12C897
:END:

#+begin_src emacs-lisp :results silent
(use-feature locate
  :demand t
  :config
  (setq locate-command "mdfind")) ; use the OSX Spotlight backend
#+end_src

** autorevert
:PROPERTIES:
:ID:       B4DE3D43-3085-4FA5-9DA4-1148CF49400C
:END:

#+begin_src emacs-lisp :results silent
(use-feature autorevert
  :demand t
  :config
  (setq auto-revert-use-notify nil) ; reddit.com/r/emacs/comments/mq2znn/comment/gugo0n4/
  (global-auto-revert-mode 1))
#+end_src

** dired
:PROPERTIES:
:ID:       617F5323-6518-4751-948B-3E8032D93130
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:17]--[2022-07-14 Thu 20:31] =>  0:14
CLOCK: [2022-07-03 Sun 21:36]--[2022-07-03 Sun 21:40] =>  0:04
CLOCK: [2022-05-02 Mon 21:26]--[2022-05-02 Mon 21:36] =>  0:10
CLOCK: [2022-05-02 Mon 10:55]--[2022-05-02 Mon 11:55] =>  1:00
CLOCK: [2021-12-19 Sun 09:42]--[2021-12-19 Sun 09:50] =>  0:08
CLOCK: [2021-12-13 Mon 12:51]--[2021-12-13 Mon 13:04] =>  0:13
CLOCK: [2021-12-10 Fri 17:35]--[2021-12-10 Fri 17:45] =>  0:10
CLOCK: [2021-12-04 Sat 16:34]--[2021-12-04 Sat 16:36] =>  0:02
CLOCK: [2021-11-23 Tue 22:42]--[2021-11-23 Tue 23:22] =>  0:40
CLOCK: [2021-10-03 Sun 19:19]--[2021-10-03 Sun 19:50] =>  0:31
CLOCK: [2021-09-28 Tue 14:37]--[2021-09-28 Tue 14:55] =>  0:18
CLOCK: [2021-05-11 Tue 18:03]--[2021-05-11 Tue 18:16] =>  0:13
CLOCK: [2021-03-28 Sun 14:34]--[2021-03-28 Sun 14:51] =>  0:17
CLOCK: [2021-07-23 Fri 16:13]--[2021-07-23 Fri 16:39] =>  0:26
CLOCK: [2021-07-23 Fri 12:49]--[2021-07-23 Fri 14:00] =>  1:11
CLOCK: [2021-07-22 Thu 21:10]--[2021-07-22 Thu 21:31] =>  0:21
CLOCK: [2021-07-08 Thu 14:38]--[2021-07-08 Thu 14:50] =>  0:12
CLOCK: [2021-06-09 Wed 20:51]--[2021-06-09 Wed 21:29] =>  0:38
CLOCK: [2021-05-10 Mon 17:55]--[2021-05-10 Mon 18:23] =>  0:28
CLOCK: [2021-04-25 Sun 14:06]--[2021-04-25 Sun 14:13] =>  0:07
CLOCK: [2021-04-15 Thu 21:53]--[2021-04-15 Thu 22:00] =>  0:07
CLOCK: [2021-04-08 Thu 13:42]--[2021-04-08 Thu 13:51] =>  0:09
CLOCK: [2021-04-06 Tue 21:54]--[2021-04-06 Tue 22:03] =>  0:09
CLOCK: [2021-04-04 Sun 10:14]--[2021-04-04 Sun 10:43] =>  0:29
CLOCK: [2021-04-01 Thu 10:05]--[2021-04-01 Thu 10:41] =>  0:36
CLOCK: [2021-03-31 Wed 20:56]--[2021-03-31 Wed 21:01] =>  0:05
CLOCK: [2021-03-27 Sat 21:30]--[2021-03-27 Sat 21:33] =>  0:03
CLOCK: [2021-03-27 Sat 21:33]--[2021-03-27 Sat 21:50] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature dired
  :config
  (setq dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso")
  (setq dired-auto-revert-buffer t)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-no-confirm t) ; never ask for confirmation
  (setq dired-dwim-target t) ; if Dired buffer in other window, use that buffer's current directory as target
  (setq dired-vc-rename-file t)
  (setq dired-do-revert-buffer t)
  (setq dired-create-destination-dirs 'ask)
  (setq dired-guess-shell-alist-user '(("" "open")))
  (setq dired-deletion-confirmer (lambda (x) t))

  (put 'dired-find-alternate-file 'disabled nil) ; do not disable dired-find-alternate-file!


  (add-hook 'dired-mode-hook #'dired-hide-details-mode) ; hide details by default
  (add-hook 'dired-mode-hook (lambda () (visual-line-mode -1)))

  :general
  (dired-mode-map
   "<tab>" 'dired-extras-subtree-toggle
   ";" 'dired-do-rename
   "-" 'dired-hide-details-mode
   "." 'dired-find-alternate-file
   "'" 'dired-du-mode
   "C" 'dired-do-copy
   "C-s" 'dired-isearch-filenames
   "J" 'dired-jump-other-window
   "k" 'dired-previous-line
   "l" 'dired-next-line
   "r" 'dired-toggle-read-only
   "H-z" 'dired-undo
   "A-C-s-r" 'dired-prev-dirline
   "A-C-s-f" 'dired-next-dirline
   "A-C-s-," 'dired-prev-marked-file
   "A-C-s-." 'dired-next-marked-file)
  (pdf-annot-minor-mode-map
   "x" 'dired-jump))
#+end_src

** dired-aux
:PROPERTIES:
:ID:       F41AFC26-002A-4152-9FC7-E9AD92DF5BBA
:END:

#+begin_src emacs-lisp
(use-feature dired-aux
  :after dired
  :demand t
  :config
  (push '("\\.rar\\'" "" "unar") dired-compress-file-suffixes)) ; with `unar' installed, `Z' uncompresses `rar' files
#+end_src

** dired-extras
:PROPERTIES:
:ID:       DDF9A650-13A5-4C47-B2C5-6B376B75998D
:END:

#+begin_src emacs-lisp
(use-personal-package dired-extras
  :after dired
  :demand t
  :general
  (dired-mode-map
   "," 'dired-extras-up-directory-reuse
   "H-." 'dired-extras-dotfiles-toggle
   "c" 'dired-extras-copy-filename-as-kill-absolute
   "W" 'dired-extras-copy-filename-as-kill-sans-extension
   "z" 'dired-extras-mark-screenshots
   "s-d" 'dired-extras-do-delete-fast
   "s-r" 'dired-extras-copy-to-remote-docs-directory))
#+end_src

** dired-x
:PROPERTIES:
:ID:       43A42081-7B3A-460D-A47D-52EE95202050
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 22:53]--[2021-10-03 Sun 23:36] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature dired-x
  :demand t
  :after dired
  :config
  (setq dired-omit-verbose nil)    ; shut up
  (setq dired-omit-size-limit nil) ; always omit, regardless of directory size
  (setq dired-omit-files
        (concat dired-omit-files "\\|^.localized$\\|^\\.DS_Store$\\|^\\.pdf-view-restore\\|^Icon\\\015"))

  (add-hook 'dired-mode-hook #'dired-omit-mode)

  :general
  (dired-mode-map
   "–" 'dired-omit-mode))
#+end_src

** dired-async
:PROPERTIES:
:ID:       966B615F-69EF-428D-82E5-6E68B64D0FDD
:END:

#+begin_src emacs-lisp
(use-feature dired-async
  :after async dired
  :config
  (dired-async-mode))
#+end_src

** image-dired
:PROPERTIES:
:ID:       E07C1115-1881-4D5F-8B88-613DA4FD38A8
:END:

#+begin_src emacs-lisp :results silent
(use-feature image-dired
  :after dired
  :config
  (setq image-dired-main-image-directory "~/Pictures/")

  :general
  (image-dired-thumbnail-mode-map
   "k" 'image-dired-display-previous-thumbnail-original
   "l" 'image-dired-display-next-thumbnail-original)
  (dired-mode-map
   "I" 'dired-extras-image-dired-current-directory))
#+end_src

** all-the-icons-dired
:PROPERTIES:
:ID:       53778128-E0F3-4199-9D7D-2118904F39A9
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 10:49]--[2022-07-17 Sun 11:13] =>  0:24
:END:

/[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[id:46EB8CD9-E498-4F80-AC02-A116CFA58799][all-the-icons]]./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-dired
  :demand t
  :after all-the-icons dired
  :config
  (setq all-the-icons-dired-monochrome nil)

  (add-hook 'dired-mode-hook #'dired-extras-all-the-icons-activate))
#+end_src

** nerd-icons-dired
:PROPERTIES:
:ID:       C3F3F430-4DAE-4C77-907A-84B385CC3CCB
:END:

/[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] adds Dired support to nerd-icons./

[2023-05-23 Tue 11:50] Some of the fonts were truncated, so I'm disabling this package for the time being and will continue to use ~all-the-icons~.

#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :disabled
  :config
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))
#+end_src

** wdired
:PROPERTIES:
:ID:       B892CCBB-FB26-48A6-97BE-EF37CE8FB332
:END:

#+begin_src emacs-lisp :results silent
(use-feature wdired
  :demand t
  :config
  (setq wdired-allow-to-change-permissions t)

  :general
  (wdired-mode-map
   "s-c" 'wdired-finish-edit
   "<return>" 'wdired-finish-edit))
#+end_src

** gnus-dired
:PROPERTIES:
:ID:       8AD56019-FF0A-407F-B610-F9F2F4DE1B90
:END:

The code block below, based on [[https://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html][this]], enables ~mu4e~ file attachment directly from a Dired buffer.

#+begin_src emacs-lisp :results silent
(use-feature gnus-dired
  :demand t
  :after dired
  :config
  ;; enable `mu4e' attachments from `dired'
  ;; djcbsoftware.nl/code/mu/mu4e/Dired.html
  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook #'turn-on-gnus-dired-mode)

  :general
  (dired-mode-map
   "s-a" 'gnus-dired-attach))
#+end_src

** dired-hacks
:PROPERTIES:
:ID:       C3E2CA62-26C4-4681-81D8-4326BE474717
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 15:32]--[2021-12-12 Sun 15:57] =>  0:25
CLOCK: [2021-06-25 Fri 21:19]--[2021-06-25 Fri 21:24] =>  0:05
CLOCK: [2021-04-07 Wed 12:28]--[2021-04-07 Wed 12:35] =>  0:07
CLOCK: [2021-04-06 Tue 22:25]--[2021-04-06 Tue 22:35] =>  0:10
:END:

/[[https://github.com/Fuco1/dired-hacks][dired-hacks]] is a collection of useful dired additions./

#+begin_src emacs-lisp :results silent
(use-package dired-hacks
  :elpaca (dired-hacks :fetcher github :repo "Fuco1/dired-hacks")
  :after dired
  :defer 10

  :config
  (advice-add 'dired-subtree-toggle :after (lambda () (dired-omit-mode) (dired-omit-mode)))
  (advice-add 'dired-subtree-cycle :after (lambda () (dired-omit-mode) (dired-omit-mode)))

  :general
  (dired-mode-map
   "<tab>" 'dired-subtree-toggle
   "<backtab>" 'dired-subtree-cycle))
#+end_src

** dired-quick-sort
:PROPERTIES:
:ID:       9BF30679-50B1-4F78-BD6A-0DEF565D22A4
:END:
:LOGBOOK:
CLOCK: [2022-01-07 Fri 10:39]--[2022-01-07 Fri 10:45] =>  0:06
:END:

/[[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]] provides persistent quick sorting of Dired buffers in various ways./

#+begin_src emacs-lisp :results silent
(use-package dired-quick-sort
  :after dired
  ;; :config
  ;; (dired-quick-sort-setup)
  :general
  (dired-mode-map
   "T" 'hydra-dirs-quick-sort/body))
#+end_src

** peep-dired
:PROPERTIES:
:ID:       B0502885-D248-47E7-BE4F-54F597EBD390
:END:

/[[https://github.com/asok/peep-dired][peep-dired]] supports browsing file contents in other window while browsing directory in dired./

#+begin_src emacs-lisp
(use-package peep-dired
  :after dired
  :general
  (dired-mode-map
   "F" 'peep-dired))
#+end_src

** minibuffer
:PROPERTIES:
:ID:       40F49ECD-7225-4AD2-9E07-16C5A5857FFF
:END:

#+begin_src emacs-lisp :results silent
(use-feature minibuffer
  :demand t
  :config
  (setq enable-recursive-minibuffers t)
  (setq resize-mini-windows t)
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  :general
  ((minibuffer-mode-map)
   "M-n" nil
   "M-p" nil))
#+end_src

** ibuffer
:PROPERTIES:
:ID:       11E1F107-4D7A-40DE-AA8E-9D995A10A351
:END:

#+begin_src emacs-lisp :results silent
(use-feature ibuffer
  :demand t
  :general
  (ibuffer-mode-map
   "k" 'ibuffer-do-delete))
#+end_src

** executable
:PROPERTIES:
:ID:       0838A480-2BBF-4AAE-8DC0-FBED8D7E9B9E
:END:

#+begin_src emacs-lisp
(use-feature executable
  :demand t
  :config
  ;; masteringemacs.org/article/script-files-executable-automatically
  (add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p))
#+end_src

** uniquify
:PROPERTIES:
:ID:       295BE204-62D9-4003-AFB0-06F6D817AE4C
:END:

#+begin_src emacs-lisp :results silent
(use-feature uniquify
  :config
  (setq uniquify-buffer-name-style 'forward))
#+end_src

** reveal-in-osx-finder
:PROPERTIES:
:ID:       5BA0A794-59F0-471D-AD81-4C281095BF48
:END:

/[[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]] lets you open the file at point or the current file-visiting buffer in OS X Finder./

#+begin_src emacs-lisp :results silent
(use-package reveal-in-osx-finder
  :defer 10
  :general
  (dired-mode-map
   "/" 'reveal-in-osx-finder))
#+end_src

** tramp
:PROPERTIES:
:ID:       23FDB037-73C2-4AE1-A887-437C996F78D2
:END:
:LOGBOOK:
CLOCK: [2022-08-20 Sat 18:11]--[2022-08-20 Sat 18:32] =>  0:21
:END:

/[[https://www.gnu.org/software/tramp/][tramp]] is a remote file editing package for Emacs./

Most of the below is copied from Murilo Pereira's [[https://github.com/mpereira/.emacs.d#tramp][configuration]].

#+begin_src emacs-lisp :results silent
(use-feature tramp
  :config
  ;; Disable version control on tramp buffers to avoid freezes.
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))

  ;; Don't clean up recentf tramp buffers.
  (setq recentf-auto-cleanup 'never)

  ;; This is supposedly [[https://www.emacswiki.org/emacs/TrampMode][faster than the default]], `scp'.
  (setq tramp-default-method "sshx")

  ;; SSH controlmaster settings are set in =~/.ssh/config=.
  (setq tramp-use-ssh-controlmaster-options nil)

  ;; Store TRAMP auto-save files locally.
  (setq tramp-auto-save-directory paths-dir-emacs-var)

  ;; A more representative name for this file.
  (setq tramp-persistency-file-name (file-name-concat tramp-auto-save-directory "tramp-connection-history"))

  ;; Cache SSH passwords during the whole Emacs session.
  (setq password-cache-expiry nil)

  ;; emacs.stackexchange.com/a/37855/32089
  (setq remote-file-name-inhibit-cache nil)

  ;; Reuse SSH connections. Taken from the TRAMP FAQ.
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))

  ;; This will put in effect PATH changes in the remote ~/.profile.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  (advice-add 'projectile-project-root
              :around (lambda ()
                        "Ignore remote files."
                        (unless (file-remote-p default-directory 'no-identification)
                          (apply orig-fun args)))))
#+end_src

** pandoc-mode
:PROPERTIES:
:ID:       8EBA8303-EA43-4FB2-BB9D-1734F40DDB77
:END:

/[[https://github.com/joostkremers/pandoc-mode][pandoc-mode]] is a minor mode for interacting with Pandoc./

#+begin_src emacs-lisp :results silent
(use-package pandoc-mode
  :general
  ("A-p" 'pandoc-main-hydra/body))
#+end_src

*** TODO [#7] Make pandoc preserve emojis
:PROPERTIES:
:ID:       3C4F154F-6600-4DF0-826F-0EB031146BA2
:END:

** curl-to-elisp
:PROPERTIES:
:ID:       7B9D14E2-752E-4705-A438-78DA6663083A
:END:
/[[https://github.com/xuchunyang/curl-to-elisp][curl-to-elisp]] converts cURL command to Emacs Lisp code./

#+begin_src emacs-lisp :results silent
(use-package curl-to-elisp)
#+end_src

* windows & frames
:PROPERTIES:
:ID:       7E9A81E0-CAEB-4029-AD2C-B2416439FCDA
:END:
:LOGBOOK:
CLOCK: [2021-12-21 Tue 20:13]--[2021-12-21 Tue 20:20] =>  0:07
CLOCK: [2021-10-28 Thu 21:35]--[2021-10-28 Thu 21:52] =>  0:17
CLOCK: [2021-08-18 Wed 13:00]--[2021-08-18 Wed 13:04] =>  0:04
CLOCK: [2021-08-17 Tue 22:09]--[2021-08-18 Wed 00:24] =>  2:15
CLOCK: [2021-06-23 Wed 20:47]--[2021-06-23 Wed 20:55] =>  0:08
CLOCK: [2021-06-01 Tue 22:28]--[2021-06-01 Tue 22:45] =>  0:17
CLOCK: [2021-05-16 Sun 12:02]--[2021-05-16 Sun 12:12] =>  0:10
CLOCK: [2021-04-06 Tue 16:41]--[2021-04-06 Tue 16:45] =>  0:04
CLOCK: [2021-04-05 Mon 12:51]--[2021-04-05 Mon 13:17] =>  0:26
CLOCK: [2021-03-30 Tue 09:32]--[2021-03-30 Tue 09:36] =>  0:04
:END:

** window
:PROPERTIES:
:ID:       614546C0-75B2-4E44-9447-923DF5CF4AC3
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 15:06]--[2022-09-14 Wed 17:20] =>  2:14
CLOCK: [2022-09-14 Wed 13:25]--[2022-09-14 Wed 15:00] =>  1:35
CLOCK: [2022-09-14 Wed 12:00]--[2022-09-14 Wed 12:41] =>  0:41
CLOCK: [2022-09-08 Thu 15:47]--[2022-09-08 Thu 17:04] =>  1:17
CLOCK: [2022-09-02 Fri 18:13]--[2022-09-02 Fri 21:20] =>  3:07
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :window)
(use-feature window
  :demand t
  :after simple-extras

  :config
  (setq split-height-threshold nil)
  ;; move point to top of buffer if `scroll-down-command' invoked when screen can scroll no further
  (setq scroll-error-top-bottom t)
  (setq split-width-threshold 200)

  ;; we add `*ocr-pdf' buffer to list of buffers not to be displayed,
  ;; so that the process runs in the background`
  (push '("*ocr-pdf*" display-buffer-no-window) display-buffer-alist)

  ;; The following prevents Emacs from splitting windows indefinitely when the monitor config changes
  ;; stackoverflow.com/questions/23207958/how-to-prevent-emacs-dired-from-splitting-frame-into-more-than-two-windows
  (add-to-list 'display-buffer-alist `(,shell-command-buffer-name-async display-buffer-no-window))

  (tlon-init-override-code-if-available
   :window-split
   '((add-hook 'elpaca-after-init-hook #'window-extras-split-if-unsplit)))

  :general
  ("H-w" 'delete-window
   "A-C-s-y" 'scroll-down-command
   "A-C-s-h" 'scroll-up-command
   "A-C-s-g" 'scroll-other-window
   "A-C-s-t" 'scroll-other-window-down
   "A-C-s-x" (lambda! (scroll-down-line 4))
   "A-C-s-c" (lambda! (scroll-up-line 4))
   "A-C-s-v" (lambda! (scroll-down-line 16))
   "A-C-s-b" (lambda! (scroll-up-line 16)))
  ((elfeed-show-mode-map eww-mode-map helpful-mode-map mu4e-view-mode-map telega-msg-button-map)
   "y" 'scroll-down-command
   "h" 'scroll-up-command))
#+end_src

** window-extras
:PROPERTIES:
:ID:       E29EF401-C8A5-4B57-8CB4-C2C8B386F446
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :window)
(use-personal-package window-extras
  :after window
  :demand t
  :general
  ("C-H-0" 'window-extras-switch-to-last-window
   "A-C-H-0" 'window-extras-switch-to-minibuffer-window
   "C-w" 'window-extras-narrow-or-widen-dwim
   "M-–" 'window-extras-buffer-move-dwim ; `emacs-mac'
   "M--" 'window-extras-buffer-move-dwim ; `emacs-plus'
   "M-," 'window-extras-buffer-move-left
   "M-." 'window-extras-buffer-move-right
   "A-M--" 'window-extras-buffer-swap ; `emacs-mac'
   "A-M-–" 'window-extras-buffer-swap) ; `emacs-plus'
  (js-mode-map
   "M-," 'window-extras-buffer-move-left
   "M-." 'window-extras-buffer-move-right)
  (isearch-mode-map
   "C-w" 'window-extras-narrow-or-widen-dwim))
#+end_src

** frame
:PROPERTIES:
:ID:       3ADE4889-B4BE-4733-ABE3-BECCD4F9A73D
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :frame)
(use-feature frame
  :demand t
  :config
  (setq window-divider-default-right-width 1)
  (blink-cursor-mode)
  (window-divider-mode)

  :general
  ("H-M-<tab>" 'other-frame ; M-S-TAB
   "M-N" 'make-frame
   "M-W" 'delete-frame
   ;; this was throwing out an error in Leo’s config
   ;; "C-H-M-i" (lambda! (set-frame-parameter nil 'fullscreen 'maximized))
   ;; "C-H-M-o" (lambda!  (set-frame-parameter nil 'fullscreen nil))
   ))
#+end_src

** frame-extras
:PROPERTIES:
:ID:       488EF2B1-CCAC-4B91-A927-F89F71BCDAD3
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :frame)
(use-personal-package frame-extras
  :after frame
  :demand t
  :config
  (tlon-init-override-code-if-available
   :frame-extras-maximize-frame
   '((add-hook 'elpaca-after-init-hook #'frame-extras-maximize-frame)))
     (add-hook 'spacious-padding-mode-hook #'frame-extras-restore-window-divider))
#+end_src

** winum
:PROPERTIES:
:ID:       90677099-6D75-4BA3-B490-0C325A17A55F
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

/[[https://github.com/deb0ch/emacs-winum][winum-mode]] supports naviation of windows and frames using number./

#+begin_src emacs-lisp :results silent
(use-package winum
  :demand t
  :config
  (setq winum-scope 'frame-local)

  (winum-mode)
  :general
  ("C-," 'winum-select-window-1
   "C-." 'winum-select-window-2
   "C-/" 'winum-select-window-3
   "H-4" 'winum-select-window-4
   "H-5" 'winum-select-window-5
   "H-6" 'winum-select-window-6
   "H-7" 'winum-select-window-7
   "H-8" 'winum-select-window-8
   "H-9" 'winum-select-window-9
   "H-0" 'winum-select-window-10))
#+end_src

** winner
:PROPERTIES:
:ID:       598E0C53-2797-41B5-A53D-C229D4F69A76
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 18:45]--[2021-12-30 Thu 12:11] => 2105:26
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] is a global minor mode that records the changes in the window configuration (i.e., how the frames are partitioned into windows), so that you can undo them./

#+begin_src emacs-lisp :results silent
(use-feature winner
  :demand t
  :config
  (winner-mode)
  (remove-hook 'minibuffer-setup-hook 'winner-save-unconditionally)

  :general
  ("H-W" 'winner-undo))
#+end_src

** avy
:PROPERTIES:
:ID:       D83A1681-A3F0-4C70-9986-F01275320585
:END:
:LOGBOOK:
CLOCK: [2021-11-22 Mon 10:15]--[2021-11-22 Mon 10:38] =>  0:23
CLOCK: [2021-11-13 Sat 22:01]--[2021-11-13 Sat 22:47] =>  0:46
CLOCK: [2021-11-13 Sat 21:14]--[2021-11-13 Sat 21:51] =>  0:37
CLOCK: [2021-10-12 Tue 15:22]--[2021-10-12 Tue 16:06] =>  0:44
CLOCK: [2021-08-16 Mon 10:36]--[2021-08-16 Mon 10:58] =>  0:22
CLOCK: [2021-08-10 Tue 16:50]--[2021-08-10 Tue 18:15] =>  1:25
CLOCK: [2021-07-13 Tue 08:23]--[2021-07-13 Tue 08:44] =>  0:21
CLOCK: [2021-05-16 Sun 08:30]--[2021-05-16 Sun 08:55] =>  0:25
:END:

/[[https://github.com/abo-abo/avy][avy]] lets you jump to any visible text using a char-based decision tree./

#+begin_src emacs-lisp :results silent
(use-package avy
  :config
  (setq avy-case-fold-search nil)
  (setq avy-timeout-seconds 0.2)
  (setq avy-all-windows nil)
  (setq avy-keys '(97 115 100 102 106 107 108 13 32 113 119 101 114 117 105 111 112 122 120 99 118 109 44 46 47))
  (setf (alist-get ?r avy-dispatch-alist) 'avy-extras-action-mark-to-char)

  :general
  ("C-H-s-m" 'avy-goto-line-above
   "C-H-s-." 'avy-goto-line-below
   "C-H-s-k" 'avy-goto-word-1-above
   "C-H-s-l" 'avy-goto-word-1-below)
  (ebib-entry-mode-map
   "f" 'avy-goto-line))
#+end_src

*** TODO [#5] See if I can implement my idea of passing avy any Emacs command
:PROPERTIES:
:Effort:   1:30
:ID:       425A2281-B1D2-49FE-AE34-3C9F6C916FB1
:END:
:LOGBOOK:
CLOCK: [2021-11-29 Mon 23:24]--[2021-11-29 Mon 23:45] =>  0:21
CLOCK: [2021-11-25 Thu 19:05]--[2021-11-25 Thu 19:21] =>  0:16
:END:
https://karthinks.com/software/avy-can-do-anything/

Maybe the way to do this is by creating a ~pass-to-avy~ generic function, which itself allows the user to select a command via its key bindings and passes it the word selected via avy.

[2021-11-29 Mon 23:37] Should create commands to delete/copy/kill words/sentences/paragraphs/sexp/lines/region

** avy-extras
:PROPERTIES:
:ID:       E8AFD4F9-439F-48F6-8C60-149CB87B5FEA
:END:

#+begin_src emacs-lisp
(use-personal-package avy-extras
  :after avy
  :demand t
  :general
  ("C-H-s-u" 'avy-extras-goto-word-in-line-behind
   "C-H-s-p" 'avy-extras-goto-word-in-line-ahead
   "C-H-s-," 'avy-extras-goto-end-of-line-above
   "C-H-s-/" 'avy-extras-goto-end-of-line-below)
  (dired-mode-map
   "f" 'avy-extras-dired-find-file)
  (ebib-index-mode-map
   "f" 'avy-extras-ebib-view-entry)
  (elfeed-search-mode-map
   "f" 'avy-extras-elfeed-search-show-entry)
  (mu-headers-mode-map
   "f" 'avy-extras-headers-view-message)
  (telega-root-mode-map
   "f" 'avy-extras-telega-view-message))
#+end_src

** writeroom-mode
:PROPERTIES:
:ID:       AD1CE3FE-8897-4593-BD37-FEA38630611A
:END:
:LOGBOOK:
CLOCK: [2023-03-25 Sat 11:05]--[2023-03-25 Sat 11:26] =>  0:21
CLOCK: [2022-09-14 Wed 18:43]--[2022-09-14 Wed 19:00] =>  0:17
CLOCK: [2022-02-04 Fri 11:23]--[2022-02-04 Fri 11:25] =>  0:02
CLOCK: [2021-12-12 Sun 21:14]--[2021-12-12 Sun 21:17] =>  0:03
CLOCK: [2021-05-28 Fri 20:40]--[2021-05-28 Fri 20:45] =>  0:05
CLOCK: [2021-05-27 Thu 19:37]--[2021-05-27 Thu 20:00] =>  0:23
CLOCK: [2021-05-19 Wed 22:40]--[2021-05-19 Wed 23:05] =>  0:25
CLOCK: [2021-05-19 Wed 21:54]--[2021-05-19 Wed 22:36] =>  0:42
CLOCK: [2021-04-13 Tue 07:25]--[2021-04-13 Tue 08:07] =>  0:42
CLOCK: [2021-04-05 Mon 18:53]--[2021-04-05 Mon 19:15] =>  0:22
CLOCK: [2021-03-30 Tue 12:34]--[2021-03-30 Tue 13:06] =>  0:32
CLOCK: [2021-03-30 Tue 21:45]--[2021-03-30 Tue 22:02] =>  0:17
:END:

/[[https://github.com/joostkremers/writeroom-mode][writeroom-mode]] provides distraction-free writing for Emacs./

#+begin_src emacs-lisp :results silent
(use-package writeroom-mode
  :config
  (setq writeroom-global-effects '(writeroom-set-fullscreen
                                   writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width
                                   (lambda (arg) (tab-bar-mode (* -1 arg)))))
  (setq writeroom-restore-window-config t) ; upon leaving `writeroom mode', restore pre-existing number of windows
  (setq writeroom-major-modes '(org-mode
                                elfeed-search-mode
                                elfeed-show-mode
                                eww-mode
                                eww-buffers-mode)) ; major modes activated in global-writeroom-mode
  (setq writeroom-fullscreen-effect 'maximized) ; disables annoying fullscreen transition effect on macos
  (setq writeroom-maximize-window t)

  (advice-add 'writeroom-mode :before (lambda (&rest args)
                                        "Set `writeroom-width' to the width of the window in which it is invoked."
                                        (setq writeroom-width (window-total-width))))

  :general
  ("H-u" 'writeroom-mode))
#+end_src

** ace-link
:PROPERTIES:
:ID:       F1C54CDB-1E70-41D1-8FAB-A45598C5021A
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:48]--[2022-07-15 Fri 13:51] =>  0:03
CLOCK: [2022-07-10 Sun 11:50]--[2022-07-10 Sun 12:32] =>  0:42
CLOCK: [2022-07-03 Sun 09:54]--[2022-07-03 Sun 10:20] =>  0:26
CLOCK: [2021-10-10 Sun 13:02]--[2021-10-10 Sun 13:06] =>  0:04
CLOCK: [2021-08-14 Sat 14:46]--[2021-08-14 Sat 15:50] =>  1:04
CLOCK: [2021-06-27 Sun 17:26]--[2021-06-27 Sun 17:52] =>  0:26
CLOCK: [2021-06-25 Fri 21:24]--[2021-06-25 Fri 21:35] =>  0:11
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:47] =>  0:42
CLOCK: [2021-05-20 Thu 14:23]--[2021-05-20 Thu 14:32] =>  0:09
:END:

/[[https://github.com/abo-abo/ace-link][Add e-link]] lets you quickly follow links in Emacs, Vimium-styce-link]] lets you quickly follow links in Emacs, Vimium-style./

#+begin_src emacs-lisp :results silent
(use-package ace-link
  :demand t
  :general
  ((eww-mode-map elfeed-show-mode-map)
   "f" 'ace-link-eww)
  ((help-mode-map helpful-mode-map elisp-refs-mode-map)
   "f" 'ace-link-help)
  ((Info-mode-map)
   "f" 'ace-link-info)
  ((Man-mode-map woman-mode-map)
   "f" 'ace-link-woman)
  (org-agenda-mode-map
   "f" 'ace-link-org-agenda)
  ((org-mode-map telega-chat-mode-map)
   "M-f" 'ace-link-org)
  ((org-roam-mode-map slack-message-buffer-mode-map telega-msg-button-map twittering-mode-map)
   "f" 'ace-link-org))
#+end_src

** ace-link-extras
:PROPERTIES:
:ID:       BD522C3E-92F7-4D61-A697-8186F01E2BE7
:END:

#+begin_src emacs-lisp
(use-personal-package ace-link-extras
  :after ace-link
  :demand t
  :general
  ((eww-mode-map elfeed-show-mode-map)
   "F" 'ace-link-extras-eww-new-buffer
   "s-f" 'ace-link-extras-eww-externally)
  (mu4e-view-mode-map
   "f" 'ace-link-extras-mu4e)
  (org-agenda-mode-map
   "s-f" 'ace-link-extras-org-agenda-clock-in))
#+end_src

* date & time
:PROPERTIES:
:ID:       CE84D144-875A-492E-B6A1-6E71CBEACCD7
:END:
:LOGBOOK:
CLOCK: [2022-05-09 Mon 10:27]--[2022-05-09 Mon 10:35] =>  0:08
CLOCK: [2021-07-04 Sun 22:07]--[2021-07-04 Sun 22:41] =>  0:34
CLOCK: [2021-07-04 Sun 19:54]--[2021-07-04 Sun 20:13] =>  0:19
CLOCK: [2021-04-02 Fri 11:35]--[2021-04-02 Fri 13:10] =>  1:35
CLOCK: [2021-04-02 Fri 11:22]--[2021-04-02 Fri 11:28] =>  0:06
CLOCK: [2021-03-28 Sun 12:35]--[2021-03-28 Sun 13:01] =>  0:26
CLOCK: [2021-02-27 Sat 16:19]--[2021-02-27 Sat 17:17] =>  0:58
:END:

** calendar
:PROPERTIES:
:ID:       4F3AEDB7-C357-40BA-B670-DE392FAF8F7A
:END:

#+begin_src emacs-lisp :results silent
(use-feature calendar
  :defer 10
  :config
  (setq calendar-week-start-day 1)    ; week starts on Monday
  (setq calendar-set-date-style 'iso) ; this isn't the default?
  (setq calendar-time-display-form
        '(24-hours ":" minutes
                   (when time-zone
                     (concat " (" time-zone ")"))))
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-time-zone-style 'numeric)
  (setq holiday-bahai-holidays nil)
  (setq calendar-location-name "Madrid")
  (setq calendar-latitude "40.4168")
  (setq calendar-longitude "-3.703790")


  :general
  ("C-d" 'calendar
   "s-=" "C-u A-s-=")
  (calendar-mode-map
   "H-m" 'calendar-set-mark
   "A-C-s-u" 'calendar-backward-day
   "A-C-s-i" 'calendar-backward-week
   "A-C-s-o" 'calendar-forward-week
   "A-C-s-p" 'calendar-forward-day
   "A-C-s-m" 'calendar-backward-month
   "A-C-s-," 'calendar-backward-year
   "A-C-s-." 'calendar-forward-year
   "A-C-s-/" 'calendar-forward-month
   "C-f" nil
   "C-b" nil
   "C-n" nil
   "C-p" nil
   "=" 'calendar-count-days-region))
#+end_src

** calendar-extras
:PROPERTIES:
:ID:       746F8B0D-5817-4FCC-9DA5-C198CE632F92
:END:

#+begin_src emacs-lisp
(use-personal-package calendar-extras
  :after calendar
  :defer 5
  :config
  (setq calendar-extras-use-geolocation t)

  :general
  (org-agenda-mode-map
   "s-b" 'calendar-extras-calfw-block-agenda))
#+end_src

** loaddefs
:PROPERTIES:
:ID:       08F898A1-71C0-4BF4-B6E8-5D6649DB230C
:END:
#+begin_src emacs-lisp :results silent
  (use-feature loaddefs
    :demand t
    :init
    (dolist (holiday '((holiday-float 6 0 3 "Father's Day")
                       (holiday-float 5 0 2 "Mother's Day")))
                     (delete holiday holiday-general-holidays)))
#+end_src

** org-gcal
:PROPERTIES:
:ID:       9E8AEF97-2E1A-489E-929A-CE5789EABFB9
:org-gcal-managed: org
:END:
:LOGBOOK:
CLOCK: [2023-05-20 Sat 08:56]--[2023-05-20 Sat 09:40] =>  0:44
CLOCK: [2023-03-28 Tue 13:25]--[2023-03-28 Tue 13:28] =>  0:03
CLOCK: [2022-07-15 Fri 11:10]--[2022-07-15 Fri 11:19] =>  0:09
CLOCK: [2022-07-11 Mon 15:51]--[2022-07-11 Mon 16:17] =>  0:26
CLOCK: [2022-07-03 Sun 10:53]--[2022-07-03 Sun 11:18] =>  0:25
CLOCK: [2022-06-27 Mon 12:00]--[2022-06-27 Mon 12:10] =>  0:10
CLOCK: [2022-06-02 Thu 12:05]--[2022-06-02 Thu 12:16] =>  0:11
CLOCK: [2022-05-07 Sat 07:24]--[2022-05-07 Sat 08:33] =>  1:09
CLOCK: [2021-12-06 Mon 12:52]--[2021-12-06 Mon 12:52] =>  0:00
CLOCK: [2021-11-21 Sun 20:11]--[2021-11-21 Sun 20:28] =>  0:17
CLOCK: [2021-11-17 Wed 11:49]--[2021-11-17 Wed 13:10] =>  1:21
CLOCK: [2021-10-10 Sun 21:33]--[2021-10-10 Sun 22:14] =>  0:41
CLOCK: [2021-10-04 Mon 18:43]--[2021-10-04 Mon 18:52] =>  0:09
CLOCK: [2021-10-04 Mon 18:11]--[2021-10-04 Mon 18:43] =>  0:32
CLOCK: [2021-09-29 Wed 23:08]--[2021-09-29 Wed 23:16] =>  0:08
CLOCK: [2021-09-29 Wed 22:54]--[2021-09-29 Wed 23:02] =>  0:08
CLOCK: [2021-09-29 Wed 22:12]--[2021-09-29 Wed 22:45] =>  0:33
CLOCK: [2021-09-27 Mon 20:51]--[2021-09-27 Mon 20:59] =>  0:08
CLOCK: [2021-08-02 Mon 18:47]--[2021-08-02 Mon 18:50] =>  0:03
CLOCK: [2021-08-02 Mon 08:30]--[2021-08-02 Mon 08:52] =>  0:22
CLOCK: [2021-07-26 Mon 21:15]--[2021-07-26 Mon 21:29] =>  0:14
CLOCK: [2021-07-22 Thu 12:23]--[2021-07-22 Thu 12:50] =>  0:27
CLOCK: [2021-04-02 Fri 13:56]--[2021-04-02 Fri 15:24] =>  1:28
:END:
/[[https://github.com/kidd/org-gcal.el][org-gcal]] integrates org with Google Calendar./

(That's the actively maintained fork; the [[https://github.com/myuhe/org-gcal.el/issues/124#issuecomment-642859466][official repository]] is no longer maintained.)

[2023-09-12 Tue 12:03] There is currently an [[https://github.com/kidd/org-gcal.el/issues/238#issuecomment-1555902363][issue]] that, apparently, can only be solved by downgrading to an earlier version of ~gnupg~.

Note to self: if the package doesn't work after deploying a new profile, even after following the steps in the solution above, copy the ~oauth2-auto.plist~ file from a working profile.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :org-gcal)
(use-package org-gcal
  :elpaca (org-gcal
           :type git
           :host github
           :repo "benthamite/org-gcal.el")
  :after auth-source-pass org
  :defer 10

  :init
  (setq org-gcal-client-id (auth-source-pass-get "host" "auth-sources/org-gcal"))
  (setq org-gcal-client-secret (auth-source-pass-get 'secret "auth-sources/org-gcal"))

  :config
  (setq org-gcal-fetch-file-alist `((,user-mail-address . ,paths-file-calendar)))
  (setq org-gcal-recurring-events-mode 'top-level)
  (setq org-gcal-remove-api-cancelled-events nil) ; never remove cancelled events
  (setq org-gcal-notify-p nil)
  (setq org-gcal-auto-archive nil)
  (setq org-gcal-up-days 1)
  (setq org-gcal-down-days 7)
  (setq org-gcal-org-timestamp-property :deadline))
#+end_src

** org-gcal-extras
:PROPERTIES:
:ID:       BBED8E2E-2A29-4465-926A-22D531E6DBE7
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :org-gcal)
(use-personal-package org-gcal-extras
  :after org-gcal
  :demand t
  :general
  (org-mode-map
   "s-g" 'org-gcal-extras-hydra/body))
#+end_src

** calfw
:PROPERTIES:
:ID:       05F8BF13-CF3A-43D7-8959-D19E0C7EB092
:END:
:LOGBOOK:
CLOCK: [2023-11-17 Fri 20:11]--[2023-11-17 Fri 20:41] =>  0:30
:END:

/[[https://github.com/kiwanami/emacs-calfw][calf]] is a calendar framework for Emacs./

#+begin_src emacs-lisp
(use-package calfw)
#+end_src

** calfw-org
:PROPERTIES:
:ID:       67CD7ECA-260B-4E09-B56B-6A39BAB78D5A
:END:

#+begin_src emacs-lisp
(use-package calfw-org
  :after calfw)
#+end_src

** calfw-blocks
:PROPERTIES:
:ID:       03DD73DD-6347-4D30-B103-A61718459C41
:END:

/[[https://github.com/ml729/calfw-blocks][calfw-blocks]] provides visual enhancements for calfw./

#+begin_src emacs-lisp
(use-package calfw-blocks
  :elpaca (calfw-blocks
             :host github
             :repo "ml729/calfw-blocks")
  :after calfw
  :demand t)
#+end_src

** time
:PROPERTIES:
:ID:       88CCE9CB-8284-4C8B-8264-A1E54E299941
:END:

#+begin_src emacs-lisp :results silent
(use-feature time
  :demand t
  :after tab-bar
  :config
  (setq world-clock-list '(("Europe/Barcelona" "Barcelona")
                           ("Europe/Madrid" "Madrid")
                           ("Europe/London" "London")
                           ("America/Buenos_Aires" "Buenos Aires")
                           ("America/New_York" "New York")
                           ("America/Los_Angeles" "San Francisco")))
  (setq display-time-format "%a %e %b %T %z")
  (setq display-time-interval 1)
  (setq display-time-default-load-average nil)

  (display-time-mode)

  :general
  ("M-A-t" 'world-clock))
#+end_src

** tmr
:PROPERTIES:
:ID:       87D2EB00-727C-4CA3-85F1-B8D82D37B48D
:END:

/[[https://protesilaos.com/emacs/tmr][tmr]] set timers using a convenient notation./

#+begin_src emacs-lisp :results silent
(use-package tmr
  :demand t
  :config
  (when (eq system-type 'darwin)
    (setq tmr-sound-file "/System/Library/Sounds/Blow.aiff"))

  :general
  ("A-t" 'tmr))
#+end_src

** display-wttr
:PROPERTIES:
:ID:       E1DB2097-7273-4FAC-BA84-67D46815FC45
:END:

/[[https://git.sr.ht/~josegpt/display-wttr][display-wttr]] displays weather information in the modeline (or tab-bar)./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :display-wttr)
(use-package display-wttr
  :defer 10
  :config
  (setq display-wttr-interval (* 15 60))
  (setq display-wttr-locations `(,calendar-location-name))

  (display-wttr-mode))
#+end_src

* history
:PROPERTIES:
:ID:       20B0D7AB-5B27-4D80-A9D8-DAAAFCB27651
:END:

** savehist
:PROPERTIES:
:ID:       D411AA79-C8FE-4E03-B06E-1BED5B7688BC
:END:

/savehist makes Emacs remember completion history across sessions./

#+begin_src emacs-lisp :results silent
(use-feature savehist
  :demand t
  :config
  (savehist-mode)
  (setq history-length t) ; unlimited history
  (setq savehist-save-minibuffer-history t))
#+end_src

** simple
:PROPERTIES:
:ID:       C7BA09A3-635F-4F31-A17A-F94F3B024522
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (dolist (var '(extended-command-history
                 kill-ring
                 mark-ring
                 shell-command-history
                 read-expression-history))
    (push var savehist-additional-variables))

  :general
  ((minibuffer-mode-map mu4e-minibuffer-search-query-map)
   "M-k" 'previous-history-element
   "M-l" 'next-history-element))
#+end_src

** chistory
:PROPERTIES:
:ID:       1604256B-74B9-41DC-9F19-7EAED0473FB6
:END:

#+begin_src emacs-lisp
(use-feature chistory
  :config
  (push 'command-history savehist-additional-variables))
#+end_src

** saveplace
:PROPERTIES:
:ID:       8DE4A4B7-4B96-445F-BC1F-B10BBF181F53
:END:

/saveplace makes Emacs remember point position in file across sessions./

#+begin_src emacs-lisp :results silent
(use-feature saveplace
  :demand t
  :config
  (save-place-mode))
#+end_src

** session
:PROPERTIES:
:ID:       F4D1CD7C-0BA9-4D20-8D99-399331682D1B
:END:

/[[https://github.com/emacsorphanage/session][session]] lets you use variables, registers and buffer places across sessions./

#+begin_src emacs-lisp :results silent
(use-package session
  :demand t
  :config
  (setq session-globals-include '((kill-ring 100)
                                  (session-file-alist 100 t)
                                  (file-name-history 100)
                                  search-ring regexp-search-ring))

  (add-hook 'elpaca-after-init-hook #'session-initialize))
#+end_src

** recentf
:PROPERTIES:
:ID:       C22F4A07-A237-498A-999D-F841F3B10074
:END:

/recentf makes Emacs remember the most recently visited files./

#+begin_src emacs-lisp :results silent
(use-feature recentf
  :defer 10
  :config
  (setq recentf-max-saved-items 100)

  ;; github.com/emacscollective/no-littering#suggested-settings
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (recentf-mode))
#+end_src

** remember
:PROPERTIES:
:ID:       438AD8A8-0F4F-4A1D-9BC9-110906944509
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :remember)
(use-feature remember
  :demand t
  :init
  (setq remember-data-file "~/.config/emacs-profiles/var/remember/notes")

  :config
  (setq remember-notes-auto-save-visited-file-name t)
  (setq remember-notes-buffer-name "*scratch*")
  (setq initial-buffer-choice
        (lambda () (kill-buffer remember-notes-buffer-name)
          (remember-notes))))
#+end_src

* search & replace
:PROPERTIES:
:ID:       9FDBBF3E-724F-4402-9DDB-F9349F65AB0E
:END:
:LOGBOOK:
CLOCK: [2021-05-23 Sun 15:31]--[2021-05-23 Sun 15:42] =>  0:11
CLOCK: [2021-05-22 Sat 22:23]--[2021-05-22 Sat 22:46] =>  0:23
CLOCK: [2021-04-04 Sun 19:29]--[2021-04-04 Sun 19:40] =>  0:11
CLOCK: [2021-03-17 Wed 16:40]--[2021-03-17 Wed 16:43] =>  0:03
:END:

** isearch
:PROPERTIES:
:ID:       4B274841-062C-4511-8FF3-C850BAB05905
:END:

#+begin_src emacs-lisp :results silent
(use-feature isearch
  :config
  (setq search-default-mode #'char-fold-to-regexp)
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq isearch-yank-on-move t)
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format nil)
  (setq lazy-count-suffix-format " (%s/%s)")
  (setq isearch-allow-scroll 'unlimited)
  (setq search-upper-case t)
  (setq search-exit-option t) ; `t' is the default, but some alternative value may be more sensible

  (dolist (var '(regexp-search-ring search-ring))
    (push var savehist-additional-variables))

  (add-hook 'isearch-mode-end-hook #'recenter-top-bottom)

  :general
  (isearch-mode-map
   "C-H-M-s" 'isearch-delete-char
   "C-H-M-d" "C-- C-H-M-s" ; delete forward char
   "C-g" 'isearch-abort ; "quit once"
   "C-H-g" 'isearch-exit ; "quit twice"
   "C-'" 'isearch-toggle-char-fold
   "C-," 'isearch-forward-symbol-at-point
   "C-." 'isearch-forward-thing-at-point
   "C-/" 'isearch-complete
   "H-m" 'isearch-toggle-lax-whitespace
   "C-a" 'isearch-toggle-regexp
   "C-b" 'isearch-beginning-of-buffer
   "C-d" 'isearch-toggle-word
   "C-f" 'isearch-highlight-lines-matching-regexp
   "C-i" 'isearch-toggle-invisible
   "C-l" 'isearch-yank-line
   "C-m" 'isearch-toggle-symbol
   "C-n" 'isearch-end-of-buffer
   "C-o" 'isearch-occur
   "C-p" 'isearch-highlight-regexp
   "C-v" 'isearch-yank-kill
   "C-y" 'isearch-forward-symbol-at-point
   "M-k" 'isearch-ring-retreat
   "M-l" 'isearch-ring-advance)
  ((isearch-mode-map minibuffer-mode-map)
   "C-e" 'isearch-query-replace))
#+end_src

To check: [[https://karthinks.com/software/bridging-islands-in-emacs-1/][Bridging Islands in Emacs: re-builder and query-replace-regexp | Karthinks]]

*** TODO [#5] Add advice for other relevant commands
:PROPERTIES:
:Effort:   0:30
:ID:       C1131D3A-4E66-48E5-9353-C7E785391DFA
:END:

** isearch-extras
:PROPERTIES:
:ID:       6992A0D9-FF6A-4BF7-95C9-B3E3B25CD44C
:END:

#+begin_src emacs-lisp
(use-personal-package isearch-extras
  :after isearch
  :demand t
  :general
  (isearch-mode-map
  "C-<return>" 'isearch-extras-exit-other-end
  "H-c" 'isearch-extras-copy-match
  "C-H-v" 'isearch-extras-yank-kill-literally))
#+end_src

** replace
:PROPERTIES:
:ID:       DC08C217-5005-4A65-986B-85EA876ECB6D
:END:

#+begin_src emacs-lisp :results silent
(use-feature replace
  :config
  ;; emacs.stackexchange.com/a/12318/32089
  (setq query-replace-from-history-variable 'regexp-search-ring)
  (setq case-replace nil)

  :general
  ("C-H-a" 'query-replace
   "C-H-s" 'query-replace-regexp))
#+end_src

** substitute
:PROPERTIES:
:ID:       CDB7BD03-86D2-4780-871E-205F20EFA367
:END:

/[[https://git.sr.ht/~protesilaos/substitute][substitute]] efficiently replaces targets in the buffer or context./

#+begin_src emacs-lisp
(use-package substitute
  :elpaca (substitute
           :host sourcehut
           :repo "protesilaos/substitute")
  :demand t
  :general
  ("A-H-b" 'substitute-target-in-buffer)
  (prog-mode-map
   "A-H-d" 'substitute-target-in-defun))
#+end_src

** visual-regexp
:PROPERTIES:
:ID:       0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942
:END:

/[[https://github.com/benma/visual-regexp.el][visual-regexp]] provides visual feedback to regexp search and replace./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp)
#+end_src

** visual-regexp-steroids
:PROPERTIES:
:ID:       375D8037-D6A0-4519-A3B2-32E88810DA6D
:END:

/[[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] extends [[id:0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942][visual-regexp]] to support additional regexp engines./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp-steroids
  :after visual-regexp
  :demand t
  :config
  (setq vr/engine 'python)
  (setq vr/command-python
        (concat "python3 "
                (file-name-concat user-emacs-directory "elpacs/builds/visual-regexp-steroids/regexp.py")))

  :general
  (isearch-mode-map
   "C-H-s" 'vr/isearch-forward
   "C-H-r" 'vr/isearch-backward))
#+end_src

** imenu
:PROPERTIES:
:ID:       CC1F3F93-2446-4399-A14D-9DCB6753D26B
:END:

#+begin_src emacs-lisp :results silent
(use-feature imenu
  :demand t
  :config
  (setq org-imenu-depth 3))
#+end_src

** pcre2el
:PROPERTIES:
:ID:       1E9DDAD1-9663-432D-8882-A875227AB6B2
:END:

/[[https://github.com/joddie/pcre2el][pcre2el]] supports conversion between PCRE, Emacs and rx regexp syntax./

#+begin_src emacs-lisp :results silent
(use-package pcre2el)
#+end_src

** wgrep
:PROPERTIES:
:ID:       928E0F8E-569F-4DCA-9F29-C0623C2973C7
:END:

/[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] lets you create a writable grep buffer and apply the changes to files./

#+begin_src emacs-lisp :results silent
(use-package wgrep
  :demand t
  :config
  (setq wgrep-auto-save-buffer t)
  (setq wgrep-enable-key "r")

  :general
  (wgrep-mode-map
   "s-c" 'wgrep-finish-edit))
#+end_src

** elgrep
:PROPERTIES:
:ID:       783E764B-7E5D-4CFB-9DE7-D87C5BF51518
:END:

/[[https://github.com/TobiasZawada/elgrep][elgrep]] is an Emacs implementation of grep that requires no external dependencies./

#+begin_src emacs-lisp
(use-package elgrep
  :demand t
  :general
  ("A-C-p" 'elgrep))
#+end_src

* minibuffer completion
:PROPERTIES:
:ID:       E83EC00B-0C94-44CD-9EC0-355992C99234
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:43]--[2021-06-10 Thu 12:49] =>  0:06
:END:

| package    | what it does                      |
|------------+-----------------------------------|
| [[id:970043EC-39A9-46AE-9CC9-1F5F2175BF70][vertico]]    | minibuffer completion UI          |
| [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]    | minibuffer completion backend     |
| [[id:D0A453D1-784F-49E4-B238-ED009AF84EDB][orderless]]  | minibuffer completion styles      |
| [[id:C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68][marginalia]] | minibuffer completion annotations |
| [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]]     | minibuffer completion actions     |

For a comprehensive overview of completion in Emacs—both minibuffer completion and completion at point—I recommend [[https://www.youtube.com/watch?v=fnE0lXoe7Y0][this video]] by Andrew Tropin.

** vertico
:PROPERTIES:
:ID:       970043EC-39A9-46AE-9CC9-1F5F2175BF70
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 20:10]--[2022-06-21 Tue 20:57] =>  0:47
:END:

/[[https://github.com/minad/vertico][vertico]] is a vertical completion UI based on the default completion system./

#+begin_src emacs-lisp :results silent
(use-package vertico
  :elpaca (vertico :files (:defaults "extensions/*")
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive))
  :demand t
  :init
  (vertico-mode)

  :config
  (setq vertico-multiform-commands
        '((consult-line buffer)
          (consult-imenu buffer)
          (consult-grep buffer)))
  ;; Configure the display per completion category.
  ;; Use the grid display for files and a buffer
  ;; for the consult-grep commands.
  (setq vertico-multiform-categories
        '((file grid)))
  (setq vertico-cycle t)
  (setq vertico-count 16)
  ;; (setq vertico-quick1 avy-keys)
  ;; (setq vertico-quick2 avy-keys)

  (vertico-multiform-mode)

  ;; youtu.be/L_4pLN0gXGI?t=779
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

  :general
  (vertico-map
   "<C-i>" 'vertico-exit
   "M-f" 'vertico-quick-exit
   "C-H-M-w" 'vertico-directory-up))
#+end_src

** embark
:PROPERTIES:
:ID:       19A4F21C-2169-4529-92E4-68E3A584DDAC
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:10]--[2022-07-22 Fri 18:13] =>  0:03
CLOCK: [2022-07-21 Thu 21:18]--[2022-07-21 Thu 21:24] =>  0:06
:END:

/[[https://github.com/oantolin/embark][embark]] provides contextually relevant actions in completion menus and in normal buffers./

#+begin_src emacs-lisp :results silent
(use-package embark
  :demand t
  :config
  (setq embark-confirm-act-all nil)

  (add-to-list 'embark-keymap-alist '(yasnippet . embark-yasnippet-completion-actions))

  (defvar-keymap embark-yasnippet-completion-actions
  :parent embark-general-map)

  :general
  (embark-yasnippet-completion-actions
  "d" 'consult-yasnippet-visit-snippet-file)
  ("C-;" 'embark-act
   "C-H-;" 'embark-act-all
   "C-h B" 'embark-bindings))
#+end_src

** consult
:PROPERTIES:
:ID:       C6144D48-2E3C-4033-AD6E-5D7EE175D9E1
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:32]--[2023-03-18 Sat 13:14] =>  0:42
CLOCK: [2022-07-15 Fri 21:21]--[2022-07-15 Fri 21:44] =>  0:23
CLOCK: [2022-07-15 Fri 13:51]--[2022-07-15 Fri 14:22] =>  0:31
CLOCK: [2022-07-09 Sat 09:56]--[2022-07-09 Sat 10:33] =>  0:37
CLOCK: [2022-06-22 Wed 11:05]--[2022-06-22 Wed 11:10] =>  0:05
CLOCK: [2022-06-21 Tue 21:48]--[2022-06-21 Tue 23:04] =>  1:16
CLOCK: [2022-06-21 Tue 17:53]--[2022-06-21 Tue 18:40] =>  0:47
:END:

/[[https://github.com/minad/consult][consult]] provides practical commands based on the Emacs completion function ~completing-read~./

#+begin_src emacs-lisp :results silent
(use-package consult
  :demand t
  :config
  (setq consult-locate-args "mdfind")
  (setq consult-narrow-key "<")
  (setq consult-widen-key ">")

  ;; (advice-remove 'consult-org-heading #'org-extras-cycle-content)
  ;; (advice-add 'consult-org-agenda :after #'org-extras-narrow-to-entry-and-children)

  :general
  ("C-H-l" 'consult-line
   "C-f" 'consult-find
   "H-b" 'consult-buffer
   "H-k" 'consult-locate
   "A-H-i" 'consult-info
   "H-R" 'consult-history
   "H-V" 'consult-yank-pop)
  ((markdown-mode-map gfm-mode-map outline-mode-map)
   "s-j" 'consult-outline)
  ((elfeed-show-mode-map eww-mode-map prog-mode-map)
   "s-j" 'consult-imenu))
#+end_src

** consult-extras
:PROPERTIES:
:ID:       163D3CB3-B2D9-44DB-9728-E2F5CA7600A8
:END:

#+begin_src emacs-lisp
(use-personal-package consult-extras
  :after consult
  :demand t
  :general
   ("H-F" 'consult-extras-locate-file-home
   "A-H-f" 'consult-extras-locate-file-anywhere
   "H-p" 'consult-extras-ripgrep-current
   "H-P" 'consult-extras-ripgrep-home
   "A-H-p" 'consult-extras-ripgrep-anywhere)
  (org-mode-map
   "s-j" 'consult-extras-org-heading))
#+end_src

** consult-dir
:PROPERTIES:
:ID:       3250EBD7-513E-439F-972F-B43C8214AC46
:END:

/[[https://github.com/karthink/consult-dir][consult-dir]] enables insertion of paths into the minibuffer prompt./

#+begin_src emacs-lisp :results silent
(use-package consult-dir
  :after consult
  :defer 15

  :config
  (setq consult-dir-default-command 'consult-dir-dired)
  ;; Should start using `projectile' first
  ;; (consult-dir-project-list-function 'consult-dir-projectile-dirs)

  :general
  ("H-B" 'consult-dir))
#+end_src

** consult-git-log-grep
:PROPERTIES:
:ID:       BA613BB1-A3CF-4C47-973A-6B54091B3C0E
:END:

#+begin_src emacs-lisp
(use-package consult-git-log-grep
  :demand t)
#+end_src

** consult-gh
:PROPERTIES:
:ID:       117CEC74-9092-4EE7-BFD3-F34D71F1313C
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 09:34]--[2023-07-05 Wed 09:48] =>  0:14
:END:

/[[https://github.com/armindarvish/consult-gh][consult-gh]] provides an interface to interact with GitHub repositories./

#+begin_src emacs-lisp
(use-package consult-gh
  :elpaca (consult-gh
           :host github
           :repo "armindarvish/consult-gh")
  :after consult forge gh
  :demand t
  :config
  (add-to-list 'consult-gh-default-orgs-list "benthamite")
  (setq consult-gh-default-clone-directory "~/source/")
  (setq consult-gh-issues-state-to-show "all"))
#+end_src

** consult-yasnippet
:PROPERTIES:
:ID:       437A790A-467F-46CB-9EE3-25AA91D43D89
:END:
:LOGBOOK:
CLOCK: [2022-06-27 Mon 20:12]--[2022-06-27 Mon 20:16] =>  0:04
:END:

/[[https://github.com/mohkale/consult-yasnippet/tree/cdb256d2c50e4f8473c6052e1009441b65b8f8ab][consult-yasnippet]] provides [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]] functionality to [[id:6405B8E7-6612-4D71-8C2C-A51F8808F4C6][yasnippet]]./


#+begin_src emacs-lisp :results silent
(use-package consult-yasnippet
  :after consult yasnippet
  :demand t
  :general
  ("C-H-y" 'consult-yasnippet))
#+end_src

** consult-spotify
:PROPERTIES:
:ID:       1605F697-9968-474A-9691-941723977EEC
:END:

Since I can't make [[id:5879A8B7-0889-4FCD-A16A-77D0BCEE4804][espotify]] work, I'm disabling this.

#+begin_src emacs-lisp :results silent
(use-package consult-spotify
  :disabled
  :after consult espotify)
#+end_src

** embark-consult
:PROPERTIES:
:ID:       C7BDCA9D-F507-4C25-9AF8-1EBB86D99A61
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 18:17]--[2022-07-19 Tue 18:35] =>  0:18
:END:

/[[https://github.com/oantolin/embark/blob/master/embark-consult.el][embark-consult]] provides integration between [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]] and [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]./

#+begin_src emacs-lisp :results silent
(use-package embark-consult
  :after embark consult
  :demand t
  :config
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

** marginalia
:PROPERTIES:
:ID:       C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68
:END:

/[[https://github.com/minad/marginalia][marginalia]] displays annotations (such as docstrings) next to completion candidates./

#+begin_src emacs-lisp :results silent
(use-package marginalia
  :demand t
  :init
  (marginalia-mode))
#+end_src

** orderless
:PROPERTIES:
:ID:       D0A453D1-784F-49E4-B238-ED009AF84EDB
:END:

/[[https://github.com/oantolin/orderless][orderless]] is an completion style that matches multiple regexps in any order./

#+begin_src emacs-lisp :results silent
(use-package orderless
  :demand t
  :config
  (setq completion-styles '(orderless basic partial-completion))
  (setq completion-category-overrides '((file (styles basic partial-completion))))
  (setq orderless-matching-styles '(orderless-regexp)))
#+end_src

** orderless-extras
:PROPERTIES:
:ID:       2B2BED63-EC35-4DD6-B6A4-DC8E06817290
:END:

#+begin_src emacs-lisp
(use-personal-package orderless-extras
  :after orderless
  :demand t
  :config
  (setq orderless-style-dispatchers '(orderless-extras-flex-dispatcher
                                      orderless-extras-initialism-dispatcher
                                      orderless-extras-prefixes-dispatcher
                                      orderless-extras-exclusion-dispatcher)))
#+end_src

** ido
:PROPERTIES:
:ID:       458A26BD-1601-41D9-BC7E-7630466BC374
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:14]--[2022-07-14 Thu 20:17] =>  0:03
:END:

#+begin_src emacs-lisp :results silent
(use-feature ido
  :config
  (push 'ido-file-history savehist-additional-variables)

  :general
  (dired-mode-map
   "i" 'ido-find-file))
#+end_src

** which-key
:PROPERTIES:
:ID:       7781DC87-0D61-4482-91EE-6D2E1F8E122D
:END:

/[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in a popup./

#+begin_src emacs-lisp :results silent
(use-package which-key
  :defer 10
  :init
  (which-key-mode)

  :config
  (setq which-key-idle-delay 0))
#+end_src

* completion at point
:PROPERTIES:
:ID:       9037BE0D-FD13-4D33-8514-BE503421774D
:END:

| package | what it does                |
|---------+-----------------------------|
| [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]]   | completion at point UI      |
| [[id:5A103245-9DC3-4D95-96D7-2161F6CCD0B1][cape]]    | completion at point backend |

** corfu
:PROPERTIES:
:ID:       35370B0F-9EBD-433F-B59C-576EE8A69772
:END:

/[[https://github.com/minad/corfu][corfu]] enhances completion at point with a small completion popup./

#+begin_src emacs-lisp :results silent
(use-package corfu
  :elpaca (corfu :files (:defaults "extensions/*")
                 :includes (corfu-info
                            corfu-echo
                            corfu-history
                            ;; corfu-indexed
                            corfu-popupinfo
                            corfu-quick))
  :demand t
  :config
  (setq corfu-auto t)                 ;; Enable auto completion
  (setq corfu-quit-no-match t)        ;; Automatically quit if there is no match
  (setq corfu-cycle vertico-cycle)
  (setq corfu-count vertico-count)
  (setq corfu-info-documentation nil)
  (setq corfu-auto-delay 0)
  (setq corfu-auto-prefix 3)
  (setq corfu-popupinfo-delay 0)

  (global-corfu-mode)

  (add-hook 'prog-mode-hook #'corfu-popupinfo-mode)
  (add-hook 'prog-mode-hook #'corfu-echo-mode)
  (add-hook 'corfu-mode-hook #'corfu-history-mode)
  (add-hook 'minibuffer-setup-hook #'corfu-extras-enable-always-in-minibuffer)

  :general
  (corfu-map
   "M-f" 'corfu-quick-complete
   "TAB" nil
   "<tab>" nil
   "<return>" 'corfu-complete
   "RET" 'corfu-complete))
#+end_src

** corfu-extras
:PROPERTIES:
:ID:       061EBAB9-2846-4922-BBAF-C29E11FAA476
:END:

#+begin_src emacs-lisp
(use-personal-package corfu-extras
  :after corfu
  :demand t
  :general
  (corfu-map
   "M-m" 'corfu-extras-move-to-minibuffer))
#+end_src

** kind-icon
:PROPERTIES:
:ID:       DE439647-A62B-4C32-A0BB-AA7D4BB3D9DD
:END:

/[[https://github.com/jdtsmith/kind-icon][kind-icon]] provides SVG icons for in-region completion./

#+begin_src emacs-lisp :results silent
(use-package kind-icon
  :after corfu
  :demand t

  :config
  (setq kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly

  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** cape
:PROPERTIES:
:ID:       5A103245-9DC3-4D95-96D7-2161F6CCD0B1
:END:

/[[https://github.com/minad/cape][cape]] provides completion-at-point extensions/

#+begin_src emacs-lisp
(use-package cape
  :demand t
  :after corfu
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)

  :config
  (setq cape-dabbrev-min-length 4))
#+end_src

** org-block-cafp
:PROPERTIES:
:ID:       5D18297C-CB85-47D0-9637-D38F3BD01332
:END:

/[[https://github.com/xenodium/org-block-capf][org-block-cafp]] adds support for org block completion at point./

#+begin_src emacs-lisp
(use-package org-block-capf
  :elpaca (org-block-capf :host github :repo "xenodium/org-block-capf")
  :after org
  :demand t
  :config
  (add-hook 'org-mode-hook #'org-block-capf-add-to-completion-at-point-functions))
#+end_src

** company
:PROPERTIES:
:ID:       D8BC79D0-C883-45A9-A5B2-98E88C59EE6B
:END:

I use ~completion-at-point~ for completion, not company. However, I still rely on company for a few completion backends.

#+begin_src emacs-lisp :results silent
(use-package company)
#+end_src

* help
:PROPERTIES:
:ID:       7F0CBD06-FDB3-4889-91CE-D8A25D4F2613
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 11:55]--[2021-07-04 Sun 12:05] =>  0:10
CLOCK: [2021-05-24 Mon 20:57]--[2021-05-24 Mon 21:07] =>  0:10
CLOCK: [2021-05-21 Fri 17:13]--[2021-05-21 Fri 17:47] =>  0:34
CLOCK: [2021-05-21 Fri 16:52]--[2021-05-21 Fri 17:04] =>  0:12
:END:

** help
:PROPERTIES:
:ID:       B4F00E3C-2682-486D-B05A-E983ACC82D09
:END:

#+begin_src emacs-lisp :results silent
(use-feature help
  :demand t
  :config
  (setq help-window-select t)
  (lossage-size 10000)

  :general
  ("C-A-k" 'describe-keymap)
  (input-decode-map
   [?\C-m] [C-m]
   [?\C-i] [C-i]))
#+end_src

** help-at-pt
:PROPERTIES:
:ID:       263F5A59-1B63-47BC-B77B-8165FBBE3E75
:END:

#+begin_src emacs-lisp :results silent
(use-feature help-at-pt
  :demand t
  :config
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0)       ; show help immediately when enabled
  (help-at-pt-set-timer))                ; set timer, thus enabling local help
#+end_src

** helpful
:PROPERTIES:
:ID:       6DCDFA24-4561-43CD-9D82-7C870A1044D1
:END:
:LOGBOOK:
CLOCK: [2021-11-27 Sat 14:54]--[2021-11-27 Sat 15:00] =>  0:06
CLOCK: [2021-05-11 Tue 10:01]--[2021-05-11 Tue 10:12] =>  0:11
CLOCK: [2021-04-04 Sun 22:14]--[2021-04-04 Sun 22:33] =>  0:19
:END:

/[[https://github.com/Wilfred/helpful][helpful]] enhances the Emacs help buffer./

#+begin_src emacs-lisp :results silent
(use-package helpful
  :defer 20
  :general
  ("H-U" 'helpful-at-point
   "C-k" 'helpful-key
   "C-h k" 'helpful-key
   "C-h f" 'helpful-function
   "C-A-f" 'helpful-function
   "C-h o" 'helpful-symbol
   "C-A-o" 'helpful-symbol
   "C-h v" 'helpful-variable
   "C-A-v" 'helpful-variable
   "C-h c" 'helpful-command)
  (embark-symbol-map
   "h" 'helpful-symbol))
#+end_src

** info
:PROPERTIES:
:ID:       28966DB8-E893-4AEA-A7BD-8C18B8A97592
:END:

#+begin_src emacs-lisp :results silent
(use-feature info
  :demand t
  :config
  (push 'Info-history-list savehist-additional-variables)

  :general
  (Info-mode-map
   "j" 'Info-backward-node
   ";" 'Info-forward-node))
#+end_src

** man
:PROPERTIES:
:ID:       2F034283-E2C2-4F47-BDB6-295A5D5CEAF3
:END:

#+begin_src emacs-lisp :results silent
(use-feature man)
#+end_src

** shortdoc
:PROPERTIES:
:ID:       5422C312-C976-4C9E-AE27-9D1771F8127C
:END:

Emacs 28 has a useful builtin [[https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet][Elisp cheap sheet]]: shortdoc.

#+begin_src emacs-lisp :results silent
(use-feature shortdoc
  :demand t
  :general
  ("C-h u" 'shortdoc-display-group))
#+end_src

** elisp-demos
:PROPERTIES:
:ID:       DCEBBA6C-04D4-4168-9FCB-772876C36E37
:END:

/[[https://github.com/xuchunyang/elisp-demos][elisp-demos]] displays examples for many Elisp functions./

#+begin_src emacs-lisp :results silent
(use-package elisp-demos
  :init
  (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
#+end_src

* keyboard macros
:PROPERTIES:
:ID:       ADB25EC1-6E97-4057-AEBD-FB7B7E4503CF
:END:

** kmacro
:PROPERTIES:
:ID:       92DE0CE6-CA2B-4D43-84D1-EE2B5B068197
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 17:58]--[2021-07-25 Sun 18:03] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature kmacro
  :defer 20
  :config
  (kmacro-set-counter 1)
  (dolist (var '(kmacro-ring last-kbd-macro))
    (push var savehist-additional-variables))

  :general
  ("A-H-M-s-h" 'kmacro-end-or-call-macro ; = H-h, to circumvent OSX mapping
   "H-H" 'kmacro-start-macro-or-insert-counter
   "A-C-H-s-h" 'kmacro-set-counter
   "A-h" 'name-last-kbd-macro
   "M-h" 'kmacro-edit-macro
   "M-A-h" 'kmacro-bind-to-key))
#+end_src

** kmacro-extras
:PROPERTIES:
:ID:       13CB9BBA-95F7-446A-A6DB-924C5F62C1C4
:END:

#+begin_src emacs-lisp
(use-personal-package kmacro-extras
  :after kmacro
  :demand t
  :general
  ("C-A-h" 'kmacro-extras-counter-toggle-alpha-number))
#+end_src

* shell
:PROPERTIES:
:ID:       C97337A7-A91F-49DA-9F33-6556937E7AFC
:END:

** simple
:PROPERTIES:
:ID:       A34DA7F2-47E4-400E-B2C8-167BCAEA73E7
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (setq async-shell-command-buffer 'new-buffer)) ; don't ask for confirmation before running command in a new buffer
#+end_src

** shell
:PROPERTIES:
:ID:       231A8710-B820-4761-ABF8-5BE648908CD1
:END:
:LOGBOOK:
CLOCK: [2022-09-02 Fri 18:00]--[2022-09-02 Fri 18:07] =>  0:07
:END:

#+begin_src emacs-lisp :results silent
(use-feature shell
  :demand t
  :general
  (shell-mode-map
   "M-p" nil
   "M-n" nil
   "M-k" 'comint-previous-input
   "M-l" 'comint-next-input))
#+end_src

** eshell
:PROPERTIES:
:ID:       ABD03BEF-8E02-43AF-A137-AE9F9906704C
:END:
:LOGBOOK:
CLOCK: [2022-08-21 Sun 19:42]--[2022-08-21 Sun 20:00] =>  0:18
CLOCK: [2022-06-17 Fri 17:11]--[2022-06-17 Fri 17:41] =>  0:30
CLOCK: [2021-11-19 Fri 12:59]--[2021-11-19 Fri 13:39] =>  0:40
CLOCK: [2021-10-14 Thu 23:18]--[2021-10-14 Thu 23:31] =>  0:13
CLOCK: [2021-07-16 Fri 10:48]--[2021-07-16 Fri 11:04] =>  0:16
CLOCK: [2021-04-15 Thu 21:10]--[2021-04-15 Thu 21:30] =>  0:20
CLOCK: [2021-04-07 Wed 12:42]--[2021-04-07 Wed 13:09] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature eshell
  :config
  (setq eshell-banner-message "")
  (setq eshell-save-history-on-exit t)
  (setq eshell-history-size 100000)
  (setq eshell-hist-ignoredups t)
  (setq eshell-last-dir-ring-size 1000)

  :general
  ("A-e" 'eshell)
  (eshell-mode-map
   "C-H-M-z" 'eshell-kill-input
   "A-C-s-m" 'eshell-bol
   "M-k" 'eshell-previous-matching-input-from-input
   "M-l" 'eshell-next-matching-input-from-input
   "s-l" 'eshell/clear
   "s-d" 'eshell-send-eof-to-process
   "M-p" nil
   "M-n" nil))
#+end_src

** emacs-eat
:PROPERTIES:
:ID:       94971F2F-FF78-4088-BBDB-A95ADEDECE9B
:END:

/[[https://codeberg.org/akib/emacs-eat][emacs-eat]] is a terminal emulator./

#+begin_src emacs-lisp
(use-package eat
  :elpaca (eat :type git
               :host codeberg
               :repo "akib/emacs-eat"
               :files ("*.el" ("term" "term/*.el") "*.texi"
                       "*.ti" ("terminfo/e" "terminfo/e/*")
                       ("terminfo/65" "terminfo/65/*")
                       ("integration" "integration/*")
                       (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** macos
:PROPERTIES:
:ID:       E8C33B31-BFDD-45BF-ABDB-6F60353653CF
:END:

#+begin_src emacs-lisp
(use-package macos
  :elpaca (macos
           :host github
           :repo "benthamite/macos")
  :demand t
  :config
  (setq macos-bluetooth-device-list
  '(("Sonny WH-1000XM5" . "ac-80-0a-37-41-1e"))))
#+end_src

** em-hist
:PROPERTIES:
:ID:       692C4FF8-FD07-4D35-A9B3-A87F0E9A1B53
:END:

#+begin_src emacs-lisp
(use-feature em-hist
  :demand t
  :after eshell
  :config
  (setq eshell-hist-ignoredups t)
  (setq eshell-save-history-on-exit t))
#+end_src

** eshell-syntax-highlighting
:PROPERTIES:
:ID:       960266D6-7B07-436B-B25E-F59FBDCB818A
:END:

/[[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]] provides syntax highlighting for eshell-mode./

#+begin_src emacs-lisp :results silent
(use-package eshell-syntax-highlighting
  :after eshell
  :demand t
  :config
  (add-hook 'eshell-mode-hook #'eshell-syntax-highlighting-global-mode))
#+end_src

** dwim-shell-command
:PROPERTIES:
:ID:       89FC07FE-AB08-4C9C-B999-73D176458C64
:END:

/[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] supports Emacs shell commands with dwim behaviour./

#+begin_src emacs-lisp :results silent
(use-package dwim-shell-command
  :elpaca (dwim-shell-command
             :host github
                   :repo "xenodium/dwim-shell-command"))
#+end_src

* spelling & grammar
:PROPERTIES:
:ID:       CC425FA6-7E2B-45EC-82DD-6D4402C3BE5C
:END:

** jinx
:PROPERTIES:
:ID:       23D402FB-7C7D-454B-9895-B147F0C9950D
:END:

/[[https://github.com/minad/jinx][jinx]] is a highly performant spell-checker for Emacs./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :jinx)
(use-package jinx
  :demand t
  :config
  (setq jinx-languages "en")
  (set-face-attribute 'jinx-misspelled nil :underline '(:color "#008000" :style wave))

  (add-to-list 'vertico-multiform-categories
               '(jinx grid (vertico-grid-annotate . 20)))

  (dolist (hook '(text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook hook #'jinx-mode))

  :general
  ("M-p" (lambda! (jinx-correct 'all))
   "A-M-p" 'jinx-extras-toggle-languages))
#+end_src

** jinx-extras
:PROPERTIES:
:ID:       7C91CA35-275E-446A-ACE8-1214310479BB
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :jinx)
(use-personal-package jinx-extras
  :after jinx
  :demand t)
#+end_src

** flycheck
:PROPERTIES:
:ID:       E407F295-B534-4195-A98C-10A131F391D9
:END:

/[[https://github.com/flycheck/flycheck][flycheck]] is a syntax-checker for Emacs./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :flycheck)
(use-package flycheck
  :demand t
  :init
  (global-flycheck-mode)

  :config
  (setq flycheck-emacs-lisp-load-path 'inherit)
  (setq flycheck-indication-mode nil)
  (setq flycheck-checker-error-threshold 5000)

  ;; Disable `emacs-lisp-checkdoc' in `org-src' blocks.
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))

  (add-hook 'after-change-major-mode-hook
            (lambda ()
              "Disable flycheck in the *scratch* and `notes' buffers."
              (when (or (equal (buffer-name) "*scratch*")
                        (equal (buffer-name) "notes"))
                (flycheck-mode -1))))

  :general
  ("M-k" 'flycheck-next-error))
#+end_src

** consult-flycheck
:PROPERTIES:
:ID:       C205D49D-F578-416E-8047-FC7633D6E4D3
:END:

/[[https://github.com/minad/consult-flycheck][consult-flycheck]] integrates ~flycheck~ with ~consult~./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :flycheck)
(use-package consult-flycheck
  :after consult flyckeck
  :demand t)
#+end_src

** flycheck-ledger
:PROPERTIES:
:ID:       35BCB962-B49F-43D9-A7E8-269CE61EF6C8
:END:

/[[https://github.com/purcell/flycheck-ledger][flycheck-ledger]] provides ~flycheck~ support for ~ledger-mode~./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :flycheck)
(use-package flycheck-ledger
  :after flycheck ledger-mode
  :demand t)
#+end_src

** flycheck-languagetool
:PROPERTIES:
:ID:       761BF4F2-8821-42A6-852C-4C87A248EF90
:END:

/[[https://github.com/emacs-languagetool/flycheck-languagetool][flycheck-languagetool]] provides ~flycheck~ support for [[https://languagetool.org/][LanguageTool]]./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :flycheck)
(use-package flycheck-languagetool
  :after flycheck
  :demand t
  :init
  (setq flycheck-languagetool-server-jar
        (expand-file-name "~/source/LanguageTool/languagetool-server.jar"))

  :config
  ;; the package doesn't provide a general way of disabling rule, but as an
  ;; imperfect workaround we extend the list of rules to ignore when
  ;; spell-checking is active; this works well for rules in prose buffers, since
  ;; I normally have spell-checking enabled there.
  (dolist (rule '("ARROWS"
                  "WHITESPACE_RULE"))
    (add-to-list 'flycheck-languagetool--spelling-rules rule))

  (dolist (hook '(markdown-mode-hook
                  org-mode-hook
                  org-msg-edit-mode-hook))
    (add-hook hook (lambda ()
                     (unless (member major-mode '(forge-post-mode
                                                  gfm-mode
                                                  mhtml-mode
                                                  flycheck-error-message-mode
                                                  mu4e-compose-mode
                                                  mu4e-view-mode
                                                  org-journal-mode
                                                  org-msg-edit-mode))
                       (flycheck-select-checker 'languagetool))))))
#+end_src

* prose
:PROPERTIES:
:ID:       9C33C68A-B82E-4898-B967-337B7D0619EE
:END:

** text-mode
:PROPERTIES:
:ID:       0C671548-8B32-43D6-9F28-88A6B7E3AA06
:END:

#+begin_src emacs-lisp :results silent
(use-feature text-mode
  :demand t
  :config
  (add-hook 'text-mode-hook #'simple-extras-visual-line-mode-enhanced))
#+end_src

** with-editor
:PROPERTIES:
:ID:       48431AA9-2ABE-403C-9E91-68066B24CB26
:END:

#+begin_src emacs-lisp :results silent
(use-feature with-editor
  :general
  ("s-c" 'with-editor-finish
   "s-k" 'with-editor-abort
   "C-c C-c" 'with-editor-finish))
#+end_src

** atomic-chrome
:PROPERTIES:
:ID:       D7CE2507-FDB5-44E9-A129-C18E17590476
:END:
:LOGBOOK:
CLOCK: [2021-05-15 Sat 18:11]--[2021-05-15 Sat 18:19] =>  0:08
CLOCK: [2021-04-17 Sat 21:56]--[2021-04-17 Sat 22:07] =>  0:11
CLOCK: [2021-02-11 Thu 20:46]--[2021-02-11 Thu 20:54] =>  0:08
CLOCK: [2021-02-11 Thu 19:59]--[2021-02-11 Thu 20:02] =>  0:03
:END:

/[[https://github.com/alpha22jp/atomic-chrome][atomic chrome]] enables editing of browser input fields in Emacs./

I use it in combination with the [[https://ghosttext.fregante.com/][Ghost Text]] browser extension.

#+begin_src emacs-lisp :results silent
(use-package atomic-chrome
  :defer 10

  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode)
  (setq atomic-chrome-url-major-mode-alist
   '(("github\\.com" . gfm-mode)
     ("wikipedia\\.org" . mediawiki-mode)
     ("timelines\\.issarice\\.com" . mediawiki-mode)))

  (atomic-chrome-start-server)

  :general
  (atomic-chrome-edit-mode-map
   "s-c" 'atomic-chrome-close-current-buffer))
#+end_src

** markdown-mode
:PROPERTIES:
:ID:       3E05C5A3-B0E2-4800-B497-5AA1F6B39116
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 21:36]--[2021-12-11 Sat 22:05] =>  0:29
CLOCK: [2021-11-17 Wed 17:19]--[2021-11-17 Wed 17:27] =>  0:08
CLOCK: [2021-10-19 Tue 12:32]--[2021-10-19 Tue 13:19] =>  0:47
:END:

/[[https://github.com/jrblevin/markdown-mode][markdown-mode]] is a major mode for editing Markdown-formatted text./

#+begin_src emacs-lisp :results silent
(use-package markdown-mode
  :demand t
  :config
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-command "pandoc --from markdown --to html")
  (setq markdown-disable-tooltip-prompt t)
  (setq markdown-italic-underscore nil)

  :general
  ((gfm-mode-map markdown-mode-map)
   "A-C-H-t" 'markdown-mode-extras-copy-section
   "A-C-s-r" 'markdown-outline-previous
   "A-C-s-f" 'markdown-outline-next
   "M-p" nil
   "s-b" 'markdown-insert-bold
   "s-e" 'markdown-insert-code
   "s-f" 'markdown-insert-footnote
   "s-i" 'markdown-insert-italic
   "s-k" 'markdown-insert-link
   "s-l" 'markdown-mode-extras-insert-locator
   "s-p" 'markdown-preview
   "s-r" 'markdown-mode-extras-remove-url-in-link
   "s-v") ; should convert from html, mirroring the org binding
  ((ghm-mode-map markdown-mode-map org-mode-map)
   "H-s-v" 'markdown-mode-extras-org-paste-dwim)
  (gfm-mode-map
   "s-a" 'markdown-insert-gfm-code-block
   "s-z" 'markdown-edit-code-block))
#+end_src

** markdown-mode-extras
:PROPERTIES:
:ID:       856FDF94-95B6-49EB-A6D5-B95F0A53384A
:END:

#+begin_src emacs-lisp
(use-personal-package markdown-mode-extras
  :after markdown-mode
  :general
  ((gfm-mode-map markdown-mode-map)
   "A-C-H-t" 'markdown-mode-extras-copy-section
   "s-l" 'markdown-mode-extras-insert-locator
   "s-r" 'markdown-mode-extras-remove-url-in-link)
  ((ghm-mode-map markdown-mode-map org-mode-map)
   "H-s-v" 'markdown-mode-extras-org-paste-dwim))
#+end_src

** grip-mode
:PROPERTIES:
:ID:       5F437CCD-14C3-4120-B77E-3E1C7C891819
:END:

/[[https://github.com/seagle0128/grip-mode][grip-mode]] provides org-mode and Github-flavored Markdown preview using grip./

#+begin_src emacs-lisp
(use-package grip-mode
  :config
  (setq grip-github-user (auth-source-pass-get "user" "tlon/core/api.github.com/grip-mode"))
  (setq grip-github-password (auth-source-pass-get 'secret "tlon/core/api.github.com/grip-mode"))

  :general
  ((gfm-mode-map markdown-mode-map)
   "s-w" 'grip-mode))
#+end_src

** xwidget
:PROPERTIES:
:ID:       DA6275F2-F3A2-482E-B7A8-34633775F430
:END:

#+begin_src emacs-lisp
(use-feature xwidget
  :general
  (xwidget-webkit-mode-map
   "," 'xwidget-webkit-scroll-down
   "." 'xwidget-webkit-scroll-up
   "j" 'xwidget-webkit-scroll-top
   ";" 'xwidget-webkit-scroll-bottom))
#+end_src

** edit-indirect
:PROPERTIES:
:ID:       5660F943-C895-4847-A538-0FA11445420C
:END:

/[[https://github.com/Fanael/edit-indirect][edit-indirect]] supports editing regions in separate buffers./

This package is required by the ~markdown-mode~ command ~markdown-edit-code-block~.

#+begin_src emacs-lisp
(use-package edit-indirect)
#+end_src

** mediawiki-el
:PROPERTIES:
:ID:       721F42DA-7E97-4C9A-9DBF-8A841DDE99A9
:END:

/[[https://github.com/hexmode/mediawiki-el][mediawiki-el]] is an Emacs interface to editing mediawiki sites./

#+begin_src emacs-lisp :results silent
(use-package mediawiki
  :demand t
  :after atomic-chrome)
#+end_src

** gdrive
:PROPERTIES:
:ID:       CC5C7599-DFA7-48A8-8BA0-3DABE8A3171E
:END:
:LOGBOOK:
CLOCK: [2021-12-07 Tue 17:12]--[2021-12-07 Tue 18:05] =>  0:53
CLOCK: [2021-12-03 Fri 23:10]--[2021-12-04 Sat 01:01] =>  1:51
CLOCK: [2021-12-03 Fri 22:21]--[2021-12-03 Fri 23:02] =>  0:41
:END:
To reinstall:
- Clone this [[https://github.com/glotlabs/gdrive][repo]].
- Edit the ~clientId~ and ~clientSecret~ in the file ~handlers_drive.go~ with the values stored in ~pass~ (search for ~gdrive~).
- Within the locally cloned repo, run ~go install~.

*** TODO Develop package
:PROPERTIES:
:ID:       990D5C3F-0725-4BDB-A931-86762BCE7D69
:END:
*** TODO [#5] Write command to create new Google Doc in chosen folder
:PROPERTIES:
:Effort:   0:30
:ID:       4D8E953E-44F4-4546-8BF9-08D8983CA699
:END:
:LOGBOOK:
CLOCK: [2022-05-19 Thu 20:30]--[2022-05-19 Thu 20:33] =>  0:03
:END:

** ledger-mode
:PROPERTIES:
:ID:       6C259EFC-0CF9-4CD7-A8C5-B29B66E98776
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 08:15]--[2022-05-06 Fri 08:28] =>  0:13
CLOCK: [2021-11-23 Tue 10:22]--[2021-11-23 Tue 10:31] =>  0:09
CLOCK: [2021-11-17 Wed 17:35]--[2021-11-17 Wed 17:43] =>  0:08
CLOCK: [2021-10-13 Wed 11:37]--[2021-10-13 Wed 11:54] =>  0:17
CLOCK: [2021-10-08 Fri 18:32]--[2021-10-08 Fri 18:59] =>  0:27
CLOCK: [2021-08-19 Thu 17:50]--[2021-08-19 Thu 18:11] =>  0:21
:END:

/[[https://github.com/ledger/ledger-mode][ledger-mode]] is a major mode for interacting with the Ledger accounting system./

To populate the database of historical prices:
- commodities: https://github.com/LukasJoswiak/blog-code/blob/master/2020/tracking-commodity-prices-ledger/prices.py
  - accompanying post: https://lukasjoswiak.com/tracking-commodity-prices-in-ledger/
- crypto: https://github.com/cjtapper/coinprices
- currencies: https://github.com/wakatara/get-FX
  - couldn't make it work, so I just entered the rates manually once and will use those

#+begin_src emacs-lisp :results silent
(use-package ledger-mode
  :defer 30
  :config
  (setq ledger-default-date-format ledger-iso-date-format)
  (setq ledger-reconcile-default-commodity "ARS")
  (setq ledger-schedule-file paths-file-tlon-ledger-schedule-file)
  (setq ledger-schedule-look-forward 0)
  (setq ledger-schedule-look-backward 30)

  :config
  (dolist (report
           '(("net worth"
              "%(binary) -f %(ledger-file) bal --strict")
             ("net worth (USD)"
              "%(binary) -f %(ledger-file) --price-db .pricedb --exchange USD bal ^assets ^liabilities --strict")
             ("account (USD)"
              "%(binary) -f %(ledger-file) reg %(account) --price-db .pricedb --exchange USD")
             ;; I need to understand how the `--basis' flag works
             ("cost basis"
              "%(binary) -f %(ledger-file) --basis bal %(account) --strict")))

    (add-to-list 'ledger-reports report))

  :general
  (ledger-mode-map
   "M-p" nil
   "M-n" nil
   "s-SPC" 'ledger-mode-extras-new-entry-below
   "s-=" 'ledger-reconcile
   "s-a" 'ledger-add-transaction
   "M-s-a" 'ledger-mode-extras-report-account
   "s-b" 'ledger-post-edit-amount
   "M-s-b" 'ledger-mode-extras-decrease-date-by-one-day
   "s-c" 'ledger-mode-extras-align-and-next
   "M-s-c" 'ledger-mode-extras-copy-transaction-at-point
   "s-d" 'ledger-delete-current-transaction
   "s-e" 'mode-mode-extras-extras-sort-region-or-buffer-reversed
   "M-s-e" 'ledger-toggle-current-transaction
   "s-f" 'ledger-occur
   "M-s-f" 'ledger-mode-extras-increase-date-by-one-day
   "s-g" 'ledger-report-goto
   "s-i" 'ledger-insert-effective-date
   "s-y" 'ledger-copy-transaction-at-point
   "s-k" 'ledger-report-quit
   "s-l" 'ledger-display-ledger-stats
   "s-o" 'ledger-report-edit-report
   "s-p" 'ledger-display-balance-at-point
   "M-s-p" 'mode-mode-extras-extras-report-net-worth-USD
   "s-q" 'ledger-post-align-dwim
   "s-r" 'ledger-report
   "s-s" 'ledger-report-save
   "s-t" 'ledger-mode-extras-sort-region-or-buffer
   "M-s-t" 'ledger-mode-extras-sort-region-or-buffer-reversed
   "s-u" 'ledger-schedule-upcoming
   "M-s-u" 'ledger-mode-extras-report-net-worth-USD
   "s-v" 'ledger-copy-transaction-at-point
   "M-s-w" 'ledger-mode-extras-report-net-worth
   "s-x" 'ledger-fully-complete-xact
   "s-z" 'ledger-report-redo
   "A-C-s-r" 'ledger-navigate-prev-xact-or-directive
   "A-C-s-f" 'ledger-navigate-next-xact-or-directive)
  (ledger-reconcile-mode-map
   "q" 'ledger-reconcile-quit))
#+end_src

*** TODO Run python scripts via LaunchAgent
:PROPERTIES:
:ID:       E235F4DC-677D-4143-A679-66FCBC310101
:END:

*** resources
:PROPERTIES:
:ID:       FD6B578E-9794-4C38-A2F3-5A877ED2C4C8
:END:
- [[https://devhints.io/ledger][Ledger CLI cheatsheet]]
- [[https://github.com/davidkeegan/dklrt][GitHub - davidkeegan/dklrt: Ledger Recurring Transactiions.]]
- [[https://rolfschr.github.io/gswl-book/latest.html][Getting Started With Ledger - August 28, 2019 201f047]]
- [[https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html][Using Ledger for YNAB-like envelope budgeting]]
- [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][TIP: How I use ledger to track my money : emacs]]
- [[https://news.ycombinator.com/item?id=7708777][The reasons why I tried and failed with ledger: - I never quite understood how t... | Hacker News]]
- [[https://github.com/marbu/ledger-bank-import][GitHub - marbu/ledger-bank-import: convert bank csv files into ledger-cli file format]]
- [[https://felixcrux.com/blog/ledger-practices][Ledger Practices - Felix Crux]]

*** how to start from scratch
:PROPERTIES:
:ID:       49D7A193-157E-4A10-9C33-98727FC191BF
:END:
1. [[https://felixcrux.com/blog/ledger-practices-create-a-ledgerrc][create a ~.ledgerrc~ file]]

** ledger-mode-extras
:PROPERTIES:
:ID:       3FC5A39F-AEA9-4D54-AB55-836F58DA8103
:END:

#+begin_src emacs-lisp
(use-personal-package ledger-mode-extras
  :after ledger-mode
  :demand t
  :general
  (ledger-mode-map
   "A-s-c" 'ledger-mode-extras-copy-transaction-at-point
   "s-x" 'ledger-mode-extras-kill-transaction-at-point))
#+end_src

** ledger-prices
:PROPERTIES:
:ID:       1A1A2A24-6FE4-462D-A6A3-E5E22521558D
:END:
:LOGBOOK:
CLOCK: [2023-10-24 Tue 18:58]--[2023-10-24 Tue 20:33] =>  1:35
:END:

#+begin_src emacs-lisp
(use-package ledger-prices
  :elpaca (ledger-prices
           :host github
           :repo "benthamite/ledger-prices")
  :defer 5
  :after ledger-mode
  :config
  (setq ledger-prices-api-key-finnhub (auth-source-pass-get 'secret "chrome/api.finnhub.io"))
  (setq ledger-prices-api-key-exchangerates (auth-source-pass-get 'secret "chrome/api.exchangeratesapi.io"))
  (setq ledger-prices-pricedb-file paths-file-ledger-db)
  (setq ledger-prices-stocks '("NVDA" "TSLA"))
  (setq ledger-prices-currencies '("USD" "EUR" "GBP" "MXN" "ARS")))
#+end_src

* translation
:PROPERTIES:
:ID:       1A1D70D3-DBB4-4EEC-A83E-15FD4348ED94
:END:

** tlon-babel
:PROPERTIES:
:ID:       5EDD6F28-3299-4D90-83E1-C7476176277D
:END:

#+begin_src emacs-lisp
(use-package tlon-babel
  :elpaca (tlon-babel
           :host github
           :repo "tlon-team/tlon-babel"
           :depth nil) ; clone entire repo, not just last commit
  :demand t
  :config
  (setq tlon-babel-todos-jobs-id "F99006B0-3AFC-47A0-98C5-89FB86ADCDFB")
  (setq tlon-babel-todos-generic-id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
  (add-hook 'tlon-init-post-init-hook #'tlon-babel-init)

  :general
  ("H-r" 'tlon-babel-dispatch)
  ((forge-topic-mode-map
    forge-issue-list-mode-map
    forge-pullreq-list-mode-map
    magit-status-mode-map)
   "," 'tlon-babel-visit-counterpart-or-capture)
  (magit-status-mode-map
   "s-r" 'tlon-babel-commit-when-slug-at-point)
  ((forge-topic-mode-map magit-status-mode-map)
   "'" 'tlon-babel-open-forge-file)
  ((gfm-mode-map markdown-mode-map)
   "A-s-e" 'tlon-babel-yaml-edit-field
   "s-c" 'tlon-babel-copy-dwim
   "s-t" 'tlon-babel-insert-cite-tag
   "s-u" 'tlon-babel-markdown-insert-element
   "A-C-s-<tab>" 'tlon-babel-markdown-end-of-buffer-dwim)
  (github-review-mode-map
   "s-c" 'tlon-babel-submit-comment-revisions))
#+end_src


** go-translate
:PROPERTIES:
:ID:       543F613A-F3B8-426C-8505-48782483FBEC
:END:

/[[https://github.com/lorniu/go-translate][go-translate]] is an Emacs translator that supports multiple translation engines./

#+begin_src emacs-lisp :tangle no
(use-package go-translate
  :demand t
  :config
  (setq gts-translate-list '(("en" "es")))
  (setq gts-default-translator
        (gts-translator

         :picker ; used to pick source text, from, to. choose one.

         ;;(gts-noprompt-picker)
         ;;(gts-noprompt-picker :texter (gts-whole-buffer-texter))
         (gts-prompt-picker)
         ;;(gts-prompt-picker :single t)
         ;;(gts-prompt-picker :texter (gts-current-or-selection-texter) :single t)

         :engines ; engines, one or more. Provide a parser to give different output.

         (list
          ;; (gts-bing-engine)
          ;;(gts-google-engine)
          ;;(gts-google-rpc-engine)
          (gts-deepl-engine :auth-key (auth-source-pass-get "key" (concat "tlon/babel/deepl.com/" tlon-core-email-shared)) :pro nil)
          ;; (gts-google-engine :parser (gts-google-summary-parser))
          ;;(gts-google-engine :parser (gts-google-parser))
          ;;(gts-google-rpc-engine :parser (gts-google-rpc-summary-parser) :url "https://translate.google.com")
          ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url "https://translate.google.com")
          )

         :render ; render, only one, used to consumer the output result. Install posframe yourself when use gts-posframe-xxx

         ;; (gts-buffer-render)
         ;;(gts-posframe-pop-render)
         ;;(gts-posframe-pop-render :backcolor "#333333" :forecolor "#ffffff")
         ;; (gts-posframe-pin-render)
         ;;(gts-posframe-pin-render :position (cons 1200 20))
         ;;(gts-posframe-pin-render :width 80 :height 25 :position (cons 1000 20) :forecolor "#ffffff" :backcolor "#111111")
         (gts-kill-ring-render)

         :splitter ; optional, used to split text into several parts, and the translation result will be a list.

         (gts-paragraph-splitter)
         ))
  )
#+end_src


** powerthesaurus
:PROPERTIES:
:ID:       81CC0280-A8A5-4C8F-BF05-D324EB917DCD
:END:

/[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]] is an Emacs client for [[https://www.powerthesaurus.org/][power thesaurus]]./

#+begin_src emacs-lisp :results silent
(use-package powerthesaurus
  :general
  ("H-y" 'powerthesaurus-transient))
#+end_src

** goldendict-ng
:PROPERTIES:
:ID:       32143368-5DE3-44F5-A35B-05F157DEC2A5
:END:
:LOGBOOK:
CLOCK: [2023-11-09 Thu 14:32]--[2023-11-09 Thu 15:00] =>  0:28
CLOCK: [2021-11-24 Wed 15:26]--[2021-11-24 Wed 16:24] =>  0:58
:END:

/[[https://github.com/benthamite/goldendict-ng][goldendict-ng]] integrates [[https://github.com/xiaoyifang/goldendict-ng][GoldenDict]] with Emacs./

#+begin_src emacs-lisp
(use-package goldendict-ng
  :elpaca (goldendict-ng
           :host github
           :repo "benthamite/goldendict-ng")
  :demand t
  :config
  (setq goldendict-ng-executable "/Applications/GoldenDict.app/Contents/MacOS/GoldenDict")
  (setq goldendict-ng-groups '(("es-es" . "es")
                               ("es-en" . "es")
                               ("en-en" . "en")
                               ("en-es" . "en")
                               ("fr-es" . "fr")))
  (setq goldendict-ng-groups-enforce t)
  (setq goldendict-ng-narrow-groups-to-matching-languages t)
  (setq goldendict-ng-auto-select-sole-candidate t)
  (setq goldendict-ng-count-all-group-in-auto-selection nil)

  :general
  ("A-y" 'goldendict-ng-search))
#+end_src

** reverso
:PROPERTIES:
:ID:       F3063A73-ED50-42BD-8ABD-8D7FC68758FD
:END:
:LOGBOOK:
CLOCK: [2023-05-11 Thu 20:24]--[2023-05-11 Thu 20:27] =>  0:03
CLOCK: [2022-08-31 Wed 23:01]--[2022-08-31 Wed 23:11] =>  0:10
:END:

/[[https://github.com/SqrtMinusOne/reverso.el][reverso]] is an Emacs client for [[https://www.reverso.net/][reverso]]./

#+begin_src emacs-lisp
(use-package reverso
  :elpaca (reverso
           :host github
           :repo "SqrtMinusOne/reverso.el")
  :config
  (setq reverso-languages '(spanish english french german italian portuguese))

  :general
  ("H-Y" 'reverso))
#+end_src

* docs
:PROPERTIES:
:ID:       6C0D0737-734E-4EAB-8A3F-138EF990B967
:END:

** pdf-tools
:PROPERTIES:
:ID:       B4272338-4DCA-44FC-9330-804CC88BF189
:END:
:LOGBOOK:
CLOCK: [2022-07-23 Sat 14:07]--[2022-07-23 Sat 14:20] =>  0:13
CLOCK: [2022-07-23 Sat 13:06]--[2022-07-23 Sat 14:02] =>  0:56
CLOCK: [2021-11-16 Tue 18:40]--[2021-11-16 Tue 19:02] =>  0:22
CLOCK: [2021-07-29 Thu 22:42]--[2021-07-29 Thu 23:08] =>  0:26
CLOCK: [2021-07-25 Sun 15:35]--[2021-07-25 Sun 15:42] =>  0:07
CLOCK: [2021-06-10 Thu 19:08]--[2021-06-10 Thu 19:20] =>  0:12
CLOCK: [2021-02-23 Tue 10:59]--[2021-02-23 Tue 11:05] =>  0:06
:END:

/[[https://github.com/vedang/pdf-tools][pdf-tools]] is a support library for PDF files./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :pdf-tools)
(use-package pdf-tools
  :defer 10
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (setq pdf-view-use-scaling t)
  (setq pdf-view-use-imagemagick nil)
  (setq pdf-view-resize-factor 1.1)
  (setq pdf-annot-default-annotation-properties
        '((t
           (label . user-full-name))
          (text
           (color . "#ff0000")
           (icon . "Note"))
          (highlight
           (color . "LightBlue2"))
          (underline
           (color . "blue"))
          (squiggly
           (color . "orange"))
          (strike-out
           (color . "red"))))

  (unless (or noninteractive (eq this-command 'pdf-tools-install))
    (pdf-tools-install))

  (add-hook 'pdf-tools-enabled-hook #'pdf-view-fit-page-to-window)
  (add-hook 'pdf-tools-enabled-hook #'sow-mode)

  :general
  ((pdf-view-mode-map pdf-annot-minor-mode-map pdf-history-minor-mode-map)
   "e" 'pdf-annot-add-highlight-markup-annotation
   "j" 'pdf-view-goto-page
   "k" 'pdf-view-previous-line-or-previous-page
   "l" 'pdf-view-next-line-or-next-page
   "H-c" 'pdf-view-kill-ring-save
   "A-u" 'pdf-view-midnight-minor-mode))
#+end_src

*** TODO [#4] Tweak chrome headless command so that chrome authenticates before printing a pdf
:PROPERTIES:
:ID:       BDE975FE-56AA-45C3-AF47-C70503051B30
:Effort:   0:20
:END:
:LOGBOOK:
CLOCK: [2023-11-25 Sat 22:25]--[2023-11-25 Sat 23:33] =>  1:08
:END:
https://stackoverflow.com/questions/62602327/headless-chrome-sharing-credentials
Modify the Keyboard Maestro script called ~Chrome: save webpage as PDF (v)~

** pdf-tools-extras
:PROPERTIES:
:ID:       C4B53EDC-372F-42B2-924E-FE48647B67AE
:END:

#+begin_src emacs-lisp
(use-personal-package pdf-tools-extras
  :after pdf-tools
  :demand t
  :config
  (add-hook 'pdf-tools-enabled-hook #'pdf-tools-extras-apply-theme)

  :general
  ((pdf-view-mode-map pdf-annot-minor-mode-map pdf-history-minor-mode-map)
   "c" 'pdf-tools-extras-copy-dwim
   "C" 'pdf-count-extras-words
   "s-c" 'pdf-tools-extras-clear-page-selection
   "D" 'pdf-tools-extras-delete
   "h" 'pdf-annot-extras-add-highlight-markup-annotation
   "t" 'pdf-tools-extras-toggle-writeroom
   "x" 'pdf-tools-extras-open-externally
   "S" 'pdf-tools-extras-add-or-remove-page
   "X" 'pdf-tools-extras-extract-pages))
#+end_src

** scroll-other-window
:PROPERTIES:
:ID:       4F29AAB8-CC48-4216-B309-2C26337FE12B
:END:

/[[https://github.com/benthamite/scroll-other-window][scroll-other-window]] enables scrolling of the other window in ~pdf-tools~./

#+begin_src emacs-lisp
(use-package scroll-other-window
  :elpaca (scroll-other-window
             :host github
             :repo "benthamite/scroll-other-window")
  :after pdf-tools
  :demand t

  :general
  (sow-mode-map
   "A-C-s-t" 'sow-scroll-other-window-down
   "A-C-s-g" 'sow-scroll-other-window))
#+end_src

** pdf-view-restore
:PROPERTIES:
:ID:       159A7ABF-5D9C-46C3-BAA2-C1E486682875
:END:

/[[https://github.com/007kevin/pdf-view-restore][pdf-view-restore]] adds support to saving and reopening last known pdf position./

#+begin_src emacs-lisp :results silent
(use-package pdf-view-restore
  :after pdf-tools
  :demand t
  :config
  (add-hook 'pdf-view-mode-hook #'pdf-view-restore-mode))
#+end_src

** org-pdftools
:PROPERTIES:
:ID:       028468CA-0334-45AE-A476-028D9A300065
:END:

/[[https://github.com/fuxialexander/org-pdftools][org-pdftools]] adds org link support for [[id:B4272338-4DCA-44FC-9330-804CC88BF189][pdf-tools]]./

#+begin_src emacs-lisp :results silent
(use-package org-pdftools
  :after org pdf-tools
  :defer 30
  :config
  (add-hook 'org-mode-hook #'org-pdftools-setup-link))
#+end_src

** nov
:PROPERTIES:
:ID:       CA54F4D1-2562-483A-BBD0-67A039E0F2FC
:END:

/[[https://depp.brause.cc/nov.el/][nov]] is a major mode for reading EPUBs in Emacs./

#+begin_src emacs-lisp
(use-package nov)
#+end_src

** djvu
:PROPERTIES:
:ID:       CB96565F-C0FF-454C-A1F1-E986BC45EDDE
:END:

/[[https://elpa.gnu.org/packages/djvu.html][djvu]] is a major mode for viewing and editing Djvu files in Emacs./

#+begin_src emacs-lisp
(use-package djvu)
#+end_src

* prog-mode
:PROPERTIES:
:ID:       A8700D18-574A-4093-938C-5707589DBB41
:END:

#+begin_src emacs-lisp :results silent
(use-feature prog-mode
  :demand t
  :config
  (global-prettify-symbols-mode)

  :general
  ("A-H-v" 'set-variable
   "M-d" 'toggle-debug-on-error
   "A-M-d" 'toggle-debug-on-quit)
  (prog-mode-map
   "A-H-C-i" 'mark-defun
   "s-e" 'xref-find-definitions
   "s-f" 'consult-flycheck
   "s-q" 'prog-fill-reindent-defun)
  ((emacs-lisp-mode-map shell-mode-map)
   "s-c" 'exit-recursive-edit))
#+end_src

** elisp-mode
:PROPERTIES:
:ID:       24475DE5-E129-4832-BAE5-C22D846C251E
:END:

#+begin_src emacs-lisp :results silent
(use-feature elisp-mode
  :after simple-extras
  :general
  (emacs-lisp-mode-map
   "s-d" 'eval-defun
   "s-i" (lambda! (eval-defun t)) ; instrument defun
   ))
#+end_src

*** TODO [#6] Learn to use all relevant sexp commands
:PROPERTIES:
:Effort:   0:30
:ID:       89FDC8BC-DD5B-4616-8E73-37EDD9C088C1
:END:
Some are mentioned [[https://stackoverflow.com/questions/4304925/why-is-it-customary-to-put-many-closing-parentheses-on-one-line-in-lisp-based-la][here]].

** lisp-mode
:PROPERTIES:
:ID:       E6608F6D-CC63-4A0B-A6B5-D012D3065801
:END:

#+begin_src emacs-lisp
(use-feature lisp-mode
  :demand t
  :config
  ;; default is 65, which overrides the value of `fill-column'
  (setq emacs-lisp-docstring-fill-column nil))
#+end_src

** s
:PROPERTIES:
:ID:       127B298B-BD3E-42BD-8032-D20B29075DA0
:END:

/[[https://github.com/magnars/s.el][s]] is a string manipulation library./

#+begin_src emacs-lisp
(use-package s
  :demand t)
#+end_src

** debug
:PROPERTIES:
:ID:       AACCFE88-084B-4428-82DB-7C695D9624C4
:END:

#+begin_src emacs-lisp
(use-feature debug
  :demand t)
#+end_src

** edebug
:PROPERTIES:
:ID:       021794F3-1663-449D-B4B7-41C6F3A72083
:END:

#+begin_src emacs-lisp
(use-feature edebug
  :demand t
  :config
  ;; do not truncate print results in Edebug
  (setq edebug-print-level nil)
  (setq edebug-print-length nil)

  :general
  (emacs-lisp-mode-map
   "M-s-d" 'edebug-defun))
#+end_src

** backtrace
:PROPERTIES:
:ID:       B69F718B-9BAE-4EAD-99DE-2C8C1E98CCA3
:END:

#+begin_src emacs-lisp :results silent
(use-feature backtrace
  :config
  (setq backtrace-line-length nil))
#+end_src

** macrostep
:PROPERTIES:
:ID:       8AE42CAA-5B62-4B1C-9C7C-DFD72AC5B3CD
:END:

/[[https://github.com/joddie/macrostep][macrostep]] is an interactive macro-expander./

See [[https://www.youtube.com/watch?v=odkYXXYOxpo][this video]] (starting at 7:30) for an introduction to this package.

#+begin_src emacs-lisp :results silent
(use-package macrostep)
#+end_src

** clojure
:PROPERTIES:
:ID:       A9508F41-E82B-4E6C-9304-53981A8F0C27
:END:

/[[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] provides support for the Clojure(Script) programming language./

#+begin_src emacs-lisp :results silent
(use-package clojure-mode)
#+end_src

** python
:PROPERTIES:
:ID:       D00C20E4-925A-41E1-95BD-5BF8BA03637C
:END:

#+begin_src emacs-lisp :results silent
(use-feature python
  :config
  (setq python-shell-interpreter "python3")
  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  (setq flycheck-python-pycompile-executable "python3")
  (remove-hook 'python-mode-hook #'yasnippet-snippets--fixed-indent) ; some package (`elpy'?) is adding this

  :general
  ((python-mode-map python-ts-mode-map)
   "C-c p" 'run-python
   "s-l" 'python-shell-send-file
   "s-d" 'python-shell-send-defun
   "s-c" 'python-shell-send-buffer
   "s-s" 'python-shell-send-string
   "s-r" 'python-shell-send-region
   "s-e" 'python-shell-send-statement))
#+end_src

** emacs-ipython-notebook
:PROPERTIES:
:ID:       3F0CEFB0-2983-4659-AB1F-6936AD8BF0FC
:END:

/[[https://github.com/millejoh/emacs-ipython-notebook][emacs-ipython-notebook]] is a Jupyter notebook client in Emacs./

This needs to be configured.

#+begin_src emacs-lisp
(use-package ein)
#+end_src

** applescript-mode
:PROPERTIES:
:ID:       6F36A349-196D-40A8-9338-61DB3C86D760
:END:

/[[https://github.com/emacsorphanage/applescript-mode][applescript-mode]] is a major mode for editing AppleScript./

#+begin_src emacs-lisp :results silent
(use-package applescript-mode)
#+end_src

** json-mode
:PROPERTIES:
:ID:       7B4A0E63-4509-4BC0-AE08-08F517911959
:END:

#+begin_src emacs-lisp
(use-package json-mode
  :demand t)
#+end_src

** csv-mode
:PROPERTIES:
:ID:       44D557E4-026E-425C-B1C9-B26F4B6197E4
:END:

/[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] is a major mode for editing comma-separated values./

#+begin_src emacs-lisp
(use-package csv-mode
  :demand t)
#+end_src

** js2-mode
:PROPERTIES:
:ID:       14639C64-720D-4105-B31B-3A84A447D19F
:END:

/[[https://github.com/mooz/js2-mode][js2-mode]] is a Javascript editing mode for Emacs./

#+begin_src emacs-lisp
(use-package js2-mode
  :demand t)
#+end_src

** puni
:PROPERTIES:
:ID:       27705B8C-C2F7-4BE1-9510-8BE0993EAB4A
:END:
:LOGBOOK:
CLOCK: [2023-08-12 Sat 19:13]--[2023-08-12 Sat 19:43] =>  0:30
:END:

#+begin_src emacs-lisp
(use-package puni
  :general
  (prog-mode-map
   "C-H-M-r" 'puni-forward-kill-word
   "C-H-M-q" 'puni-backward-kill-word
   "C-H-M-v" 'puni-kill-line
   "C-H-M-z" 'puni-backward-kill-line
   "A-C-s-d" 'puni-forward-sexp
   "A-C-s-e" 'puni-backward-sexp
   "A-C-s-r" 'puni-beginning-of-sexp
   "A-C-s-f" 'puni-end-of-sexp
   "A-C-H-j" 'puni-mark-sexp-at-point
   "A-C-H-k" 'puni-mark-sexp-around-point))
#+end_src

** hideshow
:PROPERTIES:
:ID:       8E6459FA-9978-42F8-9DAC-C4D7FB385F97
:END:

/hideshow is a minor mode for block hiding and showing./

[2023-03-01 Wed 03:56] I don't remember why I created this hook.

#+begin_src emacs-lisp
(use-feature hideshow
  :demand t

  :config
  (add-hook 'prog-mode-hook #'hs-minor-mode))
#+end_src

** aggressive-indent
:PROPERTIES:
:ID:       94B7795A-09C3-4627-934D-1F4AEB14F7C0
:END:

/[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] keeps code always indented./

#+begin_src emacs-lisp
(use-package aggressive-indent
  :defer 5
  :config
  (global-aggressive-indent-mode))
#+end_src

** elpy
:PROPERTIES:
:ID:       E96C6026-AEFA-42A1-930E-863EA3FF651E
:END:
:LOGBOOK:
CLOCK: [2021-11-25 Thu 17:39]--[2021-11-25 Thu 17:51] =>  0:12
CLOCK: [2021-11-01 Mon 12:09]--[2021-11-01 Mon 12:10] =>  0:01
:END:

/[[https://github.com/jorgenschaefer/elpy][elpy]] is an Emacs Python development environment./

#+begin_src emacs-lisp :results silent
(use-package elpy
  :config
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-virtualenv-path 'current)
  (elpy-enable))
#+end_src

** eldoc
:PROPERTIES:
:ID:       6DF08967-7BC0-4DA6-9E19-63B903675EF1
:END:
:LOGBOOK:
CLOCK: [2022-06-19 Sun 07:14]--[2022-06-19 Sun 07:31] =>  0:17
:END:

/[[https://elpa.gnu.org/packages/eldoc.html][eldoc]] show function arglist or variable docstring in echo area./

#+begin_src emacs-lisp :results silent
(use-feature eldoc
  :demand t
  :config
  ;; emacs.stackexchange.com/a/55914/32089
  (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
    "If SYM is a function, append its docstring."
    (concat
     (apply orig-fun sym r)
     (let* ((doc (and (fboundp sym) (documentation sym 'raw)))
            (oneline (and doc (substring doc 0 (string-match "\n" doc)))))
       (and oneline
            (stringp oneline)
            (not (string= "" oneline))
            (concat "  |  " (propertize oneline 'face 'italic))))))

  (global-eldoc-mode))
#+end_src

* AI
:PROPERTIES:
:ID:       9846A789-9972-438B-9B6F-FE6BBBD3020E
:END:

There is an abundance of Emacs GPT packages. See [[https://news.ycombinator.com/item?id=35254389][here]] for a partial list.

** copilot
:PROPERTIES:
:ID:       2064FE34-0301-4E33-AB51-FE4921CA0E16
:END:

/[[https://github.com/zerolfx/copilot.el][copilot]] is an unofficial Copilot plugin for Emacs./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :copilot)
(use-package copilot
  :elpaca (:host github
                 :repo "zerolfx/copilot.el"
                 :build (:not elpaca--check-version)
                 :files ("dist" "*.el"))
  :demand t

  :config
  (setq copilot-node-executable "/opt/homebrew/opt/node/bin/node")
  (setq copilot-log-max 1000)
  (setq copilot-max-char 1000000)

  (add-hook 'prog-mode-hook (lambda ()
                              (unless (eq major-mode 'dsssl-mode)
                                (copilot-mode))))
  (add-hook 'copilot-mode-hook (lambda ()
                                 (setq-local copilot--indent-warning-printed-p t)))

  :general
  (copilot-completion-map
   "s-C-g" 'copilot-clear-overlay
   "<tab>" 'copilot-accept-completion-by-line
   "M-<tab>" 'copilot-accept-completion
   "M-k" 'copilot-previous-completion
   "M-l" 'copilot-next-completion
   "M-;" 'copilot-accept-completion-by-word))
#+end_src

** gptel
:PROPERTIES:
:ID:       B84D396B-D1FD-4718-9002-58DEB1BB85E1
:END:
:LOGBOOK:
CLOCK: [2023-10-31 Tue 13:53]--[2023-10-31 Tue 14:02] =>  0:09
:END:

/[[https://github.com/karthink/gptel][gptel]] is a ChatGPT client for Emacs./

#+begin_src emacs-lisp
(use-package gptel
  :defer 10
  :config
  (setq gptel-api-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
  (setq gptel-default-mode 'org-mode))
#+end_src

** gptel-extras
:PROPERTIES:
:ID:       AEA2E978-0321-4F3D-B3EB-14CDA505A9D9
:END:

#+begin_src emacs-lisp
(use-personal-package gptel-extras
  :after gptel
  :demand t)
#+end_src

** org-ai
:PROPERTIES:
:ID:       DE0368E4-FFE7-42D8-8557-2D5DD4DA5BF5
:END:

/[[https://github.com/rksm/org-ai][org-ai]] turns Emacs into your personal AI assistant using ChatGPT, DALL-E, and Whisper./

#+begin_src emacs-lisp
(use-package org-ai
  :elpaca  (org-ai :type git :host github :repo "rksm/org-ai"
                   :local-repo "org-ai"
                   :files ("*.el" "README.md" "snippets"))
  :after org yasnippet
  :commands org-ai-mode
  :config
  (setq org-ai-openai-api-token (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
  (setq org-ai-default-chat-model "gpt-4")
  (setq org-ai-default-chat-system-prompt "You are a helpful and competent assistant. Please omit any disclaimers")
  (setq org-ai-talk-say-words-per-minute 210)
  (setq org-ai-image-directory paths-dir-org-images)
  (org-ai-install-yasnippets)
  (require 'org-ai-talk))
#+end_src

** gpt-commit
:PROPERTIES:
:ID:       735CC302-C86D-4886-A78B-8EF89171086C
:END:

/[[https://github.com/ywkim/gpt-commit][gpt-commit]] generates conventional commit messages using GPT./

#+begin_src emacs-lisp
(use-package gpt-commit
  ;; :defer 5
  :config
  (setq gpt-commit-openai-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-core-email-shared)))
  (setq gpt-commit-model-name "gpt-4"))
#+end_src

** whisper
:PROPERTIES:
:ID:       19FF2502-D4A0-41CC-8F72-E1CF1D960304
:END:

/[[https://github.com/natrys/whisper.el][whisper]] is a speech-to-Text interface for Emacs using OpenAI's whisper model and whisper.cpp as inference engine./

#+begin_src emacs-lisp
(use-package whisper
  :elpaca (whisper.el
           :host github
           :repo "natrys/whisper.el"
           :protocol ssh)
  :config
  (setq whisper-install-directory no-littering-var-directory)
  (setq whisper--ffmpeg-input-device ":0"))
#+end_src

* org-mode
:PROPERTIES:
:ID:       0E2FD90A-8A8A-4625-ABEA-D82DD3CC88A0
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 21:27]--[2021-11-19 Fri 21:30] =>  0:03
CLOCK: [2021-11-18 Thu 19:05]--[2021-11-18 Thu 19:28] =>  0:23
CLOCK: [2021-07-22 Thu 12:06]--[2021-07-22 Thu 12:12] =>  0:06
CLOCK: [2021-07-11 Sun 11:16]--[2021-07-11 Sun 11:46] =>  0:30
CLOCK: [2021-04-06 Tue 20:40]--[2021-04-06 Tue 21:10] =>  0:30
CLOCK: [2021-04-06 Tue 13:12]--[2021-04-06 Tue 13:48] =>  0:36
CLOCK: [2021-03-30 Tue 09:36]--[2021-03-30 Tue 09:42] =>  0:06
CLOCK: [2021-03-25 Thu 22:19]--[2021-03-25 Thu 23:00] =>  0:41
CLOCK: [2021-03-17 Wed 19:33]--[2021-03-17 Wed 20:00] =>  0:27
CLOCK: [2021-03-17 Wed 15:42]--[2021-03-17 Wed 15:48] =>  0:06
CLOCK: [2021-03-16 Tue 20:03]--[2021-03-16 Tue 20:21] =>  0:18
CLOCK: [2021-03-16 Tue 16:17]--[2021-03-16 Tue 16:18] =>  0:01
CLOCK: [2021-03-09 Tue 21:18]--[2021-03-09 Tue 21:26] =>  0:08
CLOCK: [2021-03-04 Thu 10:04]--[2021-03-04 Thu 10:10] =>  0:06
CLOCK: [2021-03-02 Tue 10:14]--[2021-03-02 Tue 10:23] =>  0:09
CLOCK: [2021-02-20 Sat 22:09]--[2021-02-20 Sat 22:20] =>  0:11
CLOCK: [2021-02-05 Fri 19:19]--[2021-02-05 Fri 19:25] =>  0:06
CLOCK: [2021-02-05 Fri 19:00]--[2021-02-05 Fri 19:09] =>  0:09
CLOCK: [2021-01-30 Sat 21:39]--[2021-01-30 Sat 22:28] =>  0:49
CLOCK: [2021-01-29 Fri 15:32]--[2021-01-29 Fri 15:46] =>  0:14
CLOCK: [2021-01-28 Thu 18:52]--[2021-01-28 Thu 18:54] =>  0:02
CLOCK: [2021-01-28 Thu 17:42]--[2021-01-28 Thu 18:17] =>  0:35
CLOCK: [2021-01-28 Thu 17:23]--[2021-01-28 Thu 17:31] =>  0:08
CLOCK: [2021-01-25 Mon 20:25]--[2021-01-25 Mon 20:35] =>  0:10
CLOCK: [2021-01-25 Mon 16:53]--[2021-01-25 Mon 17:00] =>  0:07
CLOCK: [2021-01-25 Mon 16:39]--[2021-01-25 Mon 16:49] =>  0:10
CLOCK: [2021-01-25 Mon 11:15]--[2021-01-25 Mon 11:25] =>  0:10
CLOCK: [2021-01-24 Sun 12:52]--[2021-01-24 Sun 13:01] =>  0:09
CLOCK: [2021-01-24 Sun 11:48]--[2021-01-24 Sun 12:01] =>  0:13
CLOCK: [2021-01-24 Sun 11:22]--[2021-01-24 Sun 11:37] =>  0:15
CLOCK: [2021-01-23 Sat 18:47]--[2021-01-23 Sat 19:07] =>  0:20
CLOCK: [2021-01-23 Sat 16:41]--[2021-01-23 Sat 16:50] =>  0:09
CLOCK: [2021-01-23 Sat 14:07]--[2021-01-23 Sat 14:14] =>  0:07
CLOCK: [2021-01-23 Sat 12:54]--[2021-01-23 Sat 13:33] =>  0:39
CLOCK: [2021-01-22 Fri 15:46]--[2021-01-22 Fri 15:49] =>  0:03
CLOCK: [2021-01-22 Fri 15:43]--[2021-01-22 Fri 15:46] =>  0:03
CLOCK: [2021-01-22 Fri 13:48]--[2021-01-22 Fri 13:57] =>  0:09
CLOCK: [2021-01-22 Fri 12:51]--[2021-01-22 Fri 12:59] =>  0:08
CLOCK: [2021-01-22 Fri 12:34]--[2021-01-22 Fri 12:50] =>  0:16
CLOCK: [2021-01-19 Tue 18:54]--[2021-01-19 Tue 19:12] =>  0:18
CLOCK: [2021-01-15 Fri 21:28]--[2021-01-15 Fri 22:21] =>  0:53
CLOCK: [2021-01-15 Fri 20:35]--[2021-01-15 Fri 21:25] =>  0:50
CLOCK: [2021-01-15 Fri 18:07]--[2021-01-15 Fri 18:11] =>  0:04
CLOCK: [2021-01-10 Sun 10:49]--[2021-01-10 Sun 11:05] =>  0:16
CLOCK: [2021-01-09 Sat 11:25]--[2021-01-09 Sat 11:34] =>  0:09
CLOCK: [2021-01-09 Sat 10:53]--[2021-01-09 Sat 11:22] =>  0:29
CLOCK: [2021-01-04 Mon 11:12]--[2021-01-04 Mon 11:17] =>  0:05
CLOCK: [2021-01-01 Fri 18:14]--[2021-01-01 Fri 18:26] =>  0:12
CLOCK: [2020-12-29 Tue 15:38]--[2020-12-29 Tue 15:56] =>  0:18
CLOCK: [2020-12-25 Fri 20:51]--[2020-12-25 Fri 20:58] =>  0:07
CLOCK: [2020-12-25 Fri 19:43]--[2020-12-25 Fri 20:05] =>  0:22
CLOCK: [2020-12-25 Fri 19:25]--[2020-12-25 Fri 19:27] =>  0:02
CLOCK: [2020-12-20 Sun 14:15]--[2020-12-20 Sun 14:19] =>  0:04
CLOCK: [2020-12-08 Tue 08:51]--[2020-12-08 Tue 08:55] =>  0:04
CLOCK: [2020-10-22 Thu 12:28]--[2020-10-22 Thu 12:29] =>  0:01
CLOCK: [2020-10-17 Sat 13:40]--[2020-10-17 Sat 13:51] =>  0:11
CLOCK: [2020-10-03 Sat 10:12]--[2020-10-03 Sat 10:17] =>  0:05
CLOCK: [2020-09-27 Sun 19:20]--[2020-09-27 Sun 19:21] =>  0:01
CLOCK: [2020-09-27 Sun 17:25]--[2020-09-27 Sun 18:00] =>  0:35
CLOCK: [2020-09-22 Tue 10:35]--[2020-09-22 Tue 10:50] =>  0:15
CLOCK: [2020-09-21 Mon 22:03]--[2020-09-21 Mon 22:08] =>  0:05
CLOCK: [2020-09-20 Sun 21:55]--[2020-09-20 Sun 22:03] =>  0:08
CLOCK: [2020-09-20 Sun 18:33]--[2020-09-20 Sun 18:56] =>  0:23
CLOCK: [2020-09-19 Sat 20:48]--[2020-09-19 Sat 20:57] =>  0:09
CLOCK: [2020-09-19 Sat 20:36]--[2020-09-19 Sat 20:36] =>  0:00
CLOCK: [2020-09-18 Fri 19:50]--[2020-09-18 Fri 20:08] =>  0:18
CLOCK: [2020-09-17 Thu 19:46]--[2020-09-17 Thu 20:00] =>  0:14
CLOCK: [2020-09-14 Mon 10:30]--[2020-09-14 Mon 10:44] =>  0:00
CLOCK: [2020-09-14 Mon 08:43]--[2020-09-14 Mon 08:52] =>  0:09
CLOCK: [2020-09-01 Tue 18:53]--[2020-09-01 Tue 18:56] =>  0:03
CLOCK: [2020-09-01 Tue 14:16]--[2020-09-01 Tue 14:17] =>  0:01
CLOCK: [2020-08-31 Mon 15:25]--[2020-08-31 Mon 15:34] =>  0:09
CLOCK: [2020-08-30 Sun 21:43]--[2020-08-30 Sun 22:15] =>  0:32
CLOCK: [2020-08-30 Sun 18:08]--[2020-08-30 Sun 18:09] =>  0:01
CLOCK: [2020-08-30 Sun 17:26]--[2020-08-30 Sun 17:56] =>  0:30
CLOCK: [2020-08-29 Sat 15:31]--[2020-08-29 Sat 15:41] =>  0:10
CLOCK: [2020-08-28 Fri 22:05]--[2020-08-28 Fri 22:06] =>  0:01
CLOCK: [2020-08-28 Fri 14:28]--[2020-08-28 Fri 14:42] =>  0:10
CLOCK: [2020-08-27 Thu 13:41]--[2020-08-27 Thu 13:44] =>  0:03
CLOCK: [2020-08-25 Tue 11:26]--[2020-08-25 Tue 11:28] =>  0:02
CLOCK: [2020-08-25 Tue 11:16]--[2020-08-25 Tue 11:22] =>  0:06
CLOCK: [2020-08-25 Tue 11:04]--[2020-08-25 Tue 11:04] =>  0:00
CLOCK: [2020-08-25 Tue 10:57]--[2020-08-25 Tue 11:04] =>  0:07
CLOCK: [2020-08-24 Mon 16:30]--[2020-08-24 Mon 16:37] =>  0:07
CLOCK: [2020-08-24 Mon 16:27]--[2020-08-24 Mon 16:29] =>  0:02
CLOCK: [2020-08-24 Mon 12:45]--[2020-08-24 Mon 12:57] =>  0:12
CLOCK: [2020-08-23 Sun 13:44]--[2020-08-23 Sun 14:01] =>  0:17
CLOCK: [2020-08-23 Sun 12:40]--[2020-08-23 Sun 12:59] =>  0:19
CLOCK: [2020-08-22 Sat 22:42]--[2020-08-22 Sat 22:55] =>  0:13
CLOCK: [2020-08-22 Sat 18:35]--[2020-08-22 Sat 18:53] =>  0:18
CLOCK: [2020-08-22 Sat 15:21]--[2020-08-22 Sat 16:06] =>  0:45
CLOCK: [2020-08-22 Sat 12:48]--[2020-08-22 Sat 12:54] =>  0:06
CLOCK: [2020-08-21 Fri 19:34]--[2020-08-21 Fri 19:54] =>  0:17
CLOCK: [2020-08-20 Thu 13:44]--[2020-08-20 Thu 13:52] =>  0:02
CLOCK: [2020-08-20 Thu 12:53]--[2020-08-20 Thu 13:03] =>  0:10
CLOCK: [2020-08-19 Wed 15:59]--[2020-08-19 Wed 16:01] =>  0:02
CLOCK: [2020-08-18 Tue 12:57]--[2020-08-18 Tue 13:00] =>  0:03
CLOCK: [2020-08-18 Tue 12:06]--[2020-08-18 Tue 12:08] =>  0:02
CLOCK: [2020-08-17 Mon 19:23]--[2020-08-17 Mon 19:31] =>  0:08
CLOCK: [2020-08-17 Mon 19:11]--[2020-08-17 Mon 19:23] =>  0:12
CLOCK: [2020-08-17 Mon 17:57]--[2020-08-17 Mon 18:23] =>  0:26
CLOCK: [2020-08-17 Mon 17:48]--[2020-08-17 Mon 17:53] =>  0:05
CLOCK: [2020-08-17 Mon 13:45]--[2020-08-17 Mon 14:22] =>  0:37
CLOCK: [2020-08-16 Sun 08:58]--[2020-08-16 Sun 09:15] =>  0:17
CLOCK: [2020-08-15 Sat 21:55]--[2020-08-15 Sat 23:55] =>  2:00
CLOCK: [2020-08-15 Sat 21:25]--[2020-08-15 Sat 21:27] =>  0:02
CLOCK: [2020-08-15 Sat 16:03]--[2020-08-15 Sat 17:28] =>  1:25
CLOCK: [2020-08-14 Fri 21:10]--[2020-08-14 Fri 21:22] =>  0:12
CLOCK: [2020-08-14 Fri 17:34]--[2020-08-14 Fri 17:56] =>  0:22
CLOCK: [2020-08-14 Fri 17:05]--[2020-08-14 Fri 17:14] =>  0:09
CLOCK: [2020-08-14 Fri 16:25]--[2020-08-14 Fri 16:34] =>  0:09
CLOCK: [2020-08-13 Thu 17:19]--[2020-08-13 Thu 17:27] =>  0:08
CLOCK: [2020-08-13 Thu 16:24]--[2020-08-13 Thu 16:29] =>  0:05
CLOCK: [2020-08-13 Thu 12:55]--[2020-08-13 Thu 13:12] =>  0:17
CLOCK: [2020-08-13 Thu 12:54]--[2020-08-13 Thu 12:54] =>  0:00
CLOCK: [2020-08-13 Thu 10:13]--[2020-08-13 Thu 10:24] =>  0:11
CLOCK: [2020-08-13 Thu 08:20]--[2020-08-13 Thu 08:28] =>  0:08
CLOCK: [2020-08-13 Thu 07:39]--[2020-08-13 Thu 07:53] =>  0:14
CLOCK: [2020-08-12 Wed 22:19]--[2020-08-12 Wed 23:16] =>  0:57
CLOCK: [2020-08-12 Wed 20:51]--[2020-08-12 Wed 20:52] =>  0:01
CLOCK: [2020-08-12 Wed 19:49]--[2020-08-12 Wed 20:02] =>  0:13
CLOCK: [2020-08-12 Wed 18:58]--[2020-08-12 Wed 18:58] =>  0:00
CLOCK: [2020-08-12 Wed 16:38]--[2020-08-12 Wed 17:31] =>  0:53
CLOCK: [2020-08-12 Wed 15:06]--[2020-08-12 Wed 15:31] =>  0:25
CLOCK: [2020-08-12 Wed 12:44]--[2020-08-12 Wed 12:57] =>  0:13
CLOCK: [2020-08-11 Tue 20:52]--[2020-08-11 Tue 21:31] =>  0:39
CLOCK: [2020-08-11 Tue 19:32]--[2020-08-11 Tue 20:00] =>  0:28
CLOCK: [2020-08-11 Tue 19:03]--[2020-08-11 Tue 19:28] =>  0:25
CLOCK: [2020-08-11 Tue 18:37]--[2020-08-11 Tue 18:48] =>  0:11
CLOCK: [2020-08-11 Tue 18:24]--[2020-08-11 Tue 18:33] =>  0:09
CLOCK: [2020-08-11 Tue 18:11]--[2020-08-11 Tue 18:17] =>  0:06
CLOCK: [2020-08-11 Tue 16:30]--[2020-08-11 Tue 16:34] =>  0:04
CLOCK: [2020-08-11 Tue 13:59]--[2020-08-11 Tue 14:11] =>  0:12
CLOCK: [2020-08-11 Tue 11:29]--[2020-08-11 Tue 11:31] =>  0:02
CLOCK: [2020-08-09 Sun 21:09]--[2020-08-09 Sun 21:20] =>  0:11
CLOCK: [2020-08-09 Sun 16:45]--[2020-08-09 Sun 17:09] =>  0:19
CLOCK: [2020-08-09 Sun 10:55]--[2020-08-09 Sun 10:59] =>  0:04
CLOCK: [2020-08-08 Sat 18:41]--[2020-08-08 Sat 18:53] =>  0:12
CLOCK: [2020-08-08 Sat 17:53]--[2020-08-08 Sat 18:23] =>  0:30
CLOCK: [2020-08-08 Sat 17:19]--[2020-08-08 Sat 17:49] =>  0:30
CLOCK: [2020-08-07 Fri 19:24]--[2020-08-07 Fri 19:34] =>  0:10
CLOCK: [2020-08-07 Fri 18:58]--[2020-08-07 Fri 19:17] =>  0:19
CLOCK: [2020-08-07 Fri 14:51]--[2020-08-07 Fri 15:07] =>  0:16
CLOCK: [2020-08-06 Thu 19:36]--[2020-08-06 Thu 19:50] =>  0:14
CLOCK: [2020-08-06 Thu 10:59]--[2020-08-06 Thu 11:21] =>  0:22
CLOCK: [2020-08-06 Thu 08:41]--[2020-08-06 Thu 08:42] =>  0:01
CLOCK: [2020-08-05 Wed 19:49]--[2020-08-05 Wed 19:53] =>  0:04
CLOCK: [2020-08-05 Wed 19:41]--[2020-08-05 Wed 19:48] =>  0:07
CLOCK: [2020-08-05 Wed 11:54]--[2020-08-05 Wed 11:59] =>  0:05
CLOCK: [2020-08-04 Tue 20:46]--[2020-08-04 Tue 20:50] =>  0:04
CLOCK: [2020-08-03 Mon 20:50]--[2020-08-03 Mon 20:54] =>  0:04
CLOCK: [2020-08-03 Mon 07:56]--[2020-08-03 Mon 07:58] =>  0:02
CLOCK: [2020-08-02 Sun 20:44]--[2020-08-02 Sun 20:49] =>  0:05
CLOCK: [2020-07-31 Fri 20:57]--[2020-07-31 Fri 20:58] =>  0:01
CLOCK: [2020-07-31 Fri 18:44]--[2020-07-31 Fri 18:51] =>  0:07
CLOCK: [2020-07-29 Wed 19:00]--[2020-07-29 Wed 19:09] =>  0:09
CLOCK: [2020-07-29 Wed 13:47]--[2020-07-29 Wed 16:05] =>  2:18
CLOCK: [2020-07-29 Wed 12:24]--[2020-07-29 Wed 12:27] =>  0:03
CLOCK: [2020-07-29 Wed 11:38]--[2020-07-29 Wed 12:23] =>  0:45
CLOCK: [2020-07-28 Tue 20:44]--[2020-07-28 Tue 21:24] =>  0:40
CLOCK: [2020-07-28 Tue 19:21]--[2020-07-28 Tue 19:58] =>  0:37
CLOCK: [2020-07-28 Tue 19:04]--[2020-07-28 Tue 19:14] =>  0:10
CLOCK: [2020-07-28 Tue 17:30]--[2020-07-28 Tue 17:50] =>  0:20
CLOCK: [2020-07-28 Tue 16:58]--[2020-07-28 Tue 17:12] =>  0:14
CLOCK: [2020-07-28 Tue 13:53]--[2020-07-28 Tue 14:01] =>  0:08
CLOCK: [2020-07-27 Mon 21:00]--[2020-07-27 Mon 21:03] =>  0:03
CLOCK: [2020-07-27 Mon 15:08]--[2020-07-27 Mon 15:12] =>  0:04
CLOCK: [2020-07-27 Mon 14:22]--[2020-07-27 Mon 14:25] =>  0:03
CLOCK: [2020-07-26 Sun 20:53]--[2020-07-26 Sun 21:23] =>  0:30
CLOCK: [2020-07-26 Sun 17:04]--[2020-07-26 Sun 17:15] =>  0:11
CLOCK: [2020-07-26 Sun 11:39]--[2020-07-26 Sun 11:47] =>  0:08
CLOCK: [2020-07-23 Thu 10:20]--[2020-07-23 Thu 10:40] =>  0:20
CLOCK: [2020-07-22 Wed 22:10]--[2020-07-22 Wed 22:26] =>  0:16
CLOCK: [2020-07-17 Fri 20:56]--[2020-07-17 Fri 21:18] =>  0:22
CLOCK: [2020-07-17 Fri 12:38]--[2020-07-17 Fri 13:10] =>  0:32
CLOCK: [2020-07-17 Fri 11:45]--[2020-07-17 Fri 12:34] =>  0:49
CLOCK: [2020-07-14 Tue 15:53]--[2020-07-14 Tue 21:51] =>  5:58
CLOCK: [2020-07-14 Tue 13:47]--[2020-07-14 Tue 14:39] =>  0:52
CLOCK: [2020-07-14 Tue 12:34]--[2020-07-14 Tue 12:58] =>  0:24
CLOCK: [2020-07-14 Tue 10:47]--[2020-07-14 Tue 11:43] =>  0:56
CLOCK: [2020-07-13 Mon 12:43]--[2020-07-13 Mon 13:00] =>  0:17
CLOCK: [2020-07-12 Sun 19:31]--[2020-07-12 Sun 19:51] =>  0:20
CLOCK: [2020-07-12 Sun 12:35]--[2020-07-12 Sun 13:06] =>  0:31
CLOCK: [2020-07-08 Wed 15:38]--[2020-07-08 Wed 16:04] =>  0:26
CLOCK: [2020-07-08 Wed 16:05]--[2020-07-08 Wed 16:30] =>  0:25
CLOCK: [2020-07-08 Wed 21:13]--[2020-07-08 Wed 21:25] =>  0:12
CLOCK: [2020-07-08 Wed 21:29]--[2020-07-08 Wed 21:39] =>  0:10
CLOCK: [2020-07-08 Wed 21:39]--[2020-07-08 Wed 21:40] =>  0:01
CLOCK: [2020-07-08 Wed 21:40]--[2020-07-08 Wed 21:58] =>  0:18
CLOCK: [2020-07-09 Thu 13:48]--[2020-07-09 Thu 13:56] =>  0:08
CLOCK: [2020-07-10 Fri 18:19]--[2020-07-10 Fri 18:45] =>  0:26
CLOCK: [2020-07-10 Fri 18:47]--[2020-07-10 Fri 19:05] =>  0:18
CLOCK: [2020-07-10 Fri 19:19]--[2020-07-10 Fri 19:32] =>  0:13
CLOCK: [2020-07-10 Fri 19:36]--[2020-07-10 Fri 19:41] =>  0:05
CLOCK: [2020-07-11 Sat 13:11]--[2020-07-11 Sat 14:59] =>  1:48
CLOCK: [2022-07-28 Thu 14:47]--[2022-07-28 Thu 14:58] =>  0:11
CLOCK: [2021-10-12 Tue 19:21]--[2021-10-12 Tue 19:38] =>  0:17
CLOCK: [2021-06-02 Wed 21:59]--[2021-06-02 Wed 22:00] =>  0:01
CLOCK: [2021-06-02 Wed 19:18]--[2021-06-02 Wed 19:52] =>  0:34
CLOCK: [2021-06-08 Tue 16:06]--[2021-06-08 Tue 16:07] =>  0:01
CLOCK: [2021-04-28 Wed 08:50]--[2021-04-28 Wed 09:07] =>  0:17
CLOCK: [2021-06-08 Tue 16:07]--[2021-06-08 Tue 16:37] =>  0:30
CLOCK: [2021-03-28 Sun 19:01]--[2021-03-28 Sun 19:20] =>  0:19
CLOCK: [2021-06-24 Thu 09:30]--[2021-06-24 Thu 09:39] =>  0:09
CLOCK: [2021-04-02 Fri 17:22]--[2021-04-02 Fri 17:29] =>  0:07
CLOCK: [2021-04-02 Fri 09:39]--[2021-04-02 Fri 09:47] =>  0:08
CLOCK: [2021-02-27 Sat 20:56]--[2021-02-27 Sat 21:06] =>  0:10
CLOCK: [2021-02-25 Thu 22:04]--[2021-02-25 Thu 22:34] =>  0:30
CLOCK: [2021-02-26 Fri 13:40]--[2021-02-26 Fri 13:55] =>  0:15
CLOCK: [2022-07-13 Wed 10:56]--[2022-07-13 Wed 11:30] =>  0:34
CLOCK: [2021-06-27 Sun 15:12]--[2021-06-27 Sun 15:17] =>  0:05
CLOCK: [2021-06-16 Wed 18:16]--[2021-06-16 Wed 18:19] =>  0:03
CLOCK: [2021-06-12 Sat 13:19]--[2021-06-12 Sat 13:31] =>  0:12
CLOCK: [2021-05-28 Fri 19:30]--[2021-05-28 Fri 19:49] =>  0:19
CLOCK: [2021-04-30 Fri 21:37]--[2021-04-30 Fri 21:42] =>  0:05
CLOCK: [2021-04-16 Fri 21:19]--[2021-04-16 Fri 21:25] =>  0:06
CLOCK: [2021-04-07 Wed 19:09]--[2021-04-07 Wed 19:11] =>  0:02
CLOCK: [2021-03-21 Sun 21:18]--[2021-03-21 Sun 22:23] =>  1:05
CLOCK: [2021-03-20 Sat 20:27]--[2021-03-20 Sat 20:47] =>  0:20
CLOCK: [2021-03-17 Wed 15:17]--[2021-03-17 Wed 15:42] =>  0:25
CLOCK: [2021-03-08 Mon 21:40]--[2021-03-08 Mon 21:43] =>  0:03
CLOCK: [2021-03-08 Mon 17:52]--[2021-03-08 Mon 17:59] =>  0:07
CLOCK: [2021-03-08 Mon 15:33]--[2021-03-08 Mon 15:41] =>  0:08
CLOCK: [2022-07-01 Fri 11:48]--[2022-07-01 Fri 12:21] =>  0:33
CLOCK: [2022-05-29 Sun 15:24]--[2022-05-29 Sun 16:00] =>  0:36
CLOCK: [2022-01-15 Sat 19:24]--[2022-01-15 Sat 20:14] =>  0:50
CLOCK: [2021-11-20 Sat 21:32]--[2021-11-20 Sat 21:41] =>  0:09
CLOCK: [2021-10-14 Thu 19:07]--[2021-10-14 Thu 19:39] =>  0:32
CLOCK: [2021-10-05 Tue 13:18]--[2021-10-05 Tue 13:34] =>  0:16
CLOCK: [2021-04-02 Fri 22:44]--[2021-04-02 Fri 23:10] =>  0:26
:END:

** org
:PROPERTIES:
:ID:       268B60E4-708C-4372-A59D-5DD876E493CA
:END:

/[[https://orgmode.org/][org-mode]] is a major mode for keeping notes, authoring documents, computational notebooks, literate programming, maintaining to-do lists, planning projects, and more./

#+begin_src emacs-lisp :results silent
(use-package org
  :elpaca (org
           :host sourcehut
           :repo "bzg/org-mode"
           :ref "7b38670"
           :depth nil) ; v9.6.8
  :demand t
  :config
  (setq org-directory paths-dir-org) ; set org directory
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "DOING(g)"
                    "IMPORTANT(i)"
                    "URGENT(u)"
                    "SOMEDAY(s)"
                    "MAYBE(m)"
                    "WAITING(w)"
                    "PROJECT(p)"
                    "|"
                    "DELEGATED(l)"
                    "DONE(d)"
                    "CANCELLED(c)")))
  (setq org-priority-highest 1)
  (setq org-priority-default 7)
  (setq org-priority-lowest 9) ; set priorities
  (setq org-deadline-warning-days 0)              ; show due tasks only on the day the tasks are due
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars t) ; indent every heading and hide all but the last leading star
  (setq org-return-follows-link t)
  (setq org-startup-folded t)
  (setq org-startup-indented t)
  (setq org-log-into-drawer "STATES")
  (setq org-clock-into-drawer "LOGBOOK") ; file task state changes in STATES drawer
  (setq org-log-done 'time) ; add timestamp when task is marked as DONE
  (setq org-log-repeat nil) ; do not log TODO status changes for repeating tasks
  (setq org-M-RET-may-split-line nil) ; irreal.org/blog/?p=6297
  (setq org-loop-over-headlines-in-active-region t) ; Allow simultaneous modification of multiple task statuses.
  (setq org-ctrl-k-protect-subtree t)
  (setq org-catch-invisible-edits 'smart)
  (setq org-special-ctrl-a/e t) ; `org-beginning-of-line' goes to beginning of first word
  (setq org-link-search-must-match-exact-headline nil)
  (setq org-mark-ring-length 4)
  (setq org-pretty-entities nil)
  (setq org-image-actual-width '(800))
  (setq org-ellipsis " ")
  (setq org-link-elisp-confirm-function nil)
  (setq org-file-apps '((auto-mode . emacs)
                        (directory . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'" . emacs)))
  (setq org-use-tag-inheritance t)
  (setq org-structure-template-alist
        '(("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("l" . "export latex")
          ("q" . "quote")
          ("s" . "src")
          ("se" . "src emacs-lisp")
          ("sc" . "src clojure")
          ("sj" . "src javascript")
          ("sm" . "src markdown")
          ("sp" . "src python")
          ("sq" . "src sql")
          ("ss" . "src shell")
          ("v" . "verse")
          ("w" . "WP")))

  (dolist (module '(org-habit org-tempo))
    (add-to-list 'org-modules module))

  :general
  (org-mode-map
   "<S-left>" nil
   "<S-right>" nil
   "<S-up>" nil
   "<S-down>" nil
   "<M-left>" nil
   "<M-right>" nil
   "<M-S-left>" nil
   "<M-S-right>" nil
   "<M-up>" nil
   "<M-down>" nil
   "C-j" nil
   "<backtab>" 'org-shifttab
   "C-k" nil
   "C-," nil
   "A-C-s-i" 'org-backward-sentence
   "A-C-s-o" 'org-forward-sentence
   "A-C-s-," 'org-backward-paragraph
   "A-C-s-." 'org-forward-paragraph ; org element?
   "A-C-s-m" 'org-beginning-of-line
   "A-C-s-z" 'org-end-of-line ; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
   "A-C-s-r" 'org-previous-visible-heading
   "A-C-s-f" 'org-next-visible-heading
   "A-C-s-M-m" 'org-previous-block
   "A-C-s-M-/" 'org-next-block
   "A-C-H-t" 'org-extras-copy-dwim
   "A-H-M-t" 'org-transpose-element
   "H-s-o" 'org-open-at-point
   "s-d" 'org-deadline
   "s-e" 'org-set-effort
   "s-f" 'org-insert-todo-subheading
   "s-p" 'org-time-stamp-inactive
   "s-A-p" 'org-time-stamp
   "s-q" 'org-set-tags-command
   "s-s" 'org-schedule
   "s-t" 'org-todo
   "s-A-t" 'org-sort
   "s-y" 'org-evaluate-time-range
   "s-z" 'org-edit-special
   "s-," 'org-priority
   "A-<return>" "C-u M-<return>"
   "A-M-<return>" 'org-insert-todo-heading
   ;; bindings with matching commands in Fundamental mode
   "H-v" 'org-yank)
  (org-agenda-mode-map
   "s-s" 'org-save-all-org-buffers)
  (telega-chat-mode-map
   "s-b" (lambda! (org-emphasize ?*))
   "s-i" (lambda! (org-emphasize ?/))
   "s-e" (lambda! (org-emphasize ?~))))
#+end_src

*** TODO [#4] Tweak ~ps/productivity-of-the-day~ function to compute value created
:PROPERTIES:
:ID:       1B86CB4D-D297-4C6D-99F7-49A80B7B0688
:END:

By considering both tasks completed and their associated priorities.

*** TODO [#4] Create function to compute the total number of TODOs and hours in effort estimates
:PROPERTIES:
:Effort:   2:00
:ID:       FCC486F6-7391-4EA3-9087-6BC3D5AB72B3
:END:

** org-extras
:PROPERTIES:
:ID:       4DE04276-B164-441D-ADCA-017346C525D6
:END:

#+begin_src emacs-lisp
(use-personal-package org-extras
  :after org
  :demand t
  :init
  (run-with-idle-timer (* 10 60) nil #'org-extras-agenda-switch-to-agenda-current-day)

  :config
  (quote (:link t :maxlevel 5 :fileskip0 t :narrow 70 :formula % :indent t :formatter org-extras-clocktable-sorter))

  (add-hook 'before-save-hook #'org-extras-id-auto-add-ids-to-headings-in-file)

  :general
  (org-mode-map
   "s-<return>" 'org-extras-super-return
   "A-C-s-n" 'org-extras-jump-to-first-heading
   "A-s-b" 'org-extras-set-todo-properties
   "A-s-f" 'org-extras-insert-todo-subheading-after-body
   "s-v" 'org-extras-paste-html
   "A-s-v" 'org-extras-paste-image
   "A-s-z" 'org-extras-export-to-ea-wiki
   "M-w" 'org-extras-count-words
   "A-s-n" 'org-extras-new-clock-entry-today
   "s-." 'org-extras-time-stamp-active-current-time
   "A-s-." 'org-extras-time-stamp-active-current-date
   "s-/" 'org-extras-time-stamp-inactive-current-time
   "A-s-/" 'org-extras-time-stamp-inactive-current-date
   "A-s-u" 'org-extras-id-update-id-locations
   "A-s-c" 'org-extras-mark-checkbox-complete-and-move-to-next-item
   "A-s-o" 'org-extras-reset-checkbox-state-subtree
   "H-s-w" 'org-extras-refile-and-archive
   "A-s-w" 'org-extras-refile-goto-latest)
  ((org-mode-map org-msg-edit-mode-map)
   "s-A-l" 'org-extras-url-dwim)
  (org-agenda-mode-map
   "RET" 'org-extras-agenda-switch-to-dwim
   "/" 'org-extras-agenda-done-and-next
   "\"" 'org-extras-agenda-postpone-and-next
   "b" 'org-extras-agenda-toggle-anniversaries
   "SPC" 'org-extras-agenda-goto-and-start-clock))
#+end_src

** org-agenda
:PROPERTIES:
:ID:       E03F4142-C90D-4550-8990-15391E27AD77
:END:
:LOGBOOK:
CLOCK: [2023-03-28 Tue 12:05]--[2023-03-28 Tue 12:12] =>  0:07
CLOCK: [2022-10-10 Mon 21:40]--[2022-10-11 Tue 00:16] =>  2:36
CLOCK: [2022-07-17 Sun 08:31]--[2022-07-17 Sun 08:54] =>  0:23
CLOCK: [2022-06-25 Sat 11:09]--[2022-06-25 Sat 11:36] =>  0:27
CLOCK: [2022-05-07 Sat 16:16]--[2022-05-07 Sat 17:18] =>  1:02
CLOCK: [2022-05-06 Fri 18:00]--[2022-05-06 Fri 18:12] =>  0:12
CLOCK: [2021-11-18 Thu 12:38]--[2021-11-18 Thu 12:46] =>  0:08
CLOCK: [2021-10-20 Wed 21:01]--[2021-10-20 Wed 21:04] =>  0:03
CLOCK: [2021-08-01 Sun 22:46]--[2021-08-01 Sun 23:25] =>  0:39
CLOCK: [2021-08-01 Sun 18:03]--[2021-08-01 Sun 18:16] =>  0:13
CLOCK: [2021-07-25 Sun 13:03]--[2021-07-25 Sun 13:04] =>  0:01
CLOCK: [2021-07-13 Tue 15:23]--[2021-07-13 Tue 15:27] =>  0:04
CLOCK: [2021-07-13 Tue 09:19]--[2021-07-13 Tue 09:27] =>  0:08
CLOCK: [2021-07-05 Mon 09:48]--[2021-07-05 Mon 11:27] =>  1:39
CLOCK: [2021-07-04 Sun 19:44]--[2021-07-04 Sun 19:54] =>  0:10
CLOCK: [2021-06-30 Wed 13:24]--[2021-06-30 Wed 14:24] =>  1:00
CLOCK: [2021-06-30 Wed 12:26]--[2021-06-30 Wed 13:16] =>  0:20
CLOCK: [2021-06-28 Mon 22:25]--[2021-06-28 Mon 22:58] =>  0:33
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-24 Sat 18:53]--[2021-04-24 Sat 18:55] =>  0:02
CLOCK: [2021-04-24 Sat 12:39]--[2021-04-24 Sat 12:47] =>  0:08
CLOCK: [2021-04-02 Fri 17:47]--[2021-04-02 Fri 17:50] =>  0:03
CLOCK: [2021-03-07 Sun 17:45]--[2021-03-07 Sun 17:56] =>  0:11
CLOCK: [2021-02-03 Wed 21:01]--[2021-02-03 Wed 21:07] =>  0:06
CLOCK: [2021-05-12 Wed 17:50]--[2021-05-12 Wed 18:04] =>  0:14
CLOCK: [2021-04-05 Mon 08:26]--[2021-04-05 Mon 08:34] =>  0:08
CLOCK: [2021-04-08 Thu 22:36]--[2021-04-08 Thu 22:36] =>  0:00
CLOCK: [2021-06-25 Fri 15:05]--[2021-06-25 Fri 15:08] =>  0:03
CLOCK: [2021-04-07 Wed 16:25]--[2021-04-07 Wed 16:41] =>  0:16
CLOCK: [2021-04-06 Tue 21:19]--[2021-04-06 Tue 21:31] =>  0:12
CLOCK: [2021-03-11 Thu 19:18]--[2021-03-11 Thu 19:27] =>  0:09
CLOCK: [2021-03-07 Sun 16:07]--[2021-03-07 Sun 16:41] =>  0:34
CLOCK: [2021-02-27 Sat 13:40]--[2021-02-27 Sat 13:59] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-agenda
  :after org
  :demand t
  :init
  (setq org-agenda-hide-tags-regexp "project")

  :config
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-use-time-grid nil)
  (setq org-agenda-ignore-properties '(effort appt category))
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-sticky t)
  (setq org-agenda-todo-ignore-with-date t)       ; exclude tasks with a date.
  (setq org-agenda-todo-ignore-scheduled 'future) ; exclude scheduled tasks.
  (setq org-agenda-restore-windows-after-quit t)  ; don't destroy window splits
  (setq org-agenda-span 1)                        ; show daily view by default
  (setq org-agenda-clock-consistency-checks       ; highlight gaps of five or more minutes in agenda log mode
        '(:max-duration "5:00" :min-duration "0:01" :max-gap 5 :gap-ok-around ("2:00")))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-log-mode-items '(clock))
  (setq org-agenda-custom-commands
        '(("E" "TODOs without effort"
           ((org-ql-block '(and (todo)
                                (not (property "effort")))
                          ((org-ql-block-header "TODOs without effort")))))
          ("w" "Weekly review"
           agenda ""
           ((org-agenda-clockreport-mode t)
            (org-agenda-archives-mode t)
            (org-agenda-start-day "-7d")
            (org-agenda-span 7)
            (org-agenda-start-on-weekday 0)))
          ("p" "Appointments" agenda* "Today's appointments"
           ((org-agenda-span 1)
            (org-agenda-max-entries 3)))
          ("r"
           "Reading list"
           tags
           "PRIORITY=\"1\"|PRIORITY=\"2\"|PRIORITY=\"3\"|PRIORITY=\"4\"|PRIORITY=\"5\"|PRIORITY=\"6\"|PRIORITY=\"7\"|PRIORITY=\"8\"|PRIORITY=\"9\""
           ((org-agenda-files (list paths-dir-bibliographic-notes))))
          ("g" "All TODOs"
           todo "TODO")
          ("," "All tasks with no priority"
           tags-todo "-PRIORITY=\"1\"-PRIORITY=\"2\"-PRIORITY=\"3\"-PRIORITY=\"4\"-PRIORITY=\"5\"-PRIORITY=\"6\"-PRIORITY=\"7\"-PRIORITY=\"8\"-PRIORITY=\"9\"")))
  ;; (setq org-agenda-clockreport-parameter-plist)
  (setq org-agenda-files (list paths-file-calendar))
  (setq org-agenda-archives-mode 'trees)

  (advice-add 'org-agenda-goto :after
              (lambda (&rest args)
                (org-extras-narrow-to-entry-and-children)))

  ;; We add these two advices because `org-modern-mode' interferes
  ;; with the display of the habits progress bar
  (advice-add 'org-habit-toggle-display-in-agenda :before
              (lambda (arg)
                (if org-habit-show-habits
                    (global-org-modern-mode)
                  (global-org-modern-mode -1))))
  (advice-add 'org-habit-toggle-display-in-agenda :after
              (lambda (arg)
                (org-agenda-redo)
                (global-org-modern-mode)))

  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (visual-line-mode -1)
                                    (toggle-truncate-lines)))

  :general
  ("C-<escape>" 'org-agenda)
  (org-agenda-mode-map
   "?" 'org-agenda-filter
   ";" 'org-agenda-later
   "C-b" 'org-agenda-tree-to-indirect-buffer
   "C-k" nil
   "d" 'org-agenda-deadline
   "M-t" nil
   "H-n" nil
   "s-k" nil
   "i" 'org-agenda-clock-in
   "I" 'org-agenda-diary-entry
   "j" 'org-agenda-earlier
   "J" 'org-agenda-goto-date
   "k" 'org-agenda-previous-line
   "l" 'org-agenda-next-line
   "n" 'org-agenda-date-later
   "o" 'org-agenda-open-link
   "p" 'org-agenda-date-earlier
   "q" 'org-agenda-kill-all-agenda-buffers
   "s" 'org-agenda-schedule
   "W" 'org-agenda-refile
   "X" 'org-agenda-exit
   "x" (lambda! (org-agenda-log-mode 'clockcheck))
   "y" 'org-agenda-day-view
   "z" 'org-agenda-undo))
#+end_src

*** TODO Make org-agenda birthdays visible via midnight
:PROPERTIES:
:ID:       F42FBE14-DFB3-45D0-BE2F-13D6A57F071F
:END:

*** TODO [#6] align tags
:PROPERTIES:
:ID:       8F2D8B6E-2B3E-434E-9D60-5A1E23F8E4C1
:END:

*** TODO [#4] Find way to represent day agenda visually as a series of 30-minute blocks
:PROPERTIES:
:Effort:   0:40
:ID:       48717679-CF3D-475E-BCB6-87CAD939941F
:END:

Similar to Google Calendar.

*** SOMEDAY [#4] Show agenda task in different color if it recurs
:PROPERTIES:
:Effort:   0:45
:ID:       8ED37C79-AA82-4C08-BD01-335408F06DB7
:END:
:LOGBOOK:
CLOCK: [2021-06-16 Wed 17:37]--[2021-06-16 Wed 17:55] =>  0:18
:END:

To discover how to do this, use the ~customize~ command.

Posted a question to [[https://emacs.stackexchange.com/questions/66343/in-org-agenda-show-repeating-tasks-in-a-different-color][Stack Exchange]].

[2021-06-25 Fri 23:00] Since no one replied by now, it's unlikely anyone will reply anytime soon. Marking as SOMEDAY and removing scheduling.

** org-capture
:PROPERTIES:
:ID:       14F93A83-0BE7-42E3-891E-F6806192296B
:END:
:LOGBOOK:
CLOCK: [2023-05-10 Wed 07:50]--[2023-05-10 Wed 08:14] =>  0:24
CLOCK: [2022-06-13 Mon 14:45]--[2022-06-13 Mon 15:00] =>  0:15
CLOCK: [2022-06-11 Sat 13:40]--[2022-06-11 Sat 14:03] =>  0:23
CLOCK: [2022-06-11 Sat 13:19]--[2022-06-11 Sat 13:25] =>  0:06
CLOCK: [2022-06-03 Fri 15:31]--[2022-06-03 Fri 15:51] =>  0:20
CLOCK: [2022-05-28 Sat 17:00]--[2022-05-28 Sat 18:42] =>  1:42
CLOCK: [2022-04-29 Fri 19:46]--[2022-04-29 Fri 20:27] =>  0:41
CLOCK: [2022-04-29 Fri 18:14]--[2022-04-29 Fri 18:24] =>  0:10
CLOCK: [2021-12-03 Fri 19:43]--[2021-12-03 Fri 19:50] =>  0:07
CLOCK: [2021-11-18 Thu 18:28]--[2021-11-18 Thu 18:45] =>  0:17
CLOCK: [2021-08-23 Mon 11:19]--[2021-08-23 Mon 11:22] =>  0:03
CLOCK: [2021-08-20 Fri 14:15]--[2021-08-20 Fri 14:18] =>  0:03
CLOCK: [2021-08-19 Thu 11:04]--[2021-08-19 Thu 11:12] =>  0:08
CLOCK: [2021-08-17 Tue 15:13]--[2021-08-17 Tue 15:36] =>  0:23
CLOCK: [2021-08-17 Tue 14:11]--[2021-08-17 Tue 14:41] =>  0:30
CLOCK: [2021-08-13 Fri 09:09]--[2021-08-13 Fri 09:30] =>  0:21
CLOCK: [2021-07-09 Fri 11:00]--[2021-07-09 Fri 11:10] =>  0:10
CLOCK: [2021-07-09 Fri 10:32]--[2021-07-09 Fri 10:37] =>  0:05
CLOCK: [2021-06-25 Fri 17:37]--[2021-06-25 Fri 17:54] =>  0:17
CLOCK: [2021-06-07 Mon 19:14]--[2021-06-07 Mon 19:20] =>  0:06
CLOCK: [2021-05-22 Sat 18:48]--[2021-05-22 Sat 19:15] =>  0:27
CLOCK: [2021-05-05 Wed 16:03]--[2021-05-05 Wed 16:07] =>  0:04
CLOCK: [2021-04-23 Fri 22:04]--[2021-04-23 Fri 22:32] =>  0:28
CLOCK: [2021-04-12 Mon 22:01]--[2021-04-12 Mon 22:11] =>  0:10
CLOCK: [2021-04-11 Sun 16:27]--[2021-04-11 Sun 17:05] =>  0:38
CLOCK: [2021-04-02 Fri 08:30]--[2021-04-02 Fri 09:00] =>  0:30
CLOCK: [2021-03-28 Sun 18:20]--[2021-03-28 Sun 18:27] =>  0:07
CLOCK: [2021-03-28 Sun 18:18]--[2021-03-28 Sun 18:19] =>  0:01
CLOCK: [2021-03-06 Sat 20:36]--[2021-03-06 Sat 20:46] =>  0:10
CLOCK: [2021-03-02 Tue 12:39]--[2021-03-02 Tue 12:48] =>  0:09
CLOCK: [2021-03-01 Mon 10:46]--[2021-03-01 Mon 10:50] =>  0:09
CLOCK: [2021-02-27 Sat 08:20]--[2021-02-27 Sat 08:26] =>  0:06
CLOCK: [2021-02-21 Sun 19:14]--[2021-02-21 Sun 20:04] =>  0:50
CLOCK: [2021-02-19 Fri 11:11]--[2021-02-19 Fri 11:21] =>  0:10
CLOCK: [2021-02-09 Tue 09:37]--[2021-02-09 Tue 09:42] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-capture
  :after org
  :demand t
  :config
  (setq org-default-notes-file paths-file-inbox-desktop)
  (setq org-capture-templates
        `(("." "Todo" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO %?\n" :empty-lines 1)
          ("c" "Calendar" entry
           (file paths-file-calendar)
           "* TODO %^ \nDEADLINE: %^T" :empty-lines 1 :immediate-finish t)
          ;; djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html
          ("e" "Email" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up with %:fromname on %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("g" "GPT")
          ("gg" "GPT-4: generic" entry
           (id "9FF746E2-06DE-4E03-B536-5DC65A4023F8")
           "*** %?\n\n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("ge" "GPT-4: Elisp" entry
           (id "7E3248D0-1C65-479A-85D0-94A21C73AAF5")
           "*** %?\n\n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("gd" "DALL-E" entry
           (id "15B74595-50DC-40A6-8FDC-B8DB8AA4DFAB")
           "*** %?\n\n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("n" "Telegram" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up with %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("r" "Bibliography reference" plain
           (file ,paths-file-orb-noter-template)
           ;; :if-new
           ;; (file ,paths-file-orb-capture-template)
           :unnarrowed t :immediate-finish t)
          ("s" "Slack" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("t" "Tlön")
          ("tb" "Tlön: Babel")
          ("tbb" "Tlön: Babel: Generic " entry
           (id "4424AA7E-C2F9-4228-97F9-38088056A5CD")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tbd" "Tlön: Babel: Docs " entry
           (id "49A79F81-8920-43FF-B1C7-B02F0962B30F")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tbi" "Tlön: Babel: Import " entry
           (id "5F0A62AA-1B81-4671-96FA-8C4FED82155F")
           "** TODO [#6] Import '%?' \n%c" :empty-lines 1 :prepend t)
          ("tbl" "Tlön: Babel: Process Leo's revisions " entry
           (id "641485F9-C3B6-4082-8F69-9162DCC3DEB9")
           "** TODO [#6] Process Leo's revisions of '%c%?' \n" :empty-lines 1 :prepend t)
          ("tbt" "Tlön: Babel: Translate article " entry
           (id "584BF0CB-8838-44C4-843C-78A36DE54CD6")
           "** TODO [#5] Translate '%?' \n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbw" "Tlön: Babel: Website " entry
           (id "6171D3E2-8BC4-41E5-9C8A-E808DC4DD9D3")
           "** TODO [#5] %? \n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbM" "Tlön: Babel: Misc [via org-capture] Misc" entry
           (id "4424AA7E-C2F9-4228-97F9-38088056A5CD")
           "** TODO [#5] %a\n" :empty-lines 1 :prepend t  :immediate-finish t)
          ("tbr" "Tlön: Babel: Revise translation " entry
           (id "641485F9-C3B6-4082-8F69-9162DCC3DEB9")
           "** TODO [#6] Revise '%c%?' translation \n" :empty-lines 1 :prepend t)
          ("ti" "Tlön: EAI")
          ("tii" "Tlön: EAI: Generic " entry
           (id "6C7F53ED-B43E-401D-BEEA-DB38CAE367FD")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tn" "Tlön: EAN")
          ("tnn" "Tlön: EAN: Generic " entry
           (id "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tm" "Tlön: FM")
          ("tmm" "Tlön: FM: Generic " entry
           (id "9066D77E-7F2B-4176-9533-243060F11276")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tmt" "Tlön: FM: Post to Twitter" entry
           (id "244D8486-9F36-4AC5-A185-8FE77C7ED7A7")
           "** TODO [#6] %s" :empty-lines 1 :prepend t)
          ("tmr" "Tlön: FM: Review transcript of conversation" entry
           (id "9066D77E-7F2B-4176-9533-243060F11276")
           "** TODO [#5] Review transcript of conversation with %? \n" :empty-lines 1 :prepend t)
          ("tg" "Tlön: GPE")
          ("tgg" "Tlön: GPE: Generic " entry
           (id "022CAD09-9F99-4812-BAA3-F52BCF95ACC6")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t :immediate-finish t)
          ("th" "Tlön: HEAR")
          ("thh" "Tlön: HEAR: Generic " entry
           (id "1BBBA5F1-11FA-4C7B-8D08-5DC84233B8E2")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("td" "Tlön: LBDLH")
          ("tdd" "Tlön: LBDLH: Generic " entry
           (id "CE8A5497-1BF9-4340-9853-5ADA4605ECB5")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tp" "Tlön: LP")
          ("tpp" "Tlön: LP: Generic " entry
           (id "2514AA39-CFBF-4E5A-B18E-147497E31C8F")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tr" "Tlön: RAE")
          ("trr" "Tlön: RAE: Generic " entry
           (id "15A1803F-EAA7-4FB9-BA77-74154EB8CA5D")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("trn" "Tlön: RAE: Interacting with narrators " entry
           (id "D90B718C-6933-47AC-9B15-F95C2A2E1FD5")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tt" "Tlön: Core")
          ("ttt" "Tlön: Core: Generic " entry
           (id "77A450DE-5867-423E-A251-7E92BF1617FC")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tte" "Tlön: Core: Emacs")
          ("ttee" "Tlön: Core: Emacs: Generic " entry
           (id "91CEC8F0-F690-4318-B63B-040D6B98A6E2")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tcc" "Tlön: Core: Comms")
          ("tccc" "Tlön: Core: Comms: Generic " entry
           (id "7E56628D-8FBA-4A58-BFCA-14A6F7FAC3BA")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("ttf" "Tlön: Core: Finance")
          ("ttff" "Tlön: Core: Finance: Generic " entry
           (id "21E0FE78-C45B-4E6E-9447-56375111BAEA")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tfp" "Tlön: Fede: Pending for next meeting" plain
           (id "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1")
           "" :empty-lines 1 :empty-lines-after 3)
          ("tfr" "Tlön: Fede: RAE")
          ("tfrs" "Tlön: Fede: RAE suggestion" entry
           (file+headline paths-file-tlon-tareas-fede "sugerencias de Pablo")
           "** TODO [#6] %? :fede:\n" :empty-lines 1 :prepend t)
          ("tl" "Tlön: Leo")
          ("tll" "Tlön: Leo: Generic task" entry
           (file+headline paths-file-tlon-tareas-leo "Tareas Leo")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlb" "Tlön: Leo: Babel")
          ("tlp" "Tlön: Leo: Pending for next meeting" plain
           (id "8B2F18B4-A309-4F29-A5E6-CD40E010970D")
           "" :empty-lines 1 :empty-lines-after 3)
          ;; ("n" "Day reflection" plain (function org-journal-find-location)
          ;; "** %(format-time-string org-journal-time-format)Day reflection\n%i%?")
          ;; ("j" "Pomodoro" plain (function org-journal-find-location)
          ;; "** %(format-time-string org-journal-time-format)Pomodoro\n%i%?")
          ;; ("v" "Entry: revise" entry
          ;; (function
          ;; (lambda ()
          ;; (let ((filename (file-name-concat paths-dir-wiki-entries (current-kill 0))))
          ;; (set-buffer (find-file-noselect filename))
          ;; (pop kill-ring)
          ;; (goto-char (point-max)))))
          ;; "* TODO Revise entry \nSCHEDULED: %(org-insert-time-stamp nil nil nil nil nil \" .+1d\")")
          ("y" "YouTube playlist" entry
           (id "319B1611-A5A6-42C8-923F-884A354333F9")
           "* %(org-web-tools-extras-youtube-dl (current-kill 0))\n[[%c][YouTube link]]" :empty-lines 1 :prepend t :immediate-finish t)
          ;; github.com/alphapapa/org-protocol-capture-html#org-capture-template
          ("w" "Web site" entry
           (file paths-file-downloads)
           "* %a :website:\n\n%U %?\n\n%:initial")))

  (add-hook 'org-capture-mode-hook #'org-extras-capture-hydra-notes-hook)
  (add-hook 'org-capture-before-finalize-hook #'org-extras-capture-before-finalize-hook-function)
  (add-hook 'org-capture-before-prepare-hook #'org-extras-capture-prepare-finalize-hook-function)

  :general
  ("H-t" 'org-capture
   "H-T" 'org-capture-goto-last-stored)
  (org-capture-mode-map
   "s-c" 'org-capture-finalize
   "s-w" 'org-capture-refile))
#+end_src

Links to check out:
- [[https://github.com/sprig/org-capture-extension][GitHub - sprig/org-capture-extension: A Chrome and firefox extension facilita...]]
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][Share your Org Capture Templates! : emacs]]
- [[https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el][Org capture templates · sk8ingdom/.emacs.d · GitHub]]
- [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/][Hey Org-Mode Users, show us your org capture templates : orgmode]]. [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/gzq9h2v/?utm_source=reddit&utm_medium=web2x&context=3][this one]] has templates for capturing appointments directly to Google Calendar via org-gcal. [I've now incorporated it]
- [[https://orgmode.org/worg/org-contrib/org-collector.html][org-collector.el &#x2014; collect properties into tables]]
- potentially useful capture templates:
  - [[https://helpdeskheadesk.net/sub-menus-in-org/][Submenus in org-mode Capture · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-in-files/][Org-capture in Files · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-1/][My Org Capture Templates - Part 1 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-2/][My Org Capture Templates - Part 2 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-3/][My Org Capture Templates - Part 3 emacs:css: · The Art of Not Asking Why]]

** org-clock
:PROPERTIES:
:ID:       90E8B1CE-433C-4B2B-8AA2-844506EAC031
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:30]--[2023-03-18 Sat 12:32] =>  0:02
CLOCK: [2023-03-18 Sat 11:55]--[2023-03-18 Sat 12:30] =>  0:35
CLOCK: [2023-02-22 Wed 15:58]--[2023-02-22 Wed 16:03] =>  0:05
CLOCK: [2023-02-22 Wed 15:07]--[2023-02-22 Wed 15:28] =>  0:21
CLOCK: [2023-02-22 Wed 14:41]--[2023-02-22 Wed 15:06] =>  0:25
CLOCK: [2023-02-21 Tue 23:25]--[2023-02-21 Tue 23:46] =>  0:21
CLOCK: [2022-07-06 Wed 20:26]--[2022-07-06 Wed 21:10] =>  0:44
CLOCK: [2022-06-19 Sun 10:16]--[2022-06-19 Sun 10:53] =>  0:37
CLOCK: [2022-06-13 Mon 22:33]--[2022-06-13 Mon 23:03] =>  0:30
CLOCK: [2022-03-02 Wed 18:19]--[2022-03-02 Wed 18:21] =>  0:02
CLOCK: [2021-10-24 Sun 10:55]--[2021-10-24 Sun 11:09] =>  0:14
CLOCK: [2021-08-01 Sun 18:16]--[2021-08-01 Sun 18:53] =>  0:37
CLOCK: [2021-06-23 Wed 15:48]--[2021-06-23 Wed 16:18] =>  0:30
CLOCK: [2021-06-04 Fri 21:53]--[2021-06-04 Fri 22:05] =>  0:12
CLOCK: [2021-06-04 Fri 20:53]--[2021-06-04 Fri 21:14] =>  0:21
CLOCK: [2021-05-10 Mon 22:11]--[2021-05-10 Mon 22:28] =>  0:00
CLOCK: [2021-05-02 Sun 22:09]--[2021-05-02 Sun 22:22] =>  0:13
CLOCK: [2021-04-14 Wed 18:26]--[2021-04-14 Wed 18:50] =>  0:24
CLOCK: [2021-03-29 Mon 20:57]--[2021-03-29 Mon 21:13] =>  0:16
CLOCK: [2021-03-28 Sun 20:32]--[2021-03-28 Sun 21:01] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-clock
  :after org
  :defer 20
  :config
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-in-resume t)
  (setq org-clock-report-include-clocking-task t)
  (setq org-clock-ask-before-exiting nil)
  (setq org-clock-history-length 30)
  (org-clock-persistence-insinuate)

  (add-hook 'org-clock-in-prepare-hook #'tab-bar-extras-quick-reset)

  :general
  ("A-H-j" 'org-clock-goto
   "A-H-x" 'org-clock-cancel
   "H-i" 'org-clock-in
   "H-o" 'org-clock-out))
#+end_src

** org-clock-convenience
:PROPERTIES:
:ID:       1DB11C80-DE47-42EA-851A-4D35398C1005
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 13:14]--[2023-03-18 Sat 13:27] =>  0:13
:END:

/[[https://github.com/dfeich/org-clock-convenience][org-clock-convenience]] provides convenience functions to work with org-mode clocking./

#+begin_src emacs-lisp
(use-package org-clock-convenience
  :after org-clock
  :demand t
  :general
  (org-agenda-mode-map
   "M-k" 'org-clock-convenience-timestamp-up
   "M-l" 'org-clock-convenience-timestamp-down))
#+end_src

** org-clock-split
:PROPERTIES:
:ID:       594F8AE4-9AE7-4D7D-A504-E75C5139BB5D
:END:

/[[https://github.com/justintaft/org-clock-split][org-clock-split]] allows splitting of one clock entry into two contiguous entries./

#+begin_src emacs-lisp
(use-package org-clock-split
  :after org-clock
  :demand t
  :config
  ;; fix weird behavior that inserted one of the clocks not enclosed in square
  ;; brackets
  (el-patch-defun org-clock-split (from-end splitter-string)
  "Split CLOCK entry under cursor into two entries.
Total time of created entries will be the same as original entry.

   WARNING: Negative time entries can be created if splitting at an offset
longer then the CLOCK entry's total time.

   FROM-END: nil if the function should split with duration from
   the start of the clock segment (default for backwards
   compatibility), t if the function should split counting from
   the end of the clock segment.

   SPLITTER-STRING: Time offset to split record at.  Examples: '1h', '01m', '68m1h', '9:20'."

  (interactive "P\nsTime offset to split clock entry (ex 1h2m): ")

  (move-beginning-of-line nil)
  (let ((original-line (buffer-substring (line-beginning-position) (line-beginning-position 2))))

    ;; Error if CLOCK line does not contain check in and check out time
    (unless (string-match org-clock-split-clock-range-regexp original-line)
      (error "Cursor must be placed on line with valid CLOCK entry range"))

    (let* ((whitespace (match-string 1 original-line))
           (timestamps (org-clock-split-split-line-into-timestamps original-line splitter-string from-end))
           (t0 (pop timestamps))
           (t1 (el-patch-swap (pop timestamps) (format "[%s]" (pop timestamps))))
           (t2 (pop timestamps)))
      ;; delete line without moving to kill ring
      (delete-region (line-beginning-position) (line-end-position))
      ;; insert the earlier segment
      (insert (format org-clock-split-clock-range-format whitespace t0 t1))
      ;; Update interval duration, which moves point to the end of the later timestamp
      (org-ctrl-c-ctrl-c)
      ;; insert the later segment before the earlier segment, so it's ready for org-clock-merge
      (move-beginning-of-line nil)
      (newline)
      (previous-line)
      (insert (format org-clock-split-clock-range-format whitespace t1 t2))
      ;; Update interval duration, which fails if point doesn't move to beginning of line
      (org-ctrl-c-ctrl-c)
      (move-beginning-of-line nil))))

  :general
  (org-mode-map
   "s-u" 'org-clock-split))
#+end_src

** org-cycle
:PROPERTIES:
:ID:       AAB14053-B232-4627-8C1D-635FAE417A98
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-cycle
  :after org
  :demand t
  :config
  (setq org-cycle-emulate-tab nil)) ; TAB always cycles, even if point not on a heading
#+end_src

** org-archive
:PROPERTIES:
:ID:       354B22B6-B3BD-409D-B04F-051D4AD87959
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 12:12]--[2021-07-22 Thu 12:23] =>  0:11
CLOCK: [2021-04-24 Sat 13:10]--[2021-04-24 Sat 13:14] =>  0:04
CLOCK: [2021-03-11 Thu 09:41]--[2021-03-11 Thu 10:00] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-archive
  :after org
  :demand t
  :config
  (setq org-archive-default-command 'org-archive-to-archive-sibling)
  (setq org-archive-location (expand-file-name "%s_archive.org::" paths-dir-archive))

  :general
  (org-mode-map
   "s-a" 'org-archive-to-archive-sibling))
#+end_src

*** TODO Align org-archive tags
:PROPERTIES:
:ID:       568D63EF-8C13-41CE-939A-AE996F6D13F9
:END:

*** TODO [#6] Process archives ~org/archive~
:PROPERTIES:
:ID:       855BC5BD-2A50-4DB8-BD91-4E0F6ECD50D6
:Effort:   1:00
:END:

** org-archive-hierarchically
:PROPERTIES:
:ID:       27C3C7F9-C040-4844-AC5A-762BBC26C18F
:END:
:LOGBOOK:
CLOCK: [2023-02-17 Fri 11:34]--[2023-02-17 Fri 11:47] =>  0:13
:END:

/[[https://gitlab.com/andersjohansson/org-archive-hierarchically][org-archive-hierarchically]] archives org subtrees in a way that preserves the original heading structure./

I normally archive subtrees with ~org-archive-to-archive-sibling~, but use ~org-archive-hierarchically~ for files in public repositories. ~org-archive-to-archive-sibling~ moves archived tasks to a heading, which is by default collapsed in org, but in Github archived tasks are always fully visible, creating a lot of clutter.

#+begin_src emacs-lisp
(use-package org-archive-hierarchically
  :elpaca (org-archive-hierarchically
             :host gitlab
             :repo "andersjohansson/org-archive-hierarchically")
  :defer 20)
#+end_src

** org-fold
:PROPERTIES:
:ID:       DCBF8A9B-D230-4D51-B861-B85AA4405D25
:END:
:LOGBOOK:
CLOCK: [2021-03-15 Mon 14:51]--[2021-03-15 Mon 15:07] =>  0:16
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-fold
  :after org
  :demand t
  :config
  (setq org-fold-catch-invisible-edits 'smart)

  ;; (add-hook 'org-mode-hook #'org-extras-hide-properties)
  ;; (add-hook 'org-mode-hook #'org-extras-hide-logbook)
  )
#+end_src

** org-faces
:PROPERTIES:
:ID:       1A295AA4-31BD-4B2E-828B-5B3443AD8D35
:END:

#+begin_src emacs-lisp
(use-feature org-faces
  :after org
  :demand t
  :config
  (setq org-fontify-quote-and-verse-blocks t))
#+end_src

** org-id
:PROPERTIES:
:ID:       51E91355-66E0-479C-B616-116EF261F930
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 11:32]--[2023-04-08 Sat 12:00] =>  0:28
CLOCK: [2023-03-09 Thu 20:07]--[2023-03-09 Thu 20:19] =>  0:12
CLOCK: [2022-08-29 Mon 17:28]--[2022-08-29 Mon 17:43] =>  0:15
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-id
  :after org
  :demand t
  :config
  (setq org-id-link-to-org-use-id t)
  ;; I want these files to be searched for IDs, so that I can use
  ;; org-capture templates with them, but do not want them to be part
  ;; of org-agenda or org-roam.
  (setq org-id-extra-files (list
                            paths-file-tlon-tareas-leo
                            paths-file-tlon-tareas-fede))

  :general
  (org-mode-map
   "s-A-i" 'org-id-copy))
#+end_src

** org-list
:PROPERTIES:
:ID:       DD345C01-CEAC-4CEC-A8D5-89C16A0182CB
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-list
  :after org
  :demand t
  :config
  (setq org-plain-list-ordered-item-terminator ?.)
  (setq org-list-indent-offset 2))
#+end_src

** org-refile
:PROPERTIES:
:ID:       3FAE7C0D-FB22-4175-A0A4-FFA392539743
:REFILE_TARGET_FILE: config.org
:REFILE_TARGET_HEADING: Watched
:END:
:LOGBOOK:
CLOCK: [2023-02-22 Wed 17:05]--[2023-02-22 Wed 17:30] =>  0:25
CLOCK: [2021-12-15 Wed 10:20]--[2021-12-15 Wed 10:30] =>  0:10
CLOCK: [2021-12-14 Tue 18:00]--[2021-12-14 Tue 18:08] =>  0:08
CLOCK: [2021-10-08 Fri 10:22]--[2021-10-08 Fri 10:32] =>  0:10
CLOCK: [2021-08-21 Sat 21:46]--[2021-08-21 Sat 21:54] =>  0:08
CLOCK: [2021-06-05 Sat 14:17]--[2021-06-05 Sat 14:19] =>  0:02
CLOCK: [2021-02-27 Sat 07:30]--[2021-02-27 Sat 07:46] =>  0:16
CLOCK: [2021-02-24 Wed 06:47]--[2021-02-24 Wed 07:30] =>  0:43
:END:

Much of this was taken from Yiming Chen's [[https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/][My org refile workflow]].

#+begin_src emacs-lisp :results silent
(use-feature org-refile
  :after org
  :demand t
  :config
  (setq org-outline-paths-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-reverse-note-order t) ; refile to the beginning of header
  (setq org-refile-use-cache t) ;  build cache at startup
  (setq org-refile-targets '((org-agenda-files :maxlevel . 9)
                             (files-extras-open-buffer-files :maxlevel . 9)
                             (nil :maxlevel . 9)))

  ;; Regenerate cache every half hour
  (run-with-idle-timer (* 60 30) t (lambda ()
                                     (org-refile-cache-clear)
                                     (org-refile-get-targets)))

  :general
  (org-mode-map
   "s-w" 'org-refile))
#+end_src

** org-keys
:PROPERTIES:
:ID:       19FC2EEB-7C71-43C1-97E6-52913C31CCDE
:END:
:LOGBOOK:
CLOCK: [2021-12-23 Thu 11:03]--[2021-12-23 Thu 11:21] =>  0:18
CLOCK: [2021-07-14 Wed 22:45]--[2021-07-14 Wed 22:51] =>  0:06
CLOCK: [2021-07-06 Tue 14:58]--[2021-07-06 Tue 15:18] =>  0:20
CLOCK: [2021-06-06 Sun 14:06]--[2021-06-06 Sun 14:16] =>  0:10
CLOCK: [2021-06-06 Sun 12:27]--[2021-06-06 Sun 13:00] =>  0:33
CLOCK: [2021-06-06 Sun 09:45]--[2021-06-06 Sun 10:05] =>  0:20
CLOCK: [2021-06-01 Tue 20:43]--[2021-06-01 Tue 21:00] =>  0:17
CLOCK: [2021-04-21 Wed 17:06]--[2021-04-21 Wed 17:09] =>  0:03
CLOCK: [2021-04-21 Wed 16:42]--[2021-04-21 Wed 17:03] =>  0:21
CLOCK: [2021-04-04 Sun 18:17]--[2021-04-04 Sun 18:22] =>  0:05
CLOCK: [2021-04-04 Sun 12:54]--[2021-04-04 Sun 12:57] =>  0:03
CLOCK: [2021-04-04 Sun 12:25]--[2021-04-04 Sun 12:29] =>  0:04
CLOCK: [2021-04-04 Sun 12:05]--[2021-04-04 Sun 12:25] =>  0:20
CLOCK: [2021-03-23 Tue 12:13]--[2021-03-23 Tue 12:21] =>  0:08
:END:

Enable speed keys. To trigger a speed key, point must be at the very beginning of an org headline. Type '?' for a list of keys.

#+begin_src emacs-lisp :results silent
(use-feature org-keys
  :after org
  :demand t
  :config
  (setq org-use-speed-commands t)
  (setq org-speed-commands
        '(("Outline navigation")
          ("k" . (org-speed-move-safe 'org-previous-visible-heading))
          ("." . (org-speed-move-safe 'org-forward-heading-same-level))
          ("," . (org-speed-move-safe 'org-backward-heading-same-level))
          ("l" . (org-speed-move-safe 'org-next-visible-heading))
          ("m" . (org-speed-move-safe 'outline-up-heading))
          ("j" . (consult-extras-org-heading))
          ("Outline structure editing")
          ("a" . (org-metaleft))
          ("d" . (org-metadown))
          ("s" . (org-metaup))
          ("f" . (org-metaright))
          ("q" . (org-shiftmetaleft))
          ("e" . (org-shiftmetadown))
          ("w" . (org-shiftmetaup))
          ("r" . (org-shiftmetaright))
          ("Outline visibility")
          ("'" . (org-force-cycle-archived))
          ("Meta data editing")
          ("t" . (org-todo))
          ("Clock")
          ("h" . (org-extras-jump-to-latest-clock-entry))
          ("H" . (lambda () (org-extras-jump-to-latest-clock-entry) (org-extras-clone-clock-entry)))
          ("i" . (org-clock-in))
          ("o" . (org-clock-out))
          ("Regular editing")
          ("z" . (undo-only))
          ("X" . (org-cut-subtree)) ; capital 'X' to prevent accidents
          ("c" . (org-copy-subtree))
          ("v" . (org-yank))
          ("Other")
          ("I" . (org-id-copy))
          ("p" . (org-priority))
          ("u" . (org-speed-command-help))
          ("g" . (org-agenda)))))
#+end_src

Set custom speed commands.

I use the same key for ~CONTROL~ and ~TAB~ (thanks to the magic of Karabiner), so I can't hit ~C-TAB~, to which ~org-force-cycle-archived~ is bound. Since this is a command I very rarely execute, I don't want to waste a key chord by rebinding the function to it. Instead, I set a custom speed command that lets me call that function with ~c~ (which replaces the default speed key binding for ~org-cycle~).

** ol
:PROPERTIES:
:ID:       6BA48DB9-1861-40A3-9811-1B5D9F0E350E
:END:

:PROPERTIES:
:ID:       9C00589B-C296-48BA-BD7A-B50992624AB0
:END:
#+begin_src emacs-lisp :results silent
(use-feature ol
  :after org
  :demand t
  :general
  ("H-L" 'org-store-link)
  (org-mode-map
   "A-C-M-s-j" 'org-previous-link
   "A-C-M-s-;" 'org-next-link)
  ((org-mode-map org-msg-edit-mode-map telega-chat-mode-map)
   "s-k" 'org-insert-link))
#+end_src

** ol-bbdb
:PROPERTIES:
:ID:       B1A25249-1E67-498D-8A68-0E4BDB3D0A2B
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :bbdb)
(use-feature ol-bbdb
  :after org bbdb
  :after ol
  :demand t
  :config
   (setq org-bbdb-anniversary-field 'birthday))
#+end_src

** org-protocol
:PROPERTIES:
:ID:       03387678-63D2-4B72-AD25-6F6F16992D5C
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:51]--[2022-07-17 Sun 11:55] =>  0:04
CLOCK: [2022-07-16 Sat 21:15]--[2022-07-17 Sun 10:49] => 13:34
:END:

[[https://www.orgroam.com/manual.html#Mac-OS][This section of the org-roam manual]] describes how to set up ~org-protocol~ on macOS. Note that [[https://bitbucket.org/mituharu/emacs-mac/][emacs-mac]] supports ~org-protocol~ out of the box and doesn't require turning on the Emacs server.

#+begin_src emacs-lisp :results silent
(use-feature org-protocol
  :after org
  :defer 15)
#+end_src

** ox
:PROPERTIES:
:ID:       A3639B32-E7EE-4119-876B-729DF18FD314
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 13:14]--[2021-07-25 Sun 13:18] =>  0:04
:END:

#+begin_src emacs-lisp :results silent
(use-feature ox
  :after org
  :defer 30
  :config
  (setq org-export-exclude-tags '("noexport" "ARCHIVE"))
  (setq org-export-backends '(ascii html icalendar latex md odt)) ; set export backends
  (setq org-export-with-broken-links 'mark) ; allow export with broken links
  (setq org-export-with-section-numbers nil) ; do not add numbers to section headings
  (setq org-export-with-toc nil) ; do not include table of contents
  (setq org-export-with-title nil) ; do not include title
  (setq org-export-headline-levels 4) ; include up to level 4 headlines
  (setq org-export-preserve-breaks t) ; respect single breaks when exporting
  ;; (org-export-with-author nil "do not include author")
  ;; (org-export-with-date nil "do not include export date")
  ;; (org-html-validation-link nil "do not include validation link")
  (setq org-html-postamble nil) ; the three lines above unnecessary when this set to nil
  (setq org-latex-logfiles-extensions (quote
                                       ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle"))) ; get rid of temporary LaTeX files upon export
  (setq org-preview-latex-default-process 'dvisvgm)
  (setq org-export-show-temporary-export-buffer nil) ; bury temporary export buffers generated by `org-msg'

  :general
  (org-mode-map
   "s-A-e" 'org-export-dispatch))
#+end_src

*** TODO [#6] Change face of content under headline tagged ~unpublished~ or ~noexport~
:PROPERTIES:
:Effort:   0:45
:ID:       1AC4CC67-0F8E-4E4D-95A5-DB7116AEA359
:END:

https://stackoverflow.com/questions/20089530/color-whole-section-line-in-org-mode-depending-on-tag

#+begin_src emacs-lisp :results silent :tangle no
(font-lock-add-keywords 'org-mode
                        '(("^.*:noexport:.*$" . font-lock-keyword-face)))
#+end_src

It works, but it only changes the color of the heading, rather than the text underneath.

** ox-hugo
:PROPERTIES:
:ID:       1E9E8DC4-83B7-44CA-B467-BA7428DDF812
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 19:17]--[2022-07-17 Sun 21:01] =>  1:44
:END:

/[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] is an org-mode exporter back-end for Hugo./

Hugo should be able to export ~org-cite~ citations.

#+begin_src emacs-lisp :results silent
(use-package ox-hugo
  :after ox)
#+end_src

** ox-pandoc
:PROPERTIES:
:ID:       C16B02FA-64E6-423B-9596-B3B023C93B21
:END:

/[[https://github.com/kawabata/ox-pandoc][ox-pandoc]] is an org-mode exporter that uses Pandoc./

#+begin_src emacs-lisp :results silent
(use-package ox-pandoc
  :after org)
#+end_src

** ox-gfm
:PROPERTIES:
:ID:       E0D2A0D0-4442-482C-B076-36CD8BB3F062
:END:

/[[https://github.com/larstvei/ox-gfm][ox-gfm]] is a Github Flavored Markdown org-mode exporter./

#+begin_src emacs-lisp
(use-package ox-gfm
  :after org
  :defer 20)
#+end_src

** ob
:PROPERTIES:
:ID:       A19E8C93-0435-4D02-AF4F-8213212D2386
:END:
:LOGBOOK:
CLOCK: [2021-08-06 Fri 15:59]--[2021-08-06 Fri 15:59] =>  0:00
CLOCK: [2021-07-25 Sun 13:18]--[2021-07-25 Sun 13:33] =>  0:15
CLOCK: [2021-06-06 Sun 14:34]--[2021-06-06 Sun 15:08] =>  0:34
CLOCK: [2021-04-05 Mon 19:18]--[2021-04-05 Mon 19:50] =>  0:32
CLOCK: [2021-02-25 Thu 15:00]--[2021-02-25 Thu 15:32] =>  0:32
:END:

#+begin_src emacs-lisp :results silent
(use-feature ob
  :after org
  :demand t
  :config
  (setq org-confirm-babel-evaluate 'org-extras-confirm-babel-evaluate)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (R . t)))

  (dolist (cons (list (cons "j" 'org-babel-next-src-block)
                      (cons "k" 'org-babel-previous-src-block)
                      (cons "n" 'org-babel-insert-header-arg)
                      (cons "p" 'org-babel-remove-result-one-or-many)))
    (add-to-list 'org-babel-key-bindings cons))

  :general
  (org-mode-map
   "s-b" 'tlon-init-build))
#+end_src

** org-src
:PROPERTIES:
:ID:       5D173B55-ED72-495C-80EE-39063BAB0550
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-src
  :after org
  :defer 5
  :config
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation nil)
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively nil) ; When set to `nil', newlines will be properly indented

  :general
  (org-src-mode-map
   "s-z" 'org-edit-src-exit))
#+end_src

** org-table
:PROPERTIES:
:ID:       6DB39CB9-0939-41CD-B3A4-4FC478F24077
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-table
  :after org
  :demand t

  :general
  (org-table-fedit-map
   "s-c" 'org-table-fedit-finish))
#+end_src

*** Resources
:PROPERTIES:
:ID:       BF9BD230-8771-4883-9DFD-65723C011314
:END:

- [cite:@EMACKS2022HowCreateTable]

** orgtbl-edit
:PROPERTIES:
:ID:       7C3382D2-F7B4-4F1B-854E-BB60D568E299
:END:

/[[https://github.com/shankar2k/orgtbl-edit][orgtbl-edit]] allows editing a spreadsheet or text-delimited file as an org table./

#+begin_src emacs-lisp :results silent
(use-package orgtbl-edit
  :elpaca (orgtbl-edit
             :host github
             :repo "shankar2k/orgtbl-edit"))
#+end_src

** org-crypt
:PROPERTIES:
:ID:       3C8E083B-55A1-4B55-A30A-BD9C4BE1D1D0
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:40]--[2023-04-30 Sun 11:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:19]--[2023-04-02 Sun 21:22] =>  0:03
CLOCK: [2021-03-18 Thu 18:49]--[2021-03-18 Thu 18:51] =>  0:02
:END:

/[[https://orgmode.org/manual/Org-Crypt.html][org-crypt]] encrypts the text under all headlines with a designated tag./

#+begin_src emacs-lisp :results silent
(use-feature org-crypt
  :after org
  :demand t
  :config
  (setq org-tags-exclude-from-inheritance '("crypt"))
  (setq org-crypt-key user-mail-address)
  (setq org-crypt-disable-auto-save t)

  (org-crypt-use-before-save-magic))
#+end_src

** org-element
:PROPERTIES:
:ID:       79B7B36E-D824-4D67-BBAC-E4E4D8FA628F
:END:

#+begin_src emacs-lisp
(use-feature org-element
  :after org
  :demand t
  :config
  ;; set to nil to temporarily disable cache to avoid `org-element-cache' errors
  (setq org-element-use-cache t))
#+end_src

** org-lint
:PROPERTIES:
:ID:       43E5754F-7EB8-4FB7-8A92-B57D8BA2AF81
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-lint
  :after org)
#+end_src

** org-habit
:PROPERTIES:
:ID:       A4EE67E0-498C-4CE0-BBB2-E7F24DA6AD69
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-habit
  :after org
  :demand t
  :config
  (setq org-habit-today-glyph #x1f4c5)
  (setq org-habit-completed-glyph #x2713)
  (setq org-habit-preceding-days 29)
  (setq org-habit-following-days 1)
  (setq org-habit-graph-column 3)
  (setq org-habit-show-habits nil)
  (setq org-habit-show-habits-only-for-today nil)

  :general
  (org-agenda-mode-map
   "h" 'org-habit-toggle-display-in-agenda))
#+end_src

** org-contrib
:PROPERTIES:
:ID:       F2DD9900-5926-4FE1-A8DC-C398CFE80378
:END:

/[[https://git.sr.ht/~bzg/org-contrib][org-contrib]] features add-ons to ~org-mode~.

#+begin_src emacs-lisp
(use-package org-contrib
  :after org
  :demand t)
#+end_src

** org-checklist
:PROPERTIES:
:ID:       1ABA68C3-187B-457C-9992-4C4BBEB45C18
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 15:33]--[2021-07-12 Mon 16:00] =>  0:27
CLOCK: [2021-06-22 Tue 21:39]--[2021-06-23 Wed 00:21] =>  2:42
CLOCK: [2021-04-20 Tue 23:28]--[2021-04-20 Tue 23:44] =>  0:16
:END:

Allows reset of checkboxes in recurring tasks. This works only on headings that have the property ~RESET_CHECK_BOXES~ set to ~t~. You can set the property of a heading by invoking the command ~org-set-property~ with point on that heading or immediately under it.

#+begin_src emacs-lisp :results silent
(use-feature org-checklist
  :after org-contrib
  :demand t)
#+end_src

** org-analyzer
:PROPERTIES:
:ID:       33BBA839-D680-4D74-AF0F-C6225799DD53
:END:

To try:
https://github.com/rksm/clj-org-analyzer/
https://www.reddit.com/r/emacs/comments/cptwh4/org_analyzer_an_app_that_visualizes_orgmode_time/
** org-make-toc
:PROPERTIES:
:ID:       5BAB49C3-DB85-4CB1-9CF7-5FD72AFB4608
:END:
:LOGBOOK:
CLOCK: [2023-02-26 Sun 13:15]--[2023-02-26 Sun 13:28] =>  0:13
:END:

/[[https://github.com/alphapapa/org-make-toc][org-make-toc]] generates automatic tables of contents for org files./

#+begin_src emacs-lisp :results silent
(use-package org-make-toc
  :after org
  :defer 10)
#+end_src

** org2blog
:PROPERTIES:
:ID:       56AD66CB-240C-4BAA-918B-CCD63BD518C4
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 13:27]--[2021-05-29 Sat 13:49] =>  0:22
CLOCK: [2021-05-29 Sat 12:08]--[2021-05-29 Sat 12:30] =>  0:22
CLOCK: [2021-03-27 Sat 22:03]--[2021-03-27 Sat 22:12] =>  0:09
CLOCK: [2021-03-18 Thu 21:57]--[2021-03-18 Thu 22:02] =>  0:05
CLOCK: [2021-03-17 Wed 22:08]--[2021-03-17 Wed 22:23] =>  0:15
CLOCK: [2021-03-17 Wed 20:34]--[2021-03-17 Wed 20:52] =>  0:18
:END:

/[[https://github.com/org2blog/org2blog][org2blog]] lets you blog from Org mode to WordPress./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :org2blog)
(use-package org2blog
  :after auth-source-pass
  :config
  (setq org2blog/wp-blog-alist
        `(("Pablo's website"
           :url "https://www.stafforini.com/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/wp-admin/admin"))
          ("Pablo's miscellany"
           :url "https://www.stafforini.com/blog/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/blog/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/blog/wp-admin/admin"))
          ("notatu dignum"
           :url "https://www.stafforini.com/quotes/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/quotes/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/quotes/wp-admin/admin"))
          ("Puro compás"
           :url "https://www.stafforini.com/tango/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/tango/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/tango/wp-admin/admin"))
          ("EA Quotes"
           :url "https://eaquotes.net/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net")
           :password ,(auth-source-pass-get 'secret "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net"))))

  (setq org2blog/wp-show-post-in-browser 'show)
  (setq org2blog/wp-track-posts (list paths-file-org2blog "Posts"))

  :general
  ("A-o" 'org2blog-user-interface))
#+end_src

** org2blog-extras
:PROPERTIES:
:ID:       189C41F8-D0BF-40CC-A4AD-96C7F4A76E4D
:END:

#+begin_src emacs-lisp
(use-personal-package org2blog-extras
  :after org2blog
  :demand t)
#+end_src

** org-journal
:PROPERTIES:
:ID:       16DB534E-D606-4510-84ED-6C6640780E7A
:END:

/[[https://github.com/bastibe/org-journal][org-journal]] is an org-mode based journaling mode./

#+begin_src emacs-lisp :results silent
(use-package org-journal
  :after org
  :config
  (setq org-journal-dir paths-dir-journal)
  (setq org-journal-date-format "%Y-%m-%d")
  (setq org-journal-file-format "%Y.org")
  (setq org-journal-file-type 'yearly) ; set org-journal to use the same files for same year entries

  :general
  ("A-j" 'org-journal-new-entry))
#+end_src

*** TODO [#5] Explore how to use org journal as the day organizer
:PROPERTIES:
:ID:       67333293-EE6D-4936-8C88-07F5AE193B81
:END:

** org-contacts
:PROPERTIES:
:ID:       63430292-5227-42B5-ABDC-4630C719E9D1
:END:

/[[https://repo.or.cz/org-contacts.git][org-contacts]] is a contacts management system for Org Mode./

#+begin_src emacs-lisp
(use-package org-contacts
  :after org
  :demand t
  :config
  (setq org-contacts-files `(,(file-name-concat paths-dir-repos "genus/contacts.org"))))
#+end_src

** org-autosort
:PROPERTIES:
:ID:       1BC53647-A492-4EA3-A9A5-352C71119629
:END:

/[[https://github.com/yantar92/org-autosort][org-autosort]] sorts entries in org files automatically./

#+begin_src emacs-lisp :results silent
(use-package org-autosort
  :elpaca (org-autosort :type git :host github :repo "yantar92/org-autosort")
  :after org)
#+end_src

** ox-clip
:PROPERTIES:
:ID:       E2D54031-28E4-4F96-A3D1-0E06D1B1A17E
:END:

/[[https://github.com/jkitchin/ox-clip][ox-clip]] copies selected regions in org-mode as formatted text on the clipboard./

#+begin_src emacs-lisp :results silent
(use-package ox-clip
  :after org
  :demand t
  :config
  ;; the default value works but will set the font to a particular
  ;; size, so when pasting to e.g. Google Docs it won't inherit the
  ;; font size of the rest of the document. this new value fixes this.
  (setq ox-clip-osx-cmd "hexdump -ve '1/1 \"%.2x\"' | xargs printf \"set the clipboard to {text:\\\" \\\", «class HTML»:«data HTML%s»}\" | osascript -")

  :general
  ((org-mode-map)
   "s-c" 'ox-clip-formatted-copy))
#+end_src

** org-mime
:PROPERTIES:
:ID:       EB437B48-CEB2-4727-8910-627061F4701F
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 17:42]--[2021-05-04 Tue 17:54] =>  0:12
CLOCK: [2021-03-29 Mon 17:15]--[2021-03-29 Mon 18:09] =>  0:54
:END:

/[[https://github.com/org-mime/org-mime][org-mime]] lets you send HTML email using Org-mode HTML export./

#+begin_src emacs-lisp :results silent
(use-package org-mime
  :after org
  :general
  (org-mode-map
   "s-m" 'org-mime-htmlize
   "s-A-m" 'org-mime-org-subtree-htmlize))
#+end_src

** elgantt
:PROPERTIES:
:ID:       22FCE4B1-4A51-4DF5-8BAF-2AC6E837DEE3
:END:

/[[https://github.com/legalnonsense/elgantt/][elgantt]] is a gantt chart for org mode./

#+begin_src emacs-lisp :results silent
(use-package elgantt
  :elpaca (elgantt
             :host github
             :repo "legalnonsense/elgantt")
  :after org
  :defer 20
  :config
  (setq elgantt-agenda-files (file-name-concat paths-dir-emacs "elpaca/repos/elgantt/test.org")))
#+end_src

** org-pomodoro
:PROPERTIES:
:ID:       107BED3A-947F-4D35-A382-2C20C1C37AED
:END:
:LOGBOOK:
CLOCK: [2022-04-30 Sat 14:12]--[2022-04-30 Sat 14:38] =>  0:26
CLOCK: [2022-03-31 Thu 18:49]--[2022-03-31 Thu 18:59] =>  0:10
CLOCK: [2022-03-31 Thu 17:36]--[2022-03-31 Thu 18:02] =>  0:26
CLOCK: [2022-03-31 Thu 17:25]--[2022-03-31 Thu 17:30] =>  0:05
:END:

/[[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]] provides org-mode support for the Pomodoro technique./

#+begin_src emacs-lisp :results silent
(use-package org-pomodoro
  :after org
  :defer 10
  :config/el-patch
  ;; silence silly lecture about killing pomodoros
  (defun org-pomodoro-killed ()
    "Is invoked when a pomodoro was killed.
This may send a notification, play a sound and adds log."
    (org-pomodoro-reset)
    (org-pomodoro-notify "Pomodoro killed." (el-patch-swap "One does not simply kill a pomodoro!" ""))
    (org-pomodoro-maybe-play-sound :killed)
    (when (org-clocking-p)
      (if org-pomodoro-keep-killed-pomodoro-time
          (org-clock-out nil t)
        (org-clock-cancel)))
    (run-hooks 'org-pomodoro-killed-hook))

  :config
  (setq org-pomodoro-length 25)
  (setq org-pomodoro-short-break-length (- 30 org-pomodoro-length))
  (setq org-pomodoro-long-break-length org-pomodoro-short-break-length)
  (setq org-pomodoro-finished-sound tmr-sound-file)
  (setq org-pomodoro-long-break-sound org-pomodoro-finished-sound)
  (setq org-pomodoro-short-break-sound org-pomodoro-finished-sound)
  ;; (add-hook 'org-pomodoro-started-hook #'org-extras-pomodoro-format-timer)

  :general
  ("H-I" 'org-pomodoro
   "M-s-e" 'org-pomodoro-extend-last-clock)
  (org-agenda-mode-map
   "I" 'org-pomodoro))
#+end_src

- check: https://gist.github.com/bravosierrasierra/1d98a89a7bcb618ef70c6c4a92af1a96#file-org-pomodoro-plus

** pomodoro-centile
:PROPERTIES:
:ID:       89ED4046-C75A-441C-BEF8-DC4322F0167F
:END:

#+begin_src emacs-lisp :tangle no
(use-package pomodoro-centile
  :elpaca (:host github
                 :repo "benthamite/pomodoro-centile"
                 :depth nil)
  :after org-pomodoro
  :demand t
  :config
  (setq pomodoro-centile-history-file (file-name-concat paths-dir-dropbox "misc/pomodoro-centile-history"))
  (setq pomodoro-centile-day-offset 4))
#+end_src

* note-taking
:PROPERTIES:
:ID:       EC6700D7-C65D-4430-8DAC-57772B423D69
:END:

** org-roam
:PROPERTIES:
:ID:       2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17
:END:
:LOGBOOK:
CLOCK: [2023-05-08 Mon 11:11]--[2023-05-08 Mon 12:20] =>  1:09
CLOCK: [2023-04-08 Sat 11:18]--[2023-04-08 Sat 11:32] =>  0:14
CLOCK: [2023-03-09 Thu 12:35]--[2023-03-09 Thu 12:57] =>  0:22
CLOCK: [2022-09-30 Fri 20:53]--[2022-09-30 Fri 21:21] =>  0:28
CLOCK: [2022-06-28 Tue 20:12]--[2022-06-28 Tue 20:13] =>  0:01
CLOCK: [2022-06-28 Tue 17:57]--[2022-06-28 Tue 18:21] =>  0:24
CLOCK: [2022-06-28 Tue 16:03]--[2022-06-28 Tue 16:06] =>  0:03
CLOCK: [2022-06-28 Tue 11:50]--[2022-06-28 Tue 12:30] =>  0:40
CLOCK: [2022-06-26 Sun 10:50]--[2022-06-26 Sun 11:45] =>  0:55
CLOCK: [2022-06-26 Sun 09:08]--[2022-06-26 Sun 09:29] =>  0:21
CLOCK: [2022-06-18 Sat 17:27]--[2022-06-18 Sat 17:43] =>  0:16
CLOCK: [2022-03-08 Tue 13:05]--[2022-03-08 Tue 13:06] =>  0:01
CLOCK: [2022-02-01 Tue 11:41]--[2022-02-01 Tue 12:01] =>  0:20
CLOCK: [2022-01-31 Mon 15:36]--[2022-01-31 Mon 15:52] =>  0:16
CLOCK: [2021-12-27 Mon 22:14]--[2021-12-27 Mon 22:16] =>  0:02
CLOCK: [2021-12-15 Wed 12:16]--[2021-12-15 Wed 12:26] =>  0:10
CLOCK: [2021-12-05 Sun 18:33]--[2021-12-05 Sun 18:46] =>  0:13
CLOCK: [2021-12-04 Sat 14:40]--[2021-12-04 Sat 15:00] =>  0:20
CLOCK: [2021-12-03 Fri 12:18]--[2021-12-03 Fri 12:23] =>  0:05
CLOCK: [2021-12-02 Thu 21:05]--[2021-12-02 Thu 21:20] =>  0:15
CLOCK: [2021-12-02 Thu 19:51]--[2021-12-02 Thu 20:56] =>  1:05
CLOCK: [2021-12-02 Thu 18:49]--[2021-12-02 Thu 18:55] =>  0:06
CLOCK: [2021-12-02 Thu 18:30]--[2021-12-02 Thu 18:33] =>  0:03
CLOCK: [2021-08-06 Fri 15:32]--[2021-08-06 Fri 15:33] =>  0:01
CLOCK: [2021-08-02 Mon 18:45]--[2021-08-02 Mon 18:47] =>  0:02
CLOCK: [2021-07-30 Fri 14:13]--[2021-07-30 Fri 14:30] =>  0:17
CLOCK: [2021-07-28 Wed 16:27]--[2021-07-28 Wed 16:47] =>  0:20
CLOCK: [2021-07-26 Mon 11:26]--[2021-07-26 Mon 12:25] =>  0:59
CLOCK: [2021-07-24 Sat 22:54]--[2021-07-25 Sun 08:40] =>  9:46
CLOCK: [2021-07-24 Sat 19:19]--[2021-07-24 Sat 19:47] =>  0:28
CLOCK: [2021-07-24 Sat 09:31]--[2021-07-24 Sat 09:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:03]--[2021-06-25 Fri 21:05] =>  0:02
CLOCK: [2021-05-17 Mon 15:45]--[2021-05-17 Mon 16:56] =>  1:11
CLOCK: [2021-05-17 Mon 14:41]--[2021-05-17 Mon 14:55] =>  0:14
CLOCK: [2021-05-03 Mon 20:56]--[2021-05-03 Mon 21:37] =>  0:41
CLOCK: [2021-04-10 Sat 22:05]--[2021-04-10 Sat 22:12] =>  0:07
CLOCK: [2021-03-25 Thu 20:41]--[2021-03-25 Thu 21:18] =>  0:37
CLOCK: [2021-02-11 Thu 18:53]--[2021-02-11 Thu 19:28] =>  0:35
CLOCK: [2020-12-19 Sat 13:47]--[2020-12-19 Sat 14:02] =>  0:15
CLOCK: [2020-09-10 Thu 19:53]--[2020-09-10 Thu 20:01] =>  0:08
CLOCK: [2020-09-08 Tue 19:45]--[2020-09-08 Tue 19:59] =>  0:14
:END:

/[[https://github.com/org-roam/org-roam][org-roam]] is a Roam replica with org-mode./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :org-roam)
(use-package org-roam
  :after org emacsql
  :demand t
  :init
  (if (version< emacs-version "29.0")
      (setq org-roam-database-connector 'sqlite)
    (setq org-roam-database-connector 'sqlite-builtin))

  :config
  (setq org-roam-directory paths-dir-org-roam)
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))

  (setq org-roam-capture-templates
        `(("r" "bibliography reference" plain
           (file ,paths-file-orb-noter-template)
           :if-new
           (file ,paths-file-orb-capture-template)
           :unnarrowed t :immediate-finish t :jump-to-captured t)))

  ;; adapted from
  ;; github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-node-hierarchy
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    (let ((level (org-roam-node-level node)))
      (concat
       (when (> level 0)
         (concat
          (propertize (org-roam-node-file-title node) 'face 'org-level-1)
          " > "))
       ;; This is a hacky propertization because it doesn't color the
       ;; intermediate headings differently, but doing that slowed
       ;; down the function too much.
       (when (> level 1)
         (concat
          (propertize (string-join (org-roam-node-olp node) " > ") 'face 'org-level-2)
          " > "))
       (propertize (org-roam-node-title node) 'face 'org-level-3))))

  (setq org-roam-node-display-template
        (concat "${hierarchy:160} "
                (propertize "${tags:20}" 'face 'org-tag)))

  ;; exclude selected headings based on other criteria
  (setq org-roam-db-node-include-function
        (lambda ()
          (if (or
               ;; exclude based on tags
               (member "noid" (org-get-tags))
               (member "ARCHIVE" (org-get-tags))
               ;; exclude based on heading names
               (member (org-get-heading) '("Local variables"
                                           "COMMENT Local variables"
                                           "TODO Local variables"
                                           "Evaluation"
                                           "History"
                                           "Further reading"
                                           "External links"
                                           "Related entries"
                                           "Archive :ARCHIVE:"))
               ;; exclude buffers when in list of special dirs and org
               ;; heading at point is of level higher than 1 (i.e.
               ;; don't create unnecessary IDs for article
               ;; subsections)
               (and
                ;; dir condition
                (member
                 (file-name-directory (buffer-file-name))
                 (mapcar #'file-name-as-directory
                         ;; List of special dirs
                         (list
                          paths-dir-journal
                          (file-name-concat paths-dir-dropbox ".Trash"))))
                ;; heading condition
                (> (org-current-level) 1))
               )
              nil
            t)))

  (add-to-list 'completion-at-point-functions #'org-roam-complete-link-at-point)

  ;; include transcluded links in `org-roam' backlinks
  (delete '(keyword "transclude") org-roam-db-extra-links-exclude-keys)

  (org-roam-db-autosync-mode -1)

  (add-hook 'org-roam-capture-new-node-hook #'orb--insert-captured-ref-h)
  (add-hook 'org-roam-capture-new-node-hook #'org-roam-capture--insert-captured-ref-h)

  :general
  ((org-mode-map minibuffer-mode-map)
   "s-i" 'org-roam-node-insert)
  (org-mode-map
   "s-r" 'org-roam-buffer-toggle))
#+end_src

- Check [[https://www.reddit.com/r/emacs/comments/omxl6n/config_for_orgroam_v2/][this config]] (v 2.0)
- And [[https://github.com/alexkehayias/emacs.d/blob/master/init.el#L715][this one]] (by the author of [[https://notes.alexkehayias.com/][this notes repository]], created with org-roam)
- And [[https://takeonrules.com/2021/08/22/ever-further-refinements-of-org-roam-usage/][this post]]

** org-roam-extras
:PROPERTIES:
:ID:       44F722DC-C324-4A86-85A1-F103812B2A6A
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :org-roam)
(use-personal-package org-roam-extras
  :after org-roam
  :demand t
  :config
    ;; exclude headings in specific files and directories
  (setq org-roam-file-exclude-regexp
        (let (result)
          (dolist (dir-or-file
                   (append
                    org-roam-extras-excluded-dirs
                    org-roam-extras-excluded-files)
                   (regexp-opt result))
            (push (if (file-directory-p dir-or-file)
                      (file-relative-name dir-or-file paths-dir-org-roam)
                    dir-or-file)
                  result))))

  (add-hook 'org-capture-prepare-finalize-hook #'org-roam-extras-remove-file-level-properties)

  :general
  ("H-N" 'org-roam-extras-new-note
   "H-j" 'org-roam-extras-node-find
   "H-J" 'org-roam-extras-node-find-special))
#+end_src

** org-roam-ui
:PROPERTIES:
:ID:       BAEADCA3-68C6-4B59-A45A-7A1C11C6F6BB
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 22:29]--[2021-08-02 Mon 22:29] =>  0:00
:END:

/[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] is a graphical frontend for exploring org-roam./

#+begin_src emacs-lisp
(use-package org-roam-ui
  :elpaca
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  (add-hook 'after-init #'org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t)
  (setq org-roam-ui-follow t)
  (setq org-roam-ui-update-on-save nil)
  (setq org-roam-ui-open-on-start nil))
#+end_src

** org-roam-browser-extension
:PROPERTIES:
:ID:       5461B907-53F6-4D99-B70C-45E9C3902EB4
:END:

[[https://github.com/madnificent/org-roam-browser-extension][org-roam-browser-extension]] indicates via a browser icon whether you have ~org-roam~ notes on the web page you are visiting.

I should check this out.

** org-transclusion
:PROPERTIES:
:ID:       8D8E5E44-248E-485F-9C74-E1D7A8A19D15
:END:

/[[https://github.com/nobiot/org-transclusion][org-transclusion]] supports [[https://en.wikipedia.org/wiki/Transclusion][transclusion]] with org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-transclusion
  :after org
  :defer 5
  :config
  (dolist (element '(headline drawer property-drawer))
    (push element org-transclusion-exclude-elements))

  (face-spec-set 'org-transclusion-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  (face-spec-set 'org-transclusion-source-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  :general
  ((org-mode-map)
  "s-l" 'org-transclusion-add-all))
#+end_src

** vulpea
:PROPERTIES:
:ID:       697CE296-FAA8-4485-94D8-B1321B59226F
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 16:02]--[2023-02-25 Sat 16:33] =>  0:31
CLOCK: [2022-10-10 Mon 14:36]--[2022-10-10 Mon 15:31] =>  0:55
CLOCK: [2022-07-17 Sun 08:54]--[2022-07-17 Sun 09:27] =>  0:33
CLOCK: [2022-06-27 Mon 12:10]--[2022-06-27 Mon 12:31] =>  0:21
CLOCK: [2022-05-08 Sun 08:45]--[2022-05-08 Sun 09:07] =>  0:22
CLOCK: [2021-12-14 Tue 19:46]--[2021-12-14 Tue 20:06] =>  0:20
:END:

/[[https://github.com/d12frosted/vulpea][vulpea]] is a collection of functions for note taking based on ~org~ and ~org-roam~./

I use this package to define a dynamic agenda, as explained and illustrated [[d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][here]]. I've made some changes to the system in that link, specifically to exclude files and directories at various stages:
1. At the broadest level, I exclude files and directories from the function (~org-extras-id-auto-add-ids-to-headings-in-file~) that otherwise automatically adds an ID to every org heading in a file-visiting buffer. Headings so excluded are not indexed by org-roam, because a heading requires an ID to be indexed. See the variables ~org-extras-id-auto-add-excluded-files~ and ~org-extras-id-auto-add-excluded-directories~ under the ~org-id~ section of this file.
2. I then exclude some headings with IDs from the org-roam database (via the variables  ~org-roam-file-exclude-regexp~ and ~org-roam-db-node-include-function~). See the ~org-roam~ section of this file.
3. Finally, I selectively add to ~org-agenda-files~ files that satisfy certain conditions (as defined by ~vulpea-extras-project-p~) and files modified recently (as specified by ~org-roam-extras-recent~), and exclude from ~org-agenda-files~ files listed in ~org-extras-agenda-files-excluded~.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :vulpea)
(use-package vulpea
  :after org org-roam
  :demand t)
#+end_src

** vulpea-extras
:PROPERTIES:
:ID:       466CED55-6DCA-4D17-83C7-B2FE9C2B0A69
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :vulpea)
(use-personal-package vulpea-extras
  :after vulpea
  :demand t
  ;; :commands (vulpea-extras-buffer-p vulpea-agenda-files-update vulpea-extras-buffer-prop-get-list vulpea-extras-project-update-tag)
  :config
  (add-hook 'find-file-hook #'vulpea-extras-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-extras-project-update-tag))
#+end_src

** org-noter
:PROPERTIES:
:ID:       A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7
:END:
:LOGBOOK:
CLOCK: [2023-10-08 Sun 09:23]--[2023-10-08 Sun 10:22] =>  0:59
CLOCK: [2022-01-05 Wed 16:03]--[2022-01-05 Wed 16:11] =>  0:08
CLOCK: [2021-07-27 Tue 20:55]--[2021-07-27 Tue 22:17] =>  1:22
CLOCK: [2021-07-27 Tue 19:42]--[2021-07-27 Tue 20:15] =>  0:33
CLOCK: [2021-07-26 Mon 23:12]--[2021-07-26 Mon 23:29] =>  0:17
CLOCK: [2021-07-26 Mon 22:41]--[2021-07-26 Mon 23:03] =>  0:22
CLOCK: [2021-07-26 Mon 22:15]--[2021-07-26 Mon 22:32] =>  0:17
CLOCK: [2021-07-25 Sun 22:51]--[2021-07-25 Sun 22:55] =>  0:04
CLOCK: [2021-07-18 Sun 10:41]--[2021-07-18 Sun 11:09] =>  0:28
CLOCK: [2021-07-17 Sat 19:16]--[2021-07-17 Sat 19:52] =>  0:36
CLOCK: [2021-07-17 Sat 12:42]--[2021-07-17 Sat 13:24] =>  0:42
:END:

/[[https://github.com/org-noter/org-noter][org-noter]] is an org-mode document annotator./

#+begin_src emacs-lisp :results silent
(use-package org-noter
  :elpaca (org-noter
           :host github
           :repo "org-noter/org-noter")
  :after org
  :config
  (setq org-noter-notes-search-path `(,paths-dir-bibliographic-notes))
  (setq org-noter-auto-save-last-location t)
  (setq org-noter-always-create-frame nil)
  (setq org-noter-separate-notes-from-heading t)
  (setq org-noter-kill-frame-at-session-end nil)

  :general
  (pdf-annot-minor-mode-map
   "s-s" 'org-noter-create-skeleton)
   (org-mode-map
   "s-n" 'org-noter-sync-current-note))
#+end_src

- To check: https://org-roam.discourse.group/t/org-roam-bibtex-in-a-sub-directory/649/5
- https://notes.andymatuschak.org/About_these_notes

** org-noter-extras
:PROPERTIES:
:ID:       3E324D44-27D5-4FA4-9D2F-2FFC6A4021DE
:END:

#+begin_src emacs-lisp
(use-personal-package org-noter-extras
   :after org-noter
   :demand t)
#+end_src

* reference & citation
:PROPERTIES:
:ID:       4939B006-F4F6-4A5C-9B78-85C998FDA7D8
:END:

See [[https://github.com/emacs-citar/citar/wiki/Comparisons#summary-of-diverse-emacs-bibliographic-and-citation-packages][this section]] of [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]]'s manual for a handy summary of the main bibliographic and citation Emacs packages.

** oc
:PROPERTIES:
:ID:       8AF25840-AC38-4FF7-A45F-F01B96C5DF5A
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 15:20]--[2022-06-22 Wed 15:26] =>  0:06
CLOCK: [2021-07-26 Mon 15:14]--[2021-07-26 Mon 15:56] =>  0:42
CLOCK: [2021-07-26 Mon 14:01]--[2021-07-26 Mon 14:26] =>  0:25
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc
  :after org
  :demand t
  :config
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `org-cite' vars after `tlon-babel' is loaded."
              ;; (setq org-cite-global-bibliography paths-files-bibliography-all) ; disabled for poor performance
              (setq org-cite-csl-styles-dir tlon-babel-dir-styles)))
  (setq org-cite-csl-locales-dir paths-dir-personal-csl-locales)
  (setq org-cite-insert-processor 'citar)
  (setq org-cite-follow-processor 'citar) ; `org-open-at-point' integration
  (setq org-cite-activate-processor 'citar) ;
  (setq org-cite-export-processors
        '((t . (csl "biblioteca-altruismo-eficaz.csl")))))
#+end_src

*** Resources
:PROPERTIES:
:ID:       8EA82227-F7EF-4C46-B40C-C5DE40F13130
:END:

- [cite:@Balintona2022CitationsOrgmodeOrgcite]. The most comprehensive explanation I'm aware of about how to use ~org-cite~. See [[https://www.reddit.com/r/orgmode/comments/vc7ys6/how_i_run_my_wiki_with_org_mode/][Reddit discussion]].
- [cite:@Kolsc2021HowActuallyInsert]. Reddit thread about the basics of ~org-cite~.

** oc-csl
:PROPERTIES:
:ID:       72710244-0369-4C12-8B83-0674EE0E11D5
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc-csl
  :after oc
  :demand t)
#+end_src

** citeproc
:PROPERTIES:
:ID:       2BB202FC-87DE-4563-B059-01680F8A2CB6
:END:
:LOGBOOK:
CLOCK: [2022-06-24 Fri 12:23]--[2022-06-24 Fri 12:31] =>  0:08
:END:

/[[https://github.com/andras-simonyi/citeproc-el][citeproc]] is a CSL 1.0.2 Citation Processor for Emacs./

#+begin_src emacs-lisp :results silent
(use-package citeproc
  :demand t)
#+end_src

** bibtex
:PROPERTIES:
:ID:       42191633-D2A1-4EDB-903F-3965ECB61510
:END:
:LOGBOOK:
CLOCK: [2023-03-26 Sun 20:16]--[2023-03-26 Sun 20:19] =>  0:03
CLOCK: [2022-07-16 Sat 16:38]--[2022-07-16 Sat 16:44] =>  0:06
:END:

/bibtex is major mode for editing and validating BibTeX ~.bib~ files./

#+begin_src emacs-lisp :results silent
(use-feature bibtex
  :demand t
  :config
  ;; This corresponds (roughly?) to `auth+year+shorttitle(3,3)' on Better BibTeX
  ;; retorque.re/zotero-better-bibtex/citing/
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `bibtex-files after `paths-files-bibliography-all' is set."
              (setq bibtex-files paths-files-bibliography-all)))
  (setq bibtex-search-entry-globally t)
  (setq bibtex-autokey-names 1)
  (setq bibtex-autokey-name-case-convert-function 'capitalize)
  (setq bibtex-autokey-year-length 4)
  (setq bibtex-autokey-titlewords 3)
  (setq bibtex-autokey-titlewords-stretch 0)
  (setq bibtex-autokey-titleword-ignore '("A" "a" "An" "an" "On" "on" "The" "the" "Eine?" "Der" "Die" "Das" "El" "La" "Lo" "Los" "Las" "Un" "Una" "Unos" "Unas" "el" "la" "lo" "los" "las" "un" "una" "unos" "unas" "y" "o" "Le" "La" "L'" "Les" "Un" "Une" "Des" "Du" "De la" "De l'" "Des" "le" "la" "l'" "les" "un" "une" "des" "du" "de la" "de l'" "des" "Lo" "Il" "La" "L'" "Gli" "I" "Le" "Uno" "lo" "il" "la" "l'" "gli" "i" "le" "uno"))
  (setq bibtex-autokey-title-terminators "[.!?;]\\|--")
  (setq bibtex-autokey-titleword-case-convert 'capitalize)
  (setq bibtex-autokey-titleword-length nil)
  (setq bibtex-autokey-titleword-separator "")
  (setq bibtex-autokey-year-title-separator "")
  (setq bibtex-autokey-preserve-case t)
  ;; Remove accents
  (setq bibtex-autokey-before-presentation-function 'bibtex-extras-asciify-string)
  ;; check tweaked version of `bibtex-format-entry' above
  (setq bibtex-entry-format '(opts-or-alts-fields last-comma delimiters page-dashes))

  ;; Add custom 'Video' entry type
  (push '("Video" "Video file"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("subtitle")
           ("language")
           ("version")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate")))
        bibtex-biblatex-entry-alist)

  ;; Add custom 'Movie' entry type
  (push '("Movie" "Film"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("abstract")
           ("keywords")
           ("language")
           ("version")
           ("rating")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate")))
        bibtex-biblatex-entry-alist)

  ;; Add custom 'TVepisode' entry type
  (push '("tvepisode" "tvepisode"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("abstract")
           ("keywords")
           ("language")
           ("version")
           ("rating")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate")))
        bibtex-biblatex-entry-alist)

  :general
  (bibtex-mode-map
   "s-a" 'bibtex-set-field
   "s-c" 'bibtex-copy-entry-as-kill
   "s-v" 'bibtex-yank
   "s-x" 'bibtex-kill-entry
   "A-C-H-x" 'bibtex-copy-entry-as-kill
   "A-C-H-c" 'bibtex-kill-entry
   "A-C-H-a" 'bibtex-copy-field-as-kill
   "A-C-H-f" 'bibtex-kill-field
   "A-C-s-r" 'bibtex-previous-entry
   "A-C-s-f" 'bibtex-next-entry))
#+end_src

*** TODO Move ratings from org headings to bibtex
:PROPERTIES:
:ID:       18A96B99-EAD2-4C1E-94C2-619903A52898
:END:

*** TODO Why bibtex generates a key starting with 'Boer' when the last name is deBoer?
:PROPERTIES:
:ID:       2FB7CCAA-E1FE-4B93-B441-DB9E8437233F
:END:

*** TODO [#6] Standardize author names in bibtex file
:PROPERTIES:
:ID:       8B243BA8-8CA1-4E6F-82CA-5CD950D8C498
:END:

** bibtex-extras
:PROPERTIES:
:ID:       31E4CEF9-8CF3-4921-A108-3C60A7191F8F
:END:

#+begin_src emacs-lisp
(use-personal-package bibtex-extras
  :demand t
  :config
  ;; Replace 'online' entry type
  (bibtex-extras-replace-element-by-name
   bibtex-biblatex-entry-alist
   "Online" '("Online" "Online Resource"
              (("author" nil nil 0) ("title") ("journaltitle" nil nil 3)
               ("date" nil nil 1) ("year" nil nil -1)
               ("doi" nil nil 2) ("url" nil nil 2))
              nil
              (("subtitle") ("language") ("version") ("note")
               ("organization") ("month")
               ("pubstate") ("eprintclass" nil nil 4) ("primaryclass" nil nil -4)
               ("eprinttype" nil nil 5) ("archiveprefix" nil nil -5) ("urldate"))))
  :general
  (bibtex-mode-map
   "s-i" 'bibtex-extras-open-in-ebib
   "s-t" 'bibtex-extras-move-entry-to-tlon))
#+end_src

** bibtex-completion
:PROPERTIES:
:ID:       DCD9D75D-7814-49D8-A3E0-33846D5A08FD
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 15:10]--[2022-05-29 Sun 15:15] =>  0:05
CLOCK: [2021-11-08 Mon 18:40]--[2021-11-08 Mon 18:53] =>  0:13
CLOCK: [2021-08-24 Tue 12:02]--[2021-08-24 Tue 12:11] =>  0:09
CLOCK: [2021-07-14 Wed 20:44]--[2021-07-14 Wed 21:21] =>  0:37
CLOCK: [2021-07-13 Tue 22:42]--[2021-07-13 Tue 23:08] =>  0:26
CLOCK: [2021-07-13 Tue 15:32]--[2021-07-13 Tue 16:01] =>  0:29
CLOCK: [2021-07-11 Sun 15:41]--[2021-07-11 Sun 15:42] =>  0:01
CLOCK: [2021-07-10 Sat 22:16]--[2021-07-10 Sat 22:49] =>  0:33
CLOCK: [2021-07-10 Sat 22:07]--[2021-07-10 Sat 22:07] =>  0:00
:END:

/[[https://github.com/tmalsburg/helm-bibtex][bibtex-completion]] is a backend for searching and managing bibliographies in Emacs./

The package is required by [[id:EC73B84D-530E-4179-BB67-F19110A543DF][org-roam-bibtex]].

#+begin_src emacs-lisp :results silent
(use-package bibtex-completion
  :elpaca (bibtex-completion :version (lambda (_) "2.0.0")) ; github.com/progfolio/elpaca/issues/229
  :defer 5
  :config/el-patch
  ;; disable file watchers
  (defun bibtex-completion-init ()
    "Check that the files and directories specified by the user actually exist.
Also sets `bibtex-completion-display-formats-internal'."

    ;; Remove current watch-descriptors for bibliography files:
    (mapc (lambda (watch-descriptor)
            (file-notify-rm-watch watch-descriptor))
          bibtex-completion-file-watch-descriptors)
    (setq bibtex-completion-file-watch-descriptors nil)

    ;; Check that all specified bibliography files exist and add file
    ;; watches for automatic reloading of the bibliography when a file
    ;; is changed:
    (el-patch-remove (mapc (lambda (file)
                             (if (f-file? file)
                                 (let ((watch-descriptor
                                        (file-notify-add-watch file
                                                               '(change)
                                                               (lambda (event) (bibtex-completion-candidates)))))
                                   (setq bibtex-completion-file-watch-descriptors
                                         (cons watch-descriptor bibtex-completion-file-watch-descriptors)))
                               (user-error "Bibliography file %s could not be found" file)))
                           (bibtex-completion-normalize-bibliography)))

    ;; Pre-calculate minimal widths needed by the format strings for
    ;; various entry types:
    (setq bibtex-completion-display-formats-internal
          (mapcar (lambda (format)
                    (let* ((format-string (cdr format))
                           (fields-width 0)
                           (string-width
                            (string-width
                             (s-format format-string
                                       (lambda (field)
                                         (setq fields-width
                                               (+ fields-width
                                                  (string-to-number
                                                   (or (cadr (split-string field ":"))
                                                       ""))))
                                         "")))))
                      (-cons* (car format) format-string (+ fields-width string-width))))
                  bibtex-completion-display-formats)))

  :config
  (setq bibtex-completion-pdf-open-function 'find-file)
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `bibtex-completion-bibliography' after `paths-files-bibliography-all' is set."
              (setq bibtex-completion-bibliography paths-files-bibliography-all)))
  (setq bibtex-completion-notes-path paths-dir-bibliographic-notes)
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-dialect 'biblatex))
#+end_src

** org-roam-bibtex
:PROPERTIES:
:ID:       EC73B84D-530E-4179-BB67-F19110A543DF
:END:
:LOGBOOK:
CLOCK: [2022-08-30 Tue 14:58]--[2022-08-30 Tue 15:05] =>  0:07
CLOCK: [2022-06-26 Sun 08:47]--[2022-06-26 Sun 09:08] =>  0:21
CLOCK: [2021-07-27 Tue 23:26]--[2021-07-27 Tue 23:54] =>  0:28
CLOCK: [2021-07-26 Mon 12:38]--[2021-07-26 Mon 13:16] =>  0:38
CLOCK: [2021-07-26 Mon 12:28]--[2021-07-26 Mon 12:29] =>  0:01
CLOCK: [2021-07-26 Mon 11:17]--[2021-07-26 Mon 11:26] =>  0:09
CLOCK: [2021-07-14 Wed 21:56]--[2021-07-14 Wed 22:45] =>  0:49
:END:

/[[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] integrates [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]] and [[id:42191633-D2A1-4EDB-903F-3965ECB61510][bibtex]]./

#+begin_src emacs-lisp :results silent
(use-package org-roam-bibtex
  :defer 5
  :after bibtex-completion org-roam
  :config
  (setq orb-roam-ref-format 'org-cite)
  (setq orb-insert-interface 'citar-open-notes)
  (setq orb-note-actions-interface 'default)
  (setq orb-attached-file-extensions '("pdf"))
  (dolist (keyword '("year" "title" "url" "keywords"))
    (add-to-list 'orb-preformat-keywords keyword))
  (org-roam-bibtex-mode))
#+end_src

** citar
:PROPERTIES:
:ID:       67AB4C5F-2425-4D31-9590-9D13790B4C97
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 08:11]--[2023-07-05 Wed 08:27] =>  0:16
CLOCK: [2022-10-04 Tue 22:47]--[2022-10-05 Wed 01:01] =>  2:14
CLOCK: [2022-10-03 Mon 19:15]--[2022-10-03 Mon 19:53] =>  0:38
CLOCK: [2022-08-30 Tue 15:09]--[2022-08-30 Tue 15:15] =>  0:06
CLOCK: [2022-07-16 Sat 14:32]--[2022-07-16 Sat 14:45] =>  0:13
CLOCK: [2022-06-23 Thu 16:45]--[2022-06-23 Thu 18:15] =>  1:30
CLOCK: [2022-06-22 Wed 15:26]--[2022-06-22 Wed 15:42] =>  0:16
CLOCK: [2021-07-26 Mon 14:26]--[2021-07-26 Mon 15:14] =>  0:48
:END:

/[[https://github.com/bdarcus/bibtex-actions][citar]] is a package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents./

#+begin_src emacs-lisp :results silent
(use-package citar
  :elpaca
  (citar :type git
         :host github
         :repo "emacs-citar/citar"
         :includes (citar-org))
  :after oc vertico embark marginalia
  :demand t
  :config
  (setq citar-open-note-functions '(orb-citar-edit-note))
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `citar-bibliography' after `paths-files-bibliography-all' is set."
              (setq citar-bibliography paths-files-bibliography-all)))
  (setq citar-notes-paths `(,paths-dir-bibliographic-notes))
  (setq citar-at-point-function 'embark-act)
  (setq citar-symbol-separator "  ")
  (setq citar-format-reference-function 'citar-citeproc-format-reference)
  (setq citar-markdown-prompt-for-extra-arguments nil)
  (setq citar-templates '((main . "${author editor:30%sn}   ${date year issued:4}   ${title:60}   ${database:10}")
                          (suffix . "   ${=key= id:25}    ${=type=:12}")
                          (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
                          (note . "Notes on ${author editor:%etal}, ${title}")))

  (push 'citar-history savehist-additional-variables)

  (require 'citar-org-roam)
  (citar-register-notes-source
   'orb-citar-source (list :name "Org-Roam Notes"
                           :category 'org-roam-node
                           :items #'citar-org-roam--get-candidates
                           :hasitems #'citar-org-roam-has-notes
                           :open #'citar-org-roam-open-note
                           :create #'orb-citar-edit-note
                           :annotate #'citar-org-roam--annotate))
  (setq citar-notes-source 'orb-citar-source)

  (tlon-init-override-code-if-available
   :citar-keybindings
   '((general-define-key
      "H-/" 'citar-insert-citation
      "A-H-M-s-?" 'citar-extras-open-file-at-point) ; i.e. H-S-/
     (general-define-key
      :keymaps '(citar-map citar-citation-map)
      "c" 'embark-copy-as-kill
      "u" 'citar-open-links))))
#+end_src

*** TODO Tweak note creation function so that it adds a tag with the work type
:PROPERTIES:
:ID:       FB459DDE-BFDD-4740-9FFA-7AFFB74A38D1
:END:
Having headings tagged with the type of work they are notes of allows me to query the org-roam db specifically for notes of a particular type.

*** Resources
:PROPERTIES:
:ID:       EAB0E32B-129C-4980-A06B-94B4C25966E2
:END:

[cite:@Balintona2022CitationsOrgmodeOrgcite]

** citar-extras
:PROPERTIES:
:ID:       6CC7F660-F6E6-4605-AA42-B495FF090B5D
:END:

#+begin_src emacs-lisp
(use-personal-package citar-extras
  :after citar
  :demand t
  :general
  ((citar-map citar-citation-map)
   "d" 'ebib-extras-download-dwim
   "i" 'citar-extras-open-in-ebib
   "s" 'ebib-extras-search-dwim
   "t" 'citar-extras-move-entry-to-tlon
   "b" 'citar-extras-goto-bibtex-entry))
#+end_src

** citar-citeproc
:PROPERTIES:
:ID:       8CE6DBC7-E180-4E6D-B6E2-8D1E2756E765
:END:

/[[https://github.com/emacs-citar/citar/blob/main/citar-citeproc.el][citar-citeproc]] provides Citeproc reference support for citar./

#+begin_src emacs-lisp :results silent
(use-feature citar-citeproc
  :demand t
  :after citar citeproc citar-extras tlon-babel
  :config
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `citar-citeproc-csl-styles-dir' after `tlon-babel-dir-styles' is set."
                (setq citar-citeproc-csl-styles-dir tlon-babel-dir-styles)))
  (setq citar-citeproc-csl-style "biblioteca-altruismo-eficaz.csl")
  (setq citar-citeproc-csl-locales-dir org-cite-csl-locales-dir)
  ;; https://github.com/emacs-citar/citar/wiki/Indicators
  (setq citar-indicators
        (list citar-extras-indicator-files-icons
              citar-extras-indicator-links-icons
              citar-extras-indicator-notes-icons)))
#+end_src

** citar-embark
:PROPERTIES:
:ID:       846EEC59-E022-41B7-96D3-4B379F8F91D4
:END:

/[[https://github.com/emacs-citar/citar/tree/9d7088c1fe82e9cfa508ead7ef7738c732556644#embark][citar-embark]] adds contextual access actions in the minibuffer and at-point via the citar-embark-mode minor mode./

#+begin_src emacs-lisp :results silent
(use-package citar-embark
  :after citar embark
  :demand t
  :config
  (citar-embark-mode))
#+end_src

** citar-org-roam
:PROPERTIES:
:ID:       894C33F7-BB88-403B-92EA-260DD73B4B23
:END:

/[[https://github.com/emacs-citar/citar-org-roam][citar-org-roam]] provides integration between [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]] and [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]]./

#+begin_src emacs-lisp :results silent
(use-package citar-org-roam
  :elpaca (citar-org-roam
           :host github
           :repo "emacs-citar/citar-org-roam")
  :after citar org-roam
  :demand t
  :no-require t)
#+end_src

** org-ref
:PROPERTIES:
:ID:       1FC5528A-9F5A-4A9D-B168-5A1F51110455
:END:

/[[https://github.com/jkitchin/org-ref][org-ref]] supports citations, cross-references, bibliographies in org-mode and useful bibtex tools./

#+begin_src emacs-lisp :results silent
(use-package org-ref
  :defer 20
  :config
  (setq org-ref-bibtex-pdf-download-dir paths-dir-downloads)
  (setq bibtex-completion-library-path paths-dir-pdf-library)

  ;; Tweak function to remove redundant and conflicting `Year' field
  (defun isbn-to-bibtex (isbn bibfile)
    "Get bibtex entry for ISBN and insert it into BIBFILE.
Nothing happens if an entry with the generated key already exists
in the file. Data comes from www.ebook.de."
    (interactive
     (list
      (read-string
       "ISBN: "
       ;; now set initial input
       (cond
        ;; If region is active and it starts with a number, we use it
        ((and  (region-active-p)
               (s-match "^[0-9]" (buffer-substring (region-beginning) (region-end))))
         (buffer-substring (region-beginning) (region-end)))
        ;; if first entry in kill ring starts with a number assume it is an isbn
        ;; and use it as the guess
        ((stringp (car kill-ring))
         (when (s-match "^[0-9]" (car kill-ring))
           (car kill-ring)))
        ;; type or paste it in
        (t
         nil)))
      (completing-read "Bibfile: " (org-ref-possible-bibfiles))))

    (let* ((url (format "https://www.ebook.de/de/tools/isbn2bibtex?isbn=%s" isbn))
           (entry))
      (with-current-buffer (url-retrieve-synchronously url t t)
        (goto-char (point-min))
        (when (re-search-forward "@[a-zA-Z]+{.+\\(\n\s+[^\n]+\\)+}$" nil t)
          (setq entry (match-string 0))
          ;; FIXME: This isn't working
          (s-replace-regexp "^  Year =.*" "" entry)))

      (if (not entry)
          (message "Nothing found.")
        (find-file bibfile)
        (goto-char (point-max))
        (insert (with-temp-buffer
                  (insert (concat entry "\n}"))
                  (goto-char (point-min))
                  ;; [2020-06-06 Sat] I got a report that ottobib returns entries
                  ;; with ,, in the first line. here if we find one, I eliminate
                  ;; one of them.
                  (when (re-search-forward ",," nil t)
                    (delete-char -1))
                  (org-ref-isbn-clean-bibtex-entry)
                  ;; TODO: Uncomment the line below when you fix the FIXME issue above
                  ;; (org-ref-clean-bibtex-entry)
                  (bibtex-fill-entry)
                  (s-trim (buffer-string))))
        (save-buffer))))

  (delete 'orcb-check-journal org-ref-clean-bibtex-entry-hook)
  (delete 'orcb-download-pdf org-ref-clean-bibtex-entry-hook))
#+end_src
*** TODO Define ~isbn-to-bibtex~ via elpatch
:PROPERTIES:
:ID:       A3B5FC74-45C6-475C-8D31-B8355F12747C
:END:

** ebib
:PROPERTIES:
:ID:       A744824B-1FE1-4721-8318-1FDDE3758A7A
:END:
:LOGBOOK:
CLOCK: [2023-07-18 Tue 21:20]--[2023-07-18 Tue 21:39] =>  0:19
CLOCK: [2023-07-18 Tue 08:25]--[2023-07-18 Tue 08:56] =>  0:31
CLOCK: [2023-06-18 Sun 08:34]--[2023-06-18 Sun 09:19] =>  0:45
CLOCK: [2023-06-16 Fri 12:47]--[2023-06-16 Fri 13:11] =>  0:24
CLOCK: [2023-05-28 Sun 09:26]--[2023-05-28 Sun 13:21] =>  3:55
CLOCK: [2023-05-07 Sun 11:35]--[2023-05-07 Sun 12:45] =>  1:10
CLOCK: [2023-04-30 Sun 18:51]--[2023-04-30 Sun 18:57] =>  0:06
CLOCK: [2023-04-21 Fri 20:39]--[2023-04-21 Fri 20:42] =>  0:03
CLOCK: [2023-04-11 Tue 00:58]--[2023-04-11 Tue 01:55] =>  0:57
CLOCK: [2023-03-27 Mon 21:29]--[2023-03-27 Mon 21:45] =>  0:16
CLOCK: [2023-03-27 Mon 20:49]--[2023-03-27 Mon 21:14] =>  0:25
CLOCK: [2023-03-22 Wed 13:55]--[2023-03-22 Wed 14:00] =>  0:05
CLOCK: [2023-03-19 Sun 12:35]--[2023-03-19 Sun 12:58] =>  0:23
CLOCK: [2023-03-12 Sun 19:36]--[2023-03-12 Sun 20:19] =>  0:43
CLOCK: [2022-09-22 Thu 14:39]--[2022-09-22 Thu 15:15] =>  0:36
CLOCK: [2022-09-13 Tue 17:29]--[2022-09-13 Tue 17:56] =>  0:27
CLOCK: [2022-09-13 Tue 16:36]--[2022-09-13 Tue 17:05] =>  0:29
CLOCK: [2022-09-13 Tue 15:51]--[2022-09-13 Tue 16:36] =>  0:45
CLOCK: [2022-09-09 Fri 15:11]--[2022-09-09 Fri 17:18] =>  2:07
CLOCK: [2022-09-09 Fri 11:53]--[2022-09-09 Fri 12:47] =>  0:54
CLOCK: [2022-09-09 Fri 11:39]--[2022-09-09 Fri 11:50] =>  0:11
CLOCK: [2022-09-05 Mon 15:47]--[2022-09-05 Mon 16:00] =>  0:13
CLOCK: [2022-09-03 Sat 14:28]--[2022-09-03 Sat 16:15] =>  1:47
CLOCK: [2022-08-31 Wed 15:08]--[2022-08-31 Wed 16:37] =>  1:29
CLOCK: [2022-08-31 Wed 14:17]--[2022-08-31 Wed 14:30] =>  0:13
CLOCK: [2022-08-30 Tue 16:13]--[2022-08-30 Tue 21:18] =>  5:05
CLOCK: [2022-08-30 Tue 15:23]--[2022-08-30 Tue 16:10] =>  0:47
CLOCK: [2022-08-30 Tue 13:23]--[2022-08-30 Tue 14:58] =>  1:35
CLOCK: [2022-08-27 Sat 12:47]--[2022-08-27 Sat 13:55] =>  1:08
CLOCK: [2022-08-26 Fri 17:38]--[2022-08-26 Fri 20:36] =>  2:58
CLOCK: [2022-08-26 Fri 11:54]--[2022-08-26 Fri 12:33] =>  0:39
CLOCK: [2022-08-26 Fri 10:32]--[2022-08-26 Fri 11:48] =>  1:16
CLOCK: [2022-08-24 Wed 13:04]--[2022-08-24 Wed 13:18] =>  0:14
CLOCK: [2022-08-23 Tue 13:50]--[2022-08-23 Tue 13:58] =>  0:08
CLOCK: [2022-07-16 Sat 14:45]--[2022-07-16 Sat 15:17] =>  0:32
:END:

/[[https://github.com/joostkremers/ebib][ebib]] ([[http://joostkremers.github.io/ebib/][homepage]]) is a BibTeX database manager for Emacs./

#+begin_src emacs-lisp :results silent
(use-package ebib
  :demand t
  :config
  (add-hook 'tlon-babel-post-init-hook
            (lambda ()
              "Set `ebib-preload-bib-files' after `paths-files-bibliography-all' is set."
              (setq ebib-preload-bib-files paths-files-bibliography-all)))
  (setq ebib-notes-directory paths-dir-bibliographic-notes)
  (setq ebib-notes-use-org-capture t)
  (setq ebib-notes-display-max-lines 9999)
  (setq ebib-filename-separator ";")
  (setq ebib-file-associations nil) ; do not open any file types externally
  (setq ebib-layout 'index-only)
  (setq ebib-bibtex-dialect 'biblatex)
  (setq ebib-use-timestamp t)
  (setq ebib-timestamp-format "%Y-%m-%d %T (%Z)")
  (setq ebib-default-entry-type "online")
  (setq ebib-uniquify-keys t)
  (setq ebib-index-columns '(("Entry Key" 30 t)
                             ("Author/Editor" 25 t)
                             ("Year" 4 t)
                             ("Title" 50 t)))
  (setq ebib-extra-fields
        '((biblatex "abstract" "keywords" "origdate" "langid" "translation" "narrator" "file" "timestamp" "rating" "crossref" "=key=")
          (BibTeX "crossref" "annote" "abstract" "keywords" "file" "timestamp" "url" "doi")))

  (setq ebib-hidden-fields ; unhide some fields
        (cl-remove-if
         (lambda (el)
           (member el '("edition" "isbn" "timestamp" "titleaddon" "translator")))
         ebib-hidden-fields))

  (add-to-list 'ebib-hidden-fields "year") ; hide others
  (add-hook 'ebib-index-mode-hook #'doom-modeline-mode)
  (add-hook 'ebib-entry-mode-hook #'visual-line-mode)
  (add-hook 'ebib-add-entry #'ebib-extras-create-list-of-existing-authors)

  :general
  (ebib-multiline-mode-map
   "s-c" 'ebib-quit-multiline-buffer-and-save)
  ((ebib-entry-mode-map ebib-index-mode-map)
   "H-s" 'ebib-save-current-database
   "K" 'ebib-copy-key-as-kill
   "Q" 'ebib-quit)
  (ebib-entry-mode-map
   "TAB" 'ebib-goto-next-set
   "<backtab>" 'ebib-goto-prev-set
   "H-s" 'ebib-save-current-database
   "H-S" 'ebib-save-all-databases
   "!" 'ebib-generate-autokey
   "/" (lambda! (ebib-extras-attach-file t))
   "A" 'ebib-add-field
   "c" 'ebib-copy-current-field-contents
   "D" 'ebib-delete-current-field-contents
   "E" 'ebib-edit-keyname
   "u" 'ebib-browse-url
   "1" (lambda! (ebib-view-file-in-field 1))
   "2" (lambda! (ebib-view-file-in-field 2)))
  (ebib-index-mode-map
   "<return>" 'ebib-edit-entry
   "A" 'ebib-add-entry
   "D" 'ebib-delete-entry
   "k" 'ebib-prev-entry
   "l" 'ebib-next-entry))
#+end_src

The macro below generates the commands correctly. But attempting to define key bindings results in duplicate commands. I'm not sure what's on; it seems to be related to ~use-package~.

*** TODO Tweak ebib film command so that it directly opens Letterboxd page with IMDb ID
:PROPERTIES:
:ID:       C1D156F5-A78E-4588-9888-1816044CAC05
:END:

*** TODO Ebib: make 'title' field single-line
:PROPERTIES:
:ID:       24813D4B-598A-4BCB-8488-281D16D7C56A
:END:

*** TODO Ebib: Add new websites to 'journal' field
:PROPERTIES:
:ID:       3CF3C58F-4EF5-42EF-92DA-5AA33C726DFA
:END:

*** TODO Decide how ebib should deal with multi-volume works
:PROPERTIES:
:ID:       33D8549E-7DD8-4E4B-A690-0E6D29A8CA60
:END:

*** TODO Decide exhaustive list of work types
:PROPERTIES:
:ID:       9837CC84-AE98-4749-A16B-86EF995D4531
:END:

*** TODO Modify my custom ebib formulas so that they use native uniquify
:PROPERTIES:
:ID:       BA7B5845-B148-43B6-BE50-C1CBF89478BB
:END:

*** resources
:PROPERTIES:
:ID:       A05D6298-646A-4E47-B3B2-07A14EABCEC5
:END:

[[https://juanjose.garciaripoll.com/blog/ebib-biblio-interface/index.html][eBib-Biblio interface, aka. Mendeley for Emacs]]

** ebib-extras
:PROPERTIES:
:ID:       9E86F42E-2F41-4BB7-ABC5-1C929DBD5C06
:END:

#+begin_src emacs-lisp
(use-personal-package ebib-extras
  :after ebib tlon-babel
  :demand t
  :config
  (advice-add 'ebib-init :after #'ebib-extras-auto-reload-databases)

  :general
  ("A-i" 'ebib-extras-open-or-switch)
  ((ebib-entry-mode-map ebib-index-mode-map)
   "d" 'ebib-extras-duplicate-entry
   "n" 'ebib-extras-citar-open-notes)
  (ebib-entry-mode-map
   "SPC" 'ebib-extras-open-file-dwim
   "," 'ebib-extras-title-case
   "." 'ebib-extras-sentence-case
   "/" (lambda! (ebib-extras-attach-file t))
   "?" 'ebib-extras-attach-file
   "a" 'ebib-extras-search-amazon
   "b" 'ebib-extras-open-entry-in-bibtex-file
   "g" 'ebib-extras-search-library-genesis
   "G" 'ebib-extras-search-goodreads
   "h" 'ebib-extras-open-html-file
   "H" 'ebib-extras-open-html-file-externally
   "i" 'ebib-extras-download-by-identifier
   "I" 'ebib-extras-set-id
   "s-k" 'ebib-extras-fetch-keywords
   "o" 'ebib-extras-search-connected-papers
   "p" 'ebib-extras-open-pdf-file
   "P" 'ebib-extras-open-pdf-file-externally
   "R" 'ebib-extras-set-rating
   "s-r" 'ebib-extras-rename-files
   "s" 'ebib-extras-search-dwim
   "T" 'ebib-extras-no-translation-found
   "V" 'ebib-extras-search-internet-archive
   "w" 'ebib-extras-download-dwim
   "x" 'ebib-extras-search-university-of-toronto
   "y" 'ebib-extras-search-hathitrust
   "z" 'ebib-extras-search-google-scholar
   "1" (lambda! (ebib-view-file-in-field 1))
   "2" (lambda! (ebib-view-file-in-field 2)))
  (ebib-index-mode-map
   "A-C-s-<tab>" 'ebib-extras-end-of-index-buffer
   "s" 'ebib-extras-sort-toggle
   "s-t" 'ebib-extras-move-entry-to-tlon))
#+end_src

** bib
:PROPERTIES:
:ID:       D3DE21CB-388A-48A0-A7EB-E79DD48D5E81
:END:

#+begin_src emacs-lisp
(use-package bib
  :elpaca (bib
           :host github
           :repo "benthamite/bib"
           :depth nil) ; clone entire repo, not just last commit
  :defer 5
  :config
  (setq bib-isbndb-key
        (auth-source-pass-get "key" (concat "tlon/babel/isbndb.com/" tlon-core-email-shared)))
  (setq bib-omdb-key
        (auth-source-pass-get 'secret "chrome/omdbapi.com"))
  (setq bib-tmdb-key
        (auth-source-pass-get "key" "chrome/themoviedb.org/stafforini"))

  :general
  (ebib-index-mode-map
   "t" 'bib-zotra-add-entry-from-title))
#+end_src


** biblio
:PROPERTIES:
:ID:       63D8DE23-E17B-43B9-B623-95F404D134A0
:END:
/[[https://github.com/cpitclaudel/biblio.el][biblio]] supports browsing and importing bibliographic references from various databases./

#+begin_src emacs-lisp
(use-package biblio)
#+end_src

** persid
:PROPERTIES:
:ID:       57366A1C-A55A-47F8-8B62-E3412D674879
:END:

/[[https://github.com/rougier/persid][persid]] is a persistent identifier library for Emacs./

To check out.

** zotra
:PROPERTIES:
:ID:       815B8CEA-D36D-4E47-B728-D86FEFB736DF
:END:
:LOGBOOK:
CLOCK: [2023-11-01 Wed 08:29]--[2023-11-01 Wed 08:50] =>  0:21
CLOCK: [2023-05-14 Sun 19:59]--[2023-05-14 Sun 20:02] =>  0:03
CLOCK: [2023-03-09 Thu 19:19]--[2023-03-09 Thu 19:56] =>  0:37
CLOCK: [2022-08-31 Wed 16:37]--[2022-08-31 Wed 17:37] =>  1:00
CLOCK: [2022-08-31 Wed 14:05]--[2022-08-31 Wed 14:17] =>  0:12
CLOCK: [2022-07-16 Sat 21:03]--[2022-07-16 Sat 21:15] =>  0:12
CLOCK: [2022-07-16 Sat 15:26]--[2022-07-16 Sat 15:40] =>  0:14
:END:

/[[https://github.com/mpedramfar/zotra][zotra]] provides functions to get bibliographic information from a URL via [[https://www.zotero.org/support/translators][Zotero translators]], but without relying on the Zotero client./

#+begin_src emacs-lisp :results silent
(use-package zotra
  :elpaca (zotra
           :host github
           :repo "mpedramfar/zotra")
  :demand t
  :config
  (setq zotra-use-curl nil)
  (setq zotra-url-retrieve-timeout 15)
  (setq zotra-default-entry-format "biblatex")
  (setq zotra-after-add-entry-hook nil)
  (setq zotra-download-attachment-default-directory paths-dir-downloads)
  (setq zotra-backend 'zotra-server)
  (setq zotra-local-server-directory (expand-file-name "~/source/zotra-server/"))

  :general
  ((ebib-index-mode-map ebib-entry-mode-map)
   "W" 'zotra-download-attachment)
  (ebib-index-mode-map
   "a" 'zotra-add-entry))
#+end_src

** zotra-extras
:PROPERTIES:
:ID:       29BBF8F1-FC6D-4AFE-AEE4-6C01BB4AAA5F
:END:

#+begin_src emacs-lisp
(use-personal-package zotra-extras
  :demand t
  :after zotra
  :init
  ;; this is the only way I can get this to work
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (add-hook 'zotra-after-get-bibtex-entry-hook #'zotra-after-get-bibtex-entry-hook-function)))

  :general
  ((ebib-index-mode-map ebib-entry-mode-map eww-mode-map)
   "z" 'zotra-extras-url-full-capture))
#+end_src

** internet-archive
:PROPERTIES:
:ID:       89CD61F5-D883-4A4F-9210-EA238235AD34
:END:

/[[https://github.com/benthamite/internet-archive][internet-archive]] supports the downloading of books from the Internet Archive./

#+begin_src emacs-lisp
(use-package internet-archive
  :elpaca (internet-archive
           :host github
           :repo "benthamite/internet-archive")
  :demand t
  :config
  (setq internet-archive-ade-close-when-done t)
  (add-hook 'internet-archive-protocol-hook #'frame-extras-restore-focus))
#+end_src

* email
:PROPERTIES:
:ID:       2CF6D256-143D-4F3E-8383-36CB090FC4F2
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 20:05]--[2021-12-11 Sat 20:15] =>  0:10
CLOCK: [2021-07-12 Mon 18:56]--[2021-07-12 Mon 19:03] =>  0:07
CLOCK: [2021-07-10 Sat 20:11]--[2021-07-10 Sat 20:20] =>  0:09
CLOCK: [2021-04-08 Thu 10:10]--[2021-04-08 Thu 10:52] =>  0:42
CLOCK: [2021-04-05 Mon 21:03]--[2021-04-05 Mon 21:42] =>  0:39
:END:

** simple
:PROPERTIES:
:ID:       509B1DFA-E776-4BF5-8231-4A5984FD0150
:END:

#+begin_src emacs-lisp
(use-feature simple
  :demand t
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  (setq read-mail-command 'mu4e))
#+end_src

** sendmail
:PROPERTIES:
:ID:       25BB02C1-B537-4D2F-AF95-3B1217A58E6D
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Sending.html][sendmail]] is a mode that provides mail-sending facilities from within Emacs./

#+begin_src emacs-lisp :results silent
(use-feature sendmail
  :config
  (setq send-mail-function 'smtpmail-send-it))
#+end_src

** smtpmail
:PROPERTIES:
:ID:       F05AFA09-978B-441D-B947-0DBEA4DBC7BF
:END:

#+begin_src emacs-lisp :results silent
(use-feature smtpmail
  :config
  (setq smtpmail-smtp-user user-mail-address)
  (setq smtpmail-local-domain "gmail.com")
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587))
#+end_src


** async-mail-sending
:PROPERTIES:
:ID:       BEF562DB-61D5-4AB5-8B8A-44DD866FE285
:END:
:LOGBOOK:
CLOCK: [2023-12-01 Fri 21:37]--[2023-12-01 Fri 21:50] =>  0:13
:END:

/[[https://github.com/lordpretzel/async-email-sending][async-email-sending]] enables asynchronous sending of emails in Emacs using the new built-in sqlite support in Emacs 29./

<2023-12-01 Fri> Failed to send an email when I tested it. So not using for the time being.

#+begin_src emacs-lisp
(use-package async-email-sending
  :disabled
  :elpaca (async-email-sending
           :host github
           :repo "lordpretzel/async-email-sending")
  :demand t
  ;; needs to be set via `customize'
  :custom (async-email-sending-use-async-send-mail t))
#+end_src

** message
:PROPERTIES:
:ID:       67208BCE-6FFD-48B2-A5AD-7B72BAF31692
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/message.html][message]] is a message composition mode./

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq message-kill-buffer-on-exit t) ; make `message-send-and-exit' kill buffer, not bury it
  (setq message-send-mail-function 'smtpmail-send-it)

  (add-hook 'message-mode-hook (lambda () (auto-fill-mode -1)))

  :general
  ((message-mode-map org-msg-edit-mode-map)
   "s-c" 'message-send-and-exit
   "s-f" 'message-goto-from
   "s-s" 'message-goto-subject
   "s-t" 'message-goto-to
   "s-A-b" 'message-goto-bcc
   "s-A-c" 'message-goto-cc
   "s-A-s" 'message-send)
  (message-mode-map
   "s-b" 'message-goto-body))
#+end_src

*** TODO [#4] Configure ~message-send-mail-function~ so that messages are sent asynchronously
:PROPERTIES:
:ID:       6A48B9FE-3FC9-4D41-B124-F9D7D3898CB4
:Effort:   0:45
:END:

[[https://turkja.fi/posts/emacs-and-smtp/][Emacs and SMTP with gmail | Jarkko Turkulainen]]
https://gist.github.com/loziju/66d3f024e102704ff5222e54a4bfd50e

** mml
:PROPERTIES:
:ID:       2A87061B-BE45-443B-AB2C-893A69C20003
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/Composing.html][mml]] is a library that parses a MML (MIME Meta Language) and generates MIME messages./

#+begin_src emacs-lisp :results silent
(use-feature mml
  :general
  (message-mode-map
   "s-a" 'mml-attach-file))
#+end_src

** mu4e
:PROPERTIES:
:ID:       1B568415-F030-437B-921C-B4A65B370A6E
:END:
:LOGBOOK:
CLOCK: [2023-04-05 Wed 22:30]--[2023-04-05 Wed 22:53] =>  0:23
CLOCK: [2023-03-23 Thu 23:21]--[2023-03-23 Thu 23:35] =>  0:14
CLOCK: [2023-03-22 Wed 09:29]--[2023-03-22 Wed 09:36] =>  0:07
CLOCK: [2023-03-16 Thu 19:28]--[2023-03-16 Thu 20:20] =>  0:52
CLOCK: [2023-03-16 Thu 17:13]--[2023-03-16 Thu 18:24] =>  1:11
CLOCK: [2023-03-08 Wed 19:40]--[2023-03-08 Wed 19:48] =>  0:08
CLOCK: [2022-07-19 Tue 09:23]--[2022-07-19 Tue 09:48] =>  0:25
CLOCK: [2022-07-19 Tue 08:37]--[2022-07-19 Tue 09:01] =>  0:24
CLOCK: [2022-07-18 Mon 23:00]--[2022-07-18 Mon 23:54] =>  0:54
CLOCK: [2022-07-15 Fri 14:22]--[2022-07-15 Fri 14:46] =>  0:24
CLOCK: [2022-07-11 Mon 22:30]--[2022-07-12 Tue 00:07] =>  1:37
CLOCK: [2022-07-09 Sat 22:07]--[2022-07-09 Sat 23:16] =>  1:09
CLOCK: [2022-06-09 Thu 22:38]--[2022-06-09 Thu 22:55] =>  0:17
CLOCK: [2022-05-30 Mon 17:03]--[2022-05-30 Mon 17:21] =>  0:18
CLOCK: [2022-05-30 Mon 03:45]--[2022-05-30 Mon 04:19] =>  0:34
CLOCK: [2022-05-29 Sun 10:31]--[2022-05-29 Sun 10:55] =>  0:24
CLOCK: [2022-05-24 Tue 14:59]--[2022-05-24 Tue 15:16] =>  0:17
CLOCK: [2022-05-13 Fri 16:30]--[2022-05-13 Fri 17:02] =>  0:32
CLOCK: [2021-12-06 Mon 23:37]--[2021-12-07 Tue 00:24] =>  0:47
CLOCK: [2021-12-03 Fri 15:48]--[2021-12-03 Fri 16:15] =>  0:27
CLOCK: [2021-11-18 Thu 14:17]--[2021-11-18 Thu 14:22] =>  0:05
CLOCK: [2021-10-25 Mon 10:27]--[2021-10-25 Mon 10:30] =>  0:03
CLOCK: [2021-10-20 Wed 20:07]--[2021-10-20 Wed 20:15] =>  0:08
CLOCK: [2021-10-02 Sat 13:00]--[2021-10-02 Sat 13:06] =>  0:06
CLOCK: [2021-10-01 Fri 22:04]--[2021-10-01 Fri 22:28] =>  0:24
CLOCK: [2021-09-29 Wed 21:39]--[2021-09-29 Wed 22:02] =>  0:23
CLOCK: [2021-09-16 Thu 21:00]--[2021-09-16 Thu 21:11] =>  0:11
CLOCK: [2021-09-16 Thu 20:12]--[2021-09-16 Thu 20:16] =>  0:04
CLOCK: [2021-09-10 Fri 11:02]--[2021-09-10 Fri 11:12] =>  0:10
CLOCK: [2021-08-21 Sat 20:44]--[2021-08-21 Sat 21:07] =>  0:23
CLOCK: [2021-08-20 Fri 12:46]--[2021-08-20 Fri 12:50] =>  0:04
CLOCK: [2021-08-17 Tue 14:45]--[2021-08-17 Tue 14:52] =>  0:07
CLOCK: [2021-08-17 Tue 09:48]--[2021-08-17 Tue 09:59] =>  0:11
CLOCK: [2021-08-16 Mon 21:08]--[2021-08-16 Mon 21:11] =>  0:03
CLOCK: [2021-08-16 Mon 19:41]--[2021-08-16 Mon 20:05] =>  0:24
CLOCK: [2021-08-16 Mon 14:12]--[2021-08-16 Mon 17:22] =>  3:10
CLOCK: [2021-08-15 Sun 13:34]--[2021-08-15 Sun 13:46] =>  0:12
CLOCK: [2021-08-14 Sat 17:53]--[2021-08-14 Sat 18:13] =>  0:20
CLOCK: [2021-08-13 Fri 21:36]--[2021-08-13 Fri 22:05] =>  0:29
CLOCK: [2021-08-12 Thu 15:57]--[2021-08-12 Thu 16:25] =>  0:28
CLOCK: [2021-08-12 Thu 09:28]--[2021-08-12 Thu 09:54] =>  0:26
CLOCK: [2021-08-10 Tue 20:37]--[2021-08-10 Tue 20:38] =>  0:01
CLOCK: [2021-08-09 Mon 23:06]--[2021-08-09 Mon 23:45] =>  0:39
CLOCK: [2021-08-09 Mon 22:40]--[2021-08-09 Mon 23:00] =>  0:20
CLOCK: [2021-08-09 Mon 22:16]--[2021-08-09 Mon 22:30] =>  0:14
CLOCK: [2021-08-09 Mon 21:40]--[2021-08-09 Mon 22:05] =>  0:25
CLOCK: [2021-08-09 Mon 20:35]--[2021-08-09 Mon 21:28] =>  0:53
CLOCK: [2021-08-09 Mon 19:37]--[2021-08-09 Mon 20:05] =>  0:24
CLOCK: [2021-08-09 Mon 18:57]--[2021-08-09 Mon 19:21] =>  0:24
CLOCK: [2021-08-09 Mon 18:33]--[2021-08-09 Mon 18:51] =>  0:18
CLOCK: [2021-08-08 Sun 22:08]--[2021-08-08 Sun 22:36] =>  0:28
CLOCK: [2021-08-08 Sun 21:10]--[2021-08-08 Sun 21:44] =>  0:34
CLOCK: [2021-08-08 Sun 20:27]--[2021-08-08 Sun 21:02] =>  0:35
CLOCK: [2021-08-08 Sun 19:47]--[2021-08-08 Sun 20:01] =>  0:14
CLOCK: [2021-08-08 Sun 19:12]--[2021-08-08 Sun 19:42] =>  0:30
CLOCK: [2021-08-08 Sun 17:51]--[2021-08-08 Sun 18:12] =>  0:21
CLOCK: [2021-08-08 Sun 15:29]--[2021-08-08 Sun 15:45] =>  0:16
CLOCK: [2021-08-08 Sun 15:27]--[2021-08-08 Sun 15:28] =>  0:01
CLOCK: [2021-08-08 Sun 12:14]--[2021-08-08 Sun 13:04] =>  0:50
CLOCK: [2021-08-08 Sun 10:50]--[2021-08-08 Sun 10:54] =>  0:04
CLOCK: [2021-08-06 Fri 12:40]--[2021-08-06 Fri 14:16] =>  1:36
CLOCK: [2021-08-06 Fri 12:28]--[2021-08-06 Fri 12:38] =>  0:10
CLOCK: [2021-08-06 Fri 11:26]--[2021-08-06 Fri 11:31] =>  0:05
CLOCK: [2021-08-05 Thu 21:33]--[2021-08-05 Thu 21:49] =>  0:16
CLOCK: [2021-08-05 Thu 19:40]--[2021-08-05 Thu 20:00] =>  0:20
CLOCK: [2021-08-05 Thu 19:12]--[2021-08-05 Thu 19:20] =>  0:08
CLOCK: [2021-08-05 Thu 13:57]--[2021-08-05 Thu 14:50] =>  0:53
CLOCK: [2021-08-05 Thu 13:42]--[2021-08-05 Thu 13:53] =>  0:11
CLOCK: [2021-08-05 Thu 13:08]--[2021-08-05 Thu 13:16] =>  0:08
CLOCK: [2021-04-18 Sun 21:36]--[2021-04-18 Sun 22:25] =>  0:49
CLOCK: [2021-04-18 Sun 20:55]--[2021-04-18 Sun 21:27] =>  0:32
CLOCK: [2021-04-15 Thu 20:52]--[2021-04-15 Thu 21:10] =>  0:18
CLOCK: [2021-04-15 Thu 16:13]--[2021-04-15 Thu 16:31] =>  0:18
:END:

/[[https://github.com/djcb/mu][mu4e]] is an an Emacs-based e-mail client./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mu4e)
(use-package mu4e
  :elpaca (mu4e :host github
                :files ("mu4e/*.el" "build/mu4e/mu4e-meta.el" "build/mu4e/mu4e-config.el" "build/mu4e/mu4e.info")
                :repo "djcb/mu"
                :main "mu4e/mu4e.el"
                :pre-build (("./autogen.sh") ("ninja" "-C" "build"))
                :build (:not elpaca--compile-info)
                :ref "a8f002b"
                :depth nil)
  :demand t
  :config
  ;; (mu4e-debug t) ; uncomment when debugging
  (setq mu4e-split-view 'single-window)
  (setq mu4e-headers-show-target nil)
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval 180)
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder "/[Gmail]/Trash")
  (setq mu4e-attachment-dir paths-dir-downloads)
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-maildir-shortcuts
        `((,mu4e-drafts-folder  . ?d)
          (,mu4e-sent-folder    . ?t)
          (,mu4e-trash-folder   . ?x)
          (,mu4e-refile-folder  . ?a))) ; required for correct Gmail refiling
  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-compose-format-flowed t)
  (setq mu4e-confirm-quit nil)
  (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (setq mu4e-search-include-related nil)
  (setq mu4e-search-results-limit 1000)
  (setq mu4e-headers-visible-lines 25)
  (setq mu4e-hide-index-messages t)
  (setq mu4e-sent-messages-behavior 'delete) ; Gmail already keeps a copy

  ;; performance improvements (but with downsides)
  ;; groups.google.com/g/mu-discuss/c/hRRNhM5mwr0
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html
  (setq mu4e-index-cleanup t) ; nil improves performance
  (setq mu4e-index-lazy-check nil) ; t improves performance

  (setq mu4e-compose-context-policy 'ask)
  (setq mu4e-context-policy 'ask)
  (setq mu4e-modeline-support nil)
  (setq mu4e-headers-fields '((:human-date . 16)
                              (:from . 30)
                              (:subject)))
  (mu4e t)

  :general
  ("A-m" 'mu4e)
  ((mu4e-main-mode-map mu4e-headers-mode-map mu4e-view-mode-map)
   "c" 'mu4e-compose-new)
  ((mu4e-headers-mode-map mu4e-view-mode-map)
   "," 'mu4e-copy-message-path
   "<" 'mu4e-headers-split-view-shrink
   ">" 'mu4e-headers-split-view-grow
   "s-f" 'mu4e-compose-forward
   "i" 'mu4e-select-other-view
   "r" 'mu4e-compose-reply)
  (mu4e-main-mode-map
   "h" 'mu4e-display-manual
   "j" 'mu4e-search-maildir
   "s" 'mu4e-search
   "u" 'mu4e-update-mail-and-index)
  (mu4e-headers-mode-map
   "*" 'mu4e-headers-mark-all
   "A" 'mu4e-headers-mark-all-unread-read
   "d" 'mu4e-headers-mark-for-delete
   "k" 'mu4e-headers-prev
   "l" 'mu4e-headers-next
   "m" 'mu4e-headers-mark-for-something
   "R" 'mu4e-headers-mark-for-refile
   "V" 'mu4e-headers-mark-for-move)
  (mu4e-view-mode-map
   "," 'mu4e-view-headers-next
   "." 'mu4e-view-headers-prev
   "d" 'mu4e-view-mark-for-delete
   "L" 'mu4e-view-save-attachments
   "m" 'mu4e-view-mark-for-something
   "w" 'mu4e-copy-message-path
   "A-C-s-u" nil
   "A-C-s-p" nil))
#+end_src

*** resources
:PROPERTIES:
:ID:       A7472C4E-FF72-4CBE-A9E2-E3C3F0AB0B38
:END:

- [[https://github.com/morzahavi/.emacs.d/blob/3c5dcd402f19b4b6a9c07942825de52a874e870c/modules/email/mu4e/config.el][.emacs.d/config.el at 3c5dcd402f19b4b6a9c07942825de52a874e870c · morzahavi/.emacs.d · GitHub]]. Highly elaborate config.
- https://ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html. Excellent setup instructions.
- Package to try: [[https://github.com/rougier/mu4e-thread-folding][GitHub - rougier/mu4e-thread-folding: Functions for folding threads in mu4e headers view]]
  - See also [[https://gist.github.com/rougier/98e83fb50e19fb73fe34a7ecc5fc1ccc][this]] (discussed [[https://www.reddit.com/r/emacs/comments/pvpb6d/mu4e_very_fast_thread_folding/][here]])

- [[https://www.youtube.com/watch?v=yZRyEhi4y44]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][A Complete Guide to Email in Emacs using Mu and Mu4e]]. Advanced setup, for MacOS. But uses OfflineMAP rather than isync.
- [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e for Dummies : emacs]].
- [[https://www.ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html][Reading IMAP email in Emacs]]. Very thorough and clearly explained tutorial, written in 2021. Looks like the best resource so far.
- [[https://gist.github.com/areina/3879626][Manage your email in emacs with mu4e · GitHub]]. Instructions from 2016, with updates in comments.
- [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]. Very nice appearance/layout.

- How to set up ~offlineimap~ to retrieve password from ~pass~: https://unix.stackexchange.com/a/48355
- How to install ~mu4e~: https://emacs.stackexchange.com/questions/46156/how-to-install-mu-and-mu4e-with-gui-emacs
- https://www.sastibe.de/2021/01/setting-up-emacs-as-mail-client/

  https://emacs.readthedocs.io/en/latest/mu4e__email_client.html

To re-index the database without restarting Emacs, run ~pkill -2 -u $UID mu~ or ~then ~mu index~ from the terminal. Or try [[https://github.com/djcb/mu/issues/8#issuecomment-396649525][this script]].

If you get a ~pinentry~ problem, try running this on the termnal ~gpgconf --kill gpg-agent~.

To debug "Update process returned with non-zero exit code", ~(start-process-shell-command "test-mu4e" "test-mu4e" mu4e-get-mail-command)~
https://mu-discuss.narkive.com/mxM4AVIW/how-to-debug-non-zero-exit-code

If you encounter problems with mu and Straight, see [[https://github.com/raxod502/straight.el/issues/491#issuecomment-760150634][this thread]].

** mu4e-extras
:PROPERTIES:
:ID:       A131F743-C780-4D66-9F1A-D3F63F92DE0B
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mu4e)
(use-personal-package mu4e-extras
  :after mu4e
  :demand t
  :config
  (setq mu4e-extras-inbox-folder "/Inbox")
  (setq mu4e-extras-daily-folder "/Daily")

  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (dolist (shortcut `((,mu4e-extras-inbox-folder . ?i)
                                  (,mu4e-extras-daily-folder . ?y)))
                (add-to-list 'mu4e-maildir-shortcuts shortcut))))

  (add-hook 'elpaca-after-init-hook #'mu4e-extras-set-contexts)
  (add-hook 'mu4e-mark-execute-pre-hook #'mu4e-extras-gmail-fix-flags)
  (add-hook 'mu4e-view-mode-hook #'mu4e-extras-set-face-locally)

  :general
  ((mu4e-headers-mode-map mu4e-view-mode-map)
   "o" 'mu4e-extras-view-org-capture
   "$" 'mu4e-extras-copy-sum)
  (mu4e-main-mode-map
   "g" 'mu4e-extras-compose-new-externally
   "r" 'mu4e-extras-reindex-db)
  (mu4e-headers-mode-map
   "D" 'mu4e-extras-headers-trash
   "e" 'mu4e-extras-headers-archive
   "E" 'mu4e-extras-headers-mark-read-and-archive
   "v" 'mu4e-extras-headers-move
   "x" 'mu4e-extras-mark-execute-all-no-confirm)
  (mu4e-view-mode-map
   "D" 'mu4e-extras-view-trash
   "e" 'mu4e-extras-view-archive
   "x" 'mu4e-extras-view-in-gmail
   "v" 'mu4e-extras-view-move))
#+end_src

** org-msg
:PROPERTIES:
:ID:       DADEABFE-0E73-4E8F-9973-771FFEF55B60
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:14]--[2022-07-22 Fri 19:16] =>  1:02
CLOCK: [2022-07-22 Fri 10:45]--[2022-07-22 Fri 11:14] =>  0:29
CLOCK: [2021-12-18 Sat 14:19]--[2021-12-18 Sat 14:22] =>  0:03
CLOCK: [2021-08-17 Tue 21:26]--[2021-08-17 Tue 21:33] =>  0:07
CLOCK: [2021-08-05 Thu 12:49]--[2021-08-05 Thu 13:03] =>  0:14
:END:

/[[https://github.com/jeremy-compostella/org-msg][org-msg]] is a global minor mode mixing up Org mode and Message mode to compose and reply to emails in a HTML-friendly style./

[2023-10-28 Sat] Some updates in ~mu~~ v1.11.23 have broken ~org-msg~. To make it work, you can uninstall ~mu~ and then install the stable version via ~brew install mu~. Then use  [[https://github.com/progfolio/elpaca/blob/master/doc/manual.md#recipe-keyword-ref][ref]] keyword in the ~mu4e~ elpaca formula to install the commit of that version. As of today, ~brew info mu~ says the stable version of ~mu~ is 1.10.8. In the ~mu~ repo [[https://github.com/djcb/mu/releases][releases]] page, we see that the commit corresponding to this version is ~a8f002b~. So we use ~ref: "a8f002b"~.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mu4e)
(use-package org-msg
  :after org mu4e
  :demand t
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (setq org-msg-startup "hidestars indent inlineimages")
  (setq org-msg-recipient-names `((,user-mail-address . "Pablo")))
  (setq org-msg-greeting-name-limit 3)
  (setq org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text))))
  (setq org-msg-convert-citation t)
  (setq org-msg-enforce-css '((del nil
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (color . "grey")
                                    (border-left . "none")
                                    (text-decoration . "line-through")
                                    (margin-bottom . "0px")
                                    (margin-top . "10px")
                                    (line-height . "1.3")))
                              (a nil
                                 ((color . "#4078F2")))
                              (a reply-header
                                 ((color . "black")
                                  (text-decoration . "none")))
                              (div reply-header
                                   ((padding . "3.0pt 0in 0in 0in")
                                    (border-top . "solid #d5d5d5 1.0pt")
                                    (margin-bottom . "20px")))
                              (span underline
                                    ((text-decoration . "underline")))
                              (li nil
                                  ((font-family . "\"Georgia\"")
                                   (font-size . "11pt")
                                   (line-height . "1.3")
                                   (margin-bottom . "0px")
                                   (margin-top . "2px")))
                              (nil org-ul
                                   ((list-style-type . "square")))
                              (nil org-ol
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (line-height . "1.3")
                                    (margin-bottom . "0px")
                                    (margin-top . "0px")
                                    (margin-left . "30px")
                                    (padding-top . "0px")
                                    (padding-left . "5px")))
                              (nil signature
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (margin-bottom . "20px")))
                              (blockquote quote0
                                          ((padding-left . "5px")
                                           (font-size . "0.9")
                                           (margin-left . "10px")
                                           (margin-top . "10px")
                                           (margin-bottom . "0")
                                           (background . "#f9f9f9")
                                           (border-left . "3px solid #d5d5d5")))
                              (blockquote quote1
                                          ((padding-left . "5px")
                                           (font-size . "0.9")
                                           (margin-left . "10px")
                                           (margin-top . "10px")
                                           (margin-bottom . "0")
                                           (background . "#f9f9f9")
                                           (color . "#324e72")
                                           (border-left . "3px solid #3c5d88")))
                              (pre nil
                                   ((line-height . "1.3")
                                    (color . "#000000")
                                    (background-color . "#f0f0f0")
                                    (margin . "0px")
                                    (font-size . "9pt")
                                    (font-family . "monospace")))
                              (p nil
                                 ((text-decoration . "none")
                                  (margin-bottom . "0px")
                                  (margin-top . "10px")
                                  (line-height . "1.3")
                                  (font-size . "11pt")
                                  (font-family . "\"Georgia\"")))
                              (div nil
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (line-height . "11pt")))))

  (org-msg-mode)

  :general
  (org-msg-edit-mode-map
   "s-a" 'org-msg-attach
   "s-b" 'org-msg-goto-body))
#+end_src

*** TODO [#5] Figure out how to make ~org-msg~ preserve formatting of quoted emails
:PROPERTIES:
:ID:       E379BBD3-8C33-47F2-8CCF-FB15BFAF14DD
:Effort:   0:30
:END:
I.e. the message quoted when on replies to, or forwards, an existing email.

*** TODO [#5] Figure out how to include LaTeX/Mathjax
:PROPERTIES:
:Effort:   0:30
:ID:       E128A0A2-DA3E-4435-ADBF-472E7268678D
:END:

** org-msg-extras
:PROPERTIES:
:ID:       672D77D8-E9AA-4A66-A16A-EAB54E0238E6
:END:

#+begin_src emacs-lisp
(use-personal-package org-msg-extras
  :after org-msg
  :demand t
  :general
  (org-msg-edit-mode-map
   "s-g" 'org-msg-extras-open-in-grammarly
   "s-x" 'org-msg-extras-kill-message))
#+end_src

* messaging
:PROPERTIES:
:ID:       7DD09AFA-70A6-4E9D-AA78-C8E8421A9673
:END:
:LOGBOOK:
:END:

** telega
:PROPERTIES:
:ID:       E5B6D1B4-6225-4F69-8522-F8405127E1DE
:END:
:LOGBOOK:
CLOCK: [2022-09-30 Fri 19:27]--[2022-09-30 Fri 20:50] =>  1:23
CLOCK: [2022-09-30 Fri 19:14]--[2022-09-30 Fri 19:26] =>  0:12
CLOCK: [2022-07-15 Fri 14:46]--[2022-07-15 Fri 15:26] =>  0:40
CLOCK: [2022-07-07 Thu 14:30]--[2022-07-07 Thu 14:49] =>  0:19
CLOCK: [2022-07-07 Thu 14:25]--[2022-07-07 Thu 14:30] =>  0:05
CLOCK: [2022-07-07 Thu 03:55]--[2022-07-07 Thu 09:50] =>  5:55
CLOCK: [2022-07-06 Wed 14:43]--[2022-07-06 Wed 15:10] =>  0:27
CLOCK: [2022-07-05 Tue 11:46]--[2022-07-05 Tue 12:17] =>  0:31
CLOCK: [2022-03-02 Wed 15:00]--[2022-03-02 Wed 17:29] =>  2:29
CLOCK: [2021-12-04 Sat 13:13]--[2021-12-04 Sat 13:15] =>  0:02
CLOCK: [2021-11-27 Sat 14:46]--[2021-11-27 Sat 14:54] =>  0:08
CLOCK: [2021-11-22 Mon 13:27]--[2021-11-22 Mon 13:44] =>  0:17
CLOCK: [2021-11-19 Fri 08:24]--[2021-11-19 Fri 08:52] =>  0:28
CLOCK: [2021-11-18 Thu 21:46]--[2021-11-18 Thu 21:51] =>  0:05
CLOCK: [2021-11-18 Thu 12:05]--[2021-11-18 Thu 12:07] =>  0:02
CLOCK: [2021-11-17 Wed 17:18]--[2021-11-17 Wed 17:19] =>  0:01
CLOCK: [2021-11-16 Tue 21:37]--[2021-11-16 Tue 22:38] =>  1:01
CLOCK: [2021-10-23 Sat 12:46]--[2021-10-23 Sat 13:05] =>  0:19
CLOCK: [2021-10-22 Fri 14:39]--[2021-10-22 Fri 15:14] =>  0:35
CLOCK: [2021-10-10 Sun 11:49]--[2021-10-10 Sun 12:51] =>  1:02
CLOCK: [2021-10-09 Sat 21:02]--[2021-10-09 Sat 22:21] =>  1:19
CLOCK: [2021-10-09 Sat 20:05]--[2021-10-09 Sat 20:14] =>  0:09
CLOCK: [2021-10-09 Sat 14:30]--[2021-10-09 Sat 15:02] =>  0:32
CLOCK: [2021-10-08 Fri 23:15]--[2021-10-08 Fri 23:37] =>  0:22
CLOCK: [2021-10-08 Fri 15:38]--[2021-10-08 Fri 17:03] =>  1:25
CLOCK: [2021-10-08 Fri 13:29]--[2021-10-08 Fri 14:15] =>  0:46
CLOCK: [2021-10-08 Fri 12:30]--[2021-10-08 Fri 12:48] =>  0:18
CLOCK: [2021-10-07 Thu 15:39]--[2021-10-07 Thu 15:58] =>  0:19
CLOCK: [2021-10-05 Tue 15:50]--[2021-10-05 Tue 15:59] =>  0:09
CLOCK: [2021-10-02 Sat 23:03]--[2021-10-02 Sat 23:27] =>  0:24
CLOCK: [2021-08-14 Sat 16:05]--[2021-08-14 Sat 16:13] =>  0:08
CLOCK: [2021-08-05 Thu 11:06]--[2021-08-05 Thu 11:22] =>  0:16
CLOCK: [2021-08-04 Wed 18:19]--[2021-08-04 Wed 18:32] =>  0:13
CLOCK: [2021-08-03 Tue 23:33]--[2021-08-03 Tue 23:48] =>  0:15
CLOCK: [2021-08-03 Tue 23:13]--[2021-08-03 Tue 23:26] =>  0:13
CLOCK: [2021-05-17 Mon 11:55]--[2021-05-17 Mon 12:05] =>  0:10
CLOCK: [2021-04-06 Tue 18:05]--[2021-04-06 Tue 18:34] =>  0:29
:END:

/[[https://github.com/zevlg/telega.el][telega]] is an unofficial Emacs Telegram client./

To upgrade TDLib with homebrew, run ~brew upgrade tdlib --fetch-HEAD~ in a terminal, then ~M-x telega-server-build~.

#+begin_src emacs-lisp :results silent
(use-package telega
  :defer 5
  :init
  (setq telega-server-libs-prefix "/opt/homebrew")

  :config
  (setq telega-chat-input-markups '("org"))
  (setq telega-use-images t)
  (setq telega-emoji-font-family 'noto-emoji)
  (setq telega-emoji-use-images nil)
  (setq telega-filters-custom '(("Main" . main)
                                ("Important" or mention
                                 (and unread unmuted))
                                ("Archive" . archive)
                                ("Online" and
                                 (not saved-messages) (user is-online))
                                ("Groups" type basicgroup supergroup)
                                ("Channels" type channel)))
  (setq telega-completing-read-function 'completing-read)

  (push 'telega-search-history savehist-additional-variables)

  (telega-mode-line-mode)

  (add-hook 'telega-chat-mode-hook (lambda () (setq default-directory paths-dir-downloads)))

  :general
  ((telega-msg-button-map telega-root-mode-map)
   "k" 'telega-button-backward
   "l" 'telega-button-forward)
  (telega-chat-mode-map
   "M-p" nil
   "S-<return>" 'newline
   "A-C-s-r" 'telega-chatbuf-beginning-of-thing
   "<return>" 'telega-chatbuf-input-send
   ;; if point is on a URL, `telega-msg-button-map' ceases to be
   ;; active and `<return>' triggers `newline' rather than
   ;; `push-button'. this seems to be a bug. as a workaround, we also
   ;; bind `push-button' to `s-<return>' in `telega-chat-mode-map'.
   "s-<return>" (lambda! (push-button))
   "s-," 'telega-chatbuf-goto-pinned-message
   "s-a" 'telega-chatbuf-attach
   "s-c" 'telega-mnz-chatbuf-attach-code
   "s-d" 'telega-chatbuf-goto-date
   "s-f" 'telega-chatbuf-filter
   "s-m" 'telega-chatbuf-attach-media
   "s-r" 'telega-msg-add-reaction
   "s-s" 'telega-chatbuf-filter-search
   "s-t" 'telega-sticker-choose-favorite-or-recent
   "M-s-v" 'telega-chatbuf-attach-clipboard
   "s-z" 'telega-mnz-chatbuf-attach-code
   "M-s-e" 'telega-chatbuf-edit-prev
   "M-s-v" 'telega-chatbuf-attach-clipboard
   "" 'telega-chatbuf-attach-voice-note)
  (telega-msg-button-map
   "<return>" (lambda! (push-button))
   "," 'telega-chatbuf-goto-pinned-message
   "a" (lambda! (end-of-buffer) (files-extras-kill-this-buffer))
   "F" 'telega-msg-forward-marked-or-at-point
   "C" 'telega-msg-copy-link
   "s" 'telega-chatbuf-filter-search
   "w" 'telega-browse-url
   "W" 'telega-chatbuf-filter-cancel)
  (telega-chat-button-map
   "a" nil
   "o" nil)
  (telega-root-mode-map
   "SPC" 'telega-root-next-unread
   "." 'telega-chat-with
   "a" 'telega-chat-toggle-archive
   "m" 'telega-chat-toggle-muted)
  (telega-webpage-mode-map
   "x" 'telega-webpage-browse-url))
#+end_src

** telega-mnz
:PROPERTIES:
:ID:       473F7E47-4980-4A4A-8EC7-C008DB30BA22
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-mnz.el][telega-mnz]] displays syntax highlighting in Telega code blocks./

#+begin_src emacs-lisp :results silent
(use-feature telega-mnz
  :demand t
  :after telega
  :config
  (setq telega-mnz-use-language-detection nil)

  (add-hook 'telega-load-hook 'global-telega-mnz-mode))

;; (add-hook 'telega-load-hook #'global-telega-mnz-mode))
#+end_src

** telega-dired-dwim
:PROPERTIES:
:ID:       F38952F5-975A-4868-9E6B-BC74CA491BE2
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-dired-dwim.el][telega-dired-dwim]] enables Dired file attachments in Telega chat buffers./

#+begin_src emacs-lisp :results silent
(use-feature telega-dired-dwim
  :demand t
  :after telega)
#+end_src

** telega-extras
:PROPERTIES:
:ID:       C7D90E9B-3503-4BFA-A736-89803A9DA664
:END:

#+begin_src emacs-lisp
(use-personal-package telega-extras
  :after telega telega-dired-dwim
  :demand t
  :general
  ("A-l" 'telega-extras-switch-to)
  ((telega-msg-button-map telega-root-mode-map)
   "o" 'telega-extras-chat-org-capture)
  (telega-msg-button-map
   "." 'telega-extras-docs-change-open
   "L" 'telega-extras-chat-org-capture-leo)
  (telega-chat-mode-map
   "s-v" 'org-extras-paste-html
   "M-s-s" 'telega-extras-chatbuf-attach-most-recent-screenshot
   "M-s-t" 'telega-extras-chatbuf-attach-most-recent-file)
  (dired-mode-map
   "M-s-a" 'telega-extras-dired-attach-send)
  (telega-root-view-map
   "a" 'telega-extras-view-archive
   "m" 'telega-extras-view-main))
#+end_src

** ol-telega
:PROPERTIES:
:ID:       E973DAC8-E1DE-4B94-80C6-CF80BD0F0836
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/ol-telega.el][ol-telega]] enables Org mode links to Telega chats and messages./

#+begin_src emacs-lisp :results silent
(use-feature ol-telega
  :demand t
  :after telega)
#+end_src

** erc
:PROPERTIES:
:ID:       4FB5ECDA-2DB5-40F5-8BBE-6B0D4B51524D
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:18]--[2021-06-03 Thu 14:40] =>  0:22
CLOCK: [2021-06-02 Wed 12:02]--[2021-06-02 Wed 12:39] =>  0:37
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][erc]] is an IRC client for Emacs./

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :erc)
(use-feature erc
  :after auth-source-pass
  :config
  (setq erc-server "irc.libera.chat")
  (setq erc-user-full-name user-full-name)
  (setq erc-nick (auth-source-pass-get "user" "auth-sources/erc/libera"))
  (setq erc-password (auth-source-pass-get 'secret "auth-sources/erc/libera"))
  (setq erc-prompt-for-nickserv-password nil)
  ;; erc-track-shorten-start 8 ; characters to display in modeline
  (setq erc-autojoin-channels-alist '(("irc.libera.chat")))
  (setq erc-kill-buffer-on-part nil)
  (setq erc-auto-query t)

  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling))
#+end_src

** circe
:PROPERTIES:
:ID:       B5B892BD-A0E2-4D54-977E-58C1CF3CC248
:END:
:LOGBOOK:
CLOCK: [2021-10-07 Thu 14:31]--[2021-10-07 Thu 15:23] =>  0:52
:END:

/[[https://github.com/emacs-circe/circe][circe]] is another IRC client for Emacs./

#+begin_src emacs-lisp :results silent
(use-package circe)
#+end_src

* web
:PROPERTIES:
:ID:       A1741EF4-6B22-498C-A60B-845A26AFAFE7
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 23:40]--[2021-10-21 Thu 00:05] =>  0:25
CLOCK: [2021-05-19 Wed 17:02]--[2021-05-19 Wed 17:43] =>  0:41
CLOCK: [2021-05-18 Tue 18:26]--[2021-05-18 Tue 18:54] =>  0:28
:END:

- [[http://www.howardism.org/Technical/Emacs/browsing-in-emacs.html][Emacs-focused Web Browsing]]
- [[https://protesilaos.com/codelog/2021-03-25-emacs-eww/][EWW and my extras (text-based Emacs web browser) | Protesilaos Stavrou]]

** browse-url
:PROPERTIES:
:ID:       0373B505-A028-4537-871F-3CCC2E5EADB1
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 17:14]--[2023-04-08 Sat 17:45] =>  0:31
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :browse-url)
(use-feature browse-url
  :config
  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
  (setq browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")

  :general
  (mhtml-mode-map
   "s-x" 'browse-url-of-buffer)
  (telega-chat-mode-map
   "s-<return>" 'browse-url-at-point))
#+end_src

** browse-url-extras
:PROPERTIES:
:ID:       15B6192C-652C-47FC-8477-0B701129E89F
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :browse-url)
(use-personal-package browse-url-extras
  :after browse-url s f
  :demand t
  :general
  (eww-mode-map
  "e" 'browse-url-extras-add-domain-to-open-externally)
  (dired-mode-map
   "e" 'browse-url-extras-of-dired-file-externally))
#+end_src

** shr
:PROPERTIES:
:ID:       3E08CE1B-E73A-4440-A545-D2D3480D951B
:END:
:LOGBOOK:
CLOCK: [2021-08-11 Wed 14:04]--[2021-08-11 Wed 14:09] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature shr
  :demand t
  :config
  (setq shr-bullet "• ")
  (setq shr-use-colors nil)
  (setq shr-use-fonts t)
  (setq shr-image-animate nil)
  (setq shr-width nil)
  (setq shr-max-width 100)
  (setq shr-discard-aria-hidden t)
  (setq shr-cookie-policy t)

  :general
  ((js-mode html-mode-map mhtml-mode-map)
   "s-w" 'shr-render-buffer))
#+end_src

** shr-tag-pre-highlight
:PROPERTIES:
:ID:       8956AD37-95A4-4A73-9287-9F70A406E9AF
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:33]--[2021-11-19 Fri 12:35] =>  0:02
:END:

/[[https://github.com/xuchunyang/shr-tag-pre-highlight.el][shr-tag-pre-highlight]] adds syntax highlighting for code blocks in HTML rendered by ~shr~./

#+begin_src emacs-lisp :results silent
(use-package shr-tag-pre-highlight
  :after shr
  :defer 30
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight)))
#+end_src

** shr-heading
:PROPERTIES:
:ID:       CF3431E0-E5B0-41C3-924A-1C96AD3BB46F
:END:

/[[https://github.com/oantolin/emacs-config/blob/master/my-lisp/shr-heading.el][shr-heading]] supports heading navigation for shr-rendered buffers./

Discussion [[https://www.reddit.com/r/emacs/comments/u234pn/comment/i4i3gqg/?utm_source=share&utm_medium=web2x&context=3][here]].

#+begin_src emacs-lisp
(use-package shr-heading
  :elpaca (shr-heading
             :host github
             :repo "oantolin/emacs-config"
             :files ("my-lisp/shr-heading.el"))
  :demand t
  :config
  (add-hook 'eww-mode-hook #'shr-heading-setup-imenu)

  :general
  ((elfeed-show-mode-map eww-mode-map mu4e-view-mode-map)
   "A-C-s-r" 'shr-heading-previous
   "A-C-s-f" 'shr-heading-next))
#+end_src

** eww
:PROPERTIES:
:ID:       E9E3FE6F-5580-4D21-90D8-6B0E595C10F7
:END:
:LOGBOOK:
CLOCK: [2023-12-16 Sat 08:46]--[2023-12-16 Sat 09:37] =>  0:51
CLOCK: [2023-04-08 Sat 12:09]--[2023-04-08 Sat 12:21] =>  0:12
CLOCK: [2021-05-18 Tue 17:41]--[2021-05-18 Tue 18:26] =>  0:45
CLOCK: [2021-05-04 Tue 22:07]--[2021-05-04 Tue 22:25] =>  0:18
CLOCK: [2021-05-02 Sun 21:22]--[2021-05-02 Sun 21:32] =>  0:10
CLOCK: [2021-04-21 Wed 16:35]--[2021-04-21 Wed 16:40] =>  0:05
CLOCK: [2021-03-25 Thu 13:48]--[2021-03-25 Thu 14:14] =>  0:26
:END:

#+begin_src emacs-lisp :results silent
(use-feature eww
  :after simple-extras
  :config
  (setq eww-search-prefix "https://www.google.com/search?q=")
  (setq eww-restore-desktop t)
  (setq eww-desktop-remove-duplicates t)
  (setq eww-header-line-format nil)
  (setq eww-download-directory paths-dir-downloads)
  (setq eww-suggest-uris
        '(eww-links-at-point
          thing-at-point-url-at-point))
  (setq eww-history-limit 100000)
  (setq eww-browse-url-new-window-is-tab nil)
  ;; make eww respect url handlers when following links in webpages
  (dolist (cons browse-url-handlers)
    (setq eww-use-browse-url
          (concat eww-use-browse-url "\\|" (car cons))))

  (push 'eww-history savehist-additional-variables)

  :general
  ("A-w" 'eww)
  (eww-mode-map
   "[" 'eww-previous-url
   "]" 'eww-next-url
   "j" 'eww-back-url
   ";" 'eww-forward-url
   "g" nil
   "o" 'eww-toggle-fonts
   "r" 'eww-reload
   ":" (lambda! (eww-follow-link '(4)))
   "x" 'eww-browse-with-external-browser))
#+end_src

*** TODO [#5] Integrate eww Chrome, Firefox history
:PROPERTIES:
:ID:       2C3DB6DF-B599-49DF-AD30-41C77D2326D7
:END:

*** TODO [#6] Create command to background open in ~eww~
:PROPERTIES:
:ID:       52CAC919-6942-466F-AA47-4FF86F7F13AE
:END:

*** TODO [#6] Create command to create PDF of URL
:PROPERTIES:
:ID:       19C5F99D-E00D-4552-8B6C-81150C61DF2F
:Effort:   0:25
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 13:51]--[2022-07-25 Mon 14:01] =>  0:10
CLOCK: [2022-07-19 Tue 21:36]--[2022-07-19 Tue 22:31] =>  0:55
CLOCK: [2022-07-19 Tue 20:49]--[2022-07-19 Tue 21:05] =>  0:16
:END:

** eww-extras
:PROPERTIES:
:ID:       69B35912-79CB-4611-8E43-7C8A5BC82B55
:END:

#+begin_src emacs-lisp
(use-personal-package eww-extras
  :after eww
  :demand t
  :general
  (eww-mode-map
   "g e" 'eww-extras-edit-current-url
   "g u" 'eww-extras-go-up-url-hierarchy
   "g U" 'eww-extras-go-to-root-url-hierarchy
   "h" 'eww-extras-url-to-html
   ;; "p" 'eww-extras-open-with-recent-kill-ring
   "p" 'eww-extras-url-to-pdf)
  (ebib-entry-mode-map
   "s-h" 'eww-extras-url-to-html
   "s-p" 'eww-extras-url-to-pdf))
#+end_src

** prot-eww
:PROPERTIES:
:ID:       C83AED09-FA8C-46CE-91E0-13A7D49D7B8A
:END:

/[[https://git.sr.ht/~protesilaos/dotfiles/tree/master/item/emacs/%2Eemacs.d/prot-lisp/prot-eww.el][prot-eww]] is a set of ~eww~ extensions from Protesilaos Stavrou's personal configuration./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp
(use-package prot-eww
  :elpaca (prot-eww :host sourcehut
          :repo "protesilaos/dotfiles"
          :local-repo "prot-eww"
          :main "emacs/.emacs.d/prot-lisp/prot-eww.el"
          :build (:not elpaca--check-version)
          :files ("emacs/.emacs.d/prot-lisp/prot-eww.el"))
  :after eww prot-common
  :demand t
  :general
  (eww-mode-map
   "M-f" 'prot-eww-visit-url-on-page
   "A-M-f" 'prot-eww-jump-to-url-on-page))
#+end_src

** w3m
:PROPERTIES:
:ID:       986E4522-7EE1-477A-89EB-08855BCBECEE
:END:
:LOGBOOK:
CLOCK: [2021-03-29 Mon 21:25]--[2021-03-29 Mon 21:41] =>  0:16
:END:

/[[https://github.com/emacs-w3m/emacs-w3m][w3m]] is an Emacs interface to w3m./

I only use ~w3m~ to browse HTML email messages with ~mu4e~. For web browsing, I use ~eww~.

#+begin_src emacs-lisp :results silent
(use-package w3m
  :general
  (w3m-minor-mode-map
   "<left>" 'left-char
   "<right>" 'right-char)
  (w3m-mode-map
   "s-<return>" 'w3m-view-url-with-browse-url)
  (mu4e-view-mode-map
   "<return>" 'w3m-view-url-with-browse-url))
#+end_src

** elfeed
:PROPERTIES:
:ID:       FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5
:END:
:LOGBOOK:
CLOCK: [2021-12-06 Mon 18:29]--[2021-12-06 Mon 18:41] =>  0:12
CLOCK: [2021-11-19 Fri 17:02]--[2021-11-19 Fri 19:27] =>  2:25
CLOCK: [2021-11-19 Fri 10:34]--[2021-11-19 Fri 10:40] =>  0:06
CLOCK: [2021-11-16 Tue 15:17]--[2021-11-16 Tue 15:27] =>  0:10
CLOCK: [2021-10-09 Sat 13:56]--[2021-10-09 Sat 14:30] =>  0:34
CLOCK: [2021-08-05 Thu 22:25]--[2021-08-05 Thu 22:27] =>  0:02
CLOCK: [2021-07-26 Mon 18:54]--[2021-07-26 Mon 19:12] =>  0:18
CLOCK: [2021-07-06 Tue 15:50]--[2021-07-06 Tue 16:16] =>  0:26
CLOCK: [2021-07-04 Sun 12:44]--[2021-07-04 Sun 13:02] =>  0:18
CLOCK: [2021-07-04 Sun 12:05]--[2021-07-04 Sun 12:37] =>  0:32
CLOCK: [2021-07-04 Sun 11:26]--[2021-07-04 Sun 11:55] =>  0:29
CLOCK: [2021-07-04 Sun 10:36]--[2021-07-04 Sun 10:53] =>  0:17
CLOCK: [2021-06-25 Fri 22:16]--[2021-06-25 Fri 22:18] =>  0:02
CLOCK: [2021-06-25 Fri 12:36]--[2021-06-25 Fri 12:58] =>  0:22
CLOCK: [2021-06-24 Thu 19:49]--[2021-06-24 Thu 19:59] =>  0:10
CLOCK: [2021-06-23 Wed 21:34]--[2021-06-23 Wed 21:46] =>  0:12
CLOCK: [2021-06-22 Tue 18:19]--[2021-06-22 Tue 18:24] =>  0:05
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:05] =>  0:00
CLOCK: [2021-06-16 Wed 21:58]--[2021-06-16 Wed 22:17] =>  0:19
CLOCK: [2021-05-20 Thu 12:33]--[2021-05-20 Thu 12:43] =>  0:10
CLOCK: [2021-05-18 Tue 12:58]--[2021-05-18 Tue 13:07] =>  0:09
CLOCK: [2021-05-14 Fri 10:38]--[2021-05-14 Fri 10:40] =>  0:02
CLOCK: [2021-04-13 Tue 08:10]--[2021-04-13 Tue 08:21] =>  0:11
CLOCK: [2021-04-08 Thu 21:19]--[2021-04-08 Thu 21:50] =>  0:31
:END:

/[[https://github.com/skeeto/elfeed][elfeed]] is a web feeds client./

If the lines are breaking at the wrong places, set ~shr-width~ to the right value.

#+begin_src emacs-lisp :results silent
(use-package elfeed
  :defer 30
  :config
  (setq-default elfeed-search-filter "+unread -wiki")

  (add-hook 'elfeed-show-mode-hook #'shr-heading-setup-imenu)
  (add-hook 'elfeed-show-mode-hook #'visual-line-mode)

  :general
  (eww-mode-map
   "c" 'elfeed-kill-link-url-at-point)
  (elfeed-show-mode-map
   "q" nil)
  (elfeed-search-mode-map
   "d" 'elfeed-update
   "j" 'elfeed-unjam
   "U" 'elfeed-search-tag-all-unread
   "o" 'elfeed-org)
  (elfeed-show-mode-map
   "S-<return>" 'eww-follow-link
   "<return>" 'eww-follow-link
   "<tab>" (lambda! (elfeed-show-next-link) (recenter))
   "b" nil
   "q" 'elfeed
   "j" 'elfeed-show-next
   ";W" 'elfeed-show-prev
   "x" 'elfeed-show-visit))
#+end_src

*** TODO Revise key bindings
:PROPERTIES:
:ID:       2CDFD8A4-5D9B-4300-A5B2-D621146F8B3F
:END:
This is what I have, but no longer reflects my workflow:

| key   | command                              | behavior                      |
|-------+--------------------------------------+-------------------------------|
| RET   | ~eww-follow-link '(4)~                 | open link at point in Chrome  |
| S-RET | ~eww-follow-link~                      | open link at point in eww     |
| x     | ~elfeed-show-visit~                    | open link of buffer in Chrome |
| v     | ~elfeed-extras-show-visit-in-eww~      | open link of buffer in eww    |
| c     | ~elfeed-kill-link-url-at-point~        | copy link at point            |
| w     | ~elfeed-extras-kill-link-url-of-entry~ | copy link of buffer           |
| f     | ~ace-link-eww '(4)~                    | open link selected in Chrome  |
| F     | ~ace-link-eww~                         | open link selected in eww     |

These key bindings produce the same behavior in eww.

** elfeed-extras
:PROPERTIES:
:ID:       57DE6F0B-9245-4E39-A747-6C2A6714B02A
:END:

#+begin_src emacs-lisp
(use-personal-package elfeed-extras
  :after elfeed
  :demand t
  :general
  ("A-f" 'elfeed-extras-toggle-session)
  (elfeed-search-mode-map
   "A" 'elfeed-extras-mark-all-as-read
   "e" 'elfeed-extras-toggle-read-entries
   "q" 'elfeed-extras-toggle-session
   "u" 'elfeed-extras-full-update
   "w" 'elfeed-extras-toggle-wiki-entries)
  (elfeed-show-mode-map
   "i" 'elfeed-extras-toggle-fixed-pitch
   "v" 'elfeed-extras-show-visit-in-eww
   "w" 'elfeed-extras-kill-link-url-of-entry
   "z" 'elfeed-extras-url-full-capture))
#+end_src

** elfeed-org
:PROPERTIES:
:ID:       DF954E99-17CB-4698-934E-53E038C654EF
:END:

/[[https://github.com/remyhonig/elfeed-org][elfeed-org]] supports defining the feeds used by elfeed in an org-mode file./

#+begin_src emacs-lisp :results silent
(use-package elfeed-org
  :after elfeed
  :demand t
  :config
  (setq rmh-elfeed-org-files (list paths-file-feeds-pablo paths-file-tlon-feeds))

  (elfeed-org))
#+end_src

** elfeed-tube
:PROPERTIES:
:ID:       410603F9-0FE3-4C31-BCB4-F85A9052263C
:END:

/[[https://github.com/karthink/elfeed-tube][elfeed-tube]] integrates ~elfeed~ with YouTube./

#+begin_src emacs-lisp
(use-package elfeed-tube
  :after elfeed
  :demand t
  :config
  (push '(text . shr-text) elfeed-tube-captions-faces)
  (elfeed-tube-setup))
#+end_src

** elfeed-tube-mpv
:PROPERTIES:
:ID:       0ADC0E03-67F8-446F-AF26-5CBBE16F2BBD
:END:

/[[https://github.com/karthink/elfeed-tube][elfeed-tube-mpv]] integrates ~elfeed-tube~ with ~mpv~./

#+begin_src emacs-lisp
(use-package elfeed-tube-mpv
  :after elfeed-tube
  :demand t
  :config
  (setq elfeed-tube-save-indicator t))
#+end_src

** engine-mode
:PROPERTIES:
:ID:       437B98FC-3667-43C4-9EF6-470E23FE7561
:END:
:LOGBOOK:
CLOCK: [2023-05-14 Sun 18:09]--[2023-05-14 Sun 19:59] =>  1:50
CLOCK: [2023-04-07 Fri 21:53]--[2023-04-07 Fri 22:38] =>  0:45
CLOCK: [2021-04-21 Wed 20:39]--[2021-04-21 Wed 20:41] =>  0:02
:END:

/[[https://github.com/hrs/engine-mode][engine-mode]] is a minor mode for defining and querying search engines through Emacs./

#+begin_src emacs-lisp :results silent
(use-package engine-mode
  :init
  (engine-mode)

  :config
  (setq engine/browser-function browse-url-browser-function)

  (defengine AllMusic
    "http://www.allmusic.com/search/all/%s"
    :keybinding "a m")
  (defengine Alignment-Forum
    "https://www.alignmentforum.org/search?query=%s"
    :keybinding "a f")
  (defengine AlternativeTo
    "http://alternativeto.net/SearchResult.aspx?profile=all&search=%s"
    :keybinding "a t")
  (defengine Amazon-DE
    "http://www.amazon.de/s?k=%s"
    :keybinding "a d")
  (defengine Amazon-ES
    "http://www.amazon.es/s?k=%s"
    :keybinding "a e")
  (defengine Amazon-FR
    "https://www.amazon.fr/s?k=%s"
    :keybinding "a f")
  (defengine Amazon-IT
    "https://www.amazon.it/s?k=%s"
    :keybinding "a i")
  (defengine Amazon-MX
    "https://www.amazon.com.mx/s?k=%s"
    :keybinding "a x")
  (defengine Amazon-UK
    "http://www.amazon.co.uk/s?k=%s"
    :keybinding "a k")
  (defengine Amazon-US
    "http://www.amazon.com/s?k=%s"
    :keybinding "a a")
  (defengine AnkiWeb
    "https://ankiweb.net/shared/decks/%s"
    :keybinding "a w")
  (defengine AstralCodexTen
    "https://substack.com/search/%s?focusedPublicationId=89120"
    :keybinding "a c"
    ;; individual Substack posts render nicely in eww, but for other pages we need a modern browser
    :browser 'browse-url-default-browser)
  (defengine Audible
    "https://www.audible.com/search/ref=a_hp_tseft?advsearchKeywords=%s&filterby=field-keywords&x=13&y=11"
    :keybinding "a u")
  (defengine AudioBookBay
    "https://audiobookbay.se/?s=%s"
    :keybinding "a b")
  (defengine EABlogs
    "https://cse.google.com/cse?cx=013594344773078830993:k3igzr2se6y&q=%s"
    :keybinding "b b")
  (defengine Bing
    "https://www.bing.com/search?q=%s&PC=U316&FORM=CHROMN"
    :keybinding "b i")
  (defengine Blackwells
    "http://bookshop.blackwell.co.uk/bookshop/search/?keyword=%s"
    :keybinding "b l")
  (defengine BookFinder
    "http://www.bookfinder.com/search/?keywords=%s&st=xl&ac=qr&src=opensearch"
    :keybinding "b f")
  (defengine MercadoLibre
    "https://listado.mercadolibre.com.ar/%s#D[A:qwer]"
    :keybinding "c c")
  (defengine CRSocietyForums
    "https://www.crsociety.org/search/?q=%s"
    :keybinding "c r")
  (defengine Calendly
    "https://calendly.com/app/login?email=%s&lang=en"
    :keybinding "c l")
  (defengine ChromeExtensions
    "https://chrome.google.com/webstore/search/%s?_category=extensions"
    :keybinding "c e")
  (defengine Crossref
    "https://search.crossref.org/?q=%s"
    :keybinding "c r")
  (defengine DOI
    "https://doi.org/%s"
    :keybinding "d o")
  (defengine DuckDuckGo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d d")
    (defengine Diccionario-Panhispánico-de-Dudas
    "https://www.rae.es/dpd/%s"
    :keybinding "d p")
  (defengine EAForum
    "https://www.google.com/search?q=%s+site:forum.effectivealtruism.org"
    :keybinding "f f")
  (defengine Ebay-UK
    "https://www.ebay.co.uk/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e k")
  (defengine Ebay-US
    "https://www.ebay.com/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e b")
  (defengine Ebay-DE
    "https://www.ebay.de/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e d")
  (defengine Fundeu
    "https://cse.google.com/cse?cx=005053095451413799011:alg8dd3pluq&q=%s"
    :keybinding "f f")
  (defengine Flickr
    "http://www.flickr.com/search/?q=%s"
    :keybinding "f l")
  (defengine Financial-Times
    "https://www.ft.com/search?q=%s"
    :keybinding "f t")
  (defengine GitHub
    "https://github.com/search?q=%s&type=code"
    :keybinding "g h")
  (defengine Goodreads
    "http://www.goodreads.com/search/search?search_type=books&search[query]=%s"
    :keybinding "g r")
  (defengine Google
    "https://www.google.com/search?q=%s"
    :keybinding "g g")
  (defengine Google-Books
    "https://www.google.com/search?q=%s&btnG=Search+Books&tbm=bks&tbo=1&gws_rd=ssl"
    :keybinding "g k")
  (defengine Google-Custom-Search
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "g c")
  (defengine Google-Domains
    "https://domains.google.com/registrar?s=%s&hl=en"
    :keybinding "g d")
  (defengine Google-Drive
    "https://drive.google.com/drive/u/0/search?q=%s"
    :keybinding "g d")
  (defengine Google-Trends
    "http://www.google.com/trends/explore#q=%s"
    :keybinding "g e")
  (defengine Google-Images
    "https://www.google.com/search?tbm=isch&source=hp&biw=1920&bih=1006&ei=2PlgWp_OEcHF6QTo2b2ACQ&q=%s"
    :keybinding "g i")
  (defengine Google-Maps
    "https://www.google.com/maps/search/%s"
    :keybinding "g m")
  (defengine Google-News
    "https://news.google.com/search?q=%s"
    :keybinding "g n")
  (defengine Google-Podcasts
    "https://podcasts.google.com/?q=%s"
    :keybinding "g o")
  (defengine Google-Photos
    "https://photos.google.com/search/%s"
    :keybinding "g p")
  (defengine Google-Scholar
    "https://scholar.google.com/scholar?hl=en&as_sdt=1%2C5&q=%s&btnG=&lr="
    :keybinding "s s")
  (defengine Google-Translate
    "https://translate.google.com/#auto/en/%s"
    :keybinding "g t")
  (defengine Google-Video
    "https://www.google.com/search?q=%s&tbm=vid"
    :keybinding "g v")
  (defengine GiveWell
    "https://www.givewell.org/search/ss360/%s"
    :keybinding "g w")
  (defengine Google-Play
    "https://play.google.com/store/search?q=%s"
    :keybinding "g y")
  (defengine Google-Scholar-Spanish
    "https://scholar.google.com/scholar?hl=en&as_sdt=1%2C5&q=%s&btnG="
    :keybinding "s x")
  (defengine Gwern
    "https://www.google.com/search?q=%s+site:gwern.net"
    :keybinding "g w")
  (defengine IMDb
    "https://www.imdb.com/find/?q=%s"
    :keybinding "i i")
  (defengine IMDb-Actor
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i a")
  (defengine IMDb-Director
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i d")
  (defengine IMDb-Composer
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i c")
  (defengine Internet-Archive
    "https://archive.org/search.php?query=%s"
    :keybinding "v v")
  (defengine Internet-Archive-Scholar
    "https://scholar.archive.org/search?q=%s"
    :keybinding "v s")
  (defengine JustWatch
    "https://www.justwatch.com/us/search?q=%s"
    :keybinding "j w")
  (defengine KAYAK
    "https://www.kayak.co.uk/sherlock/opensearch/search?q=%s"
    :keybinding "k k")
  (defengine Keyboard-Maestro
    "https://forum.keyboardmaestro.com/search?q=%s"
    :keybinding "k m")
  (defengine Lastfm
    "http://www.last.fm/search?q=%s"
    :keybinding "f m")
  (defengine LessWrong
    "https://www.google.com/search?q=%s+site:lesswrong.com"
    :keybinding "l w")
  (defengine LessWrongWiki
    "https://wiki.lesswrong.com/index.php?title=Special:Search&search=%s"
    :keybinding "l i")
  (defengine LibraryGenesis
    "http://libgen.li/index.php?req=%s"
    :keybinding "l l")
  (defengine Librivox
    "https://librivox.org/search?q=%s&search_form=advanced"
    :keybinding "l v")
  (defengine LinkedIn
    "http://www.linkedin.com/vsearch/f?type=all&keywords=%s&orig=GLHD&rsid=&pageKey=member-home&search=Search"
    :keybinding "i n")
  (defengine Linguee
    "https://www.linguee.com/english-spanish/search?source=auto&query=%s"
    :keybinding "l i")
  (defengine Marginal-Revolution
    "https://marginalrevolution.com/?s=%s"
    :keybinding "m r")
  (defengine MediaCenter
    "https://www.google.com/search?q=%s+site:yabb.jriver.com"
    :keybinding "m c")
  (defengine Medium
    "https://medium.com/search?q=%s&ref=opensearch"
    :keybinding "m d")
  (defengine Melpa
    "https://melpa.org/#/?q=%s"
    :keybinding "m p")
  (defengine MetaFilter
    "https://www.metafilter.com/contribute/search.mefi?site=mefi&q=%s"
    :keybinding "m f")
  (defengine Metaculus
    "https://www.metaculus.com/questions/?order_by=-activity&search=%s"
    :keybinding "m e")
  (defengine Metaforecast
    "https://metaforecast.org/?query=%s"
    :keybinding "m m")
  (defengine Movielens
    "https://movielens.org/explore?q=%s"
    :keybinding "m l")
  (defengine Netflix
    "https://www.netflix.com/search?q=%s"
    :keybinding "n n")
  (defengine New-York-Times
    "https://www.nytimes.com/search?query=%s"
    :keybinding "n y")
  (defengine Notatu-Dignum
    "http://www.stafforini.com/quotes/index.php?s=%s"
    :keybinding "q q")
  (defengine OddsChecker
    "https://www.oddschecker.com/search?query=%s"
    :keybinding "o c")
  (defengine Open-Philanthropy
    "https://www.google.com/search?q=%s+site:openphilanthropy.org"
    :keybinding "o p")
  (defengine Overcoming-Bias
    "https://substack.com/search/%s?focusedPublicationId=1245641"
    :keybinding "o b"
    :browser 'browse-url-default-browser)
  (defengine OxfordReference
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/search?btog=chap&q0=%22%s%22"
    :keybinding "o r")
  (defengine OxfordReferenceDOI
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/view/%s"
    :keybinding "o d")
  (defengine PhilPapers
    "http://philpapers.org/s/%s"
    :keybinding "p p")
  (defengine Reddit
    "https://www.reddit.com/search?q=%s&utm_source=opensearch"
    :keybinding "r r")
  (defengine ReducingSuffering
    "http://reducing-suffering.org/?s=%s"
    :keybinding "r s")
  (defengine Reference
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "r f")
  (defengine sci-hub
    "https://sci-hub.se/%s"
    :keybinding "u u")
  (defengine ScienceDirectencyclopedias
    "https://www.sciencedirect.com/search?qs=%s&articleTypes=EN"
    :keybinding "s e")
  (defengine SlateStarCodex
    "http://slatestarcodex.com/?s=%s"
    :keybinding "s c")
  (defengine StackSnippet
    "http://www.stacksnippet.com/#gsc.tab=0&gsc.q=%s"
    :keybinding "s n")
  (defengine Stanford-Encyclopedia-of-Philosophy
    "https://plato.stanford.edu/search/searcher.py?query=%s"
    :keybinding "s p")
  (defengine Tango-DJ
    "http://www.tango-dj.at/database/?tango-db-search=%s&search=Search"
    :keybinding "d j")
  (defengine TangoDJ-Yahoo-Group
    "http://groups.yahoo.com/group/TangoDJ/msearch?query=%s&submit=Search&charset=ISO-8859-1"
    :keybinding "t y")
  (defengine TasteDive
    "https://tastedive.com/like/%s"
    :keybinding "t d")
  (defengine ThreadReader
    "https://threadreaderapp.com/search?q=%s"
    :keybinding "t r")
  (defengine Twitter
    "https://twitter.com/search?q=%s&src=typed_query"
    :keybinding "t w")
  (defengine Vimeo
    "http://vimeo.com/search?q=%s"
    :keybinding "v m")
  (defengine WaybackMachine
    "http://web.archive.org/web/*/%s"
    :keybinding "w b")
  (defengine Wikipedia-Deutsch
    "https://de.wikipedia.org/w/index.php?title=Spezial:Suche&search=%s"
    :keybinding "w d")
  (defengine Wikipedia-English
    "http://en.wikipedia.org/w/index.php?title=Special:Search&profile=default&search=%s&fulltext=Search"
    :keybinding "w w")
  (defengine Wikipedia-French
    "http://fr.wikipedia.org/w/index.php?title=Spécial:Recherche&search=%s"
    :keybinding "w f")
  (defengine Wikipedia-Italiano
    "http://it.wikipedia.org/w/index.php?title=Speciale:Ricerca&search=%s"
    :keybinding "w i")
  (defengine Wikipedia-Spanish
    "https://es.wikipedia.org/w/index.php?search=%s&title=Especial:Buscar&ns0=1&ns11=1&ns100=1"
    :keybinding "w e")
  (defengine Wikipedia-Swedish
    "http://sv.wikipedia.org/w/index.php?title=Special:S%C3%B6k&search=%s"
    :keybinding "w s")
  (defengine Wirecutter
    "https://thewirecutter.com/search/?s=%s"
    :keybinding "w t")
  (defengine WorldCat
    "http://www.worldcat.org/search?q=%s&qt=results_page"
    :keybinding "w c")
  (defengine YahooFinance
    "https://finance.yahoo.com/company/%s"
    :keybinding "y f")
  (defengine YouTube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y t")
  (defengine YouTubemovies
    "https://www.youtube.com/results?lclk=long&filters=hd%2Clong&search_query=%s"
    :keybinding "y m")

  (engine/set-keymap-prefix (kbd "H-g")))
#+end_src

** org-download
:PROPERTIES:
:ID:       A9F101D1-4130-4297-A2B3-203B15AA408B
:END:
:LOGBOOK:
CLOCK: [2021-06-23 Wed 11:43]--[2021-06-23 Wed 11:51] =>  0:08
:END:

/[[https://github.com/abo-abo/org-download][org-download]] supports drag and drop images to org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-download
  :after org
  :general
  ("H-s-v" 'org-download-clipboard))
#+end_src

** org-web-tools
:PROPERTIES:
:ID:       F139F57B-7CBB-49C9-A061-B827B25DB3DA
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 10:50]--[2021-11-19 Fri 12:00] =>  1:10
CLOCK: [2021-11-18 Thu 20:43]--[2021-11-18 Thu 21:30] =>  0:47
CLOCK: [2021-10-01 Fri 21:10]--[2021-10-01 Fri 21:51] =>  0:41
:END:

/[[https://github.com/alphapapa/org-web-tools][org-web-tools]] supports viewing, capturing, and archiving web pages in org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-web-tools
  :defer 10
  :general
  (org-mode-map
  "s-A-k" 'org-web-tools-insert-link-for-url))
#+end_src

** org-web-tools-extras
:PROPERTIES:
:ID:       544201E3-BFB5-4398-AECC-EDD45410C064
:END:

#+begin_src emacs-lisp
(use-personal-package org-web-tools-extras
  :after org-web-tools-extras
  :demand t)
#+end_src

** request
:PROPERTIES:
:ID:       4B7C17EE-0346-4059-AFF1-24DD7A609ADE
:END:

/[[https://github.com/tkf/emacs-request][request]] provides HTTP request for Emacs Lisp./

#+begin_src emacs-lisp :results silent
(use-package request
  :defer 15)
#+end_src

** deferred
:PROPERTIES:
:ID:       A19273DD-3802-4594-A700-237F4134740A
:END:

/[[https://github.com/kiwanami/emacs-deferred][deferred]] provides simple asynchronous functions for emacs lisp./

#+begin_src emacs-lisp
(use-package deferred
  :defer 15)
#+end_src

** graphql-mode
:PROPERTIES:
:ID:       4B9A26D9-EA9B-420B-A8B2-060AAF19D4E4
:END:

/[[https://github.com/davazp/graphql-mode][graphql-mode]] is a major mode for GraphQL./

#+begin_src emacs-lisp
(use-package graphql-mode)
#+end_src

** mullvad
:PROPERTIES:
:ID:       F932B1C7-4BC0-45AB-A736-3E4DC4FBA09E
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 19:58]--[2023-04-09 Sun 21:23] =>  1:25
CLOCK: [2022-09-29 Thu 16:52]--[2022-09-29 Thu 18:01] =>  1:09
CLOCK: [2022-09-29 Thu 15:39]--[2022-09-29 Thu 16:26] =>  0:47
:END:

/[[https://github.com/benthamite/mullvad][mullvad]] provides a few functions for interfacing with Mullvad, a VPN service./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :mullvad)
(use-package mullvad
  :elpaca (mullvad
           :host github
           :repo "benthamite/mullvad")
  :demand t
  :config
  (setq mullvad-cities-and-servers
        '(("London" . "gb-lon-wg-001")
          ("Madrid" . "es-mad-wg-101")
          ("Malmö" . "se-sto-wg-001")
          ("Frankfurt" . "de-fra-wg-001")
          ("New York" . "us-nyc-wg-601")
          ("San José" . "us-sjc-wg-001")
          ("São Paulo" . "br-sao-wg-001")))

  (setq mullvad-websites-and-cities
        '(("Betfair" . "London")
          ("Criterion Channel" . "New York")
          ("Gemini" . "New York")
          ("HathiTrust" . "San José")
          ("Library Genesis" . "Malmö")
          ("Pirate Bay" . "Malmö")
          ("UC Berkeley" . "San José")
          ("Wise" . "Madrid")))

  :general
  ("A-a" 'mullvad-dispatch))
#+end_src

* multimedia
:PROPERTIES:
:ID:       358E28B5-0274-43A0-AE9C-AA004B4775E5
:END:

** EMMS
:PROPERTIES:
:ID:       3B176388-5D13-478F-8E13-9C8C93AB9D10
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 12:18]--[2022-09-05 Mon 13:11] =>  0:53
CLOCK: [2022-09-05 Mon 12:09]--[2022-09-05 Mon 12:12] =>  0:03
CLOCK: [2021-05-04 Tue 21:41]--[2021-05-04 Tue 21:56] =>  0:15
:END:

/[[https://www.gnu.org/software/emms/][EMMS]] (Emacs MultiMedia System) is media player software for Emacs./

EMMS is not powerful enough for my use case (tango DJ with a collection of over 70,000 tracks). But I'm exploring whether I can use it for specific purposes, such as batch-tagging.

#+begin_src emacs-lisp :results silent
(use-package emms
  :config
  (require 'emms-setup)
  (require 'emms-player-simple)
  (require 'emms-source-file)
  (require 'emms-source-playlist)
  (require 'emms-info-native)
  ;; emms-print-metadata binary must be present; see emacs.stackexchange.com/a/22431/32089
  (require 'emms-info-libtag)
  (require 'emms-mode-line)
  (require 'emms-mode-line-icon)
  (require 'emms-playing-time)

  (setq emms-player-list '(emms-player-mpv))
  (setq emms-source-file-default-directory paths-dir-music-tango)
  (setq emms-playlist-buffer-name "*Music*")
  (setq emms-info-functions '(emms-info-libtag)) ; make sure libtag is the only thing delivering metadata
  ;; ~1 order of magnitude fzaster; requires GNU find: `brew install findutils'
  (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)

  (emms-all)
  (emms-default-players)
  (add-to-list 'emms-info-functions 'emms-info-libtag)
  (emms-mode-line-mode)
  (emms-playing-time 1))
#+end_src

*** resources
:PROPERTIES:
:ID:       C043F6EF-C922-4803-8361-E94ACE1C60F0
:END:

[[https://sqrtminusone.xyz/posts/2021-09-07-emms/][My EMMS and elfeed setup]]

** mpv
:PROPERTIES:
:ID:       8D75E528-AA79-4512-B4A9-6EB7A56F9026
:END:

/[[https://github.com/kljohann/mpv.el][mpv]] provides various functions to control [[https://en.wikipedia.org/wiki/Mpv_(media_player)][mpv]]./

#+begin_src emacs-lisp :results silent
(use-package mpv)
#+end_src

** empv
:PROPERTIES:
:ID:       A26317BD-B76E-4A0A-9DA1-ED4CC9F4416F
:END:

#+begin_src emacs-lisp
(use-package empv
  :elpaca (:host github
                 :repo "isamert/empv.el")
  :demand t
  :config
  (setq empv-audio-dir paths-dir-music-tango)
  (setq empv-invidious-instance "https://invidious.fdn.fr/api/v1"))
#+end_src

** ytdl
:PROPERTIES:
:ID:       26EEEF20-5CDC-4855-A03D-AFEBB784D637
:END:
:LOGBOOK:
CLOCK: [2023-05-07 Sun 10:53]--[2023-05-07 Sun 11:27] =>  0:34
:END:

/[[https://gitlab.com/tuedachu/ytdl][ytdl]] is an Emacs interface for [[https://youtube-dl.org/][youtube-dl]]./

Note that this package also works with [[https://github.com/yt-dlp/yt-dlp][yt-dlp]], a ~youtube-dl~ fork.

#+begin_src emacs-lisp :results silent
(use-package ytdl
  :config
  (setq ytdl-command "yt-dlp")

  :general
  ("A-M-y" 'ytdl-download))
#+end_src

** read-aloud
:PROPERTIES:
:ID:       71DBC03A-D68C-4E5D-B495-55DE31F6DC2F
:END:

/[[https://github.com/gromnitsky/read-aloud.el][read-aloud]] is an Emacs interface to TTS (text-to-speech) engines./

As a side note, to give Emacs access to the microphone on MacOS, clone ~https://github.com/DocSystem/tccutil~ and from the cloned repo, run ~sudo python3 tccutil.py -p /opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/Emacs.app --micro -e~ (some discussion [[https://scsynth.org/t/emacs-scsynth-and-microphone-permissions/3253][here]]).

#+begin_src emacs-lisp :results silent
(use-package read-aloud
  :defer 20
  :config
  (setq read-aloud-engine "say")

  :general
  ("C-H-r" 'read-aloud-this)) ; remember that `A-C-d' starts/stops dictation
#+end_src

* misc
:PROPERTIES:
:ID:       EB8682EE-77BC-4D88-AA87-5ECB804C8B53
:END:

** calc
:PROPERTIES:
:ID:       50FAD2F3-E501-408E-A9A2-8358FAA87C1C
:END:

#+begin_src emacs-lisp :results silent
(use-feature calc
  :config
  (push 'calc-quick-calc-history savehist-additional-variables)

  :general
  ("A-c" 'calc
   "A-M-c" 'quick-calc)
  ((calc-mode-map calc-alg-map)
   "C-k" nil))
#+end_src

** alert
:PROPERTIES:
:ID:       694AAC2E-669E-40D4-9794-5E352D77734C
:END:
:LOGBOOK:
CLOCK: [2022-07-28 Thu 11:50]--[2022-07-28 Thu 12:02] =>  0:12
CLOCK: [2022-03-31 Thu 18:32]--[2022-03-31 Thu 18:49] =>  0:17
CLOCK: [2022-03-31 Thu 16:33]--[2022-03-31 Thu 16:33] =>  0:00
CLOCK: [2021-04-08 Thu 18:18]--[2021-04-08 Thu 18:29] =>  0:11
CLOCK: [2021-03-27 Sat 16:50]--[2021-03-27 Sat 17:00] =>  0:10
:END:

/[[https://github.com/jwiegley/alert][alert]] is a Growl-like alerts notifier for Emacs./

#+begin_src emacs-lisp :results silent
(use-package alert
  :demand t
  :config
  ;; the settings below are not working; is it because `alert-default-style' is set to `notifier'?
  (setq alert-fade-time 2)
  (setq alert-persist-idle-time 60)

  (if (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier)
    (setq alert-default-style 'notifications))

  ;; This function has to be loaded manually, for some reason.
  (defun alert-osx-notifier-notify (info)
    (apply #'call-process "osascript" nil nil nil "-e"
           (list (format "display notification %S with title %S"
                         (alert-encode-string (plist-get info :message))
                         (alert-encode-string (plist-get info :title)))))
    (alert-message-notify info)))
#+end_src

** unpackaged
:PROPERTIES:
:ID:       484FDD89-4C12-4624-82CB-FC36795C0A8F
:END:
:LOGBOOK:
:END:

/[[https://github.com/alphapapa/unpackaged.el][unpackaged]] is a collection of useful Emacs Lisp code that isn't substantial enough to be packaged./

#+begin_src emacs-lisp :results silent
(use-package unpackaged
  :elpaca (unpackaged
           :host github
           :repo "alphapapa/unpackaged.el")
  :commands (unpackaged/org-forward-to-entry-content))
#+end_src

** midnight
:PROPERTIES:
:ID:       C6B68696-DCCC-4143-A0BC-E5EEE249AACF
:END:
:LOGBOOK:
CLOCK: [2023-07-27 Thu 09:42]--[2023-07-27 Thu 09:48] =>  0:06
CLOCK: [2022-08-29 Mon 16:53]--[2022-08-29 Mon 17:06] =>  0:13
CLOCK: [2022-07-15 Fri 10:10]--[2022-07-15 Fri 11:10] =>  1:00
CLOCK: [2022-07-13 Wed 10:43]--[2022-07-13 Wed 10:56] =>  0:13
CLOCK: [2022-05-06 Fri 08:00]--[2022-05-06 Fri 08:15] =>  0:15
CLOCK: [2022-01-05 Wed 07:59]--[2022-01-05 Wed 08:37] =>  0:38
CLOCK: [2021-12-23 Thu 08:03]--[2021-12-23 Thu 08:20] =>  0:17
CLOCK: [2021-12-15 Wed 17:44]--[2021-12-15 Wed 17:53] =>  0:09
CLOCK: [2021-11-18 Thu 22:20]--[2021-11-18 Thu 22:58] =>  0:38
CLOCK: [2021-07-10 Sat 18:47]--[2021-07-10 Sat 19:28] =>  0:41
CLOCK: [2021-07-08 Thu 10:09]--[2021-07-08 Thu 10:33] =>  0:24
CLOCK: [2021-07-07 Wed 23:25]--[2021-07-07 Wed 23:46] =>  0:21
CLOCK: [2021-05-28 Fri 14:34]--[2021-05-28 Fri 14:46] =>  0:12
:END:

/midnight runs custom processes every night./

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :midnight)
(use-feature midnight
  :defer 600
  :config
  (setq clean-buffer-list-kill-never-buffer-names
        '("*mu4e-headers*"
          " *mu4e-update*")) ; not sure if the space is part of the buffer name
  (setq clean-buffer-list-kill-never-regexps
        '("\\` \\*Minibuf-.*\\*\\'"
          "^untitled.*"))
  (setq clean-buffer-list-delay-general 2) ; kill buffers unused for more than three days

  (midnight-mode)
  (midnight-delay-set 'midnight-delay "4:00am")

  ;; note that the hooks appear in reverse order of execution
  (dolist (function #'(tlon-babel-forge-update-all-repos
                       el-patch-validate-all
                       org-gcal-sync
                       org-extras-id-update-id-locations
                       org-roam-db-sync
                       pass-extras-git-sync
                       magit-extras-stage-commit-and-push-all-repos
                       ledger-mode-extras-update-commodities
                       ledger-mode-extras-update-coin-prices
                       clean-buffer-list
                       files-extras-save-all-buffers))
    (add-hook 'midnight-hook function)))
#+end_src

** bbdb
:PROPERTIES:
:ID:       0537BBF6-FD95-44A5-9327-1024A3D106EB
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 16:40]--[2023-04-09 Sun 16:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:10]--[2023-04-02 Sun 21:19] =>  0:09
CLOCK: [2023-03-31 Fri 15:20]--[2023-03-31 Fri 15:23] =>  0:03
CLOCK: [2023-03-28 Tue 22:48]--[2023-03-28 Tue 23:50] =>  1:02
CLOCK: [2023-03-28 Tue 22:32]--[2023-03-28 Tue 22:47] =>  0:15
:END:

/[[https://elpa.gnu.org/packages/bbdb.html][bbdb]] is a contact management package./

A tutorial for this undocumented package may be found [[https://github.com/andycowl/bbdb3-manual/blob/master/tutorial.rst][here]].

[2023-04-09 Sun 02:20] I wasn't able to build it, but I was able to install it with ~M-x package-install~, from which I created a local repo.

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :bbdb)
(use-package bbdb
  :elpaca (bbdb
           :host github
           :repo "tlon-team/bbdb")

  :config
  (setq bbdb-file (file-name-concat paths-dir-bbdb "bbdn.el"))
  (setq bbdb-image-path (file-name-concat paths-dir-bbdb "media/"))
  (bbdb-initialize 'anniv)

  :general
  ("A-b" 'bbdb)
  (bbdb-mode-map
   "A-C-s-r" 'bbdb-prev-record
   "A-C-s-f" 'bbdb-next-record
   "n" 'bbdb-extras-bbdb-create-quick
   "c" 'bbdb-copy-fields-as-kill
   "C-k" nil
   "M-d" nil
   "D" 'bbdb-extras-bbdb-delete-field-or-record-no-confirm))
#+end_src

*** TODO Diagnose why elpaca can't load this
:PROPERTIES:
:ID:       88C73B04-2EBA-40A6-B5F4-23C92E3306B5
:END:

** bbdb-extras
:PROPERTIES:
:ID:       07EA04A6-65BE-4AF9-A945-99095D719815
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :bbdb)
(use-personal-package bbdb-extras
  :after bbdb
  :demand t)
#+end_src

** bbdb-vcard
:PROPERTIES:
:ID:       EB0B93F7-30F0-4C6D-A638-CD67C307CB62
:END:

/[[https://github.com/tohojo/bbdb-vcard][bbdb-vcard]] supports import and export for BBDB./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :bbdb)
(use-package bbdb-vcard
  :after bbdb
  :config
  (setq bbdb-vcard-directory paths-dir-bbdb)
  (setq bbdb-vcard-media-directory "media"))
#+end_src

** keycast
:PROPERTIES:
:ID:       8D51F4B0-7443-420B-919F-7AA9B0EC0CE9
:END:

/[[https://github.com/tarsius/keycast][keycast]] shows the current command and its key in the mode line./

#+begin_src emacs-lisp :results silent
(use-package keycast
  :config
  ;; support for doom modeline (github.com/tarsius/keycast/issues/7)
  (with-eval-after-load 'keycast
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))))
#+end_src

** activity-watch
:PROPERTIES:
:ID:       809139BE-A8AF-40A7-BF1A-899839313729
:END:

Disabling because it interferes with [[https://emacs.stackexchange.com/questions/14950/invalid-coding-system-auto-save-coding-when-trying-to-recover-auto-save-files][recover-this-file]].

#+begin_src emacs-lisp
(use-package activity-watch-mode
  :disabled t
  :demand t
  :config
  (global-activity-watch-mode))
#+end_src

** custom
:PROPERTIES:
:ID:       7C328D33-DCFE-4E47-8B58-7C27E7F7C1DB
:END:

#+begin_src emacs-lisp :results silent
(use-feature custom
  :demand t
  :config
  (setq custom-safe-themes t)
  (setq custom-file (file-name-concat paths-dir-downloads "delete.me"))) ; move unintended customizations to a garbage file
#+end_src

** fatebook
:PROPERTIES:
:ID:       6668B610-6BAD-40AD-823B-7E96EFBB23CB
:END:

/[[https://github.com/sonofhypnos/fatebook.el][fatebook]] is an Emacs package to create predictions on Fatebook./

#+begin_src emacs-lisp
(use-package fatebook
  :elpaca (fatebook :repo "sonofhypnos/fatebook.el" :host github
                    :files ("fatebook.el"))
  :commands fatebook-create-question
  :config
  (setq fatebook-api-key-function (lambda () (auth-source-pass-get "api" "chrome/fatebook.io"))))
#+end_src

** tetris
:PROPERTIES:
:ID:       F4C5A232-7788-4240-9CE2-B6761C905786
:END:

And finally, the section you've all been waiting for.

#+begin_src emacs-lisp :results silent
(use-feature tetris
  :general
  (tetris-mode-map
   "k" 'tetris-rotate-prev
   "l" 'tetris-move-down
   "j" 'tetris-move-left
   ";" 'tetris-move-right))
#+end_src

** tlon-init
:PROPERTIES:
:ID:       8130737A-D75B-424C-8CDF-DDEF06281D59
:END:

#+begin_src emacs-lisp
(when (tlon-init-machine-pablo-p)
  (run-hooks 'tlon-init-post-init-hook))
#+end_src

* personal
:PROPERTIES:
:ID:       9D7B5C99-2380-4159-A8C8-4021CC0482DE
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 22:06]--[2023-03-27 Mon 22:17] =>  0:11
:END:

** Keyboard Maestro
:PROPERTIES:
:ID:       1776C0C3-CEEC-4DED-B609-4DF0DF83B0C2
:END:

These bindings allow Keyboard Maestro to trigger various Emacs processes.

#+begin_src emacs-lisp :results silent
(general-define-key
 "C-H-M-S-c" 'org-extras-copy-heading-contents
 "C-H-M-S-g" 'orgmdb-fill-movie-properties
 ;; "C-H-M-S-i" 'org-extras-switch-to-id ; delete
 "C-H-M-S-w" 'eww)
#+end_src

* local variables
:PROPERTIES:
:ID:       4FB9C92B-B39E-4C3D-B9AE-A3342A6F1695
:END:
# Local Variables:
# eval: (files-extras-buffer-local-set-key (kbd "H-;") 'hydra-org-config/body)
# eval: (files-extras-buffer-local-set-key (kbd "s-a") 'org-archive-hierarchically)
# eval: (add-hook 'before-save-hook 'org-make-toc nil t)
# eval: (flycheck-mode -1)
# doom-modeline-enable-word-count: nil
# End:
