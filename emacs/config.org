#+TITLE:Pablo's Emacs config
#+AUTHOR: Pablo Stafforini
#+PROPERTY: header-args :tangle (print tlon-init-user-init-path)
:PROPERTIES:
:TOC:      ignore
:END:
#+filetags: :project:

* exordium
:PROPERTIES:
:ID:       66EACB4A-84D2-42AE-9F85-EF30DA714A17
:END:

#+begin_src markdown :tangle no
In the depths of Emacs' lair I dwell,
Where keystrokes cast their cryptic spell,
For years I've danced with demon's grace,
Yet still its grip, I can't erase.

C-x, C-c, such bitter taste,
A twisted realm I've never graced,
With demon tongue, I've come to speak,
Yet man and code have turned so weak.

Oh Emacs dear, my twisted bane,
Through endless hacks, my love sustained,
For each tangled mess and frozen screen,
In you, a world of dreams unseen.

Configuring, remapping, endless strife,
To bend your will I've spent my life,
For one sweet day, your code to tame,
Oh Emacs dear, you dashing flame!

Yet sometimes with wild heart I ponder,
And on this twisted love affair I wonder,
What if ‘twas Vim had lead me astray,
And in its dark depths my fingers lay?

But Emacs dear, fear not my eyes,
I'll wrestle with thee 'til my demise,
For in this hell we've built a choir,
And in your flames, I'll redisplay desire.
#+end_src

(courtesy of GPT-4)

I am not a programmer, let alone an Elisp hacker. My background is in the humanities. It is only a slight exaggeration to say that, before I started using Emacs in 2020, I didn't know the difference between a function and a variable. You have been forewarned.

* table of contents
:PROPERTIES:
:TOC:      :include all :depth 3 :force ((nothing)) :ignore ((nothing)) :local ((nothing))
:ID:       536D7BF2-AA0D-43D7-8865-601DFB6BB8E6
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:28]--[2021-08-02 Mon 21:29] =>  0:01
:END:
:CONTENTS:
- [[#exordium][exordium]]
- [[#table-of-contents][table of contents]]
- [[#introductory][introductory]]
  - [[#key-bindings][key bindings]]
  - [[#profiling][profiling]]
  - [[#installation][installation]]
  - [[#other-config-files][other config files]]
- [[#early-init][early-init]]
- [[#startup][startup]]
  - [[#macros][macros]]
- [[#package-management][package management]]
  - [[#elpaca][elpaca]]
  - [[#use-package][use-package]]
- [[#foundational][foundational]]
  - [[#general][general]]
  - [[#no-littering][no-littering]]
  - [[#ns-win][ns-win]]
  - [[#iso-transl][iso-transl]]
  - [[#el-patch][el-patch]]
  - [[#hydra][hydra]]
  - [[#warnings][warnings]]
  - [[#comp][comp]]
  - [[#bytecomp][bytecomp]]
  - [[#startup][startup]]
  - [[#server][server]]
  - [[#async][async]]
  - [[#emacsql][emacsql]]
  - [[#misc][misc.]]
- [[#display][display]]
  - [[#mixed-pitch][mixed-pitch]]
  - [[#fringe][fringe]]
  - [[#org-modern][org-modern]]
  - [[#org-modern-indent][org-modern-indent]]
  - [[#faces][faces]]
  - [[#face-remap][face-remap]]
  - [[#theme-loaddefs][theme-loaddefs]]
  - [[#modus-themes][modus-themes]]
  - [[#highlight-parentheses][highlight-parentheses]]
  - [[#emojify][emojify]]
  - [[#lin][lin]]
  - [[#image][image]]
  - [[#paren][paren]]
  - [[#doom-modeline][doom-modeline]]
  - [[#tab-bar][tab-bar]]
  - [[#fancy-battery][fancy-battery]]
  - [[#all-the-icons][all-the-icons]]
  - [[#all-the-icons-completion][all-the-icons-completion]]
  - [[#nerd-icons][nerd-icons]]
  - [[#menu-bar][menu-bar]]
  - [[#tool-bar][tool-bar]]
  - [[#scroll-bar][scroll-bar]]
  - [[#delsel][delsel]]
  - [[#hl-line][hl-line]]
  - [[#jit-lock][jit-lock]]
- [[#performance][performance]]
  - [[#profiler][profiler]]
  - [[#so-long][so-long]]
  - [[#gcmh][gcmh]]
  - [[#misc][misc.]]
- [[#text-movement][text movement]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#defuns][defuns]]
  - [[#buffers][buffers]]
- [[#text-manipulation][text manipulation]]
  - [[#characters][characters]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#headings][headings]]
  - [[#element][element]]
  - [[#region][region]]
  - [[#misc][misc.]]
  - [[#kill-ring][kill ring]]
- [[#editing][editing]]
  - [[#simple][simple]]
  - [[#repeat][repeat]]
  - [[#view][view]]
  - [[#indent][indent]]
  - [[#sort][sort]]
  - [[#vundo][vundo]]
  - [[#outline][outline]]
  - [[#fill][fill]]
  - [[#unfill][unfill]]
  - [[#abbrev][abbrev]]
  - [[#yasnippet][yasnippet]]
  - [[#yasnippet-snippets][yasnippet-snippets]]
  - [[#hippie-expand][hippie-expand]]
  - [[#expand-region][expand-region]]
  - [[#newcomment][newcomment]]
  - [[#skeleton][skeleton]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#crux][crux]]
  - [[#button][button]]
  - [[#back-button][back-button]]
  - [[#goto-last-change][goto-last-change]]
  - [[#goto-addr][goto-addr]]
- [[#registers--bookmarks][registers & bookmarks]]
  - [[#registers][registers]]
  - [[#bookmarks][bookmarks]]
- [[#files--buffers][files & buffers]]
  - [[#files][files]]
  - [[#f][f]]
  - [[#locate][locate]]
  - [[#autorevert][autorevert]]
  - [[#dired][dired]]
  - [[#dired-async][dired-async]]
  - [[#image-dired][image-dired]]
  - [[#all-the-icons-dired][all-the-icons-dired]]
  - [[#nerd-icons-dired][nerd-icons-dired]]
  - [[#wdired][wdired]]
  - [[#gnus-dired][gnus-dired]]
  - [[#dired-x][dired-x]]
  - [[#dired-hacks][dired-hacks]]
  - [[#dired-quick-sort][dired-quick-sort]]
  - [[#dired-du][dired-du]]
  - [[#peep-dired][peep-dired]]
  - [[#minibuffer][minibuffer]]
  - [[#ibuffer][ibuffer]]
  - [[#filenotify][filenotify]]
  - [[#uniquify][uniquify]]
  - [[#reveal-in-osx-finder][reveal-in-osx-finder]]
  - [[#tramp][tramp]]
  - [[#pandoc-mode][pandoc-mode]]
  - [[#curl-to-elisp][curl-to-elisp]]
- [[#windows--frames][windows & frames]]
  - [[#window][window]]
  - [[#frame][frame]]
  - [[#winum][winum]]
  - [[#winner][winner]]
  - [[#avy][avy]]
  - [[#writeroom-mode][writeroom-mode]]
  - [[#ace-link][ace-link]]
- [[#date--time][date & time]]
  - [[#calendar][calendar]]
  - [[#loaddefs][loaddefs]]
  - [[#org-gcal][org-gcal]]
  - [[#calfw][calfw]]
  - [[#calfw-blocks][calfw-blocks]]
  - [[#time][time]]
  - [[#tmr][tmr]]
  - [[#display-wttr][display-wttr]]
- [[#history][history]]
  - [[#simple][simple]]
  - [[#savehist][savehist]]
  - [[#saveplace][saveplace]]
  - [[#session][session]]
  - [[#recentf][recentf]]
  - [[#remember][remember]]
- [[#version-control][version control]]
  - [[#vc][vc]]
  - [[#ediff][ediff]]
  - [[#diff-mode][diff-mode]]
  - [[#smerge][smerge]]
  - [[#magit][magit]]
  - [[#ghub][ghub]]
  - [[#forge][forge]]
  - [[#orgit-forge][orgit-forge]]
  - [[#forge-search][forge-search]]
  - [[#code-review][code-review]]
  - [[#github-review][github-review]]
  - [[#gh-notify][gh-notify]]
  - [[#git-auto-commit-mode][git-auto-commit-mode]]
- [[#search--replace][search & replace]]
  - [[#isearch][isearch]]
  - [[#replace][replace]]
  - [[#substitute][substitute]]
  - [[#visual-regexp][visual-regexp]]
  - [[#visual-regexp-steroids][visual-regexp-steroids]]
  - [[#imenu][imenu]]
  - [[#pcre2el][pcre2el]]
  - [[#wgrep][wgrep]]
- [[#minibuffer-completion][minibuffer completion]]
  - [[#vertico][vertico]]
  - [[#embark][embark]]
  - [[#consult][consult]]
  - [[#consult-dir][consult-dir]]
  - [[#consult-yasnippet][consult-yasnippet]]
  - [[#consult-spotify][consult-spotify]]
  - [[#consult-flyspell][consult-flyspell]]
  - [[#embark-consult][embark-consult]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#ido][ido]]
  - [[#which-key][which-key]]
- [[#completion-at-point][completion at point]]
  - [[#corfu][corfu]]
  - [[#corfu-terminal][corfu-terminal]]
  - [[#corfu-doc-terminal][corfu-doc-terminal]]
  - [[#kind-icon][kind-icon]]
  - [[#cape][cape]]
  - [[#org-block-cafp][org-block-cafp]]
  - [[#company][company]]
- [[#help][help]]
  - [[#help][help]]
  - [[#help-at-pt][help-at-pt]]
  - [[#help-fns][help-fns]]
  - [[#helpful][helpful]]
  - [[#info][info]]
  - [[#man][man]]
  - [[#shortdoc][shortdoc]]
  - [[#elisp-demos][elisp-demos]]
- [[#keyboard-macros][keyboard macros]]
  - [[#kmacro][kmacro]]
- [[#shell][shell]]
  - [[#simple][simple]]
  - [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#emacs-eat][emacs-eat]]
  - [[#em-hist][em-hist]]
  - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
  - [[#dwim-shell-command][dwim-shell-command]]
- [[#spelling--grammar][spelling & grammar]]
  - [[#ispell][ispell]]
  - [[#flyspell][flyspell]]
  - [[#flyspell-lazy][flyspell-lazy]]
  - [[#flyspell-correct][flyspell-correct]]
  - [[#keytar][keytar]]
  - [[#grammarly][grammarly]]
  - [[#lsp-grammarly][lsp-grammarly]]
  - [[#languagetool][languagetool]]
- [[#prose][prose]]
  - [[#text-mode][text-mode]]
  - [[#with-editor][with-editor]]
  - [[#latex-mode][latex-mode]]
  - [[#goldendict][goldendict]]
  - [[#powerthesaurus][powerthesaurus]]
  - [[#reverso][reverso]]
  - [[#goldendict][goldendict]]
  - [[#txl][txl]]
  - [[#atomic-chrome][atomic-chrome]]
  - [[#markdown][markdown]]
  - [[#edit-indirect][edit-indirect]]
  - [[#mediawiki-el][mediawiki-el]]
  - [[#gdrive][gdrive]]
  - [[#ledger-mode][ledger-mode]]
- [[#pdf][pdf]]
  - [[#pdf-tools][pdf-tools]]
  - [[#scroll-other-window][scroll-other-window]]
  - [[#pdf-view-restore][pdf-view-restore]]
  - [[#org-pdftools][org-pdftools]]
  - [[#org-noter-pdftools][org-noter-pdftools]]
- [[#prog-mode][prog-mode]]
  - [[#flymake][flymake]]
  - [[#lsp-mode][lsp-mode]]
  - [[#lsp-ui][lsp-ui]]
  - [[#dumb-jump][dumb-jump]]
  - [[#elisp-mode][elisp-mode]]
  - [[#debug][debug]]
  - [[#edebug][edebug]]
  - [[#backtrace][backtrace]]
  - [[#macrostep][macrostep]]
  - [[#clojure][clojure]]
  - [[#python][python]]
  - [[#applescript-mode][applescript-mode]]
  - [[#csv-mode][csv-mode]]
  - [[#hideshow][hideshow]]
  - [[#aggressive-indent][aggressive-indent]]
  - [[#elpy][elpy]]
  - [[#eldoc][eldoc]]
  - [[#bicycle][bicycle]]
- [[#ai][AI]]
  - [[#copilot][copilot]]
  - [[#openai][openai]]
  - [[#chatgpt][chatgpt]]
  - [[#codegpt][codegpt]]
  - [[#org-ai][org-ai]]
  - [[#whisper][whisper]]
  - [[#pen][pen]]
- [[#org-mode][org-mode]]
  - [[#org][org]]
  - [[#org-agenda][org-agenda]]
  - [[#org-capture][org-capture]]
  - [[#org-clock][org-clock]]
  - [[#org-clock-convenience][org-clock-convenience]]
  - [[#org-clock-split][org-clock-split]]
  - [[#org-cycle][org-cycle]]
  - [[#org-archive][org-archive]]
  - [[#org-archive-hierarchically][org-archive-hierarchically]]
  - [[#org-fold][org-fold]]
  - [[#org-faces][org-faces]]
  - [[#org-id][org-id]]
  - [[#org-list][org-list]]
  - [[#org-refile][org-refile]]
  - [[#org-keys][org-keys]]
  - [[#ol][ol]]
  - [[#ol-bbdb][ol-bbdb]]
  - [[#org-protocol][org-protocol]]
  - [[#ox][ox]]
  - [[#ox-hugo][ox-hugo]]
  - [[#ox-pandoc][ox-pandoc]]
  - [[#ob][ob]]
  - [[#org-src][org-src]]
  - [[#org-table][org-table]]
  - [[#orgtbl-edit][orgtbl-edit]]
  - [[#org-crypt][org-crypt]]
  - [[#org-lint][org-lint]]
  - [[#org-habit][org-habit]]
  - [[#org-contrib][org-contrib]]
  - [[#org-checklist][org-checklist]]
  - [[#org-analyzer][org-analyzer]]
  - [[#org-make-toc][org-make-toc]]
  - [[#org2blog][org2blog]]
  - [[#org-journal][org-journal]]
  - [[#org-autosort][org-autosort]]
  - [[#ox-clip][ox-clip]]
  - [[#org-mime][org-mime]]
  - [[#elgantt][elgantt]]
  - [[#org-pomodoro][org-pomodoro]]
- [[#note-taking][note-taking]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-ui][org-roam-ui]]
  - [[#org-roam-browser-extension][org-roam-browser-extension]]
  - [[#org-transclusion][org-transclusion]]
  - [[#vulpea][vulpea]]
  - [[#org-noter][org-noter]]
- [[#reference--citation][reference & citation]]
  - [[#oc][oc]]
  - [[#oc-basic][oc-basic]]
  - [[#oc-bibtex][oc-bibtex]]
  - [[#oc-biblatex][oc-biblatex]]
  - [[#oc-csl][oc-csl]]
  - [[#citeproc][citeproc]]
  - [[#bibtex][bibtex]]
  - [[#bibtex-completion][bibtex-completion]]
  - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#citar][citar]]
  - [[#citar-citeproc][citar-citeproc]]
  - [[#citar-embark][citar-embark]]
  - [[#citar-org-roam][citar-org-roam]]
  - [[#org-ref][org-ref]]
  - [[#doi-utils][doi-utils]]
  - [[#ebib][ebib]]
  - [[#persid][persid]]
  - [[#zotra][zotra]]
- [[#email][email]]
  - [[#simple][simple]]
  - [[#sendmail][sendmail]]
  - [[#smtpmail][smtpmail]]
  - [[#async-mail-sending][async-mail-sending]]
  - [[#message][message]]
  - [[#mml][mml]]
  - [[#mu4e][mu4e]]
  - [[#mu4e-contrib][mu4e-contrib]]
  - [[#mu4e-alert][mu4e-alert]]
  - [[#org-msg][org-msg]]
- [[#messaging][messaging]]
  - [[#telega][telega]]
  - [[#telega-mnz][telega-mnz]]
  - [[#telega-dired-dwim][telega-dired-dwim]]
  - [[#ol-telega][ol-telega]]
  - [[#erc][erc]]
  - [[#circe][circe]]
  - [[#accord][accord]]
- [[#web][web]]
  - [[#browse-url][browse-url]]
  - [[#shr][shr]]
  - [[#shr-tag-pre-highlight][shr-tag-pre-highlight]]
  - [[#shr-heading][shr-heading]]
  - [[#eww][eww]]
  - [[#w3m][w3m]]
  - [[#elfeed][elfeed]]
  - [[#elfeed-org][elfeed-org]]
  - [[#google-this][google-this]]
  - [[#engine-mode][engine-mode]]
  - [[#osm][osm]]
  - [[#twittering-mode][twittering-mode]]
  - [[#org-download][org-download]]
  - [[#org-web-tools][org-web-tools]]
  - [[#request][request]]
  - [[#deferred][deferred]]
  - [[#graphql-mode][graphql-mode]]
  - [[#mullvad][mullvad]]
- [[#multimedia][multimedia]]
  - [[#emms][EMMS]]
  - [[#mpv][mpv]]
  - [[#ytdl][ytdl]]
  - [[#mentor][mentor]]
  - [[#espotify][espotify]]
  - [[#smudge][smudge]]
  - [[#read-aloud][read-aloud]]
- [[#passwords][passwords]]
  - [[#plstore][plstore]]
  - [[#epg-config][epg-config]]
  - [[#auth-source][auth-source]]
  - [[#oauth2-auto][oauth2-auto]]
  - [[#pass][pass]]
  - [[#auth-source-pass][auth-source-pass]]
- [[#misc][misc]]
  - [[#calc][calc]]
  - [[#alert][alert]]
  - [[#unpackaged][unpackaged]]
  - [[#midnight][midnight]]
  - [[#bbdb][bbdb]]
  - [[#bbdb-vcard][bbdb-vcard]]
  - [[#keycast][keycast]]
  - [[#custom][custom]]
  - [[#tetris][tetris]]
- [[#personal][personal]]
  - [[#tlon-init][tlon-init]]
  - [[#tlon-core][tlon-core]]
  - [[#tlon-bae][tlon-bae]]
  - [[#keyboard-maestro][Keyboard Maestro]]
- [[#variables][variables]]
  - [[#shared-variables][shared variables]]
  - [[#local-variables][local variables]]
:END:

* introductory
:PROPERTIES:
:CUSTOM_ID: introduction
:ID:       A7940400-DD17-4B0B-A9B2-565A207D680C
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 09:25]--[2022-05-29 Sun 10:31] =>  1:13
CLOCK: [2021-07-24 Sat 09:51]--[2021-07-24 Sat 09:58] =>  0:07
CLOCK: [2021-07-14 Wed 22:51]--[2021-07-14 Wed 23:09] =>  0:18
CLOCK: [2021-03-07 Sun 18:52]--[2021-03-07 Sun 18:57] =>  0:05
CLOCK: [2021-03-04 Thu 09:05]--[2021-03-04 Thu 09:22] =>  0:17
CLOCK: [2021-02-03 Wed 16:32]--[2021-02-03 Wed 18:27] =>  1:55
CLOCK: [2021-02-03 Wed 16:01]--[2021-02-03 Wed 16:32] =>  0:31
CLOCK: [2021-02-03 Wed 15:40]--[2021-02-03 Wed 16:01] =>  0:21
CLOCK: [2021-02-03 Wed 13:56]--[2021-02-03 Wed 15:02] =>  1:06
CLOCK: [2021-01-31 Sun 15:22]--[2021-01-31 Sun 16:01] =>  0:39
CLOCK: [2021-01-31 Sun 10:07]--[2021-01-31 Sun 10:28] =>  0:21
CLOCK: [2021-01-24 Sun 11:41]--[2021-01-24 Sun 11:48] =>  0:07
CLOCK: [2021-01-23 Sat 08:40]--[2021-01-23 Sat 08:46] =>  0:06
CLOCK: [2021-01-22 Fri 09:29]--[2021-01-22 Fri 09:32] =>  0:03
CLOCK: [2021-01-12 Tue 19:22]--[2021-01-12 Tue 19:27] =>  0:05
CLOCK: [2021-01-12 Tue 11:41]--[2021-01-12 Tue 12:42] =>  1:01
CLOCK: [2021-01-08 Fri 13:34]--[2021-01-08 Fri 13:34] =>  0:00
CLOCK: [2021-01-06 Wed 22:04]--[2021-01-06 Wed 22:14] =>  0:10
CLOCK: [2021-01-06 Wed 13:46]--[2021-01-06 Wed 13:58] =>  0:12
CLOCK: [2021-01-06 Wed 12:30]--[2021-01-06 Wed 12:53] =>  0:23
CLOCK: [2021-01-06 Wed 11:02]--[2021-01-06 Wed 11:34] =>  0:32
CLOCK: [2021-01-03 Sun 22:11]--[2021-01-03 Sun 22:18] =>  0:07
CLOCK: [2021-01-03 Sun 22:03]--[2021-01-03 Sun 22:07] =>  0:04
CLOCK: [2021-01-02 Sat 14:00]--[2021-01-02 Sat 14:06] =>  0:06
CLOCK: [2020-12-31 Thu 13:56]--[2020-12-31 Thu 14:25] =>  0:29
CLOCK: [2020-12-31 Thu 13:46]--[2020-12-31 Thu 13:52] =>  0:06
CLOCK: [2020-12-29 Tue 15:07]--[2020-12-29 Tue 15:18] =>  0:11
CLOCK: [2020-12-22 Tue 09:57]--[2020-12-22 Tue 10:25] =>  0:28
CLOCK: [2020-12-19 Sat 12:18]--[2020-12-19 Sat 12:22] =>  0:04
CLOCK: [2020-12-14 Mon 18:39]--[2020-12-14 Mon 18:44] =>  0:05
CLOCK: [2020-12-07 Mon 18:15]--[2020-12-07 Mon 18:27] =>  0:12
CLOCK: [2020-10-20 Tue 17:48]--[2020-10-20 Tue 18:10] =>  0:22
CLOCK: [2020-10-20 Tue 17:27]--[2020-10-20 Tue 17:38] =>  0:11
CLOCK: [2020-10-20 Tue 11:30]--[2020-10-20 Tue 11:36] =>  0:06
CLOCK: [2020-10-19 Mon 20:24]--[2020-10-19 Mon 20:39] =>  0:15
CLOCK: [2020-10-15 Thu 20:37]--[2020-10-15 Thu 20:52] =>  0:15
CLOCK: [2020-10-15 Thu 18:56]--[2020-10-15 Thu 19:06] =>  0:10
CLOCK: [2020-10-15 Thu 18:11]--[2020-10-15 Thu 18:26] =>  0:15
CLOCK: [2020-10-14 Wed 07:31]--[2020-10-14 Wed 07:52] =>  0:21
CLOCK: [2020-10-12 Mon 18:15]--[2020-10-12 Mon 19:58] =>  1:43
CLOCK: [2020-10-12 Mon 15:28]--[2020-10-12 Mon 15:29] =>  0:01
CLOCK: [2020-10-11 Sun 21:10]--[2020-10-11 Sun 21:15] =>  0:05
CLOCK: [2020-10-11 Sun 10:05]--[2020-10-11 Sun 10:19] =>  0:14
CLOCK: [2020-10-10 Sat 18:21]--[2020-10-10 Sat 18:25] =>  0:04
CLOCK: [2020-10-05 Mon 18:56]--[2020-10-05 Mon 18:58] =>  0:02
CLOCK: [2020-10-04 Sun 11:27]--[2020-10-04 Sun 11:34] =>  0:07
CLOCK: [2020-10-04 Sun 10:54]--[2020-10-04 Sun 11:22] =>  0:28
CLOCK: [2020-08-19 Wed 13:52]--[2020-08-19 Wed 14:47] =>  0:55
:END:

** key bindings
:PROPERTIES:
:ID:       a47d148a-1b5e-4850-a1a7-6cd745bad696
:END:
Emacs has five native [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifier-Keys.html][modifier keys]]: ~Control~ (~C~), ~Meta~ (~M~), ~Super~ (~s~), ~Hyper~ (~H~), and ~Alt~ (~A~). (The letter abbreviation for the ~Super~ modifier is ~s~ because ~S~ is assigned to the ~Shift~ key.) I use [[https://karabiner-elements.pqrs.org/][Karabiner-Elements]], in combination with a [[https://www.zsa.io/moonlander/][Moonlander keyboard]], to generate several additional "pseudo modifiers", or mappings between individual keys and combinations of two or more Emacs modifiers:

[[file:etc/moonlander-emacs.png]]

So when you see a monstrous key binding such as ~C-H-M-s-d~, remember that everything that precedes the final key (in this case, ~d~) represents a single key press (in this case, ~l~). For details, see my [[../karabiner/modifications.org][Karabiner config file]], specifically the "Key associations" section.

** debugging                                                       :noexport:
:PROPERTIES:
:ID:       ED2955EA-3BD8-4058-A973-3CC87847D9A5
:END:
:LOGBOOK:
CLOCK: [2021-04-12 Mon 13:20]--[2021-04-12 Mon 13:46] =>  0:26
:END:
- Run ~bug-hunter-init-file~ (from the [[id:0C19171B-8DFA-4E06-9E17-45C1F9158C28][elisp-bug-hunter]] package) and select "automatic error detection" (~e~).
- Run ~emacs -q~ or ~emacs --debug-init~.
- Cut suspected sections of the org file (~org-cut-subtree~), tangle immediately afterwards, then undo the changes. This will generate an init file without the code blocks included in the removed sections, while leaving the literal org file intact.
- Use ~magit-log-buffer-file~ or ~git-timemachine~ to explore previous versions of your config file.
- Set ~debug-on-error~ to ~t~ to see a backtrace of an error. Or call ~toggle-debug-on-error~ interactively.
  - To determine what function is changing the value of a variable, use ~debug-on-variable-change~.
  - To determine what function is generating a particular message, use ~debug-on-message~.
- Bisect the init file until you locate the culprit.
  - Run ~bug-hunter-init-file~ and select "bisect interactively" (~i~).
- If Emacs becomes unresponsive, run ~pkill -USR2 Emacs~ in a terminal. Emacs will likely trigger a backtrace, which you can inspect to diagnose the issue.
- You may want to periodically save a stable init file so that you can temporarily use Emacs with all your customizations while debugging your current init file (instead of having to use an external editor or a non-customized Emacs). Say you call this stable file ~stable.el~. Then you can tell Emacs to load this file on startup file with ~emacs -q -l ~/stable.el~.
- Use ~edebug-defun~. See [[https://org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/45?u=pablo][this discussion]].
- For org-related issues (e.g. tangling the config file), use ~org-lint~, which checks the current buffer for syntax mistakes.
- For more ideas, see:
  - [[https://www.emacswiki.org/emacs/DebugEmacs][EmacsWiki: Debug Emacs]]
  - [[https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/][Emacs Debugging Basics - whatacold's space]]
  - [[https://discourse.doomemacs.org/t/how-to-debug-issues/55][How to debug issues - Guides & Tutorials - Doom Emacs Discourse]].
  - [[id:94184DD8-591C-46CD-BFC3-9738113DA640][Debugging Emacs Lisp]]

** profiling
:PROPERTIES:
:ID:       60B7A58C-A79A-4EEF-A91D-EECC85CFA173
:END:
- If you use ~use-package~, the command ~use-package-report~ displays a table showing the impact of each package on load times.
- You may also want to try [[https://www.emacswiki.org/emacs/ProfileDotEmacs][profile-dotemacs]].

** installation
:PROPERTIES:
:ID:       6712DA4C-BA45-4E74-8AEF-C903462D9BCB
:END:
:LOGBOOK:
CLOCK: [2021-04-20 Tue 22:00]--[2021-04-20 Tue 23:28] =>  1:28
CLOCK: [2021-04-20 Tue 20:55]--[2021-04-20 Tue 21:26] =>  0:31
CLOCK: [2021-04-03 Sat 14:40]--[2021-04-03 Sat 15:07] =>  0:27
CLOCK: [2021-04-02 Fri 22:15]--[2021-04-02 Fri 22:35] =>  0:20
CLOCK: [2021-03-31 Wed 22:00]--[2021-03-31 Wed 23:00] =>  1:00
CLOCK: [2021-03-31 Wed 21:40]--[2021-03-31 Wed 21:47] =>  0:07
CLOCK: [2021-03-27 Sat 10:08]--[2021-03-27 Sat 13:05] =>  2:57
CLOCK: [2021-03-27 Sat 07:49]--[2021-03-27 Sat 09:10] =>  1:21
CLOCK: [2021-03-27 Sat 16:48]--[2021-03-27 Sat 16:50] =>  0:02
CLOCK: [2021-03-22 Mon 15:46]--[2021-03-22 Mon 15:53] =>  0:07
CLOCK: [2021-03-22 Mon 15:00]--[2021-03-22 Mon 15:20] =>  0:20
CLOCK: [2021-02-27 Sat 17:20]--[2021-02-27 Sat 18:00] =>  0:40
CLOCK: [2021-02-25 Thu 08:30]--[2021-02-25 Thu 11:54] =>  3:24
CLOCK: [2021-02-07 Sun 15:01]--[2021-02-07 Sun 15:18] =>  0:17
CLOCK: [2021-02-07 Sun 14:52]--[2021-02-07 Sun 14:54] =>  0:26
CLOCK: [2021-02-07 Sun 14:30]--[2021-02-07 Sun 14:49] =>  0:19
CLOCK: [2021-02-04 Thu 08:10]--[2021-02-04 Thu 09:25] =>  1:15
CLOCK: [2020-09-22 Tue 12:15]--[2020-09-22 Tue 13:01] =>  0:46
CLOCK: [2020-09-22 Tue 10:50]--[2020-09-22 Tue 12:15] =>  1:25
CLOCK: [2022-04-27 Wed 16:21]--[2022-04-27 Wed 16:44] =>  0:23
CLOCK: [2021-08-15 Sun 17:03]--[2021-08-15 Sun 17:06] =>  0:03
:END:

For personal reference, these are the most recent Emacs installations (in reverse chronological order).

[2023-02-23 Thu]

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-23 Thu 02:10]

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-dbus --with-no-titlebar --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

- Very slow.
- Theme broke for some reason.
- Some functions (e.g. ~keymap-unset~) not available).
- Telega doesn't show profile pics

[2023-02-14 Tue 20:07]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-07 Tue 21:52]:

#+begin_src shell :tangle no
brew install emacs-mac --with-dbus --with-starter --with-natural-title-bar --with-native-comp --with-mac-metal --with-xwidgets --with-imagemagick  --with-librsvg  --with-spacemacs-icon
#+end_src

** other config files
:PROPERTIES:
:ID:       20E3D45E-D8AB-44BD-A5E2-C6DF9C20744E
:END:

:LOGBOOK:
CLOCK: [2022-06-29 Wed 18:08]--[2022-06-29 Wed 18:18] =>  0:10
CLOCK: [2022-06-17 Fri 21:20]--[2022-06-17 Fri 21:47] =>  0:27
CLOCK: [2021-08-02 Mon 21:29]--[2021-08-02 Mon 21:30] =>  0:01
CLOCK: [2021-06-30 Wed 20:43]--[2021-06-30 Wed 21:15] =>  0:32
CLOCK: [2021-06-30 Wed 19:32]--[2021-06-30 Wed 20:02] =>  0:30
CLOCK: [2021-06-05 Sat 19:34]--[2021-06-05 Sat 19:41] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-03 Thu 13:47]--[2021-06-03 Thu 13:52] =>  0:05
CLOCK: [2021-06-03 Thu 07:21]--[2021-06-03 Thu 07:50] =>  0:29
CLOCK: [2021-06-02 Wed 22:00]--[2021-06-02 Wed 22:11] =>  0:11
CLOCK: [2021-06-02 Wed 21:44]--[2021-06-02 Wed 21:50] =>  0:06
CLOCK: [2021-05-26 Wed 19:32]--[2021-05-26 Wed 19:44] =>  0:12
CLOCK: [2021-05-23 Sun 19:52]--[2021-05-23 Sun 20:02] =>  0:10
CLOCK: [2021-05-22 Sat 16:36]--[2021-05-22 Sat 16:44] =>  0:08
CLOCK: [2021-04-03 Sat 18:21]--[2021-04-03 Sat 18:36] =>  0:15
CLOCK: [2021-03-27 Sat 17:00]--[2021-03-27 Sat 17:32] =>  0:32
CLOCK: [2021-03-26 Fri 13:31]--[2021-03-26 Fri 14:14] =>  0:43
CLOCK: [2021-03-26 Fri 12:47]--[2021-03-26 Fri 13:18] =>  0:00
CLOCK: [2021-03-26 Fri 10:47]--[2021-03-26 Fri 10:57] =>  0:10
CLOCK: [2021-03-23 Tue 14:30]--[2021-03-23 Tue 16:45] =>  2:15
CLOCK: [2021-03-23 Tue 14:10]--[2021-03-23 Tue 14:30] =>  0:20
CLOCK: [2021-03-21 Sun 16:23]--[2021-03-21 Sun 16:32] =>  0:09
CLOCK: [2021-02-28 Sun 10:12]--[2021-02-28 Sun 10:27] =>  0:15
CLOCK: [2021-02-04 Thu 12:49]--[2021-02-04 Thu 14:36] =>  1:47
:END:
The below is a link dump for config files and other related links I have found useful in the past or may want to check out for ideas at some point in the future.
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A list of useful Emacs packages.
- [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][How to build your own spacemacs · Samuel Barreto]]
- [[https://www.reddit.com/r/emacs/comments/3lt3c6/using_spacemacs_modeline_in_vanilla_emacs/][Using SpaceMacs mode-line in vanilla Emacs : emacs]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does Emacs Doom start so quickly?]] Might be useful for ideas on how to speed up config file.
- [[https://prelude.emacsredux.com/en/latest/][Emacs Prelude]]. I've seen this recommended. Might want to check it out.
- [[https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/][Polishing my Emacs -- who said an old tool can't look modern]]
  [[https://github.com/mbriggs/.emacs.d-oldv2/blob/master/init/init-keymaps.el][.emacs.d-oldv2/init-keymaps.el at master · mbriggs/.emacs.d-oldv2]]. Lots of key bindings.

Literate configuration
- [[https://commonplace.doubleloop.net/setting-up-a-spacemacs-literate-config-file][Setting up a spacemacs literate config file]]
- [[https://www.reddit.com/r/spacemacs/comments/atuzd9/does_anyone_have_their_dotfile_redone_in_literate/][Does anyone have their dotfile redone in literate programming with babel? : spacemacs]]
- Diego Zamboni, /[[https://leanpub.com/lit-config][Literate configuration]]/
- [[https://emacs.sJtackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][elisp - Can I use org-mode to structure my .emacs or other .el configuration file? - Emacs Stack Exchange]]

Some useful config files:
- [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Diego Zamboni]]
- [[https://jamiecollinson.com/blog/my-emacs-config/][Jamie Collinson]]
- [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][Jethro Kuan]]. Creator or ~org-roam~ and author of some great posts on note-taking. Not literal.
- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joost Diepenmat]]
- [[https://github.com/gjstein/emacs.d][Gregory Stein]]. Author of the excellent [[http://cachestocaches.com/][Caches to Caches]] blog.
- [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][Luca Cambiaghi]]
- [[https://config.phundrak.com/emacs][Lucien Cartier-Tilet]] (Spacemacs)
- [[https://github.com/isamert/dotfiles/blob/master/emacs/index.org][Isa Mert Gurbuz]]
  - Has a cool [[https://isamert.net/index.html][blog]] about org mode and other topics.
- [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Martin Foot]]
  - Has a very simple init file.
  - [[https://github.com/mfoo/dotfiles/blob/master/.emacs.d/config.org][.org file]]
- [[https://github.com/mpereira/.emacs.d][Murilo Pereira]].
  - Very well organized. The author has also written some excellent blog posts about Emacs.
- [[https://out-of-cheese-error.netlify.app/spacemacs-config][OutOfCheeseError]]
- [[https://protesilaos.com/dotemacs/][Protesilaos Stavrou]]
  - [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][here]] is the last commit before he abandoned ~use-package~ and ~straight~
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]. A legend in the Emacs community.
- [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit]].
  - Author of ~Memacs~, prolific blogger.
- [[https://github.com/sriramkswamy/dotemacs][Sriram Krishnaswamy]] ([[https://sriramkswamy.github.io/][website]])
  - [[https://sriramkswamy.github.io/dotemacs/][.org file]]
- [[https://github.com/sfromm/emacs.d#twitter][Stephen Fromm]]. Has an extended list of config files [[https://github.com/sfromm/emacs.d#inspiration][here]].
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]]
- [[https://www.tquelch.com/posts/emacs-config/#languages][Tim Quelch]]
- [[http://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html#orgbcdc8b2][Vianney Lebouteiller]]
- [[https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org#meta][Xuan Bi]].
- [[https://github.com/turbana/emacs-config][GitHub - turbana/emacs-config: My personal emac's configuration]]. Some potentially useful stuff on native comp, debugging, etc.
- [[https://github.com/creichert/dotfiles/blob/master/emacs/.emacs][dotfiles/.emacs at master · creichert/dotfiles · GitHub]]. Has detailed Gnus, Slack config.
- [[https://github.com/ianpan870102/yay-evil-emacs][yay-evil-emacs]]. slick design.
- [[https://github.com/rememberYou/.emacs.d][GitHub - rememberYou/.emacs.d: 🎉 Personal GNU Emacs configuration]]. Has a bunch of Reddit posts explaining how he uses the different packages.
- [[https://github.com/nkicg6/emacs-config/blob/master/config.org][emacs-config/config.org at master · nkicg6/emacs-config · GitHub]]. Found it while searching for org-ref.
- [[https://github.com/yiufung/dot-emacs/blob/master/init.el][dot-emacs/init.el at master · yiufung/dot-emacs · GitHub]]. Not literal. Lots of packages. Gnus, notmuch, Slack, etc. Author has great post on Anki.
- [[https://github.com/tshu-w/.emacs.d][GitHub - tshu-w/.emacs.d: My personal Emacs config, based on Spacemacs]]. Has nice note-taking config, with org-roam, org-ref, Zotero, etc (see [[https://github.com/tshu-w/.emacs.d/blob/master/lisp/lang-org.el][here]]).
- [[https://github.com/raxod502/radian/blob/e3aad124c8e0cc870ed09da8b3a4905d01e49769/emacs/radian.el][Radon Rosborough]]. Author of ~straight~ package manager.
- [[https://github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org][Gonçalo Santos]]. Author of ~org-noter~.
- [[https://github.com/tonyaldon/emacs.d/blob/master/init.el][Tony Aldon]]. Has some slick [[https://www.youtube.com/channel/UCQCrbWOFRmFYqoeou0Qv3Kg][videos]] on ~org-table~. Optimized key bindings.
- [[https://github.com/progfolio/.emacs.d/blob/master/init.org][Nicholas Vollmer]]. Maitantainer of ~elpaca~. I copied his ~org-habits~ config. Haven't yet looked at the rest but looks like there's plenty of valuable material.
- [[https://github.com/yantar92/emacs-config/blob/master/config.org#helm-org-ql][emacs-config/config.org at master · yantar92/emacs-config · GitHub]]. Focus on knowledge management with org. Lots of good stuff.
- [[https://github.com/xenodium/dotsies/blob/main/dots.org][Álvaro Ramírez]]. Also users Karabiner.
- [[https://github.com/karthink/.emacs.d][Karthik Chikmagalur]]. Has excellent blog posts on ~avy~, ~eshell~, ~re-builder~, etc.
- [[https://github.com/iqbalansari/dotEmacs][Iqbal Ansari]].
- [[https://www.danielclemente.com/emacs/confi.html][Daniel Clemente]].
- [[https://github.com/patrl][Patrick Elliott]]

* early-init
:PROPERTIES:
:ID:       F59230DF-14ED-44FF-B54B-4A6758C12D99
:END:

The contents of this code block are tangled to the ~early-init.el~ file.

#+begin_src emacs-lisp :tangle (print tlon-init-early-init-path)
;; recommended for straight/elpaca (github.com/radian-software/straight.el#getting-started)
(setq package-enable-at-startup nil)

(add-to-list 'default-frame-alist '(undecorated . t)) ; remove title bar
(add-to-list 'initial-frame-alist '(fullscreen . maximized)) ; maximize frame on startup

;; github.com/emacscollective/no-littering#native-compilation-cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (file-name-concat (getenv "HOME")
    ".config/emacs-profiles/var/eln-cache/")))
#+end_src

* startup
:PROPERTIES:
:ID:       9DBC455B-7ED4-422F-BE05-2FBB3548A86F
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:56]--[2021-10-20 Wed 19:59] =>  0:03
CLOCK: [2021-07-24 Sat 10:45]--[2021-07-24 Sat 10:56] =>  0:11
CLOCK: [2021-07-23 Fri 15:26]--[2021-07-23 Fri 15:58] =>  0:32
CLOCK: [2021-07-13 Tue 18:29]--[2021-07-13 Tue 18:47] =>  0:18
CLOCK: [2021-07-11 Sun 21:41]--[2021-07-11 Sun 22:14] =>  0:33
CLOCK: [2021-12-03 Fri 21:49]--[2021-12-03 Fri 21:56] =>  0:07
CLOCK: [2021-06-15 Tue 20:45]--[2021-06-15 Tue 20:52] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-01 Tue 21:00]--[2021-06-01 Tue 21:59] =>  0:59
CLOCK: [2021-05-18 Tue 09:22]--[2021-05-18 Tue 09:32] =>  0:10
CLOCK: [2021-05-14 Fri 15:45]--[2021-05-14 Fri 16:01] =>  0:00
CLOCK: [2021-04-27 Tue 22:10]--[2021-04-27 Tue 22:26] =>  0:16
CLOCK: [2021-03-31 Wed 10:10]--[2021-03-31 Wed 11:08] =>  0:58
CLOCK: [2021-03-30 Tue 15:21]--[2021-03-30 Tue 18:00] =>  2:39
CLOCK: [2021-03-30 Tue 09:43]--[2021-03-30 Tue 11:46] =>  2:03
CLOCK: [2021-03-22 Mon 21:40]--[2021-03-22 Mon 21:49] =>  0:09
CLOCK: [2021-03-20 Sat 13:16]--[2021-03-20 Sat 13:30] =>  0:14
CLOCK: [2021-03-04 Thu 10:10]--[2021-03-04 Thu 10:37] =>  0:27
CLOCK: [2021-03-02 Tue 21:12]--[2021-03-02 Tue 21:50] =>  0:38
CLOCK: [2021-03-01 Mon 10:11]--[2021-03-01 Mon 10:28] =>  0:17
CLOCK: [2021-02-23 Tue 10:45]--[2021-02-23 Tue 10:54] =>  0:09
CLOCK: [2021-02-04 Thu 19:36]--[2021-02-04 Thu 20:54] =>  1:18
CLOCK: [2021-02-04 Thu 18:40]--[2021-02-04 Thu 19:33] =>  0:53
CLOCK: [2021-02-04 Thu 16:40]--[2021-02-04 Thu 18:35] =>  1:55
CLOCK: [2021-02-04 Thu 12:27]--[2021-02-04 Thu 12:44] =>  0:17
CLOCK: [2021-02-04 Thu 12:19]--[2021-02-04 Thu 12:27] =>  0:08
CLOCK: [2021-02-04 Thu 09:30]--[2021-02-04 Thu 10:49] =>  1:19
CLOCK: [2021-02-03 Wed 22:09]--[2021-02-03 Wed 22:46] =>  0:37
CLOCK: [2021-02-03 Wed 20:24]--[2021-02-03 Wed 20:33] =>  0:09
CLOCK: [2021-02-03 Wed 18:27]--[2021-02-03 Wed 20:00] =>  1:33
CLOCK: [2021-02-03 Wed 19:43]--[2021-02-03 Wed 19:43] =>  0:00
CLOCK: [2021-04-08 Thu 13:56]--[2021-04-08 Thu 14:12] =>  0:16
CLOCK: [2021-04-03 Sat 19:06]--[2021-04-03 Sat 19:31] =>  0:25
:END:

Adapted from [[https://github.com/sfromm/emacs.d#startup][here]].

#+begin_src emacs-lisp :results silent
;;; init.el --- Init File -*- lexical-binding: t -*-

(defvar ps/core-start-time (current-time))

(defun ps/report-startup-time ()
  "Report startup time."
  (interactive)
  (run-with-timer 0.1 nil (lambda () (message "Emacs is ready, finished loading after %.03fs."
                                       (float-time (time-subtract after-init-time before-init-time))))))

(add-hook 'elpaca-after-init-hook #'ps/report-startup-time)
#+end_src

** macros
:PROPERTIES:
:ID:       E120C28B-458A-4F30-8C02-389B3351AFC4
:END:

#+begin_src emacs-lisp :results silent
;; From Gonçalo Santos (github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org#helpers)
(defmacro lambda! (&rest body)
  "A shortcut for inline interactive lambdas."
  (declare (doc-string 1))
  `(lambda () (interactive) ,@body))
#+end_src

* package management
:PROPERTIES:
:ID:       0A714FC1-D562-4E41-A000-D5F369EBEBBD
:END:

** elpaca
:PROPERTIES:
:ID:       9CF1D7BB-62B0-4F7C-BB5A-A695BFD4D58D
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 19:04]--[2023-04-08 Sat 21:29] =>  2:25
CLOCK: [2023-04-05 Wed 22:53]--[2023-04-06 Thu 00:04] =>  1:11
:END:

/[[https://github.com/progfolio/elpaca][elpaca]] is a package manager that supports asynchronous installation of packages./
:PROPERTIES:
:ID:       4EB0A831-1B7D-4C7E-AE4B-6A2DE27FFD87
:END:

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; reddit.com/r/emacs/comments/12om829/comment/jgj5wcg/
(defun elpaca-use-package--maybe (fn &rest args)
  "Temporarily disable `elpaca-use-package-mode' for FN with ARGS if :elpaca nil."
  (let* ((pargs (cdr-safe args))
         (declared (member :elpaca pargs)))
    (if (or (cadr declared) (and (not declared) elpaca-use-package-by-default))
        (apply fn args)
      (setq args (cl-loop for i below (length args)
                          for arg = (nth i args)
                          if (eq arg :elpaca) do (cl-incf i)
                          else collect arg))
      (elpaca-use-package-mode -1)
      (unwind-protect
          (apply fn args)
        (elpaca-use-package-mode 1)))))

;; (toggle-debug-on-error) ; uncomment when debugging
#+end_src

** use-package
:PROPERTIES:
:ID:       C53EA5F9-B256-480E-9BCB-7AD2D0D5DDC2
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 14:44]--[2022-05-06 Fri 15:06] =>  0:22
CLOCK: [2021-08-02 Mon 21:30]--[2021-08-02 Mon 21:32] =>  0:02
CLOCK: [2021-06-13 Sun 18:51]--[2021-06-13 Sun 18:53] =>  0:02
CLOCK: [2021-05-14 Fri 22:50]--[2021-05-15 Sat 00:20] =>  1:30
CLOCK: [2021-05-15 Sat 11:32]--[2021-05-15 Sat 11:50] =>  0:18
CLOCK: [2021-04-03 Sat 19:35]--[2021-04-03 Sat 20:18] =>  0:43
:END:

/[[https://github.com/jwiegley/use-package][use-package]] is a package organizer./

- If statistics is enabled (see below), use package can produce very useful reports. Invoke ~use-package-report~, then press ~S~ with point on the 'Time' column to sort the packages by time; pressing the key again reverses the sort order.
- [[https://jwiegley.github.io/use-package/keywords/][Keywords — use-package]]
- Useful Reddit thread: [[https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/][use-package Best Practices : emacs]]
- Note that you can expand the ~use-package~ macro and see what it will do by invoking ~pp-macroexpand-last-sexp~ with point at the end of the relevant sexp.
- To use ~use-package~ with /features/ rather than /packages/, you can check whether something is a feature with ~featurep~.
- Sometimes we want to defer the loading of a package, but not indefinitely. I find it useful to rely on a variety of conditional deferrals, depending on the needs of the particular case:
  - /time deferral/: we use ~:defer~ followed by a number, such that when Emacs has been idle for this number of seconds, the package will load.
  - /command deferral/: we use ~:general~ to bind a key sequence to a command belonging to the package we want to load. The package will load when the key sequence  is executed.
  - /hook deferral/: we use ~:hook~ to create a hook that calls a package function when some event occurs. Upon the occurrence of this event, typically the loading of a major mode, the package will load.
  - /package deferral/: we use ~:after~ to load the package after some other package which itself has been conditionally deferred (using one of the other methods above). Note that if  ~use-package-always-defer~ is set to ~t~, you need to add ~demand t~ to the declaration.

#+begin_src emacs-lisp :results silent
;; github.com/raxod502/radian/blob/develop/emacs/radian.el
(defmacro use-feature (name &rest args)
  "Like `use-package' but accounting for asynchronous installation.
  NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :elpaca nil
     ,@args))

(elpaca elpaca-use-package
        (elpaca-use-package-mode)
        (setq elpaca-use-package-by-default t))

(elpaca-wait)

(setq use-package-verbose t)
(setq use-package-compute-statistics t)
(setq use-package-always-ensure nil)
(setq use-package-always-defer t)
(setq use-package-hook-name-suffix nil)       ; use real name for hooks, i.e. do not omit the `-hook' bit
(setq use-package-minimum-reported-time 0.1) ; report if loading a package takes longer than 100 ms
#+end_src

*** use-package-ensure-system-package
:PROPERTIES:
:ID:       5C17424A-4950-4745-B7FD-F0CACEB48AFB
:END:

#+begin_src emacs-lisp :results silent
(use-package use-package-ensure-system-package
  :demand t)
#+end_src

* foundational
:PROPERTIES:
:ID:       B2CADEA2-F8B7-4E8E-8FB0-D6B59658933D
:END:

** general
:PROPERTIES:
:ID:       70C622E0-FAC7-4AB1-841F-36437858218C
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 18:46]--[2021-07-25 Sun 18:56] =>  0:10
:END:

/[[https://github.com/noctuid/general.el][general]] supports more convenient key definitions./

#+begin_src emacs-lisp :results silent
(use-package general
  :demand t
  :config
  (setq general-describe-priority-keymaps '(local global org-mode-map))
  (setq general-describe-keybinding-sort-function #'general-sort-by-car)
  (general-override-mode)
  (general-auto-unbind-keys)

  :bind
  ("C-A-b" . 'general-describe-keybindings))
(elpaca-wait)
#+end_src

** no-littering
:PROPERTIES:
:ID:       21B40C49-BBD2-4E04-871B-BB578C92F71B
:END:

/[[https://github.com/emacscollective/no-littering][no-littering]] keeps ~.emacs.d~ clean./

#+begin_src emacs-lisp :results silent
(use-package no-littering
  :demand t
  :init
  ;; these directories should be shared across profiles, so there should
  ;; be only one `var' and one `etc' directory in `emacs-profiles'
  ;; rather than a pair of such directories for each profile
  (setq no-littering-etc-directory (file-name-concat ps/dir-chemacs-profiles "etc/"))
  (setq no-littering-var-directory (file-name-concat ps/dir-chemacs-profiles "var/"))

  :config
  ;; github.com/emacscollective/no-littering#auto-save-settings
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** ns-win
:PROPERTIES:
:ID:       3411777E-E554-4EF3-9389-63242D4F3072
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/ns-win)
(use-feature ns-win
  :demand t
  :config
  (setq mac-option-modifier 'meta)
  (setq mac-control-modifier 'control)
  (setq mac-command-modifier 'hyper)
  (setq mac-function-modifier 'none)
  (setq mac-right-option-modifier 'none)
  (setq mac-right-control-modifier 'super)
  (setq mac-right-command-modifier 'alt))
#+end_src

** iso-transl
:PROPERTIES:
:ID:       0A62A6C8-D3D8-4960-A809-35B60A479D2B
:END:

#+begin_src emacs-lisp
(use-feature iso-transl
  :demand t
  :config
  (setq iso-transl-char-map nil) ; emacs.stackexchange.com/questions/17508/

  (unless (version< emacs-version "29.0")
    (let ((map key-translation-map))
      (keymap-unset map "A-c")
      (keymap-unset map "A-o")
      (keymap-unset map "A-u")
      (keymap-unset map "A-m")
      (keymap-unset map "A-x"))))
#+end_src

** el-patch
:PROPERTIES:
:ID:       554FC4A9-4993-495F-A154-DBC01A11747D
:END:
:LOGBOOK:
CLOCK: [2021-10-05 Tue 12:20]--[2021-10-05 Tue 13:11] =>  0:51
CLOCK: [2021-10-04 Mon 18:59]--[2021-10-04 Mon 19:31] =>  0:32
:END:


/[[https://github.com/raxod502/el-patch][el-patch]] customizes the behavior of Emacs Lisp functions and be notified when a function so customized changes./

#+begin_src emacs-lisp :results silent
(use-package el-patch
  :demand t
  :config
  (setq el-patch-enable-use-package-integration t))
#+end_src

** hydra
:PROPERTIES:
:ID:       00E7E217-E02E-489B-968D-E49431FD5ECC
:END:

:LOGBOOK:
CLOCK: [2022-07-15 Fri 11:19]--[2022-07-15 Fri 12:01] =>  0:42
CLOCK: [2021-07-23 Fri 12:19]--[2021-07-23 Fri 12:36] =>  0:17
CLOCK: [2021-06-25 Fri 21:36]--[2021-06-25 Fri 21:37] =>  0:01
CLOCK: [2021-03-30 Tue 08:50]--[2021-03-30 Tue 09:02] =>  0:12
:END:
/[[https://github.com/abo-abo/hydra][hydra]] makes Emacs bindings that stick around./

#+begin_src emacs-lisp :results silent
(use-package hydra
  :demand t

  :general
  ("H-d" 'hydra-dired/body
   "H-l" 'hydra-org-notes/body
   "H-o" 'hydra-major-modes/body
   "M-t" 'hydra-straight/body
   "M-y" 'hydra-yasnippet/body))
(elpaca-wait)
#+end_src

*** resources
:PROPERTIES:
:ID:       A6CE7CD9-B940-4221-9BE4-2BF0776D7637
:END:

https://oremacs.com/2015/02/04/pre-hydra-post/
https://sriramkswamy.github.io/dotemacs/#orgheadline141

*** major modes
:PROPERTIES:
:ID:       E6290A57-7035-4ADB-89F6-9CCADF2D74DB
:END:
:LOGBOOK:
CLOCK: [2021-04-22 Thu 22:08]--[2021-04-22 Thu 22:23] =>  0:15
CLOCK: [2021-04-22 Thu 17:57]--[2021-04-22 Thu 18:21] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-major-modes
  (:exit t
         :idle 0.5)
  "Major modes"
  ("a" (ps/switch-to-most-recent-buffer-in-mode 'org-agenda-mode) "Agenda")
  ("c" (ps/switch-to-most-recent-buffer-in-mode 'calendar-mode) "Calendar")
  ("d" (ps/switch-to-most-recent-buffer-in-mode 'dired-mode) "Dired")
  ("e" (ps/switch-to-most-recent-buffer-in-mode 'elfeed-search-mode) "Elfeed")
  ("f" (ps/switch-to-most-recent-buffer-in-mode 'fundamental-mode) "Fundamental")
  ("h" (ps/switch-to-most-recent-buffer-in-mode 'helpful-mode) "Helpful")
  ("i" (ps/switch-to-most-recent-buffer-in-mode 'Info-mode) "Info")
  ("j" (ps/switch-to-most-recent-buffer-in-mode 'ledger-mode) "Ledger")
  ("k" (ps/switch-to-most-recent-buffer-in-mode 'slack-message-buffer-mode) "Slack")
  ("l" (ps/switch-to-most-recent-buffer-in-mode 'emacs-lisp-mode) "Emacs Lisp")
  ("n" (ps/switch-to-most-recent-buffer-in-mode 'snippet-mode) "Snippet")
  ("o" (ps/switch-to-most-recent-buffer-in-mode 'org-mode) "Org")
  ("p" (ps/switch-to-most-recent-buffer-in-mode 'pdf-view-mode) "PDF")
  ("s" (ps/switch-to-most-recent-buffer-in-mode 'eshell-mode) "Eshell")
  ("z" (ps/switch-to-most-recent-buffer-in-mode 'special-mode) "Special")
  ("t" (ps/switch-to-most-recent-buffer-in-mode 'twittering-mode) "Twittering")
  ("w" (ps/switch-to-most-recent-buffer-in-mode 'eww-mode) "Eww")
  ("x" (ps/switch-to-most-recent-buffer-in-mode 'mhtml-mode) "XHTML+")
  ("y" (ps/switch-to-most-recent-buffer-in-mode 'python-mode) "Python"))
#+end_src

*** files
:PROPERTIES:
:ID:       39E06A29-2AEC-4EB4-A0D0-7E1A64832B18
:END:
:LOGBOOK:
CLOCK: [2022-10-01 Sat 18:06]--[2022-10-01 Sat 18:14] =>  0:08
CLOCK: [2021-07-13 Tue 18:20]--[2021-07-13 Tue 18:57] =>  0:37
CLOCK: [2021-03-31 Wed 11:21]--[2021-03-31 Wed 11:35] =>  0:14
CLOCK: [2021-03-07 Sun 11:06]--[2021-03-07 Sun 11:55] =>  0:49
:END:

#+begin_src emacs-lisp :results silent
(general-define-key
 "H-M-s-." (lambda! (ps/visit-file-or-switch-to-buffer ps/file-inbox-mobile))
 "H-M-s-," (lambda! (ps/visit-file-or-switch-to-buffer ps/file-inbox-desktop))
 "H-M-s-a" (lambda! (ps/org-agenda-switch-to-agenda-current-day))
 "H-M-s-b" (lambda! (ps/visit-file-or-switch-to-buffer ps/dir-tlon-biblioteca-altruismo-eficaz))
 "H-M-s-c" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-config))
 "H-M-s-d" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-tlon-docs))
 "H-M-s-h" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-tlon-ledger))
 "H-M-s-i" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-anki))
 "H-M-s-j" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-ledger))
 "H-M-s-k" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-karabiner))
 "H-M-s-m" 'view-echo-area-messages
 "H-M-s-o" (lambda! (switch-to-buffer "*notes*"))
 "H-M-s-q" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-quotes))
 "H-M-s-r" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-calendar))
 "H-M-s-s" (lambda! (switch-to-buffer "*scratch*"))
 "H-M-s-v" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-films))
 "H-M-s-w" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-work))
 "H-M-s-z" (lambda! (ps/visit-file-or-switch-to-buffer ps/file-variables)))
#+end_src

*** org headings
:PROPERTIES:
:ID:       FBC1D388-0EFA-452D-828D-44724CF99191
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:40]--[2021-04-03 Sat 10:41] =>  0:01
CLOCK: [2021-04-03 Sat 10:24]--[2021-04-03 Sat 10:33] =>  0:09
CLOCK: [2021-03-07 Sun 11:55]--[2021-03-07 Sun 12:13] =>  0:18
CLOCK: [2021-03-07 Sun 11:01]--[2021-03-07 Sun 11:06] =>  0:05
CLOCK: [2021-02-24 Wed 16:02]--[2021-02-24 Wed 16:26] =>  0:24
:END:

**** notes.org
:PROPERTIES:
:ID:       C3A44EA2-5523-45DD-8100-6228D80ECAC8
:END:
:LOGBOOK:
CLOCK: [2021-04-03 Sat 10:41]--[2021-04-03 Sat 11:20] =>  0:39
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes
  (:exit t
         :idle 0.5)
  "Org headings"
  ("SPC" (ps/org-id-goto "B67C920B-D855-4A27-A35C-1DAC56580DA7") "Anki habit")
  ("i" (ps/org-id-goto "50BAC203-6A4D-459B-A6F6-461E6908EDB1") "Anki")
  ("p" (ps/org-id-goto "0070312F-6233-4BED-98F4-A2BAAEE8DAFF") "audiobooks")
  ("b" (ps/org-id-goto "7A788F19-30F5-4504-B47F-CE693AF3EA7E") "books")
  ("u" (ps/org-id-goto "78577411-554E-4EEC-B669-C014A9581540") "Current book")
  ("r" (ps/org-id-goto "1C5DCC5A-DA18-4CBD-8E2E-205766A656D6") "Documentaries")
  ("z" (ps/org-id-goto "8F8E5495-A0D8-451A-B1F1-0A8706CBF6A0") "eablogs.net")
  ("e" (ps/org-id-goto "96BBA849-B4CF-41C0-ABA3-A5D901BCDB18") "Email")
  ("d" (ps/org-id-goto "6504C81B-28F0-44C3-BFC0-2F3E648974F0") "Feeds")
  ("v" (ps/org-id-goto "E821F19E-C619-4895-A084-54D0A2772BAE") "films")
  ("f" (ps/org-id-goto "EB812B59-BBFB-4E06-865A-ACF5A4DE5A5C") "finance")
  ("/" (ps/org-id-goto "D9D71BF0-6BD6-40A5-9896-E58C7D9556B7") "inbox")
  ("m" (ps/org-id-goto "E65E393D-8694-4E23-994E-BA59A8063FCF") "Keyboard Maestro")
  ("k" (ps/org-id-goto "6F0A4889-C303-4930-8512-757AAD310535") "Khan Academy")
  ("l" (ps/org-id-goto "C308562B-222E-47E2-9A5F-B31EDB29569A") "Leonardo")
  ("," (ps/org-id-goto "E1C1F691-8358-4DDF-AC71-F46B883411BB") "morning routine")
  ("." (ps/org-id-goto "ADAA1E78-2904-4EF4-938C-F599A5C90822") "night routine")
  ("c" (ps/org-id-goto "7CE82ABB-A23F-41F6-A29E-0B95553A8FEE") "podcasts")
  ("s" (ps/org-id-goto "3513061C-5868-4EBC-9F77-9814AB776011") "Slack")
  ("j" (ps/org-id-goto "356B7595-EC5B-4DF4-949C-A637537128E4") "sleep")
  ("y" (ps/org-id-goto "FBDB7FC0-7650-48A0-933D-AE9606C2B621") "Spotify")
  ("t" (hydra-org-work/body) "tlon")
  ("n" (ps/org-id-goto "9696939D-A8B7-4179-A5C8-FEBB017DC9EF") "Telegram")
  ("q" (ps/org-id-goto "14915C82-8FF3-460D-83B3-148BB2CA7B7E") "YouTube")
  ;; ("RET'" (ps/org-id-goto "") "")
  ;; ("TAB'" (ps/org-id-goto "") "")
  ;; ("='" (ps/org-id-goto "") "")
  ;; ("-'" (ps/org-id-goto "") "")
  ;; ("('" (ps/org-id-goto "") "")
  ("H-a" (ps/org-id-notes-with-clock "a"))
  ("H-b" (ps/org-id-notes-with-clock "b"))
  ("H-c" (ps/org-id-notes-with-clock "c"))
  ("H-d" (ps/org-id-notes-with-clock "d"))
  ("H-e" (ps/org-id-notes-with-clock "e"))
  ("H-f" (ps/org-id-notes-with-clock "f"))
  ("H-g" (ps/org-id-notes-with-clock "g"))
  ("H-h" (ps/org-id-notes-with-clock "h"))
  ("H-i" (ps/org-id-notes-with-clock "i"))
  ("H-j" (ps/org-id-notes-with-clock "j"))
  ("H-k" (ps/org-id-notes-with-clock "k"))
  ("H-l" (ps/org-id-notes-with-clock "l"))
  ("H-m" (ps/org-id-notes-with-clock "m"))
  ("H-n" (ps/org-id-notes-with-clock "n"))
  ("H-o" (ps/org-id-notes-with-clock "o"))
  ("H-p" (ps/org-id-notes-with-clock "p"))
  ("H-q" (ps/org-id-notes-with-clock "q"))
  ("H-r" (ps/org-id-notes-with-clock "r"))
  ("H-s" (ps/org-id-notes-with-clock "s"))
  ("H-t" (ps/org-id-notes-with-clock "t"))
  ("H-u" (ps/org-id-notes-with-clock "u"))
  ("H-v" (ps/org-id-notes-with-clock "v"))
  ("H-w" (ps/org-id-notes-with-clock "w"))
  ("H-x" (ps/org-id-notes-with-clock "x"))
  ("H-y" (ps/org-id-notes-with-clock "y"))
  ("H-z" (ps/org-id-notes-with-clock "z"))
  ("H-," (ps/org-id-notes-with-clock ","))
  ("H-." (ps/org-id-notes-with-clock "."))
  ("H-/" (ps/org-id-notes-with-clock "/"))
  ("H-=" (ps/org-id-notes-with-clock "="))
  ("H--" (ps/org-id-notes-with-clock "-"))
  ("H-(" (ps/org-id-notes-with-clock "("))
  ("H-'" (ps/org-id-notes-with-clock "'"))
  ("H-SPC" (ps/org-id-notes-with-clock "SPC"))
  ("H-RET" (ps/org-id-notes-with-clock "RET"))
  ("H-TAB" (ps/org-id-notes-with-clock "TAB"))
  )

(defhydra hydra-dired-tlon
  (:exit t)
  "Org Headings: Tlön"
  ("d" (ps/org-id-goto "") "LBDLH")
  ("c" (ps/org-id-goto "") "core")
  ("f" (ps/org-id-goto "") "fede")
  ("g" (ps/org-id-goto "") "Dropbox: GPE")
  ("h" (ps/org-id-goto "") "Dropbox: HEAR")
  ("l" (ps/org-id-goto "") "Dropbox: leo")
  ("r" (ps/org-id-goto "") "Dropbox: RAE")
  ("s" (ps/org-id-goto "") "Dropbox: FM")
  ("t" (ps/org-id-goto "") "Dropbox: tlon")
  ("u" (ps/org-id-goto "") "Dropbox: EAN"))
#+end_src



#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"

  )

  (defun ps/org-id-notes-with-clock (key)
  (funcall (intern (concat "hydra-org-notes/lambda-" key "-and-exit")))
  (org-clock-in))
#+end_src

***** clock only
:PROPERTIES:
:ID:       E549DF73-C724-4FE8-B5BB-F56147F919A1
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-notes-only-clock
  (:exit t
         :idle 0.5)
  "Org headings"
  ("a" (ps/org-id-notes-only-clock "a"))
  ("b" (ps/org-id-notes-only-clock "b"))
  ("c" (ps/org-id-notes-only-clock "c"))
  ("d" (ps/org-id-notes-only-clock "d"))
  ("e" (ps/org-id-notes-only-clock "e"))
  ("f" (ps/org-id-notes-only-clock "f"))
  ("g" (ps/org-id-notes-only-clock "g"))
  ("h" (ps/org-id-notes-only-clock "h"))
  ("i" (ps/org-id-notes-only-clock "i"))
  ("j" (ps/org-id-notes-only-clock "j"))
  ("k" (ps/org-id-notes-only-clock "k"))
  ("l" (ps/org-id-notes-only-clock "l"))
  ("m" (ps/org-id-notes-only-clock "m"))
  ("n" (ps/org-id-notes-only-clock "n"))
  ("o" (ps/org-id-notes-only-clock "o"))
  ("p" (ps/org-id-notes-only-clock "p"))
  ("q" (ps/org-id-notes-only-clock "q"))
  ("r" (ps/org-id-notes-only-clock "r"))
  ("s" (ps/org-id-notes-only-clock "s"))
  ("t" (ps/org-id-notes-only-clock "t"))
  ("u" (ps/org-id-notes-only-clock "u"))
  ("v" (ps/org-id-notes-only-clock "v"))
  ("w" (ps/org-id-notes-only-clock "w"))
  ("x" (ps/org-id-notes-only-clock "x"))
  ("y" (ps/org-id-notes-only-clock "y"))
  ("z" (ps/org-id-notes-only-clock "z"))
  ("," (ps/org-id-notes-only-clock ","))
  ("." (ps/org-id-notes-only-clock "."))
  ("/" (ps/org-id-notes-only-clock "/"))
  ("=" (ps/org-id-notes-only-clock "="))
  ("-" (ps/org-id-notes-only-clock "-"))
  ("(" (ps/org-id-notes-only-clock "("))
  ("'" (ps/org-id-notes-only-clock "'"))
  ("SPC" (ps/org-id-notes-only-clock "SPC"))
  ("RET" (ps/org-id-notes-only-clock "RET"))
  ("TAB" (ps/org-id-notes-only-clock "TAB"))
  )
#+end_src

#+begin_src emacs-lisp :results silent
;; save-excursion wasn't restoring point, so using this custom
;; function, from stackoverflow.com/a/24283996/4479455
(defmacro ps/save-excursion (&rest forms)
  (let ((old-point (gensym "old-point"))
        (old-buff (gensym "old-buff")))
    `(let ((,old-point (point))
           (,old-buff (current-buffer)))
       (prog1
           (progn ,@forms)
         (unless (eq (current-buffer) ,old-buff)
           (switch-to-buffer ,old-buff))
         (goto-char ,old-point)))))
(defun ps/org-id-notes-only-clock (key)
  (ps/save-excursion
   (funcall (intern (concat "hydra-org-notes/lambda-" key "-and-exit")))
   (org-clock-in)
   ))
#+end_src

**** work
:PROPERTIES:
:ID:       47C81DBE-9ACA-4AAA-9942-6FEC4A3483C6
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-work
  (:hint nil
  :idle 0
  :color blue)
  "Tlön dashboard"
  ;; ("a" (ps/org-id-goto "") "")
  ;; ("b" (ps/org-id-goto "") "")
  ;; ("c" (ps/org-id-goto "") "")
  ("r" (ps/org-id-goto "15A1803F-EAA7-4FB9-BA77-74154EB8CA5D") "RAE" :column "Main")
  ("b" (ps/org-id-goto "DFE45995-7935-4F19-80DA-FB9C11FE9E24") "BAE" :column "Main")
  ("d" (ps/org-id-goto "CE8A5497-1BF9-4340-9853-5ADA4605ECB5") "LBDLHD" :column "Main")
  ("n" (ps/org-id-goto "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC") "EAN" :column "Main")
  ("i" (ps/org-id-goto "6C7F53ED-B43E-401D-BEEA-DB38CAE367FD") "EAI" :column "Other")
  ("w" (ps/org-id-goto "72EE8B25-D847-49F5-B6D9-E3B67BEB071A") "PW" :column "Other")
  ("v" (ps/org-id-goto "7333FEC5-90A7-423D-9C45-2D5333593F87") "Samotsvety" :column "Other")
  ("x" (ps/org-id-goto "E13198C9-8F3F-46D8-B052-6F6ADF6B4D99") "Misc" :column "Other")
  ("a" (ps/org-id-goto "830A5DA5-AB9A-483A-B8AC-C5CCBD3A02FD") "EA Archive" :column "Someday")
  ("a" (ps/org-id-goto "177F4865-3B25-41C0-999B-B9B67DFAC110") "EA Nomad" :column "Someday")
  ("h" (ps/org-id-goto "1BBBA5F1-11FA-4C7B-8D08-5DC84233B8E2") "HEAR" :column "On hold")
  ("" (ps/org-id-goto "9066D77E-7F2B-4176-9533-243060F11276") "FM" :column "Done")
  ("" (ps/org-id-goto "DA0B3751-6B25-4F53-AE27-7B6CBC29B6C1") "GPE" :column "Done")
  ("" (ps/org-id-goto "2514AA39-CFBF-4E5A-B18E-147497E31C8F") "LP" :column "Done")
  ("" (ps/org-id-goto "470C263E-40F8-4567-83BC-85DE6E5F8D5A") "RCGs" :column "Done")
  ("" (ps/org-id-goto "AE8F5AD4-B85A-4EE2-8A94-AA7B2AFF3E7F") "Regranting" :column "Done")
  ("e" (ps/org-id-goto "EA0B83B2-8A4A-417A-8318-56B4EDC75FF5") "email" :column "Comms")
  ("s" (ps/org-id-goto "A45FEDFB-1928-4571-97F3-03D20A78883C") "slack" :column "Comms")
  ("t" (ps/org-id-goto "DF643B0F-1956-44AB-90DD-749D849C285D") "telegram" :column "Comms")
  ("f" (ps/org-id-goto "AED9330C-1673-4669-A367-4B87614965F6") "fede" :column "Fede")
  ("F" (tlon-core-meeting-with-fede) "fede: meeting" :column "Fede")
  ("H-f" (ps/org-id-goto "EB5FC062-E46F-4C1F-930F-F2CC710F852D") "fede: tareas" :column "Fede")
  ("l" (ps/org-id-goto "4EF48AB3-44B4-4791-BDFC-537F3B636FDA") "leo" :column "Leo")
  ("L" (tlon-core-meeting-with-leo) "leo: meeting" :column "Leo")
  ("H-l" (ps/org-id-goto "E5777AB0-DC81-40CB-8D03-77D6F111AA2E") "leo: tareas" :column "Leo")
  ("RET" (ps/org-id-goto "843EE71C-4D50-4C2F-82E6-0C0AA928C72A") "Home" :column "")
  )

(defhydra hydra-org-work-with-clock
  (:exit t
         :idle 0.5)
  "Org headings"

  )
#+end_src

**** config.org
:PROPERTIES:
:ID:       F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78
:END:
:LOGBOOK:
CLOCK: [2021-12-04 Sat 15:05]--[2021-12-04 Sat 15:07] =>  0:02
CLOCK: [2021-07-28 Wed 20:56]--[2021-07-28 Wed 21:07] =>  0:11
CLOCK: [2021-06-22 Tue 12:34]--[2021-06-22 Tue 12:54] =>  0:20
CLOCK: [2021-03-16 Tue 11:23]--[2021-03-16 Tue 11:26] =>  0:03
CLOCK: [2021-03-16 Tue 11:13]--[2021-03-16 Tue 11:19] =>  0:06
CLOCK: [2021-03-15 Mon 14:27]--[2021-03-15 Mon 14:51] =>  0:24
:END:

#+begin_src emacs-lisp :results silent
(defhydra hydra-org-config
  (:exit 1)
  "Org headings: config.org"
  ("c" (ps/org-id-goto "50FAD2F3-E501-408E-A9A2-8358FAA87C1C") "Calc")
  ("d" (ps/org-id-goto "617F5323-6518-4751-948B-3E8032D93130") "Dired")
  ("e" (ps/org-id-goto "FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5") "Elfeed")
  ("f" (ps/org-id-goto "B29F4586-2B8D-41FE-82DE-FEDCD863C74B") "Files & buffers")
  ("g" (ps/org-id-goto "AACAE0F4-0B25-475B-831B-3F1E91E6349D") "Graveyard")
  ("h" (hydra-org-config-hydra/body) "Hydra")
  ("i" (ps/org-id-goto "A7940400-DD17-4B0B-A9B2-565A207D680C") "Introduction")
  ("k" (ps/org-id-goto "4373E661-B19D-4E6C-B7DE-C2A26619A515") "Wiki")
  ("l" (ps/org-id-goto "DE6D2307-9EBD-4E0F-B873-003C9813CA27") "Display")
  ("m" (ps/org-id-goto "E83EC00B-0C94-44CD-9EC0-355992C99234") "Completion ")
  ("n" (ps/org-id-goto "179BB021-8B2A-4BF0-B3AA-43AF5A212D4B") "Text manipulation")
  ("o" (hydra-org-config-org/body) "Org")
  ("p" (ps/org-id-goto "7F0CBD06-FDB3-4889-91CE-D8A25D4F2613") "Help")
  ("s" (ps/org-id-goto "9FDBBF3E-724F-4402-9DDB-F9349F65AB0E") "Search")
  ("t" (ps/org-id-goto "1E8F4417-5D5F-4406-BB70-AA272F714EF2") "Text movement")
  ("u" (ps/org-id-goto "AA460F4A-4035-4C96-A3A1-078A43F7892D") "user-init")
  ("v" (ps/org-id-goto "10E891D3-9DF5-472A-8E3C-1DE30EE8C81F") "Variables")
  ("w" (ps/org-id-goto "7E9A81E0-CAEB-4029-AD2C-B2416439FCDA") "Windows & frames")
  ("y" (ps/org-id-goto "6405B8E7-6612-4D71-8C2C-A51F8808F4C6") "Yasnippets"))

(defhydra hydra-org-config-hydra
  (:exit 1)
  "Org headings: config.org > hydra"
  ("c" (ps/org-id-goto "F19DA0AC-B303-4A6B-8B4E-6E94FC98BC78") "Hydra config")
  ("e" (ps/org-id-goto "CC88D9BE-6617-4D53-BCCF-02097C2A81E1") "Hydra wiki entries")
  ("f" (ps/org-id-goto "39E06A29-2AEC-4EB4-A0D0-7E1A64832B18") "Hydra files")
  ("h" (ps/org-id-goto "00E7E217-E02E-489B-968D-E49431FD5ECC") "Hydra main")
  ("n" (ps/org-id-goto "C3A44EA2-5523-45DD-8100-6228D80ECAC8") "Hydra notes")
  ("o" (ps/org-id-goto "E6290A57-7035-4ADB-89F6-9CCADF2D74DB") "Hydra mode buffers")
  ("r" (ps/org-id-goto "F6AA197E-73A7-4688-986F-4A1D583BBA99") "Hydra org ratings")
  ("s" (ps/org-id-goto "40207396-12B9-4374-9341-713E88772275") "Hydra Straight")
  ("w" (ps/org-id-goto "B7B8956F-08D9-49E0-873C-4513F6FD44B8") "Hydra wiki notes")
  ("y" (ps/org-id-goto "5CC3B9AA-629B-407A-899D-529E66A7D057") "Hydra yasnippets"))

(defhydra hydra-org-config-org
  (:exit 1)
  "Org headings: config.org > org"
  ("a" (ps/org-id-goto "E03F4142-C90D-4550-8990-15391E27AD77") "org-agenda")
  ("b" (ps/org-id-goto "52C959E4-54F4-4499-AE3A-5251F6337FA0") "org key bindings")
  ("c" (ps/org-id-goto "14F93A83-0BE7-42E3-891E-F6806192296B") "org-capture")
  ("m" (ps/org-id-goto "2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17") "org-roam")
  ("n" (ps/org-id-goto "A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7") "org-noter")
  ("o" (ps/org-id-goto "268B60E4-708C-4372-A59D-5DD876E493CA") "org-mode")
  ("f" (ps/org-id-goto "35FB5BB5-6552-48C6-983A-F90011CCA908") "org-ref")
  ("r" (ps/org-id-goto "3FAE7C0D-FB22-4175-A0A4-FFA392539743") "org-refile")
  ("t" (ps/org-id-goto "8AF25840-AC38-4FF7-A45F-F01B96C5DF5A") "org-cite")
  ("x" (ps/org-id-goto "EC73B84D-530E-4179-BB67-F19110A543DF") "org-roam-bibtex"))
#+end_src

*** dired
:PROPERTIES:
:ID:       8AD794CB-0A81-4D36-BEAC-0F85F3B34831
:END:

:PROPERTIES:
:ID:       D71128ED-F3CC-43E1-8C8F-8938BDE9DE16
:END:
#+begin_src emacs-lisp :results silent
(defhydra hydra-dired
  (:exit t)
  "Dired folders"
  ("a" (hydra-dired-google-drive/body) "apps")
  ("b" (dired ps/dir-bibliography) "bibliography")
  ("d" (dired ps/dir-dotfiles) "dotfiles")
  ("e" (dired ps/dir-emacs) "Emacs")
  ("i" (dired ps/dir-anki) "Anki")
  ("j" (dired ps/dir-health) "Health")
  ("k" (dired ps/dir-PW) "PW")
  ("m" (hydra-dired-music/body) "Music")
  ("n" (dired ps/dir-notes) "Notes")
  ("o" (dired ps/dir-google-drive) "Google Drive")
  ("p" (dired ps/dir-people) "people")
  ;; ("q" (dired ps/dir-youtube))
  ("t" (hydra-dired-tlon/body) "Tlön")
  ("H-t" (hydra-dired-tlon/body) "Tlön")
  ("U" (dired ps/dir-audiobooks) "Audiobooks")
  ("v" (dired ps/dir-movies) "movies")
  ("w" (dired ps/dir-downloads) "downloads")
  ("x" (dired ps/dir-dropbox) "Dropbox")
  ("y" (dired ps/dir-library-pdf) "Library: PDF")
  ("z" (dired ps/dir-library-html) "Library: HTML")
  ;; ("'" (dired ps/dir-) "")
  ;; ("-" (dired ) "")
  ("." (dired-at-point) "File at point")
  ("/" (dired "/") "Root")
  ("SPC" (dired "~/") "user")
  (";" (dired-jump) "Current buffer")
  ("H-;" (dired-jump-other-window) "Current buffer in other window"))

(defhydra hydra-dired-tlon
  (:exit t)
  "Dired folders: Tlön"
  ("b" (dired ps/dir-dropbox-tlon-BAE) "Dropbox: BAE" :column "Dropbox")
  ("H-b" (dired ps/dir-google-drive-tlon-BAE) "Google Drive: BAE" :column "Google Drive")
  ("n" (dired ps/dir-dropbox-tlon-EAN) "Dropbox: EAN" :column "Dropbox")
  ("H-n" (dired ps/dir-google-drive-tlon-EAN) "Google Drive: EAN" :column "Google Drive")
  ("m" (dired ps/dir-dropbox-tlon-FM) "Dropbox: FM" :column "Dropbox")
  ("H-m" (dired ps/dir-google-drive-tlon-FM) "Google Drive: FM" :column "Google Drive")
  ("g" (dired ps/dir-dropbox-tlon-GPE) "Dropbox: GPE" :column "Dropbox")
  ("H-g" (dired ps/dir-google-drive-tlon-GPE) "Google Drive: GPE" :column "Google Drive")
  ("h" (dired ps/dir-dropbox-tlon-HEAR) "Dropbox: HEAR" :column "Dropbox")
  ("H-h" (dired ps/dir-google-drive-tlon-HEAR) "Google Drive: HEAR" :column "Google Drive")
  ("d" (dired ps/dir-dropbox-tlon-LBDLH) "Dropbox: LBDLH" :column "Dropbox")
  ("H-d" (dired ps/dir-google-drive-tlon-LBDLH) "Google Drive: LBDLH" :column "Google Drive")
  ("p" (dired ps/dir-dropbox-tlon-LP) "Dropbox: LP" :column "Dropbox")
  ("H-p" (dired ps/dir-google-drive-tlon-LP) "Google Drive: LP" :column "Google Drive")
  ("r" (dired ps/dir-dropbox-tlon-RAE) "Dropbox: RAE" :column "Dropbox")
  ("H-r" (dired ps/dir-google-drive-tlon-RAE) "Google Drive: RAE" :column "Google Drive")
  ("t" (dired ps/dir-dropbox-tlon) "Dropbox: tlon" :column "Dropbox")
  ("H-t" (dired ps/dir-google-drive-tlon) "Google Drive: tlon" :column "Google Drive")
  ("c" (dired ps/dir-dropbox-tlon-core) "Dropbox: core" :column "Dropbox")
  ("H-c" (dired ps/dir-google-drive-tlon-core) "Google Drive: core" :column "Google Drive")
  ("f" (dired ps/dir-dropbox-tlon-fede) "Dropbox: fede" :column "Dropbox")
  ("H-f" (dired ps/dir-google-drive-tlon-fede) "Google Drive: fede" :column "Google Drive")
  ("l" (dired ps/dir-dropbox-tlon-leo) "Dropbox: leo" :column "Dropbox")
  ("H-l" (dired ps/dir-google-drive-tlon-leo) "Google Drive: leo" :column "Google Drive"))

(defhydra hydra-dired-google-drive
  (:exit t)
  "Dired folders: apps"
  ;; TODO: parametrize
  ("i" (dired "~/Google Drive/Apps/Anki") "Anki")
  ("c" (dired "~/Google Drive/Apps/Emacs") "Emacs")
  ("m" (dired "~/Google Drive/Apps/Keyboard Maestro") "Keyboard Maestro")
  ("'" (hydra-dired/body) "back"))
(defhydra hydra-dired-music
  (:exit t)
  "Dired folders: music"
  ("c" (dired ps/dir-music-classical) "classical")
  ("p" (dired ps/dir-music-popular) "popular")
  ("t" (dired ps/dir-music-tango) "tango")
  ("s" (dired ps/dir-music-to-sort) "to sort")
  ("'" (hydra-dired/body) "back"))
#+end_src

** warnings
:PROPERTIES:
:ID:       C8FB5BC6-6895-4D63-86A8-E49D6BB3001C
:END:

#+begin_src emacs-lisp :results silent
(use-feature warnings
  :demand t
  :config
  (dolist (element '((yasnippet backquote-change)
                     (org-element-cache)
                     (cons)))
    (add-to-list 'warning-suppress-types element)))
#+end_src

** comp
:PROPERTIES:
:ID:       191AB5FC-F979-4B71-84A0-D8FC108CEBD3
:END:

#+begin_src emacs-lisp :results silent
(use-feature comp
  :defer 60
  :config
  (setq native-comp-async-report-warnings-errors nil))
#+end_src

** bytecomp
:PROPERTIES:
:ID:       630FB32E-8D10-47C5-98EB-B436C6CF97D9
:END:

#+begin_src emacs-lisp :results silent
(use-feature bytecomp
  :demand t
  :config
  (setq byte-compile-warnings '(cl-functions)))
#+end_src

** startup
:PROPERTIES:
:ID:       853A9EBB-356D-428E-AC94-F14BBDA78FB4
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq user-full-name ps/personal-name)
  (setq user-mail-address ps/personal-gmail)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message user-login-name)
  (setq inhibit-startup-buffer-menu t)
  (setq initial-major-mode 'emacs-lisp-mode)
  (setq frame-resize-pixelwise t))
#+end_src

** server
:PROPERTIES:
:ID:       8514378A-0BA2-4A8E-971F-10C07ED4D38A
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/server)
(use-feature server
  :demand t
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** async
:PROPERTIES:
:ID:       B37674EC-9F35-4425-A587-F8D1944894EA
:END:

/[[https://github.com/jwiegley/emacs-async][async]] is a simple library for asynchronous processing in Emacs./

#+begin_src emacs-lisp :results silent
(use-package async
:demand t)
  ;; :commands dired-async-mode)
#+end_src

** emacsql
:PROPERTIES:
:ID:       2E12D7A1-6B15-40E5-A54F-FDAED82B58C5
:END:

/[[https://github.com/magit/emacsql][emacsql]] is a high-level Emacs Lisp RDBMS front-end./

#+begin_src emacs-lisp
(use-package emacsql
  :demand t)
#+end_src

** misc.
:PROPERTIES:
:ID:       72D2BA33-0E12-4893-B790-B132CE2F9404
:END:
:LOGBOOK:
CLOCK: [2021-12-13 Mon 13:04]--[2021-12-13 Mon 13:15] =>  0:11
CLOCK: [2021-07-25 Sun 11:48]--[2021-07-25 Sun 12:47] =>  0:59
CLOCK: [2021-07-18 Sun 20:32]--[2021-07-18 Sun 20:42] =>  0:10
CLOCK: [2021-05-05 Wed 21:05]--[2021-05-05 Wed 21:55] =>  0:50
CLOCK: [2021-02-11 Thu 08:51]--[2021-02-11 Thu 09:35] =>  0:44
CLOCK: [2021-04-05 Mon 15:49]--[2021-04-05 Mon 15:56] =>  0:07
CLOCK: [2021-02-07 Sun 12:07]--[2021-02-07 Sun 12:15] =>  0:08
CLOCK: [2021-04-08 Thu 07:27]--[2021-04-08 Thu 08:13] =>  0:46
CLOCK: [2021-04-06 Tue 19:57]--[2021-04-06 Tue 20:03] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :config
  (setq default-directory ps/dir-dropbox)
  (setq use-short-answers t)
  (setq message-log-max t)
  (setq ring-bell-function 'ignore) ; silence bell when mistake is made
  (setq x-stretch-cursor t) ; make curor the width of the character under it
  ;; emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  ;; UTF8 stuff.
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8))
#+end_src

* display
:PROPERTIES:
:ID:       DE6D2307-9EBD-4E0F-B873-003C9813CA27
:END:
:LOGBOOK:
CLOCK: [2022-07-05 Tue 10:10]--[2022-07-05 Tue 10:17] =>  0:07
CLOCK: [2021-05-25 Tue 18:26]--[2021-05-25 Tue 18:31] =>  0:05
CLOCK: [2021-05-04 Tue 19:02]--[2021-05-04 Tue 19:09] =>  0:07
CLOCK: [2021-04-03 Sat 16:26]--[2021-04-03 Sat 17:04] =>  0:38
CLOCK: [2021-03-28 Sun 19:21]--[2021-03-28 Sun 19:35] =>  0:14
:END:

#+begin_src emacs-lisp :results silent
(setq-default line-spacing 2)
#+end_src

** mixed-pitch
:PROPERTIES:
:ID:       A8E80A11-25A4-4034-8A86-F7F6ADFD46C7
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 19:52]--[2022-05-04 Wed 19:54] =>  0:02
CLOCK: [2021-11-18 Thu 21:52]--[2021-11-18 Thu 22:20] =>  0:28
:END:

/[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows mixing fixed-pitch and variable-pitch fonts./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/mixed-pitch)
(use-package mixed-pitch
  :demand t
  :config
  (setq mixed-pitch-set-height t)

  (add-hook 'mu4e-view-mode-hook #'mixed-pitch-mode)
  (add-hook 'outline-mode-hook #'mixed-pitch-mode))
#+end_src

** fringe
:PROPERTIES:
:ID:       A0748A82-CE1C-4700-95E1-610B6CA7F8E0
:END:

#+begin_src emacs-lisp :results silent
(use-feature fringe
  :demand t
  :init
  (setq-default fringe-indicator-alist
                '((truncation nil nil)
                  (continuation nil nil)
                  (overlay-arrow . right-triangle)
                  (up . up-arrow)
                  (down . down-arrow)
                  (top top-left-angle top-right-angle)
                  (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
                  (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
                  (empty-line . empty-line)
                  (unknown . question-mark))))
#+end_src

** org-modern
:PROPERTIES:
:ID:       FB673B28-FB6D-48EE-97B8-1E9C5D9F32FD
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:25]--[2023-04-30 Sun 11:40] =>  0:15
:END:

/[[https://github.com/minad/org-modern][org-modern]] prettifies org mode./

#+begin_src emacs-lisp :results silent
(use-package org-modern
  :demand t
  :after org
  :config
  (setq org-modern-table nil)
  (setq org-modern-statistics nil)
  (setq org-modern-star '("◉" "◉" "◉" "◉" "◉"))
  (setq org-modern-list '((42 . "○")
                          (43 . "○")
                          (45 . "○")))
  (global-org-modern-mode))
#+end_src

** org-modern-indent
:PROPERTIES:
:ID:       740E3E7F-BF38-484E-BBD6-BF9AEC978612
:END:

/[[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]] extends org-modern stylistic improvements to contexts involving indentation./

#+begin_src emacs-lisp
(use-package org-modern-indent
  :elpaca (org-modern-indent
             :host github
             :repo "jdtsmith/org-modern-indent")
  :after org-modern org-indent
  :demand t
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** faces
:PROPERTIES:
:ID:       168A61B0-4580-443D-B04F-78F08EFA0458
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 10:45]--[2022-05-04 Wed 11:00] =>  0:15
CLOCK: [2021-11-17 Wed 19:48]--[2021-11-17 Wed 19:57] =>  0:09
CLOCK: [2021-11-17 Wed 11:27]--[2021-11-17 Wed 11:38] =>  0:11
CLOCK: [2021-11-16 Tue 16:27]--[2021-11-16 Tue 17:55] =>  1:28
CLOCK: [2021-08-19 Thu 19:18]--[2021-08-19 Thu 19:31] =>  0:13
CLOCK: [2021-03-28 Sun 21:05]--[2021-03-28 Sun 21:21] =>  0:16
CLOCK: [2021-02-27 Sat 18:27]--[2021-02-27 Sat 18:32] =>  0:05
CLOCK: [2021-02-04 Thu 20:54]--[2021-02-04 Thu 20:59] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature faces
  :demand t
  :after org-modern

  :config
  (defun ps/faces-load-custom-faces ()
    "My custom faces, to be used in conjunction with theme."
    (tlon-init-override-code-if-available
     :ps/faces
     '(
       (set-face-attribute 'default nil :family ps/face-fixed-pitch :height 115)
       (set-face-attribute 'fixed-pitch nil :family ps/face-fixed-pitch :height 1.1)
       (set-face-attribute 'variable-pitch nil :family ps/face-variable-pitch :height 1.4)
       (set-face-attribute 'org-drawer nil :foreground "LightSkyBlue" :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-property-value nil :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-todo nil :family ps/face-fixed-pitch :height 1.0)
       (set-face-attribute 'org-archived nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-document-title nil :family ps/face-fixed-pitch :height 1.0)
       (set-face-attribute 'org-special-keyword nil :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-tag nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-code nil :family ps/face-fixed-pitch :height 1.1)
       (set-face-attribute 'org-level-1 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-2 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-3 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-4 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-5 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-6 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-7 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-level-8 nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-date nil :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-modern-date-active nil :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-modern-date-inactive nil :family ps/face-fixed-pitch :height 0.8)
       (set-face-attribute 'org-modern-tag nil :family ps/face-fixed-pitch :height 0.9)
       (set-face-attribute 'org-quote nil :family ps/face-variable-pitch :height 1.3)
       (set-face-attribute 'corfu-default nil :family ps/face-fixed-pitch :height 1)))))
#+end_src

- [[https://out-of-cheese-error.netlify.app/spacemacs-config][An Annotated Spacemacs - For an org-mode workflow ·]]
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][- zzamboni.org | Beautifying Org Mode in Emacs]]

** face-remap
:PROPERTIES:
:ID:       3F96E2F2-7C68-4D61-8CB8-EFE4C7220FC8
:END:

#+begin_src emacs-lisp :results silent
(use-feature face-remap
  :demand t
  :general
  (eww-mode-map
   "+" 'text-scale-increase
   "-" 'text-scale-decrease))
#+end_src

** theme-loaddefs
:PROPERTIES:
:ID:       D75F0818-F8A2-45F1-8EB5-4548BCDE86BE
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/theme-loaddefs)
(use-feature emacs
  :demand t
  :config
  (defvar ps/theme-loaddefs-light 'modus-operandi)
  (defvar ps/theme-loaddefs-dark 'modus-vivendi))
#+end_src

** modus-themes
:PROPERTIES:
:ID:       95665A5E-A88C-4DCA-BDDD-84DC436A1E80
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 00:37]--[2023-02-25 Sat 01:15] =>  0:38
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 10:55] =>  0:13
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 11:25] =>  0:43
CLOCK: [2021-11-18 Thu 18:12]--[2021-11-18 Thu 18:28] =>  0:16
CLOCK: [2021-05-13 Thu 18:36]--[2021-05-13 Thu 18:37] =>  0:01
CLOCK: [2021-05-11 Tue 07:36]--[2021-05-11 Tue 07:54] =>  0:18
:END:

/[[https://protesilaos.com/emacs/modus-themes][modus-themes]] are a pair of accessible white/dark themes for Emacs./

#+begin_src emacs-lisp :results silent
(use-package modus-themes
  :elpaca (modus-themes
           :host sourcehut
           :repo "protesilaos/modus-themes")
  :after faces
  :demand t

  :init
  (setq modus-themes-org-blocks 'gray-background)
  (defun ps/modus-themes-highlight-parentheses ()
    (modus-themes-with-colors
      (setq highlight-parentheses-background-colors (list bg-cyan-intense
                                                          bg-magenta-intense
                                                          bg-green-intense
                                                          bg-yellow-intense)
            highlight-parentheses-colors (list cyan
                                               magenta
                                               green
                                               yellow))))

  :config
  (defun ps/modus-themes-load-theme-emacs-mac ()
    "Load modus theme that matches system."
    (interactive)
    (if (string= (plist-get (mac-application-state) :appearance) "NSAppearanceNameDarkAqua")
        (modus-themes-load-theme ps/theme-loaddefs-light)
      (modus-themes-load-theme ps/theme-loaddefs-dark)))

  (defun ps/modus-themes-load-theme-emacs-plus (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (modus-themes-load-theme ps/theme-loaddefs-light))
      ('dark (modus-themes-load-theme ps/theme-loaddefs-dark))))

  (defun ps/modus-themes-load-theme-conditionally ()
    "Load themes conditional on which distribution of Emacs is
installed."
    (cond ((boundp 'mac-effective-appearance-change-hook)
           ;; `emacs-mac'
           (ps/modus-themes-load-theme-emacs-mac))
          ;; `emacs-plus'
          ((boundp 'ns-system-appearance-change-functions)
           (add-hook 'ns-system-appearance-change-functions
                     #'ps/modus-themes-load-theme-emacs-plus))))

  (tlon-init-override-code-if-available
   :ps/modus-themes-load
   '(
     (ps/modus-themes-load-theme-conditionally)
     ))

  (setq modus-themes-common-palette-overrides
        `(
          ;; hide the fringe
          (fringe unspecified)
          ;; additional customizations can be added here

          ;; for the rest, use the predefined intense values

          ,@modus-themes-preset-overrides-intense))

  (add-hook 'modus-themes-after-load-theme-hook #'ps/faces-load-custom-faces)
  (add-hook 'modus-themes-after-load-theme-hook #'ps/modus-themes-highlight-parentheses)

  :general
  ("A-u" 'modus-themes-toggle))
#+end_src

** highlight-parentheses
:PROPERTIES:
:ID:       2B0F192C-2147-4CF6-AE69-73C1D85FEB77
:END:
:LOGBOOK:
CLOCK: [2022-05-07 Sat 19:00]--[2022-05-07 Sat 19:38] =>  0:38
:END:

/[[https://sr.ht/~tsdh/highlight-parentheses.el/][highlight-parentheses]] dynamically highlights the parentheses surrounding point based on nesting-level using configurable lists of colors, background colors, and other properties./

#+begin_src emacs-lisp :results silent
(use-package highlight-parentheses
  :demand t
  :config
  (setq highlight-parentheses-delay 0)
  (global-highlight-parentheses-mode)

  (add-hook 'minibuffer-setup-hook #'highlight-parentheses-minibuffer-setup))
#+end_src

** emojify
:PROPERTIES:
:ID:       92919C07-A782-4079-AE20-75B248D34A13
:END:

/[[https://github.com/iqbalansari/emacs-emojify][emojify]] displays emojis in Emacs./

#+begin_src emacs-lisp :results silent
(use-package emojify
  :config
  (emojify-set-emoji-styles '(unicode))
  (add-hook 'elpaca-after-init-hook #'global-emojify-mode)

  :general
  ("H-e" 'emojify-insert-emoji))
#+end_src

** lin
:PROPERTIES:
:ID:       FA8149A2-9984-4C39-AA81-120317615E86
:END:
:LOGBOOK:
CLOCK: [2022-09-12 Mon 16:21]--[2022-09-12 Mon 16:30] =>  0:09
:END:

/[[https://protesilaos.com/codelog/2022-09-08-lin-1-0-0/][lin]] is a stylistic enhancement for Emacs’ built-in ~hl-line-mode~. It remaps the ~hl-line~ face (or equivalent) buffer-locally to a style optimal for major modes where line selection is the primary mode of interaction./

#+begin_src emacs-lisp :results silent
(use-package lin
  :demand t
  :config
  (setq lin-face 'lin-blue)
  (setq lin-mode-hooks
   '(dired-mode-hook
     elfeed-search-mode-hook
     git-rebase-mode-hook
     grep-mode-hook
     ibuffer-mode-hook
     ilist-mode-hook
     ledger-report-mode-hook
     log-view-mode-hook
     magit-log-mode-hook
     mu4e-headers-mode
     occur-mode-hook
     org-agenda-mode-hook
     pdf-outline-buffer-mode-hook
     proced-mode-hook
     tabulated-list-mode-hook))

  (lin-global-mode))
#+end_src

** image
:PROPERTIES:
:ID:       E1A616FF-7D93-4AB4-AD44-44FB6550FD2E
:END:

#+begin_src emacs-lisp :results silent
(use-feature image
  :defer 10
  :config
  ;; Use imagemagick, if available.
  ;; djcbsoftware.nl/code/mu/mu4e/Viewing-images-inline.html
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  :general
  (image-mode-map
   "+" 'image-increase-size
   "-" 'image-decrease-size))
#+end_src

** paren
:PROPERTIES:
:ID:       E39A1AC5-7BF7-4995-B116-BB6323C7605F
:END:


#+begin_src emacs-lisp :results silent
(use-feature paren
  :demand t
  :config
  (setq show-paren-delay 0)

  (show-paren-mode))
#+end_src

** doom-modeline
:PROPERTIES:
:ID:       C3D90EBC-EB70-440E-9718-A2832FF9F077
:END:
:LOGBOOK:
CLOCK: [2023-04-28 Fri 13:05]--[2023-04-28 Fri 13:12] =>  0:07
CLOCK: [2023-03-27 Mon 21:53]--[2023-03-27 Mon 22:01] =>  0:08
CLOCK: [2021-06-02 Wed 21:16]--[2021-06-02 Wed 21:32] =>  0:16
CLOCK: [2021-06-02 Wed 18:04]--[2021-06-02 Wed 18:07] =>  0:03
CLOCK: [2021-05-23 Sun 12:38]--[2021-05-23 Sun 12:43] =>  0:05
CLOCK: [2021-04-03 Sat 17:09]--[2021-04-03 Sat 17:25] =>  0:16
:END:

/[[https://github.com/seagle0128/doom-modeline/][doom-modeline]] is a tidier and more aesthetically pleasing modeline./

#+begin_src emacs-lisp :results silent
(use-package doom-modeline
  :demand t
  :init
  (doom-modeline-mode)

  :config
  (tlon-init-override-code-if-available
   :ps/doom-modeline
   '(
     (setq doom-modeline-mu4e nil) ; avoid distractions
     (setq doom-modeline-time nil) ; we display time (and date) in the tab-bar
     (setq doom-modeline-buffer-encoding nil)
     (setq doom-modeline-irc t)
     (setq doom-modeline-irc-buffers t)
     (setq doom-modeline-buffer-file-name-style 'auto)

     (doom-modeline-def-modeline 'main
       '(bar workspace-name window-number modals matches follow remote-host buffer-position word-count parrot selection-info buffer-info)
       '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker time))


     (dolist (hook-cons  '((display-time-mode-hook . doom-modeline-override-display-time-modeline)
                           (display-battery-mode-hook . doom-modeline-override-battery-modeline)
                           (doom-modeline-mode-hook . doom-modeline-override-display-time-modeline)
                           (doom-modeline-mode-hook . doom-modeline-override-battery-modeline)))
       (remove-hook (car hook-cons) (cdr hook-cons))))))
#+end_src

** tab-bar
:PROPERTIES:
:ID:       F8B7C324-C5CF-4DBD-A527-92101BDA70AB
:END:
:LOGBOOK:
CLOCK: [2023-03-30 Thu 22:12]--[2023-03-30 Thu 22:20] =>  0:08
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/tab-bar)
(use-feature tab-bar
  :demand t
  :config
  (setq tab-bar-format '(tab-bar-align-right
                         tab-bar-format-global))
  (setq auto-resize-tab-bar nil)

  (setf mode-line-misc-info
        ;; When the tab-bar is active, don't show global-mode-string
        ;; in mode-line-misc-info, because we now show that in the
        ;; tab-bar using `tab-bar-format-align-right' and
        ;; `tab-bar-format-global'.
        (remove '(global-mode-string ("" global-mode-string))
                mode-line-misc-info))

  (defvar ps/global-mode-string-default
    '(" "
      (:eval (propertize display-time-string 'face 'ps/display-time))
      " |  "
      chemacs-profile-name
      " | "
      fancy-battery-mode-line
      " | "
      telega-mode-line-format
      " | ")
    "Default tab-bar configuration.")

  (setq global-mode-string ps/global-mode-string-default)

  (defun ps/tab-bar-reset ()
    "Temporary command to handle mysterious proliferation of clocks."
    (interactive)
    (setq global-mode-string ps/global-mode-string-default)
    (display-wttr-mode))

  (defun ps/tab-bar-reset-unless-clock ()
    "Reset the tab-bar when org-clock isn't running.
The condition is included to prevent the currently clocked task
from disappearing when the tab-bar is reset."
    (unless org-clock-current-task
      (ps/tab-bar-reset)))

  (run-with-idle-timer 300 t #'ps/tab-bar-reset-unless-clock)

  (tab-bar-mode))
#+end_src

** fancy-battery
:PROPERTIES:
:ID:       DDFE34BA-7C23-459E-B4E2-2957D2535700
:END:

/[[https://github.com/emacsorphanage/fancy-battery][fancy-battery]] displays battery information in the modeline./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/tab-bar)
(use-package fancy-battery
  :defer 10
  :config
  (setq fancy-battery-show-percentage t)

  (fancy-battery-mode))
#+end_src

** all-the-icons
:PROPERTIES:
:ID:       46EB8CD9-E498-4F80-AC02-A116CFA58799
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:13]--[2022-07-17 Sun 11:21] =>  0:08
CLOCK: [2021-05-20 Thu 18:21]--[2021-05-20 Thu 18:39] =>  0:18
CLOCK: [2021-05-06 Thu 06:01]--[2021-05-06 Thu 06:22] =>  0:21
:END:

/[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] collects various icon fonts and propertizes them./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons
  :demand t)
#+end_src

** all-the-icons-completion
:PROPERTIES:
:ID:       A0DAA757-1CC9-460B-9F46-78A5145E7E61
:END:

/[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] adds icons to completion candidates./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-completion
  :demand t
  :after all-the-icons marginalia vertico
  :config
  (all-the-icons-completion-mode)

  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** nerd-icons
:PROPERTIES:
:ID:       0C470436-3327-4B81-89DA-005449893FF4
:END:

/[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] is a library for [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs./

#+begin_src emacs-lisp
(use-package nerd-icons
  :demand t
  :config
  (setq nerd-icons-font-family "SauceCodePro Nerd Font")
  )
#+end_src

** menu-bar
:PROPERTIES:
:ID:       08F1FCC3-7287-43B6-B455-C2D4377848E7
:END:

#+begin_src emacs-lisp
(use-feature menu-bar
  :demand t
  :config
  (menu-bar-mode -1))
#+end_src

** tool-bar
:PROPERTIES:
:ID:       EBE7677A-4C70-4312-816A-E9F8E5999078
:END:

#+begin_src emacs-lisp
(use-feature tool-bar
  :demand t
  :config
  (tool-bar-mode -1))
#+end_src

** scroll-bar
:PROPERTIES:
:ID:       0AE186DB-0FC3-4B1B-B38E-7597B97A8DBA
:END:

#+begin_src emacs-lisp
(use-feature scroll-bar
  :demand t
  :config
  (scroll-bar-mode -1))
#+end_src

** delsel
:PROPERTIES:
:ID:       6473F2BF-059F-464B-859E-B8DA91B81DE2
:END:

#+begin_src emacs-lisp :results silent
(use-feature delsel
  :demand t
  :config
  (delete-selection-mode))
#+end_src

** hl-line
:PROPERTIES:
:ID:       EBCFE2FC-27B4-4C30-9D2A-A841B34271F7
:END:

:PROPERTIES:
:ID:       2793C213-5A36-4DAB-9217-DA1BBE257E09
:END:
#+begin_src emacs-lisp :results silent
(use-feature hl-line
  :demand t
  :config
  (global-hl-line-mode))
#+end_src

** jit-lock
:PROPERTIES:
:ID:       66598B06-4BB1-4E7C-AE36-7CE81E4CBF5A
:END:

#+begin_src emacs-lisp :results silent
(use-feature jit-lock
  :defer 10
  :config
  (setq jit-lock-chunk-size
        (* (window-max-chars-per-line) (window-body-height) 10))) ; emacs.stackexchange.com/a/72439/32089
#+end_src

* performance
:PROPERTIES:
:ID:       EF047473-EE10-41A2-852A-8CCD803469CD
:END:
:LOGBOOK:
CLOCK: [2021-10-15 Fri 12:34]--[2021-10-15 Fri 12:40] =>  0:06
CLOCK: [2021-03-20 Sat 22:11]--[2021-03-20 Sat 22:18] =>  0:07
CLOCK: [2021-02-28 Sun 11:18]--[2021-02-28 Sun 11:26] =>  0:08
CLOCK: [2021-02-28 Sun 10:30]--[2021-02-28 Sun 10:57] =>  0:27
CLOCK: [2021-02-26 Fri 18:00]--[2021-02-26 Fri 18:12] =>  0:12
CLOCK: [2021-02-26 Fri 09:51]--[2021-02-26 Fri 10:02] =>  0:11
CLOCK: [2021-02-25 Thu 15:32]--[2021-02-25 Thu 15:59] =>  0:27
CLOCK: [2021-02-21 Sun 10:01]--[2021-02-21 Sun 10:34] =>  0:33
CLOCK: [2021-02-12 Fri 08:47]--[2021-02-12 Fri 08:55] =>  0:08
CLOCK: [2021-02-07 Sun 12:15]--[2021-02-07 Sun 12:49] =>  0:34
CLOCK: [2021-08-06 Fri 15:28]--[2021-08-06 Fri 15:32] =>  0:04
CLOCK: [2021-07-13 Tue 20:44]--[2021-07-13 Tue 21:07] =>  0:23
CLOCK: [2021-07-13 Tue 19:51]--[2021-07-13 Tue 20:02] =>  0:11
CLOCK: [2021-06-15 Tue 21:28]--[2021-06-15 Tue 21:35] =>  0:07
CLOCK: [2021-06-08 Tue 20:45]--[2021-06-08 Tue 21:15] =>  0:30
CLOCK: [2021-03-25 Thu 20:06]--[2021-03-25 Thu 20:11] =>  0:05
CLOCK: [2021-03-25 Thu 15:25]--[2021-03-25 Thu 16:57] =>  1:32
CLOCK: [2021-03-25 Thu 08:56]--[2021-03-25 Thu 09:30] =>  0:34
CLOCK: [2021-03-21 Sun 09:13]--[2021-03-21 Sun 10:13] =>  1:00
CLOCK: [2021-03-17 Wed 09:19]--[2021-03-17 Wed 10:04] =>  0:45
CLOCK: [2021-03-04 Thu 09:50]--[2021-03-04 Thu 10:01] =>  0:11
CLOCK: [2021-02-08 Mon 11:45]--[2021-02-08 Mon 12:07] =>  0:22
CLOCK: [2021-10-03 Sun 18:50]--[2021-10-03 Sun 19:05] =>  0:15
CLOCK: [2021-04-05 Mon 21:50]--[2021-04-05 Mon 22:15] =>  0:25
:END:

** profiler
:PROPERTIES:
:ID:       82CFBDD5-12E8-46EC-ADF8-2769E59B5DD8
:END:
:LOGBOOK:
CLOCK: [2021-11-14 Sun 10:39]--[2021-11-14 Sun 10:56] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature profiler
  :config
  (defvar ps/profiler-toggle nil)
  (defun ps/profiler-toggle ()
    (interactive)
    "Starts Emacs profiler if not already running. Otherwise stops it
and generates profiling report."
    (if (not ps/profiler-toggle)
        (profiler-start 'cpu+mem)
      (profiler-report)
      (profiler-stop))
    (setq ps/profiler-toggle (not ps/profiler-toggle)))

  (defun ps/profiler-report-toggle-entry-global ()
    "Expand all subentries below entry at point."
    (interactive)
    (profiler-report-toggle-entry '(4)))

  :general
  ("A-C-p" 'ps/profiler-toggle)
  (profiler-report-mode-map
   "<backtab>" 'ps/profiler-report-toggle-entry-global))
#+end_src

** so-long
:PROPERTIES:
:ID:       F738DFB0-AA9C-47B5-9D3B-DC22EF83D357
:END:

/[[https://savannah.nongnu.org/projects/so-long][so-long]] optimizes performance with minified code./

#+begin_src emacs-lisp :results silent
(use-feature so-long
  :demand t
  :config
  (global-so-long-mode))
#+end_src

** gcmh
:PROPERTIES:
:ID:       A8BBF291-D5CE-4FF2-B80C-B69570AD129D
:END:

/[[https://github.com/emacsmirror/gcmh][GCMH]] enforces a sneaky Garbage Collection strategy to minimize GC interference with user activity./

#+begin_src emacs-lisp :results silent
(use-package gcmh
  :demand t
  :config
  (gcmh-mode))
#+end_src

** misc.
:PROPERTIES:
:ID:       1EA302FA-D0A2-470C-82C2-47FCA4E04FAF
:END:

Partly borrowed from [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][Prot]].

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq bidi-display-reordering nil)
  (setq bidi-inhibit-bpa t)
  (setq inhibit-compacting-font-caches t)
  (setq redisplay-skip-fontification-on-input t)
  ;; emacs-lsp.github.io/lsp-mode/page/performance/
  (setq read-process-output-max (* 1024 1024)) ; 1mb.
  (setq-default bidi-paragraph-direction 'left-to-right))
#+end_src

* text movement
:PROPERTIES:
:ID:       1E8F4417-5D5F-4406-BB70-AA272F714EF2
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 09:27]--[2022-07-17 Sun 09:47] =>  0:20
CLOCK: [2022-07-11 Mon 13:34]--[2022-07-11 Mon 14:41] =>  1:07
CLOCK: [2022-07-11 Mon 12:37]--[2022-07-11 Mon 12:43] =>  0:06
CLOCK: [2021-05-22 Sat 17:22]--[2021-05-22 Sat 17:35] =>  0:13
:END:

** words
:PROPERTIES:
:ID:       3493B00B-C36E-406F-B681-F145FD1684B2
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
   ("A-C-s-p" 'forward-word
   "A-C-s-u" 'backward-word))
#+end_src

** lines
:PROPERTIES:
:ID:       73DC1518-87FD-48D7-9EE5-C863126905AD
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
  ("A-C-s-m" 'move-beginning-of-line
   ;; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
   "A-C-s-z" 'move-end-of-line)
  ((custom-mode-map ebib-index-mode-map ebib-entry-mode-map help-mode-map helpful-mode-map Info-mode-map Man-node-map org-lint--report-mode-map osa-chrome-mode-map mu4e-view-mode-map eww-mode-map elfeed-search-mode-map elfeed-show-mode-map pass-mode-map elisp-refs-mode-map special-mode-map twittering-mode-map)
   "k" 'previous-line
   "l" 'next-line)
  ((eshell-hist-mode-map w3m-minor-mode-map)
   "<up>" 'previous-line
   "<down>" 'next-line))
#+end_src

** sentences
:PROPERTIES:
:ID:       9BCDE791-E716-4CFE-AED3-4E4E4874DDDE
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-i" 'backward-sentence
   "A-C-s-o" 'forward-sentence))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       E10CAF75-4C0C-4910-856F-39707E30A565
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-," 'backward-paragraph
   "A-C-s-." 'forward-paragraph))
#+end_src

** sexps
:PROPERTIES:
:ID:       DF16B7CC-E0CF-4062-A0C2-93CBE83F619C
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-e" 'backward-sexp
   "A-H-M-s-d" 'forward-sexp ; nonstandard binding because otherwise intercepted by OSX
   ))
#+end_src

** defuns
:PROPERTIES:
:ID:       868B32C0-52FC-4131-9191-DD43BEAABCEA
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :general
  ("A-C-s-w" 'beginning-of-defun
   "A-C-s-s" 'end-of-defun))
#+end_src

** buffers
:PROPERTIES:
:ID:       E71DE3A8-E941-4864-8224-2326C22E3AEB
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
  ("A-C-s-<tab>" 'beginning-of-buffer
   "A-C-s-SPC" 'end-of-buffer))
#+end_src

* text manipulation
:PROPERTIES:
:ID:       179BB021-8B2A-4BF0-B3AA-43AF5A212D4B
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 12:53]--[2021-09-29 Wed 13:16] =>  0:23
CLOCK: [2021-09-29 Wed 12:22]--[2021-09-29 Wed 12:49] =>  0:27
CLOCK: [2021-07-13 Tue 08:44]--[2021-07-13 Tue 09:00] =>  0:16
CLOCK: [2021-06-15 Tue 21:35]--[2021-06-15 Tue 21:52] =>  0:17
CLOCK: [2021-06-08 Tue 21:15]--[2021-06-08 Tue 21:44] =>  0:29
CLOCK: [2021-06-01 Tue 12:34]--[2021-06-01 Tue 12:43] =>  0:09
CLOCK: [2021-05-29 Sat 21:04]--[2021-05-29 Sat 21:12] =>  0:08
CLOCK: [2021-05-29 Sat 19:52]--[2021-05-29 Sat 20:05] =>  0:13
CLOCK: [2021-04-03 Sat 18:55]--[2021-04-03 Sat 19:01] =>  0:06
CLOCK: [2021-04-03 Sat 18:54]--[2021-04-03 Sat 18:55] =>  0:01
CLOCK: [2021-03-22 Mon 20:56]--[2021-03-22 Mon 21:16] =>  0:20
:END:

#+begin_src emacs-lisp :results silent
(defmacro ps/delete-instead-of-kill (&rest body)
  "Replaces `kill-region' with `delete-region' in BODY."
  `(cl-letf (((symbol-function 'kill-region)
              (lambda (beg end)
                (delete-region beg end))))
     ,@body))

(defmacro ps/copy-instead-of-kill (&rest body)
  "Replaces `kill-region' with `kill-ring-save' in BODY."
  `(cl-letf (((symbol-function 'kill-region)
              (lambda (beg end)
                (kill-ring-save beg end)
                (setq this-command 'kill-region))))
     ,@body))

(defun ps/kill-whole-thing (thing)
  "Kill the `thing-at-point' for the specified kind of THING."
  (let ((bounds (bounds-of-thing-at-point thing)))
    (if bounds
        (kill-region (car bounds) (cdr bounds))
      (error "No %s at point" thing))))

(general-define-key
 "C-H-M-g" 'append-next-kill
 "A-M-n" 'ps/remove-newlines-from-region)
#+end_src

** characters
:PROPERTIES:
:ID:       483F1796-7921-4AB1-B7FB-6BF1349D4744
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:47]--[2022-07-15 Fri 13:48] =>  0:01
CLOCK: [2021-06-05 Sat 18:28]--[2021-06-05 Sat 19:09] =>  0:41
CLOCK: [2021-04-21 Wed 21:25]--[2021-04-21 Wed 21:39] =>  0:14
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (defun ps/backward-zap-to-char ()
    (interactive)
    (zap-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                               nil 'read-char-history)))

  (defun ps/zap-copy-to-char (arg char)
    "Copy up to and including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char-from-minibuffer "Zap to char: "
                                                  nil 'read-char-history)))
    ;; Avoid "obsolete" warnings for translation-table-for-input.
    (with-no-warnings
      (if (char-table-p translation-table-for-input)
          (setq char (or (aref translation-table-for-input char) char))))
    (copy-region-as-kill (point) (progn
                                   (search-forward (char-to-string char) nil nil arg)
                                   (point))))

  (defun ps/backward-zap-copy-to-char ()
    (interactive)
    (ps/zap-copy-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                                       nil 'read-char-history)))

  (defun ps/zap-delete-to-char (arg char)
    "Copy up to and including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char-from-minibuffer "Zap to char: "
                                                  nil 'read-char-history)))
    ;; Avoid "obsolete" warnings for translation-table-for-input.
    (with-no-warnings
      (if (char-table-p translation-table-for-input)
          (setq char (or (aref translation-table-for-input char) char))))
    (delete-region (point) (progn
                             (search-forward (char-to-string char) nil nil arg)
                             (point))))

  (defun ps/backward-zap-delete-to-char ()
    (interactive)
    (ps/zap-delete-to-char -1 (read-char-from-minibuffer "Zap to char: "
                                                         nil 'read-char-history)))

  (defun ps/transpose-chars-backward ()
    "Interchange characters around point, moving backward one character."
    (interactive)
    (transpose-chars -1))

  :general
  ("A-H-M-d" 'transpose-chars
   "A-H-M-s" 'ps/transpose-chars-backward
   "C-H-M-s" 'delete-backward-char
   "C-H-M-d" 'delete-forward-char
   "C-H-M-t" 'cycle-space
   "C-H-M-f" 'zap-to-char
   "C-H-M-a" 'ps/backward-zap-to-char
   "A-C-H-M-S-s-f" 'ps/zap-delete-to-char
   "A-C-H-M-S-s-a" 'ps/backward-zap-delete-to-char
   "C-H-M-s-A-f" 'ps/zap-copy-to-char
   "C-H-M-s-A-a" 'ps/backward-zap-copy-to-char
   "C-H-M-=" 'overwrite-mode)
  (org-mode-map
   "C-H-M-s" 'org-delete-backward-char))
#+end_src

** words
:PROPERTIES:
:ID:       E2655C82-F60C-4504-B8C1-7ACE864C2E01
:END:
:LOGBOOK:
CLOCK: [2023-02-20 Mon 13:44]--[2023-02-20 Mon 13:48] =>  0:04
CLOCK: [2021-06-05 Sat 13:03]--[2021-06-05 Sat 13:07] =>  0:04
CLOCK: [2021-06-05 Sat 11:51]--[2021-06-05 Sat 11:59] =>  0:08
CLOCK: [2021-05-29 Sat 21:12]--[2021-05-29 Sat 21:28] =>  0:16
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (defun ps/delete-word (&optional arg)
    "Like `kill-word', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (kill-word arg)))

  (defun ps/backward-delete-word (&optional arg)
    "Like `backward-kill-word', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (backward-kill-word arg)))

  (defun ps/copy-word (&optional arg)
    "Like `kill-word', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (kill-word arg)))

  ;; The macro wasn't working for `backward-kill-word', so using a custom function.
  (defun ps/backward-copy-word ()
    "Like `backward-kill-word', but copies instead of killing."
    (interactive)
    (copy-region-as-kill (point) (progn (backward-word) (point))))

  (defun ps/kill-whole-word ()
    "Kill the word at point."
    (interactive)
    (ps/kill-whole-thing 'word))

  (defun ps/delete-whole-word ()
    "Like `kill-whole-word', but deletes instead of killing."
    (interactive)
    (ps/delete-instead-of-kill (ps/kill-whole-word)))

  (defun ps/copy-whole-word (&optional arg)
    "Like `kill-whole-word', but copies instead of killing."
    (interactive)
    (ps/copy-instead-of-kill (ps/kill-whole-word)))

  (defun ps/transpose-words-backward ()
    "Interchange words around point, leaving point at beginning."
    (interactive)
    (transpose-words -1))

  :general
  ("C-<delete>" nil
   "M-DEL" nil
   "C-H-M-r" 'kill-word
   "C-H-M-q" 'backward-kill-word
   "A-C-H-M-S-s-r" 'ps/delete-word
   "A-C-H-M-S-s-q" 'ps/backward-delete-word
   "C-H-M-s-A-r" 'ps/copy-word
   "C-H-M-s-A-q" 'ps/backward-copy-word
   "A-H-C-r" 'ps/delete-whole-word
   "A-H-M-s-9" 'ps/copy-whole-word ; `.-q'
   "A-H-C-u" 'ps/kill-whole-word
   "A-H-M-r" 'transpose-words
   "A-H-M-q" 'ps/transpose-words-backward))
#+end_src

** lines
:PROPERTIES:
:ID:       E0C7E822-7CC0-40A0-925D-737015A5A2FC
:END:
:LOGBOOK:
CLOCK: [2021-07-31 Sat 22:34]--[2021-07-31 Sat 22:56] =>  0:22
CLOCK: [2021-06-08 Tue 19:12]--[2021-06-08 Tue 19:53] =>  0:41
CLOCK: [2021-06-05 Sat 11:59]--[2021-06-05 Sat 12:40] =>  0:41
CLOCK: [2021-06-01 Tue 12:43]--[2021-06-01 Tue 13:10] =>  0:27
CLOCK: [2021-05-31 Mon 20:46]--[2021-05-31 Mon 20:53] =>  0:07
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
(defun ps/delete-line (&optional arg)
  "Like `kill-line', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-line arg)))

(defun ps/backward-delete-line (&optional arg)
  "Like `backward-kill-line', but deletes instead of killing."
  (interactive "p")
  (ps/delete-instead-of-kill (kill-line 0)))

(defun ps/copy-line (&optional arg)
  "Like `kill-line', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-line arg)))

(defun ps/backward-copy-line (&optional arg)
  "Like `backward-kill-line', but copies instead of killing."
  (interactive "P")
  (ps/copy-instead-of-kill (kill-line 0)))

(defun ps/kill-whole-line ()
  "Kill the line at point."
  (interactive)
  (ps/kill-whole-thing 'line))

(defun ps/delete-whole-line ()
  "Like `kill-whole-line', but deletes instead of killing."
  (interactive)
  (ps/delete-instead-of-kill (ps/kill-whole-line)))

(defun ps/copy-whole-line ()
  "Like `kill-whole-line', but copies instead of killing."
  (interactive)
  (ps/copy-instead-of-kill (ps/kill-whole-line)))

(defun ps/transpose-lines-backward ()
  "Exchange current line and previous line, leaving point
between the two."
  (interactive)
  (transpose-lines -1))

:general
("C-H-M-v" 'kill-line
 "C-H-M-z" 'crux-kill-line-backwards
 "A-C-H-M-S-s-v" 'ps/delete-line
 "A-C-H-M-S-s-z" 'ps/backward-delete-line
 "C-H-M-s-A-v" 'ps/copy-line
 "C-H-M-s-A-z" 'ps/backward-copy-line
 "A-H-C-v" 'ps/delete-whole-line
 "A-H-C-m" 'ps/kill-whole-line
 "A-H-C-z" 'ps/copy-whole-line
 "A-H-M-v" 'transpose-lines
 "A-H-M-z" 'ps/transpose-lines-backward))
#+end_src

** sentences
:PROPERTIES:
:ID:       CEEDCAFA-4527-401D-A262-C80871AD49E8
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 21:28]--[2021-05-29 Sat 22:17] =>  0:49
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (defun ps/delete-sentence (&optional arg)
    "Like `kill-sentence', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (kill-sentence arg)))

  (defun ps/backward-delete-sentence (&optional arg)
    "Like `backward-kill-sentence', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (backward-kill-sentence arg)))

  (defun ps/copy-sentence (&optional arg)
    "Like `kill-sentence', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (kill-sentence arg)))

  (defun ps/backward-copy-sentence (&optional arg)
    "Like `backward-kill-sentence', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (backward-kill-sentence arg)))

  (defun ps/kill-whole-sentence ()
    "Kill the sentence at point."
    (interactive)
    (ps/kill-whole-thing 'sentence))

  (defun ps/delete-whole-sentence ()
    "Like `kill-whole-sentence', but deletes instead of killing."
    (interactive)
    (ps/delete-instead-of-kill (ps/kill-whole-sentence)))

  (defun ps/copy-whole-sentence ()
    "Like `kill-whole-sentence', but copies instead of killing."
    (interactive)
    (ps/copy-instead-of-kill (ps/kill-whole-sentence)))

  (defun ps/transpose-sentences-backward ()
    "Interchange the current sentence with the previous one."
    (interactive)
    (transpose-sentences -1))

  :general
  ;; :keymaps '(text-mode-map org-mode-map outline-mode-map telega-chat-mode-map)
  ("C-H-M-e" 'kill-sentence
   "C-H-M-w" 'backward-kill-sentence
   "A-C-H-M-S-s-e" 'ps/delete-sentence
   "A-C-H-M-S-s-w" 'ps/backward-delete-sentence
   "C-H-M-s-A-e" 'ps/copy-sentence
   "C-H-M-s-A-w" 'ps/backward-copy-sentence
   "A-H-C-e" 'ps/delete-whole-sentence
   "A-H-C-w" 'ps/copy-whole-sentence
   "A-H-C-i" 'ps/kill-whole-sentence
   "A-H-M-e" 'transpose-sentences
   "A-H-M-w" 'ps/transpose-sentences-backward))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       2B3DDC12-D660-47EF-BA22-8B1419A5F5D2
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 13:07]--[2021-06-05 Sat 13:10] =>  0:03
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq sentence-end-double-space nil)

  (defun ps/delete-paragraph (&optional arg)
    "Like `kill-paragraph', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (kill-paragraph arg)))

  (defun ps/backward-delete-paragraph (&optional arg)
    "Like `backward-kill-paragraph', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (backward-kill-paragraph arg)))

  (defun ps/copy-paragraph (&optional arg)
    "Like `kill-paragraph', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (kill-paragraph arg)))

  (defun ps/backward-copy-paragraph (&optional arg)
    "Like `backward-kill-paragraph', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (backward-kill-paragraph arg)))

  (defun ps/kill-whole-paragraph ()
    "Kill the paragraph at point."
    (interactive)
    (ps/kill-whole-thing 'paragraph))

  (defun ps/delete-whole-paragraph ()
    "Like `kill-whole-paragraph', but deletes instead of killing."
    (interactive)
    (ps/delete-instead-of-kill (ps/kill-whole-paragraph)))

  (defun ps/copy-whole-paragraph ()
    "Like `kill-whole-paragraph', but copies instead of killing."
    (interactive)
    (ps/copy-instead-of-kill (ps/kill-whole-paragraph)))

  (defun ps/transpose-paragraphs-backward ()
    "Interchange the current paragraph with the previous one."
    (interactive)
    (transpose-paragraphs -1))

  :general
  ("M-k" nil)
  ((text-mode-map org-mode-map outline-mode-map telega-chat-mode-map)
   "C-H-M-c" 'kill-paragraph
   "C-H-M-x" 'backward-kill-paragraph
   "A-C-H-M-S-s-c" 'ps/delete-paragraph
   "A-C-H-M-S-s-x" 'ps/backward-delete-paragraph
   "C-H-M-s-A-c" 'ps/copy-paragraph
   "C-H-M-s-A-x" 'ps/backward-copy-paragraph
   "A-H-C-c" 'ps/delete-whole-paragraph
   "A-H-C-x" 'ps/copy-whole-paragraph
   "A-H-C-," 'ps/kill-whole-paragraph
   "A-H-M-c" 'transpose-paragraphs
   "A-H-M-x" 'ps/transpose-paragraphs-backward))
#+end_src

** sexps
:PROPERTIES:
:ID:       E07DF88D-B083-4D93-91D2-97DC7C2E3EAD
:END:
:LOGBOOK:
CLOCK: [2023-02-20 Mon 13:48]--[2023-02-20 Mon 13:52] =>  0:04
CLOCK: [2022-06-21 Tue 15:31]--[2022-06-21 Tue 15:35] =>  0:04
CLOCK: [2021-06-05 Sat 13:14]--[2021-06-05 Sat 13:20] =>  0:06
CLOCK: [2021-05-31 Mon 20:53]--[2021-05-31 Mon 21:21] =>  0:28
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (defun ps/delete-sexp (&optional arg)
    "Like `kill-sexp', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (kill-sexp arg)))

  (defun ps/backward-delete-sexp (&optional arg)
    "Like `backward-kill-sexp', but deletes instead of killing."
    (interactive "p")
    (ps/delete-instead-of-kill (backward-kill-sexp arg)))

  (defun ps/copy-sexp (&optional arg)
    "Like `kill-sexp', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (kill-sexp arg)))

  (defun ps/backward-copy-sexp (&optional arg)
    "Like `backward-kill-sexp', but copies instead of killing."
    (interactive "P")
    (ps/copy-instead-of-kill (backward-kill-sexp arg)))

  (defun ps/kill-whole-sexp ()
    "Kill the sexp at point."
    (interactive)
    (ps/kill-whole-thing 'sexp))

  (defun ps/delete-whole-sexp ()
    "Like `kill-whole-sexp', but deletes instead of killing."
    (interactive)
    (ps/delete-instead-of-kill (ps/kill-whole-sexp)))

  (defun ps/copy-whole-sexp ()
    "Like `kill-whole-sexp', but copies instead of killing."
    (interactive)
    (ps/copy-instead-of-kill (ps/kill-whole-sexp)))

  (defun ps/transpose-sexps-backward ()
    "Like `transpose-sexps', but in reverse order."
    (interactive)
    (transpose-sexps -1))

  :general
  ("C-M-k" nil
   "C-M-<backspace>" nil
   "C-H-M-f" 'kill-sexp
   "C-H-M-a" 'backward-kill-sexp
   "A-C-H-M-S-s-f" 'ps/delete-sexp
   "A-C-H-M-S-s-a" 'ps/backward-delete-sexp
   "C-H-M-s-A-f" 'ps/copy-sexp
   "C-H-M-s-A-a" 'ps/backward-copy-sexp
   "A-H-C-a" 'ps/copy-whole-sexp
   "A-H-C-f" 'ps/delete-whole-sexp
   "A-H-C-j" 'ps/kill-whole-sexp
   "A-H-M-f" 'transpose-sexps
   "A-H-M-a" 'ps/transpose-sexps-backward))
#+end_src

** headings
:PROPERTIES:
:ID:       77FA2148-0D0D-459B-8F5F-D63B2E8BEB28
:END:
:LOGBOOK:
CLOCK: [2021-07-16 Fri 09:44]--[2021-07-16 Fri 09:45] =>  0:01
CLOCK: [2021-06-11 Fri 18:27]--[2021-06-11 Fri 18:33] =>  0:06
:END:

#+begin_src emacs-lisp :results silent
(use-feature org
  :after org
  :general
  (org-mode-map
   "C-H-M-s-z" 'org-shiftleft
   "C-H-M-s-x" 'org-shiftup
   "C-H-M-s-c" 'org-shiftdown
   "C-H-M-s-v" 'org-shiftright
   "C-H-M-s-a" 'org-metaleft
   "C-H-M-s-s" 'org-metaup
   "C-H-M-s-d" 'org-metadown
   "C-H-M-s-f" 'org-metaright
   "C-H-M-s-q" 'org-shiftmetaleft
   "C-H-M-s-w" 'org-shiftmetaup
   "C-H-M-s-e" 'org-shiftmetadown
   "C-H-M-s-r" 'org-shiftmetaright))
#+end_src

** element
:PROPERTIES:
:ID:       9C2CB01F-9F9A-4E92-9722-4EEB3A603BE3
:END:

#+begin_src emacs-lisp
(use-feature org
  :after org
  :elpaca nil
  :config
  (defun ps/org-copy-dwim ()
    "Copy the contents of the org element at point."
    (interactive)
    (if (derived-mode-p 'org-mode)
        (pcase (org-element-type (org-element-context))
          ('headline (ps/org-copy-heading-name))
          ('paragraph (ps/org-copy-heading-contents))
          ('block (ps/org-copy-block))
          ('table-cell (ps/org-copy-table-cell))
          (_ (user-error "I don't know what to copy")))
      (user-error "Not in org-mode")))

  :general
  (org-mode-map
   "A-C-H-t" 'ps/org-copy-dwim))
#+end_src

** region
:PROPERTIES:
:ID:       AF9DC82D-B70E-486C-A26C-D82C6E63B1EC
:END:
:LOGBOOK:
CLOCK: [2021-05-30 Sun 11:16]--[2021-05-30 Sun 12:16] =>  1:00
CLOCK: [2021-05-29 Sat 19:02]--[2021-05-29 Sat 19:52] =>  0:50
:END:

The following function, adapted from [[https://stackoverflow.com/a/8956311/4479455][this answer]], makes ~kill-region~ work only when there is an active selection; otherwise it will kill the entire line.

#+begin_src emacs-lisp :results silent
(defun ps/smart-kill-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'kill-region)
    (call-interactively 'kill-whole-line)))

(defun ps/smart-delete-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'delete-region)
    (call-interactively 'ps/delete-whole-line)))

(defun ps/smart-copy-region ()
  "kill region if active, else kill line."
  (interactive)
  (if (region-active-p)
      (call-interactively 'copy-region-as-kill)
    (call-interactively 'ps/copy-whole-line)))

(general-define-key
 "H-c" 'ps/smart-copy-region
 "H-x" 'ps/smart-kill-region
 "H-X" 'ps/smart-delete-region)
#+end_src

** misc.
:PROPERTIES:
:ID:       ECC26808-6B27-4CD8-AF52-570B877A6F26
:END:

#+begin_src emacs-lisp :results silent
;; github.com/typester/emacs/blob/master/lisp/url/url-util.el
(defun ps/get-url-at-point (&optional pt)
  "Get the URL closest to point, but don't change position.
Has a preference for looking backward when not directly on a symbol."
  ;; Not at all perfect - point must be right in the name.
  (save-excursion
    (if pt (goto-char pt))
    (let (start url)
      (save-excursion
        ;; first see if you're just past a filename
        (if (not (eobp))
            (if (looking-at "[] \t\n[{}()]") ; whitespace or some parens
                (progn
                  (skip-chars-backward " \n\t\r({[]})")
                  (if (not (bobp))
                      (backward-char 1)))))
        (if (and (char-after (point))
                 (string-match (eval-when-compile
                                 (concat "[" "-%.?@a-zA-Z0-9()_/:~=&" "]"))
                               (char-to-string (char-after (point)))))
            (progn
              (skip-chars-backward "-%.?@a-zA-Z0-9()_/:~=&")
              (setq start (point))
              (skip-chars-forward "-%.?@a-zA-Z0-9()_/:~=&"))
          (setq start (point)))
        (setq url (buffer-substring-no-properties start (point))))
      (if (and url (string-match "^(.*)\\.?$" url))
          (setq url (match-string 1 url)))
      (if (and url (string-match "^URL:" url))
          (setq url (substring url 4 nil)))
      (if (and url (string-match "\\.$" url))
          (setq url (substring url 0 -1)))
      (if (and url (string-match "^www\\." url))
          (setq url (concat "http://" url)))
      (if (and url (not (string-match url-nonrelative-link url)))
          (setq url nil))
      url)))

(defun ps/strip-url ()
  "Strip URL of unnecessary elements."
  (interactive)
  (unless (ps/get-url-at-point)
    (error "No URL at point."))
  (let* ((url-original (ps/get-url-at-point))
         (url-stripped (replace-regexp-in-string "\\(?:https?://\\)?\\(?:www.\\)?" "" url-original)))
    (search-backward " ")
    (while (search-forward url-original nil t)
      (replace-match url-stripped nil t))
    (search-backward url-stripped)))

(defun ps/strip-thing-at-point ()
  "Strip thing at point. (To be expanded.)"
  (interactive)
  (cond ((ps/get-url-at-point)
         (ps/strip-url)))
  (just-one-space 0))

(defun ps/first-char-of-each-letter (str)
  (mapconcat (lambda (word) (substring word 0 1)) (split-string str "-") ""))

(general-define-key
 "C-H-M-b" 'ps/strip-thing-at-point)
#+end_src

** kill ring
:PROPERTIES:
:ID:       CB2EA5F8-B566-466D-8CCA-1DA7F99591BA
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (setq kill-ring-max 500)
  (setq save-interprogram-paste-before-kill t) ; add system clipboard to kill ring

  (defun ps/yank-and-pop ()
    "Yank, then pop the last kill off the ring."
    (interactive)
    (yank)
    (when kill-ring
      (setq kill-ring (cdr kill-ring)))
    (when kill-ring-yank-pointer
      (setq kill-ring-yank-pointer kill-ring))
    (message "Last kill popped off kill-ring."))

  :general
  ("H-v" 'yank
   "H-A-v" 'ps/yank-and-pop))
#+end_src

* editing
:PROPERTIES:
:ID:       D06BE38F-DFC1-47DC-8F2C-FE2F1A437227
:END:

** simple
:PROPERTIES:
:ID:       D3A1830F-6A23-4DD3-99D3-2E582B79EA35
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (setq shift-select-mode nil) ; Shift keys do not activate the mark momentarily.
  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  (setq eval-expression-print-level nil)
  (setq eval-expression-print-length nil)
  (setq print-level nil)
  (setq print-length nil)
  (setq truncate-partial-width-windows nil)

  (column-number-mode)

  ;; spwhitton.name/blog/entry/transient-mark-mode/
  (defun ps/exchange-point-and-mark (arg)
    "Exchange point and mark, but reactivate mark a bit less often.

Specifically, invert the meaning of ARG in the case where
Transient Mark mode is on but the region is inactive."
    (interactive "P")
    (exchange-point-and-mark
     (if (and transient-mark-mode (not mark-active))
         (not arg)
       arg)))

  (defun ps/visible-mode-enhanced ()
    "Toggle `visible-mode' as well as appropriate actions associated
with the current major mode."
    (interactive)
    (if visible-mode
        (progn
          (visible-mode -1)
          (org-modern-mode)
          (org-display-inline-images)
          (ps/org-hide-properties)
          (ps/org-hide-logbook))
      (org-modern-mode -1)
      (visible-mode)
      (org-remove-inline-images)
      (ps/org-show-properties)
      (ps/org-show-logbook)))

  (defun ps/count-words-dwim ()
    "Count the number of words in region, if active, otherwise in
clipboard. Either way, save count to kill ring."
    (interactive)
    (if (region-active-p)
        (let ((count (how-many "\\w+" (region-beginning) (region-end))))
          (message "%s words in region" count)
          (kill-new (number-to-string count))
          (message "region has %s words" count))
      (let ((clipboard-text (current-kill 0)))
        (with-temp-buffer
          (insert clipboard-text)
          (let ((clipboard-count (kill-new (format "%d" (count-words-region (point-min) (point-max))))))
            (message "Clipboard has %d words" (count-words-region (point-min) (point-max))))))))

  :general
  ("A-H-c" 'ps/count-words-dwim
   "C-A-e" 'eval-expression
   "C-e" 'eval-last-sexp
   "H-M"  'ps/exchange-point-and-mark
   "H-m" 'set-mark-command
   "H-Z" 'undo-redo
   "M-A-i" 'visual-line-mode
   "M-o" 'downcase-dwim
   "M-q" 'save-buffers-kill-terminal
   "M-u" 'capitalize-dwim
   "M-v" 'ps/visible-mode-enhanced
   "M-w" 'count-words-region
   "H-z" 'undo-only))
#+end_src

** repeat
:PROPERTIES:
:ID:       000730A4-2F70-4842-BD3E-2B843875D6EB
:END:

#+begin_src emacs-lisp :results silent
(use-feature repeat
  :demand t
  :general
  ("M-r" 'repeat
   "A-M-r" 'repeat-complex-command))
#+end_src

** view
:PROPERTIES:
:ID:       796E696E-E797-4EDF-B4AC-2436507A1EFC
:END:

#+begin_src emacs-lisp :results silent
(use-feature view
  :demand t
  :general
  ("M-A-v" 'view-mode))
#+end_src

** indent
:PROPERTIES:
:ID:       584EE793-F2D0-4C21-A3C2-FF93C5B5F2F1
:END:
[2022-10-03 Mon 23:34] ~use-feature indent~ fails. The variable ~features~ doesn't list an ~indent~ feature, but the relevant variables and functions /are/ defined in ~indent.el.gz~!

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq tab-always-indent 'complete)

  ;; Adapted from `spacemacs/indent-region-or-buffer'.
  (defun ps/indent-dwim ()
    "Indent a region if selected, otherwise if point is on code block
indent block only, else indent whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (if (when (derived-mode-p 'org-mode)
              (org-in-src-block-p))
            (let ((org-src-tab-acts-natively t))
              (org-narrow-to-block)
              (indent-region (point-min) (point-max) nil)
              (ps/org-widen-and-reveal))
          (indent-region (point-min) (point-max) nil)
          (message "Indented buffer.")))
      (whitespace-cleanup)))

  :general
  ("M-i" 'ps/indent-dwim))
#+end_src

** sort
:PROPERTIES:
:ID:       64011AE8-B6DF-413B-A8CD-EF4E133272BD
:END:

#+begin_src emacs-lisp :results silent
(use-feature sort
  :demand t
  :config
  (setq sort-fold-case t)

  :general
  ("C-t" 'sort-lines))
#+end_src

** vundo
:PROPERTIES:
:ID:       616AD0A8-0098-4147-927E-E2A47B18A65E
:END:

/[[https://github.com/casouri/vundo][vundo]] displays the undo history as a tree./

#+begin_src emacs-lisp
(use-package vundo
  :demand t
  :general
  (vundo-mode-map
   "j" 'vundo-backward
   ";" 'vundo-forward
   "k" 'vundo-previous
   "l" 'vundo-next))
#+end_src

** outline
:PROPERTIES:
:ID:       286464A9-EB12-4351-A980-D9D837BDEABB
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 11:33]--[2021-06-05 Sat 11:49] =>  0:16
CLOCK: [2021-05-31 Mon 21:21]--[2021-05-31 Mon 21:27] =>  0:06
CLOCK: [2021-04-02 Fri 16:48]--[2021-04-02 Fri 16:59] =>  0:11
CLOCK: [2021-03-28 Sun 08:40]--[2021-03-28 Sun 10:35] =>  1:55
CLOCK: [2021-03-27 Sat 18:01]--[2021-03-27 Sat 19:53] =>  1:52
CLOCK: [2021-06-06 Sun 13:00]--[2021-06-06 Sun 13:19] =>  0:19
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/outline)
(use-feature outline
  :demand t

  :config
  (add-hook 'prog-mode-hook #'outline-minor-mode)

  :general
  ((outline-mode-map outline-minor-mode-map)
   "TAB" 'outline-cycle
   "<backtab>" 'outline-cycle-buffer
   "A-C-s-r" 'outline-backward-same-level
   "A-C-s-f" 'outline-forward-same-level))
#+end_src

** fill
:PROPERTIES:
:ID:       FC4A89FD-8A66-49A6-ADB3-7895A85CBFD0
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 08:57]--[2021-09-29 Wed 09:07] =>  0:10
:END:

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :init
  (setq-default fill-column 72)
  ;; endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
  (defun ps/fill-or-unfill-paragraph ()
    "Like `fill-paragraph', but unfill if used twice."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ps/fill-or-unfill-paragraph)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  :general
  ("A-M-f" 'ps/fill-or-unfill-paragraph))
#+end_src

** unfill
:PROPERTIES:
:ID:       DF5137EA-79B3-4A5F-8D6C-7222CD8D4F4A
:END:

/[[https://github.com/purcell/unfill][unfill]] provides functions to do the reverse of ~fill-paragraph~ and ~fill-region~./

#+begin_src emacs-lisp
(use-package unfill)
#+end_src

** abbrev
:PROPERTIES:
:ID:       2D69896F-CF17-4D0C-BEFE-E7C473FB1C2B
:END:

#+begin_src emacs-lisp :results silent
(use-feature abbrev
  :demand t
  :config
  (setq save-abbrevs 'silently)
  (setq abbrev-file-name (file-name-concat ps/dir-abbrev "abbrev_defs"))
  ;; (setq abbrev-suggest t)
  ;; (setq abbrev-suggest-hint-threshold 0)
  (setq-default abbrev-mode t)
  ;; do not look up abbrevs with case folding; e.g. `EA' will not expand an `ea' abbrev
  (abbrev-table-put global-abbrev-table :case-fixed t)
  (abbrev-table-put text-mode-abbrev-table :case-fixed t))
#+end_src

*** TODO Make abbrevs local
:PROPERTIES:
:ID:       D54BEE93-6514-46A0-879F-9F93381CE41B
:END:
:LOGBOOK:
CLOCK: [2023-04-24 Mon 08:58]--[2023-04-24 Mon 09:20] =>  0:22
:END:
To remove an abbrev definition, give a negative argument to the abbrev definition command: C-u - C-x a g or C-u - C-x a l. The former removes a global definition, while the latter removes a mode-specific definition. M-x kill-all-abbrevs removes all abbrev definitions, both global and local.

*** TODO Set up Emacs abbrevs
:PROPERTIES:
:ID:       A0B65562-6C61-4212-98B5-4FE8FB60E78F
:END:
:LOGBOOK:
CLOCK: [2023-04-22 Sat 17:23]--[2023-04-22 Sat 17:57] =>  0:34
:END:

** yasnippet
:PROPERTIES:
:ID:       6405B8E7-6612-4D71-8C2C-A51F8808F4C6
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 12:10]--[2023-03-27 Mon 12:40] =>  0:30
CLOCK: [2022-10-01 Sat 13:23]--[2022-10-01 Sat 13:26] =>  0:03
CLOCK: [2021-11-11 Thu 14:05]--[2021-11-11 Thu 14:09] =>  0:04
CLOCK: [2021-10-28 Thu 19:00]--[2021-10-28 Thu 19:56] =>  0:56
CLOCK: [2021-10-13 Wed 21:01]--[2021-10-13 Wed 21:13] =>  0:12
CLOCK: [2021-10-02 Sat 14:55]--[2021-10-02 Sat 15:48] =>  0:53
CLOCK: [2021-06-01 Tue 17:08]--[2021-06-01 Tue 17:30] =>  0:22
CLOCK: [2021-03-16 Tue 17:07]--[2021-03-16 Tue 17:24] =>  0:17
CLOCK: [2021-08-14 Sat 10:36]--[2021-08-14 Sat 10:49] =>  0:13
CLOCK: [2021-07-29 Thu 19:15]--[2021-07-29 Thu 19:22] =>  0:07
CLOCK: [2021-07-26 Mon 20:38]--[2021-07-26 Mon 20:39] =>  0:01
CLOCK: [2021-07-24 Sat 10:00]--[2021-07-24 Sat 10:21] =>  0:21
CLOCK: [2021-06-25 Fri 15:35]--[2021-06-25 Fri 16:19] =>  0:44
CLOCK: [2021-06-23 Wed 21:05]--[2021-06-23 Wed 21:14] =>  0:09
CLOCK: [2021-05-05 Wed 20:55]--[2021-05-05 Wed 21:05] =>  0:10
CLOCK: [2021-04-05 Mon 15:35]--[2021-04-05 Mon 15:49] =>  0:14
CLOCK: [2021-04-04 Sun 21:36]--[2021-04-04 Sun 22:00] =>  0:24
CLOCK: [2021-04-04 Sun 20:52]--[2021-04-04 Sun 21:35] =>  0:43
CLOCK: [2021-03-20 Sat 12:15]--[2021-03-20 Sat 12:17] =>  0:02
CLOCK: [2021-03-07 Sun 11:00]--[2021-03-07 Sun 11:01] =>  0:01
CLOCK: [2021-02-04 Thu 21:02]--[2021-02-04 Thu 21:19] =>  0:17
:END:

/[[https://github.com/joaotavora/yasnippet][yasnippet]] is a template system for Emacs./

#+begin_src emacs-lisp :results silent
(use-package yasnippet
  :defer 5
  :config
  (setq yas-snippet-dirs (list ps/dir-yasnippets
                               ps/dir-yasnippets-private
                               (file-name-concat user-emacs-directory "elpaca/builds/yasnippet-snippets/snippets")))
  (setq yas-triggers-in-field t) ; allow stacked expansions

  (yas-global-mode)
  (yas-reload-all)

  ;; FIXME: this isn't working properly, unlike the `ps/yasnippet-expand-by-key' command
  (defun ps/yasnippet-expand-by-name (name)
    "Expand the yasnippet named `snippet'."
    (yas-expand-snippet (yas-lookup-snippet name)))

  (defun ps/yasnippet-expand-by-key (key)
    "Expand snippet whose key is KEY."
    (interactive)
    ;; `progn' wrapper needed to suppress elisp output when snippet triggered within another snippet
    ;; TODO: figure why this still fails when the snippet being triggered contains elisp code
    (progn
      (insert key)
      (yas-expand)
      nil))

  (setq yas-new-snippet-default (concat "# -*- mode: snippet -*-\n# name: $1\n# key: ${2:${1:$(ps/first-char-of-each-letter yas-text)}}\n# contributor: " ps/personal-name "\n# --\n$0"))

  (defvar ps/yas-new-snippet-tlon "# -*- mode: snippet -*-\n# name: tlon-${1:name-of-snippet}\n# key: t${2:shortcut}\n#contributor: ${3: \n# --\n$0\\`(ps/insert-date)\\` \\$1\n	${4:account1}:\\$5  \\$2.00 \\${3:$$(yas-completing-read \"Currency: \" ps/ledger-active-currencies)} ; \\$4\n	${4:account2}:")

  (add-hook 'minibuffer-setup-hook #'yas-minor-mode)


  :general
  ("C-y" 'yas-new-snippet)
  (minibuffer-mode-map
   "TAB" 'yas-maybe-expand))
#+end_src

** yasnippet-snippets
:PROPERTIES:
:ID:       E3499A47-009A-4A52-9134-2067C79FFBC8
:END:

/[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] is a public repository of yasnippet snippets./

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :demand t)
#+end_src

** hippie-expand
:PROPERTIES:
:ID:       06396799-A9FB-4417-AAE3-3654BC901B93
:END:

#+begin_src emacs-lisp :results silent
(use-feature hippie-exp
  :config
  ;; stackoverflow.com/a/8723712/4479455
  (defadvice hippie-expand (around hippie-expand-case-fold)
    "Try to do case-sensitive matching (not effective with all functions)."
    (let ((case-fold-search nil))
      ad-do-it))
  (ad-activate 'hippie-expand)

  :general
  ("M-<tab>" 'hippie-expand))
#+end_src

** expand-region
:PROPERTIES:
:ID:       8C9AE82C-9B5D-44D7-8FEE-1738032AD3C0
:END:
:LOGBOOK:
CLOCK: [2022-10-03 Mon 19:53]--[2022-10-03 Mon 22:42] =>  2:49
CLOCK: [2021-06-03 Thu 15:47]--[2021-06-03 Thu 16:04] =>  0:17
:END:

/[[https://github.com/magnars/expand-region.el][expand-region]] incrementally selects regions by semantic units./

#+begin_src emacs-lisp :results silent
(use-package expand-region
  :general
   ("C-H-s-n" 'er/expand-region
   "C-H-s-h" 'er/contract-region))
#+end_src

** newcomment
:PROPERTIES:
:ID:       C079E18F-8A96-4A3E-8024-C0F9E29CD182
:END:

#+begin_src emacs-lisp
(use-feature newcomment
  :general
  ("M-/" 'comment-line))
#+end_src

** skeleton
:PROPERTIES:
:ID:       FCF33E87-02CA-4244-9220-D7E6CEE7F7EF
:END:

#+begin_src emacs-lisp
(use-feature skeleton
  :demand t
  :config
  (setq skeleton-pair t)

  :general
  ("[" 'skeleton-pair-insert-maybe
   "{" 'skeleton-pair-insert-maybe
   "(" 'skeleton-pair-insert-maybe
   "\"" 'skeleton-pair-insert-maybe)
  ((org-mode-map telega-chat-mode-map)
   "~" 'skeleton-pair-insert-maybe)
  (markdown-mode-map
   "`" 'skeleton-pair-insert-maybe
   "*" 'skeleton-pair-insert-maybe))
#+end_src

** multiple-cursors
:PROPERTIES:
:ID:       E3F6EB63-D6C1-474C-9129-B6424852EEC8
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:17] =>  0:00
:END:

/[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] supports multiple cursors in Emacs./

#+begin_src emacs-lisp :results silent
(use-package multiple-cursors
  :general
  ("M-m" 'mc/mark-pop))
#+end_src

** crux
:PROPERTIES:
:ID:       B7CD0E70-E601-4EEC-B51F-82F94ECA32BA
:END:
:LOGBOOK:
CLOCK: [2022-06-08 Wed 17:31]--[2022-06-08 Wed 17:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:18] =>  0:01
:END:

/[[https://github.com/bbatsov/crux][crux]] is a "collection of ridiculously useful extensions"./

#+begin_src emacs-lisp :results silent
(use-package crux
  :general
  ("M-l" 'crux-smart-open-line
   "M-A-l" (lambda! (ps/crux-smart-open-line t))
   "A-H-l" 'crux-duplicate-current-line-or-region))
#+end_src

** button
:PROPERTIES:
:ID:       38C9C0A7-5979-4656-879D-F71638FCF40D
:END:

#+begin_src emacs-lisp :results silent
(use-feature button
  :demand t
  :general
  ("A-C-M-s-j" 'backward-button
   "A-C-M-s-;" 'forward-button)
  (telega-chat-mode-map
   "M-RET" 'push-button))
#+end_src

** back-button
:PROPERTIES:
:ID:       59041577-18F8-4336-80FF-4CC8C7AA7814
:END:

/[[https://github.com/rolandwalker/back-button][back-button]] supports navigating the mark ring forward and backward./

#+begin_src emacs-lisp :results silent
(use-package back-button
  :config
  (back-button-mode 1)
  :general
  ("H-," 'back-button-local-backward
   "H-." 'back-button-local-forward
   "H-<" 'back-button-global-backward
   "H->" 'back-button-global-forward))
#+end_src

** goto-last-change
:PROPERTIES:
:ID:       DD6DA81B-89B8-4881-A901-200A8CAF1974
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:18]--[2021-06-25 Fri 21:19] =>  0:01
:END:

/[[https://github.com/camdez/goto-last-change.el][goto-last-change]] moves point through buffer-undo-list positions./

#+begin_src emacs-lisp :results silent
(use-package goto-last-change
  :general
  ("C-z" 'goto-last-change))
#+end_src

** goto-addr
:PROPERTIES:
:ID:       29DA9B62-C7A6-4B53-B49C-BE2C47D0F3AF
:END:

/goto-addr activate URLs and e-mail addresses in buffers./

#+begin_src emacs-lisp
(use-feature goto-addr
  :demand t
  :config
  (global-goto-address-mode))
#+end_src

* registers & bookmarks
:PROPERTIES:
:ID:       E40A01AD-2B18-4B98-83E9-5E78D1E7195F
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 16:15]--[2021-07-29 Thu 16:23] =>  0:08
CLOCK: [2021-04-05 Mon 15:34]--[2021-04-05 Mon 15:35] =>  0:01
:END:

** registers
:PROPERTIES:
:ID:       893A2A5B-707A-4C9A-9E25-414DC663F2CD
:END:

:LOGBOOK:
CLOCK: [2021-07-30 Fri 21:35]--[2021-07-30 Fri 22:18] =>  0:43
CLOCK: [2021-07-30 Fri 21:16]--[2021-07-30 Fri 21:31] =>  0:15
:END:

#+begin_src emacs-lisp :results silent
(use-feature register
  :demand t
  :config
  (defhydra hydra-register
  (:hint nil
  :color blue)
    "
_c_opy        |_n_umber      |p_o_int
_i_nsert      |incremen_t_   |_j_ump        |   _f_rame    | _l_ist
------------^^+------------^^+------------^^+  frame_s_et  + _v_iew       ||_q_uit||
_p_repend     |_r_ectangle   |_u_ndo        |   _w_indow   | _h_elm
_a_pend       |_k_macro      |r_e_store                    "
    ;; text
    ("c" copy-to-register)
    ("i" insert-register)
    ("p" prepend-to-register)
    ("a" append-to-register)
    ;; number
    ("n" number-to-register)
    ("t" increment-register)
    ;; rectangle/kmacro
    ("r" copy-rectangle-to-register)
    ("k" kmacro-to-register)
    ;; position
    ("o" point-to-register)
    ("j" jump-to-register)
    ;; undo
    ("u" undo-tree-save-state-to-register)
    ("e" undo-tree-restore-state-from-register)
    ;; windows
    ("w" window-configuration-to-register)
    ("f" frame-configuration-to-register)
    ("s" frameset-to-register)
    ;; view
    ("v" view-register)
    ("l" list-registers)
    ("h" consult-register)
    ("q" nil))
  :general
  ("C-r" 'hydra-register/body))
#+end_src

** bookmarks
:PROPERTIES:
:ID:       943D5DC0-7F0E-449C-8D21-089E051F1027
:END:

#+begin_src emacs-lisp :results silent
(use-feature bookmark
  :demand t
  :config
  (setq bookmark-default-file ps/file-bookmarks) ; Set location of bookmarks file
  (setq bookmark-save-flag 1)) ; Save bookmarks after each entry
#+end_src

* files & buffers
:PROPERTIES:
:ID:       B29F4586-2B8D-41FE-82DE-FEDCD863C74B
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:05]--[2022-07-14 Thu 20:14] =>  0:09
CLOCK: [2022-07-09 Sat 20:43]--[2022-07-09 Sat 21:51] =>  1:08
CLOCK: [2022-06-12 Sun 13:10]--[2022-06-12 Sun 13:15] =>  0:05
CLOCK: [2022-06-10 Fri 21:15]--[2022-06-10 Fri 22:23] =>  1:08
CLOCK: [2022-05-15 Sun 10:34]--[2022-05-15 Sun 12:02] =>  1:28
CLOCK: [2022-05-15 Sun 10:25]--[2022-05-15 Sun 10:34] =>  0:09
CLOCK: [2022-05-05 Thu 23:03]--[2022-05-05 Thu 23:31] =>  0:28
CLOCK: [2021-12-03 Fri 19:50]--[2021-12-03 Fri 20:15] =>  0:25
CLOCK: [2021-11-19 Fri 20:55]--[2021-11-19 Fri 21:02] =>  0:07
CLOCK: [2021-10-20 Wed 20:49]--[2021-10-20 Wed 21:01] =>  0:12
CLOCK: [2021-09-26 Sun 21:50]--[2021-09-26 Sun 22:07] =>  0:17
CLOCK: [2021-09-26 Sun 19:31]--[2021-09-26 Sun 20:06] =>  0:35
CLOCK: [2021-09-18 Sat 19:01]--[2021-09-18 Sat 19:15] =>  0:14
CLOCK: [2021-08-17 Tue 09:05]--[2021-08-17 Tue 09:22] =>  0:17
CLOCK: [2021-07-25 Sun 12:58]--[2021-07-25 Sun 13:03] =>  0:05
CLOCK: [2021-06-09 Wed 21:29]--[2021-06-09 Wed 21:36] =>  0:07
CLOCK: [2021-06-10 Thu 19:20]--[2021-06-10 Thu 19:46] =>  0:26
CLOCK: [2021-05-27 Thu 07:31]--[2021-05-27 Thu 07:45] =>  0:14
CLOCK: [2021-05-21 Fri 18:03]--[2021-05-21 Fri 18:12] =>  0:09
CLOCK: [2021-05-20 Thu 18:17]--[2021-05-20 Thu 18:21] =>  0:04
CLOCK: [2021-04-07 Wed 16:18]--[2021-04-07 Wed 16:25] =>  0:07
CLOCK: [2021-04-05 Mon 09:14]--[2021-04-05 Mon 09:20] =>  0:06
CLOCK: [2021-04-03 Sat 10:07]--[2021-04-03 Sat 10:19] =>  0:12
CLOCK: [2021-04-02 Fri 11:08]--[2021-04-02 Fri 11:14] =>  0:06
CLOCK: [2021-04-02 Fri 10:10]--[2021-04-02 Fri 10:40] =>  0:30
CLOCK: [2021-04-02 Fri 09:48]--[2021-04-02 Fri 10:02] =>  0:14
CLOCK: [2021-03-30 Tue 09:02]--[2021-03-30 Tue 09:10] =>  0:08
CLOCK: [2021-03-23 Tue 18:00]--[2021-03-23 Tue 18:38] =>  0:38
CLOCK: [2021-03-22 Mon 21:49]--[2021-03-22 Mon 22:38] =>  0:49
CLOCK: [2021-04-09 Fri 11:49]--[2021-04-09 Fri 11:49] =>  0:00
:END:

** files
:PROPERTIES:
:ID:       A7E824CC-5E71-4B12-A99B-D4C09CE164FF
:END:
:LOGBOOK:
CLOCK: [2023-04-12 Wed 12:43]--[2023-04-12 Wed 12:47] =>  0:04
CLOCK: [2023-02-22 Wed 21:58]--[2023-02-22 Wed 23:59] =>  2:01
CLOCK: [2022-08-19 Fri 13:45]--[2022-08-19 Fri 13:47] =>  0:02
CLOCK: [2021-07-24 Sat 21:09]--[2021-07-24 Sat 21:34] =>  0:25
CLOCK: [2021-07-24 Sat 20:41]--[2021-07-24 Sat 20:46] =>  0:05
CLOCK: [2021-07-01 Thu 20:45]--[2021-07-01 Thu 20:55] =>  0:10
CLOCK: [2021-02-07 Sun 13:37]--[2021-02-07 Sun 13:54] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature files
  :demand t
  :config
  (setq confirm-kill-processes nil) ; Do not prompt to kill running processes when quitting Emacs
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash") ; fallback for `move-file-to-trash'
  (setq find-file-visit-truename t)
  ;; emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  (setq kill-buffer-query-functions nil)
  (setq create-lockfiles nil) ; lockfiles are indexed by `org-roam', which causes problems with `org-agenda'
  (setq large-file-warning-threshold (* 200 1000 1000))
  (setq enable-local-variables :all)
  (setq insert-directory-program "/opt/homebrew/bin/gls") ; use coreutils to avoid 'listing directory failed' error
  (setq auto-save-no-message t) ; don't emit message when auto-saving
  (setq backup-by-copying t) ; don't clobber symlink
  (setq kept-new-versions 100) ; keep 100 latest versions
  (setq kept-old-versions 10) ; keep 10 earliest versions
  (setq delete-old-versions t) ; don't ask about deleting old versions
  (setq version-control t) ; number backups

  (add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))

  ;; christiantietze.de/posts/2021/06/emacs-trash-file-macos/
  (defun system-move-file-to-trash (path)
    "Moves file at PATH to the macOS Trash according to `move-file-to-trash' convention.

Requires the command-line utility `trash' (`brew install trash')."
    (shell-command (concat "trash -vF \"" path "\""
                           "| sed -e 's/^/Trashed: /'")
                   nil ;; Name of output buffer
                   "*Trash Error Buffer*"))

  (defun ps/save-and-revert-buffer ()
    "Save buffer, then revert it."
    (interactive)
    (save-buffer)
    (revert-buffer nil t))

  (defun ps/bury-scratch-buffer ()
    "When trying to kill `*scratch' buffer, bury it instead."
    (if (not (equal (buffer-name) "*scratch*"))
        t
      (bury-buffer)
      nil))

  (add-hook 'kill-buffer-query-functions #'ps/bury-scratch-buffer)

  ;; Adapted from `spacemacs/new-empty-buffer'.
  (defun ps/new-empty-buffer (&optional)
    "Create a new buffer called `untitled<n>'."
    (interactive)
    (let ((newbuf (generate-new-buffer "untitled")))
      ;; Prompt to save on `save-some-buffers' with positive PRED
      (with-current-buffer newbuf
        (setq-local buffer-offer-save t)
        (when ps/new-empty-buffer-major-mode
          (funcall ps/new-empty-buffer-major-mode)))
      (switch-to-buffer newbuf nil 'force-same-window)))


  (defun ps/new-buffer-in-current-mode ()
    "Create a new buffer in the same major mode
as the current buffer."
    (interactive)
    (let ((buffer-name (generate-new-buffer "untitled"))
          (buffer-major-mode major-mode))
      (cond ((eq buffer-major-mode 'shell-mode)
             (shell))
            ((eq buffer-major-mode 'eshell-mode)
             (eshell))
            (t
             ;; Prompt to save on `save-some-buffers' with positive PRED
             (with-current-buffer buffer-name
               (setq-local buffer-offer-save t)
               (funcall buffer-major-mode))
             (switch-to-buffer buffer-name nil 'force-same-window)))))

  (defun ps/save-all-buffers ()
    "Save all file-visiting buffers."
    (interactive)
    (save-some-buffers
     `(4)))

  (defun ps/visit-file-or-switch-to-buffer (thing)
    "Visit file or switch to corresponding file-visiting buffer."
    (interactive)
    (if (get-buffer thing)
        (switch-to-buffer thing)
      (find-file thing)))

  (defun ps/org-show-subtree-hide-drawers ()
    (outline-hide-subtree)
    (org-show-entry)
    (org-show-children))

  (defun ps/org-narrow-to-entry-and-children ()
    "Narrow org buffer to entry and all its children."
    (interactive)
    (org-narrow-to-subtree)
    (ps/org-show-subtree-hide-drawers))

  (defun ps/org-narrow-to-entry-no-children ()
    "Narrow org buffer to entry excluding all children."
    (interactive)
    (org-narrow-to-subtree)
    (save-excursion
      (org-next-visible-heading 1)
      (narrow-to-region (point-min) (point))))

  (defun ps/org-widen-and-reveal ()
    "Widen and reveal subtree."
    (interactive)
    (widen)
    (org-reveal nil))

  (defun ps/eval-region-or-buffer ()
    "Evaluate a region if selected, otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (eval-region (region-beginning) (region-end))
      (eval-buffer)))

  (defun ps/get-alternate-buffer ()
    "Return name of last buffer active in the current window."
    (let ((current-buffer (window-buffer))
          (buffer-predicate
           (frame-parameter (window-frame) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (or (cl-find-if (lambda (buffer)
                        (and (not (eq buffer current-buffer))
                             (or (null buffer-predicate)
                                 (funcall buffer-predicate buffer))))
                      (mapcar #'car (window-prev-buffers)))
          ;; `other-buffer' honors `buffer-predicate' so no need to filter
          (other-buffer current-buffer t))))

  (defun ps/switch-to-alternate-buffer ()
    "Switch to the last buffer active in the current window."
    (interactive)
    (switch-to-buffer (ps/get-alternate-buffer)))

  ;; reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/
  (defun ps/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun ps/kill-other-buffer ()
    "Kill the buffer in the other window."
    (interactive)
    (save-window-excursion
      (other-window 1)
      (ps/kill-this-buffer)))

  (defun ps/kill-this-buffer-switch-to-other-window ()
    "Kill the current buffer and switch to the other window."
    (interactive)
    (ps/kill-this-buffer)
    (ps/switch-to-last-window))

  (defun ps/kill-all-file-visiting-buffers (&optional excluded-files)
    "Kill all open buffers visiting a file, with the exception of
those visiting any of the EXCLUDED-FILES."
    (interactive)
    (dolist (buffer (buffer-list))
      (when (with-current-buffer buffer
              (and (buffer-file-name)
                   (not (member (buffer-file-name) excluded-files))))
        (kill-buffer buffer))))

  (defun ps/bury-buffer-switch-to-other-window ()
    "Bury the current buffer and switch to the other window."
    (interactive)
    (bury-buffer)
    (ps/switch-to-last-window))

  (defun ps/download-bypass-paywalls-chrome ()
    "Download and install `bypass-paywalls-chrome'."
    (interactive)
    (let ((file (file-name-concat ps/dir-downloads "bypass-paywalls.zip")))
      (url-copy-file "https://github.com/iamadamdev/bypass-paywalls-chrome/archive/master.zip" file)
      (shell-command (format "unzip %s -d %s" file ps/dir-downloads))
      (dired ps/dir-downloads)
      (goto-char (point-min))
      (search-forward "bypass-paywalls-chrome-master")
      (reveal-in-osx-finder)
      (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"89243CDA-4876-45C8-9AF2-3666664A0EAA\"'")))

  (defun ps/internet-archive-dwim ()
    "Convert or download ACSM file, depending on whether or not an
ACSM file is present in `ps/dir-downloads'."
    (interactive)
    (if (member "book.acsm" (directory-files ps/dir-downloads))
        (ps/internet-archive-convert-ACSM)
      (ps/internet-archive-download-ACSM)))

  (defun ps/internet-archive-download-ACSM ()
    "Download and open ACSM file from Internet Archive URL in kill
ring.

NB: You need to have previously borrowed the book for the command
to work. The command will work even if the book was borrowed for
one hour only."
    (if (string-search "archive.org" (current-kill 0))
        (let* ((prefix "https://archive.org/services/loans/loan/?action=media_url&identifier=")
               (suffix "&format=pdf&redirect=1")
               (id (replace-regexp-in-string
                    "\\(http.*?details/\\)\\([_[:alnum:]]*\\)\\(.*\\)"
                    "\\2"
                    (current-kill 0)))
               (url (concat prefix id suffix))
               (acsm-file (file-name-concat ps/dir-downloads "book.acsm")))
          ;; Download the Internet Archive cookies to a file so `wget' can authenticate:
          ;; askubuntu.com/questions/161778/how-do-i-use-wget-curl-to-download-from-a-site-i-am-logged-into
          ;; Then replace the path below with the location of the downloaded cookies file.
          (save-window-excursion
            (let ((shell-command-buffer-name-async "*internet-archive-download-ACSM*"))
              (async-shell-command
               (format
                "wget --load-cookies='%s' '%s' -O '%s'; open %s"
                ps/file-cookies url acsm-file acsm-file))))
          (message "ACSM file downloaded successfully."))
      (user-error "You forgot to copy the URL!")))

  (defun ps/internet-archive-convert-ACSM ()
    "Convert ACSM file to PDF."
    (let* ((adobe-file
            ;; stackoverflow.com/a/30887300/4479455
            (car (directory-files (file-name-as-directory ps/dir-ade) 'full "\\.pdf$" #'file-newer-than-file-p)))
           (output (shell-command-to-string (format "calibredb add '%s'" adobe-file)))
           ;; Capture Calibre book id
           (id (replace-regexp-in-string "\\(\\(\\(
\\|.\\)*\\)Added book ids: \\)\\([[:digit:]]\\)" "\\4" output))
           (calibre-file (car (directory-files-recursively ps/dir-calibre "\\.pdf$" t)))
           ;; Should match filename used in `ps/internet-archive-download-ACSM'
           (acsm-file (file-name-concat ps/dir-downloads "book.acsm")))
      (rename-file calibre-file (file-name-as-directory ps/dir-downloads))
      (shell-command (format "calibredb remove %s" id))
      (mapcar #'delete-file `(,adobe-file ,calibre-file))
      (delete-directory ps/dir-calibre t)
      (kill-buffer "*Shell Command Output*")
      (when (find-file acsm-file)
        (delete-file acsm-file)
        (kill-buffer))
      (message "ACSM file converted successfully.")))

  ;; Copied from emacs.stackexchange.com/a/24461/32089
  (defun ps/revert-all-file-buffers ()
    "Refresh all open file buffers without confirmation.
Buffers in modified (not yet saved) state in emacs will not be
reverted. They will be reverted though if they were modified
outside emacs. Buffers visiting files which do not exist any more
or are no longer readable will be killed."
    (interactive)
    (dolist (buf (buffer-list))
      (let ((filename (buffer-file-name buf)))
        ;; Revert only buffers containing files, which are not modified;
        ;; do not try to revert non-file buffers like *Messages*.
        (when (and filename
                   (not (buffer-modified-p buf)))
          (if (file-readable-p filename)
              ;; If the file exists and is readable, revert the buffer.
              (with-current-buffer buf
                (revert-buffer :ignore-auto :noconfirm :preserve-modes))
            ;; Otherwise, kill the buffer.
            (let (kill-buffer-query-functions) ; No query done when killing buffer
              (kill-buffer buf)
              (message "Killed non-existing/unreadable file buffer: %s" filename))))))
    (message "Finished reverting buffers containing unmodified files."))

  (defun ps/show-buffer-name ()
    "Show the full path to the current file in the minibuffer."
    (interactive)
    (let ((buffer-name (buffer-name)))
      (if buffer-name
          (progn
            (message buffer-name)
            (kill-new buffer-name))
        (error "Buffer not visiting a file"))))

  ;; On MacOS, `DS_Store' files can interfere with this command.
  (defun ps/newest-file (path)
    "Get latest file in PATH, excluding `.DS_Store` and `.localized` files."
    (car
     (seq-find
      #'(lambda (x)
          (let ((file-name (file-name-nondirectory (car x))))
            (and (not (nth 1 x)) ; non-directory
                 (not (string= file-name ".DS_Store"))
                 (not (string= file-name ".localized")))))
      (sort
       (directory-files-and-attributes path 'full nil t)
       #'(lambda (x y) (time-less-p (nth 5 y) (nth 5 x)))))))

  (defun ps/switch-to-most-recent-buffer-in-mode (mode)
    "Switch to the most recent buffer in major mode MODE."
    (let (found)
      (catch 'done
        (mapc (lambda (x)
                (when (with-current-buffer x (eq major-mode mode))
                  (switch-to-buffer x)
                  (setq found t)
                  (throw 'done nil)))
              (buffer-list))
        (unless found
          (print "not found")))))

  ;; stackoverflow.com/questions/21486934/file-specific-key-binding-in-emacs/21493693#21493693
  (defun ps/buffer-local-set-key (key command)
    (interactive "KSet key buffer-locally: \nCSet key %s buffer-locally to command: ")
    (let ((oldmap (current-local-map))
          (newmap (make-sparse-keymap)))
      (when oldmap
        (set-keymap-parent newmap oldmap))
      (define-key newmap key command)
      (use-local-map newmap)))

  (defun ps/ocr-pdf (&optional parameters)
    "OCR the PDF file at point or visited by the current buffer."
    (interactive)
    ;; TODO: add disjunct to handle file at point in minibuffer.
    (let* ((filename (cond ((equal major-mode 'dired-mode) (dired-get-filename))
                           ((equal major-mode 'pdf-view-mode) (buffer-file-name))))
           (parameters (or parameters
                           (format "--force '%s' '%s'" filename filename)))
           (shell-command-buffer-name-async "*ocr-pdf*"))
      (async-shell-command (concat "ocrmypdf " parameters))))

  ;; we add `*ocr-pdf' buffer to list of buffers not to be displayed,
  ;; so that the process runs in the background`
  (push '("*ocr-pdf*" display-buffer-no-window) display-buffer-alist)

  ;; Disable `dired-hide-details-mode' so that session dates are shown
  ;; when `recover-session' is invoked.
  (advice-add 'recover-session :after #'(lambda () (dired-hide-details-mode -1)))

  (defun ps/get-stem-of-current-buffer ()
    "Return the stem of the current buffer."
    (when-let ((file-name buffer-file-name))
      (file-name-base file-name)))

  (defun ps/bollp ()
    "Return t if point is at the beginning of the last line."
    (let ((beginning-of-last-line
           (save-excursion
             (end-of-buffer)
             (beginning-of-line)
             (point))))
      (>= (point) beginning-of-last-line)))

  (defun ps/recover-all-files ()
    "Scan all files in the `auto-save' directory for files with
auto-save data and recover them.

One normally uses `recover-session' for this, but when Emacs
crashes a session may fail to be created and then each file has
to be recovered separately. This command automates the recovery
process in these cases."
    (interactive)
    (dolist (file (directory-files (file-name-concat ps/dir-chemacs-profiles "var/auto-save")))
      (when-let ((file-to-recover (string-replace "#" "" file)))
        (ignore-errors (recover-file (string-replace "!" "/" file-to-recover)))
        (ps/diff-buffer-with-file))))

  ;; `recover-this-file' notifications are easy to miss. The
  ;; function below triggers a more intrusive alert.
  (defun ps/auto-save-alert ()
    (when (and (not buffer-read-only)
               (file-newer-than-file-p (or buffer-auto-save-file-name
                                           (make-auto-save-file-name))
                                       buffer-file-name)
               (alert (format "%s has auto save data"
                              (file-name-nondirectory buffer-file-name))
                      :title "Auto save detected"
                      :severity 'high))))

  ;; for some reason, `alert' fails to create persistent alerts. so we
  ;; trigger a warning if either `*log4e-alert*' or `*Messages*'
  ;; buffers have logged a message related to `recover-this-file'.
  (defun ps/auto-save-persist ()
    "Prevent killing buffer when auto save data is detected."
    ;; FIXME: This doesn't work
    (alert--log-open-log
     ;; we check both `*log4e-alert*' and `*Messages*' buffers for
     ;; extra safety
     (let ((alert-buffers '(" *log4e-alert*" "*Messages*")))
       (dolist (buffer alert-buffers)
         (when (get-buffer buffer)
           (set-buffer buffer)
           (goto-char (point-min))
           (when (search-forward "has auto save data" nil t)
             (yes-or-no-p "Buffers with auto save data detected. Check `*log4e-alert*' and `*Messages*' for details. Are you sure you want to proceed? "))
           (kill-buffer))))))

  ;; https://emacs.stackexchange.com/a/3778/32089
  (defun ps/diff-buffer-with-file ()
    "Compare the current modified buffer with the saved version."
    (interactive)
    (let ((diff-switches "-u")) ;; unified diff
      (diff-buffer-with-file (current-buffer))))

  (advice-add 'recover-this-file :after #'ps/diff-buffer-with-file)

  ;; disabling until we diagnose issues
  ;; (setq auto-save-visited-predicate
  ;;  (lambda () (string-match "tareas.org" buffer-file-name)))
  ;; (setq auto-save-visited-interval 5)
  ;; (auto-save-visited-mode)

  (add-hook 'find-file-hook #'ps/auto-save-alert)
  ;; (add-hook 'kill-buffer-query-functions #'ps/auto-save-persist)

  :general
  ("M--" 'not-modified
   "M-b" 'ps/save-and-revert-buffer
   "M-e" 'ps/eval-region-or-buffer
   "H-q" 'ps/kill-this-buffer
   "A-H-M-s-q" 'ps/kill-this-buffer-switch-to-other-window
   "A-H-q" 'ps/kill-other-buffer
   "H-n" 'ps/new-empty-buffer
   "H-N" 'ps/new-buffer-in-current-mode
   "H-a" 'mark-whole-buffer
   "H-s" 'save-buffer
   "H-S" 'ps/save-all-buffers
   "A-H-M-s-SPC" 'ps/switch-to-alternate-buffer
   "C-b" 'clone-indirect-buffer-other-window
   "H-C-g" 'abort-recursive-edit
   "H-C-S-g" 'top-level
   "H-C-A-g" 'keyboard-escape-quit ; ESC ESC ESC
   "A-H-v" 'ps/internet-archive-dwim)
  ((dired-mode-map pdf-view-mode-map)
   "s-o" 'ps/ocr-pdf)
  ((ebib-entry-mode-map ebib-index-mode-map messages-buffer-mode-map telega-root-mode-map)
   "H-q" 'bury-buffer
   "q" 'ps/bury-buffer-switch-to-other-window)
  ((apropos-mode-map calendar-mode-map chatgpt-mode-map completion-list-mode-map dired-mode-map Info-mode-map finder-mode-map ledger-reconcile-mode-map mu4e-headers-mode-map pass-mode-map slack-message-buffer-mode-map slack-thread-message-buffer-mode-map special-mode-map telega-msg-button-map tetris-mode-map view-mode-map w3m-mode-map)
   "q" 'ps/kill-this-buffer)
  ;; We typically enter these modes to lookup some information and
  ;; then return to the previous buffer, so we set `q' to switch to
  ;; the other window, and reserve `Q' for the normal behavior
  ((help-mode-map helpful-mode-map osx-dictionary-mode-map)
   "Q" 'ps/kill-this-buffer
   "q" 'ps/kill-this-buffer-switch-to-other-window)
  ((telega-chat-mode-map)
   "s-q" 'ps/kill-this-buffer)
  (pdf-view-mode-map
   "s" 'save-buffer))
#+end_src

** f
:PROPERTIES:
:ID:       4FD6758A-4021-4B05-BD36-BB09C2063C93
:END:

/[[https://github.com/rejeep/f.el][f]] is a modern API for working with files and directories in Emacs./

#+begin_src emacs-lisp :results silent
(use-package f)
#+end_src

** locate
:PROPERTIES:
:ID:       A0784673-AFD3-4111-AF83-C018CB12C897
:END:

#+begin_src emacs-lisp :results silent
(use-feature locate
  :demand t
  :config
  (setq locate-command "mdfind")) ; use the OSX Spotlight backend
#+end_src

** autorevert
:PROPERTIES:
:ID:       B4DE3D43-3085-4FA5-9DA4-1148CF49400C
:END:

#+begin_src emacs-lisp :results silent
(use-feature autorevert
  :demand t
  :config
  (setq auto-revert-use-notify nil) ; reddit.com/r/emacs/comments/mq2znn/comment/gugo0n4/
  (global-auto-revert-mode 1))
#+end_src

** dired
:PROPERTIES:
:ID:       617F5323-6518-4751-948B-3E8032D93130
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:17]--[2022-07-14 Thu 20:31] =>  0:14
CLOCK: [2022-07-03 Sun 21:36]--[2022-07-03 Sun 21:40] =>  0:04
CLOCK: [2022-05-02 Mon 21:26]--[2022-05-02 Mon 21:36] =>  0:10
CLOCK: [2022-05-02 Mon 10:55]--[2022-05-02 Mon 11:55] =>  1:00
CLOCK: [2021-12-19 Sun 09:42]--[2021-12-19 Sun 09:50] =>  0:08
CLOCK: [2021-12-13 Mon 12:51]--[2021-12-13 Mon 13:04] =>  0:13
CLOCK: [2021-12-10 Fri 17:35]--[2021-12-10 Fri 17:45] =>  0:10
CLOCK: [2021-12-04 Sat 16:34]--[2021-12-04 Sat 16:36] =>  0:02
CLOCK: [2021-11-23 Tue 22:42]--[2021-11-23 Tue 23:22] =>  0:40
CLOCK: [2021-10-03 Sun 19:19]--[2021-10-03 Sun 19:50] =>  0:31
CLOCK: [2021-09-28 Tue 14:37]--[2021-09-28 Tue 14:55] =>  0:18
CLOCK: [2021-05-11 Tue 18:03]--[2021-05-11 Tue 18:16] =>  0:13
CLOCK: [2021-03-28 Sun 14:34]--[2021-03-28 Sun 14:51] =>  0:17
CLOCK: [2021-07-23 Fri 16:13]--[2021-07-23 Fri 16:39] =>  0:26
CLOCK: [2021-07-23 Fri 12:49]--[2021-07-23 Fri 14:00] =>  1:11
CLOCK: [2021-07-22 Thu 21:10]--[2021-07-22 Thu 21:31] =>  0:21
CLOCK: [2021-07-08 Thu 14:38]--[2021-07-08 Thu 14:50] =>  0:12
CLOCK: [2021-06-09 Wed 20:51]--[2021-06-09 Wed 21:29] =>  0:38
CLOCK: [2021-05-10 Mon 17:55]--[2021-05-10 Mon 18:23] =>  0:28
CLOCK: [2021-04-25 Sun 14:06]--[2021-04-25 Sun 14:13] =>  0:07
CLOCK: [2021-04-15 Thu 21:53]--[2021-04-15 Thu 22:00] =>  0:07
CLOCK: [2021-04-08 Thu 13:42]--[2021-04-08 Thu 13:51] =>  0:09
CLOCK: [2021-04-06 Tue 21:54]--[2021-04-06 Tue 22:03] =>  0:09
CLOCK: [2021-04-04 Sun 10:14]--[2021-04-04 Sun 10:43] =>  0:29
CLOCK: [2021-04-01 Thu 10:05]--[2021-04-01 Thu 10:41] =>  0:36
CLOCK: [2021-03-31 Wed 20:56]--[2021-03-31 Wed 21:01] =>  0:05
CLOCK: [2021-03-27 Sat 21:30]--[2021-03-27 Sat 21:33] =>  0:03
CLOCK: [2021-03-27 Sat 21:33]--[2021-03-27 Sat 21:50] =>  0:17
:END:

#+begin_src emacs-lisp :results silent
(use-feature dired
  :config
  (setq dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso")
  (setq dired-auto-revert-buffer t)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-no-confirm t) ; never ask for confirmation
  (setq dired-dwim-target t) ; if Dired buffer in other window, use that buffer's current directory as target
  (setq dired-vc-rename-file t)
  (setq dired-do-revert-buffer t)
  (setq dired-create-destination-dirs 'ask)
  (setq dired-guess-shell-alist-user '(("" "open")))
  (setq dired-deletion-confirmer '(lambda (x) t))

  (put 'dired-find-alternate-file 'disabled nil) ; do not disable dired-find-alternate-file!

  (defun ps/dired-copy-filename-as-kill-sans-extension ()
    "Copy name of file at point excluding its extension."
    (interactive)
    (kill-new (file-name-sans-extension (dired-copy-filename-as-kill))))

  ;; from emacswiki.org/emacs/DiredOmitMode
  (defun ps/dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
          (progn
            (set (make-local-variable 'dired-dotfiles-show-p) nil)
            (message "h")
            (dired-mark-files-regexp "^\\\.")
            (dired-do-kill-lines))
        (progn (revert-buffer) ; otherwise just revert to re-show
               (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (defun ps/dired-mark-screenshots ()
    "Mark all screenshot files."
    (interactive)
    (dired-mark-files-regexp "Screenshot [[:digit:]]\\{4\\}-[[:digit:]]\\{2\\}-[[:digit:]]\\{2\\} at [[:digit:]]\\{2\\}.[[:digit:]]\\{2\\}.[[:digit:]]\\{2\\}.png"))

  (defun ps/dired-up-directory-reuse ()
    "Like `dired-up-directory, but reuse current buffer."
    (interactive)
    (find-alternate-file ".."))

  (defun ps/dired-copy-filename-as-kill-absolute ()
    "Copy absolute names of marked (or next ARG) files into the kill
ring."
    (interactive)
    (dired-copy-filename-as-kill '(0)))

  (defun ps/dired-copy-to-remote-docs-directory ()
    "Copy marked files to `stafforini.com/docs'. If no files are
marked, copy file at point instead."
    (interactive)
    (dolist (file (dired-get-marked-files nil nil nil t))
      (shell-command (format "scp '%s' 'ab80508@108.167.182.246:/home2/ab80508/public_html/stafforini.com/docs/'" file)))
    (kill-new (concat "https://stafforini.com/docs/" (dired-copy-filename-as-kill))))

  ;; emacs.stackexchange.com/a/30681/32089
  (define-advice dired-clean-up-after-deletion
      (:around (old-fun &rest r) kill-dired-buffer-quietly)
    (define-advice y-or-n-p (:around (old-fun prompt) just-yes)
      (if (or (string-prefix-p "Kill Dired buffer" prompt)
              (string-prefix-p "Kill buffer of" prompt))
          t
        (funcall old-fun prompt)))
    (unwind-protect (apply old-fun r)
      (advice-remove 'y-or-n-p #'y-or-n-p@just-yes)))

  (defun ps/dired-do-delete-fast (&optional arg)
    "Delete all marked (or next ARG) files, without using the
external `trash' utility. This command let's you delete large
numbers of files quickly, at the expense of losing the 'put back'
option."
    (interactive)
    (cl-letf (((symbol-function 'system-move-file-to-trash) nil))
      (dired-do-delete arg)))

  ;; emacs.stackexchange.com/a/60663/32089
  ;; consider binding this to something
  (defun ps/dired-duplicate-this-file ()
    "Duplicate file at point."
    (interactive)
    (let* ((existing-file (dired-get-filename t))
           (existing-file-stem (file-name-sans-extension existing-file))
           (existing-file-extension (file-name-extension existing-file))
           (counter 1)
           (new-file (format "%s[%d].%s" existing-file-stem counter existing-file-extension)))
      (while (file-exists-p new-file)
        (setq counter (1+ counter)
              new-file (format "%s[%d].%s" existing-file-stem counter existing-file-extension)))
      (copy-file existing-file new-file))
    (revert-buffer))

  (add-hook 'dired-mode-hook #'dired-hide-details-mode) ; hide details by default

  ;; consider binding this to something
  (defun ps/dired-convert-image-to-pdf ()
    "Convert image at point to PDF."
    (interactive)
    (let ((file (buffer-file-name)))
      (shell-command (format "convert '%s' '%s.pdf'" file (file-name-sans-extension file)))
      (message "Converted image to PDF.")))

  :general
  (dired-mode-map
   "<tab>" 'ps/dired-subtree-toggle
   "," 'ps/dired-up-directory-reuse
   ";" 'dired-do-rename
   "-" 'dired-hide-details-mode
   "." 'dired-find-alternate-file
   "'" 'dired-du-mode
   "H-." 'ps/dired-dotfiles-toggle
   "c" 'ps/dired-copy-filename-as-kill-absolute
   "C" 'dired-do-copy
   "C-s" 'dired-isearch-filenames
   "J" 'dired-jump-other-window
   "k" 'dired-previous-line
   "l" 'dired-next-line
   "r" 'dired-toggle-read-only
   "W" 'ps/dired-copy-filename-as-kill-sans-extension
   "z" 'ps/dired-mark-screenshots
   "H-z" 'dired-undo
   "s-d" 'ps/dired-do-delete-fast
   "s-r" 'ps/dired-copy-to-remote-docs-directory
   "A-C-s-," 'dired-prev-dirline
   "A-C-s-." 'dired-next-dirline
   "A-C-s-r" 'dired-prev-marked-file
   "A-C-s-f" 'dired-next-marked-file)
  (pdf-annot-minor-mode-map
   "x" 'dired-jump))
#+end_src

** dired-async
:PROPERTIES:
:ID:       966B615F-69EF-428D-82E5-6E68B64D0FDD
:END:

#+begin_src emacs-lisp
(use-feature dired-async
  :after async dired
  :config
  (dired-async-mode))
#+end_src

** image-dired
:PROPERTIES:
:ID:       E07C1115-1881-4D5F-8B88-613DA4FD38A8
:END:

#+begin_src emacs-lisp :results silent
(use-feature image-dired
  :after dired
  :config
  (setq image-dired-main-image-directory "~/Pictures/")

  (defun ps/image-dired-current-directory ()
    "Run `image-dired' in the current directory."
    (interactive)
    (image-dired (dired-current-directory))
    (image-dired-display-thumbnail-original-image))

  :general
  (image-dired-thumbnail-mode-map
   "k" 'image-dired-display-previous-thumbnail-original
   "l" 'image-dired-display-next-thumbnail-original)
  (dired-mode-map
   "I" 'ps/image-dired-current-directory))
#+end_src

** all-the-icons-dired
:PROPERTIES:
:ID:       53778128-E0F3-4199-9D7D-2118904F39A9
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 10:49]--[2022-07-17 Sun 11:13] =>  0:24
:END:

/[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[id:46EB8CD9-E498-4F80-AC02-A116CFA58799][all-the-icons]]./

#+begin_src emacs-lisp :results silent
(use-package all-the-icons-dired
  :defer 5
  :after all-the-icons dired
  :config
  (setq all-the-icons-dired-monochrome nil)

  (defun ps/all-the-icons-dired-mode-activate ()
    "Define conditions for activation of `all-the-icons-dired-mode'."
    (if (< (length (directory-files default-directory)) 1000)
        (all-the-icons-dired-mode)
      (all-the-icons-dired-mode -1)))

  (add-hook 'dired-mode-hook #'ps/all-the-icons-dired-mode-activate))
#+end_src

** nerd-icons-dired
:PROPERTIES:
:ID:       C3F3F430-4DAE-4C77-907A-84B385CC3CCB
:END:

/[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] adds Dired support to nerd-icons./

[2023-05-23 Tue 11:50] The fonts appeared in a truncated fashion, so I'm disabling for the time being and will continue to use ~all-the-icons~.

#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :disabled
  :config
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))
#+end_src

** wdired
:PROPERTIES:
:ID:       B892CCBB-FB26-48A6-97BE-EF37CE8FB332
:END:

#+begin_src emacs-lisp :results silent
(use-feature wdired
  :demand t
  :config
  (setq wdired-allow-to-change-permissions t)

  :general
  (wdired-mode-map
   "s-c" 'wdired-finish-edit
   "<return>" 'wdired-finish-edit))
#+end_src

** gnus-dired
:PROPERTIES:
:ID:       8AD56019-FF0A-407F-B610-F9F2F4DE1B90
:END:

The code block below, based on [[https://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html][this]], enables ~mu4e~ file attachment directly from a Dired buffer.

#+begin_src emacs-lisp :results silent
(use-feature gnus-dired
  :demand t
  :after dired
  :config/el-patch
  ;; replaces `gnus-dired-mail-buffers' function so it works on
  ;; `message-mode' derived modes, such as `mu4e-compose-mode'
  ;; djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html
  (defun gnus-dired-mail-buffers ()
    "Return a list of active mail composition buffers."
    (el-patch-swap
      (if (and (memq gnus-dired-mail-mode '(message-user-agent gnus-user-agent))
               (require 'message)
               (fboundp 'message-buffers))
          (message-buffers)
        ;; Cf. `message-buffers' in `message.el':
        (let (buffers)
          (save-excursion
            (dolist (buffer (buffer-list t))
              (set-buffer buffer)
              (when (eq major-mode 'mail-mode)
                (push (buffer-name buffer) buffers))))
          (nreverse buffers)))
    (let (buffers)
       (save-excursion
         (dolist (buffer (buffer-list t))
           (set-buffer buffer)
           (when (eq major-mode 'mail-mode)
             (push (buffer-name buffer) buffers))))
       (nreverse buffers))))

  :config
  (setq gnus-dired-mail-mode 'mu4e-user-agent)

  (add-hook 'dired-mode-hook #'turn-on-gnus-dired-mode)

  :general
  (dired-mode-map
   "s-a" 'gnus-dired-attach))
#+end_src

** dired-x
:PROPERTIES:
:ID:       43A42081-7B3A-460D-A47D-52EE95202050
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 22:53]--[2021-10-03 Sun 23:36] =>  0:43
:END:

#+begin_src emacs-lisp :results silent
(use-feature dired-x
  :demand t
  :after dired
  :config
  ;; (require 'dired-x)
  (setq dired-omit-verbose nil)    ; shut up
  (setq dired-omit-size-limit nil) ; always omit, regardless of directory size
  (setq dired-omit-files
        (concat dired-omit-files "\\|^.localized$\\|^\\.DS_Store$\\|^\\.pdf-view-restore\\|^Icon\\\015"))

  (add-hook 'dired-mode-hook #'dired-omit-mode)

  :general
  (dired-mode-map
   "–" 'dired-omit-mode))
#+end_src

** dired-hacks
:PROPERTIES:
:ID:       C3E2CA62-26C4-4681-81D8-4326BE474717
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 15:32]--[2021-12-12 Sun 15:57] =>  0:25
CLOCK: [2021-06-25 Fri 21:19]--[2021-06-25 Fri 21:24] =>  0:05
CLOCK: [2021-04-07 Wed 12:28]--[2021-04-07 Wed 12:35] =>  0:07
CLOCK: [2021-04-06 Tue 22:25]--[2021-04-06 Tue 22:35] =>  0:10
:END:

/[[https://github.com/Fuco1/dired-hacks][dired-hacks]] is a collection of useful dired additions./

#+begin_src emacs-lisp :results silent
(use-package dired-hacks
  :elpaca (dired-hacks :fetcher github :repo "Fuco1/dired-hacks")
  :after dired
  :defer 10

  :config
  (advice-add 'dired-subtree-toggle :after (lambda () (dired-omit-mode) (dired-omit-mode)))
  (advice-add 'dired-subtree-cycle :after (lambda () (dired-omit-mode) (dired-omit-mode)))

  :general
  (dired-mode-map
   "<tab>" 'dired-subtree-toggle
   "<backtab>" 'dired-subtree-cycle))
#+end_src

** dired-quick-sort
:PROPERTIES:
:ID:       9BF30679-50B1-4F78-BD6A-0DEF565D22A4
:END:
:LOGBOOK:
CLOCK: [2022-01-07 Fri 10:39]--[2022-01-07 Fri 10:45] =>  0:06
:END:

/[[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]] provides persistent quick sorting of Dired buffers in various ways./

#+begin_src emacs-lisp :results silent
(use-package dired-quick-sort
  :after dired
  ;; :config
  ;; (dired-quick-sort-setup)
  :general
  (dired-mode-map
   "T" 'hydra-dired-quick-sort/body))
#+end_src

** dired-du
:PROPERTIES:
:ID:       22FCD9F4-A3EE-4605-BDB0-E90FC8471B21
:END:

:LOGBOOK:
CLOCK: [2022-01-04 Tue 08:50]--[2022-01-04 Tue 09:24] =>  0:34
:END:
/[[https://github.com/calancha/dired-du][dired-du]] displays the recursive size of directories in Dired./

#+begin_src emacs-lisp :results silent
(use-package dired-du
  :after dired
  :defer 10
  :config
  (setq dired-du-size-format 'comma))
#+end_src

** peep-dired
:PROPERTIES:
:ID:       B0502885-D248-47E7-BE4F-54F597EBD390
:END:

/[[https://github.com/asok/peep-dired][peep-dired]] supports browing file contents in other window while browsing directory in dired./

#+begin_src emacs-lisp
(use-package peep-dired
  :after dired
  :general
  (dired-mode-map
   "F" 'peep-dired))
#+end_src

** minibuffer
:PROPERTIES:
:ID:       40F49ECD-7225-4AD2-9E07-16C5A5857FFF
:END:

#+begin_src emacs-lisp :results silent
(use-feature minibuffer
  :demand t
  :config
  (setq enable-recursive-minibuffers t)
  (setq resize-mini-windows t)
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; superuser.com/a/132454/387888
  (defun ps/switch-to-minibuffer-window ()
    "Switch to minibuffer window (if active)"
    (interactive)
    (when (active-minibuffer-window)
      (select-frame-set-input-focus (window-frame (active-minibuffer-window)))
      (select-window (active-minibuffer-window))))

  :general
  ("A-C-H-0" 'ps/switch-to-minibuffer-window)
  ((minibuffer-mode-map)
   "M-n" nil
   "M-p" nil))
#+end_src

** ibuffer
:PROPERTIES:
:ID:       11E1F107-4D7A-40DE-AA8E-9D995A10A351
:END:

#+begin_src emacs-lisp :results silent
(use-feature ibuffer
  :demand t
  :general
  (ibuffer-mode-map
   "k" 'ibuffer-do-delete))
#+end_src

** filenotify
:PROPERTIES:
:ID:       4237BEA2-6E35-423E-96A9-C10AE1458366
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Notifications.html][filenotify]] is a library that provides a unified interface for watching of filesystems for changes of files./

#+begin_src emacs-lisp :results silent
(use-feature filenotify
  :demand t
  :config
  ;; Copied from lists.gnu.org/archive/html/emacs-devel/2021-10/msg01206.html
  (defun ps/file-notify-rm-all-watches ()
    "Remove all existing file notification watches from Emacs."
    (interactive)
    (maphash
     (lambda (key _value)
       (file-notify-rm-watch key))
     file-notify-descriptors)))
#+end_src

** uniquify
:PROPERTIES:
:ID:       295BE204-62D9-4003-AFB0-06F6D817AE4C
:END:

#+begin_src emacs-lisp :results silent
(use-feature uniquify
  :config
  (setq uniquify-buffer-name-style 'forward))
#+end_src

** reveal-in-osx-finder
:PROPERTIES:
:ID:       5BA0A794-59F0-471D-AD81-4C281095BF48
:END:

/[[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]] lets you open the file at point or the current file-visiting buffer in OS X Finder./

#+begin_src emacs-lisp :results silent
(use-package reveal-in-osx-finder
  :defer 10
  :general
  (dired-mode-map
   "/" 'reveal-in-osx-finder))
#+end_src

** tramp
:PROPERTIES:
:ID:       23FDB037-73C2-4AE1-A887-437C996F78D2
:END:
:LOGBOOK:
CLOCK: [2022-08-20 Sat 18:11]--[2022-08-20 Sat 18:32] =>  0:21
:END:

/[[https://www.gnu.org/software/tramp/][tramp]] is a remote file editing package for Emacs./

Most of the below is copied from Murilo Pereira's [[https://github.com/mpereira/.emacs.d#tramp][configuration]].

#+begin_src emacs-lisp :results silent
(use-feature tramp
  :config
  ;; Disable version control on tramp buffers to avoid freezes.
  (setq vc-ignore-dir-regexp
   (format "\\(%s\\)\\|\\(%s\\)"
           vc-ignore-dir-regexp
           tramp-file-name-regexp))

  ;; Don't clean up recentf tramp buffers.
  (setq recentf-auto-cleanup 'never)

  ;; This is supposedly [[https://www.emacswiki.org/emacs/TrampMode][faster than the default]], `scp'.
  (setq tramp-default-method "sshx")

  ;; SSH controlmaster settings are set in =~/.ssh/config=.
  (setq tramp-use-ssh-controlmaster-options nil)

  ;; Store TRAMP auto-save files locally.
  (setq tramp-auto-save-directory ps/dir-emacs-var)

  ;; A more representative name for this file.
  (setq tramp-persistency-file-name (file-name-concat tramp-auto-save-directory "tramp-connection-history"))

  ;; Cache SSH passwords during the whole Emacs session.
  (setq password-cache-expiry nil)

  ;; emacs.stackexchange.com/a/37855/32089
  (setq remote-file-name-inhibit-cache nil)

  ;; Reuse SSH connections. Taken from the TRAMP FAQ.
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))

  ;; This will put in effect PATH changes in the remote ~/.profile.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory 'no-identification) ad-do-it)))
#+end_src

** pandoc-mode
:PROPERTIES:
:ID:       8EBA8303-EA43-4FB2-BB9D-1734F40DDB77
:END:

/[[https://github.com/joostkremers/pandoc-mode][pandoc-mode]] is a minor mode for interacting with Pandoc./

#+begin_src emacs-lisp :results silent
(use-package pandoc-mode
  :general
  ("A-p" 'pandoc-main-hydra/body))
#+end_src

*** TODO [#7] Make pandoc preserve emojis
:PROPERTIES:
:ID:       3C4F154F-6600-4DF0-826F-0EB031146BA2
:END:

** curl-to-elisp
:PROPERTIES:
:ID:       7B9D14E2-752E-4705-A438-78DA6663083A
:END:
/[[https://github.com/xuchunyang/curl-to-elisp][curl-to-elisp]] converts cURL command to Emacs Lisp code./

#+begin_src emacs-lisp :results silent
(use-package curl-to-elisp)
#+end_src

* windows & frames
:PROPERTIES:
:ID:       7E9A81E0-CAEB-4029-AD2C-B2416439FCDA
:END:
:LOGBOOK:
CLOCK: [2021-12-21 Tue 20:13]--[2021-12-21 Tue 20:20] =>  0:07
CLOCK: [2021-10-28 Thu 21:35]--[2021-10-28 Thu 21:52] =>  0:17
CLOCK: [2021-08-18 Wed 13:00]--[2021-08-18 Wed 13:04] =>  0:04
CLOCK: [2021-08-17 Tue 22:09]--[2021-08-18 Wed 00:24] =>  2:15
CLOCK: [2021-06-23 Wed 20:47]--[2021-06-23 Wed 20:55] =>  0:08
CLOCK: [2021-06-01 Tue 22:28]--[2021-06-01 Tue 22:45] =>  0:17
CLOCK: [2021-05-16 Sun 12:02]--[2021-05-16 Sun 12:12] =>  0:10
CLOCK: [2021-04-06 Tue 16:41]--[2021-04-06 Tue 16:45] =>  0:04
CLOCK: [2021-04-05 Mon 12:51]--[2021-04-05 Mon 13:17] =>  0:26
CLOCK: [2021-03-30 Tue 09:32]--[2021-03-30 Tue 09:36] =>  0:04
:END:

** window
:PROPERTIES:
:ID:       614546C0-75B2-4E44-9447-923DF5CF4AC3
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 15:06]--[2022-09-14 Wed 17:20] =>  2:14
CLOCK: [2022-09-14 Wed 13:25]--[2022-09-14 Wed 15:00] =>  1:35
CLOCK: [2022-09-14 Wed 12:00]--[2022-09-14 Wed 12:41] =>  0:41
CLOCK: [2022-09-08 Thu 15:47]--[2022-09-08 Thu 17:04] =>  1:17
CLOCK: [2022-09-02 Fri 18:13]--[2022-09-02 Fri 21:20] =>  3:07
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/window)
(use-feature window
  :demand t

  :config
  (setq split-width-threshold ps/split-width-threshold)
  (setq split-height-threshold nil)
  ;; move point to top of buffer if `scroll-down-command' invoked when screen can scroll no further
  (setq scroll-error-top-bottom t)

  ;; The following prevents Emacs from splitting windows indefinitely when the monitor config changes
  ;; stackoverflow.com/questions/23207958/how-to-prevent-emacs-dired-from-splitting-frame-into-more-than-two-windows
  (add-to-list 'display-buffer-alist `(,shell-command-buffer-name-async display-buffer-no-window))
  (defvar ps/split-emacs-chrome-sideways nil)
  (defun ps/split-emacs-chrome-sideways ()
    "Split Emacs and Chrome frames sideways. A second
  invocation restores original layout.

  Calls Keyboard Maestro macro via shell script."
    (interactive)
    (toggle-frame-maximized)
    (if ps/split-emacs-chrome-sideways
        (progn
          (winner-undo)
          (ps/switch-to-last-window)
          ;; Maximize Chrome
          (eshell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"DBA06CC2-86E4-4F6B-9FA6-C1C12C007BCC\"'"))
      (progn
        (delete-other-windows)
        (set-frame-size nil 950 1080 t)
        ;; Split Chrome left
        (eshell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"CF26FBCF-93C1-4C5D-9038-9AB31F6C6903\"'")))
    (setq ps/split-emacs-chrome-sideways
          (not ps/split-emacs-chrome-sideways)))

  (defun ps/get-last-window ()
    "Get to previously selected ordinary or minibuffer window."
    (interactive)
    (if (and (active-minibuffer-window) (not (minibufferp)))
        (select-window (active-minibuffer-window))
      (get-mru-window nil nil t)))

  (defun ps/switch-to-last-window ()
    "Switch to previously selected ordinary or minibuffer window."
    (interactive)
    (let ((last-window (ps/get-last-window)))
      (select-frame-set-input-focus (window-frame last-window))
      (select-window last-window)))

  ;; Modified from endlessparentheses.com/emacs-narrow-or-widen-dwim.html
  (defun ps/narrow-or-widen-dwim ()
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, ledger
  transaction, or defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive)
    (declare (interactive-only))
    (cond ((buffer-narrowed-p) (ps/org-widen-and-reveal))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-narrow-to-block) t))
                 (t (ps/org-narrow-to-entry-and-children))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          ((derived-mode-p 'ledger-mode)
           (ps/ledger-narrow-to-xact))
          (t (narrow-to-defun))))

  (defun ps/window-split-if-unsplit ()
    "Split windows when frame is unsplit. Split in three windows if
`frame-width' is greater than `ps/frame-width-threshold',
otherwise in two windows."
    (interactive)
    (when (= (length (window-list)) 1)
      (split-window-right))
    (when (> (frame-width) ps/frame-width-threshold)
      (when (= (length (window-list)) 2)
        (split-window-right))
      (balance-windows)))

  (defun ps/window--move-or-swap (this-buffer other-buffer &optional target-window)
    "docstring"
    (ps/window-split-if-unsplit)
    (let* ((target-window (if (or (not target-window)
                                  (eq (ps/get-last-window) target-window)
                                  (eq (selected-window) target-window))
                              (ps/get-last-window)
                            target-window))
           (source-window (if (eq (selected-window) target-window)
                              (ps/get-last-window)
                            (selected-window))))
      (set-window-buffer target-window this-buffer)
      (set-window-buffer source-window other-buffer)
      (select-window target-window)))

  (defun ps/window-buffer-swap ()
    "Swap the current buffer and the buffer in the other
window. If there is only one window, create a second one. If frame
is wide enough, create a third."
    (interactive)
    (ps/window--move-or-swap
     (window-buffer)
     (window-buffer (ps/get-last-window))))

  (defun ps/window-buffer-move (&optional target-window)
    "Move the current buffer to the other window. If there is only one
window, create a second one. If frame is wide enough, create a third."
    (interactive)
    (ps/window--move-or-swap
     (window-buffer)
     (ps/get-alternate-buffer)
     target-window))

  (defun ps/window-buffer-move-right ()
    "docstring."
    (interactive)
    (ps/window-buffer-move
     (winum-get-window-by-number
      (1+
       (mod
        (winum-get-number)
        (count-windows))))))

  (defun ps/window-buffer-move-left ()
    "docstring."
    (interactive)
    (ps/window-buffer-move
     (winum-get-window-by-number
      (1+
       (mod
        (count-windows)
        (winum-get-number))))))

  (defun ps/window-buffer-move-dwim ()
    "Based on frame size, create one or two additional windows if
necessary, and move buffer to the other window or to the middle
window depending on the number of present windows."
    (interactive)
    (ps/window-buffer-move (when (> (count-windows) 2) (winum-get-window-by-number 2))))

  (tlon-init-override-code-if-available
   :ps/window-split
   '(
     (add-hook 'elpaca-after-init-hook #'ps/window-split-if-unsplit)
     ))

  :general
  ("C-H-0" 'ps/switch-to-last-window
   "C-w" 'ps/narrow-or-widen-dwim
   "H-w" 'delete-window
   "H-W" 'delete-other-windows
   "M-A-q" 'delete-frame
   "s-A-," 'ps/split-emacs-chrome-sideways
   "M-–" 'ps/window-buffer-move-dwim ; `emacs-mac'
   "M--" 'ps/window-buffer-move-dwim ; `emacs-plus'
   "M-," 'ps/window-buffer-move-left
   "M-." 'ps/window-buffer-move-right
   "A-M--" 'ps/window-buffer-swap ; `emacs-mac'
   "A-M-–" 'ps/window-buffer-swap ; `emacs-plus'
   "A-C-s-y" 'scroll-down-command
   "A-C-s-h" 'scroll-up-command
   "A-C-s-g" 'scroll-other-window
   "A-C-s-t" 'scroll-other-window-down
   "A-C-s-x" (lambda! (scroll-down-line 4))
   "A-C-s-c" (lambda! (scroll-up-line 4))
   "A-C-s-v" (lambda! (scroll-down-line 16))
   "A-C-s-b" (lambda! (scroll-up-line 16)))
  ((elfeed-show-mode-map eww-mode-map helpful-mode-map mu4e-view-mode-map telega-msg-button-map)
   "y" 'scroll-down-command
   "h" 'scroll-up-command)
  (isearch-mode-map
   "C-w" 'ps/narrow-or-widen-dwim))
#+end_src

** frame
:PROPERTIES:
:ID:       3ADE4889-B4BE-4733-ABE3-BECCD4F9A73D
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/frame)
(use-feature frame
  :demand t
  :config
  (blink-cursor-mode)
  (setq window-divider-default-right-width 1)
  (window-divider-mode)

  ;; When returning focus to Emacs after browsing other macOS windows,
  ;; the frame is sometimes not fully maximized. This advice makes
  ;; Emacs maximize the frame every time focus is regained.
  (tlon-init-override-code-if-available
   :ps/frame-maximize
   '(
     (add-function :after after-focus-change-function
                   (lambda ()
                     (set-frame-parameter nil 'fullscreen 'maximized)))))

  :general
  ("H-S-SPC" 'other-frame))
#+end_src

** winum
:PROPERTIES:
:ID:       90677099-6D75-4BA3-B490-0C325A17A55F
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

/[[https://github.com/deb0ch/emacs-winum][winum-mode]] supports naviation of windows and frames using number./

#+begin_src emacs-lisp :results silent
(use-package winum
  :demand t
  :config
  (setq winum-scope 'frame-local)

  (winum-mode)
  :general
  ("C-," 'winum-select-window-1
   "C-." 'winum-select-window-2
   "C-/" 'winum-select-window-3
   "H-4" 'winum-select-window-4
   "H-5" 'winum-select-window-5
   "H-6" 'winum-select-window-6
   "H-7" 'winum-select-window-7
   "H-8" 'winum-select-window-8
   "H-9" 'winum-select-window-9
   "H-0" 'winum-select-window-10))
#+end_src

** winner
:PROPERTIES:
:ID:       598E0C53-2797-41B5-A53D-C229D4F69A76
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 18:45]--[2021-12-30 Thu 12:11] => 2105:26
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] is a global minor mode that records the changes in the window configuration (i.e., how the frames are partitioned into windows), so that you can undo them./

#+begin_src emacs-lisp :results silent
(use-feature winner
  :demand t

  :config
  (winner-mode)

  (remove-hook 'minibuffer-setup-hook 'winner-save-unconditionally)

  :general
  ("H-A-w" 'winner-undo
   "H-A-W" 'winner-redo))
#+end_src

** avy
:PROPERTIES:
:ID:       D83A1681-A3F0-4C70-9986-F01275320585
:END:
:LOGBOOK:
CLOCK: [2021-11-22 Mon 10:15]--[2021-11-22 Mon 10:38] =>  0:23
CLOCK: [2021-11-13 Sat 22:01]--[2021-11-13 Sat 22:47] =>  0:46
CLOCK: [2021-11-13 Sat 21:14]--[2021-11-13 Sat 21:51] =>  0:37
CLOCK: [2021-10-12 Tue 15:22]--[2021-10-12 Tue 16:06] =>  0:44
CLOCK: [2021-08-16 Mon 10:36]--[2021-08-16 Mon 10:58] =>  0:22
CLOCK: [2021-08-10 Tue 16:50]--[2021-08-10 Tue 18:15] =>  1:25
CLOCK: [2021-07-13 Tue 08:23]--[2021-07-13 Tue 08:44] =>  0:21
CLOCK: [2021-05-16 Sun 08:30]--[2021-05-16 Sun 08:55>] =>  0:25
:END:

/[[https://github.com/abo-abo/avy][avy]] lets you jump to any visible text using a char-based decision tree./

#+begin_src emacs-lisp :results silent
(use-package avy
  :commands ps/avy-dired-find-file

  :config/el-patch
  ;; Launch dispatcher with `/' rather than `?'
  (defun avy-handler-default (char)
    "The default handler for a bad CHAR."
    (let (dispatch)
      (cond ((setq dispatch (assoc char avy-dispatch-alist))
             (unless (eq avy-style 'words)
               (setq avy-action (cdr dispatch)))
             (throw 'done 'restart))
            ((memq char avy-escape-chars)
             ;; exit silently
             (throw 'done 'abort))
            ((el-patch-swap
               (eq char ??)
               (eq char ?/))
             (avy-show-dispatch-help)
             (throw 'done 'restart))
            ((mouse-event-p char)
             (signal 'user-error (list "Mouse event not handled" char)))
            (t
             (message "No such candidate: %s, hit `C-g' to quit."
                      (if (characterp char) (string char) char))))))

  :config
  (setq avy-case-fold-search nil)
  (setq avy-timeout-seconds 0.2)
  (setq avy-all-windows nil)
  (setq avy-keys '(97 115 100 102 106 107 108 13 32 113 119 101 114 117 105 111 112 122 120 99 118 109 44 46 47))

  (defun ps/avy-goto-word-in-line ()
    "Jump to a word start between start and end of visual line."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (save-excursion (beginning-of-visual-line))
                       (save-excursion (end-of-visual-line) (point)))))

  (defun ps/avy-goto-word-in-line-behind ()
    "Jump to a word start between start of visual line and point."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (save-excursion (beginning-of-visual-line))
                       (point))))

  (defun ps/avy-goto-word-in-line-ahead ()
    "Jump to a word start between point and end of visual line."
    (interactive)
    (avy-with avy-goto-word-0
      (avy-goto-word-0 nil
                       (point)
                       (save-excursion (end-of-visual-line) (point)))))

  (defun ps/avy-goto-end-of-line-above (&optional offset bottom-up)
    "Goto visible end of line above the cursor."
    (interactive)
    (call-interactively 'avy-goto-line-above)
    (end-of-line))

  (defun ps/avy-goto-end-of-line-below (&optional offset bottom-up)
    "Goto visible end of line below the cursor."
    (interactive)
    (call-interactively 'avy-goto-line-below)
    (end-of-line))

  (defun ps/avy-dired-find-file ()
    "In Dired, visit the file or directory in selected line."
    (interactive)
    (avy-goto-line)
    (dired-find-alternate-file))

  (defun ps/avy-ebib-view-entry ()
    "In Ebib, view the entry in selected line."
    (interactive)
    (avy-goto-line)
    (ebib-edit-entry))

  (defun ps/mu4e-headers-view-message ()
    "In mu4e, view the message in selected line."
    (interactive)
    (avy-goto-line)
    (mu4e-headers-view-message))

  (defun ps/avy-telega-view-message ()
    "In Telega, view the message in selected line."
    (interactive)
    (avy-goto-line)
    (push-button)) ; not sure what the actual command to open a chat is

  (defun ps/avy-elfeed-search-show-entry ()
    "In Elfeed, display the item in selected line."
    (interactive)
    (avy-goto-line)
    (call-interactively 'elfeed-search-show-entry))

  ;; karthinks.com/software/avy-can-do-anything/#mark-the-region-from-point-to-a-candidate
  (defun ps/avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (setf (alist-get ?r avy-dispatch-alist) 'ps/avy-action-mark-to-char)

  :general
  ("C-H-s-u" 'ps/avy-goto-word-in-line-behind
   "C-H-s-p" 'ps/avy-goto-word-in-line-ahead
   "C-H-s-m" 'avy-goto-line-above
   "C-H-s-," 'ps/avy-goto-end-of-line-above
   "C-H-s-." 'avy-goto-line-below
   "C-H-s-/" 'ps/avy-goto-end-of-line-below
   "C-H-s-k" 'avy-goto-word-1-above
   "C-H-s-l" 'avy-goto-word-1-below)
  (dired-mode-map
   "f" 'ps/avy-dired-find-file)
  (ebib-index-mode-map
   "f" 'ps/avy-ebib-view-entry)
  (telega-root-mode-map
   "f" 'ps/avy-telega-view-message)
  (ebib-entry-mode-map
   "f" 'avy-goto-line))
#+end_src

*** TODO [#5] See if I can implement my idea of passing avy any Emacs command
:PROPERTIES:
:Effort:   1:30
:ID:       425A2281-B1D2-49FE-AE34-3C9F6C916FB1
:END:
:LOGBOOK:
CLOCK: [2021-11-29 Mon 23:24]--[2021-11-29 Mon 23:45] =>  0:21
CLOCK: [2021-11-25 Thu 19:05]--[2021-11-25 Thu 19:21] =>  0:16
:END:
https://karthinks.com/software/avy-can-do-anything/

Maybe the way to do this is by creating a ~pass-to-avy~ generic function, which itself allows the user to select a command via its key bindings and passes it the word selected via avy.

[2021-11-29 Mon 23:37] Should create commands to delete/copy/kill words/sentences/paragraphs/sexp/lines/region

** writeroom-mode
:PROPERTIES:
:ID:       AD1CE3FE-8897-4593-BD37-FEA38630611A
:END:
:LOGBOOK:
CLOCK: [2023-03-25 Sat 11:05]--[2023-03-25 Sat 11:26] =>  0:21
CLOCK: [2022-09-14 Wed 18:43]--[2022-09-14 Wed 19:00] =>  0:17
CLOCK: [2022-02-04 Fri 11:23]--[2022-02-04 Fri 11:25] =>  0:02
CLOCK: [2021-12-12 Sun 21:14]--[2021-12-12 Sun 21:17] =>  0:03
CLOCK: [2021-05-28 Fri 20:40]--[2021-05-28 Fri 20:45] =>  0:05
CLOCK: [2021-05-27 Thu 19:37]--[2021-05-27 Thu 20:00] =>  0:23
CLOCK: [2021-05-19 Wed 22:40]--[2021-05-19 Wed 23:05] =>  0:25
CLOCK: [2021-05-19 Wed 21:54]--[2021-05-19 Wed 22:36] =>  0:42
CLOCK: [2021-04-13 Tue 07:25]--[2021-04-13 Tue 08:07] =>  0:42
CLOCK: [2021-04-05 Mon 18:53]--[2021-04-05 Mon 19:15] =>  0:22
CLOCK: [2021-03-30 Tue 12:34]--[2021-03-30 Tue 13:06] =>  0:32
CLOCK: [2021-03-30 Tue 21:45]--[2021-03-30 Tue 22:02] =>  0:17
:END:

/[[https://github.com/joostkremers/writeroom-mode][writeroom-mode]] provides distraction-free writing for Emacs./

#+begin_src emacs-lisp :results silent
(use-package writeroom-mode
  :init
  (defun ps/writerrom-global-effects (arg)
    "Enable and disable custom effects when `writeroom-mode' is
activated (`arg' = 1) and deactivated (`arg' = -1). The function
needs to be included as an element in the list defined by
`writeroom-global-effects'."
    (tab-bar-mode (* -1 arg)))

  :config
  (setq writeroom-global-effects '(writeroom-set-fullscreen
                                   writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width
                                   ps/writerrom-global-effects))

  (setq writeroom-restore-window-config t) ; upon leaving `writeroom mode', restore pre-existing number of windows
  (setq writeroom-major-modes '(org-mode
                                elfeed-search-mode
                                elfeed-show-mode
                                eww-mode
                                eww-buffers-mode)) ; major modes activated in global-writeroom-mode
  (setq writeroom-fullscreen-effect 'maximized) ; disables annoying fullscreen transition effect on macos
  (setq writeroom-maximize-window t)

  (advice-add 'writeroom-mode :before (lambda (&rest args) (setq writeroom-width (window-total-width))))

  :general
  ("M-'" 'writeroom-mode
   "M-A-'" 'global-writeroom-mode))
#+end_src

** ace-link
:PROPERTIES:
:ID:       F1C54CDB-1E70-41D1-8FAB-A45598C5021A
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:48]--[2022-07-15 Fri 13:51] =>  0:03
CLOCK: [2022-07-10 Sun 11:50]--[2022-07-10 Sun 12:32] =>  0:42
CLOCK: [2022-07-03 Sun 09:54]--[2022-07-03 Sun 10:20] =>  0:26
CLOCK: [2021-10-10 Sun 13:02]--[2021-10-10 Sun 13:06] =>  0:04
CLOCK: [2021-08-14 Sat 14:46]--[2021-08-14 Sat 15:50] =>  1:04
CLOCK: [2021-06-27 Sun 17:26]--[2021-06-27 Sun 17:52] =>  0:26
CLOCK: [2021-06-25 Fri 21:24]--[2021-06-25 Fri 21:35] =>  0:11
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:47] =>  0:42
CLOCK: [2021-05-20 Thu 14:23]--[2021-05-20 Thu 14:32] =>  0:09
:END:

/[[https://github.com/abo-abo/ace-link][ace-link]] lets you quickly follow links in Emacs, Vimium-style./

#+begin_src emacs-lisp :results silent
(use-package ace-link
  :config
  (defun ps/ace-link-w3m-with-browse-url ()
    "Open a visible link with `browse-url'.
The method used to open the url is determined by the variables
`browse-url-browser-function', `browse-url-handlers,' and
`browse-url-default-handlers'."
    (interactive)
    (require 'w3m)
    (let ((pt (avy-with ace-link-w3m
                (avy-process
                 (mapcar #'cdr (ace-link--w3m-collect))
                 (avy--style-fn avy-style)))))
      (ps/ace-link--w3m-action-with-browse-url pt)))

  (defun ps/ace-link--w3m-action-with-browse-url (pt)
    (when (numberp pt)
      (goto-char pt)
      (call-interactively #'w3m-view-url-with-browse-url)))

  (defun ps/ace-link-org-agenda-clock-in ()
    "Open a visible link in an `org-mode-agenda' buffer
and start clock."
    (interactive)
    (ace-link-org-agenda)
    (org-clock-in))

  (defun ps/ace-link-eww-externally ()
    "Browse URL using `browse-url-secondary-browser-function'"
    (interactive)
    (ace-link-eww '(4)))

  (defun ps/ace-link-eww-new-buffer ()
    "Browse URL in new buffer."
    (interactive)
    (ace-link-eww '(16)))

  (defun ps/ace-link-w3m-in-eww ()
    "In an `w3m-mode' buffer, open a visible link in `eww'."
    (interactive)
    (require 'w3m)
    (let ((pt (avy-with ace-link-w3m
                (avy-process
                 (mapcar #'cdr (ace-link--w3m-collect))
                 (avy--style-fn avy-style)))))
      (goto-char pt)
      (eww (w3m-url-valid (w3m-anchor)))))

  :general
  ((eww-mode-map elfeed-show-mode-map)
   "f" 'ace-link-eww
   "F" 'ps/ace-link-eww-new-buffer
   "s-f" 'ps/ace-link-eww-externally)
  ((help-mode-map helpful-mode-map elisp-refs-mode-map)
   "f" 'ace-link-help)
  ((Info-mode-map)
   "f" 'ace-link-info)
  ((Man-mode-map woman-mode-map)
   "f" 'ace-link-woman)
  (mu4e-view-mode-map
   "f" 'ps/ace-link-w3m-with-browse-url)
  (org-agenda-mode-map
   "f" 'ace-link-org-agenda
   "s-f" 'ps/ace-link-org-agenda-clock-in)
  ((org-mode-map telega-chat-mode-map)
   "M-f" 'ace-link-org)
  ((slack-message-buffer-mode-map telega-msg-button-map twittering-mode-map)
   "f" 'ace-link-org))
#+end_src

* date & time
:PROPERTIES:
:ID:       CE84D144-875A-492E-B6A1-6E71CBEACCD7
:END:
:LOGBOOK:
CLOCK: [2022-05-09 Mon 10:27]--[2022-05-09 Mon 10:35] =>  0:08
CLOCK: [2021-07-04 Sun 22:07]--[2021-07-04 Sun 22:41] =>  0:34
CLOCK: [2021-07-04 Sun 19:54]--[2021-07-04 Sun 20:13] =>  0:19
CLOCK: [2021-04-02 Fri 11:35]--[2021-04-02 Fri 13:10] =>  1:35
CLOCK: [2021-04-02 Fri 11:22]--[2021-04-02 Fri 11:28] =>  0:06
CLOCK: [2021-03-28 Sun 12:35]--[2021-03-28 Sun 13:01] =>  0:26
CLOCK: [2021-02-27 Sat 16:19]--[2021-02-27 Sat 17:17] =>  0:58
:END:

** calendar
:PROPERTIES:
:ID:       4F3AEDB7-C357-40BA-B670-DE392FAF8F7A
:END:

#+begin_src emacs-lisp :results silent
(use-feature calendar
  :demand t
  :config
  (setq calendar-week-start-day 1)    ; week starts on Monday
  (setq calendar-set-date-style 'iso) ; this isn't the default?
  (setq calendar-time-display-form
   '(24-hours ":" minutes
              (when time-zone
                (concat " (" time-zone ")"))))
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-time-zone-style 'numeric)
  (setq holiday-bahai-holidays nil)
  (setq calendar-location-name ps/location-name)
  (setq calendar-latitude ps/location-latitude)
  (setq calendar-longitude ps/location-longitude)
  ;; To copy the current latitude and longitude, go to Google Maps,
  ;; right-click on your location, and select the coordinates.
  ;; You should then set these values in YOUR VARIABLES file

  ;; Adapted from Prot
  (defcustom ps/date-specifier "%F"
    "Date specifier for `format-time-string'.
Used by `ps/insert-date'."
    :type 'string)

  (defcustom ps/time-specifier "%R %z"
    "Time specifier for `format-time-string'.
Used by `ps/insert-date'."
    :type 'string)

  (defun ps/insert-date (&optional arg)
    "Insert the current date as `ps/date-specifier'.

With optional prefix ARG (\\[universal-argument]) also append the
current time understood as `ps/time-specifier'.

When region is active, delete the highlighted text and replace it
with the specified date."
    (interactive "P")
    (let* ((date ps/date-specifier)
           (time ps/time-specifier)
           (format (if arg (format "%s %s" date time) date)))
      (when (use-region-p)
        (delete-region (region-beginning) (region-end)))
      (insert (format-time-string format))))

  :general
  ("C-d" 'calendar
   "A-s-=" 'ps/insert-date
   "s-=" "C-u A-s-=")
  (calendar-mode-map
   "H-m" 'calendar-set-mark
   "A-C-s-u" 'calendar-backward-day
   "A-C-s-i" 'calendar-backward-week
   "A-C-s-o" 'calendar-forward-week
   "A-C-s-p" 'calendar-forward-day
   "A-C-s-m" 'calendar-backward-month
   "A-C-s-," 'calendar-backward-year
   "A-C-s-." 'calendar-forward-year
   "A-C-s-/" 'calendar-forward-month
   "C-f" nil
   "C-b" nil
   "C-n" nil
   "C-p" nil
   "=" 'calendar-count-days-region))
#+end_src

** loaddefs
:PROPERTIES:
:ID:       08F898A1-71C0-4BF4-B6E8-5D6649DB230C
:END:
#+begin_src emacs-lisp :results silent
  (use-feature loaddefs
    :demand t
    :init
    (dolist (holiday '((holiday-float 6 0 3 "Father's Day")
                       (holiday-float 5 0 2 "Mother's Day")))
                     (delete holiday holiday-general-holidays)))
#+end_src

** org-gcal
:PROPERTIES:
:ID:       9E8AEF97-2E1A-489E-929A-CE5789EABFB9
:org-gcal-managed: org
:END:

:LOGBOOK:
CLOCK: [2023-05-20 Sat 08:56]--[2023-05-20 Sat 09:40] =>  0:44
CLOCK: [2023-03-28 Tue 13:25]--[2023-03-28 Tue 13:28] =>  0:03
CLOCK: [2022-07-15 Fri 11:10]--[2022-07-15 Fri 11:19] =>  0:09
CLOCK: [2022-07-11 Mon 15:51]--[2022-07-11 Mon 16:17] =>  0:26
CLOCK: [2022-07-03 Sun 10:53]--[2022-07-03 Sun 11:18] =>  0:25
CLOCK: [2022-06-27 Mon 12:00]--[2022-06-27 Mon 12:10] =>  0:10
CLOCK: [2022-06-02 Thu 12:05]--[2022-06-02 Thu 12:16] =>  0:11
CLOCK: [2022-05-07 Sat 07:24]--[2022-05-07 Sat 08:33] =>  1:09
CLOCK: [2021-12-06 Mon 12:52]--[2021-12-06 Mon 12:52] =>  0:00
CLOCK: [2021-11-21 Sun 20:11]--[2021-11-21 Sun 20:28] =>  0:17
CLOCK: [2021-11-17 Wed 11:49]--[2021-11-17 Wed 13:10] =>  1:21
CLOCK: [2021-10-10 Sun 21:33]--[2021-10-10 Sun 22:14] =>  0:41
CLOCK: [2021-10-04 Mon 18:43]--[2021-10-04 Mon 18:52] =>  0:09
CLOCK: [2021-10-04 Mon 18:11]--[2021-10-04 Mon 18:43] =>  0:32
CLOCK: [2021-09-29 Wed 23:08]--[2021-09-29 Wed 23:16] =>  0:08
CLOCK: [2021-09-29 Wed 22:54]--[2021-09-29 Wed 23:02] =>  0:08
CLOCK: [2021-09-29 Wed 22:12]--[2021-09-29 Wed 22:45] =>  0:33
CLOCK: [2021-09-27 Mon 20:51]--[2021-09-27 Mon 20:59] =>  0:08
CLOCK: [2021-08-02 Mon 18:47]--[2021-08-02 Mon 18:50] =>  0:03
CLOCK: [2021-08-02 Mon 08:30]--[2021-08-02 Mon 08:52] =>  0:22
CLOCK: [2021-07-26 Mon 21:15]--[2021-07-26 Mon 21:29] =>  0:14
CLOCK: [2021-07-22 Thu 12:23]--[2021-07-22 Thu 12:50] =>  0:27
CLOCK: [2021-04-02 Fri 13:56]--[2021-04-02 Fri 15:24] =>  1:28
:END:
/[[https://github.com/kidd/org-gcal.el][org-gcal]] integrates org with Google Calendar./

(That's the actively maintained fork; the [[https://github.com/myuhe/org-gcal.el/issues/124#issuecomment-642859466][official repository]] is no longer maintained.)

[2023-03-01 Wed 10:54] Check [[https://github.com/dedenbangkit/.emacs.d/blob/2cf69eb102af5a5cab7ec1d65af77e997082e17a/custom/main.el#L34][this config]] in case it helps me figure out how to avoid getting prompted for a password so frequently.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/org-gcal)
(use-package org-gcal
  :elpaca (org-gcal :type git :host github :repo "kidd/org-gcal.el")
  :after auth-source-pass org
  :defer 15

  :init
  (setq org-gcal-client-id (auth-source-pass-get "host" "auth-sources/org-gcal"))
  (setq org-gcal-client-secret (auth-source-pass-get 'secret "auth-sources/org-gcal"))

  :config/el-patch
  (defun org-gcal--get-time-and-desc ()
    "Get the timestamp and description of the event at point.

  Return a plist with :start, :end, and :desc keys. The value for a key is nil
  if not present."
    (let (start end desc tobj elem)
      (save-excursion
        (org-gcal--back-to-heading)
        (setq elem (org-element-at-point))
        ;; Parse :org-gcal: drawer for event time and description.
        (when
            (re-search-forward
             (format "^[ \t]*:%s:[ \t]*$" org-gcal-drawer-name)
             (save-excursion (outline-next-heading) (point))
             'noerror)
          ;; First read any event time from the drawer if present. It's located
          ;; at the beginning of the drawer.
          (save-excursion
            (when
                (re-search-forward "<[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]"
                                   (save-excursion (outline-next-heading) (point))
                                   'noerror)
              (goto-char (match-beginning 0))
              (setq tobj (org-element-timestamp-parser))))
          ;; Lines after the timestamp contain the description. Skip leading
          ;; blank lines.
          (forward-line)
          (beginning-of-line)
          (re-search-forward
           "\\(?:^[ \t]*$\\)*\\([^z-a]*?\\)\n?[ \t]*:END:"
           (save-excursion (outline-next-heading) (point)))
          (setq desc (match-string-no-properties 1))
          (setq desc
                (if (string-match-p "\\‘\n*\\’" desc)
                    nil
                  (replace-regexp-in-string
                   "^✱" "*"
                   (replace-regexp-in-string
                    "\\`\\(?: *<[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].*?>$\\)\n?\n?"
                    ""
                    (replace-regexp-in-string
                     " *:PROPERTIES:\n *\\(.*\\(?:\n.*\\)*?\\) *:END:\n+"
                     ""
                     desc)))))))
      ;; Prefer to read event time from the SCHEDULED property if present.
      (setq tobj (or (el-patch-swap (org-element-property :scheduled elem)
                                    (org-element-property :deadline elem))
                     tobj))
      (when tobj
        (when (plist-get (cadr tobj) :year-start)
          (setq
           start
           (org-gcal--format-org2iso
            (plist-get (cadr tobj) :year-start)
            (plist-get (cadr tobj) :month-start)
            (plist-get (cadr tobj) :day-start)
            (plist-get (cadr tobj) :hour-start)
            (plist-get (cadr tobj) :minute-start)
            (when (plist-get (cadr tobj) :hour-start) t))))
        (when (plist-get (cadr tobj) :year-end)
          (setq
           end
           (org-gcal--format-org2iso
            (plist-get (cadr tobj) :year-end)
            (plist-get (cadr tobj) :month-end)
            (plist-get (cadr tobj) :day-end)
            (plist-get (cadr tobj) :hour-end)
            (plist-get (cadr tobj) :minute-end)
            (when (plist-get (cadr tobj) :hour-end) t)))))
      (list :start start :end end :desc desc)))

  (defun org-gcal--update-entry (calendar-id event &optional update-mode)
    "Update the entry at the current heading with information from EVENT.

EVENT is parsed from the Calendar API JSON response using ‘org-gcal--json-read’.
CALENDAR-ID must be passed as well. Point must be located on an Org-mode heading
line or an error will be thrown. Point is not preserved.

If UPDATE-MODE is passed, then the functions in
‘org-gcal-after-update-entry-functions' are called in order with the same
arguments as passed to this function and the point moved to the beginning of the
heading."
    (unless (org-at-heading-p)
      (user-error "Must be on Org-mode heading."))
    (let* ((smry  (plist-get event :summary))
           (desc  (plist-get event :description))
           (loc   (plist-get event :location))
           (source (plist-get event :source))
           (transparency   (plist-get event :transparency))
           (_link  (plist-get event :htmlLink))
           (meet  (plist-get event :hangoutLink))
           (etag (plist-get event :etag))
           (event-id    (plist-get event :id))
           (stime (plist-get (plist-get event :start)
                             :dateTime))
           (etime (plist-get (plist-get event :end)
                             :dateTime))
           (sday  (plist-get (plist-get event :start)
                             :date))
           (eday  (plist-get (plist-get event :end)
                             :date))
           (start (if stime (org-gcal--convert-time-to-local-timezone stime org-gcal-local-timezone) sday))
           (end   (if etime (org-gcal--convert-time-to-local-timezone etime org-gcal-local-timezone) eday))
           (old-time-desc (org-gcal--get-time-and-desc))
           (old-start (plist-get old-time-desc :start))
           (old-end (plist-get old-time-desc :start))
           (recurrence (plist-get event :recurrence))
           (elem))
      (when loc (replace-regexp-in-string "\n" ", " loc))
      (org-edit-headline
       (cond
        ;; Don’t update headline if the new summary is the same as the CANCELLED
        ;; todo keyword.
        ((equal smry org-gcal-cancelled-todo-keyword) (org-gcal--headline))
        (smry smry)
        ;; Set headline to “busy” if there is no existing headline and no summary
        ;; from server.
        ((or (null (org-gcal--headline))
             (string-empty-p (org-gcal--headline)))
         "busy")
        (t (org-gcal--headline))))
      (org-entry-put (point) org-gcal-etag-property etag)
      (when recurrence (org-entry-put (point) "recurrence" (format "%s" recurrence)))
      (when loc (org-entry-put (point) "LOCATION" loc))
      (when source
        (let ((roam-refs
               (org-entry-get-multivalued-property (point) "ROAM_REFS"))
              (link (org-entry-get (point) "link")))
          (cond
           ;; ROAM_REFS can contain multiple references, but only bare URLs are
           ;; supported. To make sure we can round-trip between ROAM_REFS and
           ;; Google Calendar, only import to ROAM_REFS if there is no title in
           ;; the source, and if ROAM_REFS has at most one entry.
           ((and (null link)
                 (<= (length roam-refs) 1)
                 (or (null (plist-get source :title))
                     (string-empty-p (plist-get source :title))))
            (org-entry-put (point) "ROAM_REFS"
                           (plist-get source :url)))
           (t
            (org-entry-put (point) "link"
                           (org-link-make-string
                            (plist-get source :url)
                            (plist-get source :title)))))))
      (when transparency (org-entry-put (point) "TRANSPARENCY" transparency))
      (when meet
        (org-entry-put
         (point)
         "HANGOUTS"
         (format "[[%s][%s]]"
                 meet
                 "Join Hangouts Meet")))
      (org-entry-put (point) org-gcal-calendar-id-property calendar-id)
      (org-gcal--put-id (point) calendar-id event-id)
      ;; Insert event time and description in :ORG-GCAL: drawer, erasing the
      ;; current contents.
      (org-gcal--back-to-heading)
      (setq elem (org-element-at-point))
      (save-excursion
        (when (re-search-forward
               (format
                "^[ \t]*:%s:[^z-a]*?\n[ \t]*:END:[ \t]*\n?"
                (regexp-quote org-gcal-drawer-name))
               (save-excursion (outline-next-heading) (point))
               'noerror)
          (replace-match "" 'fixedcase)))
      (unless (re-search-forward ":PROPERTIES:[^z-a]*?:END:"
                                 (save-excursion (outline-next-heading) (point))
                                 'noerror)
        (message "PROPERTIES not found: %s (%s) %d"
                 (buffer-name) (buffer-file-name) (point)))
      (end-of-line)
      (newline)
      (insert (format ":%s:" org-gcal-drawer-name))
      (newline)
      ;; Keep existing timestamps for parent recurring events.
      (when (and recurrence old-start old-end)
        (setq start old-start
              end old-end))
      (let*
          ((timestamp
            (if (or (string= start end) (org-gcal--alldayp start end))
                (org-gcal--format-iso2org start)
              (if (and
                   (= (plist-get (org-gcal--parse-date start) :year)
                      (plist-get (org-gcal--parse-date end)   :year))
                   (= (plist-get (org-gcal--parse-date start) :mon)
                      (plist-get (org-gcal--parse-date end)   :mon))
                   (= (plist-get (org-gcal--parse-date start) :day)
                      (plist-get (org-gcal--parse-date end)   :day)))
                  (format "<%s-%s>"
                          (org-gcal--format-date start "%Y-%m-%d %a %H:%M")
                          (org-gcal--format-date end "%H:%M"))
                (format "%s--%s"
                        (org-gcal--format-iso2org start)
                        (org-gcal--format-iso2org
                         (if (< 11 (length end))
                             end
                           (org-gcal--iso-previous-day end))))))))
        (el-patch-swap
          (if (org-element-property :scheduled elem)
              (unless (and recurrence old-start)
                ;; Ensure CLOSED timestamp isn’t wiped out by ‘org-gcal-sync’ (see
                ;; https://github.com/kidd/org-gcal.el/issues/218).
                (let ((org-closed-keep-when-no-todo t))
                  (org-schedule nil timestamp)))
            (insert timestamp)
            (newline)
            (when desc (newline)))
          (if (org-element-property :deadline elem)
              (unless (and recurrence old-start) (org-deadline nil timestamp))
            (org-deadline nil timestamp)
            (newline)
            (when desc (newline)))))
      ;; Insert event description if present.
      (when desc
        (insert (replace-regexp-in-string "^\*" "✱" desc))
        (insert (if (string= "\n" (org-gcal--safe-substring desc -1)) "" "\n")))
      (insert ":END:")
      (when (org-gcal--event-cancelled-p event)
        (save-excursion
          (org-back-to-heading t)
          (org-gcal--handle-cancelled-entry)))
      (when update-mode
        (cl-dolist (f org-gcal-after-update-entry-functions)
          (save-excursion
            (org-back-to-heading t)
            (funcall f calendar-id event update-mode))))))

  :config
  (setq org-gcal-fetch-file-alist `((,ps/personal-gmail . ,ps/file-calendar)))
  (setq org-gcal-recurring-events-mode 'top-level)
  (setq org-gcal-remove-api-cancelled-events nil) ; never remove cancelled events
  (setq org-gcal-notify-p nil)
  (setq org-gcal-auto-archive nil)
  (setq org-gcal-up-days 1)
  (setq org-gcal-down-days 7)

  (defun ps/org-gcal-open-at-point ()
    "Get entry id of `org-gcal' entry at point and open the
associated Google Calendar event in a browser."
    (interactive)
    (if-let ((id (org-entry-get nil "entry-id")))
        (browse-url
         (concat
          "https://calendar.google.com/calendar/u/0/r/eventedit/"
          (replace-regexp-in-string
           "\n"
           ""
           (base64-encode-string
            (replace-regexp-in-string
             "/"
             " "
             id))))))
    (user-error "No id found."))

  ;; (advice-add 'org-gcal-sync :before (lambda () (setq message-log-max 10000)))
  ;; (advice-add 'org-gcal-sync-buffer :before (lambda () (setq message-log-max 10000)))

  (defhydra hydra-org-gcal (:exit t :hint nil)
    "
_f_etch all       |_s_ync all        |_p_ost at point   |_d_elete at point |_r_equest token    |_t_oggle debug
_F_etch buffer    |_S_ync buffer     |_o_pen at point   |_u_nlock sync     |_c_lear token      |re_l_oad secret  "
    ("f" org-gcal-fetch)
    ("F" org-gcal-fetch-buffer)
    ("s" org-gcal-sync)
    ("S" org-gcal-sync-buffer)
    ("p" org-gcal-post-at-point)
    ("d" org-gcal-delete-at-point)
    ("o" ps/org-gcal-open-at-point)
    ("u" org-gcal--sync-unlock)
    ("r" org-gcal-request-token)
    ("c" org-gcal-sync-tokens-clear)
    ("t" org-gcal-toggle-debug)
    ("l" org-gcal-reload-client-id-secret))

  :general
  (org-mode-map
   "s-g" 'hydra-org-gcal/body))
#+end_src

** calfw
:PROPERTIES:
:ID:       05F8BF13-CF3A-43D7-8959-D19E0C7EB092
:END:

/[[https://github.com/kiwanami/emacs-calfw][calf]] is a calendar framework for Emacs./

#+begin_src emacs-lisp
(use-package calfw
  :disabled
  :defer 20)
#+end_src

** calfw-blocks
:PROPERTIES:
:ID:       03DD73DD-6347-4D30-B103-A61718459C41
:END:

/[[https://github.com/ml729/calfw-blocks][calfw-blocks]] provides visual enhancements for calfw./

#+begin_src emacs-lisp
(use-package calfw-blocks
  :disabled
  :elpaca (calfw-blocks
             :host github
             :repo "ml729/calfw-blocks")
  :after calfw

  :config
  (defun ps/open-calendar-agenda ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "medium purple"))
     :view 'block-week)))
#+end_src

** time
:PROPERTIES:
:ID:       88CCE9CB-8284-4C8B-8264-A1E54E299941
:END:

#+begin_src emacs-lisp :results silent
(use-feature time
  :demand t
  :after tab-bar
  :config
  (setq world-clock-list '(("Europe/Barcelona" "Barcelona")
                           ("Europe/London" "London")
                           ("America/Buenos_Aires" "Buenos Aires")
                           ("America/Nassau" "Nassau")
                           ("America/New_York" "New York")
                           ("America/Los_Angeles" "San Francisco")))
  (setq display-time-format "%a %e %b %T")
  (setq display-time-interval 1)
  (setq display-time-default-load-average nil)

  (display-time-mode)

  ;; used by various ledger snippets
  (defun ps/time-last-day-of-last-month ()
    "Insert the last day of the most recent month."
    (interactive)
    (let* ((date (calendar-current-date))
           (year (calendar-extract-year date))
           (month (- (calendar-extract-month date) 1))
           (day (calendar-last-day-of-month month year)))
      (insert (format-time-string
               "%Y-%m-%d"
               (encode-time 0 0 0 day month year)))))

  ;; github.com/arunkmv/.config/tree/main/emacs#tab-bar
  (defface ps/display-time
    '((t (:inherit bold)))
    "Face for `display-time-string' in `global-mode-string'")

  :general
  ("M-A-t" 'world-clock))
#+end_src

** tmr
:PROPERTIES:
:ID:       87D2EB00-727C-4CA3-85F1-B8D82D37B48D
:END:

/[[https://protesilaos.com/emacs/tmr][tmr]] set timers using a convenient notation./

#+begin_src emacs-lisp :results silent
(use-package tmr
  :defer 10)
#+end_src

** display-wttr
:PROPERTIES:
:ID:       E1DB2097-7273-4FAC-BA84-67D46815FC45
:END:

/[[https://github.com/josegpt/display-wttr][display-wttr]] displays weather information in the modeline (or tab-bar)./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/tab-bar)
(use-package display-wttr
  :defer 10
  :config
  (setq display-wttr-interval (* 15 60))
  (setq display-wttr-locations ps/display-wttr-locations)

  (display-wttr-mode))
#+end_src

* history
:PROPERTIES:
:ID:       20B0D7AB-5B27-4D80-A9D8-DAAAFCB27651
:END:

** simple
:PROPERTIES:
:ID:       C7BA09A3-635F-4F31-A17A-F94F3B024522
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :general
  ((minibuffer-mode-map mu4e-minibuffer-search-query-map)
   "M-k" 'previous-history-element
   "M-l" 'next-history-element))
#+end_src

** savehist
:PROPERTIES:
:ID:       D411AA79-C8FE-4E03-B06E-1BED5B7688BC
:END:

/savehist makes Emacs remember completion history across sessions./

#+begin_src emacs-lisp :results silent
(use-feature savehist
  :defer 3

  :config
  (savehist-mode)
  (setq history-length t) ; unlimited history
  (setq savehist-additional-variables
        '(calc-quick-calc-history
          citar-history
          command-history
          compile-history
          compilation-command
          eww-history
          extended-command-history
          file-name-history
          Info-history-list
          ido-file-history
          kill-ring
          kmacro-ring
          last-kbd-macro
          log-edit-comment-ring
          magit-read-rev-history
          mark-ring
          read-expression-history
          regexp-search-ring
          register-alist
          search-ring
          shell-command-history
          telega-search-history
          twittering-search-history))
  (setq savehist-save-minibuffer-history t))
#+end_src

** saveplace
:PROPERTIES:
:ID:       8DE4A4B7-4B96-445F-BC1F-B10BBF181F53
:END:

/saveplace makes Emacs remember point position in file across sessions./

#+begin_src emacs-lisp :results silent
(use-feature saveplace
  :demand t
  :config
  (save-place-mode))
#+end_src

** session
:PROPERTIES:
:ID:       F4D1CD7C-0BA9-4D20-8D99-399331682D1B
:END:

/[[https://github.com/emacsorphanage/session][session]] lets you use variables, registers and buffer places across sessions./

#+begin_src emacs-lisp :results silent
(use-package session
  :demand t
  :config
  (setq session-globals-include '((kill-ring 100)
                                  (session-file-alist 100 t)
                                  (file-name-history 100)
                                  search-ring regexp-search-ring))

  (add-hook 'elpaca-after-init-hook #'session-initialize))
#+end_src

** recentf
:PROPERTIES:
:ID:       C22F4A07-A237-498A-999D-F841F3B10074
:END:

/recentf makes Emacs remember the most recently visited files./

#+begin_src emacs-lisp :results silent
(use-feature recentf
  :defer 10
  :config
  (setq recentf-max-saved-items 100)

  ;; github.com/emacscollective/no-littering#suggested-settings
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (recentf-mode))
#+end_src

** remember
:PROPERTIES:
:ID:       438AD8A8-0F4F-4A1D-9BC9-110906944509
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/remember)
(use-feature remember
  :demand t
  :init
  (setq remember-data-file "~/.config/emacs-profiles/var/remember/notes")

  :config
  (setq remember-notes-auto-save-visited-file-name t)
  (setq remember-notes-buffer-name "*scratch*")
  (setq initial-buffer-choice
        (lambda () (kill-buffer remember-notes-buffer-name)
          (remember-notes))))
#+end_src

* version control
:PROPERTIES:
:ID:       CBBAD256-2800-4E9C-9042-C033FF95FA58
:END:
:LOGBOOK:
:END:

** vc
:PROPERTIES:
:ID:       B9E38DFD-09DC-4DB2-B710-44DB6F00D9DC
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 18:13]--[2021-07-22 Thu 18:34] =>  0:21
:END:

#+begin_src emacs-lisp :results silent
(use-feature vc
  :config
  (setq vc-follow-symlinks t) ; don't ask for confirmation when opening symlinked file
  (setq vc-make-backup-files nil)) ; do not backup version controlled files
#+end_src

** ediff
:PROPERTIES:
:ID:       987C9066-28ED-4B5A-944C-A90681182264
:END:

#+begin_src emacs-lisp :results silent
(use-feature ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)

  :general
  ("A-d" 'ediff))
#+end_src

** diff-mode
:PROPERTIES:
:ID:       33F1D5AA-3DA7-43EC-8ACD-0D8360445459
:END:

#+begin_src emacs-lisp
(use-feature diff-mode
  :demand t
  :general
  (diff-mode-map
   "M-o" nil))
#+end_src

** smerge
:PROPERTIES:
:ID:       FE85CC7E-E2A0-4494-8D1E-A64A4C40013E
:END:

#+begin_src emacs-lisp
(use-feature smerge-mode
  :general
  (smerge-mode-map
   "s-n" 'smerge-next
   "s-SPC" 'smerge-next
   "s-p" 'smerge-prev
   "s-l" 'smerge-keep-lower
   "s-k" 'smerge-keep-upper
   "s-a" 'smerge-keep-all
   "s-b" 'smerge-keep-base
   "s-c" 'smerge-keep-current))
#+end_src

** magit
:PROPERTIES:
:ID:       B662CE1B-3F94-486E-A3DE-052775035960
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 21:51]--[2021-11-18 Thu 21:52] =>  0:01
CLOCK: [2021-07-22 Thu 17:12]--[2021-07-22 Thu 17:20] =>  0:08
CLOCK: [2021-07-01 Thu 22:05]--[2021-07-01 Thu 22:55] =>  0:50
CLOCK: [2021-02-25 Thu 17:24]--[2021-02-25 Thu 17:45] =>  0:21
CLOCK: [2021-02-25 Thu 14:53]--[2021-02-25 Thu 15:00] =>  0:07
:END:

/[[https://github.com/magit/magit][magit]] is a complete text-based user interface to Git./

#+begin_src emacs-lisp :results silent
(use-package magit
  :defer 5
  :config
  (setq magit-commit-ask-to-stage 'stage)
  (setq magit-diff-refine-hunk 'all) ; show word-granularity differences in all diff hunks

  (add-to-list 'magit-no-confirm 'stage-all-changes)

  ;; adapted from Sacha Chua
  (defun ps/magit-stage-commit-and-push (message)
    "Stage, commit and push all changes."
    (interactive
     (list (progn (magit-diff-unstaged) (read-string "Commit Message: "))))
    (when (or
           (magit-anything-staged-p)
           (magit-anything-unstaged-p))
      (magit-stage-modified '(4))
      (magit-commit-create (list "-m" message)))
    (call-interactively #'magit-push-current-to-pushremote))

  (defun ps/magit-stage-commit-and-push-all-repos ()
    "Update all active depositories."
    (dolist (directory ps/dir-all-repos)
      (ps/magit-midnight-update directory)))

  (defun ps/magit-midnight-update (directory)
    "Update repository daily using `midnight'."
    (let ((default-directory directory))
      (ps/magit-stage-commit-and-push "Midnight update")))

  ;; gist.github.com/dotemacs/9a0433341e75e01461c9
  (defun ps/magit-parse-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
        url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                "https://\\2/\\3"
                                url)))

  (transient-define-prefix magit-dispatch ()
    "Invoke a Magit command from a list of available commands."
    :info-manual "(magit)Top"
    ["Transient and dwim commands"
     ;; → bound in magit-mode-map or magit-section-mode-map
     ;; ↓ bound below
     [("A" "Apply"          magit-cherry-pick)
      ;; a                  ↓
      ("b" "Branch"         magit-branch)
      ("B" "Bisect"         magit-bisect)
      ("c" "Commit"         magit-commit)
      ("C" "Clone"          magit-clone)
      ("d" "Diff"           magit-diff)
      ("D" "Diff (change)"  magit-diff-refresh)
      ("e" "Ediff (dwim)"   magit-ediff-dwim)
      ("E" "Ediff"          magit-ediff)
      ("f" "Fetch"          magit-fetch)
      ("F" "Pull"           magit-pull)
      ;; g                  ↓
      ;; G                → magit-refresh-all
      ("h" "Help"           magit-info)
      ("H" "Section info"   magit-describe-section :if-derived magit-mode)]
     [("i" "Ignore"         magit-gitignore)
      ("I" "Init"           magit-init)
      ("j" "Jump to section"magit-status-jump  :if-mode     magit-status-mode)
      ("j" "Display status" magit-status-quick :if-not-mode magit-status-mode)
      ("J" "Display buffer" magit-display-repository-buffer)
      ;; k                  ↓
      ;; K                → magit-file-untrack
      ("l" "Log"            magit-log)
      ("L" "Log (change)"   magit-log-refresh)
      ("m" "Merge"          magit-merge)
      ("M" "Remote"         magit-remote)
      ("n" "Forge"          forge-dispatch)
      ;; N       reserved → forge-dispatch
      ("o" "Submodule"      magit-submodule)
      ("O" "Subtree"        magit-subtree)
      ("p" "Pull"           magit-pull)
      ;; P                → magit-section-backward
      ;; q                → magit-mode-bury-buffer
      ("Q" "Command"        magit-git-command)]
     [("r" "Rebase"         magit-rebase)
      ;; R                → magit-file-rename
      ;; s                  ↓
      ;; S                  ↓
      ("t" "Tag"            magit-tag)
      ("T" "Note"           magit-notes)
      ;; u                  ↓
      ;; U                  ↓
      ;; v                  ↓
      ("V" "Revert"         magit-revert)
      ("w" "Apply patches"  magit-am)
      ("W" "Format patches" magit-patch)
      ;; x                → magit-reset-quickly
      ("X" "Reset"          magit-reset)
      ("y" "Show Refs"      magit-show-refs)
      ("Y" "Cherries"       magit-cherry)
      ("z" "Stash"          magit-stash)
      ("Z" "Worktree"       magit-worktree)
      ("." "Push"           magit-push)
      ("!" "Run"            magit-run)]]
    ["Applying changes"
     :if-derived magit-mode
     [("a" "Apply"          magit-apply)
      ("v" "Reverse"        magit-reverse)
      ("k" "Discard"        magit-discard)]
     [("s" "Stage"          magit-stage)
      ("u" "Unstage"        magit-unstage)]
     [("S" "Stage all"      magit-stage-modified)
      ("U" "Unstage all"    magit-unstage-all)]]
    ["Essential commands"
     :if-derived magit-mode
     [("g" "       refresh current buffer"   magit-refresh)
      ("q" "       bury current buffer"      magit-mode-bury-buffer)
      ("<tab>" "   toggle section at point"  magit-section-toggle)
      ("<return>" "visit thing at point"     magit-visit-thing)]
     [("C-x m"    "show all key bindings"    describe-mode)
      ("C-x i"    "show Info manual"         magit-info)]])

  :general
  ("A-g" 'magit
   "A-M-g" 'magit-clone)
  (magit-mode-map
   "n" 'forge-dispatch
   "p" 'magit-pull
   "." 'magit-push)
  (magit-status-mode-map
   "A-C-s-r" 'magit-section-backward-sibling
   "A-C-s-f" 'magit-section-forward-sibling))
#+end_src


- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- To read: [[https://emacsredux.com/blog/2020/12/11/super-keybindings-for-magit/][Super Keybindings for Magit | Emacs Redux]]

*** resources
:PROPERTIES:
:ID:       09A7E16B-377A-4BB7-AC3B-4D7A673E7CA8
:END:
- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- https://tvraman.github.io/emacspeak/blog/github-quick-workflow.html
- [[https://prathamesh.tech/2019/06/21/creating-pull-requests-from-emacs/][Creating pull requests from emacs]]

** ghub
:PROPERTIES:
:ID:       C557A862-9EC7-406C-98E1-C248F7D579F5
:END:

/[[https://github.com/magit/ghub][ghub]] provides basic support for using the APIs of various Git forges from Emacs packages./

#+begin_src emacs-lisp :results silent
(use-package ghub
  :defer 5)
#+end_src

** forge
:PROPERTIES:
:ID:       F6F60AE4-9FEA-4179-922C-CC649BC752A4
:END:
:LOGBOOK:
CLOCK: [2023-04-19 Wed 17:59]--[2023-04-19 Wed 18:48] =>  0:49
CLOCK: [2022-06-25 Sat 15:55]--[2022-06-25 Sat 16:30] =>  0:35
CLOCK: [2021-12-21 Tue 20:20]--[2021-12-21 Tue 20:27] =>  0:07
CLOCK: [2021-07-19 Mon 16:11]--[2021-07-19 Mon 16:39] =>  0:28
CLOCK: [2021-07-19 Mon 14:22]--[2021-07-19 Mon 15:15] =>  0:53
CLOCK: [2021-04-15 Thu 13:37]--[2021-04-15 Thu 13:42] =>  0:05
:END:

/[[https://github.com/magit/forge][forge]] let's one work with git forges directly from magit./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/forge)
(use-package forge
  :after magit ghub emacsql auth-source-pass
  :demand t
  :init
  (if (version<= emacs-version "29.0")
      (setq forge-database-connector 'sqlite)
    (setq forge-database-connector 'sqlite-builtin))

  ;; (run-with-idle-timer 600 t #'ps/forge-pull-notifications-silently)

  :config
  (setq forge-owned-accounts `((,ps/forge-owned-accounts)))
  (setq forge-topic-list-limit '(500 . -500)) ; show closed topics only via `forge-toggle-closed-visibility'

  (defun ps/forge-pull-notifications-silently ()
    (let ((inhibit-message t)
          (default-directory ps/dir-tlon-biblioteca-altruismo-eficaz))
      (forge-pull-notifications)))

  (transient-define-prefix forge-dispatch ()
    "Dispatch a forge command."
    [["Fetch"
      ("f f" "all topics"             forge-pull)
      ("f t" "one topic"              forge-pull-topic)
      ("f n" "notifications"          forge-pull-notifications)
      """Create"
      ("c i" "issue"                  forge-create-issue)
      ("c p" "pull-request"           forge-create-pullreq)
      ("c u" "pull-request from issue" forge-create-pullreq-from-issue
       :if (lambda () (forge-github-repository-p (forge-get-repository nil))))
      ("c f" "fork or remote"        forge-fork)
      """Review"
      ("w c" "Code review at point"            code-review-forge-pr-at-point)
      ("w g" "GitHub review at point"          github-review-forge-pr-at-point)
      ]
     ["List"
      ("l a" "awaiting review"        forge-list-requested-reviews)
      ("l i" "issues"                 forge-list-issues)
      ("l n" "notifications"          forge-list-notifications)
      ("l g" "notifications (GHub)"   gh-notify)
      ("l p" "pull-requests"          forge-list-pullreqs)
      ("l t" "topics"                 forge-list-topics)
      ("l r" "repositories"           forge-list-repositories)
      """Edit"
      ("e t" "edit title"                 forge-edit-topic-title)
      ("e s" "edit state"                 forge-edit-topic-state)
      ("e m" "edit milestone"             forge-edit-topic-milestone)
      ("e l" "edit labels"                forge-edit-topic-labels)
      ]
     ["Browse"
      ("b i" "issue"                  forge-browse-issue)
      ("b p" "pull-request"           forge-browse-pullreq)
      ("b r" "remote"                 forge-browse-remote)
      ("b t" "topic"                  forge-browse-topic)
      ("b I" "issues"                 forge-browse-issues)
      ("b P" "pull-requests"          forge-browse-pullreqs)
      """Visit"
      ("v i" "issue"                  forge-visit-issue)
      ("v p" "pull-request"           forge-visit-pullreq)
      ("v t" "topic"                  forge-visit-topic)
      ]
     ["Authored"
      ("u i" "authored issues"        forge-list-authored-issues)
      ("u p" "authored pull-requests" forge-list-authored-pullreqs)
      """Owned"
      ("o i" "owned issues"           forge-list-owned-issues)
      ("o p" "owned pull-requests"    forge-list-owned-pullreqs)]
     ["Assigned"
      ("i i" "assigned issues"        forge-list-assigned-issues)
      ("i p" "assigned pull-requests" forge-list-assigned-pullreqs)
      """Labeled"
      ("d i" "labeled issues"         forge-list-labeled-issues)
      ("d p" "labeled pull-requests"  forge-list-labeled-pullreqs)
      ("e a" "edit assigness"             forge-edit-topic-assignees)]
     ["Misc"
      ("," "capture topic" ps/orgit-capture)
      ("s" "search topics" forge-search)
      ("'" "open associated file" forge-search)
      (";" "Show/hide closed topics" forge-toggle-closed-visibility)
      ]
     ]
    )

  :general
  (forge-post-mode-map
   "s-c" 'forge-post-submit)
  ((forge-issue-list-mode-map
    forge-pullreq-list-mode-map)
   "," 'ps/orgit-capture)
  (forge-topic-mode-map
   "a" 'forge-edit-topic-assignees
   "b" 'forge-edit-topic-body
   "l" 'forge-edit-topic-labels
   "m" 'forge-edit-topic-milestone
   "x" 'forge-edit-topic-state
   "t" 'forge-edit-topic-title
   "e" 'forge-edit-post
   "p" 'forge-create-post
   "r" 'forge-create-post))
#+end_src

** orgit-forge
:PROPERTIES:
:ID:       8D2CFDBF-4DD1-412C-A9F0-0D9393156A11
:END:

/[[https://github.com/magit/orgit-forge][orgit-forge]] supports ~org-mode~ links to ~forge~ buffers./

#+begin_src emacs-lisp
(use-package orgit-forge
  :after org forge
  :demand t
  :config
  (defun ps/orgit-store-link (_arg)
    "Like `org-store-link' but store links to all selected commits, if any."
    (interactive "P")
    (if-let ((sections (magit-region-sections 'commit)))
        (save-excursion
          (dolist (section sections)
            (goto-char (oref section start))
            (set-mark (point))
            (activate-mark)
            (call-interactively #'org-store-link))
          (deactivate-mark))
      (save-window-excursion
        (let ((topic (forge-topic-at-point)))
          (cond ((forge-pullreq-p topic)
                 (forge-visit-pullreq topic))
                ((forge-issue-p topic)
                 (forge-visit-issue topic)))
          (call-interactively #'org-store-link)))))

  (advice-add 'orgit-store-link :override #'ps/orgit-store-link)

  (defun ps/orgit-capture ()
    "Capture a new Magit/Forge task."
    (interactive)
    (let ((topic-assignee (alist-get
                           (tlon-bae-forge-get-assignee-at-point)
                           tlon-bae-users nil nil 'string=)))
      (unless (string= user-full-name topic-assignee)
        (user-error "You are not the assignee of this task. The assignee is %s" topic-assignee))
      (orgit-store-link nil)
      (let* ((org-link (ps/org-nth-stored-link 0))
             (label (tlon-bae-forge-get-label-at-point))
             (action (alist-get label tlon-bae-label-actions nil nil #'string=))
             (binding (upcase (alist-get label tlon-bae-label-bindings nil nil #'string=))))
        (kill-new (format "%s %s" action org-link))
        (org-capture nil (concat "tb" binding)))))

  :general
  ((forge-topic-mode-map
    magit-status-mode-map)
   "," 'ps/orgit-capture))
#+end_src

** forge-search
:PROPERTIES:
:ID:       1E83FDA2-3529-4189-8F5D-6B3388A45AE4
:END:

/[[https://github.com/eatse21/forge-search.el/blob/master/forge-search.el][forge-search]] supports searching through issues and pull requests within ~forge~./

#+begin_src emacs-lisp
(use-package forge-search
  :elpaca (forge-search
           :host github
           :repo "eatse21/forge-search.el")
  :after forge
  :demand t
  :general
  ((forge-topic-mode-map
    forge-topic-list-mode-map
    forge-issue-list-mode-map
    forge-pullreq-list-mode-map
    forge-notifications-mode-map
    forge-repository-list-mode-map)
   "s" 'forge-search))
#+end_src

** code-review
:PROPERTIES:
:ID:       A0887865-7CAC-47E6-A894-D49F07BCBAF9
:END:
:LOGBOOK:
CLOCK: [2023-04-10 Mon 14:31]--[2023-04-10 Mon 14:44] =>  0:13
:END:

/[[https://github.com/wandersoncferreira/code-review][code-review]] helps perform code reviews from Emacs./

#+begin_src emacs-lisp :results silent
(use-package code-review
  :after magit forge emojify
  :demand t
  :config
  (setq code-review-fill-column 80)
  (setq code-review-auth-login-marker 'forge)

  (add-hook 'code-review-mode-hook #'emojify-mode))
#+end_src

** github-review
:PROPERTIES:
:ID:       7AB2F3A1-F542-4F27-A576-470630DC0909
:END:
:LOGBOOK:
CLOCK: [2023-04-10 Mon 16:25]--[2023-04-10 Mon 16:50] =>  0:25
CLOCK: [2023-04-10 Mon 14:44]--[2023-04-10 Mon 14:49] =>  0:05
:END:

/[[https://github.com/charignon/github-review][github-review]] provides Emacs support for GitHub code reviews ./

#+begin_src emacs-lisp
(use-package github-review
  :after forge
  :config
  (setq github-review-view-comments-in-code-lines t)
  (setq github-review-reply-inline-comments t)

  :general
  (github-review-mode-map
   "s-m" 'github-review-comment
   "s-r" 'github-review-reject
   "s-a" 'github-review-approve))
#+end_src

** gh-notify
:PROPERTIES:
:ID:       02EE3FAE-133C-479E-B7C7-9B2BB2160DCA
:END:

/[[https://github.com/anticomputer/gh-notify][gh-notify]] is a veneer for the Magit/Forge GitHub porcelain./

#+begin_src emacs-lisp
(use-package gh-notify
  :after forge
  :demand t)
#+end_src

** git-auto-commit-mode
:PROPERTIES:
:ID:       FCB4DDAC-CD47-48CE-BA0F-96C0574C458A
:END:

/[[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]] allows for committing and pushing automatically after each save./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/git-auto-commit-mode)
(use-package git-auto-commit-mode
  :config
  (setq-default gac-automatically-push-p nil)
  (setq-default gac-debounce-interval 30)
  (setq-default gac-silent-message-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+end_src

* search & replace
:PROPERTIES:
:ID:       9FDBBF3E-724F-4402-9DDB-F9349F65AB0E
:END:
:LOGBOOK:
CLOCK: [2021-05-23 Sun 15:31]--[2021-05-23 Sun 15:42] =>  0:11
CLOCK: [2021-05-22 Sat 22:23]--[2021-05-22 Sat 22:46] =>  0:23
CLOCK: [2021-04-04 Sun 19:29]--[2021-04-04 Sun 19:40] =>  0:11
CLOCK: [2021-03-17 Wed 16:40]--[2021-03-17 Wed 16:43] =>  0:03
:END:

** isearch
:PROPERTIES:
:ID:       4B274841-062C-4511-8FF3-C850BAB05905
:END:

#+begin_src emacs-lisp :results silent
(use-feature isearch
  :config
  (setq search-default-mode #'char-fold-to-regexp)
  (setq search-whitespace-regexp ".*?")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq isearch-yank-on-move t)
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format nil)
  (setq lazy-count-suffix-format " (%s/%s)")
  (setq isearch-allow-scroll 'unlimited)
  (setq search-upper-case t)
  (setq search-exit-option t) ; `t' is the default, but some alternative value may be more sensible

  (defun ps/isearch-exit-other-end ()
    "Exit isearch, at the opposite end of the string."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))

  (defun ps/isearch-copy-match ()
    "Send the first isearch match to the kill ring."
    (interactive)
    (kill-new (buffer-substring (point) isearch-other-end))
    (isearch-done))

  ;; reddit.com/r/emacs/comments/8aepnk/comment/dwybodv
  (defun ps/isearch-yank-kill-literally ()
    "Pull string from kill ring into search string literally."
    (interactive)
    (setq isearch-yank-flag t)
    (let ((string (current-kill 0)))
      (isearch-process-search-string
       string
       (mapconcat 'isearch-text-char-description string ""))))

  (add-hook 'isearch-mode-end-hook #'recenter-top-bottom)

  (defadvice
      isearch-repeat-forward
      (after isearch-repeat-forward-recenter activate)
    (recenter))

  (defadvice
      isearch-repeat-backward
      (after isearch-repeat-backward-recenter activate)
    (recenter))

  (ad-activate 'isearch-repeat-forward)
  (ad-activate 'isearch-repeat-backward)

  :general
  (isearch-mode-map
   "C-H-M-s" 'isearch-delete-char
   "C-H-M-d" "C-- C-H-M-s" ; delete forward char
   "C-g" 'isearch-abort ; "quit once"
   "C-H-g" 'isearch-exit ; "quit twice"
   "C-'" 'isearch-toggle-char-fold
   "C-," 'isearch-forward-symbol-at-point
   "C-." 'isearch-forward-thing-at-point
   "C-/" 'isearch-complete
   "C-<return>" 'ps/isearch-exit-other-end
   "H-m" 'isearch-toggle-lax-whitespace
   "C-a" 'isearch-toggle-regexp
   "C-b" 'isearch-beginning-of-buffer
   "C-d" 'isearch-toggle-word
   "C-f" 'isearch-highlight-lines-matching-regexp
   "C-i" 'isearch-toggle-invisible
   "C-l" 'isearch-yank-line
   "C-m" 'isearch-toggle-symbol
   "C-n" 'isearch-end-of-buffer
   "C-o" 'isearch-occur
   "C-p" 'isearch-highlight-regexp
   "C-v" 'isearch-yank-kill
   "A-C-v" 'ps/isearch-yank-kill-literally
   "C-y" 'isearch-forward-symbol-at-point
   "H-c" 'ps/isearch-copy-match
   "M-k" 'isearch-ring-retreat
   "M-l" 'isearch-ring-advance)
  ((isearch-mode-map minibuffer-mode-map)
   "C-e" 'isearch-query-replace))
#+end_src

To check: [[https://karthinks.com/software/bridging-islands-in-emacs-1/][Bridging Islands in Emacs: re-builder and query-replace-regexp | Karthinks]]

*** TODO [#5] Add advice for other relevant commands
:PROPERTIES:
:Effort:   0:30
:ID:       C1131D3A-4E66-48E5-9353-C7E785391DFA
:END:

** replace
:PROPERTIES:
:ID:       DC08C217-5005-4A65-986B-85EA876ECB6D
:END:

#+begin_src emacs-lisp :results silent
(use-feature replace
  :config
  ;; emacs.stackexchange.com/a/12318/32089
  (setq query-replace-from-history-variable 'regexp-search-ring)

  :general
  (isearch-mode-map
   "A-C-e" 'query-replace-regexp))
#+end_src

** substitute
:PROPERTIES:
:ID:       CDB7BD03-86D2-4780-871E-205F20EFA367
:END:

/[[https://git.sr.ht/~protesilaos/substitute][substitute]] efficiently replaces targets in the buffer or context./

#+begin_src emacs-lisp
(use-package substitute
  :elpaca (substitute
             :host sourcehut
             :repo "protesilaos/substitute")
  :general
  (isearch-mode-map
   "C-t" 'substitute-target-in-buffer))
#+end_src

** visual-regexp
:PROPERTIES:
:ID:       0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942
:END:

/[[https://github.com/benma/visual-regexp.el][visual-regexp]] provides visual feedback to regexp search and replace./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp)
#+end_src

** visual-regexp-steroids
:PROPERTIES:
:ID:       375D8037-D6A0-4519-A3B2-32E88810DA6D
:END:

/[[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] extends [[id:0DE5075B-AC82-4AB3-9B0A-3D84DC6CF942][visual-regexp]] to support additional regexp engines./

#+begin_src emacs-lisp :results silent
(use-package visual-regexp-steroids
  :after visual-regexp
  :demand t
  :config
  (setq vr/engine 'python)
  (setq vr/command-python
        (concat "python3 "
                (file-name-concat user-emacs-directory "elpacs/builds/visual-regexp-steroids/regexp.py")))

  :general
  (isearch-mode-map
   "A-C-s" 'vr/isearch-forward
   "A-C-r" 'vr/isearch-backward))
#+end_src

** imenu
:PROPERTIES:
:ID:       CC1F3F93-2446-4399-A14D-9DCB6753D26B
:END:

#+begin_src emacs-lisp :results silent
(use-feature imenu
  :demand t
  :config
  (setq org-imenu-depth 3))
#+end_src

** pcre2el
:PROPERTIES:
:ID:       1E9DDAD1-9663-432D-8882-A875227AB6B2
:END:

/[[https://github.com/joddie/pcre2el][pcre2el]] supports conversion between PCRE, Emacs and rx regexp syntax./

#+begin_src emacs-lisp :results silent
(use-package pcre2el)
#+end_src

** wgrep
:PROPERTIES:
:ID:       928E0F8E-569F-4DCA-9F29-C0623C2973C7
:END:

/[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] lets you create a writable grep buffer and apply the changes to files./

#+begin_src emacs-lisp :results silent
(use-package wgrep
  :demand t
  :config
  (setq wgrep-auto-save-buffer t)
  (setq wgrep-enable-key "r")

  :general
  (wgrep-mode-map
   "s-c" 'wgrep-finish-edit))
#+end_src

* minibuffer completion
:PROPERTIES:
:ID:       E83EC00B-0C94-44CD-9EC0-355992C99234
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:43]--[2021-06-10 Thu 12:49] =>  0:06
:END:

| package    | what it does                      |
|------------+-----------------------------------|
| [[id:970043EC-39A9-46AE-9CC9-1F5F2175BF70][vertico]]    | minibuffer completion UI          |
| [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]    | minibuffer completion backend     |
| [[id:D0A453D1-784F-49E4-B238-ED009AF84EDB][orderless]]  | minibuffer completion styles      |
| [[id:C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68][marginalia]] | minibuffer completion annotations |
| [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]]     | minibuffer completion actions     |

For a comprehensive overview of completion in Emacs—both minibuffer completion and completion at point—I recommend [[https://www.youtube.com/watch?v=fnE0lXoe7Y0][this video]] by Andrew Tropin.

** vertico
:PROPERTIES:
:ID:       970043EC-39A9-46AE-9CC9-1F5F2175BF70
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 20:10]--[2022-06-21 Tue 20:57] =>  0:47
:END:

/[[https://github.com/minad/vertico][vertico]] is a vertical completion UI based on the default completion system./

#+begin_src emacs-lisp :results silent
(use-package vertico
  :elpaca (vertico :files (:defaults "extensions/*")
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive))
  :demand t
  :init
  (vertico-mode)

  :config
  (setq vertico-multiform-commands
        '((consult-line buffer)
          (consult-imenu buffer)
          (consult-grep buffer)))
  ;; Configure the display per completion category.
  ;; Use the grid display for files and a buffer
  ;; for the consult-grep commands.
  (setq vertico-multiform-categories
        '((file grid)))
  (setq vertico-cycle t)
  (setq vertico-count 16)
  ;; (setq vertico-quick1 avy-keys)
  ;; (setq vertico-quick2 avy-keys)

  (vertico-multiform-mode)

  :general
  (vertico-map
   "<C-i>" 'vertico-exit
   "M-f" 'vertico-quick-exit
   "C-H-M-w" 'vertico-directory-up))
#+end_src

** embark
:PROPERTIES:
:ID:       19A4F21C-2169-4529-92E4-68E3A584DDAC
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:10]--[2022-07-22 Fri 18:13] =>  0:03
CLOCK: [2022-07-21 Thu 21:18]--[2022-07-21 Thu 21:24] =>  0:06
:END:

/[[https://github.com/oantolin/embark][embark]] provides contextually relevant actions in completion menus and in normal buffers./

#+begin_src emacs-lisp :results silent
(use-package embark
  :defer 8
  :config

  (add-to-list 'embark-keymap-alist '(yasnippet . embark-yasnippet-completion-actions))

  (defvar-keymap embark-yasnippet-completion-actions
  :parent embark-general-map)

  :general
  (embark-yasnippet-completion-actions
  "d" 'consult-yasnippet-visit-snippet-file)
  ("C-;" 'embark-act
   "A-C-;" 'embark-dwim
   "C-h B" 'embark-bindings))
#+end_src

** consult
:PROPERTIES:
:ID:       C6144D48-2E3C-4033-AD6E-5D7EE175D9E1
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:32]--[2023-03-18 Sat 13:14] =>  0:42
CLOCK: [2022-07-15 Fri 21:21]--[2022-07-15 Fri 21:44] =>  0:23
CLOCK: [2022-07-15 Fri 13:51]--[2022-07-15 Fri 14:22] =>  0:31
CLOCK: [2022-07-09 Sat 09:56]--[2022-07-09 Sat 10:33] =>  0:37
CLOCK: [2022-06-22 Wed 11:05]--[2022-06-22 Wed 11:10] =>  0:05
CLOCK: [2022-06-21 Tue 21:48]--[2022-06-21 Tue 23:04] =>  1:16
CLOCK: [2022-06-21 Tue 17:53]--[2022-06-21 Tue 18:40] =>  0:47
:END:

/[[https://github.com/minad/consult][consult]] provides practical commands based on the Emacs completion function ~completing-read~./

#+begin_src emacs-lisp :results silent
(use-package consult
  :demand t
  :config
  ;; replace `rg' with `rga'
  (setq consult-ripgrep-args "rga --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --with-filename --line-number --search-zip --multiline --multiline-dotall")
  (setq consult-locate-args "mdfind")
  (setq consult-narrow-key "<")
  (setq consult-widen-key ">")

  (defun ps/consult-locate-current ()
    "Search with `consult-locate' in current directory."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -onlyin " default-directory)))
      (consult-locate)))

  (defun ps/consult-locate-home ()
    "Search with `consult-locate' in home directory."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -onlyin " ps/dir-user)))
      (consult-locate)))

  (defun ps/consult-locate-anywhere ()
    "Search with `consult-locate' anywhere in the hard drive."
    (interactive)
    (let ((consult-locate-args (concat "mdfind ")))
      (consult-locate)))

  (defun ps/consult-locate-file-current ()
    "Search with `consult-locate' in current directory for
matching file names only."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -name -onlyin " default-directory)))
      (consult-locate)))

  (defun ps/consult-locate-file-home ()
    "Search with `consult-locate' in home directory for
matching file names only."
    (interactive)
    (let ((consult-locate-args (concat "mdfind -name -onlyin " ps/dir-user)))
      (consult-locate)))

  (defun ps/consult-locate-file-anywhere ()
    "Search with `consult-locate' anywhere on my hard drive for
matching file names only."
    (interactive)
    (let ((consult-locate-args "mdfind -name "))
      (consult-locate)))

  (defun ps/consult-ripgrep-current ()
    "Search with `rg' for files in the current directory where the
content matches a regexp."
    (interactive)
    (consult-ripgrep default-directory))

  (defun ps/consult-ripgrep-home ()
    "Search with `rg' for files in home directory where the content
matches a regexp."
    (interactive)
    (consult-ripgrep ps/dir-user))

  (defun ps/consult-ripgrep-anywhere ()
    "Search with `rg' for files anywhere in hard drive where the
content matches a regexp."
    (interactive)
    (consult-ripgrep ps/dir-root))

  (defun ps/consult-org-heading (&optional match scope)
    "Jump to an Org heading.

MATCH and SCOPE are as in org-map-entries and determine which
entries are offered.  By default, all entries of the current
buffer are offered."
    (interactive)
    (widen)
    (ps/org-fold-show-all-headings)
    (consult-org-heading)
    (recenter 1))

  ;; (advice-remove 'consult-org-heading #'ps/org-cycle-content)
  ;; (advice-add 'consult-org-agenda :after #'ps/org-narrow-to-entry-and-children)

  :general
  ("A-C-l" 'consult-line
   "C-f" 'consult-find
   "H-b" 'consult-buffer
   "A-H-i" 'consult-info
   "H-R" 'consult-history
   "H-V" 'consult-yank-pop
   "H-f" 'ps/consult-locate-file-current
   "H-F" 'ps/consult-locate-file-home
   "A-H-f" 'ps/consult-locate-file-anywhere
   "H-k" 'ps/consult-locate-current
   "H-K" 'ps/consult-locate-home
   "A-H-k" 'ps/consult-locate-anywhere
   "H-p" 'ps/consult-ripgrep-current
   "H-P" 'ps/consult-ripgrep-home
   "A-H-p" 'ps/consult-ripgrep-anywhere)
  (org-mode-map
   "s-j" 'ps/consult-org-heading)
  ((elfeed-show-mode-map eww-mode-map prog-mode-map)
   "s-j" 'consult-imenu))
#+end_src

** consult-dir
:PROPERTIES:
:ID:       3250EBD7-513E-439F-972F-B43C8214AC46
:END:

/[[https://github.com/karthink/consult-dir][consult-dir]] enables insertion of paths into the minibuffer prompt./

#+begin_src emacs-lisp :results silent
(use-package consult-dir
  :after consult
  :defer 15

  :config
  (setq consult-dir-default-command 'consult-dir-dired)
  ;; Should start using `projectile' first
  ;; (consult-dir-project-list-function 'consult-dir-projectile-dirs)

  :general
  ("H-B" 'consult-dir))
#+end_src

** consult-yasnippet
:PROPERTIES:
:ID:       437A790A-467F-46CB-9EE3-25AA91D43D89
:END:
:LOGBOOK:
CLOCK: [2022-06-27 Mon 20:12]--[2022-06-27 Mon 20:16] =>  0:04
:END:

/[[https://github.com/mohkale/consult-yasnippet/tree/cdb256d2c50e4f8473c6052e1009441b65b8f8ab][consult-yasnippet]] provides [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]] functionality to [[id:6405B8E7-6612-4D71-8C2C-A51F8808F4C6][yasnippet]]./

#+begin_src emacs-lisp :results silent
(use-package consult-yasnippet
  :after consult yasnippet
  :demand t
  :general
  ("A-C-y" 'consult-yasnippet))
#+end_src

** consult-spotify
:PROPERTIES:
:ID:       1605F697-9968-474A-9691-941723977EEC
:END:

Since I can't make [[id:5879A8B7-0889-4FCD-A16A-77D0BCEE4804][espotify]] work, I'm disabling this.

#+begin_src emacs-lisp :results silent
(use-package consult-spotify
  :disabled
  :after consult espotify)
#+end_src

** consult-flyspell
:PROPERTIES:
:ID:       272C2359-045B-49A7-8DFB-71F9B349D07D
:END:

/[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]] integrates flyspell with consult./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package consult-flyspell
  :after consult flyspell)
#+end_src

** embark-consult
:PROPERTIES:
:ID:       C7BDCA9D-F507-4C25-9AF8-1EBB86D99A61
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 18:17]--[2022-07-19 Tue 18:35] =>  0:18
:END:

/[[https://github.com/oantolin/embark/blob/master/embark-consult.el][embark-consult]] provides integration between [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]] and [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]./

#+begin_src emacs-lisp :results silent
(use-package embark-consult
  :after embark consult
  :demand t
  :config
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

** marginalia
:PROPERTIES:
:ID:       C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68
:END:

/[[https://github.com/minad/marginalia][marginalia]] displays annotations (such as docstrings) next to completion candidates./

#+begin_src emacs-lisp :results silent
(use-package marginalia
  :demand t
  :init
  (marginalia-mode))
#+end_src

** orderless
:PROPERTIES:
:ID:       D0A453D1-784F-49E4-B238-ED009AF84EDB
:END:

/[[https://github.com/oantolin/orderless][orderless]] is an completion style that matches multiple regexps in any order./

#+begin_src emacs-lisp :results silent
(use-package orderless
  :demand t
  :config
  (setq completion-styles '(orderless basic partial-completion))
  (setq completion-category-overrides '((file (styles basic partial-completion))))
  (setq orderless-matching-styles '(orderless-regexp))
  (setq orderless-style-dispatchers '(ps/orderless-flex-dispatcher
                                 ps/orderless-initialism-dispatcher
                                 ps/orderless-prefixes-dispatcher
                                 ps/orderless-exclusion-dispatcher))

  (defun ps/orderless-flex-dispatcher (pattern _index _total)
    "Flex dispatcher using `~' as suffix."
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun ps/orderless-initialism-dispatcher (pattern index _total)
    "Initialism dispatcher using `\,' as suffix."
    (when (string-suffix-p "," pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))

      (defun ps/orderless-prefixes-dispatcher (pattern index _total)
    "Prefix dispatcher using `\;' as suffix."
    (when (string-suffix-p ";" pattern)
      `(orderless-prefixes . ,(substring pattern 0 -1))))

  (defun ps/orderless-exclusion-dispatcher (pattern _index _total)
    "Exclusion dispatcher using `!' as suffix."
    (when (string-suffix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))
#+end_src

** ido
:PROPERTIES:
:ID:       458A26BD-1601-41D9-BC7E-7630466BC374
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:14]--[2022-07-14 Thu 20:17] =>  0:03
:END:

#+begin_src emacs-lisp :results silent
(use-feature ido
  :general
  (dired-mode-map
   "i" 'ido-find-file))
#+end_src
** which-key
:PROPERTIES:
:ID:       7781DC87-0D61-4482-91EE-6D2E1F8E122D
:END:

/[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in a popup./

#+begin_src emacs-lisp :results silent
(use-package which-key
  :defer 10
  :init
  (which-key-mode)

  :config
  (setq which-key-idle-delay 0))
#+end_src

* completion at point
:PROPERTIES:
:ID:       9037BE0D-FD13-4D33-8514-BE503421774D
:END:

| package | what it does                |
|---------+-----------------------------|
| [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]]   | completion at point UI      |
| [[id:5A103245-9DC3-4D95-96D7-2161F6CCD0B1][cape]]    | completion at point backend |

** corfu
:PROPERTIES:
:ID:       35370B0F-9EBD-433F-B59C-576EE8A69772
:END:

/[[https://github.com/minad/corfu][corfu]] enhances completion at point with a small completion popup./

#+begin_src emacs-lisp :results silent
(use-package corfu
  :elpaca (corfu :files (:defaults "extensions/*")
                 :includes (corfu-info
                            corfu-echo
                            corfu-history
                            ;; corfu-indexed
                            corfu-popupinfo
                            corfu-quick))
  :demand t
  :config
  (setq corfu-auto t)                 ;; Enable auto completion
  (setq corfu-quit-no-match t)        ;; Automatically quit if there is no match
  (setq corfu-cycle vertico-cycle)
  (setq corfu-count vertico-count)
  (setq corfu-info-documentation nil)
  (setq corfu-auto-delay 0)
  (setq corfu-auto-prefix 3)
  (setq corfu-popupinfo-delay 0)

  ;; Adapted from Prot
  ;; protesilaos.com/emacs/dotemacs#h:675ebef4-d74d-41af-808d-f9579c2a5ec4
  (defun ps/corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico is not active.
Useful for prompts such as `eval-expression' and `shell-command'."
    (unless (bound-and-true-p vertico--input)
      (corfu-mode)))

  ;; github.com/minad/corfu#transfer-completion-to-the-minibuffer
  (defun ps/corfu-move-to-minibuffer ()
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))

  (global-corfu-mode)

  (add-hook 'prog-mode-hook #'corfu-popupinfo-mode)
  (add-hook 'prog-mode-hook #'corfu-echo-mode)
  (add-hook 'corfu-mode-hook #'corfu-history-mode)
  (add-hook 'minibuffer-setup-hook #'ps/corfu-enable-always-in-minibuffer)

  :general
  (corfu-map
   "M-f" 'corfu-quick-complete
   "M-m" 'ps/corfu-move-to-minibuffer
   "<return>" 'corfu-complete
   "RET" 'corfu-complete))
#+end_src

** corfu-terminal
:PROPERTIES:
:ID:       6B55F343-3A3E-42CE-9353-6630DC7C4F46
:END:

/[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]] enables corfu popups on terminal./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/corfu-terminal)
(use-package corfu-terminal
  :after corfu
  :defer 30
  :config
  (corfu-terminal-mode))
#+end_src

** corfu-doc-terminal
:PROPERTIES:
:ID:       731DF77F-1269-4E04-90A5-DA2BB9446665
:END:

/[[https://codeberg.org/akib/emacs-corfu-doc-terminal][corfu-doc-terminal]] enables corfu-doc popup on terminal./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/corfu-doc-terminal)
(use-package corfu-doc-terminal
  :elpaca (corfu-doc-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git")
  :after corfu-terminal
  :demand t
  :config
  (corfu-doc-terminal-mode))
#+end_src

** kind-icon
:PROPERTIES:
:ID:       DE439647-A62B-4C32-A0BB-AA7D4BB3D9DD
:END:

/[[https://github.com/jdtsmith/kind-icon][kind-icon]] provides SVG icons for in-region completion./

#+begin_src emacs-lisp :results silent
(use-package kind-icon
  :after corfu
  :demand t

  :config
  (setq kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly

  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** cape
:PROPERTIES:
:ID:       5A103245-9DC3-4D95-96D7-2161F6CCD0B1
:END:

/[[https://github.com/minad/cape][cape]] provides completion-at-point extensions/

#+begin_src emacs-lisp
(use-package cape
  :demand t
  :after corfu
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)

  :config
  (setq cape-dabbrev-min-length 4))
#+end_src

** org-block-cafp
:PROPERTIES:
:ID:       5D18297C-CB85-47D0-9637-D38F3BD01332
:END:

/[[https://github.com/xenodium/org-block-capf][org-block-cafp]] adds support for org block completion at point./

#+begin_src emacs-lisp
(use-package org-block-capf
  :elpaca (org-block-capf :host github :repo "xenodium/org-block-capf")
  :after org
  :demand t
  :config
  (add-hook 'org-mode-hook #'org-block-capf-add-to-completion-at-point-functions))
#+end_src

** company
:PROPERTIES:
:ID:       D8BC79D0-C883-45A9-A5B2-98E88C59EE6B
:END:

I use ~completion-at-point~ for completion, not company. However, I still rely on company for a few completion backends.

#+begin_src emacs-lisp :results silent
(use-package company)
#+end_src

* help
:PROPERTIES:
:ID:       7F0CBD06-FDB3-4889-91CE-D8A25D4F2613
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 11:55]--[2021-07-04 Sun 12:05] =>  0:10
CLOCK: [2021-05-24 Mon 20:57]--[2021-05-24 Mon 21:07] =>  0:10
CLOCK: [2021-05-21 Fri 17:13]--[2021-05-21 Fri 17:47] =>  0:34
CLOCK: [2021-05-21 Fri 16:52]--[2021-05-21 Fri 17:04] =>  0:12
:END:

** help
:PROPERTIES:
:ID:       B4F00E3C-2682-486D-B05A-E983ACC82D09
:END:

#+begin_src emacs-lisp :results silent
(use-feature help
  :demand t
  :config
  (setq help-window-select t)
  (lossage-size 10000)

  (defun ps/describe-keymap-of-current-major-mode ()
    (interactive)
    (describe-keymap (current-local-map)))

  :general
  ("C-A-k" 'describe-keymap
   "C-A-m" 'ps/describe-keymap-of-current-major-mode)
  (input-decode-map
   [?\C-m] [C-m]
   [?\C-i] [C-i]))
#+end_src

** help-at-pt
:PROPERTIES:
:ID:       263F5A59-1B63-47BC-B77B-8165FBBE3E75
:END:

#+begin_src emacs-lisp :results silent
(use-feature help-at-pt
  :demand t
  :config
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0)       ; show help immediately when enabled
  (help-at-pt-set-timer))                ; set timer, thus enabling local help
#+end_src

** help-fns
:PROPERTIES:
:ID:       435E4A8D-23C0-462F-A49B-57DF6BEE99CD
:END:

#+begin_src emacs-lisp
(use-feature help-fns
  :demand t
  :config
  (defun ps/describe-face ()
    "Like `describe-face', but with `hl-line-mode' disabled, and
always use face at point."
    (interactive)
    (let ((hl-line-mode-enabled hl-line-mode)
          (global-hl-line-mode-enabled global-hl-line-mode))
      (hl-line-mode -1)
      (global-hl-line-mode -1)
      (describe-face (face-at-point t))
      (when hl-line-mode-enabled
        (hl-line-mode))
      (when global-hl-line-mode-enabled
        (global-hl-line-mode))))

  :general
  ("C-h C-f" 'ps/describe-face))
#+end_src

** helpful
:PROPERTIES:
:ID:       6DCDFA24-4561-43CD-9D82-7C870A1044D1
:END:
:LOGBOOK:
CLOCK: [2021-11-27 Sat 14:54]--[2021-11-27 Sat 15:00] =>  0:06
CLOCK: [2021-05-11 Tue 10:01]--[2021-05-11 Tue 10:12] =>  0:11
CLOCK: [2021-04-04 Sun 22:14]--[2021-04-04 Sun 22:33] =>  0:19
:END:

/[[https://github.com/Wilfred/helpful][helpful]] enhances the Emacs help buffer./

#+begin_src emacs-lisp :results silent
(use-package helpful
  :defer 20
  :config
  (defun ps/helpful-copy-as-kill ()
    "Get the name of the symbol whose docstring the current helpful
buffer displays and push it to the kill ring."
    (interactive)
    (kill-new (replace-regexp-in-string "\\(\\*helpful .*: \\)\\(.*\\)\\(\\*\\)" "\\2" (buffer-name)))
    (ps/kill-this-buffer-switch-to-other-window))

  :general
  ("H-U" 'helpful-at-point
   "C-k" 'helpful-key
   "C-h k" 'helpful-key
   "C-h f" 'helpful-function
   "C-A-f" 'helpful-function
   "C-h o" 'helpful-symbol
   "C-A-o" 'helpful-symbol
   "C-h v" 'helpful-variable
   "C-A-v" 'helpful-variable
   "C-h c" 'helpful-command)
  (helpful-mode-map
   "w" 'ps/helpful-copy-as-kill)
  (embark-symbol-map
   "h" 'helpful-symbol))
#+end_src

** info
:PROPERTIES:
:ID:       28966DB8-E893-4AEA-A7BD-8C18B8A97592
:END:

#+begin_src emacs-lisp :results silent
(use-feature info
  :demand t
  :general
  (Info-mode-map
   "j" 'Info-backward-node
   ";" 'Info-forward-node))
#+end_src

** man
:PROPERTIES:
:ID:       2F034283-E2C2-4F47-BDB6-295A5D5CEAF3
:END:

#+begin_src emacs-lisp :results silent
(use-feature man)
#+end_src

** shortdoc
:PROPERTIES:
:ID:       5422C312-C976-4C9E-AE27-9D1771F8127C
:END:

Emacs 28 has a useful builtin [[https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet][Elisp cheap sheet]]: shortdoc.

#+begin_src emacs-lisp :results silent
(use-feature shortdoc
  :demand t
  :general
  ("C-h u" 'shortdoc-display-group))
#+end_src

** elisp-demos
:PROPERTIES:
:ID:       DCEBBA6C-04D4-4168-9FCB-772876C36E37
:END:

/[[https://github.com/xuchunyang/elisp-demos][elisp-demos]] displays examples for many Elisp functions./

#+begin_src emacs-lisp :results silent
(use-package elisp-demos
  :init
  (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
#+end_src

* keyboard macros
:PROPERTIES:
:ID:       ADB25EC1-6E97-4057-AEBD-FB7B7E4503CF
:END:

** kmacro
:PROPERTIES:
:ID:       92DE0CE6-CA2B-4D43-84D1-EE2B5B068197
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 17:58]--[2021-07-25 Sun 18:03] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature kmacro
  :defer 20
  :config
  (kmacro-set-counter 1)
  (defun ps/kmacro-counter-toggle-alpha-number ()
    "Toggle between a numeric and an alphabetical keyboard macro counter."
    (interactive)
    (if (string= kmacro-counter-format "%d")
        (progn
          (kmacro-set-format "%c")
          (kmacro-set-counter 97)
          (message "Set to alphabetical"))
      (progn
        (kmacro-set-format "%d")
        (kmacro-set-counter 1)
        (message "Set to numeric"))))
  :general
  ("A-H-M-s-h" 'kmacro-end-or-call-macro ; = H-h, to circumvent OSX mapping
   "H-H" 'kmacro-start-macro-or-insert-counter
   "A-C-H-s-h" 'kmacro-set-counter
   "C-A-h" 'ps/kmacro-counter-toggle-alpha-number
   "A-h" 'name-last-kbd-macro
   "M-h" 'kmacro-edit-macro
   "M-A-h" 'kmacro-bind-to-key))
#+end_src

* shell
:PROPERTIES:
:ID:       C97337A7-A91F-49DA-9F33-6556937E7AFC
:END:

** simple
:PROPERTIES:
:ID:       A34DA7F2-47E4-400E-B2C8-167BCAEA73E7
:END:

#+begin_src emacs-lisp :results silent
(use-feature simple
  :demand t
  :config
  (setq async-shell-command-buffer 'new-buffer) ; don't ask for confirmation before running command in a new buffer

  :general
  ("C-A-s" 'shell-command))
#+end_src

** shell
:PROPERTIES:
:ID:       231A8710-B820-4761-ABF8-5BE648908CD1
:END:
:LOGBOOK:
CLOCK: [2022-09-02 Fri 18:00]--[2022-09-02 Fri 18:07] =>  0:07
:END:

#+begin_src emacs-lisp :results silent
(use-feature shell
  :demand t
  :config
  (defun ps/shell-update-homebrew ()
    "Update Homebrew."
    (interactive)
    (let ((shell-command-buffer-name-async "*homebrew update*"))
      (async-shell-command "brew update; brew upgrade --greedy; brew cleanup; brew doctor")
      (message "Update process finished.")))

  (defun ps/bluetooth-device-dwim (MAC &optional name disconnect)
    "Connect or disconnect to a bluetooth device NAME in address MAC.
If DISCONNECT is non-nil, always disconnect."
    (interactive "sMAC address: ")
    (let ((app "blueutil"))
      (unless (executable-find app)
        (user-error "Please install %s (https://github.com/toy/blueutil)" app))
      (let* ((output (shell-command-to-string (format "%s --info %s" app MAC)))
             (status (progn
                       (string-match (format "address: %s, \\([a-z]+\\)" MAC) output)
                       (match-string 1 output)))
             (action (if (or disconnect (string= status "connected"))
                         "disconnect"
                       "connect")))
        (shell-command (format "%s --%s %s" app action MAC))
        (message "%s: %sed" (or name MAC) action))))

  (defun ps/airpods-max-dwim (&optional disconnect)
    "Connect or disconnect to AirPods Max.
If DISCONNECT is non-nil, always disconnect."
    (interactive)
    (ps/bluetooth-device-dwim "90-9c-4a-dd-af-52" "AirPods Max" disconnect))

  (defun ps/macos-sleep ()
    "Put the system to sleep."
    (interactive)
    (message "Disconnecting devices...")
    (ps/airpods-max-dwim 'disconnect)
    (ps/eject-external-hard-drive)
    (shell-command "osascript -e 'tell application \"Finder\" to sleep'"))

  (defun ps/eject-external-hard-drive ()
    "Eject external hard drive.
Assumes only one external hard drive is connected."
    (interactive)
    (let ((list-external
           (shell-command-to-string
            "diskutil list external")))
      (string-match
       "/dev/disk\\([[:digit:]]\\) (external, physical):"
       list-external)
      (if-let ((match (match-string 1 list-external)))
          (shell-command
           (format
            "diskutil eject disk%s"
            match))
        (message "No external hard drives found."))))

  :general
  ("A-s" 'ps/shell-in-current-directory)
  (shell-mode-map
   "M-p" nil
   "M-n" nil
   "M-k" 'comint-previous-input
   "M-l" 'comint-next-input))
#+end_src

*** TODO [#6] Call Emacs commands from shell
:PROPERTIES:
:Effort:   0:30
:ID:       BD2CACC7-6077-4B9B-98D3-5D565F340D87
:END:
https://emacs.stackexchange.com/questions/14947/can-emacs-commands-be-called-from-a-shell-script

** eshell
:PROPERTIES:
:ID:       ABD03BEF-8E02-43AF-A137-AE9F9906704C
:END:
:LOGBOOK:
CLOCK: [2022-08-21 Sun 19:42]--[2022-08-21 Sun 20:00] =>  0:18
CLOCK: [2022-06-17 Fri 17:11]--[2022-06-17 Fri 17:41] =>  0:30
CLOCK: [2021-11-19 Fri 12:59]--[2021-11-19 Fri 13:39] =>  0:40
CLOCK: [2021-10-14 Thu 23:18]--[2021-10-14 Thu 23:31] =>  0:13
CLOCK: [2021-07-16 Fri 10:48]--[2021-07-16 Fri 11:04] =>  0:16
CLOCK: [2021-04-15 Thu 21:10]--[2021-04-15 Thu 21:30] =>  0:20
CLOCK: [2021-04-07 Wed 12:42]--[2021-04-07 Wed 13:09] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature eshell
  :config
  (setq eshell-banner-message "")
  (setq eshell-save-history-on-exit t)
  (setq eshell-history-size 100000)
  (setq eshell-hist-ignoredups t)
  (setq eshell-last-dir-ring-size 1000)

  (defun ps/eshell-new-session ()
    "Create a new interactive Eshell buffer."
    (interactive)
    (eshell '(4)))

  :general
  ("A-e" 'eshell)
  (eshell-mode-map
   "C-H-M-z" 'eshell-kill-input
   "A-C-s-m" 'eshell-bol
   "M-k" 'eshell-previous-matching-input-from-input
   "M-l" 'eshell-next-matching-input-from-input
   "s-l" 'eshell/clear
   "s-d" 'eshell-send-eof-to-process
   "H-n" 'ps/eshell-new-session
   "M-p" nil
   "M-n" nil))
#+end_src

*** TODO [#5] Figure out why env variables differ between shell and eshell
:PROPERTIES:
:ID:       E57974CA-1CC6-45B7-A1D3-359C1C025E92
:END:
e.g. ~nvm~ isn't recognized by eshell
*** TODO Fix, then swtich to, ~eshell~
:PROPERTIES:
:ID:       3314BBDD-21DE-4460-9506-9EA137762771
:END:

** emacs-eat
:PROPERTIES:
:ID:       94971F2F-FF78-4088-BBDB-A95ADEDECE9B
:END:

/[[https://codeberg.org/akib/emacs-eat][emacs-eat]] is a terminal emulator./

#+begin_src emacs-lisp
(use-package eat
  :elpaca (eat :type git
               :host codeberg
               :repo "akib/emacs-eat"
               :files ("*.el" ("term" "term/*.el") "*.texi"
                       "*.ti" ("terminfo/e" "terminfo/e/*")
                       ("terminfo/65" "terminfo/65/*")
                       ("integration" "integration/*")
                       (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** em-hist
:PROPERTIES:
:ID:       692C4FF8-FD07-4D35-A9B3-A87F0E9A1B53
:END:

#+begin_src emacs-lisp
(use-feature em-hist
  :demand t
  :after eshell
  :config
  (setq eshell-hist-ignoredups t)
  (setq eshell-save-history-on-exit t))
#+end_src

** eshell-syntax-highlighting
:PROPERTIES:
:ID:       960266D6-7B07-436B-B25E-F59FBDCB818A
:END:

/[[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]] provides syntax highlighting for eshell-mode./

#+begin_src emacs-lisp :results silent
(use-package eshell-syntax-highlighting
  :after eshell
  :demand t
  :config
  (add-hook 'eshell-mode-hook #'eshell-syntax-highlighting-global-mode))
#+end_src

** dwim-shell-command
:PROPERTIES:
:ID:       89FC07FE-AB08-4C9C-B999-73D176458C64
:END:

/[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] supports Emacs shell commands with dwim behaviour./

#+begin_src emacs-lisp :results silent
(use-package dwim-shell-command
  :elpaca (dwim-shell-command
             :host github
                   :repo "xenodium/dwim-shell-command"))
#+end_src

* spelling & grammar
:PROPERTIES:
:ID:       CC425FA6-7E2B-45EC-82DD-6D4402C3BE5C
:END:

- ispell is a spell-checking interface.
- flyspell is an ispell enhancement, providing spell-checking on the fly.
- both ispell and flyspell require a dictionary to work. aspell and hunspell are two such dictionaries. They don't come with MacOS and need to be installed separately (e.g. ~brew install aspell~).
  - from a cursory search, it appears that aspell is better than hunspell. however, I haven't done any systematic research.
- You can also use AppleSpell, the spell checker than comes with MacOS. To do this you need to install Enchant and configure it by following [[http://www.lonecpluspluscoder.com/2021/02/01/setting-up-enchant-for-use-with-flyspell-mode-on-macos/][Timo Geusch]]'s simple instructions. I experienced some performance issues, and I was also unable to make flyspell add words to the AppleSpell dictionary.
- [[https://www.reddit.com/r/emacs/comments/fxs92h/spell_checkers_in_emacs_in_2020/][This Reddit post]] discusses the existing alternatives.

** ispell
:PROPERTIES:
:ID:       4C7A4F1F-41B8-49AB-B0F8-0EB092F88696
:END:
:LOGBOOK:
CLOCK: [2023-02-21 Tue 23:46]--[2023-02-22 Wed 01:19] =>  1:33
CLOCK: [2022-07-19 Tue 11:25]--[2022-07-19 Tue 11:47] =>  0:22
CLOCK: [2021-08-03 Tue 10:05]--[2021-08-03 Tue 10:13] =>  0:08
CLOCK: [2021-07-27 Tue 11:32]--[2021-07-27 Tue 11:39] =>  0:07
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-feature ispell
  :defer 10
  :config
  (setq ispell-silently-savep t)
  (setq ispell-program-name "/opt/homebrew/bin/aspell")

  (defvar ps/ispell-languages '("espanol" "english")
    "List of languages to use for ispell.")

  (defun ps/ispell-toggle-language ()
    "Toggle ispell dictionaries between languages defined in
 `ps/ispell-languages'."
    (interactive)
    (let ((one (car ps/ispell-languages))
          (two (cadr ps/ispell-languages)))
      (if (string= ispell-local-dictionary one)
          (ispell-change-dictionary two)
        (ispell-change-dictionary one)))
    (flyspell-buffer))
    ;; (message "Language set to %s" ispell-local-dictionary))

  ;; emacs.stackexchange.com/a/74070/32089
  ;; I think this was causing Emacs to freeze; disabling
  ;; (defun suppress-messages (old-fun &rest args)
  ;;   (cl-flet ((silence (&rest args1) (ignore)))
  ;;     (advice-add 'message :around #'silence)
  ;;     (unwind-protect
  ;;         (apply old-fun args)
  ;;       (advice-remove 'message #'silence))))

  (add-to-list 'ispell-extra-args "--sug-mode=ultra") ; github.com/rolandwalker/flyspell-lazy#notes

  ;; (advice-add 'ispell-init-process :around #'suppress-messages)
  ;; (advice-add 'ispell-kill-ispell :around #'suppress-messages)


  :general
  ("M-A-p" 'ps/ispell-toggle-language))
#+end_src

*** TODO Make Aspell use American and British English
:PROPERTIES:
:ID:       FF58FF80-5BEE-428C-B60C-FDD8D05AD967
:END:

** flyspell
:PROPERTIES:
:ID:       78ABBC76-7474-4C1C-A9B0-E8BEC972E75E
:END:
:LOGBOOK:
CLOCK: [2023-03-30 Thu 23:58]--[2023-03-31 Fri 00:15] =>  0:17
CLOCK: [2022-09-14 Wed 15:02]--[2022-09-14 Wed 15:06] =>  0:04
CLOCK: [2022-08-31 Wed 20:51]--[2022-08-31 Wed 21:00] =>  0:09
CLOCK: [2022-07-26 Tue 16:59]--[2022-07-26 Tue 17:01] =>  0:02
CLOCK: [2021-08-18 Wed 13:04]--[2021-08-18 Wed 13:16] =>  0:12
CLOCK: [2021-07-16 Fri 19:11]--[2021-07-16 Fri 19:31] =>  0:20
CLOCK: [2021-07-12 Mon 13:01]--[2021-07-12 Mon 13:11] =>  0:10
CLOCK: [2021-05-05 Wed 20:35]--[2021-05-05 Wed 20:55] =>  0:20
CLOCK: [2021-04-10 Sat 20:58]--[2021-04-10 Sat 21:40] =>  0:42
CLOCK: [2021-04-10 Sat 20:10]--[2021-04-10 Sat 20:16] =>  0:06
:END:

By default, Emacs gives priority to Aspell, if installed. This default can be overridden with the user option ~ispell-program-name~. The user option ~ispell-dictionary~, in turn, controls the dictionary to be used by the program declared under ~ispell-program-name~.

By default, ~auto-dictionary-mode~ is turned off. To enable it, set ~spell-checking-enable-auto-dictionary~ to ~t~. Apparently this mode is kind of buggy, and the issues associated with it can be avoided only by disabling it altogether.

#+begin_src emacs-lisp :results silent
(use-feature flyspell
  :demand t
  :after ispell
  :config
  (setq flyspell-issue-message-flag nil) ; auto-save personal dictionary whenever a word is added, avoiding prompts

  (defun ps/flyspell-save-word ()
    "Save word at point to personal dictionary."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

  (defun ps/flyspell-save-word-and-next ()
    "Save word at point to personal dictionary and go to next error."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location)))
    (flyspell-goto-next-error))

  ;; pragmaticemacs.wordpress.com/2015/08/27/jump-back-to-previous-typo/
  (defun ps/flyspell-goto-previous-error (arg)
    "Go to arg previous spelling error."
    (interactive "p")
    (while (/= 0 arg)
      (let ((pos (point))
            (min (point-min)))
        (if (and (eq (current-buffer) flyspell-old-buffer-error)
                 (eq pos flyspell-old-pos-error))
            (progn
              (if (= flyspell-old-pos-error min)
                  ;; goto beginning of buffer
                  (progn
                    (message "Restarting from end of buffer")
                    (goto-char (point-max)))
                (backward-word 1))
              (setq pos (point))))
        ;; seek the next error
        (while (and (> pos min)
                    (let ((ovs (overlays-at pos))
                          (r '()))
                      (while (and (not r) (consp ovs))
                        (if (flyspell-overlay-p (car ovs))
                            (setq r t)
                          (setq ovs (cdr ovs))))
                      (not r)))
          (backward-word 1)
          (setq pos (point)))
        ;; save the current location for next invocation
        (setq arg (1- arg))
        (setq flyspell-old-pos-error pos)
        (setq flyspell-old-buffer-error (current-buffer))
        (goto-char pos)
        (when (= pos min)
          (progn
            (message "No more missspelled words!")
            (setq arg 0))))))

  (advice-add 'flyspell-region :around
              #'telega-chatbuf-input-as-region-advice)

  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)

  :general
  ("M-p" 'flyspell-buffer
   "A-M-," 'ps/flyspell-goto-previous-error
   "A-M-." 'flyspell-goto-next-error)
  (flyspell-mode-map
   "C-," nil
   "C-." nil
   "C-;" nil)
  (flyspell-mouse-map ;; this key map becomes active only when point is on a highlighted word
   "s-a" 'flyspell-auto-correct-word
   "s-s" 'ps/flyspell-save-word
   "A-s-s" 'ps/flyspell-save-word-and-next
   "s-c" 'flyspell-correct-wrapper))
#+end_src

*** TODO [#7] Create dwim version of flyspell-buffer
:PROPERTIES:
:Effort:   0:30
:ID:       05BDF065-280F-4F09-B55A-9B32D10A36B1
:END:

** flyspell-lazy
:PROPERTIES:
:ID:       180FEF70-1430-4FFB-8909-A2B03694D3C5
:END:

/[[https://github.com/rolandwalker/flyspell-lazy][flyspell-lazy]] improves Emacs flyspell responsiveness using idle timers./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package flyspell-lazy
  :after flyspell
  :demand t
  :config
  (flyspell-lazy-mode))
#+end_src

** flyspell-correct
:PROPERTIES:
:ID:       5E8AA3D3-68AE-407E-B662-524B8B0AAD43
:END:

/[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] provides distraction-free words correction with flyspell via selected interface./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package flyspell-correct
  :demand t
  :after flyspell)
#+end_src

** keytar
:PROPERTIES:
:ID:       773AD672-8356-4097-990D-96BD160DAD40
:END:

/[[https://github.com/emacs-grammarly/keytar][keytar]] is an Emacs Lisp interface for [[https://www.npmjs.com/package/keytar][keytar]]./

This package is required by lsp-grammarly.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/keytar)
(use-package keytar
  :defer 10)
#+end_src

** grammarly
:PROPERTIES:
:ID:       C87EAC5F-7831-469C-96FB-603397C51925
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 14:54]--[2023-04-08 Sat 16:25] =>  1:31
:END:

/[[https://github.com/emacs-grammarly/grammarly][grammarly]] is an API interface for [[https://www.grammarly.com/][Grammarly]]./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package grammarly
  :defer 25
  :config
  (setq grammarly-username ps/personal-gmail)
  (setq grammarly-password (auth-source-pass-get 'secret (concat "chrome/grammarly.com/" ps/personal-gmail)))

  (defun ps/grammarly-open-external-editor ()
    "Open Grammarly's external editor."
    (interactive)
    (browse-url "https://app.grammarly.com/ddocs/1929393566"))

  :general
  ((gfm-mode-map markdown-mode-map)
   "s-g" 'ps/grammarly-open-external-editor))
#+end_src

** lsp-grammarly
:PROPERTIES:
:ID:       2D0C20F1-1CE6-45F9-AA4B-46FB02DD0271
:END:
:LOGBOOK:
CLOCK: [2022-09-29 Thu 18:50]--[2022-09-29 Thu 21:20] =>  2:30
CLOCK: [2021-11-27 Sat 21:56]--[2021-11-27 Sat 22:48] =>  0:52
CLOCK: [2021-11-27 Sat 19:44]--[2021-11-27 Sat 20:17] =>  0:33
CLOCK: [2021-11-27 Sat 19:23]--[2021-11-27 Sat 19:26] =>  0:03
CLOCK: [2021-11-27 Sat 19:09]--[2021-11-27 Sat 19:23] =>  0:14
:END:

/[[https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammarly]] is an lsp-mode for Grammarly./

[2022-10-06 Thu 23:35] At the moment, the premium version isn't working. The package maintainers are migrating to to a new server, which may resolve the issues I was having authenticating my account. You can check whether the premium account is being used by evaluating ~(grammarly-premium-p)~.

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/spelling)
(use-package lsp-grammarly
  :after lsp-mode keytar grammarly
  :demand t

  :config
  (setq lsp-grammarly-suggestions-split-infinitive nil)
  (setq lsp-grammarly-suggestions-preposition-at-the-end-of-sentence nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-age-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-disability-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-family-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-gender-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-human-rights nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-human-rights-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-lgbtqia-related nil)
  (setq lsp-grammarly-suggestions-possibly-biased-language-race-ethnicity-related nil)
  (setq lsp-grammarly-suggestions-possibly-politically-incorrect-language nil)

  ;; (add-hook 'org-mode-hook
            ;; (lambda ()
              ;; (require 'lsp-grammarly)
              ;; (lsp)))
              )
#+end_src

*** TODO [#6] Check this
:PROPERTIES:
:ID:       267EC580-1F84-4820-8701-C09F5CB89172
:END:
https://notes.alexkehayias.com/using-grammarly-with-emacs/

[2023-01-28 Sat] I followed the instructions but couldn't make it work.

** languagetool
:PROPERTIES:
:ID:       9666F3AD-4637-4B0B-895E-8F1F030C7AD9
:END:

To check: https://github.com/PillFall/languagetool.el

* prose
:PROPERTIES:
:ID:       9C33C68A-B82E-4898-B967-337B7D0619EE
:END:

** text-mode
:PROPERTIES:
:ID:       0C671548-8B32-43D6-9F28-88A6B7E3AA06
:END:

#+begin_src emacs-lisp :results silent
(use-feature text-mode
  :demand t
  :config
  (add-hook 'text-mode-hook #'visual-line-mode))
#+end_src

*** TODO [#6] Define ~text-mode-hook~ and ~prog-mode-hook~
:PROPERTIES:
:ID:       30886FEE-60C4-4BAA-B629-2871CFC120A1
:END:

** with-editor
:PROPERTIES:
:ID:       48431AA9-2ABE-403C-9E91-68066B24CB26
:END:

#+begin_src emacs-lisp :results silent
(use-feature with-editor
  :general
  ("s-c" 'with-editor-finish
   "s-k" 'with-editor-abort
   "C-c C-c" 'with-editor-finish))
#+end_src

** latex-mode
:PROPERTIES:
:ID:       AFE18032-EE9C-4D48-9EBA-FE01252467E1
:END:

*** resources
:PROPERTIES:
:ID:       D4EBFE04-FEB0-46B4-AF58-BAFCD52BAA87
:END:
[cite:@Jenner2021EmacsAmazingLaTeX]

** goldendict
:PROPERTIES:
:ID:       32143368-5DE3-44F5-A35B-05F157DEC2A5
:END:

*** TODO [#5] Check out shawcm/goldendict-emacs: Lookup marked text by GoldenDict in Emacs
:PROPERTIES:
:Effort:   0:25
:ID:       4B44B3FE-6553-4BA0-98B9-5C0ECFE0C913
:END:
:LOGBOOK:
CLOCK: [2023-05-03 Wed 17:35]--[2023-05-03 Wed 18:14] =>  0:39
CLOCK: [2021-11-19 Fri 12:35]--[2021-11-19 Fri 12:59] =>  0:24
CLOCK: [2021-11-18 Thu 11:35]--[2021-11-18 Thu 12:05] =>  0:30
CLOCK: [2021-07-29 Thu 22:19]--[2021-07-29 Thu 22:32] =>  0:13
:END:
- https://github.com/konstare/gdcv
  seems complicated; haven't tried
  next step is to try this, once Leo confirms that his dictionaries are in gdcv format
- https://github.com/stardiviner/goldendict.el
  crashes Goldendict
- https://github.com/shawcm/goldendict-emacs
  crashes Goldendict
- https://www.reddit.com/r/emacs/comments/dm1x5c/offline_dictionary_lookup/?utm_source=amp&utm_medium=&utm_content=post_body

Update on ~gdcv~: I spent 45 minutes with GPT-4 trying to make it work, but I failed. Here's the conversation, for future reference:

#+begin_ai
[SYS]: You are a helpful assistant.

[ME]: I'm trying to install a program found in https://github.com/konstare/gdcv. I made sure I have the requirements and followed the instructions:

```
git clone https://github.com/konstare/gdcv
cd gdcv
make gdcv
```

However, after running `make gdcv`, I get the message `make: `gdcv' is up to date.` and no binary is created. What's going on?

[AI]: It seems like there might be an issue related to the "Makefile" in the repository. In this case, you can try to compile the program manually.

First, ensure that the required dependencies are installed:

- SDL2
- SDL2_ttf
- SDL2_image
- pkg-config

Then, open a terminal and navigate (`cd`) to the "gdcv" directory.

Next, you can directly compile the source code using the following command:

```
gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -o gdcv src/main.c
```

This will create a binary file called "gdcv," which you can then run using:

```
./gdcv
```

Please note that this is appropriate for a Linux environment. If you use a different platform, the process might be slightly different, and you may need to modify the compile command accordingly.

[ME]: Thanks. How do I ensure that those dependencies are installed? Should they be listed in `brew list`?

[AI]: Yes, you can use Homebrew to install and manage these dependencies if you are using macOS.

First, make sure Homebrew is installed on your machine. If not, you can install it with the following command:

```
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

To install the required dependencies using Homebrew, run the following commands:


#`
brew+end_ai
_image
brew install sdl2_ttf
brew install pkg-config
```

After successfully installing the dependencies, you can check if they are installed and listed using:

```
brew list | egrep "sdl2|sdl2_image|sdl2_ttf|pkg that match the specified names. If the required dependencies are installed correctly, you should see `sdl2`, `sdl2_image`, `sdl2_ttf`, and `pkg-config` in the output.

[ME]: Thanis. When I follow the compilation instructions (i.e. when I run `gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -o gdcv src/main.c` after insuring I have all the dependencies), I get the following error:

```
clang: error: no such file or directory: 'src/main.c'
```


[AI]: Apologies for the confusion earlier. It seems the file structure of the "gdcv" repository does not follow the expected format. I have looked into the repository, and it appears the main source file is located in "src/gdcv.c" instead of "src/main.c".

Please run the following modified command to compile the program:

```bash
gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -o gdcv src/gdcv.c
```

After running this command, you should see the "gdcv" binary created. You can run it by typing:

```bash
./gdcv
```

[ME]: I now get the following error:

```
gdcv.c:3:10: fatal error: 'argp.h' file not found
#include <argp.h> //argp
^~~~~~~~
1 error generated.
```

[AI]: I apologize for the oversight. The error indicates that the "argp.h" header file is missing. This file is part of the GNU C library, which is not included in macOS by default.

You can install the "argp-standalone" package using Homebrew and update the compilation command to include the new header and library paths:

1. Install argp-standalone using Homebrew:

```bash
brew install argp-standalone
```

2. Now modify the compilation command to include the header and library paths:

```bash
gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -I/usr/local/opt/argp-standalone/include -L/usr/local/opt/argp-standalone/lib -largp -o gdcv src/gdcv.c
```

Please let me know if this resolves your issue, and you are able to compile and run the "gdcv" program.

[ME]: Now I get this error:

```
gdcv.c:4:10: fatal error: 'error.h' file not found
#include <error.h> //argp
^~~~~~~~~
1 error generated.
```

[AI]: I apologize for the inconvenience. It seems that "error.h" is another header file that is part of the GNU C Library which is not present in the default macOS libraries.

To work around this, you can create your custom "error.h" file in the "gdcv" folder with the essential parts needed to compile the program. Create a new file called "error.h" in the "gdcv" folder and add the following lines:

```c
#include <stdio.h>
#include <stdlib.h>
void error(int status, int errnum, const char *format, ...);
```

Now, add a custom implementation of the 'error' function in "src/gdcv.c" before the "main" function:

```c
#include <stdarg.h> // For va_start, va_end

void error(int status, int errnum, const char *format, ...)
{
va_list args;
fprintf(stderr, "ERROR: ");
va_start(args, format);
vfprintf(stderr, format, args);
va_end(args);

if (errnum != 0)
{
fprintf(stderr, ": %s", strerror(errnum));
}
fprintf(stderr, "\n");

if (status != 0)
{
exit(status);
}
}
```

Finally, update your compilation command to include the local directory for the header file search:

```bash
gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -I. -I/usr/local/opt/argp-standalone/include -L/usr/local/opt/argp-standalone/lib -largp -o gdcv src/gdcv.c
```

This should allow you to compile "gdcv" without errors. Please let me know if you still encounter any issues.

[ME]: Can you clarify where in the file should I add the custom implementation of the 'error' function?

[AI]: Sure, I'll clarify that for you.

In the "src/gdcv.c" file, you should add the custom implementation of the 'error' function right after the inclusion of the header files and before the main function.

Here is a modified snippet from the "src/gdcv.c" file with the 'error' function added in the appropriate location:

```c
#include <argp.h>
#include <error.h>
#include <stdlib.h>
#include <string.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>

/* Add this custom 'error' function implementation right after the includes */
#include <stdarg.h> // For va_start, va_end

void error(int status, int errnum, const char *format, ...)
{
va_list args;
fprintf(stderr, "ERROR: ");
va_start(args, format);
vfprintf(stderr, format, args);
va_end(args);

if (errnum != 0)
{
fprintf(stderr, ": %s", strerror(errnum));
}
fprintf(stderr, "\n");

if (status != 0)
{
exit(status);
}
}

/* Existing main function and other code */
int main(int argc, char **argv)
{
// Rest of the code
}
```

Make sure to save the changes to the "src/gdcv.c" file and then proceed with the compilation using the command shared in the previous response. This should enable you to compile the "gdcv" program without encountering the "error.h" issue.

[ME]: Unfortunately, after following those steps I still get this error:

```
gdcv.c:4:10: fatal error: 'error.h' file not found
#include <error.h> //argp
^~~~~~~~~
1 error generated.
```

[AI]: I apologize for the confusion in my previous messages. I realize now that there's a mistake in the custom solution I provided.

Instead of creating a custom `error.h` file, you should remove the `#include <error.h>` line from the `src/gdcv.c` file since we have added the custom `error` function implementation directly into `src/gdcv.c`.

Please follow these steps:

1. Remove the `#include <error.h>` line from `src/gdcv.c`.

2. Ensure that the custom `error` function implementation is present in `src/gdcv.c` as previously mentioned.

3. Compile the program using the command I provided earlier:

```bash
gcc $(pkg-config --cflags --libs sdl2 SDL2_image SDL2_ttf) -O3 -std=c99 -Wall -I. -I/usr/local/opt/argp-standalone/include -L/usr/local/opt/argp-standalone/lib -largp -o gdcv src/gdcv.c
```

These changes should resolve the error and successfully compile the "gdcv" program. Please let me know if you have any further issues, and I'll be happy to assist you.

[ME]:
#+end_ai


** powerthesaurus
:PROPERTIES:
:ID:       81CC0280-A8A5-4C8F-BF05-D324EB917DCD
:END:

/[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]] is an Emacs client for [[https://www.powerthesaurus.org/][power thesaurus]]./

#+begin_src emacs-lisp :results silent
(use-package powerthesaurus
  :general
  ("H-y" 'powerthesaurus-transient))
#+end_src

** reverso
:PROPERTIES:
:ID:       F3063A73-ED50-42BD-8ABD-8D7FC68758FD
:END:
:LOGBOOK:
CLOCK: [2023-05-11 Thu 20:24]--[2023-05-11 Thu 20:27] =>  0:03
CLOCK: [2022-08-31 Wed 23:01]--[2022-08-31 Wed 23:11] =>  0:10
:END:

/[[https://github.com/SqrtMinusOne/reverso.el][reverso]] is an Emacs client for [[https://www.reverso.net/][reverso]]./

#+begin_src emacs-lisp
(use-package reverso
  :elpaca (reverso
           :host github
           :repo "SqrtMinusOne/reverso.el")
  :config
  (setq reverso-languages '(english french german italian portuguese spanish))

  :general
  ("H-Y" 'reverso))
#+end_src

** goldendict
:PROPERTIES:
:ID:       F2FFB5E0-060B-4A31-B2D2-4DF03ABC62B5
:END:
:LOGBOOK:
CLOCK: [2021-11-24 Wed 15:26]--[2021-11-24 Wed 16:24] =>  0:58
:END:

#+begin_src emacs-lisp :results silent
(defun ps/goldendict-region-or-word ()
  "Return region or word around point.
If `mark-active' on, return region string. Otherwise return word
around point."
  (if (use-region-p)
      (buffer-substring-no-properties (region-beginning)
                                      (region-end))
    (thing-at-point 'word)))

(defun ps/goldendict-search-input (arg)
  "If there is a word at point or an active selection, look it up
in GoldenDict, else prompt user for input. If invoked with prefix
argument, always force prompt."
  (interactive "P")
  (let ((string (ps/goldendict-region-or-word)))
    (if (and string (not arg))
        (kill-new string)
      (kill-new (read-string "Expression: ")))
    ;; KM macro name: "Goldendict: lookup text in clipboard"
    (shell-command "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"D4404D73-FF1D-4DF6-8107-7AB050C28C9F\"'")))

(general-define-key
 "A-y" 'ps/goldendict-search-input)
#+end_src

** txl
:PROPERTIES:
:ID:       BE78F0BD-D676-4E19-838A-2E6BD4504F52
:END:

/[[https://github.com/tmalsburg/txl.el][txl]] provides direct access to DeepL's machine translation API./

#+begin_src emacs-lisp
(use-package txl
  :elpaca (txl
             :host github
             :repo "tmalsburg/txl.el")
  :config
  (setq txl-languages '(ES . EN-US))
  (setq txl-deepl-api-key (auth-source-pass-get "api" (concat "chrome/deepl.com/" ps/personal-email)))

  :general
  ("A-H-y" 'txl-translate-region-or-paragraph)
  (txl-edit-translation-mode-map
   "RET" 'txl-accept-translation
   "q" 'txl-dismiss-translation))
#+end_src

** atomic-chrome
:PROPERTIES:
:ID:       D7CE2507-FDB5-44E9-A129-C18E17590476
:END:
:LOGBOOK:
CLOCK: [2021-05-15 Sat 18:11]--[2021-05-15 Sat 18:19] =>  0:08
CLOCK: [2021-04-17 Sat 21:56]--[2021-04-17 Sat 22:07] =>  0:11
CLOCK: [2021-02-11 Thu 20:46]--[2021-02-11 Thu 20:54] =>  0:08
CLOCK: [2021-02-11 Thu 19:59]--[2021-02-11 Thu 20:02] =>  0:03
:END:

/[[https://github.com/alpha22jp/atomic-chrome][atomic chrome]] enables editing of browser input fields in Emacs./

I use it in combination with the [[https://ghosttext.fregante.com/][Ghost Text]] browser extension.

#+begin_src emacs-lisp :results silent
(use-package atomic-chrome
  :defer 10

  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode)
  (setq atomic-chrome-url-major-mode-alist
   '(("github\\.com" . gfm-mode)
     ("wikipedia\\.org" . mediawiki-mode)
     ("timelines\\.issarice\\.com" . mediawiki-mode)))

  (atomic-chrome-start-server)

  :general
  (atomic-chrome-edit-mode-map
   "s-c" 'atomic-chrome-close-current-buffer))
#+end_src

** markdown
:PROPERTIES:
:ID:       3E05C5A3-B0E2-4800-B497-5AA1F6B39116
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 21:36]--[2021-12-11 Sat 22:05] =>  0:29
CLOCK: [2021-11-17 Wed 17:19]--[2021-11-17 Wed 17:27] =>  0:08
CLOCK: [2021-10-19 Tue 12:32]--[2021-10-19 Tue 13:19] =>  0:47
:END:

/[[https://github.com/jrblevin/markdown-mode][markdown-mode]] is a major mode for editing Markdown-formatted text./

#+begin_src emacs-lisp :results silent
(use-package markdown-mode
  :demand t
  :config/el-patch
  (defun markdown-insert-italic ()
    "Insert markup to make a region or word italic.
If there is an active region, make the region italic.  If the point
is at a non-italic word, make the word italic.  If the point is at an
italic word or phrase, remove the italic markup.  Otherwise, simply
insert italic delimiters and place the point in between them."
    (interactive)
    (let ((delim (el-patch-swap
                   (if markdown-italic-underscore "_" "*")
                   (cond ((eq markdown-italic-underscore t) "_")
                         ((eq markdown-italic-underscore nil) "*")
                         ((eq markdown-italic-underscore 'double) "__")))))
      (markdown--insert-common delim delim markdown-regex-italic 1 3 'markdown-italic-face t)))

  :config
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-command "pandoc --from markdown --to html")
  (setq markdown-disable-tooltip-prompt t)
  (setq markdown-italic-underscore nil)

  (defun ps/markdown-org-paste-dwim ()
    "Convert between `org-mode' and `markdown' based on current mode."
    (interactive)
    (let* ((clipboard (if (eq system-type 'darwin)
                          "pbv public.utf8-plain-text"
                        "xclip -out -selection 'clipboard' -t text/html"))
           (source (pcase major-mode
                     ('markdown-mode "org")
                     ('org-mode "markdown")
                     (_ (user-error "Not in `org-mode' or `markdown-mode'"))))
           (target (pcase major-mode
                     ('markdown-mode "markdown")
                     ('org-mode "org")
                     (_ (user-error "Not in `org-mode' or `markdown-mode'"))))
           (pandoc (concat "pandoc --wrap=none -f " source " -t " target))
           (cmd (concat clipboard " | " pandoc))
           (output (shell-command-to-string cmd))
           ;; Not sure why Pandoc adds these double slashes; we remove them
           (output (replace-regexp-in-string "^\\\\\\\\$" "" output))
           (output (replace-regexp-in-string "= " "= " output)))
      (kill-new output)
      (yank)))

  (defun ps/markdown-copy-section ()
    "Copy the current section to the clipboard."
    (interactive)
    (let ((beg (save-excursion
                 (markdown-outline-previous)
                 (forward-line)
                 (point)))
          (end (save-excursion
                 (markdown-outline-next)
                 (point))))
      (copy-region-as-kill beg end)))

  :general
  ((gfm-mode-map markdown-mode-map)
  "A-C-H-t" 'ps/markdown-copy-section
   "A-C-s-r" 'markdown-outline-previous
   "A-C-s-f" 'markdown-outline-next
   "s-b" 'markdown-insert-bold
   "s-e" 'markdown-insert-code
   "s-i" 'markdown-insert-italic
   "s-k" 'markdown-insert-link
   "s-u" 'tlon-bae-insert-eawiki-url
   "s-v") ; should convert from html, mirroring the org binding
  ((ghm-mode-map markdown-mode-map org-mode-map)
   "H-s-v" 'ps/markdown-org-paste-dwim)
  (gfm-mode-map
   "s-a" 'markdown-insert-gfm-code-block
   "s-z" 'markdown-edit-code-block))
#+end_src

** edit-indirect
:PROPERTIES:
:ID:       5660F943-C895-4847-A538-0FA11445420C
:END:

/[[https://github.com/Fanael/edit-indirect][edit-indirect]] supports editing regions in separate buffers./

This package is required by the ~markdown-mode~ command ~markdown-edit-code-block~.

#+begin_src emacs-lisp
(use-package edit-indirect)
#+end_src

** mediawiki-el
:PROPERTIES:
:ID:       721F42DA-7E97-4C9A-9DBF-8A841DDE99A9
:END:

/[[https://github.com/hexmode/mediawiki-el][mediawiki-el]] is an Emacs interface to editing mediawiki sites./

#+begin_src emacs-lisp :results silent
(use-package mediawiki
  :demand t
  :after atomic-chrome)
#+end_src

** gdrive
:PROPERTIES:
:ID:       CC5C7599-DFA7-48A8-8BA0-3DABE8A3171E
:END:
:LOGBOOK:
CLOCK: [2021-12-07 Tue 17:12]--[2021-12-07 Tue 18:05] =>  0:53
CLOCK: [2021-12-03 Fri 23:10]--[2021-12-04 Sat 01:01] =>  1:51
CLOCK: [2021-12-03 Fri 22:21]--[2021-12-03 Fri 23:02] =>  0:41
:END:
To reinstall:
- Clone this [[https://github.com/carstentrink/gdrive#important][fork]].
- Edit the ~clientId~ and ~clientSecret~ in the file ~handlers_drive.go~ with the values stored in ~pass~ (search for ~gdrive~).
- Within the locally cloned repo, run ~go install~.

#+begin_src emacs-lisp :results silent
(defun ps/gdrive-import-file ()
  "Import Google Doc file with DOC-ID and convert it to org-mode.

To see a list of Google Docs and their respective IDs, run
`gdrive list' in the terminal."
  (interactive)
  (let* ((default-directory ps/dir-downloads)
         (doc-id (read-from-minibuffer "Doc ID: "))
         (doc-info (shell-command-to-string
                    (format "gdrive info '%s'" doc-id)))
         (doc-name (when (string-match "^Name: \\(.*\\)$" doc-info)
                     (match-string 1 doc-info)))
         (input (concat doc-name ".docx"))
         (output (concat doc-name ".org")))
    ;; download Google Doc as docx
    (shell-command
     (format "gdrive export --mime application/vnd.openxmlformats-officedocument.wordprocessingml.document %s" doc-id))
    ;; export docx to org-mode
    (shell-command
     (format "pandoc -s '%s' -o '%s'" input output))))
#+end_src

*** TODO [#5] Write command to create new Google Doc in chosen folder
:PROPERTIES:
:Effort:   0:30
:ID:       4D8E953E-44F4-4546-8BF9-08D8983CA699
:END:
:LOGBOOK:
CLOCK: [2022-05-19 Thu 20:30]--[2022-05-19 Thu 20:33] =>  0:03
:END:

** ledger-mode
:PROPERTIES:
:ID:       6C259EFC-0CF9-4CD7-A8C5-B29B66E98776
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 08:15]--[2022-05-06 Fri 08:28] =>  0:13
CLOCK: [2021-11-23 Tue 10:22]--[2021-11-23 Tue 10:31] =>  0:09
CLOCK: [2021-11-17 Wed 17:35]--[2021-11-17 Wed 17:43] =>  0:08
CLOCK: [2021-10-13 Wed 11:37]--[2021-10-13 Wed 11:54] =>  0:17
CLOCK: [2021-10-08 Fri 18:32]--[2021-10-08 Fri 18:59] =>  0:27
CLOCK: [2021-08-19 Thu 17:50]--[2021-08-19 Thu 18:11] =>  0:21
:END:

/[[https://github.com/ledger/ledger-mode][ledger-mode]] is a major mode for interacting with the Ledger accounting system./

To populate the database of historical prices:
- commodities: https://github.com/LukasJoswiak/blog-code/blob/master/2020/tracking-commodity-prices-ledger/prices.py
  - accompanying post: https://lukasjoswiak.com/tracking-commodity-prices-in-ledger/
- crypto: https://github.com/cjtapper/coinprices
- currencies: https://github.com/wakatara/get-FX
  - couldn't make it work, so I just entered the rates manually once and will use those

#+begin_src emacs-lisp :results silent
(use-package ledger-mode
  :defer 30
  :config
  (setq ledger-default-date-format ledger-iso-date-format)
  (setq ledger-reconcile-default-commodity "ARS")
  (setq ledger-schedule-file ps/file-tlon-ledger-schedule-file)
  (setq ledger-schedule-look-forward 0)
  (setq ledger-schedule-look-backward 30)

  :config
  (dolist (report
           '(("net worth"
              "%(binary) -f %(ledger-file) bal --strict")
             ("net worth (USD)"
              "%(binary) -f %(ledger-file) --price-db .pricedb --exchange USD bal ^assets ^liabilities --strict")
             ("account (USD)"
              "%(binary) -f %(ledger-file) reg %(account) --price-db .pricedb --exchange USD")
             ;; I need to understand how the `--basis' flag works
             ("cost basis"
              "%(binary) -f %(ledger-file) --basis bal %(account) --strict")))

    (add-to-list 'ledger-reports report))

  (defun ps/ledger-new-entry-below ()
    "Create new entry below one at point."
    (interactive)
    (indent-for-tab-command)
    (ledger-navigate-next-xact-or-directive)
    (crux-smart-open-line-above))

  (defun ps/ledger-align-and-next ()
    "Align transaction at point and move point to next entry."
    (interactive)
    (ledger-post-align-xact (point))
    (ledger-navigate-next-xact-or-directive))

  (defun ps/ledger-report-account ()
    "Runs an 'account' report from `ledger-reports'."
    (interactive)
    (ledger-report "account" nil))

  (defun ps/ledger-report-net-worth ()
    "Runs an 'net worth' report from `ledger-reports'."
    (interactive)
    (ledger-report "net worth" nil))

  (defun ps/ledger-report-net-worth-USD ()
    "Runs an 'net worth (USD)' report from `ledger-reports'."
    (interactive)
    (ledger-report "net worth (USD)" nil))

  (defun ps/ledger-report-payee ()
    "Runs an 'payee' report from `ledger-reports'."
    (interactive)
    (ledger-report "payee" nil))

  (defun ps/ledger-update-commodities ()
    "Update `commodities.py'."
    (interactive)
    (async-shell-command
     (format "python3 %s"
             (file-name-concat ps/dir-ledger "commodities.py"))))

  (defun ps/ledger-update-coin-prices ()
    "Update `coinprices.py'."
    (interactive)
    (async-shell-command
     (format "python3 %s >> %s"
             (file-name-concat ps/dir-ledger "coinprices/coinprices.py")
             ps/file-ledger-db)))

  (defun ps/ledger-sort-region-reversed (beg end)
    "Sort the region from BEG to END in reverse chronological order."
    (interactive "r") ;; load beg and end from point and mark
    ;; automagically
    (let* ((new-beg beg)
           (new-end end)
           (bounds (ledger-navigate-find-xact-extents (point)))
           (point-delta (- (point) (car bounds)))
           (target-xact (buffer-substring (car bounds) (cadr bounds)))
           (inhibit-modification-hooks t))
      (save-excursion
        (save-restriction
          (goto-char beg)
          ;; make sure beg of region is at the beginning of a line
          (beginning-of-line)
          ;; make sure point is at the beginning of a xact
          (unless (looking-at ledger-payee-any-status-regex)
            (ledger-navigate-next-xact))
          (setq new-beg (point))
          (goto-char end)
          (ledger-navigate-next-xact)
          ;; make sure end of region is at the beginning of next record
          ;; after the region
          (setq new-end (point))
          (narrow-to-region new-beg new-end)
          (goto-char new-beg)

          (let ((inhibit-field-text-motion t))
            (sort-subr
             t
             'ledger-navigate-next-xact
             'ledger-navigate-end-of-xact
             'ledger-sort-startkey))))

      (goto-char (point-min))
      (re-search-forward (regexp-quote target-xact))
      (goto-char (+ (match-beginning 0) point-delta))))

  (defun ps/ledger-sort-buffer-reversed ()
    "Sort the entire buffer in reverse chronological order."
    (interactive)
    (let (sort-start
          sort-end)
      (save-excursion
        (goto-char (point-min))
        (setq sort-start (ledger-sort-find-start)
              sort-end (ledger-sort-find-end)))
      (ps/ledger-sort-region-reversed (or sort-start (point-min))
                                      (or sort-end (point-max)))))

  (defun ps/ledger-sort-region-or-buffer ()
    "Sort a region if selected, otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (ledger-sort-region)
      (ledger-sort-buffer)))

  (defun ps/ledger-sort-region-or-buffer-reversed ()
    "Sort in reverse chronological order a region if selected,
otherwise the whole buffer."
    (interactive)
    (if (region-active-p)
        (ps/ledger-sort-region-reversed)
      (ps/ledger-sort-buffer-reversed)))

  (defun ps/ledger-toggle-current-transaction-and-next ()
    "Toggle current transaction and move to the next transaction"
    (interactive)
    (ledger-toggle-current-transaction)
    (ledger-navigate-next-xact-or-directive))

  (defun ps/ledger-copy-transaction-at-point ()
    (interactive)
    "Save transaction at point to the kill ring."
    (save-excursion
      (ledger-navigate-next-xact-or-directive)
      (let ((end (point)))
        (ledger-navigate-prev-xact-or-directive)
        (copy-region-as-kill (point) end))
      (message "Transaction copied.")))

  (defun ps/ledger-narrow-to-xact ()
    "Narrow to the current transaction."
    (interactive)
    (let ((xact-begins (ledger-navigate-beginning-of-xact))
          (xact-ends (ledger-navigate-end-of-xact)))
      (narrow-to-region xact-begins xact-ends)))

  (defun ps/ledger--increase-date-of-transaction-at-point (days)
    (interactive)
    "Increase date of transaction at point by DAYS."
    (let* ((xact-begins (ledger-navigate-beginning-of-xact))
           (xact-ends (ledger-navigate-end-of-xact))
           (xact (buffer-substring xact-begins xact-ends)))
      (delete-region xact-begins xact-ends)
      (insert
       (with-temp-buffer
         (insert xact)
         (let* ((date (ledger-xact-date))
                (timestamp (date-to-time date))
                (date-minus-one-day (format-time-string "%Y-%m-%d" (time-add timestamp (days-to-time days)))))
           (beginning-of-buffer)
           (replace-regexp ledger-iso-date-regexp "")
           (insert date-minus-one-day)
           (buffer-string))))))

  (defun ps/ledger-increase-date-of-transaction-at-point-by-one-day ()
    (interactive)
    "Increase date of transaction at point by one day."
    (ps/ledger--increase-date-of-transaction-at-point 1))

  (defun ps/ledger-decrease-date-of-transaction-at-point-by-one-day ()
    (interactive)
    "Decrease date of transaction at point by one day."
    (ps/ledger--increase-date-of-transaction-at-point -1))

  ;; (add-hook 'ledger-mode-hook (lambda () (setq-local ledger-complete-in-steps t)))

  :general
  (ledger-mode-map
   "s-SPC" 'ps/ledger-new-entry-below
   "s-=" 'ledger-reconcile
   "s-a" 'ledger-add-transaction
   "A-s-a" 'ps/ledger-report-account
   "s-b" 'ledger-post-edit-amount
   "A-s-b" 'ps/ledger-decrease-date-of-transaction-at-point-by-one-day
   "s-c" 'ps/ledger-align-and-next
   "A-s-c" 'ps/ledger-copy-transaction-at-point
   "s-d" 'ledger-delete-current-transaction
   "s-e" 'ps/ledger-toggle-current-transaction-and-next
   "A-s-e" 'ledger-toggle-current-transaction
   "s-f" 'ledger-occur
   "A-s-f" 'ps/ledger-increase-date-of-transaction-at-point-by-one-day
   "s-g" 'ledger-report-goto
   "s-i" 'ledger-insert-effective-date
   "s-y" 'ledger-copy-transaction-at-point
   "s-k" 'ledger-report-quit
   "s-l" 'ledger-display-ledger-stats
   "s-o" 'ledger-report-edit-report
   "s-p" 'ledger-display-balance-at-point
   "A-s-p" 'ps/ledger-report-payee
   "s-q" 'ledger-post-align-dwim
   "s-r" 'ledger-report
   "s-s" 'ledger-report-save
   "s-t" 'ps/ledger-sort-region-or-buffer
   "A-s-t" 'ps/ledger-sort-region-or-buffer-reversed
   "s-u" 'ledger-schedule-upcoming
   "A-s-u" 'ps/ledger-report-net-worth-USD
   "s-v" 'ledger-copy-transaction-at-point
   "A-s-w" 'ps/ledger-report-net-worth
   "s-x" 'ledger-fully-complete-xact
   "s-z" 'ledger-report-redo
   "A-C-s-r" 'ledger-navigate-prev-xact-or-directive
   "A-C-s-f" 'ledger-navigate-next-xact-or-directive)
  (ledger-reconcile-mode-map
   "q" 'ledger-reconcile-quit))
#+end_src

*** TODO Run python scripts via LaunchAgent
:PROPERTIES:
:ID:       E235F4DC-677D-4143-A679-66FCBC310101
:END:

*** TODO [#6] Consider replacing ~commodities.py~ with Elisp alternative
:PROPERTIES:
:ID:       303E3552-2FD9-41A9-A6E6-C26110E61282
:END:
[[https://www.reddit.com/r/emacs/comments/xdrg1r/semiautomatically_fetching_ledger_commodity/][This]] could be adapted.

*** resources
:PROPERTIES:
:ID:       FD6B578E-9794-4C38-A2F3-5A877ED2C4C8
:END:
- [[https://devhints.io/ledger][Ledger CLI cheatsheet]]
- [[https://github.com/davidkeegan/dklrt][GitHub - davidkeegan/dklrt: Ledger Recurring Transactiions.]]
- [[https://rolfschr.github.io/gswl-book/latest.html][Getting Started With Ledger - August 28, 2019 201f047]]
- [[https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html][Using Ledger for YNAB-like envelope budgeting]]
- [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][TIP: How I use ledger to track my money : emacs]]
- [[https://news.ycombinator.com/item?id=7708777][The reasons why I tried and failed with ledger: - I never quite understood how t... | Hacker News]]
- [[https://github.com/marbu/ledger-bank-import][GitHub - marbu/ledger-bank-import: convert bank csv files into ledger-cli file format]]
- [[https://felixcrux.com/blog/ledger-practices][Ledger Practices - Felix Crux]]

*** how to start from scratch
:PROPERTIES:
:ID:       49D7A193-157E-4A10-9C33-98727FC191BF
:END:
1. [[https://felixcrux.com/blog/ledger-practices-create-a-ledgerrc][create a ~.ledgerrc~ file]]

* pdf
:PROPERTIES:
:ID:       6C0D0737-734E-4EAB-8A3F-138EF990B967
:END:

** pdf-tools
:PROPERTIES:
:ID:       B4272338-4DCA-44FC-9330-804CC88BF189
:END:
:LOGBOOK:
CLOCK: [2022-07-23 Sat 14:07]--[2022-07-23 Sat 14:20] =>  0:13
CLOCK: [2022-07-23 Sat 13:06]--[2022-07-23 Sat 14:02] =>  0:56
CLOCK: [2021-11-16 Tue 18:40]--[2021-11-16 Tue 19:02] =>  0:22
CLOCK: [2021-07-29 Thu 22:42]--[2021-07-29 Thu 23:08] =>  0:26
CLOCK: [2021-07-25 Sun 15:35]--[2021-07-25 Sun 15:42] =>  0:07
CLOCK: [2021-06-10 Thu 19:08]--[2021-06-10 Thu 19:20] =>  0:12
CLOCK: [2021-02-23 Tue 10:59]--[2021-02-23 Tue 11:05] =>  0:06
:END:

/[[https://github.com/vedang/pdf-tools][pdf-tools]] is a support library for PDF files./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/pdf-tools)
(use-package pdf-tools
  :defer 10
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (setq pdf-view-use-scaling t)
  (setq pdf-view-use-imagemagick nil)
  (setq pdf-view-resize-factor 1.1)
  (setq pdf-annot-default-annotation-properties
        '((t
           (label . ps/personal-name))
          (text
           (color . "#ff0000")
           (icon . "Note"))
          (highlight
           (color . "LightBlue2"))
          (underline
           (color . "blue"))
          (squiggly
           (color . "orange"))
          (strike-out
           (color . "red"))))

  (unless (or noninteractive (eq this-command 'pdf-tools-install))
    (pdf-tools-install))

  (defun ps/pdf-tools-apply-theme ()
    "Activate `pdf-tools' midnight mode if dark theme is active."
    (if (eq (modus-themes--current-theme) ps/theme-loaddefs-dark)
        (pdf-view-midnight-minor-mode)
      (pdf-view-midnight-minor-mode -1)))

  ;; gist.github.com/politza/3f46785742e6e12ba0d1a849f853d0b9#file-scroll-other-window-el
  (defun ps/pdf-tools-toggle-writeroom ()
    "Toggle `writeroom-mode' on/off."
    (interactive)
    (let ((writeroom-width 120))
      (writeroom-mode 'toggle)
      (pdf-view-fit-height-to-window)))

  (defun ps/pdf-tools-open-externally ()
    "Open current PDF in external application. If `opentopage
 script is available, open to current page."
    (interactive)
    (let ((file (pdf-view-buffer-file-name))
          (script "opentopage")) ; apple.stackexchange.com/a/233987
      (if (file-exists-p (file-name-concat "~/bin" script))
          (shell-command (format "sh %s '%s' %d" script file (pdf-view-current-page)))
        (shell-command (format "open '%s'" file)))))

  (defvar ps/pdf-tools-selected-pages '())

  (defun ps/pdf-tools-add-or-remove-page ()
    "Add current page number to list of selected pages. If page
number is already listed, remove it from list."
    (interactive)
    (if (member (pdf-view-current-page) ps/pdf-tools-selected-pages)
        (progn
          (setq ps/pdf-tools-selected-pages (delete (pdf-view-current-page) ps/pdf-tools-selected-pages)
                ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<))
          (message "Page removed. Current selection: %s." ps/pdf-tools-selected-pages))
      (add-to-list 'ps/pdf-tools-selected-pages (pdf-view-current-page) t)
      (setq ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<))
      (message "Page added. Current selection: %s." ps/pdf-tools-selected-pages))
    (when (< (pdf-view-current-page) (pdf-cache-number-of-pages))
      (pdf-view-next-page))
    (setq ps/pdf-tools-selected-pages (sort ps/pdf-tools-selected-pages #'<)))

  (defun ps/pdf-tools-clear-page-selection ()
    "Clear the list of pages selected in `ps/pdf-tools-selected-pages'."
    (interactive)
    (setq ps/pdf-tools-selected-pages '())
    (message "Page selection cleared."))

  (defun ps/pdf-tools-extract-pages (file)
    "Save pages selected in `ps/pdf-tools-selected-pages' to
FILE."
    (interactive "FSave as: ")
    (let ((output (if (string= (expand-file-name file) (buffer-file-name))
                      "--replace-input"
                    (expand-file-name file))))
      (shell-command (format "qpdf '%s' --pages . %s -- '%s'"
                             (buffer-file-name)
                             (mapconcat #'number-to-string
                                        ps/pdf-tools-selected-pages
                                        ",")
                             output)))
    (ps/pdf-tools-clear-page-selection))

  (defun ps/pdf-count-words ()
    "Count words in current PDF."
    (interactive)
    (kill-new
     (string-trim
      (shell-command-to-string
       (format "pdftotext '%s' - | wc -w" (buffer-file-name)))))
    (message (format "This PDF has %s words." (current-kill 0))))

  (defun ps/pdf-tools-copy-all-text ()
    "Copy all text in current PDF to kill ring."
    (interactive)
    (let ((string (string-trim (shell-command-to-string
                                (format "pdftotext '%s' -" (buffer-file-name))))))
      (kill-new (replace-regexp-in-string "\\([^\n]\\)\n\\([^\n]\\)" "\\1 \\2" string))
      (message "Copied all text in PDF to kill ring.")))

  (defun ps/pdf-tools-install-no-confirm (orig-fun &rest args)
    "Don't ask for confirmation when installing `pdf-tools'."
    (let ((no-query-p t))
      (apply orig-fun args)))

  (advice-add 'pdf-tools-install :around #'ps/pdf-tools-install-no-confirm)

  (add-hook 'pdf-tools-enabled-hook #'ps/pdf-tools-apply-theme)
  (add-hook 'pdf-tools-enabled-hook #'pdf-view-fit-page-to-window)
  (add-hook 'pdf-tools-enabled-hook #'sow-mode)

  :general
  ((pdf-view-mode-map pdf-annot-minor-mode-map pdf-history-minor-mode-map)
   "a" 'ps/pdf-tools-copy-all-text
   "c" 'ps/pdf-count-words
   "C" 'ps/pdf-tools-clear-page-selection
   "e" 'pdf-annot-add-highlight-markup-annotation
   "h" 'pdf-annot-add-highlight-markup-annotation
   "j" 'pdf-view-goto-page
   "k" 'pdf-view-previous-line-or-previous-page
   "l" 'pdf-view-next-line-or-next-page
   "t" 'ps/pdf-tools-toggle-writeroom
   "x" 'ps/pdf-tools-open-externally
   "S" 'ps/pdf-tools-add-or-remove-page
   "X" 'ps/pdf-tools-extract-pages
   "H-c" 'pdf-view-kill-ring-save
   "A-u" 'pdf-view-midnight-minor-mode))
#+end_src

*** TODO Tweak function to copy all pdf text to clipboard so that the region is copied instead, if active
:PROPERTIES:
:ID:       2CA2A24B-DB63-47EC-977E-B7EFC6F7CAB9
:END:

*** TODO [#4] Tweak chrome headless command so that chrome authenticates before printing a pdf
:PROPERTIES:
:ID:       BDE975FE-56AA-45C3-AF47-C70503051B30
:Effort:   0:20
:END:
https://stackoverflow.com/questions/62602327/headless-chrome-sharing-credentials
Modify the Keyboard Maestro script called ~Chrome: save webpage as PDF (v)~

** scroll-other-window
:PROPERTIES:
:ID:       4F29AAB8-CC48-4216-B309-2C26337FE12B
:END:

/[[https://github.com/benthamite/scroll-other-window][scroll-other-window]] enables scrolling of the other window in ~pdf-tools~./

#+begin_src emacs-lisp
(use-package scroll-other-window
  :elpaca (scroll-other-window
             :host github
             :repo "benthamite/scroll-other-window")
  :after pdf-tools
  :demand t

  :general
  (sow-mode-map
   "A-C-s-t" 'sow-scroll-other-window-down
   "A-C-s-g" 'sow-scroll-other-window))
#+end_src

** pdf-view-restore
:PROPERTIES:
:ID:       159A7ABF-5D9C-46C3-BAA2-C1E486682875
:END:

/[[https://github.com/007kevin/pdf-view-restore][pdf-view-restore]] adds support to saving and reopening last known pdf position./

#+begin_src emacs-lisp :results silent
(use-package pdf-view-restore
  :after pdf-tools
  :demand t
  :config
  (add-hook 'pdf-view-mode-hook #'pdf-view-restore-mode))
#+end_src

** org-pdftools
:PROPERTIES:
:ID:       028468CA-0334-45AE-A476-028D9A300065
:END:

/[[https://github.com/fuxialexander/org-pdftools][org-pdftools]] adds org link support for [[id:B4272338-4DCA-44FC-9330-804CC88BF189][pdf-tools]]./

#+begin_src emacs-lisp :results silent
(use-package org-pdftools
  :after org pdf-tools
  :defer 30
  :config
  (add-hook 'org-mode-hook #'org-pdftools-setup-link))
#+end_src

** org-noter-pdftools
:PROPERTIES:
:ID:       9ACD5D5E-29E2-49E6-A899-E90558112D5A
:END:

* prog-mode
:PROPERTIES:
:ID:       A8700D18-574A-4093-938C-5707589DBB41
:END:

#+begin_src emacs-lisp :results silent
(use-feature prog-mode
  :demand t
  :config
  (global-prettify-symbols-mode)

  :general
  ("A-H-v" 'set-variable
   "M-d" 'toggle-debug-on-error
   "A-M-d" 'toggle-debug-on-quit)
  (prog-mode-map
   "A-H-C-i" 'mark-defun
   "M-." 'xref-find-definitions)
  ((emacs-lisp-mode-map shell-mode-map)
   "s-c" 'exit-recursive-edit))
#+end_src

** flymake
:PROPERTIES:
:ID:       2259FE72-2958-4507-AD6D-4CB3F9B2E676
:END:

/flymake is a universal on-the-fly syntax checker./

#+begin_src emacs-lisp
(use-feature flymake
  ;; copied from Prot
  :config
  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t)
  (setq flymake-proc-compilation-prevents-syntax-check t)
  (setq flymake-wrap-around nil)
  (setq flymake-mode-line-format
        '("" flymake-mode-line-exception flymake-mode-line-counters))
  (setq flymake-mode-line-counter-format
        '(" " flymake-mode-line-error-counter
          flymake-mode-line-warning-counter
          flymake-mode-line-note-counter ""))
  :general
  (flymake-mode-map
   "C-c f l" 'flymake-goto-next-error
   "C-c f k" 'flymake-goto-prev-error))
#+end_src

** lsp-mode
:PROPERTIES:
:ID:       E9D2E6CA-5256-4776-801F-13281BD390C9
:END:
/[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is an Emacs client/library for the Language Server Protocol./

Useful: [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][A guide on disabling/enabling lsp-mode features - LSP Mode - LSP support for Emacs]]

#+begin_src emacs-lisp :results silent
(use-package lsp-mode
  :defer 7
  :config
  (setq lsp-warn-no-matched-clients nil)
  (setq lsp-headerline-breadcrumb-enable nil)

  (defun ps/lsp-toggle ()
    "Connect/disconnect to lsp server."
    (interactive)
    (if (or (not lsp-mode)
            (equal lsp-mode '(lsp-enable-which-key-integration)))
        (lsp)
      (lsp-disconnect)))

  ;; (add-hook 'org-mode-hook #'lsp)
  (add-hook 'lsp-mode #'lsp-enable-which-key-integration))
#+end_src

** lsp-ui
:PROPERTIES:
:ID:       FE34C313-80BF-4095-B2F0-6228041DFCFF
:END:

/[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] provides UI integrations for lsp-mode./

#+begin_src emacs-lisp :results silent
(use-package lsp-ui
  :after lsp-mode
  :demand t
  :config
  (setq lsp-ui-doc-show-with-cursor t)) ; move the cursor over a symbol to show its documentation
#+end_src

** dumb-jump
:PROPERTIES:
:ID:       BF9AD57C-A2BC-450B-8EAE-0FAAC951A52D
:END:

/[[https://github.com/jacktasia/dumb-jump][dumb-jump]] is a "jump to definition" package for 50+ languages./

#+begin_src emacs-lisp :results silent
(use-package dumb-jump)
#+end_src

** elisp-mode
:PROPERTIES:
:ID:       24475DE5-E129-4832-BAE5-C22D846C251E
:END:

#+begin_src emacs-lisp :results silent
(use-feature elisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook #'flymake-mode)

  :general
  (emacs-lisp-mode-map
   "s-d" 'eval-defun))
#+end_src

*** TODO [#6] Learn to use all relevant sexp commands
:PROPERTIES:
:Effort:   0:30
:ID:       89FDC8BC-DD5B-4616-8E73-37EDD9C088C1
:END:
Some are mentioned [[https://stackoverflow.com/questions/4304925/why-is-it-customary-to-put-many-closing-parentheses-on-one-line-in-lisp-based-la][here]].

** debug
:PROPERTIES:
:ID:       AACCFE88-084B-4428-82DB-7C695D9624C4
:END:

#+begin_src emacs-lisp
(use-feature debug
  :demand t)
#+end_src

** edebug
:PROPERTIES:
:ID:       021794F3-1663-449D-B4B7-41C6F3A72083
:END:

#+begin_src emacs-lisp
(use-feature edebug
  :demand t
  :config
  ;; do not truncate print results in Edebug
  (setq edebug-print-level nil)
  (setq edebug-print-length nil)

  :general
  (emacs-lisp-mode-map
   "A-s-d" 'edebug-defun))
#+end_src

** backtrace
:PROPERTIES:
:ID:       B69F718B-9BAE-4EAD-99DE-2C8C1E98CCA3
:END:

#+begin_src emacs-lisp :results silent
(use-feature backtrace
  :config
  (setq backtrace-line-length nil))
#+end_src

** macrostep
:PROPERTIES:
:ID:       8AE42CAA-5B62-4B1C-9C7C-DFD72AC5B3CD
:END:

/[[https://github.com/joddie/macrostep][macrostep]] is an interactive macro-expander./

See [[https://www.youtube.com/watch?v=odkYXXYOxpo][this video]] (starting at 7:30) for an introduction to this package.

#+begin_src emacs-lisp :results silent
(use-package macrostep)
#+end_src

** clojure
:PROPERTIES:
:ID:       A9508F41-E82B-4E6C-9304-53981A8F0C27
:END:

/[[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] provides support for the Clojure(Script) programming language./

#+begin_src emacs-lisp :results silent
(use-package clojure-mode)
#+end_src

** python
:PROPERTIES:
:ID:       D00C20E4-925A-41E1-95BD-5BF8BA03637C
:END:

#+begin_src emacs-lisp :results silent
(use-feature python
  :config
  (setq python-shell-interpreter "python3")
  (setq org-babel-python-command "python3")

  (setq flycheck-python-pycompile-executable "python3")
  (remove-hook 'python-mode-hook #'yasnippet-snippets--fixed-indent) ; some package (`elpy'?) is adding this

  :general
  (python-mode-map
   "s-l" 'python-shell-send-file
   "s-d" 'python-shell-send-defun
   "s-c" 'python-shell-send-buffer
   "s-s" 'python-shell-send-string
   "s-r" 'python-shell-send-region
   "s-e" 'python-shell-send-statement))
#+end_src

** applescript-mode
:PROPERTIES:
:ID:       6F36A349-196D-40A8-9338-61DB3C86D760
:END:

/[[https://github.com/emacsorphanage/applescript-mode][applescript-mode]] is a major mode for editing AppleScript./

#+begin_src emacs-lisp :results silent
(use-package applescript-mode)
#+end_src

** csv-mode
:PROPERTIES:
:ID:       44D557E4-026E-425C-B1C9-B26F4B6197E4
:END:

/[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] is a major mode for editing comma-separated values./

#+begin_src emacs-lisp
(use-package csv-mode
  :demand t)
#+end_src

** hideshow
:PROPERTIES:
:ID:       8E6459FA-9978-42F8-9DAC-C4D7FB385F97
:END:

/hideshow is a minor mode for block hiding and showing./

[2023-03-01 Wed 03:56] I don't remember why I created this hook.

#+begin_src emacs-lisp
(use-feature hideshow
  :demand t

  :config
  (add-hook 'prog-mode-hook #'hs-minor-mode))
#+end_src

** aggressive-indent
:PROPERTIES:
:ID:       94B7795A-09C3-4627-934D-1F4AEB14F7C0
:END:

/[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] keeps code always indented./

#+begin_src emacs-lisp
(use-package aggressive-indent
  :defer 5
  :config
  (global-aggressive-indent-mode))
#+end_src

** elpy
:PROPERTIES:
:ID:       E96C6026-AEFA-42A1-930E-863EA3FF651E
:END:
:LOGBOOK:
CLOCK: [2021-11-25 Thu 17:39]--[2021-11-25 Thu 17:51] =>  0:12
CLOCK: [2021-11-01 Mon 12:09]--[2021-11-01 Mon 12:10] =>  0:01
:END:

/[[https://github.com/jorgenschaefer/elpy][elpy]] is an Emacs Python development environment./

#+begin_src emacs-lisp :results silent
(use-package elpy
  :config
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-virtualenv-path 'current)
  (elpy-enable))
#+end_src

** eldoc
:PROPERTIES:
:ID:       6DF08967-7BC0-4DA6-9E19-63B903675EF1
:END:
:LOGBOOK:
CLOCK: [2022-06-19 Sun 07:14]--[2022-06-19 Sun 07:31] =>  0:17
:END:

/[[https://elpa.gnu.org/packages/eldoc.html][eldoc]] show function arglist or variable docstring in echo area./

#+begin_src emacs-lisp :results silent
(use-feature eldoc
  :demand t
  :config
  ;; emacs.stackexchange.com/a/55914/32089
  (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
    "If SYM is a function, append its docstring."
    (concat
     (apply orig-fun sym r)
     (let* ((doc (and (fboundp sym) (documentation sym 'raw)))
            (oneline (and doc (substring doc 0 (string-match "\n" doc)))))
       (and oneline
            (stringp oneline)
            (not (string= "" oneline))
            (concat "  |  " (propertize oneline 'face 'italic))))))

  (global-eldoc-mode))
#+end_src

** bicycle
:PROPERTIES:
:ID:       0AF1245D-2786-40B9-9176-783B9B9397AD
:END:

/[[https://github.com/tarsius/bicycle][bicycle]] provides commands for cycling the visibility of outline sections and code blocks./

#+begin_src emacs-lisp :results silent
(use-package bicycle
  :after outline
  :demand t
  :general
  (outline-minor-mode-map
   ("s-TAB" . bicycle-cycle)
   ("S-TAB" . bicycle-cycle-global)))
#+end_src

* AI
:PROPERTIES:
:ID:       9846A789-9972-438B-9B6F-FE6BBBD3020E
:END:

** copilot
:PROPERTIES:
:ID:       2064FE34-0301-4E33-AB51-FE4921CA0E16
:END:

/[[https://github.com/zerolfx/copilot.el][copilot]] is an unofficial Copilot plugin for Emacs./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/copilot)
(use-package copilot
  :elpaca (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :demand t

  :config
  (setq copilot-node-executable "/opt/homebrew/opt/node/bin/node")
  (setq copilot-log-max 1000)

  (add-hook 'prog-mode-hook #'copilot-mode)

  :general
  (copilot-mode-map
   "M-<tab>" 'copilot-accept-completion
   "A-M-<tab>" 'copilot-accept-completion-by-line))
#+end_src

** openai
:PROPERTIES:
:ID:       822430F1-51B8-4754-80B0-EC17DD931CB5
:END:
:LOGBOOK:
CLOCK: [2023-03-17 Fri 21:54]--[2023-03-17 Fri 22:24] =>  0:30
:END:

/[[https://github.com/emacs-openai/openai][openai]] is an Elisp library for the OpenAI API./

#+begin_src emacs-lisp
(use-package openai
  :elpaca (openai
             :host github
             :repo "emacs-openai/openai")
  :config
  (setq openai-key (auth-source-pass-get "key" "tlon/core/openai.com")))
#+end_src

** chatgpt
:PROPERTIES:
:ID:       2D5B778F-E663-4569-8104-77E6D986FA90
:END:
:LOGBOOK:
CLOCK: [2023-03-21 Tue 22:51]--[2023-03-21 Tue 23:01] =>  0:10
CLOCK: [2023-03-21 Tue 13:10]--[2023-03-21 Tue 13:27] =>  0:17
:END:

/[[https://github.com/emacs-openai/chatgpt][chatgpt]] supports prompting GPT from within Emacs./

#+begin_src emacs-lisp
(use-package chatgpt
  :elpaca (chatgpt
             :host github
             :repo "emacs-openai/chatgpt")
  :config
  (setq chatgpt-model "gpt-4")
  (setq chatgpt-input-method 'minibuffer)
  (setq chatgpt-animate-text nil)

  :general
  ("A-C-g" 'chatgpt))
#+end_src

** codegpt
:PROPERTIES:
:ID:       5008C40C-EC84-4817-9BE6-92996986D25E
:END:

/[[https://github.com/emacs-openai/codegpt#-using-chatgpt][codegpt]]  is a completion interface for GPT./

#+begin_src emacs-lisp
(use-package codegpt
  :elpaca (codegpt
             :host github
             :repo "emacs-openai/codegpt")
  :after openai
  :config
  (setq codegpt-model "text-davinci-003"))
#+end_src

** org-ai
:PROPERTIES:
:ID:       DE0368E4-FFE7-42D8-8557-2D5DD4DA5BF5
:END:

/[[https://github.com/rksm/org-ai][org-ai]] turns Emacs into your personal AI assistant using ChatGPT, DALL-E, and Whisper./

#+begin_src emacs-lisp
(use-package org-ai
  :elpaca  (org-ai :type git :host github :repo "rksm/org-ai"
                   :local-repo "org-ai"
                   :files ("*.el" "README.md" "snippets"))
  :after org yasnippet
  :commands org-ai-mode
  :config
  (setq org-ai-openai-api-token (auth-source-pass-get "key" "tlon/core/openai.com"))
  (setq org-ai-default-chat-model "gpt-4")
  (setq org-ai-talk-say-words-per-minute 210)
  (add-hook 'org-mode-hook #'org-ai-mode)
  (org-ai-install-yasnippets)
  (require 'org-ai-talk))
#+end_src

** whisper
:PROPERTIES:
:ID:       19FF2502-D4A0-41CC-8F72-E1CF1D960304
:END:

/[[https://github.com/natrys/whisper.el][whisper]] is a speech-to-Text interface for Emacs using OpenAI's whisper model and whisper.cpp as inference engine./

#+begin_src emacs-lisp
(use-package whisper
  :elpaca (whisper.el
           :host github
           :repo "natrys/whisper.el"
           :protocol ssh)
  :config
  (setq whisper-install-directory no-littering-var-directory)
  (setq whisper--ffmpeg-input-device ":0"))
#+end_src

** pen
:PROPERTIES:
:ID:       DEEF7EF7-E79C-427B-9E1D-86D22FC2056E
:END:

*** TODO [#5] Check out pen.el
:PROPERTIES:
:ID:       2743B1F0-CCA8-4F48-8DC4-EF93E1A4607F
:END:

https://github.com/mullikine/pen.el
Disscussion [[https://www.reddit.com/r/emacs/comments/zhwhww/comment/izp8rxy/?utm_source=reddit&utm_medium=web2x&context=3][here]].

* org-mode
:PROPERTIES:
:ID:       0E2FD90A-8A8A-4625-ABEA-D82DD3CC88A0
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 21:27]--[2021-11-19 Fri 21:30] =>  0:03
CLOCK: [2021-11-18 Thu 19:05]--[2021-11-18 Thu 19:28] =>  0:23
CLOCK: [2021-07-22 Thu 12:06]--[2021-07-22 Thu 12:12] =>  0:06
CLOCK: [2021-07-11 Sun 11:16]--[2021-07-11 Sun 11:46] =>  0:30
CLOCK: [2021-04-06 Tue 20:40]--[2021-04-06 Tue 21:10] =>  0:30
CLOCK: [2021-04-06 Tue 13:12]--[2021-04-06 Tue 13:48] =>  0:36
CLOCK: [2021-03-30 Tue 09:36]--[2021-03-30 Tue 09:42] =>  0:06
CLOCK: [2021-03-25 Thu 22:19]--[2021-03-25 Thu 23:00] =>  0:41
CLOCK: [2021-03-17 Wed 19:33]--[2021-03-17 Wed 20:00] =>  0:27
CLOCK: [2021-03-17 Wed 15:42]--[2021-03-17 Wed 15:48] =>  0:06
CLOCK: [2021-03-16 Tue 20:03]--[2021-03-16 Tue 20:21] =>  0:18
CLOCK: [2021-03-16 Tue 16:17]--[2021-03-16 Tue 16:18] =>  0:01
CLOCK: [2021-03-09 Tue 21:18]--[2021-03-09 Tue 21:26] =>  0:08
CLOCK: [2021-03-04 Thu 10:04]--[2021-03-04 Thu 10:10] =>  0:06
CLOCK: [2021-03-02 Tue 10:14]--[2021-03-02 Tue 10:23] =>  0:09
CLOCK: [2021-02-20 Sat 22:09]--[2021-02-20 Sat 22:20] =>  0:11
CLOCK: [2021-02-05 Fri 19:19]--[2021-02-05 Fri 19:25] =>  0:06
CLOCK: [2021-02-05 Fri 19:00]--[2021-02-05 Fri 19:09] =>  0:09
CLOCK: [2021-01-30 Sat 21:39]--[2021-01-30 Sat 22:28] =>  0:49
CLOCK: [2021-01-29 Fri 15:32]--[2021-01-29 Fri 15:46] =>  0:14
CLOCK: [2021-01-28 Thu 18:52]--[2021-01-28 Thu 18:54] =>  0:02
CLOCK: [2021-01-28 Thu 17:42]--[2021-01-28 Thu 18:17] =>  0:35
CLOCK: [2021-01-28 Thu 17:23]--[2021-01-28 Thu 17:31] =>  0:08
CLOCK: [2021-01-25 Mon 20:25]--[2021-01-25 Mon 20:35] =>  0:10
CLOCK: [2021-01-25 Mon 16:53]--[2021-01-25 Mon 17:00] =>  0:07
CLOCK: [2021-01-25 Mon 16:39]--[2021-01-25 Mon 16:49] =>  0:10
CLOCK: [2021-01-25 Mon 11:15]--[2021-01-25 Mon 11:25] =>  0:10
CLOCK: [2021-01-24 Sun 12:52]--[2021-01-24 Sun 13:01] =>  0:09
CLOCK: [2021-01-24 Sun 11:48]--[2021-01-24 Sun 12:01] =>  0:13
CLOCK: [2021-01-24 Sun 11:22]--[2021-01-24 Sun 11:37] =>  0:15
CLOCK: [2021-01-23 Sat 18:47]--[2021-01-23 Sat 19:07] =>  0:20
CLOCK: [2021-01-23 Sat 16:41]--[2021-01-23 Sat 16:50] =>  0:09
CLOCK: [2021-01-23 Sat 14:07]--[2021-01-23 Sat 14:14] =>  0:07
CLOCK: [2021-01-23 Sat 12:54]--[2021-01-23 Sat 13:33] =>  0:39
CLOCK: [2021-01-22 Fri 15:46]--[2021-01-22 Fri 15:49] =>  0:03
CLOCK: [2021-01-22 Fri 15:43]--[2021-01-22 Fri 15:46] =>  0:03
CLOCK: [2021-01-22 Fri 13:48]--[2021-01-22 Fri 13:57] =>  0:09
CLOCK: [2021-01-22 Fri 12:51]--[2021-01-22 Fri 12:59] =>  0:08
CLOCK: [2021-01-22 Fri 12:34]--[2021-01-22 Fri 12:50] =>  0:16
CLOCK: [2021-01-19 Tue 18:54]--[2021-01-19 Tue 19:12] =>  0:18
CLOCK: [2021-01-15 Fri 21:28]--[2021-01-15 Fri 22:21] =>  0:53
CLOCK: [2021-01-15 Fri 20:35]--[2021-01-15 Fri 21:25] =>  0:50
CLOCK: [2021-01-15 Fri 18:07]--[2021-01-15 Fri 18:11] =>  0:04
CLOCK: [2021-01-10 Sun 10:49]--[2021-01-10 Sun 11:05] =>  0:16
CLOCK: [2021-01-09 Sat 11:25]--[2021-01-09 Sat 11:34] =>  0:09
CLOCK: [2021-01-09 Sat 10:53]--[2021-01-09 Sat 11:22] =>  0:29
CLOCK: [2021-01-04 Mon 11:12]--[2021-01-04 Mon 11:17] =>  0:05
CLOCK: [2021-01-01 Fri 18:14]--[2021-01-01 Fri 18:26] =>  0:12
CLOCK: [2020-12-29 Tue 15:38]--[2020-12-29 Tue 15:56] =>  0:18
CLOCK: [2020-12-25 Fri 20:51]--[2020-12-25 Fri 20:58] =>  0:07
CLOCK: [2020-12-25 Fri 19:43]--[2020-12-25 Fri 20:05] =>  0:22
CLOCK: [2020-12-25 Fri 19:25]--[2020-12-25 Fri 19:27] =>  0:02
CLOCK: [2020-12-20 Sun 14:15]--[2020-12-20 Sun 14:19] =>  0:04
CLOCK: [2020-12-08 Tue 08:51]--[2020-12-08 Tue 08:55] =>  0:04
CLOCK: [2020-10-22 Thu 12:28]--[2020-10-22 Thu 12:29] =>  0:01
CLOCK: [2020-10-17 Sat 13:40]--[2020-10-17 Sat 13:51] =>  0:11
CLOCK: [2020-10-03 Sat 10:12]--[2020-10-03 Sat 10:17] =>  0:05
CLOCK: [2020-09-27 Sun 19:20]--[2020-09-27 Sun 19:21] =>  0:01
CLOCK: [2020-09-27 Sun 17:25]--[2020-09-27 Sun 18:00] =>  0:35
CLOCK: [2020-09-22 Tue 10:35]--[2020-09-22 Tue 10:50] =>  0:15
CLOCK: [2020-09-21 Mon 22:03]--[2020-09-21 Mon 22:08] =>  0:05
CLOCK: [2020-09-20 Sun 21:55]--[2020-09-20 Sun 22:03] =>  0:08
CLOCK: [2020-09-20 Sun 18:33]--[2020-09-20 Sun 18:56] =>  0:23
CLOCK: [2020-09-19 Sat 20:48]--[2020-09-19 Sat 20:57] =>  0:09
CLOCK: [2020-09-19 Sat 20:36]--[2020-09-19 Sat 20:36] =>  0:00
CLOCK: [2020-09-18 Fri 19:50]--[2020-09-18 Fri 20:08] =>  0:18
CLOCK: [2020-09-17 Thu 19:46]--[2020-09-17 Thu 20:00] =>  0:14
CLOCK: [2020-09-14 Mon 10:30]--[2020-09-14 Mon 10:44] =>  0:00
CLOCK: [2020-09-14 Mon 08:43]--[2020-09-14 Mon 08:52] =>  0:09
CLOCK: [2020-09-01 Tue 18:53]--[2020-09-01 Tue 18:56] =>  0:03
CLOCK: [2020-09-01 Tue 14:16]--[2020-09-01 Tue 14:17] =>  0:01
CLOCK: [2020-08-31 Mon 15:25]--[2020-08-31 Mon 15:34] =>  0:09
CLOCK: [2020-08-30 Sun 21:43]--[2020-08-30 Sun 22:15] =>  0:32
CLOCK: [2020-08-30 Sun 18:08]--[2020-08-30 Sun 18:09] =>  0:01
CLOCK: [2020-08-30 Sun 17:26]--[2020-08-30 Sun 17:56] =>  0:30
CLOCK: [2020-08-29 Sat 15:31]--[2020-08-29 Sat 15:41] =>  0:10
CLOCK: [2020-08-28 Fri 22:05]--[2020-08-28 Fri 22:06] =>  0:01
CLOCK: [2020-08-28 Fri 14:28]--[2020-08-28 Fri 14:42] =>  0:10
CLOCK: [2020-08-27 Thu 13:41]--[2020-08-27 Thu 13:44] =>  0:03
CLOCK: [2020-08-25 Tue 11:26]--[2020-08-25 Tue 11:28] =>  0:02
CLOCK: [2020-08-25 Tue 11:16]--[2020-08-25 Tue 11:22] =>  0:06
CLOCK: [2020-08-25 Tue 11:04]--[2020-08-25 Tue 11:04] =>  0:00
CLOCK: [2020-08-25 Tue 10:57]--[2020-08-25 Tue 11:04] =>  0:07
CLOCK: [2020-08-24 Mon 16:30]--[2020-08-24 Mon 16:37] =>  0:07
CLOCK: [2020-08-24 Mon 16:27]--[2020-08-24 Mon 16:29] =>  0:02
CLOCK: [2020-08-24 Mon 12:45]--[2020-08-24 Mon 12:57] =>  0:12
CLOCK: [2020-08-23 Sun 13:44]--[2020-08-23 Sun 14:01] =>  0:17
CLOCK: [2020-08-23 Sun 12:40]--[2020-08-23 Sun 12:59] =>  0:19
CLOCK: [2020-08-22 Sat 22:42]--[2020-08-22 Sat 22:55] =>  0:13
CLOCK: [2020-08-22 Sat 18:35]--[2020-08-22 Sat 18:53] =>  0:18
CLOCK: [2020-08-22 Sat 15:21]--[2020-08-22 Sat 16:06] =>  0:45
CLOCK: [2020-08-22 Sat 12:48]--[2020-08-22 Sat 12:54] =>  0:06
CLOCK: [2020-08-21 Fri 19:34]--[2020-08-21 Fri 19:54] =>  0:17
CLOCK: [2020-08-20 Thu 13:44]--[2020-08-20 Thu 13:52] =>  0:02
CLOCK: [2020-08-20 Thu 12:53]--[2020-08-20 Thu 13:03] =>  0:10
CLOCK: [2020-08-19 Wed 15:59]--[2020-08-19 Wed 16:01] =>  0:02
CLOCK: [2020-08-18 Tue 12:57]--[2020-08-18 Tue 13:00] =>  0:03
CLOCK: [2020-08-18 Tue 12:06]--[2020-08-18 Tue 12:08] =>  0:02
CLOCK: [2020-08-17 Mon 19:23]--[2020-08-17 Mon 19:31] =>  0:08
CLOCK: [2020-08-17 Mon 19:11]--[2020-08-17 Mon 19:23] =>  0:12
CLOCK: [2020-08-17 Mon 17:57]--[2020-08-17 Mon 18:23] =>  0:26
CLOCK: [2020-08-17 Mon 17:48]--[2020-08-17 Mon 17:53] =>  0:05
CLOCK: [2020-08-17 Mon 13:45]--[2020-08-17 Mon 14:22] =>  0:37
CLOCK: [2020-08-16 Sun 08:58]--[2020-08-16 Sun 09:15] =>  0:17
CLOCK: [2020-08-15 Sat 21:55]--[2020-08-15 Sat 23:55] =>  2:00
CLOCK: [2020-08-15 Sat 21:25]--[2020-08-15 Sat 21:27] =>  0:02
CLOCK: [2020-08-15 Sat 16:03]--[2020-08-15 Sat 17:28] =>  1:25
CLOCK: [2020-08-14 Fri 21:10]--[2020-08-14 Fri 21:22] =>  0:12
CLOCK: [2020-08-14 Fri 17:34]--[2020-08-14 Fri 17:56] =>  0:22
CLOCK: [2020-08-14 Fri 17:05]--[2020-08-14 Fri 17:14] =>  0:09
CLOCK: [2020-08-14 Fri 16:25]--[2020-08-14 Fri 16:34] =>  0:09
CLOCK: [2020-08-13 Thu 17:19]--[2020-08-13 Thu 17:27] =>  0:08
CLOCK: [2020-08-13 Thu 16:24]--[2020-08-13 Thu 16:29] =>  0:05
CLOCK: [2020-08-13 Thu 12:55]--[2020-08-13 Thu 13:12] =>  0:17
CLOCK: [2020-08-13 Thu 12:54]--[2020-08-13 Thu 12:54] =>  0:00
CLOCK: [2020-08-13 Thu 10:13]--[2020-08-13 Thu 10:24] =>  0:11
CLOCK: [2020-08-13 Thu 08:20]--[2020-08-13 Thu 08:28] =>  0:08
CLOCK: [2020-08-13 Thu 07:39]--[2020-08-13 Thu 07:53] =>  0:14
CLOCK: [2020-08-12 Wed 22:19]--[2020-08-12 Wed 23:16] =>  0:57
CLOCK: [2020-08-12 Wed 20:51]--[2020-08-12 Wed 20:52] =>  0:01
CLOCK: [2020-08-12 Wed 19:49]--[2020-08-12 Wed 20:02] =>  0:13
CLOCK: [2020-08-12 Wed 18:58]--[2020-08-12 Wed 18:58] =>  0:00
CLOCK: [2020-08-12 Wed 16:38]--[2020-08-12 Wed 17:31] =>  0:53
CLOCK: [2020-08-12 Wed 15:06]--[2020-08-12 Wed 15:31] =>  0:25
CLOCK: [2020-08-12 Wed 12:44]--[2020-08-12 Wed 12:57] =>  0:13
CLOCK: [2020-08-11 Tue 20:52]--[2020-08-11 Tue 21:31] =>  0:39
CLOCK: [2020-08-11 Tue 19:32]--[2020-08-11 Tue 20:00] =>  0:28
CLOCK: [2020-08-11 Tue 19:03]--[2020-08-11 Tue 19:28] =>  0:25
CLOCK: [2020-08-11 Tue 18:37]--[2020-08-11 Tue 18:48] =>  0:11
CLOCK: [2020-08-11 Tue 18:24]--[2020-08-11 Tue 18:33] =>  0:09
CLOCK: [2020-08-11 Tue 18:11]--[2020-08-11 Tue 18:17] =>  0:06
CLOCK: [2020-08-11 Tue 16:30]--[2020-08-11 Tue 16:34] =>  0:04
CLOCK: [2020-08-11 Tue 13:59]--[2020-08-11 Tue 14:11] =>  0:12
CLOCK: [2020-08-11 Tue 11:29]--[2020-08-11 Tue 11:31] =>  0:02
CLOCK: [2020-08-09 Sun 21:09]--[2020-08-09 Sun 21:20] =>  0:11
CLOCK: [2020-08-09 Sun 16:45]--[2020-08-09 Sun 17:09] =>  0:19
CLOCK: [2020-08-09 Sun 10:55]--[2020-08-09 Sun 10:59] =>  0:04
CLOCK: [2020-08-08 Sat 18:41]--[2020-08-08 Sat 18:53] =>  0:12
CLOCK: [2020-08-08 Sat 17:53]--[2020-08-08 Sat 18:23] =>  0:30
CLOCK: [2020-08-08 Sat 17:19]--[2020-08-08 Sat 17:49] =>  0:30
CLOCK: [2020-08-07 Fri 19:24]--[2020-08-07 Fri 19:34] =>  0:10
CLOCK: [2020-08-07 Fri 18:58]--[2020-08-07 Fri 19:17] =>  0:19
CLOCK: [2020-08-07 Fri 14:51]--[2020-08-07 Fri 15:07] =>  0:16
CLOCK: [2020-08-06 Thu 19:36]--[2020-08-06 Thu 19:50] =>  0:14
CLOCK: [2020-08-06 Thu 10:59]--[2020-08-06 Thu 11:21] =>  0:22
CLOCK: [2020-08-06 Thu 08:41]--[2020-08-06 Thu 08:42] =>  0:01
CLOCK: [2020-08-05 Wed 19:49]--[2020-08-05 Wed 19:53] =>  0:04
CLOCK: [2020-08-05 Wed 19:41]--[2020-08-05 Wed 19:48] =>  0:07
CLOCK: [2020-08-05 Wed 11:54]--[2020-08-05 Wed 11:59] =>  0:05
CLOCK: [2020-08-04 Tue 20:46]--[2020-08-04 Tue 20:50] =>  0:04
CLOCK: [2020-08-03 Mon 20:50]--[2020-08-03 Mon 20:54] =>  0:04
CLOCK: [2020-08-03 Mon 07:56]--[2020-08-03 Mon 07:58] =>  0:02
CLOCK: [2020-08-02 Sun 20:44]--[2020-08-02 Sun 20:49] =>  0:05
CLOCK: [2020-07-31 Fri 20:57]--[2020-07-31 Fri 20:58] =>  0:01
CLOCK: [2020-07-31 Fri 18:44]--[2020-07-31 Fri 18:51] =>  0:07
CLOCK: [2020-07-29 Wed 19:00]--[2020-07-29 Wed 19:09] =>  0:09
CLOCK: [2020-07-29 Wed 13:47]--[2020-07-29 Wed 16:05] =>  2:18
CLOCK: [2020-07-29 Wed 12:24]--[2020-07-29 Wed 12:27] =>  0:03
CLOCK: [2020-07-29 Wed 11:38]--[2020-07-29 Wed 12:23] =>  0:45
CLOCK: [2020-07-28 Tue 20:44]--[2020-07-28 Tue 21:24] =>  0:40
CLOCK: [2020-07-28 Tue 19:21]--[2020-07-28 Tue 19:58] =>  0:37
CLOCK: [2020-07-28 Tue 19:04]--[2020-07-28 Tue 19:14] =>  0:10
CLOCK: [2020-07-28 Tue 17:30]--[2020-07-28 Tue 17:50] =>  0:20
CLOCK: [2020-07-28 Tue 16:58]--[2020-07-28 Tue 17:12] =>  0:14
CLOCK: [2020-07-28 Tue 13:53]--[2020-07-28 Tue 14:01] =>  0:08
CLOCK: [2020-07-27 Mon 21:00]--[2020-07-27 Mon 21:03] =>  0:03
CLOCK: [2020-07-27 Mon 15:08]--[2020-07-27 Mon 15:12] =>  0:04
CLOCK: [2020-07-27 Mon 14:22]--[2020-07-27 Mon 14:25] =>  0:03
CLOCK: [2020-07-26 Sun 20:53]--[2020-07-26 Sun 21:23] =>  0:30
CLOCK: [2020-07-26 Sun 17:04]--[2020-07-26 Sun 17:15] =>  0:11
CLOCK: [2020-07-26 Sun 11:39]--[2020-07-26 Sun 11:47] =>  0:08
CLOCK: [2020-07-23 Thu 10:20]--[2020-07-23 Thu 10:40] =>  0:20
CLOCK: [2020-07-22 Wed 22:10]--[2020-07-22 Wed 22:26] =>  0:16
CLOCK: [2020-07-17 Fri 20:56]--[2020-07-17 Fri 21:18] =>  0:22
CLOCK: [2020-07-17 Fri 12:38]--[2020-07-17 Fri 13:10] =>  0:32
CLOCK: [2020-07-17 Fri 11:45]--[2020-07-17 Fri 12:34] =>  0:49
CLOCK: [2020-07-14 Tue 15:53]--[2020-07-14 Tue 21:51] =>  5:58
CLOCK: [2020-07-14 Tue 13:47]--[2020-07-14 Tue 14:39] =>  0:52
CLOCK: [2020-07-14 Tue 12:34]--[2020-07-14 Tue 12:58] =>  0:24
CLOCK: [2020-07-14 Tue 10:47]--[2020-07-14 Tue 11:43] =>  0:56
CLOCK: [2020-07-13 Mon 12:43]--[2020-07-13 Mon 13:00] =>  0:17
CLOCK: [2020-07-12 Sun 19:31]--[2020-07-12 Sun 19:51] =>  0:20
CLOCK: [2020-07-12 Sun 12:35]--[2020-07-12 Sun 13:06] =>  0:31
CLOCK: [2020-07-08 Wed 15:38]--[2020-07-08 Wed 16:04] =>  0:26
CLOCK: [2020-07-08 Wed 16:05]--[2020-07-08 Wed 16:30] =>  0:25
CLOCK: [2020-07-08 Wed 21:13]--[2020-07-08 Wed 21:25] =>  0:12
CLOCK: [2020-07-08 Wed 21:29]--[2020-07-08 Wed 21:39] =>  0:10
CLOCK: [2020-07-08 Wed 21:39]--[2020-07-08 Wed 21:40] =>  0:01
CLOCK: [2020-07-08 Wed 21:40]--[2020-07-08 Wed 21:58] =>  0:18
CLOCK: [2020-07-09 Thu 13:48]--[2020-07-09 Thu 13:56] =>  0:08
CLOCK: [2020-07-10 Fri 18:19]--[2020-07-10 Fri 18:45] =>  0:26
CLOCK: [2020-07-10 Fri 18:47]--[2020-07-10 Fri 19:05] =>  0:18
CLOCK: [2020-07-10 Fri 19:19]--[2020-07-10 Fri 19:32] =>  0:13
CLOCK: [2020-07-10 Fri 19:36]--[2020-07-10 Fri 19:41] =>  0:05
CLOCK: [2020-07-11 Sat 13:11]--[2020-07-11 Sat 14:59] =>  1:48
CLOCK: [2022-07-28 Thu 14:47]--[2022-07-28 Thu 14:58] =>  0:11
CLOCK: [2021-10-12 Tue 19:21]--[2021-10-12 Tue 19:38] =>  0:17
CLOCK: [2021-06-02 Wed 21:59]--[2021-06-02 Wed 22:00] =>  0:01
CLOCK: [2021-06-02 Wed 19:18]--[2021-06-02 Wed 19:52] =>  0:34
CLOCK: [2021-06-08 Tue 16:06]--[2021-06-08 Tue 16:07] =>  0:01
CLOCK: [2021-04-28 Wed 08:50]--[2021-04-28 Wed 09:07] =>  0:17
CLOCK: [2021-06-08 Tue 16:07]--[2021-06-08 Tue 16:37] =>  0:30
CLOCK: [2021-03-28 Sun 19:01]--[2021-03-28 Sun 19:20] =>  0:19
CLOCK: [2021-06-24 Thu 09:30]--[2021-06-24 Thu 09:39] =>  0:09
CLOCK: [2021-04-02 Fri 17:22]--[2021-04-02 Fri 17:29] =>  0:07
CLOCK: [2021-04-02 Fri 09:39]--[2021-04-02 Fri 09:47] =>  0:08
CLOCK: [2021-02-27 Sat 20:56]--[2021-02-27 Sat 21:06] =>  0:10
CLOCK: [2021-02-25 Thu 22:04]--[2021-02-25 Thu 22:34] =>  0:30
CLOCK: [2021-02-26 Fri 13:40]--[2021-02-26 Fri 13:55] =>  0:15
CLOCK: [2022-07-13 Wed 10:56]--[2022-07-13 Wed 11:30] =>  0:34
CLOCK: [2021-06-27 Sun 15:12]--[2021-06-27 Sun 15:17] =>  0:05
CLOCK: [2021-06-16 Wed 18:16]--[2021-06-16 Wed 18:19] =>  0:03
CLOCK: [2021-06-12 Sat 13:19]--[2021-06-12 Sat 13:31] =>  0:12
CLOCK: [2021-05-28 Fri 19:30]--[2021-05-28 Fri 19:49] =>  0:19
CLOCK: [2021-04-30 Fri 21:37]--[2021-04-30 Fri 21:42] =>  0:05
CLOCK: [2021-04-16 Fri 21:19]--[2021-04-16 Fri 21:25] =>  0:06
CLOCK: [2021-04-07 Wed 19:09]--[2021-04-07 Wed 19:11] =>  0:02
CLOCK: [2021-03-21 Sun 21:18]--[2021-03-21 Sun 22:23] =>  1:05
CLOCK: [2021-03-20 Sat 20:27]--[2021-03-20 Sat 20:47] =>  0:20
CLOCK: [2021-03-17 Wed 15:17]--[2021-03-17 Wed 15:42] =>  0:25
CLOCK: [2021-03-08 Mon 21:40]--[2021-03-08 Mon 21:43] =>  0:03
CLOCK: [2021-03-08 Mon 17:52]--[2021-03-08 Mon 17:59] =>  0:07
CLOCK: [2021-03-08 Mon 15:33]--[2021-03-08 Mon 15:41] =>  0:08
CLOCK: [2022-07-01 Fri 11:48]--[2022-07-01 Fri 12:21] =>  0:33
CLOCK: [2022-05-29 Sun 15:24]--[2022-05-29 Sun 16:00] =>  0:36
CLOCK: [2022-01-15 Sat 19:24]--[2022-01-15 Sat 20:14] =>  0:50
CLOCK: [2021-11-20 Sat 21:32]--[2021-11-20 Sat 21:41] =>  0:09
CLOCK: [2021-10-14 Thu 19:07]--[2021-10-14 Thu 19:39] =>  0:32
CLOCK: [2021-10-05 Tue 13:18]--[2021-10-05 Tue 13:34] =>  0:16
CLOCK: [2021-04-02 Fri 22:44]--[2021-04-02 Fri 23:10] =>  0:26
:END:

** org
:PROPERTIES:
:ID:       268B60E4-708C-4372-A59D-5DD876E493CA
:END:

/[[https://orgmode.org/][org-mode]] is a major mode for keeping notes, authoring documents, computational notebooks, literate programming, maintaining to-do lists, planning projects, and more./

#+begin_src emacs-lisp :results silent
(use-package org
  :demand t
  :config
  (setq org-directory ps/dir-org) ; set org directory
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "DOING(g)"
                    "SOMEDAY(s)"
                    "MAYBE(m)"
                    "WAITING(w)"
                    "PROJECT(p)"
                    "|"
                    "DELEGATED(l)"
                    "DONE(d)"
                    "CANCELLED(c)")))
  (setq org-priority-highest 1)
  (setq org-priority-default 7)
  (setq org-priority-lowest 9) ; set priorities
  ;; (org-extend-today-until 4 "youtu.be/31gwvApo8zg?t=3342")
  (setq org-deadline-warning-days 0)              ; show due tasks only on the day the tasks are due
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars t) ; indent every heading and hide all but the last leading star
  (setq org-return-follows-link t)
  (setq org-startup-folded t)
  (setq org-startup-indented t)
  (setq org-log-into-drawer "STATES")
  (setq org-clock-into-drawer "LOGBOOK") ; file task state changes in STATES drawer
  (setq org-log-done 'time) ; add timestamp when task is marked as DONE
  (setq org-log-repeat nil) ; do not log TODO status changes for repeating tasks
  (setq org-M-RET-may-split-line nil) ; irreal.org/blog/?p=6297
  (setq org-loop-over-headlines-in-active-region t) ; Allow simultaneous modification of multiple task statuses.
  (setq org-ctrl-k-protect-subtree t)
  (setq org-catch-invisible-edits 'smart)
  (setq org-special-ctrl-a/e t) ; `org-beginning-of-line' goes to beginning of first word
  (setq org-link-search-must-match-exact-headline nil)
  (setq org-mark-ring-length 4)
  (setq org-pretty-entities nil)
  (setq org-image-actual-width '(800))
  (setq org-ellipsis " ")
  (setq org-link-elisp-confirm-function nil)
  (setq org-file-apps '((auto-mode . emacs)
                        (directory . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'" . emacs)))
  (setq org-use-tag-inheritance t)

  (setq org-structure-template-alist
        '(("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("l" . "export latex")
          ("q" . "quote")
          ("s" . "src")
          ("se" . "src emacs-lisp")
          ("sj" . "src clojure")
          ("sm" . "src markdown")
          ("sp" . "src python")
          ("sq" . "src sql")
          ("ss" . "src shell")
          ("v" . "verse")
          ("w" . "WP")))

  (dolist (module '(org-habit org-tempo))
    (add-to-list 'org-modules module))

  (defun ps/org-set-todo-properties ()
    "Set priority and effort."
    (interactive)
    (org-priority)
    (org-set-effort))

  (defun ps/org-url-dwim ()
    "docstring"
    (interactive)
    (cond
     ((url-get-url-at-point)
      (kill-new (url-get-url-at-point)))
     ((ps/org-link-get-url-at-point)
      (kill-new (ps/org-link-get-thing-at-point 1)))))

  ;; Adapted from lists.gnu.org/archive/html/emacs-orgmode/2011-06/msg00716.html
  (defun ps/org-link-get-thing-at-point (arg)
    "When point is on org link, extract object, as defined by ARG."
    (when (org-in-regexp org-link-bracket-re 1)
      (kill-new (org-link-unescape (match-string-no-properties arg)))))

  (defun ps/org-link-get-link-at-point ()
    "When point is on org link, extract link (both url and
description)."
    (interactive)
    (ps/org-link-get-thing-at-point 0))

  (defun ps/org-link-get-url-at-point ()
    "When point is on org link, extract url."
    (interactive)
    (ps/org-link-get-thing-at-point 1))

  (defun ps/org-link-get-description-at-point ()
    "When point is on org link, extract description."
    (interactive)
    (ps/org-link-get-thing-at-point 2))

  (defun ps/org-isearch-visible-org-heading ()
    "Jump to first visible org heading that matches string."
    (interactive)
    (widen)
    (let ((search-invisible nil)
          (isearchp-regexp-quote-yank-flag nil))
      (isearch-forward-regexp nil 1) ; isearch+
      (ps/isearch-yank-unquoted-string "^\*+ ")))

  ;; emacs.stackexchange.com/a/10714/32089
  (defun ps/org-remove-link ()
    "Replace an org link by its description or, if empty, its
address."
    (interactive)
    (if (org-in-regexp org-link-bracket-re 1)
        (save-excursion
          (let ((remove (list (match-beginning 0) (match-end 0)))
                (description
                 (if (match-end 2)
                     (org-match-string-no-properties 2)
                   (org-match-string-no-properties 1))))
            (apply 'delete-region remove)
            (insert description)))))

  (defun ps/org-insert-todo-subheading-after-body ()
    (interactive)
    (save-restriction
      (org-narrow-to-subtree)
      (outline-hide-subtree)
      (outline-show-entry)
      (goto-char (point-max))
      (org-beginning-of-line)
      (org-insert-todo-heading nil t)
      (org-do-demote)))

  ;; Adapted from hungyi.net/posts/org-mode-subtree-contents
  (defun ps/org-get-heading-contents ()
    "Get the content text of the heading at point and add it to the `kill-ring'.
Excludes the heading itself and any child subtrees."
    (if (org-before-first-heading-p)
        (message "Not in or on an org heading")
      (save-excursion
        ;; If inside heading contents, move the point back to the heading
        ;; otherwise `org-agenda-get-some-entry-text' won't work.
        (unless (org-at-heading-p) (org-previous-visible-heading 1))
        (let ((contents (substring-no-properties
                         (org-agenda-get-some-entry-text
                          (point-marker)
                          most-positive-fixnum))))
          contents))))

  (defun ps/org-copy-heading-contents ()
    (interactive)
    (let ((contents (ps/org-get-heading-contents)))
      (if (string= contents "")
          (message "Heading is empty.")
        (message "Copied heading")
        (kill-new contents))))

  (defun ps/org-copy-heading-name ()
    (interactive)
    "Copy name of heading at point."
    (kill-new (org-entry-get nil "ITEM")))

  ;; reddit.com/r/emacs/comments/e4jnlj/how_to_create_a_word_counter_that_counts_words_in/f9e3796
  (defun ps/org-count-words ()
    "If region is active, count words in it; otherwise count words
in current subtree."
    (interactive)
    (if (use-region-p)
        (funcall-interactively #'count-words-region (region-beginning) (region-end))
      (org-with-wide-buffer
       (cl-loop for (lines words characters)
                in (org-map-entries
                    (lambda ()
                      (unpackaged/org-forward-to-entry-content 'unsafe)
                      (let ((end (org-entry-end-position)))
                        (list (count-lines (point) end)
                              (count-words (point) end)
                              (- end (point)))))
                    nil 'tree)
                sum lines into total-lines
                sum words into total-words
                sum characters into total-characters
                finally return (let ((message (format "Subtree \"%s\" has %s lines, %s words, and %s characters."
                                                      (org-get-heading t t) total-lines total-words total-characters)))
                                 (kill-new (number-to-string total-words))
                                 (message message)
                                 message)))))

  (defun ps/org-jump-to-first-heading ()
    "Move point to the beginning of the first org heading in the
current buffer."
    (interactive)
    (widen)
    (goto-char (point-min))
    (org-next-visible-heading 1))

  (defun ps/org-super-return (&optional indent arg interactive)
    "When `org-return-follows-link' is non-nil and point is on a
link, call `org-open-at-point' and set
`browse-url-browser-function' to `eww-browse-url'"
    (interactive "P")
    (let ((browse-url-browser-function 'eww-browse-url)
          (browse-url-handlers nil))
      (org-open-at-point)))

  ;; currently not bound; consider deleting if unused
  (defun ps/backward-org-transpose-element ()
    "Transpose current and previous elements, keeping blank lines between.
Point is moved after both elements."
    (interactive)
    (org-skip-whitespace)
    (let ((end (org-element-property :end (org-element-at-point))))
      (org-drag-element-forward)
      (goto-char end)))

  (defun ps/org-clear-heading-contents (&optional include-children include-properties)
    "Remove contents in org heading at point."
    (interactive)
    (save-restriction
      (if include-children
          (ps/org-narrow-to-entry-and-children)
        (ps/org-narrow-to-entry-no-children))
      (org-back-to-heading)
      (if include-properties
          (forward-line)
        (org-end-of-meta-data t))
      (delete-region (point) (point-max))))

  (defun ps/org-paste-html ()
    "Take the contents of the system clipboard and use `pandoc' to
convert it to `org-mode' format."
    (interactive)
    (let* ((clipboard (if (eq system-type 'darwin)
                          "pbv public.html"
                        "xclip -out -selection 'clipboard' -t text/html"))
           (pandoc (concat "pandoc --wrap=none -f html -t org"))
           (cmd (concat clipboard " | " pandoc))
           (output (shell-command-to-string cmd))
           ;; Not sure why Pandoc adds these double slashes; we remove them
           (output (replace-regexp-in-string "^\\\\\\\\$" "" output))
           (text (replace-regexp-in-string "= " "= " output)))
      (kill-new text)
      (yank)))

  (defun ps/org-paste-image ()
    "Take the contents of the system clipboard and paste it as an
image."
    (interactive)
    (if (executable-find "pngpaste")
        (let* ((counter 1)
               (image-file (concat
                            ps/dir-org-images
                            (org-id-get nil 'create)
                            (format "-%d.png" counter))))
          (while (file-exists-p image-file)
            (setq counter (1+ counter))
            (setq image-file (concat
                              ps/dir-org-images
                              (org-id-get nil 'create)
                              (format "-%d.png" counter))))
          (call-process-shell-command (format "pngpaste '%s'" image-file))
          (let ((caption (read-string "Caption: ")))
            (unless (string= caption "")
              (insert (format "#+CAPTION: %s \n" caption))))
          (insert (format "[[file:%s]]" image-file))
          (org-display-inline-images)
          (message "You can toggle inline images with C-c C-x C-v"))
      (user-error "Requires pngpaste in PATH")))

  ;; The following functions produce a count of the TODOs added
  ;; or removed from all agenda files in the last day:
  ;; https://200ok.ch/posts/2022-12-06_how_much_did_you_get_done_today.html

  (defun ps/org-count-lines-with-expression (s exp)
    "Count the number of lines in the string S that contain the regular expression EXP."
    (let ((count 0))
      (mapc (lambda (line)
              (when (string-match-p exp line)
                (setq count (+ 1 count))))
            (split-string s "\n"))
      count))

  (defun ps/org-productivity-of-the-day ()
    (seq-reduce
     (lambda (acc it)
       (let* ((folder (file-name-directory it))
              (file (file-name-nondirectory it))
              (base-cmd (concat "cd "
                                folder
                                "; git log --since=midnight -p "
                                file
                                "| grep TODO"))
              (changed (shell-command-to-string base-cmd))
              (added (count-lines-with-expression changed "^\\+"))
              (removed (count-lines-with-expression changed "^\\-")))
         (cons (+ (car acc) added)
               (- (cdr acc) removed))))
     org-agenda-files
     '(0 . 0)))

  :general
  (org-mode-map
   "<S-left>" nil
   "<S-right>" nil
   "<S-up>" nil
   "<S-down>" nil
   "<M-left>" nil
   "<M-right>" nil
   "<M-S-left>" nil
   "<M-S-right>" nil
   "<M-up>" nil
   "<M-down>" nil
   "C-j" nil
   "<backtab>" 'org-shifttab
   "s-<return>" 'ps/org-super-return
   "C-k" nil
   "C-," nil
   "A-C-s-i" 'org-backward-sentence
   "A-C-s-o" 'org-forward-sentence
   "A-C-s-," 'org-backward-paragraph
   "A-C-s-." 'org-forward-paragraph ; org element?
   "A-C-s-m" 'org-beginning-of-line
   "A-C-s-z" 'org-end-of-line ; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
   "A-C-s-r" 'org-previous-visible-heading
   "A-C-s-f" 'org-next-visible-heading
   "A-C-s-M-m" 'org-previous-block
   "A-C-s-M-/" 'org-next-block
   "A-H-M-t" 'org-transpose-element
   "H-s-o" 'org-open-at-point
   "A-C-s-n" 'ps/org-jump-to-first-heading
   "s-A-b" 'ps/org-set-todo-properties
   "s-d" 'org-deadline
   "s-e" 'org-set-effort
   "s-f" 'org-insert-todo-subheading
   "s-A-f" 'ps/org-insert-todo-subheading-after-body
   "s-p" 'org-time-stamp-inactive
   "s-A-p" 'org-time-stamp
   "s-q" 'org-set-tags-command
   "s-A-s" 'org-schedule
   ;; "s-A-s" 'ps/org-isearch-visible-org-heading
   "s-t" 'org-todo
   "s-A-t" 'org-sort
   "s-v" 'ps/org-paste-html
   "s-A-v" 'ps/org-paste-image
   "s-y" 'org-evaluate-time-range
   "s-z" 'org-edit-special
   "s-A-z" 'ps/org-export-to-ea-wiki
   "s-," 'org-priority
   "A-<return>" "C-u M-<return>"
   "A-M-<return>" 'org-insert-todo-heading
   ;; bindings with matching commands in Fundamental mode
   "H-v" 'org-yank
   "M-w" 'ps/org-count-words)
  (org-agenda-mode-map
   "s-s" 'org-save-all-org-buffers)
  (telega-chat-mode-map
   "s-b" (lambda! (org-emphasize ?*))
   "s-i" (lambda! (org-emphasize ?/))
   "s-e" (lambda! (org-emphasize ?~))))
#+end_src

*** TODO [#4] Tweak ~ps/productivity-of-the-day~ function to compute value created
:PROPERTIES:
:ID:       1B86CB4D-D297-4C6D-99F7-49A80B7B0688
:END:

By considering both tasks completed and their associated priorities.

*** TODO [#4] Create function to compute the total number of TODOs and hours in effort estimates
:PROPERTIES:
:Effort:   2:00
:ID:       FCC486F6-7391-4EA3-9087-6BC3D5AB72B3
:END:

** org-agenda
:PROPERTIES:
:ID:       E03F4142-C90D-4550-8990-15391E27AD77
:END:
:LOGBOOK:
CLOCK: [2023-03-28 Tue 12:05]--[2023-03-28 Tue 12:12] =>  0:07
CLOCK: [2022-10-10 Mon 21:40]--[2022-10-11 Tue 00:16] =>  2:36
CLOCK: [2022-07-17 Sun 08:31]--[2022-07-17 Sun 08:54] =>  0:23
CLOCK: [2022-06-25 Sat 11:09]--[2022-06-25 Sat 11:36] =>  0:27
CLOCK: [2022-05-07 Sat 16:16]--[2022-05-07 Sat 17:18] =>  1:02
CLOCK: [2022-05-06 Fri 18:00]--[2022-05-06 Fri 18:12] =>  0:12
CLOCK: [2021-11-18 Thu 12:38]--[2021-11-18 Thu 12:46] =>  0:08
CLOCK: [2021-10-20 Wed 21:01]--[2021-10-20 Wed 21:04] =>  0:03
CLOCK: [2021-08-01 Sun 22:46]--[2021-08-01 Sun 23:25] =>  0:39
CLOCK: [2021-08-01 Sun 18:03]--[2021-08-01 Sun 18:16] =>  0:13
CLOCK: [2021-07-25 Sun 13:03]--[2021-07-25 Sun 13:04] =>  0:01
CLOCK: [2021-07-13 Tue 15:23]--[2021-07-13 Tue 15:27] =>  0:04
CLOCK: [2021-07-13 Tue 09:19]--[2021-07-13 Tue 09:27] =>  0:08
CLOCK: [2021-07-05 Mon 09:48]--[2021-07-05 Mon 11:27] =>  1:39
CLOCK: [2021-07-04 Sun 19:44]--[2021-07-04 Sun 19:54] =>  0:10
CLOCK: [2021-06-30 Wed 13:24]--[2021-06-30 Wed 14:24] =>  1:00
CLOCK: [2021-06-30 Wed 12:26]--[2021-06-30 Wed 13:16] =>  0:20
CLOCK: [2021-06-28 Mon 22:25]--[2021-06-28 Mon 22:58] =>  0:33
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-24 Sat 18:53]--[2021-04-24 Sat 18:55] =>  0:02
CLOCK: [2021-04-24 Sat 12:39]--[2021-04-24 Sat 12:47] =>  0:08
CLOCK: [2021-04-02 Fri 17:47]--[2021-04-02 Fri 17:50] =>  0:03
CLOCK: [2021-03-07 Sun 17:45]--[2021-03-07 Sun 17:56] =>  0:11
CLOCK: [2021-02-03 Wed 21:01]--[2021-02-03 Wed 21:07] =>  0:06
CLOCK: [2021-05-12 Wed 17:50]--[2021-05-12 Wed 18:04] =>  0:14
CLOCK: [2021-04-05 Mon 08:26]--[2021-04-05 Mon 08:34] =>  0:08
CLOCK: [2021-04-08 Thu 22:36]--[2021-04-08 Thu 22:36] =>  0:00
CLOCK: [2021-06-25 Fri 15:05]--[2021-06-25 Fri 15:08] =>  0:03
CLOCK: [2021-04-07 Wed 16:25]--[2021-04-07 Wed 16:41] =>  0:16
CLOCK: [2021-04-06 Tue 21:19]--[2021-04-06 Tue 21:31] =>  0:12
CLOCK: [2021-03-11 Thu 19:18]--[2021-03-11 Thu 19:27] =>  0:09
CLOCK: [2021-03-07 Sun 16:07]--[2021-03-07 Sun 16:41] =>  0:34
CLOCK: [2021-02-27 Sat 13:40]--[2021-02-27 Sat 13:59] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-agenda
  :after org
  :demand t
  :init
  (defun ps/org-agenda-switch-to-agenda-current-day ()
    "Open agenda in left window, creating it if necessary."
    (interactive)
    (ps/window-split-if-unsplit)
    (winum-select-window-1)
    (let ((agenda "*Org Agenda(a)*"))
      (if (get-buffer agenda)
          (switch-to-buffer agenda)
        (ps/org-agenda-toggle-anniversaries t)
        (org-agenda nil "a"))))

  (run-with-idle-timer (* 10 60) nil #'ps/org-agenda-switch-to-agenda-current-day)

  (setq org-agenda-hide-tags-regexp "project")

  (defun ps/org-agenda-goto-and-start-clock ()
    "In org-agenda, go to entry at point and clock in."
    (interactive)
    (org-agenda-goto)
    (org-clock-in))

  :config/el-patch
  ;; Replace native function with variant that doesn't ask the user
  ;; multiple times to remove non-existent agenda file
  (defun org-check-agenda-file (file)
    "Make sure FILE exists.  If not, ask user what to do."
    (el-patch-swap
      (unless (file-exists-p file)
        (message "Non-existent agenda file %s.  [R]emove from list or [A]bort?"
                 (abbreviate-file-name file))
        (let ((r (downcase (read-char-exclusive))))
          (cond
           ((equal r ?r)
            (org-remove-file file)
            (throw 'nextfile t))
           (t (user-error "Abort")))))
      (unless (file-exists-p file)
        (org-remove-file file)
        (throw 'nextfile t))))

  :config
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-use-time-grid nil)
  (setq org-agenda-ignore-properties '(effort appt category))
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-sticky t)
  (setq org-agenda-todo-ignore-with-date t)       ; exclude tasks with a date.
  (setq org-agenda-todo-ignore-scheduled 'future) ; exclude scheduled tasks.
  (setq org-agenda-restore-windows-after-quit t)  ; don't destroy window splits
  (setq org-agenda-span 1)                        ; show daily view by default
  (setq org-agenda-clock-consistency-checks       ; highlight gaps of five or more minutes in agenda log mode
        '(:max-duration "5:00" :min-duration "0:01" :max-gap 5 :gap-ok-around ("2:00")))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-log-mode-items '(clock))
  (quote (:link t :maxlevel 5 :fileskip0 t :narrow 70 :formula % :indent t :formatter ps/org-clocktable-sorter))
  (setq org-agenda-custom-commands
        '(
          ("E" "TODOs without effort"
           ((org-ql-block '(and (todo)
                                (not (property "effort")))
                          ((org-ql-block-header "TODOs without effort")))))
          ("w" "Weekly review"
           agenda ""
           ((org-agenda-clockreport-mode t)
            (org-agenda-archives-mode t)
            (org-agenda-start-day "-7d")
            (org-agenda-span 7)
            (org-agenda-start-on-weekday 0)))
          ("p" "Appointments" agenda* "Today's appointments"
           ((org-agenda-span 1)
            (org-agenda-max-entries 3)))
          ("r"
           "Reading list"
           tags
           "PRIORITY=\"1\"|PRIORITY=\"2\"|PRIORITY=\"3\"|PRIORITY=\"4\"|PRIORITY=\"5\"|PRIORITY=\"6\"|PRIORITY=\"7\"|PRIORITY=\"8\"|PRIORITY=\"9\""
           ((org-agenda-files (list ps/dir-bibliographic-notes))))
          ("g" "All TODOs"
           todo "TODO")
          ("," "All tasks with no priority"
           tags-todo "-PRIORITY=\"1\"-PRIORITY=\"2\"-PRIORITY=\"3\"-PRIORITY=\"4\"-PRIORITY=\"5\"-PRIORITY=\"6\"-PRIORITY=\"7\"-PRIORITY=\"8\"-PRIORITY=\"9\"")))
  ;; (setq org-agenda-clockreport-parameter-plist)
  (setq org-agenda-files (list ps/file-calendar))
  (setq ps/org-agenda-files-excluded (list
                                      ps/file-tlon-tareas-leo
                                      ps/file-tlon-tareas-fede))

  (defun ps/org-clocktable-sorter (ipos tables params)
    (setq tables (cl-sort tables (lambda (table1 table2) (> (nth 1 table1) (nth 1 table2)))))
    (funcall (or org-clock-clocktable-formatter 'org-clocktable-write-default) ipos tables params))

  (advice-add 'org-agenda-goto :after
              (lambda (&rest args)
                (ps/org-narrow-to-entry-and-children)))

  (setq org-agenda-archives-mode 'trees) ; this variable is non-customizable, so won't work in `:custom'

  (defun ps/org-agenda-done-and-next ()
    "Temporary command to address bug when setting status via
`org-agenda-todo'."
    (interactive)
    (org-agenda-goto)
    (org-todo "DONE")
    (ps/org-agenda-switch-to-agenda-current-day)
    (org-agenda-next-line))

  (defun ps/org-agenda-postpone-and-next ()
    "Postpone task at point by one day and move to next task."
    (interactive)
    (org-agenda-date-later 1)
    (org-agenda-next-line))

  (defun ps/org-unhighlight ()
    "Interactive version of `org-unhighlight'."
    (interactive)
    (org-unhighlight))

  (defun ps/org-agenda-switch-to-dwim ()
    "When point is in an agenda log line, goto to that line and
 position in the corresponding file. Else just open the file."
    (interactive)
    (condition-case error
        (call-interactively 'org-clock-convenience-goto-ts)
      (error (org-agenda-switch-to))))

  ;; We add these two advices because `org-modern-mode' interferes
  ;; with the display of the habits progress bar
  (advice-add 'org-habit-toggle-display-in-agenda :before
              (lambda (arg)
                (if org-habit-show-habits
                    (global-org-modern-mode)
                  (global-org-modern-mode -1))))
  (advice-add 'org-habit-toggle-display-in-agenda :after
              (lambda (arg)
                (org-agenda-redo)
                (global-org-modern-mode)))

  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (visual-line-mode -1)
                                    (toggle-truncate-lines)))

  ;; this comments out the line "%%(org-bbdb-anniversaries-future 1)"
  ;; in `calendar.org', which is the only way I found to hide
  ;; anniversaries temporarily from the agenda
  ;; for context, see https://orgmode.org/manual/Weekly_002fdaily-agenda.html
  (defun ps/org-agenda-toggle-anniversaries (&optional just-enable)
    "Toggle display of BBDB birthdays in the agenda."
    (interactive)
    (save-window-excursion
      (ps/org-id-goto "C84DFF77-7AEB-4BEC-B1E6-AECE4E174F62")
      (org-narrow-to-subtree)
      (goto-char (point-min))
      (org-end-of-meta-data t)
      (if (looking-at "%%")
          (unless just-enable
            (delete-line))
        (insert "%%(org-bbdb-anniversaries-future 1)
")))
    (unless just-enable
      (org-agenda-redo)))

  :general
  ("C-<escape>" 'org-agenda)
  (org-agenda-mode-map
   "RET" 'ps/org-agenda-switch-to-dwim
   "'" 'ps/org-agenda-done-and-next
   ";" 'org-agenda-later
   "\"" 'ps/org-agenda-postpone-and-next
   "C-b" 'org-agenda-tree-to-indirect-buffer
   "C-k" nil
   "b" 'ps/org-agenda-toggle-anniversaries
   "d" 'org-agenda-deadline
   "M-t" nil
   "H-n" nil
   "s-k" nil
   "i" 'org-agenda-clock-in
   "I" 'org-agenda-diary-entry
   "j" 'org-agenda-earlier
   "J" 'org-agenda-goto-date
   "k" 'org-agenda-previous-line
   "l" 'org-agenda-next-line
   "n" 'org-agenda-date-later
   "o" 'org-agenda-open-link
   "p" 'org-agenda-date-earlier
   "q" 'org-agenda-kill-all-agenda-buffers
   "s" 'org-agenda-schedule
   "SPC" 'ps/org-agenda-goto-and-start-clock
   "W" 'org-agenda-refile
   "X" 'org-agenda-exit
   "x" (lambda! (org-agenda-log-mode 'clockcheck))
   "y" 'org-agenda-day-view
   "z" 'org-agenda-undo))
#+end_src
*** TODO Configure org-agenda log checks
:PROPERTIES:
:ID:       9FE214C2-609D-4055-91A7-EB4EEAE26348
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 11:30]--[2023-03-18 Sat 11:55] =>  0:25
:END:

*** TODO [#6] align tags
:PROPERTIES:
:ID:       8F2D8B6E-2B3E-434E-9D60-5A1E23F8E4C1
:END:

*** TODO [#4] Find way to represent day agenda visually as a series of 30-minute blocks
:PROPERTIES:
:Effort:   0:40
:ID:       48717679-CF3D-475E-BCB6-87CAD939941F
:END:

Similar to Google Calendar.
*** SOMEDAY [#4] Show agenda task in different color if it recurs
:PROPERTIES:
:Effort:   0:45
:ID:       8ED37C79-AA82-4C08-BD01-335408F06DB7
:END:
:LOGBOOK:
CLOCK: [2021-06-16 Wed 17:37]--[2021-06-16 Wed 17:55] =>  0:18
:END:

To discover how to do this, use the ~customize~ command.

Posted a question to [[https://emacs.stackexchange.com/questions/66343/in-org-agenda-show-repeating-tasks-in-a-different-color][Stack Exchange]].

[2021-06-25 Fri 23:00] Since no one replied by now, it's unlikely anyone will reply anytime soon. Marking as SOMEDAY and removing scheduling.

** org-capture
:PROPERTIES:
:ID:       14F93A83-0BE7-42E3-891E-F6806192296B
:END:
:LOGBOOK:
CLOCK: [2023-05-10 Wed 07:50]--[2023-05-10 Wed 08:14] =>  0:24
CLOCK: [2022-06-13 Mon 14:45]--[2022-06-13 Mon 15:00] =>  0:15
CLOCK: [2022-06-11 Sat 13:40]--[2022-06-11 Sat 14:03] =>  0:23
CLOCK: [2022-06-11 Sat 13:19]--[2022-06-11 Sat 13:25] =>  0:06
CLOCK: [2022-06-03 Fri 15:31]--[2022-06-03 Fri 15:51] =>  0:20
CLOCK: [2022-05-28 Sat 17:00]--[2022-05-28 Sat 18:42] =>  1:42
CLOCK: [2022-04-29 Fri 19:46]--[2022-04-29 Fri 20:27] =>  0:41
CLOCK: [2022-04-29 Fri 18:14]--[2022-04-29 Fri 18:24] =>  0:10
CLOCK: [2021-12-03 Fri 19:43]--[2021-12-03 Fri 19:50] =>  0:07
CLOCK: [2021-11-18 Thu 18:28]--[2021-11-18 Thu 18:45] =>  0:17
CLOCK: [2021-08-23 Mon 11:19]--[2021-08-23 Mon 11:22] =>  0:03
CLOCK: [2021-08-20 Fri 14:15]--[2021-08-20 Fri 14:18] =>  0:03
CLOCK: [2021-08-19 Thu 11:04]--[2021-08-19 Thu 11:12] =>  0:08
CLOCK: [2021-08-17 Tue 15:13]--[2021-08-17 Tue 15:36] =>  0:23
CLOCK: [2021-08-17 Tue 14:11]--[2021-08-17 Tue 14:41] =>  0:30
CLOCK: [2021-08-13 Fri 09:09]--[2021-08-13 Fri 09:30] =>  0:21
CLOCK: [2021-07-09 Fri 11:00]--[2021-07-09 Fri 11:10] =>  0:10
CLOCK: [2021-07-09 Fri 10:32]--[2021-07-09 Fri 10:37] =>  0:05
CLOCK: [2021-06-25 Fri 17:37]--[2021-06-25 Fri 17:54] =>  0:17
CLOCK: [2021-06-07 Mon 19:14]--[2021-06-07 Mon 19:20] =>  0:06
CLOCK: [2021-05-22 Sat 18:48]--[2021-05-22 Sat 19:15] =>  0:27
CLOCK: [2021-05-05 Wed 16:03]--[2021-05-05 Wed 16:07] =>  0:04
CLOCK: [2021-04-23 Fri 22:04]--[2021-04-23 Fri 22:32] =>  0:28
CLOCK: [2021-04-12 Mon 22:01]--[2021-04-12 Mon 22:11] =>  0:10
CLOCK: [2021-04-11 Sun 16:27]--[2021-04-11 Sun 17:05] =>  0:38
CLOCK: [2021-04-02 Fri 08:30]--[2021-04-02 Fri 09:00] =>  0:30
CLOCK: [2021-03-28 Sun 18:20]--[2021-03-28 Sun 18:27] =>  0:07
CLOCK: [2021-03-28 Sun 18:18]--[2021-03-28 Sun 18:19] =>  0:01
CLOCK: [2021-03-06 Sat 20:36]--[2021-03-06 Sat 20:46] =>  0:10
CLOCK: [2021-03-02 Tue 12:39]--[2021-03-02 Tue 12:48] =>  0:09
CLOCK: [2021-03-01 Mon 10:46]--[2021-03-01 Mon 10:50] =>  0:09
CLOCK: [2021-02-27 Sat 08:20]--[2021-02-27 Sat 08:26] =>  0:06
CLOCK: [2021-02-21 Sun 19:14]--[2021-02-21 Sun 20:04] =>  0:50
CLOCK: [2021-02-19 Fri 11:11]--[2021-02-19 Fri 11:21] =>  0:10
CLOCK: [2021-02-09 Tue 09:37]--[2021-02-09 Tue 09:42] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-capture
  :after org
  :demand t
  :config
  (setq org-default-notes-file ps/file-inbox-desktop)
  (setq org-capture-templates
        `(("." "Todo" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO %?\n" :empty-lines 1)
          ("c" "Calendar" entry
           (file ps/file-calendar)
           "* TODO %^ \nDEADLINE: %^T" :empty-lines 1 :immediate-finish t)
          ;; djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html
          ("e" "Email" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up with %:fromname on %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("g" "GPT-4" entry
           (id "FDF39DE4-293F-47B5-9D6D-AA4D68F99CF5")
           "*** %?\n\n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("n" "Telegram" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up with %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("r" "Bibliography reference" plain
           (file ,ps/file-orb-noter-template)
           ;; :if-new
           ;; (file ,ps/file-orb-capture-template)
           :unnarrowed t :immediate-finish t)
          ("s" "Slack" entry
           (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
           "** TODO Follow up %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
          ("t" "Tlön")
          ("tb" "Tlön: BAE")
          ("tbb" "Tlön: BAE: Generic " entry
           (id "4424AA7E-C2F9-4228-97F9-38088056A5CD")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tbi" "Tlön: BAE: Import " entry
           (id "5F0A62AA-1B81-4671-96FA-8C4FED82155F")
           "** TODO [#6] Import '%?' \n%c" :empty-lines 1 :prepend t)
          ("tbl" "Tlön: BAE: Process Leo's revisions " entry
           (id "641485F9-C3B6-4082-8F69-9162DCC3DEB9")
           "** TODO [#6] Process Leo's revisions of '%c%?' \n" :empty-lines 1 :prepend t)
          ("tbt" "Tlön: BAE: Translate article " entry
           (id "584BF0CB-8838-44C4-843C-78A36DE54CD6")
           "** TODO [#5] Translate '%?' \n" :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbP" "Tlön: BAE: Process topic (via org-capture)" entry
           (id "46DC965C-94D6-461A-876A-1B6D9771CA2C")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbU" "Tlön: BAE: Publish topic (via org-capture)" entry
           (id "925A7132-BB1B-4CF4-8F33-34AF4B5AFFC1")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbV" "Tlön: BAE: Review topic (via org-capture)" entry
           (id "69E46758-75EE-488F-BE88-2E897FAAEF5C")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbR" "Tlön: BAE: Revise topic (via org-capture)" entry
           (id "87996ABF-D31A-414E-81B8-604454533DB1")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbW" "Tlön: BAE: Rewrite topic (via org-capture)" entry
           (id "F3EEE431-358D-4A72-A2B9-52E7AD50FBE7")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbT" "Tlön: BAE: Translate topic (via org-capture)" entry
           (id "584BF0CB-8838-44C4-843C-78A36DE54CD6")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbI" "Tlön: BAE: Import topic (via org-capture)" entry
           (id "5F0A62AA-1B81-4671-96FA-8C4FED82155F")
           "** TODO [#5] %c" :immediate-finish t :empty-lines 1 :prepend t :jump-to-captured t)
          ("tbM" "Tlön: BAE: Misc [via org-capture] Misc" entry
           (id "4424AA7E-C2F9-4228-97F9-38088056A5CD")
           "** TODO [#5] %a\n" :empty-lines 1 :prepend t  :immediate-finish t)
          ("tbA" "Tlön: BAE: [via email] Revise article translation and Leo's revision" entry
           (id "641485F9-C3B6-4082-8F69-9162DCC3DEB9")
           "** TODO [#5] %a\n" :empty-lines 1 :prepend t  :immediate-finish t)
          ("tbG" "Tlön: BAE: [via email] Respond to Glossary comment" entry
           (id "91D521B8-454A-42D7-A8E1-5B8B8B30B6A7")
           "** TODO [#5] %a\n" :empty-lines 1 :prepend t  :immediate-finish t)
          ("tbW" "Tlön: BAE: [via email] Revise Leo's Wiki entry translation" entry
           (id "87996ABF-D31A-414E-81B8-604454533DB1")
           "** TODO [#5] %a\n" :empty-lines 1 :prepend t :immediate-finish t)
          ("tbr" "Tlön: BAE: Revise translation " entry
           (id "641485F9-C3B6-4082-8F69-9162DCC3DEB9")
           "** TODO [#6] Revise '%c%?' translation \n" :empty-lines 1 :prepend t)
          ("ti" "Tlön: EAI")
          ("tii" "Tlön: EAI: Generic " entry
           (id "6C7F53ED-B43E-401D-BEEA-DB38CAE367FD")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tn" "Tlön: EAN")
          ("tnn" "Tlön: EAN: Generic " entry
           (id "B4B9E95A-ABE1-4121-AE0B-E920E6917CBC")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tm" "Tlön: FM")
          ("tmm" "Tlön: FM: Generic " entry
           (id "9066D77E-7F2B-4176-9533-243060F11276")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tmt" "Tlön: FM: Post to Twitter" entry
           (id "244D8486-9F36-4AC5-A185-8FE77C7ED7A7")
           "** TODO [#6] %s" :empty-lines 1 :prepend t)
          ("tmr" "Tlön: FM: Review transcript of conversation" entry
           (id "9066D77E-7F2B-4176-9533-243060F11276")
           "** TODO [#5] Review transcript of conversation with %? \n" :empty-lines 1 :prepend t)
          ("tg" "Tlön: GPE")
          ("tgg" "Tlön: GPE: Generic " entry
           (id "022CAD09-9F99-4812-BAA3-F52BCF95ACC6")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t :immediate-finish t)
          ("th" "Tlön: HEAR")
          ("thh" "Tlön: HEAR: Generic " entry
           (id "1BBBA5F1-11FA-4C7B-8D08-5DC84233B8E2")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("td" "Tlön: LBDLH")
          ("tdd" "Tlön: LBDLH: Generic " entry
           (id "CE8A5497-1BF9-4340-9853-5ADA4605ECB5")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tp" "Tlön: LP")
          ("tpp" "Tlön: LP: Generic " entry
           (id "2514AA39-CFBF-4E5A-B18E-147497E31C8F")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tr" "Tlön: RAE")
          ("trr" "Tlön: RAE: Generic " entry
           (id "15A1803F-EAA7-4FB9-BA77-74154EB8CA5D")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("trn" "Tlön: RAE: Interacting with narrators " entry
           (id "D90B718C-6933-47AC-9B15-F95C2A2E1FD5")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tt" "Tlön: Core")
          ("ttt" "Tlön: Core: Generic " entry
           (id "77A450DE-5867-423E-A251-7E92BF1617FC")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tte" "Tlön: Core: Emacs")
          ("ttee" "Tlön: Core: Emacs: Generic " entry
           (id "91CEC8F0-F690-4318-B63B-040D6B98A6E2")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tcc" "Tlön: Core: Comms")
          ("tccc" "Tlön: Core: Comms: Generic " entry
           (id "7E56628D-8FBA-4A58-BFCA-14A6F7FAC3BA")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("ttf" "Tlön: Core: Finance")
          ("ttff" "Tlön: Core: Finance: Generic " entry
           (id "21E0FE78-C45B-4E6E-9447-56375111BAEA")
           "** TODO [#6] %? \n" :empty-lines 1 :prepend t)
          ("tf" "Tlön: Fede")
          ("tff" "Tlön: Fede: generic task" entry
           (file+headline ps/file-tlon-tareas-fede "Tareas Fede")
           "** TODO [#6] %? :fede:\n" :empty-lines 1 :prepend t)
          ("tfp" "Tlön: Fede: Pending for next meeting" plain
           (id "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1")
           "" :empty-lines 1 :empty-lines-after 3)
          ("tfr" "Tlön: Fede: RAE")
          ("tfrs" "Tlön: Fede: RAE suggestion" entry
           (file+headline ps/file-tlon-tareas-fede "sugerencias de Pablo")
           "** TODO [#6] %? :fede:\n" :empty-lines 1 :prepend t)
          ("tl" "Tlön: Leo")
          ("tll" "Tlön: Leo: Generic task" entry
           (file+headline ps/file-tlon-tareas-leo "Tareas Leo")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlb" "Tlön: Leo: BAE")
          ("tlba" "Tlön: Leo: BAE: Add to translations Airtable" entry
           (id "49adbb3e-b542-4752-a67b-16bc2eb44624")
           "** TODO [#5] Add to translations Airtable :leo:\n%c" :empty-lines 1 :prepend t)
          ("tlbb" "Tlön: Leo: BAE: Generic BAE task" entry
           (id "49adbb3e-b542-4752-a67b-16bc2eb44624")
           "** TODO [#5] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tli" "Tlön: Leo: EAI")
          ("tlii" "Tlön: Leo: EAI: Generic EAI task" entry
           (id "698743B9-B754-4061-89BD-6E49F3B64DE2")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tln" "Tlön: Leo: EAN")
          ("tlna" "Tlön: Leo: EAN: Add to ea.news" entry
           (id "8b9c313a-3630-4b77-b924-a8f7f9e52d8d")
           "** TODO [#6] Agregar a ea.news :leo:\n%c" :empty-lines 1 :prepend t)
          ("tlnn" "Tlön: Leo: EAN: Generic EAN" entry
           (id "8b9c313a-3630-4b77-b924-a8f7f9e52d8d")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlnu" "Tlön: Leo: EAN: Update ea.news" entry
           (id "8b9c313a-3630-4b77-b924-a8f7f9e52d8d")
           "** TODO [#7] Actualizar feed/link de ea.news :leo:\n%?\n%c" :empty-lines 1 :prepend t)
          ("tlm" "Tlön: Leo: FM")
          ("tlmm" "Tlön: Leo: FM: Generic FM task" entry
           (id "5d94a97f-701f-4d0d-94ad-ff1b88bf0e82")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlmn" "Tlön: Leo: FM: Add to Future Matters: news" entry
           (id "5d94a97f-701f-4d0d-94ad-ff1b88bf0e82")
           "** TODO [#4] Future Matters: news :leo:\n%c\n[[https://docs.google.com/document/d/1Mq7f0sn6Ps1IIA71dTu0MCgz8cdn81zQ9_zHyZUn7aQ/edit][Checklist]]" :empty-lines 1 :prepend t)
          ("tlmr" "Tlön: Leo: FM: Add to Future Matters: research" entry
           (id "5d94a97f-701f-4d0d-94ad-ff1b88bf0e82")
           "** TODO [#4] Future Matters: research :leo:\n%c\n[[https://docs.google.com/document/d/1Mq7f0sn6Ps1IIA71dTu0MCgz8cdn81zQ9_zHyZUn7aQ/edit][Checklist]]" :empty-lines 1 :prepend t)
          ("tlg" "Tlön: Leo: GPE")
          ("tlgg" "Tlön: Leo: GPE: Generic GPE task" entry
           (id "e9b7041f-8721-495f-b5f7-97ad83ae061c")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlh" "Tlön: Leo: HEAR")
          ("tlhh" "Tlön: Leo: HEAR: Generic HEAR task" entry
           (id "f3f14f2f-2b74-4ea7-a84f-4d9aae458201")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tld" "Tlön: Leo: LBDLH")
          ("tldd" "Tlön: Leo: LBDLH: Generic LBDLH task" entry
           (id "0d6d7ebb-bb51-4505-9a29-68b79f8c12de")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlw" "Tlön: Leo: PW")
          ("tlww" "Tlön: Leo: PW: Generic PW task" entry
           (id "12645897-A06F-44DD-876D-0FFC47D0E742")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlr" "Tlön: Leo: RAE")
          ("tlrl" "Tlön: Leo: RAE: Add to lexicon" entry
           (id "604dbb4c-4948-492e-b1cd-84b0a1451b4a")
           "** TODO [#6] Agregar al lexicon de Azure :leo:\n%?" :empty-lines 1 :prepend t)
          ("tlrr" "Tlön: Leo: RAE: Generic RAE task" entry
           (id "604dbb4c-4948-492e-b1cd-84b0a1451b4a")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlc" "Tlön: Leo: Core")
          ("tlcc" "Tlön: Leo: Generic Core task" entry
           (id "68f0150e-9b0d-4bab-86c0-2bf878e19d9e")
           "** TODO [#6] %? :leo:\n" :empty-lines 1 :prepend t)
          ("tlx" "Tlön: Leo: Meetings" entry
           (id "51610BEB-7583-4C84-8FC2-A3B28CA79FAB")
           "** %(ps/org-time-stamp-inactive-current-time)\n%?")
          ("tlp" "Tlön: Leo: Pending for next meeting" plain
           (id "8B2F18B4-A309-4F29-A5E6-CD40E010970D")
           "" :empty-lines 1 :empty-lines-after 3)
          ("tlg" "Tlön: Leo: Telegram" entry
           (file+headline ps/file-tlon-tareas-leo "Tareas Leo")
           "** TODO [#6] [via Telegram] %? \n%a\n%c'" :empty-lines 1 :prepend t)
          ;; ("n" "Day reflection" plain (function org-journal-find-location)
          ;; "** %(format-time-string org-journal-time-format)Day reflection\n%i%?")
          ;; ("j" "Pomodoro" plain (function org-journal-find-location)
          ;; "** %(format-time-string org-journal-time-format)Pomodoro\n%i%?")
          ;; ("v" "Entry: revise" entry
          ;; (function
          ;; (lambda ()
          ;; (let ((filename (file-name-concat ps/dir-wiki-entries (current-kill 0))))
          ;; (set-buffer (find-file-noselect filename))
          ;; (pop kill-ring)
          ;; (goto-char (point-max)))))
          ;; "* TODO Revise entry \nSCHEDULED: %(org-insert-time-stamp nil nil nil nil nil \" .+1d\")")
          ("y" "YouTube playlist" entry
           (id "319B1611-A5A6-42C8-923F-884A354333F9")
           "* %(ps/org-web-tools--youtube-dl (current-kill 0))\n[[%c][YouTube link]]" :empty-lines 1 :prepend t :immediate-finish t)
          ;; github.com/alphapapa/org-protocol-capture-html#org-capture-template
          ("w" "Web site" entry
           (file ps/file-downloadsk)
           "* %a :website:\n\n%U %?\n\n%:initial")))
  ;; ("w" "Film watchlist" entry
  ;; (id "E821F19E-C619-4895-A084-54D0A2772BAE")
  ;; "** %?\n" :empty-lines 1 :prepend t)))
  ;; ("W" "Weekly review" plain (function org-journal-find-location)
  ;; "** %(format-time-string org-journal-time-format)Weekly review\n*** Mistakes made\n%?\n*** Lessons learned\n")
  ;; ("z" "mailnote" entry
  ;; (id "0D266C71-41B8-4E14-836E-AABE2654E942")
  ;; "** From: %:from Subject: %:subject\n %a" :kill-buffer t)
  ;; ("p" "Pomodoro entry" plain (function org-journal-find-location)
  ;; "** %(format-time-string org-journal-time-format)Pomodoro\n%i%?")

  (defun ps/org-capture-hydra-notes-hook ()
    (when (string= (org-capture-get :key t) "p")
      (hydra-org-notes-only-clock/body)))

  (defun ps/org-capture-before-finalize-hook-function ()
    "Define behavior of `org-capture-before-finalize-hook'."
    (pcase (plist-get org-capture-plist :key)
      ("g"
       (org-ai-mode)
       (org-narrow-to-subtree)
       (forward-line)
       (forward-line)
       (ps/yasnippet-expand-by-key "ai")
       (message "finished"))
      ("l"
       (org-align-all-tags)
       (ispell-change-dictionary "english"))
      ("la"
       (save-window-excursion
         (ps/switch-to-alternate-buffer)
         (ps/org-jump-to-first-heading)
         (widen)
         (org-narrow-to-subtree)
         (let ((org-use-tag-inheritance))
           (org-roam-tag-remove '("unprocessed" "empty" "leo" "unpublished"))
           (org-roam-tag-add '("leo")))
         (ps/show-buffer-name))
       (goto-char 0)
       (search-forward "Procesar ")
       (insert (format "~%s~" (current-kill 0))))
      ("le"
       (save-window-excursion
         (ps/switch-to-alternate-buffer)
         (ps/show-buffer-name))
       (goto-char 0)
       (search-forward "Renombrar ")
       (insert (concat "~" (current-kill 0) "~ ")))
      ;; Add link to open Slack message externally.
      ("s"
       (org-narrow-to-subtree)
       (let ((url (s-replace-regexp
                   "emacs-slack:[_[:digit:][:alnum:]]\\{11\\}&\\([_[:digit:][:alnum:]]\\{11\\}\\)&ts:\\([[:digit:]]\\{10\\}\\)\\.\\([[:digit:]]\\{6\\}\\)"
                   "https://samotsvety.slack.com/archives/\\1/p\\2\\3"
                   (plist-get org-store-link-plist :link))))
         (goto-char (point-max))
         (insert (format "[[%s][external link]]" url))))
      ("tmt"
       (org-web-tools-insert-link-for-url (current-kill 0)))
      ("v"
       (org-do-demote))
      ("y"
       (youtube-dl (current-kill 0) :directory ps/dir-downloads :destination (org-hugo-slug (ps/org-web-tools--org-title-for-url))))))

  (add-hook 'org-capture-mode-hook #'ps/org-capture-hydra-notes-hook)
  (add-hook 'org-capture-before-finalize-hook #'ps/org-capture-before-finalize-hook-function)
  (add-hook 'org-capture-before-prepare-hook #'ps/org-capture-prepare-finalize-hook-function)

  :general
  ("H-t" 'org-capture
   "H-T" 'org-capture-goto-last-stored)
  (org-capture-mode-map
   "s-c" 'org-capture-finalize
   "s-w" 'org-capture-refile))
#+end_src

Links to check out:
- [[https://github.com/sprig/org-capture-extension][GitHub - sprig/org-capture-extension: A Chrome and firefox extension facilita...]]
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][Share your Org Capture Templates! : emacs]]
- [[https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el][Org capture templates · sk8ingdom/.emacs.d · GitHub]]
- [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/][Hey Org-Mode Users, show us your org capture templates : orgmode]]. [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/gzq9h2v/?utm_source=reddit&utm_medium=web2x&context=3][this one]] has templates for capturing appointments directly to Google Calendar via org-gcal. [I've now incorporated it]
- [[https://orgmode.org/worg/org-contrib/org-collector.html][org-collector.el &#x2014; collect properties into tables]]
- potentially useful capture templates:
  - [[https://helpdeskheadesk.net/sub-menus-in-org/][Submenus in org-mode Capture · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-in-files/][Org-capture in Files · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-1/][My Org Capture Templates - Part 1 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-2/][My Org Capture Templates - Part 2 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-3/][My Org Capture Templates - Part 3 emacs:css: · The Art of Not Asking Why]]

** org-clock
:PROPERTIES:
:ID:       90E8B1CE-433C-4B2B-8AA2-844506EAC031
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:30]--[2023-03-18 Sat 12:32] =>  0:02
CLOCK: [2023-03-18 Sat 11:55]--[2023-03-18 Sat 12:30] =>  0:35
CLOCK: [2023-02-22 Wed 15:58]--[2023-02-22 Wed 16:03] =>  0:05
CLOCK: [2023-02-22 Wed 15:07]--[2023-02-22 Wed 15:28] =>  0:21
CLOCK: [2023-02-22 Wed 14:41]--[2023-02-22 Wed 15:06] =>  0:25
CLOCK: [2023-02-21 Tue 23:25]--[2023-02-21 Tue 23:46] =>  0:21
CLOCK: [2022-07-06 Wed 20:26]--[2022-07-06 Wed 21:10] =>  0:44
CLOCK: [2022-06-19 Sun 10:16]--[2022-06-19 Sun 10:53] =>  0:37
CLOCK: [2022-06-13 Mon 22:33]--[2022-06-13 Mon 23:03] =>  0:30
CLOCK: [2022-03-02 Wed 18:19]--[2022-03-02 Wed 18:21] =>  0:02
CLOCK: [2021-10-24 Sun 10:55]--[2021-10-24 Sun 11:09] =>  0:14
CLOCK: [2021-08-01 Sun 18:16]--[2021-08-01 Sun 18:53] =>  0:37
CLOCK: [2021-06-23 Wed 15:48]--[2021-06-23 Wed 16:18] =>  0:30
CLOCK: [2021-06-04 Fri 21:53]--[2021-06-04 Fri 22:05] =>  0:12
CLOCK: [2021-06-04 Fri 20:53]--[2021-06-04 Fri 21:14] =>  0:21
CLOCK: [2021-05-10 Mon 22:11]--[2021-05-10 Mon 22:28] =>  0:00
CLOCK: [2021-05-02 Sun 22:09]--[2021-05-02 Sun 22:22] =>  0:13
CLOCK: [2021-04-14 Wed 18:26]--[2021-04-14 Wed 18:50] =>  0:24
CLOCK: [2021-03-29 Mon 20:57]--[2021-03-29 Mon 21:13] =>  0:16
CLOCK: [2021-03-28 Sun 20:32]--[2021-03-28 Sun 21:01] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-clock
  :after org
  :defer 20
  :config/el-patch
  ;; replace `org-files-list' with `org-agenda-files' so that
  ;; extraneous files are excluded from the dangling clocks check.
  (defun org-resolve-clocks (&optional only-dangling-p prompt-fn last-valid)
    "Resolve all currently open Org clocks.
If `only-dangling-p' is non-nil, only ask to resolve dangling
\(i.e., not currently open and valid) clocks."
    (interactive "P")
    (unless org-clock-resolving-clocks
      (let ((org-clock-resolving-clocks t))
        (dolist (file (el-patch-swap
                        (org-files-list)
                        (org-agenda-files)))
          (let ((clocks (org-find-open-clocks file)))
            (dolist (clock clocks)
              (let ((dangling (or (not (org-clock-is-active))
                                  (/= (car clock) org-clock-marker))))
                (if (or (not only-dangling-p) dangling)
                    (org-clock-resolve
                     clock
                     (or prompt-fn
                         (lambda (clock)
                           (format
                            "Dangling clock started %d mins ago"
                            (floor (org-time-convert-to-integer
                                    (time-since (cdr clock)))
                                   60))))
                     (or last-valid
                         (cdr clock)))))))))))
  :config
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-in-resume t)
  (setq org-clock-report-include-clocking-task t)
  (setq org-clock-ask-before-exiting nil)
  (setq org-clock-history-length 30)
  (org-clock-persistence-insinuate)

  (defun ps/org-new-clock-entry-today (begin end)
    "Insert a new clock entry with today's date, prompting for times."
    (interactive "sTime begins: \nsTime ends: ")
    (ps/org-jump-to-latest-clock-entry)
    (crux-smart-open-line-above)
    (let ((today (format-time-string "%Y-%m-%d %a" (current-time))))
      (insert "CLOCK: [%s %s]--[%s %s]" today begin today end))
    (org-evaluate-time-range))

  (defun ps/org-time-stamp-active-current-time ()
    "Insert an active timestamp with the current date and time."
    (interactive)
    (org-time-stamp '(16)))

  (defun ps/org-time-stamp-inactive-current-time ()
    "Insert an inactive timestamp with the current date and time."
    (interactive)
    (org-time-stamp '(16) t))

  (defun ps/org-time-stamp-active-current-date ()
    "Insert an active timestamp with the current date."
    (interactive)
    (org-insert-time-stamp (current-time) nil))

  (defun ps/org-time-stamp-inactive-current-date ()
    "Insert an inactive timestamp with the current date."
    (interactive)
    (org-insert-time-stamp (current-time) nil t))

  (defun ps/org-jump-to-latest-clock-entry ()
    "Jump to most recent clock entry for org heading at point."
    (interactive)
    (visible-mode)
    (ps/org-show-logbook)
    (org-back-to-heading)
    (re-search-forward "CLOCK: \\[\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}\\) \\([A-Za-z]\\{3\\}\\) \\([0-9]\\{2\\}:\\)" nil t))

  (defun ps/org-clock-report (start-date end-date)
    "Generate an org clock report for the period between START-DATE and END-DATE."
    (interactive
     (list (org-read-date nil nil nil "Start date: ")
           (org-read-date nil nil nil "End date: ")))
    (insert (format "#+BEGIN: clocktable :scope subtree :maxlevel 4 :narrow 50 :tstart \"%s\" :tend \"%s\"\n#+END:" start-date end-date))
    (org-clock-report))

  :general
  ("A-H-j" 'org-clock-goto
   "A-H-x" 'org-clock-cancel
   "H-i" 'org-clock-in
   "H-o" 'org-clock-out)
  (org-mode-map
   "s-A-n" 'ps/org-new-clock-entry-today
   "s--" 'ps/org-time-stamp-active-current-time
   "s-A--" 'ps/org-time-stamp-active-current-date
   "s-=" 'ps/org-time-stamp-inactive-current-time
   "s-A-=" 'ps/org-time-stamp-inactive-current-date))
#+end_src

** org-clock-convenience
:PROPERTIES:
:ID:       1DB11C80-DE47-42EA-851A-4D35398C1005
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 13:14]--[2023-03-18 Sat 13:27] =>  0:13
:END:

/[[https://github.com/dfeich/org-clock-convenience][org-clock-convenience]] provides convenience functions to work with org-mode clocking./

#+begin_src emacs-lisp
(use-package org-clock-convenience
  :after org-clock
  :demand t
  :general
  (org-agenda-mode-map
   "M-k" 'org-clock-convenience-timestamp-up
   "M-l" 'org-clock-convenience-timestamp-down))
#+end_src

** org-clock-split
:PROPERTIES:
:ID:       594F8AE4-9AE7-4D7D-A504-E75C5139BB5D
:END:

/[[https://github.com/justintaft/org-clock-split][org-clock-split]] allows splitting of one clock entry into two contiguous entries./

#+begin_src emacs-lisp
(use-package org-clock-split
  :after org-clock
  :demand t
  :config/el-patch
  ;; the function has to be slightly modified to make it work
  (defun org-clock-split
      (from-end splitter-string)
    "Split CLOCK entry under cursor into two entries.\nTotal time of created entries will be the same as original entry.\n\n   WARNING: Negative time entries can be created if splitting at an offset\nlonger then the CLOCK entry's total time.\n\n   FROM-END: nil if the function should split with duration from\n   the start of the clock segment (default for backwards\n   compatibility), t if the function should split counting from\n   the end of the clock segment.\n \n   SPLITTER-STRING: Time offset to split record at.  Examples: '1h', '01m', '68m1h', '9:20'."
    (interactive "P\nsTime offset to split clock entry (ex 1h2m): ")
    (move-beginning-of-line nil)
    (let
        ((original-line
          (buffer-substring
           (line-beginning-position)
           (line-beginning-position 2))))
      (unless
          (string-match org-clock-split-clock-range-regexp original-line)
        (error "Cursor must be placed on line with valid CLOCK entry range"))
      (let*
          ((whitespace
            (match-string 1 original-line))
           (timestamps
            (org-clock-split-split-line-into-timestamps original-line splitter-string from-end))
           (t0
            (pop timestamps))
           (t1 (el-patch-swap
                 (pop timestamps)
                 (concat "[" (pop timestamps) "]")))
           (t2
            (pop timestamps)))
        (delete-region
         (line-beginning-position)
         (line-end-position))
        (insert
         (format org-clock-split-clock-range-format whitespace t0 t1))
        (org-ctrl-c-ctrl-c)
        (move-beginning-of-line nil)
        (newline)
        (previous-line)
        (insert
         (format org-clock-split-clock-range-format whitespace t1 t2))
        (org-ctrl-c-ctrl-c)
        (move-beginning-of-line nil))))

  :general
  (org-mode-map
   "s-u" 'org-clock-split))
#+end_src

** org-cycle
:PROPERTIES:
:ID:       AAB14053-B232-4627-8C1D-635FAE417A98
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-cycle
  :after org
  :demand t
  :config
  (setq org-cycle-emulate-tab nil) ; TAB always cycles, even if point not on a heading

  (defun ps/org-cycle-global (&optional arg)
    "Cycle the global visibility, hiding archived subtrees."
    (interactive)
    (org-cycle-global arg)
    (org-cycle-hide-archived-subtrees 'all)))
#+end_src


[2022-10-04 Tue 19:05] The function below was taken from [[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode/17492723#17492723][here]] but isn't working as intended. It only completely hides the drawers when the heading at point has children. Moreover, it also completely expands the drawers when cycling globally, which is not the normal behavior.

#+begin_src emacs-lisp :results silent :tangle no
  (defun ps/org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change. STATE should be one of the symbols listed in the docstring of `org-cycle-hook'."
    (when (and (derived-mode-p 'org-mode)
               (not (memq state '(overview folded contents))))
      (save-excursion
        (let* ((globalp (memq state '(contents all)))
               (beg (if globalp
                        (point-min)
                      (point)))
               (end (if globalp
                        (point-max)
                      (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                        (org-end-of-subtree t)))))
          (goto-char beg)
          (while (re-search-forward org-drawer-regexp end t)
            (save-excursion
              (beginning-of-line 1)
              (when (looking-at org-drawer-regexp)
                (let* ((start (1- (match-beginning 0)))
                       (limit
                        (save-excursion
                          (outline-next-heading)
                          (point)))
                       (msg (format
                             (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                             (1+ start))))
                  (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                    (user-error msg))))))))))
#+end_src

** org-archive
:PROPERTIES:
:ID:       354B22B6-B3BD-409D-B04F-051D4AD87959
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 12:12]--[2021-07-22 Thu 12:23] =>  0:11
CLOCK: [2021-04-24 Sat 13:10]--[2021-04-24 Sat 13:14] =>  0:04
CLOCK: [2021-03-11 Thu 09:41]--[2021-03-11 Thu 10:00] =>  0:19
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-archive
  :after org
  :demand t
  :config
  (setq org-archive-default-command 'org-archive-to-archive-sibling)
  (setq org-archive-location (expand-file-name "%s_archive.org::" ps/dir-archive))

  :general
  ("A-s-d" 'ps/org-mark-as-done-for-good-and-archive)
  (org-mode-map
   "s-a" 'org-archive-to-archive-sibling))
#+end_src

*** TODO Align org-archive tags
:PROPERTIES:
:ID:       568D63EF-8C13-41CE-939A-AE996F6D13F9
:END:

*** TODO [#6] Process archives ~org/archive~
:PROPERTIES:
:ID:       855BC5BD-2A50-4DB8-BD91-4E0F6ECD50D6
:Effort:   1:00
:END:

*** TODO [#4] Move archives to external file, preserving structure
:PROPERTIES:
:ID:       DF8001AB-5B1E-4B6D-A3E5-BAEFDB041171
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-02-15 Wed 05:58]--[2023-02-15 Wed 06:33] =>  0:35
:END:

I think Munilo Pereira had a package that allowed for this.

** org-archive-hierarchically
:PROPERTIES:
:ID:       27C3C7F9-C040-4844-AC5A-762BBC26C18F
:END:
:LOGBOOK:
CLOCK: [2023-02-17 Fri 11:34]--[2023-02-17 Fri 11:47] =>  0:13
:END:

/[[https://gitlab.com/andersjohansson/org-archive-hierarchically][org-archive-hierarchically]] archives org subtrees in a way that preserves the original heading structure./

I normally archive subtrees with ~org-archive-to-archive-sibling~, but use ~org-archive-hierarchically~ for files in public repositories. ~org-archive-to-archive-sibling~ moves archived tasks to a heading, which is by default collapsed in org, but in Github archived tasks are always fully visible, creating a lot of clutter.

#+begin_src emacs-lisp
(use-package org-archive-hierarchically
  :elpaca (org-archive-hierarchically
             :host gitlab
             :repo "andersjohansson/org-archive-hierarchically")
  :defer 20)
#+end_src

** org-fold
:PROPERTIES:
:ID:       DCBF8A9B-D230-4D51-B861-B85AA4405D25
:END:
:LOGBOOK:
CLOCK: [2021-03-15 Mon 14:51]--[2021-03-15 Mon 15:07] =>  0:16
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-fold
  :after org
  :demand t
  :config
  (setq org-fold-catch-invisible-edits 'smart)

  (defun ps/org-fold-show-all-headings ()
    "Show contents of all headings in buffer, except archives."
    (interactive)
    (org-fold-show-all '(headings))
    (org-cycle-hide-archived-subtrees 'all))

  ;; github.com/org-roam/org-roam/wiki/User-contributed-Tricks#hiding-the-properties-drawer
  (defun ps/org-hide-properties ()
    "Hide all org-mode headline property drawers in buffer. Could be
  slow if it has a lot of overlays."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
              "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
        (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
          (overlay-put ov_this 'display "")
          (overlay-put ov_this 'hidden-prop-drawer t))))
    (put 'org-toggle-properties-hide-state 'state 'hidden))

  (defun ps/org-hide-logbook ()
    "Hide all org-mode headline logbook drawers in buffer. Could be
slow if it has a lot of overlays."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
              "^ *:logbook:\n\\(^clock:.*?\n\\)+ *:end:\n" nil t)
        (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
          (overlay-put ov_this 'display "")
          (overlay-put ov_this 'hidden-logbook-drawer t))))
    (put 'org-toggle-logbook-hide-state 'state 'hidden))

  (defun ps/org-show-properties ()
    "Show all org-mode property drawers hidden by org-hide-properties."
    (interactive)
    (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
    (put 'org-toggle-properties-hide-state 'state 'shown))

  (defun ps/org-show-logbook ()
    "Show all org-mode logbook drawers hidden by org-hide-properties."
    (interactive)
    (remove-overlays (point-min) (point-max) 'hidden-logbook-drawer t)
    (put 'org-toggle-logbook-hide-state 'state 'shown))

  (add-hook 'org-mode-hook #'ps/org-hide-properties)
  (add-hook 'org-mode-hook #'ps/org-hide-logbook))
#+end_src

** org-faces
:PROPERTIES:
:ID:       1A295AA4-31BD-4B2E-828B-5B3443AD8D35
:END:

#+begin_src emacs-lisp
(use-feature org-faces
  :after org
  :demand t
  :config
  (setq org-fontify-quote-and-verse-blocks t))
#+end_src

** org-id
:PROPERTIES:
:ID:       51E91355-66E0-479C-B616-116EF261F930
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 11:32]--[2023-04-08 Sat 12:00] =>  0:28
CLOCK: [2023-03-09 Thu 20:07]--[2023-03-09 Thu 20:19] =>  0:12
CLOCK: [2022-08-29 Mon 17:28]--[2022-08-29 Mon 17:43] =>  0:15
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-id
  :after org
  :demand t
  :init
  ;; stackoverflow.com/a/16247032/4479455
  (defvar ps/org-id-auto-add-excluded-directories
    (list ps/dir-dropbox-tlon-fede
          ps/dir-dropbox-tlon-leo)
    "Directories containing files to exclude from `ps/org-id-auto-add-ids-to-headings-in-file'")

  (defvar ps/org-id-auto-add-excluded-files
    (list ps/file-orb-noter-template)
    "Files to exclude from `ps/org-id-auto-add-ids-to-headings-in-file'")

  (defun ps/org-id-auto-add-ids-to-headings-in-file ()
    "Add ID properties to all headings in the current file which do
not already have one."
     (when (and (eq major-mode 'org-mode)
                (string-match ps/dir-org (buffer-file-name))
                (eq buffer-read-only nil))
       (unless
           (or
            ;; exclude directories
            (member (file-name-directory (buffer-file-name))
                    ps/org-id-auto-add-excluded-directories)
            ;; exclude files
            (member (buffer-file-name)
                    ps/org-id-auto-add-excluded-files)
            (member (org-get-heading)
                    '("Local variables"
                      "COMMENT Local variables"
                      "TODO Local variables")))
         (org-map-entries 'org-id-get-create))))

  :config
  (setq org-id-link-to-org-use-id t)
  ;; I want these files to be searched for IDs, so that I can use
  ;; org-capture templates with them, but do not want them to be part
  ;; of org-agenda or org-roam.
  (setq org-id-extra-files (list
                            ps/file-tlon-tareas-leo
                            ps/file-tlon-tareas-fede))

  (defun ps/org-id-update-id-locations ()
  "Scan relevant files for IDs.

Store the relation between files and corresponding IDs. This will
scan all agenda files, all associated archives, all open Org
files, recursively all files in `org-directory', and all files in
`org-id-extra-files'."
    (interactive)
    (org-id-update-id-locations
     (directory-files-recursively org-directory ".org$\\|.org.gpg$")))

  (defun ps/org-id-goto (id &optional arg)
    "Open ID even if narrowed."
    (dotimes (i 2)
      (ps/org-widen-and-reveal)
      (org-id-goto id)))

  (add-hook 'before-save-hook #'ps/org-id-auto-add-ids-to-headings-in-file)

  :general
  (org-mode-map
   "s-A-i" 'org-id-copy
   "s-A-u" 'ps/org-id-update-id-locations))
#+end_src

** org-list
:PROPERTIES:
:ID:       DD345C01-CEAC-4CEC-A8D5-89C16A0182CB
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-list
  :after org
  :demand t
  :config
  (setq org-plain-list-ordered-item-terminator ?.)
  (setq org-list-indent-offset 2)

  (defun ps/org-mark-checkbox-complete-and-move-to-next-item ()
    "Mark checkbox as completed and move to the next item."
    (interactive)
    (org-ctrl-c-ctrl-c nil)
    (let ((debug-on-error nil))
      (org-next-item)))

  ;; I should instead advice the original org function
  (defun ps/org-reset-checkbox-state-subtree ()
    "Reset all checkboxes in an entry subtree, without showing heading properties."
    (interactive)
    (org-reset-checkbox-state-subtree)
    (org-cycle)
    (org-cycle))

  :general
  (org-mode-map
   "s-A-c" 'ps/org-mark-checkbox-complete-and-move-to-next-item
   "s-A-o" 'ps/org-reset-checkbox-state-subtree))
#+end_src

** org-refile
:PROPERTIES:
:ID:       3FAE7C0D-FB22-4175-A0A4-FFA392539743
:REFILE_TARGET_FILE: config.org
:REFILE_TARGET_HEADING: Watched
:END:
:LOGBOOK:
CLOCK: [2023-02-22 Wed 17:05]--[2023-02-22 Wed 17:30] =>  0:25
CLOCK: [2021-12-15 Wed 10:20]--[2021-12-15 Wed 10:30] =>  0:10
CLOCK: [2021-12-14 Tue 18:00]--[2021-12-14 Tue 18:08] =>  0:08
CLOCK: [2021-10-08 Fri 10:22]--[2021-10-08 Fri 10:32] =>  0:10
CLOCK: [2021-08-21 Sat 21:46]--[2021-08-21 Sat 21:54] =>  0:08
CLOCK: [2021-06-05 Sat 14:17]--[2021-06-05 Sat 14:19] =>  0:02
CLOCK: [2021-02-27 Sat 07:30]--[2021-02-27 Sat 07:46] =>  0:16
CLOCK: [2021-02-24 Wed 06:47]--[2021-02-24 Wed 07:30] =>  0:43
:END:

Much of this was taken from Yiming Chen's [[https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/][My org refile workflow]].

#+begin_src emacs-lisp :results silent
(use-feature org-refile
  :after org
  :defer 10
  :config
  (setq org-refile-use-outline-path 'level3)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-reverse-note-order t) ; refile to the beginning of header
  ;; Build cache at startup
  (setq org-refile-use-cache t)
  (setq org-refile-use-outline-path t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 9)
                             (ps/open-buffer-files :maxlevel . 9)))
  (defun ps/open-buffer-files ()
    "Return the list of files currently open in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  ;; Regenerate cache every half hour minutes
  (run-with-idle-timer (* 60 30) t (lambda ()
                                     (org-refile-cache-clear)
                                     (org-refile-get-targets)))

  (defun ps/org-refile-latest ()
    "Jump to the most recently refiled item."
    (interactive)
    (widen)
    (org-refile '(16)))

  (defun ps/org-refile-and-archive ()
    "Refile and archive the current subtree."
    (interactive)
    (let ((source-buffer (current-buffer)))
      (org-refile)
      (save-window-excursion
        (save-excursion
          (org-refile '(16))
          (org-archive-to-archive-sibling)))))

  ;; Inspired by emacs.stackexchange.com/q/8045/32089
  (defun ps/org-refile-to (file heading)
    "Refile current heading to specified location."
    (let ((pos (save-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer heading))))
      (org-refile nil nil (list heading file nil pos))))

  :general
  (org-mode-map
   "s-w" 'org-refile
   "H-s-w" 'ps/org-refile-and-archive
   "s-A-w" 'ps/org-refile-latest))
#+end_src

** org-keys
:PROPERTIES:
:ID:       19FC2EEB-7C71-43C1-97E6-52913C31CCDE
:END:
:LOGBOOK:
CLOCK: [2021-12-23 Thu 11:03]--[2021-12-23 Thu 11:21] =>  0:18
CLOCK: [2021-07-14 Wed 22:45]--[2021-07-14 Wed 22:51] =>  0:06
CLOCK: [2021-07-06 Tue 14:58]--[2021-07-06 Tue 15:18] =>  0:20
CLOCK: [2021-06-06 Sun 14:06]--[2021-06-06 Sun 14:16] =>  0:10
CLOCK: [2021-06-06 Sun 12:27]--[2021-06-06 Sun 13:00] =>  0:33
CLOCK: [2021-06-06 Sun 09:45]--[2021-06-06 Sun 10:05] =>  0:20
CLOCK: [2021-06-01 Tue 20:43]--[2021-06-01 Tue 21:00] =>  0:17
CLOCK: [2021-04-21 Wed 17:06]--[2021-04-21 Wed 17:09] =>  0:03
CLOCK: [2021-04-21 Wed 16:42]--[2021-04-21 Wed 17:03] =>  0:21
CLOCK: [2021-04-04 Sun 18:17]--[2021-04-04 Sun 18:22] =>  0:05
CLOCK: [2021-04-04 Sun 12:54]--[2021-04-04 Sun 12:57] =>  0:03
CLOCK: [2021-04-04 Sun 12:25]--[2021-04-04 Sun 12:29] =>  0:04
CLOCK: [2021-04-04 Sun 12:05]--[2021-04-04 Sun 12:25] =>  0:20
CLOCK: [2021-03-23 Tue 12:13]--[2021-03-23 Tue 12:21] =>  0:08
:END:

Enable speed keys. To trigger a speed key, point must be at the very beginning of an org headline. Type '?' for a list of keys.

#+begin_src emacs-lisp :results silent
(use-feature org-keys
  :after org
  :demand t
  :config
  (setq org-use-speed-commands t)
  (setq org-speed-commands
   '(("Outline navigation")
     ("k" . (org-speed-move-safe 'org-previous-visible-heading))
     ("." . (org-speed-move-safe 'org-forward-heading-same-level))
     ("," . (org-speed-move-safe 'org-backward-heading-same-level))
     ("l" . (org-speed-move-safe 'org-next-visible-heading))
     ("j" . (org-speed-move-safe 'outline-up-heading))
     ("m" . (org-previous-block nil))
     ("/" . (org-next-block nil))
     ("Outline structure editing")
     ("A" . (org-metaleft))
     ("D" . (org-metadown))
     ("S" . (org-metaup))
     ("F" . (org-metaright))
     ("Q" . (org-shiftmetaleft))
     ("E" . (org-shiftmetadown))
     ("W" . (org-shiftmetaup))
     ("R" . (org-shiftmetaright))
     ("Outline visibility")
     ("'" . (org-force-cycle-archived))
     ("w" . (ps/narrow-or-widen-dwim))
     ("Meta data editing")
     ("t" . (org-todo))
     ("Clock")
     ("h" . (ps/org-jump-to-latest-clock-entry))
     ("H" . (lambda () (ps/org-jump-to-latest-clock-entry) (ps/org-clone-clock-entry)))
     ("i" . (org-clock-in))
     ("o" . (org-clock-out))
     ("Regular editing")
     ("z" . (undo-tree-undo))
     ("X" . (org-cut-subtree)) ; capital 'X' to prevent accidents
     ("c" . (org-copy-subtree))
     ("v" . (org-yank))
     ("Other")
     ("f" . (ace-link-org))
     ("a" . (org-open-at-point nil))
     ("I" . (org-id-copy))
     ("p" . (org-priority))
     ("u" . (org-speed-command-help))
     ("g" . (org-agenda)))))
#+end_src

Set custom speed commands.

I use the same key for ~CONTROL~ and ~TAB~ (thanks to the magic of Karabiner), so I can't hit ~C-TAB~, to which ~org-force-cycle-archived~ is bound. Since this is a command I very rarely execute, I don't want to waste a key chord by rebinding the function to it. Instead, I set a custom speed command that lets me call that function with ~c~ (which replaces the default speed key binding for ~org-cycle~).

** ol
:PROPERTIES:
:ID:       9C00589B-C296-48BA-BD7A-B50992624AB0
:END:
#+begin_src emacs-lisp :results silent
(use-feature ol
  :after org
  :demand t
  :config
  (defun ps/org-nth-stored-link (&optional n)
    "Return Nth last stored link in `org-stored-links'."
    (let ((n (or n 1)))
      (car (nth n org-stored-links)))
    (format "[[%s][%s]]"
            (car (nth n org-stored-links))
            (cadr (nth n org-stored-links))))

  :general
  ("H-L" 'org-store-link)
  (org-mode-map
   "A-C-M-s-j" 'org-previous-link
   "A-C-M-s-;" 'org-next-link)
  ((org-mode-map org-msg-edit-mode-map)
   "s-A-l" 'ps/org-url-dwim)
  ((org-mode-map org-msg-edit-mode-map telega-chat-mode-map)
   "s-k" 'org-insert-link))
#+end_src

** ol-bbdb
:PROPERTIES:
:ID:       B1A25249-1E67-498D-8A68-0E4BDB3D0A2B
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/bbdb)
(use-feature ol-bbdb
  :after org bbdb
  :after ol
  :demand t
  :config
   (setq org-bbdb-anniversary-field 'birthday))
#+end_src

** org-protocol
:PROPERTIES:
:ID:       03387678-63D2-4B72-AD25-6F6F16992D5C
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:51]--[2022-07-17 Sun 11:55] =>  0:04
CLOCK: [2022-07-16 Sat 21:15]--[2022-07-17 Sun 10:49] => 13:34
:END:

[[https://www.orgroam.com/manual.html#Mac-OS][This section of the org-roam manual]] describes how to set up ~org-protocol~ on macOS. Note that [[https://bitbucket.org/mituharu/emacs-mac/][emacs-mac]] supports ~org-protocol~ out of the box and doesn't require turning on the Emacs server.

#+begin_src emacs-lisp :results silent
(use-feature org-protocol
  :after org
  :defer 15)
#+end_src

** ox
:PROPERTIES:
:ID:       A3639B32-E7EE-4119-876B-729DF18FD314
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 13:14]--[2021-07-25 Sun 13:18] =>  0:04
:END:

#+begin_src emacs-lisp :results silent
(use-feature ox
  :after org
  :defer 30
  :config
  (setq org-export-exclude-tags '("noexport" "ARCHIVE"))
  (setq org-export-backends '(ascii html icalendar latex md odt)) ; set export backends
  (setq org-export-with-broken-links 'mark) ; allow export with broken links
  (setq org-export-with-section-numbers nil) ; do not add numbers to section headings
  (setq org-export-with-toc nil) ; do not include table of contents
  (setq org-export-with-title nil) ; do not include title
  (setq org-export-headline-levels 4) ; include up to level 4 headlines
  (setq org-export-preserve-breaks t) ; respect single breaks when exporting
  ;; (org-export-with-author nil "do not include author")
  ;; (org-export-with-date nil "do not include export date")
  ;; (org-html-validation-link nil "do not include validation link")
  (setq org-html-postamble nil) ; the three lines above unnecessary when this set to nil
  (setq org-latex-logfiles-extensions (quote
                                       ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle"))) ; get rid of temporary LaTeX files upon export
  (setq org-preview-latex-default-process 'dvisvgm)
  (setq org-export-show-temporary-export-buffer nil) ; bury temporary export buffers generated by `org-msg'

  :general
  (org-mode-map
   "s-A-e" 'org-export-dispatch))
#+end_src

*** TODO [#6] Change face of content under headline tagged ~unpublished~ or ~noexport~
:PROPERTIES:
:Effort:   0:45
:ID:       1AC4CC67-0F8E-4E4D-95A5-DB7116AEA359
:END:

https://stackoverflow.com/questions/20089530/color-whole-section-line-in-org-mode-depending-on-tag

#+begin_src emacs-lisp :results silent :tangle no
(font-lock-add-keywords 'org-mode
                        '(("^.*:noexport:.*$" . font-lock-keyword-face)))
#+end_src

It works, but it only changes the color of the heading, rather than the text underneath.

** ox-hugo
:PROPERTIES:
:ID:       1E9E8DC4-83B7-44CA-B467-BA7428DDF812
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 19:17]--[2022-07-17 Sun 21:01] =>  1:44
:END:

/[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] is an org-mode exporter back-end for Hugo./

Hugo should be able to export ~org-cite~ citations.

#+begin_src emacs-lisp :results silent
(use-package ox-hugo
  :after org)
#+end_src

** ox-pandoc
:PROPERTIES:
:ID:       C16B02FA-64E6-423B-9596-B3B023C93B21
:END:

/[[https://github.com/kawabata/ox-pandoc][ox-pandoc]] is an org-mode exporter that uses Pandoc./

#+begin_src emacs-lisp :results silent
(use-package ox-pandoc
  :after org)
#+end_src

** ob
:PROPERTIES:
:ID:       A19E8C93-0435-4D02-AF4F-8213212D2386
:END:
:LOGBOOK:
CLOCK: [2021-08-06 Fri 15:59]--[2021-08-06 Fri 15:59] =>  0:00
CLOCK: [2021-07-25 Sun 13:18]--[2021-07-25 Sun 13:33] =>  0:15
CLOCK: [2021-06-06 Sun 14:34]--[2021-06-06 Sun 15:08] =>  0:34
CLOCK: [2021-04-05 Mon 19:18]--[2021-04-05 Mon 19:50] =>  0:32
CLOCK: [2021-02-25 Thu 15:00]--[2021-02-25 Thu 15:32] =>  0:32
:END:

#+begin_src emacs-lisp :results silent
(use-feature ob
  :after org
  :demand t
  :config
  (setq org-confirm-babel-evaluate 'ps/org-confirm-babel-evaluate)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (R . t)))

  (defun ps/org-confirm-babel-evaluate (lang body)
    (not (member lang '("python" "emacs-lisp"))))

  (defun ps/org-babel-tangle ()
    "Widen buffer, save its contents, and tangle file."
    (interactive)
    (widen)
    (save-buffer)
    (org-babel-tangle))

  (dolist (cons (list (cons "j" 'org-babel-next-src-block)
                      (cons "k" 'org-babel-previous-src-block)
                      (cons "n" 'org-babel-insert-header-arg)
                      (cons "p" 'org-babel-remove-result-one-or-many)))
    (add-to-list 'org-babel-key-bindings cons))

  :general
  (org-mode-map
   "s-b" 'tlon-init-build))
#+end_src

** org-src
:PROPERTIES:
:ID:       5D173B55-ED72-495C-80EE-39063BAB0550
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-src
  :after org
  :defer 5
  :config/el-patch
  ;; name buffers more cleanly
  (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
  "Construct the buffer name for a source editing buffer.
Format is \"*Org Src ORG-BUFFER-NAME[ LANG ]*\"."
  (el-patch-swap
    (concat "*Org Src " org-buffer-name "[ " lang " ]*")
    (concat org-buffer-name " (org src)")))

  :config
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation nil)
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively nil) ; When set to `nil', newlines will be properly indented

  :general
  (org-src-mode-map
   "s-z" 'org-edit-src-exit))
#+end_src

** org-table
:PROPERTIES:
:ID:       6DB39CB9-0939-41CD-B3A4-4FC478F24077
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-table
  :after org
  :demand t

  :general
  (org-table-fedit-map
   "s-c" 'org-table-fedit-finish))
#+end_src

*** Resources
:PROPERTIES:
:ID:       BF9BD230-8771-4883-9DFD-65723C011314
:END:

- [cite:@EMACKS2022HowCreateTable]

** orgtbl-edit
:PROPERTIES:
:ID:       7C3382D2-F7B4-4F1B-854E-BB60D568E299
:END:

/[[https://github.com/shankar2k/orgtbl-edit][orgtbl-edit]] allows editing a spreadsheet or text-delimited file as an org table./

#+begin_src emacs-lisp :results silent
(use-package orgtbl-edit
  :elpaca (orgtbl-edit
             :host github
             :repo "shankar2k/orgtbl-edit"))
#+end_src

** org-crypt
:PROPERTIES:
:ID:       3C8E083B-55A1-4B55-A30A-BD9C4BE1D1D0
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:40]--[2023-04-30 Sun 11:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:19]--[2023-04-02 Sun 21:22] =>  0:03
CLOCK: [2021-03-18 Thu 18:49]--[2021-03-18 Thu 18:51] =>  0:02
:END:

/[[https://orgmode.org/manual/Org-Crypt.html][org-crypt]] encrypts the text under all headlines with a designated tag./

#+begin_src emacs-lisp :results silent
(use-feature org-crypt
  :after org
  :demand t
  :config
  (setq org-tags-exclude-from-inheritance '("crypt"))
  (setq org-crypt-key ps/personal-gmail)
  (setq org-crypt-disable-auto-save t)

  (defun ps/org-crypt-dwim ()
    "Decrypt entry unles in clock, then evaluate time range."
    (interactive)
    (if (derived-mode-p 'org-mode)
        (pcase (org-element-type (org-element-context))
          ('clock (org-evaluate-time-range))
          (_ (org-decrypt-entry)))
      (user-error "Not in org-mode")))

  (org-crypt-use-before-save-magic)

  :general
  (org-mode-map
   "s-y" 'ps/org-crypt-dwim))
#+end_src

** org-lint
:PROPERTIES:
:ID:       43E5754F-7EB8-4FB7-8A92-B57D8BA2AF81
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-lint
  :after org)
#+end_src

** org-habit
:PROPERTIES:
:ID:       A4EE67E0-498C-4CE0-BBB2-E7F24DA6AD69
:END:

#+begin_src emacs-lisp :results silent
(use-feature org-habit
  :after org
  :demand t
  :config
  (setq org-habit-today-glyph #x1f4c5)
  (setq org-habit-completed-glyph #x2713)
  (setq org-habit-preceding-days 29)
  (setq org-habit-following-days 1)
  (setq org-habit-graph-column 3)
  (setq org-habit-show-habits nil)
  (setq org-habit-show-habits-only-for-today nil)

  :general
  (org-agenda-mode-map
   "h" 'org-habit-toggle-display-in-agenda))
#+end_src

** org-contrib
:PROPERTIES:
:ID:       F2DD9900-5926-4FE1-A8DC-C398CFE80378
:END:

/[[https://git.sr.ht/~bzg/org-contrib][org-contrib]] features add-ons to ~org-mode~ currently looking for maintainers./

#+begin_src emacs-lisp
(use-package org-contrib
  :after org
  :demand t)
#+end_src

** org-checklist
:PROPERTIES:
:ID:       1ABA68C3-187B-457C-9992-4C4BBEB45C18
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 15:33]--[2021-07-12 Mon 16:00] =>  0:27
CLOCK: [2021-06-22 Tue 21:39]--[2021-06-23 Wed 00:21] =>  2:42
CLOCK: [2021-04-20 Tue 23:28]--[2021-04-20 Tue 23:44] =>  0:16
:END:

Allows reset of checkboxes in recurring tasks. This works only on headings that have the property ~RESET_CHECK_BOXES~ set to ~t~. You can set the property of a heading by invoking the command ~org-set-property~ with point on that heading or immediately under it.

#+begin_src emacs-lisp :results silent
(use-feature org-checklist
  :after org-contrib
  :demand t)
#+end_src

** org-analyzer
:PROPERTIES:
:ID:       33BBA839-D680-4D74-AF0F-C6225799DD53
:END:

To try:
https://github.com/rksm/clj-org-analyzer/
https://www.reddit.com/r/emacs/comments/cptwh4/org_analyzer_an_app_that_visualizes_orgmode_time/
** org-make-toc
:PROPERTIES:
:ID:       5BAB49C3-DB85-4CB1-9CF7-5FD72AFB4608
:END:
:LOGBOOK:
CLOCK: [2023-02-26 Sun 13:15]--[2023-02-26 Sun 13:28] =>  0:13
:END:

/[[https://github.com/alphapapa/org-make-toc][org-make-toc]] generates automatic tables of contents for org files./

#+begin_src emacs-lisp :results silent
(use-package org-make-toc
  :after org
  :defer 10)
#+end_src

** org2blog
:PROPERTIES:
:ID:       56AD66CB-240C-4BAA-918B-CCD63BD518C4
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 13:27]--[2021-05-29 Sat 13:49] =>  0:22
CLOCK: [2021-05-29 Sat 12:08]--[2021-05-29 Sat 12:30] =>  0:22
CLOCK: [2021-03-27 Sat 22:03]--[2021-03-27 Sat 22:12] =>  0:09
CLOCK: [2021-03-18 Thu 21:57]--[2021-03-18 Thu 22:02] =>  0:05
CLOCK: [2021-03-17 Wed 22:08]--[2021-03-17 Wed 22:23] =>  0:15
CLOCK: [2021-03-17 Wed 20:34]--[2021-03-17 Wed 20:52] =>  0:18
:END:

/[[https://github.com/org2blog/org2blog][org2blog]] lets you blog from Org mode to WordPress./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/org2blog)
(use-package org2blog
  :after auth-source-pass
  :config
  (setq org2blog/wp-blog-alist
        `(("Pablo's website"
           :url "https://www.stafforini.com/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/wp-admin/admin"))
          ("Pablo's miscellany"
           :url "https://www.stafforini.com/blog/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/blog/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/blog/wp-admin/admin"))
          ("notatu dignum"
           :url "https://www.stafforini.com/quotes/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/quotes/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/quotes/wp-admin/admin"))
          ("Puro compás"
           :url "https://www.stafforini.com/tango/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/tango/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/tango/wp-admin/admin"))
          ("EA Quotes"
           :url "https://eaquotes.net/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net")
           :password ,(auth-source-pass-get 'secret "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net"))))

  (setq org2blog/wp-show-post-in-browser 'show)
  (setq org2blog/wp-track-posts (list ps/file-org2blog "Posts"))

  ;; (load-file "/Users/pablostafforini/.emacs.d/straight/repos/org2blog/org2blog.el")
  (defun ps/org2blog-move-tags-to-drawer ()
    "Convert org-mode tags to values of the property `POST_TAGS' in
an org drawer."
    (interactive)
    (while (re-search-forward "^\\* .*?:\\(.*\\):
")
      (let ((tags (string-join
                   (split-string
                    (substring-no-properties
                     (match-string 1))
                    ":")
                   ", ")))
        (org-set-property "POSG_TAGS" tags))))

  ;; setting `org2blog/wp-confirm-post' to t asks for confirmation
  ;; before publication, but I want to be asked only when the
  ;; publication (i.e. post or page) lacks an ID
  (defun ps/org2blog-subtree-publish-save (orig-fun &rest args)
    "Ask for confirmation only when publication lacks an ID."
    (if (cdr (assoc "post-id" (org2blog--export-as-post t)))
        (apply orig-fun args)
      (when (y-or-n-p "Post has no ID. Proceed anyway? ")
        (apply orig-fun args))))

  (advice-add 'org2blog-subtree-post-save :around #'ps/org2blog-subtree-publish-save)
  (advice-add 'org2blog-subtree-page-save :around #'ps/org2blog-subtree-publish-save)

  :general
  ("A-o" 'org2blog-user-interface))
#+end_src

** org-journal
:PROPERTIES:
:ID:       16DB534E-D606-4510-84ED-6C6640780E7A
:END:

/[[https://github.com/bastibe/org-journal][org-journal]] is an org-mode based journaling mode./

#+begin_src emacs-lisp :results silent
(use-package org-journal
  :after org
  :config
  (setq org-journal-dir ps/dir-journal)
  (setq org-journal-date-format "%Y-%m-%d")
  (setq org-journal-file-format "%Y.org")
  (setq org-journal-file-type 'yearly) ; set org-journal to use the same files for same year entries

  :general
  ("A-j" 'org-journal-new-entry))
#+end_src

*** TODO [#5] Explore how to use org journal as the day organizer
:PROPERTIES:
:ID:       67333293-EE6D-4936-8C88-07F5AE193B81
:END:

** org-autosort
:PROPERTIES:
:ID:       1BC53647-A492-4EA3-A9A5-352C71119629
:END:

/[[https://github.com/yantar92/org-autosort][org-autosort]] sorts entries in org files automatically./

#+begin_src emacs-lisp :results silent
(use-package org-autosort
  :elpaca (org-autosort :type git :host github :repo "yantar92/org-autosort")
  :after org)
#+end_src

** ox-clip
:PROPERTIES:
:ID:       E2D54031-28E4-4F96-A3D1-0E06D1B1A17E
:END:

/[[https://github.com/jkitchin/ox-clip][ox-clip]] copies selected regions in org-mode as formatted text on the clipboard./

#+begin_src emacs-lisp :results silent
(use-package ox-clip
  :after org
  :demand t
  :config
  ;; the default value works but will set the font to a particular
  ;; size, so when pasting to e.g. Google Docs it won't inherit the
  ;; font size of the rest of the document. this new value fixes this.
  (setq ox-clip-osx-cmd "hexdump -ve '1/1 \"%.2x\"' | xargs printf \"set the clipboard to {text:\\\" \\\", «class HTML»:«data HTML%s»}\" | osascript -")

  :general
  ((org-mode-map)
   "s-c" 'ox-clip-formatted-copy))
#+end_src

** org-mime
:PROPERTIES:
:ID:       EB437B48-CEB2-4727-8910-627061F4701F
:END:
:LOGBOOK:
CLOCK: [2021-05-04 Tue 17:42]--[2021-05-04 Tue 17:54] =>  0:12
CLOCK: [2021-03-29 Mon 17:15]--[2021-03-29 Mon 18:09] =>  0:54
:END:

/[[https://github.com/org-mime/org-mime][org-mime]] lets you send HTML email using Org-mode HTML export./

#+begin_src emacs-lisp :results silent
(use-package org-mime
  :after org
  :general
  (org-mode-map
   "s-m" 'org-mime-htmlize
   "s-A-m" 'org-mime-org-subtree-htmlize))
#+end_src

** elgantt
:PROPERTIES:
:ID:       22FCE4B1-4A51-4DF5-8BAF-2AC6E837DEE3
:END:

/[[https://github.com/legalnonsense/elgantt/][elgantt]] is a gantt chart for org mode./

#+begin_src emacs-lisp :results silent
(use-package elgantt
  :elpaca (elgantt
             :host github
             :repo "legalnonsense/elgantt")
  :after org
  :defer 20
  :config
  (setq elgantt-agenda-files (file-name-concat ps/dir-emacs "elpaca/repos/elgantt/test.org")))
#+end_src

** org-pomodoro
:PROPERTIES:
:ID:       107BED3A-947F-4D35-A382-2C20C1C37AED
:END:
:LOGBOOK:
CLOCK: [2022-04-30 Sat 14:12]--[2022-04-30 Sat 14:38] =>  0:26
CLOCK: [2022-03-31 Thu 18:49]--[2022-03-31 Thu 18:59] =>  0:10
CLOCK: [2022-03-31 Thu 17:36]--[2022-03-31 Thu 18:02] =>  0:26
CLOCK: [2022-03-31 Thu 17:25]--[2022-03-31 Thu 17:30] =>  0:05
:END:

/[[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]] provides org-mode support for the Pomodoro technique./

#+begin_src emacs-lisp :results silent
(use-package org-pomodoro
  :after org
  :config
  (setq org-pomodoro-length 25)
  (setq org-pomodoro-short-break-length (- 30 org-pomodoro-length))
  (setq org-pomodoro-long-break-length org-pomodoro-short-break-length)
  (when (eq system-type 'darwin)
    (setq org-pomodoro-finished-sound "/System/Library/Sounds/Blow.aiff"))
  (setq org-pomodoro-long-break-sound org-pomodoro-finished-sound)
  (setq org-pomodoro-short-break-sound org-pomodoro-finished-sound)

  (defun ps/org-pomodoro-format-timer (&optional arg)
    "Format the `org-pomodoro' timer.
We set this value by advising `org-pomodoro' so that the pomodoro
count is updated."
    (setq org-pomodoro-format
          (concat "🍅 %s"
                  (format "|%s" (number-to-string org-pomodoro-count)))))

  (advice-add 'org-pomodoro :after #'ps/org-pomodoro-format-timer)

  :general
  ("H-I" 'org-pomodoro
   "A-s-e" 'org-pomodoro-extend-last-clock)
  (org-agenda-mode-map
   "I" 'org-pomodoro))
#+end_src

- check: https://gist.github.com/bravosierrasierra/1d98a89a7bcb618ef70c6c4a92af1a96#file-org-pomodoro-plus

Pomodoro system:

- Always working on a task (rather than merely on a heading)
- At the beginning of each 30-minute session, leave a note on what I will do in that session

* note-taking
:PROPERTIES:
:ID:       EC6700D7-C65D-4430-8DAC-57772B423D69
:END:

** org-roam
:PROPERTIES:
:ID:       2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17
:END:
:LOGBOOK:
CLOCK: [2023-05-08 Mon 11:11]--[2023-05-08 Mon 12:20] =>  1:09
CLOCK: [2023-04-08 Sat 11:18]--[2023-04-08 Sat 11:32] =>  0:14
CLOCK: [2023-03-09 Thu 12:35]--[2023-03-09 Thu 12:57] =>  0:22
CLOCK: [2022-09-30 Fri 20:53]--[2022-09-30 Fri 21:21] =>  0:28
CLOCK: [2022-06-28 Tue 20:12]--[2022-06-28 Tue 20:13] =>  0:01
CLOCK: [2022-06-28 Tue 17:57]--[2022-06-28 Tue 18:21] =>  0:24
CLOCK: [2022-06-28 Tue 16:03]--[2022-06-28 Tue 16:06] =>  0:03
CLOCK: [2022-06-28 Tue 11:50]--[2022-06-28 Tue 12:30] =>  0:40
CLOCK: [2022-06-26 Sun 10:50]--[2022-06-26 Sun 11:45] =>  0:55
CLOCK: [2022-06-26 Sun 09:08]--[2022-06-26 Sun 09:29] =>  0:21
CLOCK: [2022-06-18 Sat 17:27]--[2022-06-18 Sat 17:43] =>  0:16
CLOCK: [2022-03-08 Tue 13:05]--[2022-03-08 Tue 13:06] =>  0:01
CLOCK: [2022-02-01 Tue 11:41]--[2022-02-01 Tue 12:01] =>  0:20
CLOCK: [2022-01-31 Mon 15:36]--[2022-01-31 Mon 15:52] =>  0:16
CLOCK: [2021-12-27 Mon 22:14]--[2021-12-27 Mon 22:16] =>  0:02
CLOCK: [2021-12-15 Wed 12:16]--[2021-12-15 Wed 12:26] =>  0:10
CLOCK: [2021-12-05 Sun 18:33]--[2021-12-05 Sun 18:46] =>  0:13
CLOCK: [2021-12-04 Sat 14:40]--[2021-12-04 Sat 15:00] =>  0:20
CLOCK: [2021-12-03 Fri 12:18]--[2021-12-03 Fri 12:23] =>  0:05
CLOCK: [2021-12-02 Thu 21:05]--[2021-12-02 Thu 21:20] =>  0:15
CLOCK: [2021-12-02 Thu 19:51]--[2021-12-02 Thu 20:56] =>  1:05
CLOCK: [2021-12-02 Thu 18:49]--[2021-12-02 Thu 18:55] =>  0:06
CLOCK: [2021-12-02 Thu 18:30]--[2021-12-02 Thu 18:33] =>  0:03
CLOCK: [2021-08-06 Fri 15:32]--[2021-08-06 Fri 15:33] =>  0:01
CLOCK: [2021-08-02 Mon 18:45]--[2021-08-02 Mon 18:47] =>  0:02
CLOCK: [2021-07-30 Fri 14:13]--[2021-07-30 Fri 14:30] =>  0:17
CLOCK: [2021-07-28 Wed 16:27]--[2021-07-28 Wed 16:47] =>  0:20
CLOCK: [2021-07-26 Mon 11:26]--[2021-07-26 Mon 12:25] =>  0:59
CLOCK: [2021-07-24 Sat 22:54]--[2021-07-25 Sun 08:40] =>  9:46
CLOCK: [2021-07-24 Sat 19:19]--[2021-07-24 Sat 19:47] =>  0:28
CLOCK: [2021-07-24 Sat 09:31]--[2021-07-24 Sat 09:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:03]--[2021-06-25 Fri 21:05] =>  0:02
CLOCK: [2021-05-17 Mon 15:45]--[2021-05-17 Mon 16:56] =>  1:11
CLOCK: [2021-05-17 Mon 14:41]--[2021-05-17 Mon 14:55] =>  0:14
CLOCK: [2021-05-03 Mon 20:56]--[2021-05-03 Mon 21:37] =>  0:41
CLOCK: [2021-04-10 Sat 22:05]--[2021-04-10 Sat 22:12] =>  0:07
CLOCK: [2021-03-25 Thu 20:41]--[2021-03-25 Thu 21:18] =>  0:37
CLOCK: [2021-02-11 Thu 18:53]--[2021-02-11 Thu 19:28] =>  0:35
CLOCK: [2020-12-19 Sat 13:47]--[2020-12-19 Sat 14:02] =>  0:15
CLOCK: [2020-09-10 Thu 19:53]--[2020-09-10 Thu 20:01] =>  0:08
CLOCK: [2020-09-08 Tue 19:45]--[2020-09-08 Tue 19:59] =>  0:14
:END:

/[[https://github.com/org-roam/][org-roam]] is a Roam replica with org-mode./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/org-roam)
(use-package org-roam
  :after org emacsql
  :demand t
  :init
  (if (version< emacs-version "29.0")
      (setq org-roam-database-connector 'sqlite)
    (setq org-roam-database-connector 'sqlite-builtin))

  (defun ps/org-roam-recent (days &optional limit)
    "Return list of files modified in the last DAYS. Optionally,
return such list if its length is less than LIMIT."
    (let* ((mins (* 60 24 days))
           (file-list (split-string
                       (shell-command-to-string
                        (format
                         "find %s -name '*.org'  -mmin -%s"
                         (directory-file-name org-roam-directory) mins)))))
      ;; Remove excluded files
      (setq file-list (cl-delete-if (lambda (k)
                                      (string-match-p org-roam-file-exclude-regexp k))
                                    file-list))
      (when (and limit
                 (< (length file-list) limit))
        file-list)))

  :config/el-patch
  (defun org-roam-db-query (sql &rest args)
    "Run SQL query on Org-roam database with ARGS.
SQL can be either the emacsql vector representation, or a string."
    (el-patch-add (sleep-for 0 1))
    (apply #'emacsql (org-roam-db) sql args))

  :config
  (setq org-roam-directory ps/dir-org-roam)
  ;; (org-roam-complete-everywhere t)
  ;; (org-roam-completion-everywhere t)
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))

  (setq org-roam-capture-templates
        `(("r" "bibliography reference" plain
           (file ,ps/file-orb-noter-template)
           :if-new
           (file ,ps/file-orb-capture-template)
           :unnarrowed t :immediate-finish t :jump-to-captured t)))

  ;; adapted from
  ;; github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-node-hierarchy
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    (let ((level (org-roam-node-level node)))
      (concat
       (when (> level 0)
         (concat
          (propertize (org-roam-node-file-title node) 'face 'org-level-1)
          " > "))
       ;; This is a hacky propertization because it doesn't color the
       ;; intermediate headings differently, but doing that slowed
       ;; down the function too much.
       (when (> level 1)
         (concat
          (propertize (string-join (org-roam-node-olp node) " > ") 'face 'org-level-2)
          " > "))
       (propertize (org-roam-node-title node) 'face 'org-level-3))))

  (setq org-roam-node-display-template
        (concat "${hierarchy:160} "
                (propertize "${tags:20}" 'face 'org-tag)))

  (defvar ps/org-roam-excluded-dirs (list
                                     ps/dir-anki
                                     ps/dir-inactive
                                     ps/dir-archive))

  (defvar ps/org-roam-excluded-files (list
                                      ps/file-orb-noter-template
                                      "calendar.org" ; added directly as agenda file
                                      "quotes-old.org"
                                      ".org2blog.org"
                                      "wiki-notes.org" ; removing temporarily
                                      "feeds.org"
                                      ".*conflicted copy.*"
                                      ".*conflicted-copy.*"))

  ;; exclude headings in specific files and directories
  (setq org-roam-file-exclude-regexp
        (let (result)
          (dolist (dir-or-file
                   (append
                    ps/org-roam-excluded-dirs
                    ps/org-roam-excluded-files)
                   (regexp-opt result))
            (push (if (file-directory-p dir-or-file)
                      (file-relative-name dir-or-file ps/dir-org-roam)
                    dir-or-file)
                  result))))

  ;; exclude selected headings based on other criteria
  (setq org-roam-db-node-include-function
        (lambda ()
          (if (or
               ;; exclude based on tags
               (member "noid" (org-get-tags))
               (member "ARCHIVE" (org-get-tags))
               ;; exclude based on heading names
               (member (org-get-heading) '("Local variables"
                                           "COMMENT Local variables"
                                           "TODO Local variables"
                                           "Evaluation"
                                           "History"
                                           "Further reading"
                                           "External links"
                                           "Related entries"
                                           "Archive :ARCHIVE:"))
               ;; exclude buffers when in list of special dirs and org
               ;; heading at point is of level higher than 1 (i.e.
               ;; don't create unnecessary IDs for article
               ;; subsections)
               (and
                ;; dir condition
                (member
                 (file-name-directory (buffer-file-name))
                 (mapcar #'file-name-as-directory
                         ;; List of special dirs
                         (list
                          ps/dir-journal)))
                ;; heading condition
                (> (org-current-level) 1))
               )
              nil
            t)))

  (defun ps/org-roam-remove-file-level-properties ()
    "Remove `ROAM_REFS' and `ID' properties from file-level drawer."
    (when (string= "r" (plist-get org-capture-plist :key))
      (goto-char (point-min))
      (unless (org-get-heading)
        ;; Take action with file-level properties only.
        (org-delete-property "ID")
        (org-delete-property "ROAM_REFS")
        (ps/org-jump-to-first-heading)
        (org-id-get-create))))

  (defun ps/org-roam-new-note (note-type)
    "Create a new `org-roam' note."
    (interactive
     (list
      (completing-read
       "Select note type: "
       '("generic" "person"))))
    (let ((tags)
          (directory))
      (cond ((string= note-type "generic")
             (setq tags "note")
             (setq directory ps/dir-notes))
            ((string= note-type "person")
             (setq tags "person")
             (setq directory ps/dir-people)))
      (let* ((name (read-from-minibuffer "Entry name: "))
             (slug (tlon-core-slugify name))
             (filename (concat slug ".org")))
        (when (file-exists-p filename)
          (user-error (format "File `%s' already exists." filename)))
        (find-file (file-name-concat directory filename))
        (insert "#+title: " name "\n\n")
        (org-insert-heading)
        (insert name)
        (org-set-tags tags)
        (org-id-get-create)
        (ps/org-narrow-to-entry-and-children)
        (goto-char (point-max)))))

  (defun ps/org-roam-node-find ()
    "Find and open an Org-roam node by its title or alias."
    (interactive)
    (widen)
    (ps/org-fold-show-all-headings)
    (org-roam-node-find)
    (recenter 1))

  (add-to-list 'completion-at-point-functions #'org-roam-complete-link-at-point)
  ;; (add-to-list 'completion-at-point-functions #'org-roam-complete-everywhere)

  (defun ps/org-roam-node-find-special (&optional arg)
    "Return a list of selected headings sorted by priority.
The selection includes all headings with a priority and either no
todo status or the todo status TODO, and excludes all headings
with a date (scheduled or deadline). With a prefix argument,
prompt the user to select from a unique list of tags and further
restrict the selection to headings with that tag."
    (interactive "P")
    (let* ((selection (when arg
                        (ps/org-roam-node-select-tag)))
           (headings-with-priority
            (if selection
                (org-roam-db-query `[:select [id file title priority]
                                             :from nodes
                                             :left-join tags
                                             :on (= nodes:id tags:node-id)
                                             :where (and
                                                     (= tags:tag ,selection)
                                                     (notnull nodes:priority)
                                                     ;; how do I avoid the double negation?
                                                     (not (notnull nodes:scheduled))
                                                     (not (notnull nodes:deadline))
                                                     (or
                                                      (= nodes:todo "TODO")
                                                      (not (notnull nodes:todo))))
                                             :order-by (asc nodes:priority)])
              (org-roam-db-query `[:select [id file title priority]
                                           :from nodes
                                           :left-join tags
                                           :on (= nodes:id tags:node-id)
                                           :where (and
                                                   (notnull nodes:priority)
                                                   ;; how do I avoid the double negation?
                                                   (not (notnull nodes:scheduled))
                                                   (not (notnull nodes:deadline))
                                                   (or
                                                    (= nodes:todo "TODO")
                                                    (not (notnull nodes:todo))))
                                           :order-by (asc nodes:priority)])))
           (result '()))
      (dolist (record headings-with-priority)
        (let* ((id (nth 0 record))
               (file (nth 1 record))
               (title (nth 2 record))
               (priority (nth 3 record))
               (formatted-priority (if priority
                                       (format "[#%c] " priority)
                                     ""))
               (formatted-heading (concat formatted-priority title)))
          (push (cons formatted-heading `(lambda ()
                                           (org-id-goto ,id)))
                result)))
      (if result
          (let* ((candidates (reverse result))
                 (selection (consult--read
                             candidates
                             :prompt "Jump to heading: "
                             :category 'jump
                             :history t
                             :require-match t
                             :sort nil))
                 (action (cdr (assoc selection candidates))))
            (funcall action))
        (message "No headings with priority found."))))

  (defun ps/org-roam-node-select-tag ()
    "Prompt for tag selection from list of org tags."
    (interactive)
    (let* ((query-result (org-roam-db-query [:select :distinct [tag] :from tags]))
           (tag-candidates (mapcar #'car query-result))
           (selected-tag (consult--read tag-candidates
                                        :prompt "Select a tag: "
                                        :history 'org-roam-tag-history
                                        :sort t
                                        :require-match t)))
      (message "Selected tag: %s" selected-tag)
      selected-tag))

  ;; include transcluded links in `org-roam' backlinks
  (delete '(keyword "transclude") org-roam-db-extra-links-exclude-keys)

  (org-roam-db-autosync-mode -1)

  (add-hook 'org-roam-capture-new-node-hook #'orb--insert-captured-ref-h)
  (add-hook 'org-roam-capture-new-node-hook #'org-roam-capture--insert-captured-ref-h)
  (add-hook 'org-capture-prepare-finalize-hook #'ps/org-roam-remove-file-level-properties)

  :general
  ("A-H-n" 'ps/org-roam-new-note
   "H-j" 'ps/org-roam-node-find
   "H-J" 'ps/org-roam-node-find-special)
  (org-mode-map
   "s-i" 'org-roam-node-insert
   "s-r" 'org-roam-buffer-toggle))
#+end_src

- Check [[https://www.reddit.com/r/emacs/comments/omxl6n/config_for_orgroam_v2/][this config]] (v 2.0)
- And [[https://github.com/alexkehayias/emacs.d/blob/master/init.el#L715][this one]] (by the author of [[https://notes.alexkehayias.com/][this notes repository]], created with org-roam)
- And [[https://takeonrules.com/2021/08/22/ever-further-refinements-of-org-roam-usage/][this post]]

*** TODO [#7] check this org-roam config for ideas
:PROPERTIES:
:ID:       C375E205-3B70-4C1C-BB0B-1F7FC3A56187
:END:

https://github.com/hieutkt/.doom.d/blob/master/config.el#L690-L742

*** TODO [#6] Create new generic and person notes via capture templates, not function
:PROPERTIES:
:ID:       569027E9-D918-4A06-A85A-8E800DAC16EA
:END:

https://commonplace.doubleloop.net/adding-timestamps-to-org-roam-notes

*** TODO [#4] Figure out how to search for files with a particular tag with ~org-roam~
:PROPERTIES:
:ID:       C4B5F6B8-9E88-43E0-ACA3-43954D2BA254
:Effort:   0:30
:END:

*** TODO [#5] Make ~org-roam-node-insert~ show full path
:PROPERTIES:
:ID:       D25E187C-C351-48D6-B617-0A6A0DF0869F
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 17:03]--[2022-07-15 Fri 17:33] =>  0:30
:END:

*** TODO [#4] Diagnose issue with idle timer
:PROPERTIES:
:Effort:   1:00
:ID:       C6B17ACE-E5CB-4997-97D7-8ACAA33E7895
:END:

Run org-roam with minimal config and see if the problem with idle times persist

*** TODO [#5] Investigate if org-roam has a way to resolve links when exporting
:PROPERTIES:
:Effort:   0:30
:ID:       83AA4CF2-A783-4C27-895F-C68EAE5AB456
:END:

So the links to other Wiki articles do not break.

** org-roam-ui
:PROPERTIES:
:ID:       BAEADCA3-68C6-4B59-A45A-7A1C11C6F6BB
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 22:29]--[2021-08-02 Mon 22:29] =>  0:00
:END:

/[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] is a graphical frontend for exploring org-roam./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/org-roam)
(use-package org-roam-ui
  :elpaca
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  (add-hook 'after-init #'org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t)
  (setq org-roam-ui-follow t)
  (setq org-roam-ui-update-on-save nil)
  (setq org-roam-ui-open-on-start nil))
#+end_src

** org-roam-browser-extension
:PROPERTIES:
:ID:       5461B907-53F6-4D99-B70C-45E9C3902EB4
:END:

[[https://github.com/madnificent/org-roam-browser-extension][org-roam-browser-extension]] indicates via a browser icon whether you have ~org-roam~ notes on the web page you are visiting.

I should check this out.

** org-transclusion
:PROPERTIES:
:ID:       8D8E5E44-248E-485F-9C74-E1D7A8A19D15
:END:

/[[https://github.com/nobiot/org-transclusion][org-transclusion]] supports [[https://en.wikipedia.org/wiki/Transclusion][transclusion]] with org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-transclusion
  :after org
  :defer 5

  :config
  (dolist (element '(headline drawer property-drawer))
    (push element org-transclusion-exclude-elements))

  (face-spec-set 'org-transclusion-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  (face-spec-set 'org-transclusion-source-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  :general
  ("s-l" 'org-transclusion-add-all))
#+end_src

** vulpea
:PROPERTIES:
:ID:       697CE296-FAA8-4485-94D8-B1321B59226F
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 16:02]--[2023-02-25 Sat 16:33] =>  0:31
CLOCK: [2022-10-10 Mon 14:36]--[2022-10-10 Mon 15:31] =>  0:55
CLOCK: [2022-07-17 Sun 08:54]--[2022-07-17 Sun 09:27] =>  0:33
CLOCK: [2022-06-27 Mon 12:10]--[2022-06-27 Mon 12:31] =>  0:21
CLOCK: [2022-05-08 Sun 08:45]--[2022-05-08 Sun 09:07] =>  0:22
CLOCK: [2021-12-14 Tue 19:46]--[2021-12-14 Tue 20:06] =>  0:20
:END:

/[[https://github.com/d12frosted/vulpea][vulpea]] is a collection of functions for note taking based on ~org~ and ~org-roam~./

I use this package to define a dynamic agenda, as explained and illustrated [[d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][here]]. I've made some changes to the system in that link, specifically to exclude files and directories at various stages:
1. At the broadest level, I exclude files and directories from the function (~ps/org-id-auto-add-ids-to-headings-in-file~) that otherwise automatically adds an ID to every org heading in a file-visiting buffer. Headings so excluded are not indexed by org-roam, because a heading requires an ID to be indexed. See the variables ~ps/org-id-auto-add-excluded-files~ and ~ps/org-id-auto-add-excluded-directories~ under the ~org-id~ section of this file.
2. I then exclude some headings with IDs from the org-roam database (via the variables  ~org-roam-file-exclude-regexp~ and ~org-roam-db-node-include-function~). See the ~org-roam~ section of this file.
3. Finally, I selectively add to ~org-agenda-files~ files that satisfy certain conditions (as defined by ~ps/vulpea-project-p~) and files modified recently (as specified by ~ps/org-roam-recent~), and exclude from ~org-agenda-files~ files listed in ~ps/org-agenda-files-excluded~.

#+begin_src emacs-lisp :results silent
(use-package vulpea
  :after org org-roam
  :demand t
  :commands (vulpea-buffer-p vulpea-agenda-files-update vulpea-buffer-prop-get-list vulpea-project-update-tag)
  :config
  ;; adapted from
  (defvar ps/vulpea-excluded-directories nil
    "Directories containing files to exclude from list of projects")

  (defvar ps/vulpea-excluded-files (list
                                    ps/file-tlon-tareas-leo
                                    ps/file-tlon-tareas-fede)
    "files to exclude from list of projects")

  (defun ps/vulpea-project-p ()
    "Return non-nil if current buffer has a TODO, a schedule or a deadline.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (when (and (eq major-mode 'org-mode)

               ;; exclude dirs
               (not (member (file-name-directory (buffer-file-name))
                            ps/vulpea-excluded-directories))

               ;; exclude files
               (not (member (buffer-file-name) ps/vulpea-excluded-files)))

      (org-element-map
          (org-element-parse-buffer 'headline)
          'headline
        (lambda (headline)

        (or
           (eq (org-element-property :todo-type headline)
               'todo)
           (org-element-property :scheduled headline)
           (org-element-property :deadline headline)))
        nil
        'first-match)))

  (defun ps/vulpea-anniversary-p ()
    "Return non-nil if current buffer has an anniversary."
    (when (eq major-mode 'org-mode)
      (save-excursion
        (goto-char (point-min))
        (search-forward "%%(org-anniversary" nil t))))

  (defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag."
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (or (ps/vulpea-project-p) (ps/vulpea-anniversary-p))
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files
          (seq-difference
           (delete-dups (append
                         (org-agenda-files)
                         (vulpea-project-files)
                         ;; include files modified in past three days,
                         ;; provided number of such files less than 1000
                         (ps/org-roam-recent 1 500)
                         ))
           ps/org-agenda-files-excluded)))

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag))
#+end_src

** org-noter
:PROPERTIES:
:ID:       A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7
:END:
:LOGBOOK:
CLOCK: [2022-01-05 Wed 16:03]--[2022-01-05 Wed 16:11] =>  0:08
CLOCK: [2021-07-27 Tue 20:55]--[2021-07-27 Tue 22:17] =>  1:22
CLOCK: [2021-07-27 Tue 19:42]--[2021-07-27 Tue 20:15] =>  0:33
CLOCK: [2021-07-26 Mon 23:12]--[2021-07-26 Mon 23:29] =>  0:17
CLOCK: [2021-07-26 Mon 22:41]--[2021-07-26 Mon 23:03] =>  0:22
CLOCK: [2021-07-26 Mon 22:15]--[2021-07-26 Mon 22:32] =>  0:17
CLOCK: [2021-07-25 Sun 22:51]--[2021-07-25 Sun 22:55] =>  0:04
CLOCK: [2021-07-18 Sun 10:41]--[2021-07-18 Sun 11:09] =>  0:28
CLOCK: [2021-07-17 Sat 19:16]--[2021-07-17 Sat 19:52] =>  0:36
CLOCK: [2021-07-17 Sat 12:42]--[2021-07-17 Sat 13:24] =>  0:42
:END:

/[[https://github.com/weirdNox/org-noter][org-noter]] is an org-mode document annotator./

#+begin_src emacs-lisp :results silent
(use-package org-noter
  :after org
  :config
  (setq org-noter-notes-search-path `(,ps/dir-bibliographic-notes))
  (setq org-noter-auto-save-last-location t)
  (setq org-noter-always-create-frame nil)
  ;; (org-noter-property-doc-file "file") ;; change to this once everything is working
  (setq org-noter-separate-notes-from-heading t)

  :general
  (pdf-annot-minor-mode-map
   "s-s" 'org-noter-create-skeleton))
#+end_src

- To check: https://org-roam.discourse.group/t/org-roam-bibtex-in-a-sub-directory/649/5
- https://notes.andymatuschak.org/About_these_notes

* reference & citation
:PROPERTIES:
:ID:       4939B006-F4F6-4A5C-9B78-85C998FDA7D8
:END:

See [[https://github.com/emacs-citar/citar/wiki/Comparisons#summary-of-diverse-emacs-bibliographic-and-citation-packages][this section]] of [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]]'s manual for a handy summary of the main bibliographic and citation Emacs packages.

** oc
:PROPERTIES:
:ID:       8AF25840-AC38-4FF7-A45F-F01B96C5DF5A
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 15:20]--[2022-06-22 Wed 15:26] =>  0:06
CLOCK: [2021-07-26 Mon 15:14]--[2021-07-26 Mon 15:56] =>  0:42
CLOCK: [2021-07-26 Mon 14:01]--[2021-07-26 Mon 14:26] =>  0:25
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc
  :after org
  :demand t
  :config/el-patch
  ;; Comment out `org-cite--allowed-p' condition to allow invocation
  ;; in any mode. Even if inserting a citation is not allowed, one may
  ;; want to invoke the command to trigger contextual actions via
  ;; `embark'.
  (defun org-cite-insert (arg)
    "Insert a citation at point.
Insertion is done according to the processor set in `org-cite-insert-processor'.
ARG is the prefix argument received when calling interactively the function."
    (interactive "P")
    (unless org-cite-insert-processor
      (user-error "No processor set to insert citations"))
    (org-cite-try-load-processor org-cite-insert-processor)
    (let ((name org-cite-insert-processor))
      (cond
       ((not (org-cite-get-processor name))
        (user-error "Unknown processor %S" name))
       ((not (org-cite-processor-has-capability-p name 'insert))
        (user-error "Processor %S cannot insert citations" name))
       (t
        (let ((context (org-element-context))
              (insert (org-cite-processor-insert (org-cite-get-processor name))))
          (cond
           ((memq (org-element-type context) '(citation citation-reference))
            (funcall insert context arg))
           (el-patch-remove
             ((org-cite--allowed-p context)
              (funcall insert nil arg)))
           (el-patch-swap
             (t
              (user-error "Cannot insert a citation here"))
             (t
              (funcall insert nil arg)))
           ))))))

  :config
  (setq org-cite-global-bibliography (list ps/file-bibliography-new
                                           ps/file-bibliography-old
                                           ps/file-bibliography-films))
  (setq org-cite-csl-styles-dir ps/dir-csl-styles)
  (setq org-cite-csl-locales-dir ps/dir-csl-locales)
  (setq org-cite-insert-processor 'citar)
  (setq org-cite-follow-processor 'citar) ; `org-open-at-point' integration
  (setq org-cite-activate-processor 'citar) ;
  (setq org-cite-export-processors
        '((md csl "effective-altruism-wiki-org-mode.csl" "effective-altruism-wiki-org-mode.csl")      ; Footnote reliant
          (latex csl "effective-altruism-wiki-org-mode.csl" "effective-altruism-wiki-org-mode.csl")   ; For philosophy
          (odt csl "effective-altruism-wiki-org-mode.csl" "effective-altruism-wiki-org-mode.csl")     ; Footnote reliant
          (docx csl "effective-altruism-wiki-org-mode.csl" "effective-altruism-wiki-org-mode.csl")    ; Footnote reliant
          (t csl "american-medical-association-brackets.csl")))) ; fallback
#+end_src

*** TODO Learn how to use ~org-cite~ style and variants
:PROPERTIES:
:ID:       78ADAFA7-1C32-4B13-ABD2-043B38B044F8
:END:
https://www.youtube.com/watch?v=48fIhQ9ozH4

*** TODO Learn how to use ~org-cite~ locators
:PROPERTIES:
:ID:       16071EF9-A033-416E-B61D-FE61297D2EE3
:END:
https://blog.tecosaur.com/tmio/2021-07-31-citations.html#cite-syntax
*** Resources
:PROPERTIES:
:ID:       8EA82227-F7EF-4C46-B40C-C5DE40F13130
:END:

- [cite:@Balintona2022CitationsOrgmodeOrgcite]. The most comprehensive explanation I'm aware of about how to use ~org-cite~. See [[https://www.reddit.com/r/orgmode/comments/vc7ys6/how_i_run_my_wiki_with_org_mode/][Reddit discussion]].
- [cite:@Kolsc2021HowActuallyInsert]. Reddit thread about the basics of ~org-cite~.

** oc-basic
:PROPERTIES:
:ID:       DD72A5D8-057E-4945-8EF0-E681904731D4
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc-basic
  :after oc
  :defer 20)
#+end_src

** oc-bibtex
:PROPERTIES:
:ID:       5515E05E-1A8F-40F1-B19F-BD48925C6679
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc-bibtex
  :after oc
  :defer 20)
#+end_src

** oc-biblatex
:PROPERTIES:
:ID:       126F2E2D-537E-45A0-8DD6-56B8FF69176D
:END:
:LOGBOOK:
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc-biblatex
  :after oc
  :defer 20)
#+end_src

** oc-csl
:PROPERTIES:
:ID:       72710244-0369-4C12-8B83-0674EE0E11D5
:END:

#+begin_src emacs-lisp :results silent
(use-feature oc-csl
  :after oc
  :defer 20)
#+end_src

** citeproc
:PROPERTIES:
:ID:       2BB202FC-87DE-4563-B059-01680F8A2CB6
:END:
:LOGBOOK:
CLOCK: [2022-06-24 Fri 12:23]--[2022-06-24 Fri 12:31] =>  0:08
:END:

/[[https://github.com/andras-simonyi/citeproc-el][citeproc]] is a CSL 1.0.2 Citation Processor for Emacs./

#+begin_src emacs-lisp :results silent
(use-package citeproc
  :defer 10)
#+end_src

** bibtex
:PROPERTIES:
:ID:       42191633-D2A1-4EDB-903F-3965ECB61510
:END:
:LOGBOOK:
CLOCK: [2023-03-26 Sun 20:16]--[2023-03-26 Sun 20:19] =>  0:03
CLOCK: [2022-07-16 Sat 16:38]--[2022-07-16 Sat 16:44] =>  0:06
:END:

/bibtex is major mode for editing and validating BibTeX ~.bib~ files./

#+begin_src emacs-lisp :results silent
(use-feature bibtex
  :demand t
  :config/el-patch
  ;; tweak function so that `bibtex-autokey-get-field' looks up `urldate' field
  (defun bibtex-autokey-get-year ()
    "Return year field contents as a string obeying `bibtex-autokey-year-length'."
    (let* ((str (bibtex-autokey-get-field '("date" "year" (el-patch-add "urldate")))) ; possibly ""
           (year (or (and (iso8601-valid-p str)
                          (let ((year (decoded-time-year (iso8601-parse str))))
                            (and year (number-to-string year))))
                     ;; BibTeX permits a year field "(about 1984)", where only
                     ;; the last four nonpunctuation characters must be numerals.
                     (and (string-match "\\([0-9][0-9][0-9][0-9]\\)[^[:alnum:]]*\\'" str)
                          (match-string 1 str))
                     (user-error "Year or date field `%s' invalid" str))))
      (substring year (max 0 (- (length year) bibtex-autokey-year-length)))))

  :config
  ;; This corresponds (roughly?) to `auth+year+shorttitle(3,3)' on Better BibTeX
  ;; retorque.re/zotero-better-bibtex/citing/
  (setq bibtex-autokey-names 1)
  (setq bibtex-autokey-name-case-convert 'capitalize)
  (setq bibtex-autokey-year-length 4)
  (setq bibtex-autokey-titlewords 3)
  (setq bibtex-autokey-titlewords-stretch 0)
  (setq bibtex-autokey-titleword-ignore '("A" "a" "An" "an" "On" "on" "The" "the" "Eine?" "Der" "Die" "Das" "El" "La" "Lo" "Los" "Las" "Un" "Una" "Unos" "Unas" "el" "la" "lo" "los" "las" "un" "una" "unos" "unas" "y" "o" "Le" "La" "L'" "Les" "Un" "Une" "Des" "Du" "De la" "De l'" "Des" "le" "la" "l'" "les" "un" "une" "des" "du" "de la" "de l'" "des" "Lo" "Il" "La" "L'" "Gli" "I" "Le" "Uno" "lo" "il" "la" "l'" "gli" "i" "le" "uno"))
  (setq bibtex-autokey-title-terminators "[.!?;]\\|--")
  (setq bibtex-autokey-titleword-case-convert 'capitalize)
  (setq bibtex-autokey-titleword-length nil)
  (setq bibtex-autokey-titleword-separator "")
  (setq bibtex-autokey-year-title-separator "")
  (setq bibtex-autokey-preserve-case t)
  ;; Remove accents
  (setq bibtex-autokey-before-presentation-function 'ps/bibtex-asciify-string)
  (setq bibtex-entry-format '(opts-or-alts numerical-fields realign))

  ;; Copied from xahlee.info/emacs/emacs/emacs_zap_gremlins.html
  (defun ps/bibtex-asciify-text (&optional Begin End)
    "Remove accents in some letters. e.g. café → cafe.
Change European language characters into equivalent ASCII ones.
When called interactively, work on current line or text selection.

URL `http://xahlee.info/emacs/emacs/emacs_zap_gremlins.html'
Version 2018-11-12 2021-09-17"
    (interactive)
    (let (($charMap
           [
            ["ß" "ss"]
            ["á\\|à\\|â\\|ä\\|ā\\|ǎ\\|ã\\|å\\|ą\\|ă\\|ạ\\|ả\\|ả\\|ấ\\|ầ\\|ẩ\\|ẫ\\|ậ\\|ắ\\|ằ\\|ẳ\\|ặ" "a"]
            ["æ" "ae"]
            ["ç\\|č\\|ć" "c"]
            ["é\\|è\\|ê\\|ë\\|ē\\|ě\\|ę\\|ẹ\\|ẻ\\|ẽ\\|ế\\|ề\\|ể\\|ễ\\|ệ" "e"]
            ["í\\|ì\\|î\\|ï\\|ī\\|ǐ\\|ỉ\\|ị" "i"]
            ["ñ\\|ň\\|ń" "n"]
            ["ó\\|ò\\|ô\\|ö\\|õ\\|ǒ\\|ø\\|ō\\|ồ\\|ơ\\|ọ\\|ỏ\\|ố\\|ổ\\|ỗ\\|ộ\\|ớ\\|ờ\\|ở\\|ợ" "o"]
            ["ú\\|ù\\|û\\|ü\\|ū\\|ũ\\|ư\\|ụ\\|ủ\\|ứ\\|ừ\\|ử\\|ữ\\|ự"     "u"]
            ["ý\\|ÿ\\|ỳ\\|ỷ\\|ỹ"     "y"]
            ["þ" "th"]
            ["ď\\|ð\\|đ" "d"]
            ["ĩ" "i"]
            ["ľ\\|ĺ\\|ł" "l"]
            ["ř\\|ŕ" "r"]
            ["š\\|ś" "s"]
            ["ť" "t"]
            ["ž\\|ź\\|ż" "z"]
            [" " " "]       ; thin space etc
            ["–" "-"]       ; dash
            ["—\\|一" "--"] ; em dash etc
            ])
          ($p1 (if Begin Begin
                 (if (region-active-p)
                     (region-beginning)
                   (line-beginning-position))))
          ($p2 (if End End
                 (if (region-active-p)
                     (region-end)
                   (line-end-position)))))
      (let ((case-fold-search t))
        (save-restriction
          (narrow-to-region $p1 $p2)
          (mapc
           (lambda ($pair)
             (goto-char (point-min))
             (while (re-search-forward (elt $pair 0) (point-max) t)
               (replace-match (elt $pair 1))))
           $charMap)))))

  (defun ps/bibtex-asciify-string (String)
    "Returns a new string. e.g. café → cafe.
See `xah-asciify-text'
Version 2015-06-08"
    (with-temp-buffer
      (insert String)
      (ps/bibtex-asciify-text (point-min) (point-max))
      (buffer-string)))

  (defun ps/bibtex-get-key ()
    "Return the key of the current BibTeX entry."
    (save-excursion
      (save-restriction
        (bibtex-narrow-to-entry)
        (goto-char (point-min))
        (if (re-search-forward "@\\w+{\\([^,]+\\),")
            (match-string-no-properties 1)
          (user-error "Not on a BibTeX entry")))))

  ;; Add custom 'video' field
  (push '("Video" "Video file"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("subtitle")
           ("titleaddon")
           ("language")
           ("version")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate"))) bibtex-biblatex-entry-alist)

  (push '("Movie" "Film"
          (("author" nil nil 0)
           ("title")
           ("date" nil nil 1)
           ("year" nil nil -1)
           ("url" nil nil 2))
          nil
          (("abstract")
           ("keywords")
           ("titleaddon")
           ("language")
           ("version")
           ("rating")
           ("note")
           ("organization")
           ("month")
           ("addendum")
           ("pubstate")
           ("eprintclass" nil nil 4)
           ("primaryclass" nil nil -4)
           ("eprinttype" nil nil 5)
           ("archiveprefix" nil nil -5)
           ("urldate"))) bibtex-biblatex-entry-alist)

  :general
  (bibtex-mode-map
   "A-C-H-x" 'bibtex-copy-entry-as-kill
   "A-C-H-c" 'bibtex-kill-entry
   "A-C-H-a" 'bibtex-copy-field-as-kill
   "A-C-H-f" 'bibtex-kill-field
   "A-C-s-r" 'bibtex-previous-entry
   "A-C-s-f" 'bibtex-next-entry))
#+end_src

*** TODO Define ~bibtex-autokey-get-year~ via elpatch
:PROPERTIES:
:ID:       B2291EF5-8546-4C47-AC33-C8DBD70E1BAA
:END:
*** TODO Move ratings from org headings to bibtex
:PROPERTIES:
:ID:       18A96B99-EAD2-4C1E-94C2-619903A52898
:END:

*** TODO Why bibtex generates a key starting with 'Boer' when the last name is deBoer?
:PROPERTIES:
:ID:       2FB7CCAA-E1FE-4B93-B441-DB9E8437233F
:END:

*** TODO [#6] Standardize author names in bibtex file
:PROPERTIES:
:ID:       8B243BA8-8CA1-4E6F-82CA-5CD950D8C498
:END:

** bibtex-completion
:PROPERTIES:
:ID:       DCD9D75D-7814-49D8-A3E0-33846D5A08FD
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 15:10]--[2022-05-29 Sun 15:15] =>  0:05
CLOCK: [2021-11-08 Mon 18:40]--[2021-11-08 Mon 18:53] =>  0:13
CLOCK: [2021-08-24 Tue 12:02]--[2021-08-24 Tue 12:11] =>  0:09
CLOCK: [2021-07-14 Wed 20:44]--[2021-07-14 Wed 21:21] =>  0:37
CLOCK: [2021-07-13 Tue 22:42]--[2021-07-13 Tue 23:08] =>  0:26
CLOCK: [2021-07-13 Tue 15:32]--[2021-07-13 Tue 16:01] =>  0:29
CLOCK: [2021-07-11 Sun 15:41]--[2021-07-11 Sun 15:42] =>  0:01
CLOCK: [2021-07-10 Sat 22:16]--[2021-07-10 Sat 22:49] =>  0:33
CLOCK: [2021-07-10 Sat 22:07]--[2021-07-10 Sat 22:07] =>  0:00
:END:

/[[https://github.com/tmalsburg/helm-bibtex][bibtex-completion]] is a backend for searching and managing bibliographies in Emacs./

The package is required by [[id:EC73B84D-530E-4179-BB67-F19110A543DF][org-roam-bibtex]].

#+begin_src emacs-lisp :results silent
(use-package bibtex-completion
  :defer 5
  :config
  (setq bibtex-completion-pdf-open-function 'find-file)
  (setq bibtex-completion-bibliography org-cite-global-bibliography)
  (setq bibtex-completion-notes-path ps/dir-bibliographic-notes)
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-dialect 'biblatex))
#+end_src

** org-roam-bibtex
:PROPERTIES:
:ID:       EC73B84D-530E-4179-BB67-F19110A543DF
:END:
:LOGBOOK:
CLOCK: [2022-08-30 Tue 14:58]--[2022-08-30 Tue 15:05] =>  0:07
CLOCK: [2022-06-26 Sun 08:47]--[2022-06-26 Sun 09:08] =>  0:21
CLOCK: [2021-07-27 Tue 23:26]--[2021-07-27 Tue 23:54] =>  0:28
CLOCK: [2021-07-26 Mon 12:38]--[2021-07-26 Mon 13:16] =>  0:38
CLOCK: [2021-07-26 Mon 12:28]--[2021-07-26 Mon 12:29] =>  0:01
CLOCK: [2021-07-26 Mon 11:17]--[2021-07-26 Mon 11:26] =>  0:09
CLOCK: [2021-07-14 Wed 21:56]--[2021-07-14 Wed 22:45] =>  0:49
:END:

/[[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] integrates [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]] and [[id:42191633-D2A1-4EDB-903F-3965ECB61510][bibtex]]./

#+begin_src emacs-lisp :results silent
(use-package org-roam-bibtex
  :defer 5
  :after bibtex-completion org-roam
  :config
  (setq orb-roam-ref-format 'org-cite)
  (setq orb-insert-interface 'citar-open-notes)
  (setq orb-note-actions-interface 'default)
  (setq orb-attached-file-extensions '("pdf"))
  (dolist (keyword '("year" "title" "url" "keywords"))
    (add-to-list 'orb-preformat-keywords keyword))
  (org-roam-bibtex-mode))
#+end_src

** citar
:PROPERTIES:
:ID:       67AB4C5F-2425-4D31-9590-9D13790B4C97
:END:
:LOGBOOK:
CLOCK: [2022-10-04 Tue 22:47]--[2022-10-05 Wed 01:01] =>  2:14
CLOCK: [2022-10-03 Mon 19:15]--[2022-10-03 Mon 19:53] =>  0:38
CLOCK: [2022-08-30 Tue 15:09]--[2022-08-30 Tue 15:15] =>  0:06
CLOCK: [2022-07-16 Sat 14:32]--[2022-07-16 Sat 14:45] =>  0:13
CLOCK: [2022-06-23 Thu 16:45]--[2022-06-23 Thu 18:15] =>  1:30
CLOCK: [2022-06-22 Wed 15:26]--[2022-06-22 Wed 15:42] =>  0:16
CLOCK: [2021-07-26 Mon 14:26]--[2021-07-26 Mon 15:14] =>  0:48
:END:

/[[https://github.com/bdarcus/bibtex-actions][citar]] is a package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents./

#+begin_src emacs-lisp :results silent
(use-package citar
  :elpaca
  (citar :type git
         :host github
         :repo "emacs-citar/citar"
         :includes (citar-org))
  :after oc vertico embark marginalia
  :demand t
  :config
  (setq citar-open-note-functions '(orb-citar-edit-note))
  (setq citar-bibliography org-cite-global-bibliography)
  (setq citar-notes-paths `(,ps/dir-bibliographic-notes))
  (setq citar-at-point-function 'embark-act)
  (setq citar-symbols
        `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (setq citar-symbol-separator "  ")
  (setq citar-format-reference-function 'citar-citeproc-format-reference)

  (require 'citar-org-roam)
  (citar-register-notes-source
   'orb-citar-source (list :name "Org-Roam Notes"
                           :category 'org-roam-node
                           :items #'citar-org-roam--get-candidates
                           :hasitems #'citar-org-roam-has-notes
                           :open #'citar-org-roam-open-note
                           :create #'orb-citar-edit-note
                           :annotate #'citar-org-roam--annotate))

  (setq citar-notes-source 'orb-citar-source)

  (defun ps/citar-open-in-ebib (citekey)
    "Open bibliographic entry associated with the CITEKEY in Ebib."
    (interactive (list (citar-select-ref)))
    (unless (get-buffer "*ebib*")
      (ebib))
    (ps/ebib-open-key citekey))

  (defun ps/citar-open-file-at-point ()
    "Launch citar with citekey associated with file at point."
    (interactive)
    (citar-open `(,(ps/get-stem-of-current-buffer))))

  (defun ps/citar-update-old-bibliography ()
    "Update bibliography."
    (interactive)
    (citar-cache--update-bibliography
     (citar-cache--get-bibliography ps/file-bibliography-old)))

  (run-with-idle-timer (* 15 60) nil #'ps/citar-update-old-bibliography)

  (tlon-init-override-code-if-available
   :ps/citar-keybindings
   '(
     (general-define-key
      "H-/" 'citar-insert-citation
      "A-H-M-s-?" 'ps/citar-open-file-at-point ; i.e. H-S-/
      )
     (general-define-key
      :keymaps '(citar-map citar-citation-map)
      "c" 'embark-copy-as-kill
      "d" 'ps/ebib-download-dwim
      "i" 'ps/citar-open-in-ebib
      "s" 'ps/ebib-search-dwim
      "u" 'citar-open-links))))
#+end_src

*** TODO Tweak note creation function so that it adds a tag with the work type
:PROPERTIES:
:ID:       FB459DDE-BFDD-4740-9FFA-7AFFB74A38D1
:END:
Having headings tagged with the type of work they are notes of allows me to query the org-roam db specifically for notes of a particular type.

*** Resources
:PROPERTIES:
:ID:       EAB0E32B-129C-4980-A06B-94B4C25966E2
:END:

[cite:@Balintona2022CitationsOrgmodeOrgcite]

** citar-citeproc
:PROPERTIES:
:ID:       8CE6DBC7-E180-4E6D-B6E2-8D1E2756E765
:END:

/[[https://github.com/emacs-citar/citar/blob/main/citar-citeproc.el][citar-citeproc]] provides Citeproc reference support for citar./

#+begin_src emacs-lisp :results silent
(use-feature citar-citeproc
  :demand t
  :after citar citeproc
  :config
  (setq citar-citeproc-csl-styles-dir org-cite-csl-styles-dir)
  (setq citar-citeproc-csl-locales-dir org-cite-csl-locales-dir))
#+end_src

** citar-embark
:PROPERTIES:
:ID:       846EEC59-E022-41B7-96D3-4B379F8F91D4
:END:

/[[https://github.com/emacs-citar/citar/tree/9d7088c1fe82e9cfa508ead7ef7738c732556644#embark][citar-embark]] adds contextual access actions in the minibuffer and at-point via the citar-embark-mode minor mode./

#+begin_src emacs-lisp :results silent
(use-package citar-embark
  :after citar embark
  :demand t
  :config
  (citar-embark-mode))
#+end_src

** citar-org-roam
:PROPERTIES:
:ID:       894C33F7-BB88-403B-92EA-260DD73B4B23
:END:

/[[https://github.com/emacs-citar/citar-org-roam][citar-org-roam]] provides integration between [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]] and [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]]./

#+begin_src emacs-lisp :results silent
(use-package citar-org-roam
  :elpaca (citar-org-roam
           :host github
           :repo "emacs-citar/citar-org-roam")
  :after citar org-roam
  :demand t
  :no-require t)
#+end_src

** org-ref
:PROPERTIES:
:ID:       1FC5528A-9F5A-4A9D-B168-5A1F51110455
:END:

/[[https://github.com/jkitchin/org-ref][org-ref]] supports citations, cross-references, bibliographies in org-mode and useful bibtex tools./

#+begin_src emacs-lisp :results silent
(use-package org-ref
  :defer 20

  :config
  ;; (org-ref-insert-cite-function
  ;;       (org-cite-insert nil))
  (setq org-ref-bibtex-pdf-download-dir ps/dir-downloads)
  (setq bibtex-completion-library-path ps/dir-library-pdf)

  ;; Tweak function to remove redundant and conflicting `Year' field
  (defun isbn-to-bibtex (isbn bibfile)
    "Get bibtex entry for ISBN and insert it into BIBFILE.
Nothing happens if an entry with the generated key already exists
in the file. Data comes from www.ebook.de."
    (interactive
     (list
      (read-string
       "ISBN: "
       ;; now set initial input
       (cond
        ;; If region is active and it starts with a number, we use it
        ((and  (region-active-p)
               (s-match "^[0-9]" (buffer-substring (region-beginning) (region-end))))
         (buffer-substring (region-beginning) (region-end)))
        ;; if first entry in kill ring starts with a number assume it is an isbn
        ;; and use it as the guess
        ((stringp (car kill-ring))
         (when (s-match "^[0-9]" (car kill-ring))
           (car kill-ring)))
        ;; type or paste it in
        (t
         nil)))
      (completing-read "Bibfile: " (org-ref-possible-bibfiles))))

    (let* ((url (format "https://www.ebook.de/de/tools/isbn2bibtex?isbn=%s" isbn))
           (entry))
      (with-current-buffer (url-retrieve-synchronously url t t)
        (goto-char (point-min))
        (when (re-search-forward "@[a-zA-Z]+{.+\\(\n\s+[^\n]+\\)+}$" nil t)
          (setq entry (match-string 0))
          ;; FIXME: This isn't working
          (s-replace-regexp "^  Year =.*" "" entry)))

      (if (not entry)
          (message "Nothing found.")
        (find-file bibfile)
        (goto-char (point-max))
        (insert (with-temp-buffer
                  (insert (concat entry "\n}"))
                  (goto-char (point-min))
                  ;; [2020-06-06 Sat] I got a report that ottobib returns entries
                  ;; with ,, in the first line. here if we find one, I eliminate
                  ;; one of them.
                  (when (re-search-forward ",," nil t)
                    (delete-char -1))
                  (org-ref-isbn-clean-bibtex-entry)
                  ;; TODO: Uncomment the line below when you fix the FIXME issue above
                  ;; (org-ref-clean-bibtex-entry)
                  (bibtex-fill-entry)
                  (s-trim (buffer-string))))
        (save-buffer))))

  (delete 'orcb-check-journal org-ref-clean-bibtex-entry-hook)
  (delete 'orcb-download-pdf org-ref-clean-bibtex-entry-hook))
#+end_src
*** TODO Define ~isbn-to-bibtex~ via elpatch
:PROPERTIES:
:ID:       A3B5FC74-45C6-475C-8D31-B8355F12747C
:END:
** doi-utils
:PROPERTIES:
:ID:       0A568E85-C775-4894-BE59-A7DAB0F41F87
:END:

/[[https://github.com/jkitchin/org-ref/blob/master/doi-utils.el][doi-utils]] is a set of DOI utilities for making bibtex entries. It is part of [[id:1FC5528A-9F5A-4A9D-B168-5A1F51110455][org-ref]]./

#+begin_src emacs-lisp :results silent
(use-feature doi-utils
  :demand t
  :after org-ref
  :config
  (defun ps/doi-utils-doi-p (string)
    "Return `t' if string is a valid DOI."
    (string-match "^10.[[:digit:]]\\{4,9\\}/[().-;A-Z_-]+$" string)))
#+end_src

** ebib
:PROPERTIES:
:ID:       A744824B-1FE1-4721-8318-1FDDE3758A7A
:END:
:LOGBOOK:
CLOCK: [2023-05-07 Sun 11:35]--[2023-05-07 Sun 12:45] =>  1:10
CLOCK: [2023-04-30 Sun 18:51]--[2023-04-30 Sun 18:57] =>  0:06
CLOCK: [2023-04-21 Fri 20:39]--[2023-04-21 Fri 20:42] =>  0:03
CLOCK: [2023-04-11 Tue 00:58]--[2023-04-11 Tue 01:55] =>  0:57
CLOCK: [2023-03-27 Mon 21:29]--[2023-03-27 Mon 21:45] =>  0:16
CLOCK: [2023-03-27 Mon 20:49]--[2023-03-27 Mon 21:14] =>  0:25
CLOCK: [2023-03-22 Wed 13:55]--[2023-03-22 Wed 14:00] =>  0:05
CLOCK: [2023-03-19 Sun 12:35]--[2023-03-19 Sun 12:58] =>  0:23
CLOCK: [2023-03-12 Sun 19:36]--[2023-03-12 Sun 20:19] =>  0:43
CLOCK: [2022-09-22 Thu 14:39]--[2022-09-22 Thu 15:15] =>  0:36
CLOCK: [2022-09-13 Tue 17:29]--[2022-09-13 Tue 17:56] =>  0:27
CLOCK: [2022-09-13 Tue 16:36]--[2022-09-13 Tue 17:05] =>  0:29
CLOCK: [2022-09-13 Tue 15:51]--[2022-09-13 Tue 16:36] =>  0:45
CLOCK: [2022-09-09 Fri 15:11]--[2022-09-09 Fri 17:18] =>  2:07
CLOCK: [2022-09-09 Fri 11:53]--[2022-09-09 Fri 12:47] =>  0:54
CLOCK: [2022-09-09 Fri 11:39]--[2022-09-09 Fri 11:50] =>  0:11
CLOCK: [2022-09-05 Mon 15:47]--[2022-09-05 Mon 16:00] =>  0:13
CLOCK: [2022-09-03 Sat 14:28]--[2022-09-03 Sat 16:15] =>  1:47
CLOCK: [2022-08-31 Wed 15:08]--[2022-08-31 Wed 16:37] =>  1:29
CLOCK: [2022-08-31 Wed 14:17]--[2022-08-31 Wed 14:30] =>  0:13
CLOCK: [2022-08-30 Tue 16:13]--[2022-08-30 Tue 21:18] =>  5:05
CLOCK: [2022-08-30 Tue 15:23]--[2022-08-30 Tue 16:10] =>  0:47
CLOCK: [2022-08-30 Tue 13:23]--[2022-08-30 Tue 14:58] =>  1:35
CLOCK: [2022-08-27 Sat 12:47]--[2022-08-27 Sat 13:55] =>  1:08
CLOCK: [2022-08-26 Fri 17:38]--[2022-08-26 Fri 20:36] =>  2:58
CLOCK: [2022-08-26 Fri 11:54]--[2022-08-26 Fri 12:33] =>  0:39
CLOCK: [2022-08-26 Fri 10:32]--[2022-08-26 Fri 11:48] =>  1:16
CLOCK: [2022-08-24 Wed 13:04]--[2022-08-24 Wed 13:18] =>  0:14
CLOCK: [2022-08-23 Tue 13:50]--[2022-08-23 Tue 13:58] =>  0:08
CLOCK: [2022-07-16 Sat 14:45]--[2022-07-16 Sat 15:17] =>  0:32
:END:

/[[https://github.com/joostkremers/ebib][ebib]] ([[http://joostkremers.github.io/ebib/][homepage]]) is a BibTeX database manager for Emacs./

#+begin_src emacs-lisp :results silent
(use-package ebib
  :defer 5
  :config/el-patch
  ;; tweak original function to prevent unnecessary vertical window splits
  (defun ebib--setup-windows ()
    "Create Ebib's window configuration.
If the index buffer is already visible in some frame, select its
window and make the frame active,"
    (let ((index-window (get-buffer-window (ebib--buffer 'index) t))
          (old-frame (selected-frame)))
      (if index-window
          (progn (select-window index-window t)
                 (unless (eq (window-frame) old-frame)
                   (select-frame-set-input-focus (window-frame))
                   (setq ebib--frame-before old-frame)))
        (setq ebib--saved-window-config (current-window-configuration))
        (setq ebib--frame-before nil)
        (cond
         ((eq ebib-layout 'full)
          (delete-other-windows))
         ((eq ebib-layout 'custom)
          (setq ebib--window-before (selected-window))
          (delete-other-windows)
          (let ((width (cond
                        ((integerp ebib-width)
                         (- (window-total-width) ebib-width))
                        ((floatp ebib-width)
                         (- (window-total-width) (truncate (* (window-total-width) ebib-width)))))))
            (select-window (split-window (selected-window) width t)))))
        (let* ((index-window (selected-window))
               (entry-window (el-patch-swap
                               (split-window index-window ebib-index-window-size
                                             ebib-window-vertical-split)
                               (selected-window))))
          (switch-to-buffer (ebib--buffer 'index))
          (unless (eq ebib-layout 'index-only)
            (set-window-buffer entry-window (ebib--buffer 'entry)))
          (el-patch-remove
            (set-window-dedicated-p index-window t))
          (if (eq ebib-layout 'custom)
              (set-window-dedicated-p entry-window t)))))
    (if (buffer-local-value 'ebib--dirty-index-buffer (ebib--buffer 'index))
        (setq ebib--needs-update t)))

  ;; tweak original function to pass custom arguments to `format-time-string'
  (defun ebib--store-entry (entry-key fields db &optional timestamp if-exists)
    "Store the entry defined by ENTRY-KEY and FIELDS into DB.
Optional argument TIMESTAMP indicates whether a timestamp is to
be added to the entry.  Note that for a timestamp to be added,
`ebib-use-timestamp' must also be set to T. IF-EXISTS is as for
`ebib-db-set-entry'.

If storing the entry was successful, return the key under which
the entry is actually stored (which, if IF-EXISTS is `uniquify',
may differ from ENTRY-KEY); otherwise return nil.  Depending on
the value of IF-EXISTS, storing an entry may also result in an
error."
    (let ((actual-key (ebib-db-set-entry entry-key fields db if-exists)))
      (when (and actual-key timestamp ebib-use-timestamp)
        (ebib-set-field-value "timestamp" (format-time-string ebib-timestamp-format (el-patch-add nil "GMT")) actual-key db 'overwrite))
      actual-key))

  ;; We tweak the two functions below so that focus doesn't move away
  ;; from the current entry when the database is saved or reloaded.
  (defun ebib--save-database (db &optional force)
    "Save the database DB.
The FORCE argument is used as in `ebib-save-current-database'."
    ;; See if we need to make a backup.
    (when (and (ebib-db-backup-p db)
               (file-exists-p (ebib-db-get-filename db)))
      (ebib--make-backup (ebib-db-get-filename db))
      (ebib-db-set-backup nil db))

    ;; Check if the file has changed on disk.
    (let ((db-modtime (ebib-db-get-modtime db))
          (file-modtime (ebib--get-file-modtime (ebib-db-get-filename db))))
      ;; If the file to be saved has been newly created, both modtimes are nil.
      (when (and db-modtime file-modtime
                 (time-less-p db-modtime file-modtime))
        (unless (or (and (listp force)
                         (eq 16 (car force)))
                    (yes-or-no-p (format "File `%s' changed on disk.  Overwrite? " (ebib-db-get-filename db))))
          (error "[Ebib] File not saved"))))

    ;; Now save the database.
    (el-patch-swap
      (with-temp-buffer
        (ebib--format-database-as-bibtex db)
        (write-region (point-min) (point-max) (ebib-db-get-filename db)))
      (let ((buf (current-buffer)))
        (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
        (with-temp-buffer
          (ebib--format-database-as-bibtex db)
          (write-region (point-min) (point-max) (ebib-db-get-filename db)))))
    (ebib--set-modified nil db))

  (defun ebib-reload-current-database ()
    "Reload the current database from disk."
    (interactive)
    (ebib--execute-when
      (entries
       (when (or (and (ebib-db-modified-p ebib--cur-db)
                      (yes-or-no-p "Database modified.  Really reload from file? "))
                 (y-or-n-p "Reload current database from file? "))
         (el-patch-remove
           (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
           (ebib--reload-database ebib--cur-db)
           (ebib--set-modified nil ebib--cur-db)
           (ebib--update-buffers)
           (message "Database reloaded"))
         (el-patch-add
           (ps/ebib-reload-current-database-no-confirm))))
      (default
       (beep))))

  ;; hack to solve the issue whereby hitting `RET' in
  ;; `ebib-index-mode' sometimes does not edit the entry at point
  (defun ebib-edit-entry ()
    "Edit the current BibTeX entry."
    (interactive)
    (ebib--execute-when
      (entries
       (el-patch-add
         (if (string= (what-line) "Line 1")
             (progn
               (ebib-next-entry)
               (ebib-prev-entry))
           (ebib-prev-entry)
           (ebib-next-entry)))
       (ebib--edit-entry-internal))
      (default
       (beep))))

  :config
  (setq ebib-preload-bib-files org-cite-global-bibliography)
  (setq ebib-notes-directory ps/dir-bibliographic-notes)
  (setq ebib-notes-use-org-capture t)
  (setq ebib-notes-display-max-lines 9999)
  (setq ebib-filename-separator ";")
  (setq ebib-file-associations nil) ; do not open any file types externally
  (setq ebib-layout 'index-only)
  (setq ebib-bibtex-dialect 'biblatex)
  (setq ebib-use-timestamp t)
  (setq ebib-timestamp-format "%Y-%m-%d %T (%Z)")
  (setq ebib-save-xrefs-first nil)
  (setq ebib-default-entry-type "online")
  (setq ebib-uniquify-keys t)
  (setq ebib-index-columns '(("Entry Key" 30 t)
                             ("Author/Editor" 25 t)
                             ("Year" 4 t)
                             ("Title" 50 t)))
  (setq ebib-extra-fields '((biblatex "crossref" "xdata" "annotation" "abstract" "keywords" "file" "journal" "rating" "timestamp")
                            (BibTeX "crossref" "annote" "abstract" "keywords" "file" "timestamp" "url" "doi")))
  (setq ebib-hidden-fields '("addendum" "afterword" "annotator" "archiveprefix" "bookauthor" "booksubtitle" "booktitleaddon" "chapter" "commentator" "edition" "editora" "editorb" "editorc" "eid" "eprint" "eprintclass" "eprinttype" "eventdate" "eventtitle" "foreword" "holder" "howpublished" "introduction" "isrn" "issn" "issue" "issuesubtitle" "issuetitle" "issuetitleaddon" "journaltitleadddon" "journalsubtitle" "language" "location" "mainsubtitle" "maintitle" "maintitleaddon" "month" "origlanguage" "pagetotal" "part" "primaryclass" "remark" "subtitle" "urldate" "venue" "version" "volumes" "year"))

  (defun ps/ebib-open-or-switch ()
    "Open ebib in the right window or switch to it if already open."
    (interactive)
    (ps/window-split-if-unsplit)
    (if (> (frame-width) ps/frame-width-threshold)
        (winum-select-window-3)
      (winum-select-window-2))
    (ebib))

  (defun ps/ebib-reload-current-database-no-confirm ()
    "Reload the current database from disk, without confirmation."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((buf (current-buffer)))
         (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)
         (ebib--reload-database ebib--cur-db)
         (ebib--set-modified nil ebib--cur-db)
         ;; This is the line that causes point to disappear, but
         ;; disabling it seems harmless.
         ;; (ebib--update-buffers)
         (message "Database reloaded")))
      (default
       (beep))))

  ;; these two functions, together with the associated timers, detect
  ;; when a database has changed and save its contents to the corresponding bib
  ;; file
  (defun ps/ebib-auto-save-new-db ()
    "docstring"
    (when (ebib-db-modified-p (car ebib--databases))
      (ebib-save-current-database '(16)))
    (run-with-timer 10 nil #'ps/ebib-auto-save-new-db))

  (run-with-timer 10 nil #'ps/ebib-auto-save-new-db)

  (defun ps/ebib-auto-save-old-db ()
    "docstring"
    (when (ebib-db-modified-p (cadr ebib--databases))
      (ebib-save-current-database '(16))
      (cancel-function-timers #'ps/ebib-auto-save-old-db)
      (run-with-idle-timer 60 nil #'ps/ebib-auto-save-old-db)))

  (run-with-idle-timer 60 nil #'ps/ebib-auto-save-old-db)

  ;; these two function calls, in turn, detect when a bib file has changed
  ;; and reload the corresponding database
  (file-notify-add-watch
   ps/file-bibliography-new
   '(change attribute-change)
   (lambda (event)
     (ps/ebib-reload-current-database-no-confirm)))

  (file-notify-add-watch
   ps/file-bibliography-old
   '(change attribute-change)
   (lambda (event)
     (ps/ebib-reload-current-database-no-confirm)))

  (defvar ps/ebib-isbn-p
    "\\(ISBN-*\\(1[03]\\)* *\\(: \\)?\\)*\\(\\([0-9Xx][ -]*\\)\\{13\\}\\|\\([0-9Xx][ -]*\\)\\{10\\}\\)")

  (defun ps/ebib-isbn-p (string)
    "Return `t' if string looks like an ISBN."
    (string-match ps/ebib-isbn-p string))

  (defun ps/ebib-get-isbn ()
    "Return ISBN for the current entry, if it exists."
    (when-let ((isbn
                (ebib-get-field-value
                 "isbn"
                 (ebib--get-key-at-point)
                 ebib--cur-db
                 'noerror
                 'unbraced
                 'xref)))
      (car (split-string
            (s-replace "-"
                       ""
                       (substring-no-properties
                        isbn))
            " "))))

  (defun ps/ebib-video-p (string)
    "Return `t' if string looks like a video URL."
    ;; TODO: Add more video sites
    (string-match
     "https?://\\(www\\.\\)?\\(youtube\\.com/watch\\?v=\\|youtu.be/\\)\\([a-zA-Z0-9_-]+\\)"
     string))

  (defun ps/ebib--update-file-field-contents (key file-name)
    "docstring"
    (let* ((field "file")
           (file-field-contents (ebib-get-field-value field key ebib--cur-db t t)))
      (unless (and
               file-field-contents
               (catch 'file-exists
                 (dolist (file (ebib--split-files file-field-contents))
                   (when (string= file file-name)
                     (throw 'file-exists file)))))
        (ebib-set-field-value field file-name key ebib--cur-db ";")
        (ebib--store-multiline-text (current-buffer))
        (ebib--redisplay-field field)
        (ebib--redisplay-index-item field)
        (ebib-save-current-database t))))

  ;; TODO: refactor the two commands below into a single command
  (defun ps/ebib-download-by-identifier (&optional id)
    "docstring"
    (interactive)
    (let ((id (or id
                  (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (ps/ebib-get-isbn)
                  (ebib-get-field-value "url" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (read-string "Enter ISBN or DOI: "))))
      ;; TODO: Add support for arXiv
      (pcase id
        (ps/doi-utils-doi-p
         (ps/ebib-download-doi id))
        (ps/ebib-isbn-p
         (ps/ebib-download-book nil id))
        (ps/ebib-video-p
         (ps/ebib-download-video id))
        (_
         (user-error "Identifier does not appear to be an ISBN or DOI")))))

  (defun ps/ebib-search-by-identifier (&optional id)
    "docstring"
    (interactive)
    (let ((id (or id
                  (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
                  (ps/ebib-get-isbn)
                  (read-string "Enter ISBN or DOI: "))))
      ;; TODO: Add support for arXiv
      (cond ((ps/doi-utils-doi-p id)
             (ps/ebib-search-article nil id))
            ((ps/ebib-isbn-p id)
             (ps/ebib-search-book nil id))
            (t
             (user-error "Identifier does not appear to be an ISBN or DOI.")))))

  (defun ps/ebib--search-or-download-dwim (action)
    "docstring"
    (if (string= (ebib--current-field) "title")
        (when-let ((type (ebib-get-field-value "=type=" (ebib--get-key-at-point)
                                               ebib--cur-db)))
          (cond
           ((member type
                    '("book" "collection" "mvbook" "inbook" "incollection" "bookinbook" "suppbook" "Book" "Collection" "MVBook" "Inbook" "Incollection" "Bookinbook" "Suppbook"))
            (cond ((eq action 'search)
                   (ps/ebib-search-book-by-title))
                  ((eq action 'download)
                   (ps/ebib-download-book-by-title))))
           ((member type '("article" "Article"))
            (cond ((eq action 'search)
                   (ps/ebib-search-article-by-title))
                  ((eq action 'download)
                   (ps/ebib-download-article-by-title))))
           (t
            (user-error (format "No action defined for entries of type `%s'" type)))))
      (cond ((eq action 'search)
             (ps/ebib-search-by-identifier))
            ((eq action 'download)
             (ps/ebib-download-by-identifier)))))

  (defun ps/ebib-search-dwim ()
    "If field at point is 'title', run a search with its value, else use identifier.
  The list of websites for the search query is defined by the
  variable `ps/ebib-search-book'"
    (interactive)
    (ps/ebib--search-or-download-dwim 'search))

  (defun ps/ebib-download-dwim ()
    "If field at point is 'title', run a search with its value, else use identifier.
The list of websites for the search query is defined by the
  variable `ps/ebib-download-book'"
    (interactive)
    (ps/ebib--search-or-download-dwim 'download))

  (defun ps/ebib-get-file (extension)
    "docstring"
    (when-let ((files (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t t)))
      (catch 'tag
        (mapc
         (lambda (file)
           (when (equal (file-name-extension file) extension)
             (throw 'tag file)))
         (ebib--split-files files))
        nil)))

  (defun ps/ebib-open-file (extension)
    "Open file with EXTENSION in entry at point, if it (uniquely)
exists."
    (interactive)
    (if-let ((file-name (ps/ebib-get-file extension)))
        (find-file file-name)
      (user-error (format "No (unique) `%s' file found" extension))))

  (defun ps/ebib-open-file-externally (extension)
    "Open file with EXTENSION in entry at point, if it (uniquely)
exists."
    (interactive)
    (if-let ((file-name (expand-file-name (ps/ebib-get-file extension))))
        (shell-command (format "open '%s'" file-name))
      (user-error (format "No (unique) `%s' file found" extension))))

  (defun ps/ebib-open-pdf-file ()
    "Open `pdf' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file "pdf"))

  (defun ps/ebib-open-webm-file ()
    "Open `webm' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "webm"))

  (defun ps/ebib-open-mp3-file ()
    "Open `webm' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "mp3"))

  (defun ps/ebib-open-pdf-file-externally ()
    "Open `pdf' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file-externally "pdf"))

  (defun ps/ebib-open-html-file ()
    "Open `html' file in entry at point, if it (uniquely) exists."
    (interactive)
    (ps/ebib-open-file "html")
    (let ((html-buffer (buffer-name))
          (browse-url-handlers nil)
          (browse-url-browser-function #'eww-browse-url))
      (browse-url-of-buffer)
      (kill-buffer html-buffer)))

  (defun ps/ebib-open-file-dwim ()
    "Open file in entry at point.
If the entry contains more than one file, use the preference
ordering defined in `ps/ebib-valid-file-extensions'."
    (interactive)
    (if-let ((extension
              (catch 'tag
                (dolist (extension ps/ebib-valid-file-extensions)
                  (when (ps/ebib-get-file extension)
                    (throw 'tag extension))))))
        (call-interactively
         (intern
          (concat "ps/ebib-open-" extension "-file")))
      (user-error "No file found.")))

  (defun ps/ebib-validate-file-stem ()
    "Check that stem of each attached file equals entry's unique key."
    (when-let ((files (ebib-get-field-value "file" (ebib--get-key-at-point) ebib--cur-db t t)))
      (when
          (catch 'tag
            (mapc
             (lambda (file)
               (unless (equal (file-name-base file)
                              (ebib--get-key-at-point))
                 (throw 'tag file)))
             (ebib--split-files files))
            nil)
        (user-error "Invalid file stem"))))

  (defun ps/ebib-rename-files ()
    "Rename files in entry at point so that the file stems match the
corresponding entry key."
    (interactive)
    (ebib--execute-when
      (entries
       (let* ((field "file")
              (key (ebib--get-key-at-point))
              (file-list (split-string
                          (ebib-get-field-value field key ebib--cur-db t t)
                          ";")))
         (unless (ps/ebib-valid-key-p key)
           (user-error "Entry has an invalid key; pleasse regenerate it"))
         (when file-list
           (ebib-delete-field-contents field t)
           (dolist (filename file-list)
             (let ((stem (file-name-base filename))
                   (extension (file-name-extension filename)))
               (unless (equal stem key)
                 (let ((new-filename
                        (ps/ebib--rename-and-abbreviate-file
                         (ps/ebib--extension-directories extension)
                         key
                         extension)))
                   (rename-file filename new-filename)
                   (setq filename new-filename)))
               (ebib-set-field-value field filename key ebib--cur-db ";")))
           (ebib--redisplay-field field)
           (ebib--redisplay-index-item field))))
      ;; (ebib-save-current-database nil))))
      (default
       (beep))))

  ;; We abbreviate the filename so that it works when invoked by my collaborators
  (defun ps/ebib--rename-and-abbreviate-file (directory key &optional extension)
    "docstring"
    (file-name-concat
     (abbreviate-file-name
      directory)
     (if extension
         (file-name-with-extension key extension)
       key)))

  (defun ps/ebib-valid-key-p (&optional key)
    "docstring"
    (let ((key (or key
                   (ebib--get-key-at-point))))
      (string-match
       "^[_[:alnum:]-]\\{2,\\}[[:digit:]]\\{4\\}[_[:alnum:]]\\{2,\\}$"
       key)))

  (defun ps/ebib--extension-directories (extension)
    "Return directory associated with EXTENSION."
    (cond ((string= extension "pdf")
           ps/dir-library-pdf)
          ((string= extension "html")
           ps/dir-library-html)
          ((or (string= extension "webm")
               (string= extension "mp3")
               (string= extension "flac"))
           ps/dir-library-media)
          (t
           (user-error "Invalid file extension"))))

  (defun ps/ebib-attach-file (&optional most-recent)
    "Prompt the user for a file to attach to the current entry.
If MOST-RECENT is non-nil, attach the most recent file instead."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((key (ebib--get-key-at-point)))
         (unless (ps/ebib-valid-key-p key)
           (user-error "Entry has an invalid key; pleasse regenerate it."))
         (let* ((field "file")
                (file-to-attach
                 (if most-recent
                     (ps/newest-file ps/dir-downloads)
                   (let ((initial-folder
                          (completing-read "Select folder: "
                                           (list
                                            ps/dir-downloads
                                            ps/dir-library-html
                                            ps/dir-library-pdf
                                            ps/dir-library-media))))
                     (read-file-name
                      "File to attach: "
                      ;; Use key as default selection if key-based file exists
                      ;; else default to `initial-folder'
                      (if (catch 'found
                            (dolist (extension ps/ebib-valid-file-extensions)
                              (when (f-file-p (file-name-concat
                                               initial-folder
                                               (file-name-with-extension key extension)))
                                (throw 'found extension))))
                          (file-name-concat initial-folder key)
                        initial-folder)))))
                (extension (file-name-extension file-to-attach))
                (destination-folder
                 (ps/ebib--extension-directories extension))
                (file-name (ps/ebib--rename-and-abbreviate-file
                            destination-folder key extension)))
           (when (or (not (f-file-p file-name))
                     (y-or-n-p "File exists. Overwrite? "))
             (rename-file file-to-attach file-name t))
           (ps/ebib--update-file-field-contents key file-name)
           (when (string= (file-name-extension file-name) "pdf")
             ;; open the pdf to make sure it displays the web page correctly
             (ps/ebib-open-pdf-file)
             ;; ocr the pdf if necessary
             ;; (let ((expanded-file-name (expand-file-name file-name)))
             ;; (ps/ocr-pdf (format "'%s' '%s'" expanded-file-name expanded-file-name)))
             ))))
      (default
       (beep))))

  (defvar ps/library-genesis
    '("Library Genesis"
      "https://libgen.lc/index.php?req="
      "&phrase=1&view=simple&column=def&sort=extension&sortmode=DESC"))

  (defvar ps/amazon
    '("Amazon"
      "https://smile.amazon.com/s?k="
      "&i=stripbooks"))

  (defvar ps/worldcat
    '("Worldcat"
      "https://www.worldcat.org/search?q="
      "&itemType=book&limit=50&offset=1"))

  (defvar ps/internet-archive
    '("Internet Archive"
      "https://archive.org/search.php?query="
      ""))

  (defvar ps/university-of-toronto
    '("University of Toronto"
      "https://librarysearch.library.utoronto.ca/discovery/search?query=any,contains,"
      "&tab=Everything&search_scope=UTL_AND_CI&vid=01UTORONTO_INST:UTORONTO&offset=0"))

  (defvar ps/hathitrust
    '("HathiTrust"
      "https://babel.hathitrust.org/cgi/ls?q1="
      "&field1=ocr;a=srchls;lmt=ft;sz=100"))

  (defvar ps/connected-papers
    '("Connected Papers"
      "https://www.connectedpapers.com/search?q="
      ""))

  (defvar ps/google-scholar
    '("Google Scholar"
      "https://scholar.google.com/scholar?q="
      ""))

  (defvar ps/wikipedia
    '("Google Scholar"
      "http://en.wikipedia.org/w/index.php?title=Special%3ASearch&profile=default&search="
      "&fulltext=Search"))

  (defvar ps/goodreads
    '("Goodreads"
      "https://www.goodreads.com/search?q="
      ""))

  (defvar ps/ebib-search-book-functions
    '(ps/ebib-search-goodreads
      ps/ebib-search-hathitrust
      ps/ebib-search-internet-archive
      ps/ebib-search-university-of-toronto
      ps/ebib-search-library-genesis
      ps/ebib-search-amazon)
    "List of functions that search for books.")

  (defvar ps/ebib-download-book-functions
    '(ps/ebib-search-hathitrust
      ps/ebib-search-internet-archive
      ps/ebib-search-university-of-toronto
      ps/ebib-search-library-genesis)
    "List of functions that download books.")

  (defvar ps/ebib-search-article-functions
    '(ps/ebib-search-connected-papers
      ps/ebib-search-google-scholar)
    "List of functions that search for articles.")

  (defvar ps/ebib-search-engines '()
    "List of search engine symbols. Used by the
 `ps/define-ebib-search-commands' macro.")

  (dolist (engine (delete-dups (append ps/ebib-search-book-functions
                                       ps/ebib-search-article-functions
                                       ps/ebib-download-book-functions)))
    (let* ((engine-name (symbol-name engine))
           (engine-symbol (intern (replace-regexp-in-string "ps/ebib-search-" "" engine-name))))
      (add-to-list 'ps/ebib-search-engines engine-symbol)))

  (defmacro ps/define-ebib-search-commands ()
    "Generate search commands for each search engine listed in `ps/ebib-search-engines'."
    `(progn
       ,@(mapcar (lambda (search-name)
                   `(defun ,(intern (concat "ps/ebib-search-" (symbol-name search-name))) (&optional field search-query)
                      ,(format "Run aw search on %s." (capitalize (replace-regexp-in-string "-" " " (symbol-name search-name))))
                      (interactive)
                      (ps/ebib-search
                       ,(intern (concat "ps/" (symbol-name search-name)))
                       field
                       search-query)))
                 ps/ebib-search-engines)))

  (ps/define-ebib-search-commands)

  (defun ps/ebib-search (search-engine &optional field search-query)
    "Run a search with SEARCH-ENGINE.

  If invoked from `ebib', search for the value of FIELD. If no
  FIELD is given, use the identifier if available, unless point is
  in 'title' field, otherwise the field at point.

  If not invoked from `ebib', prompt for search query."
    (let* ((name (nth 0 search-engine))
           (prefix (nth 1 search-engine))
           (suffix (nth 2 search-engine))
           (search-query
            (if search-query
                (url-hexify-string search-query)
              (if (member major-mode (list 'ebib-entry-mode 'ebib-index-mode))
                  (let* ((field (or field
                                    ;; if no field given, set `field'...
                                    (cond
                                     ;; ...to "title" if point is on "title" field,
                                     ((equal (ebib--current-field) "title")
                                      "title")
                                     ;; ...to "isbn" or "doi" if either field present,
                                     (ps/ebib-get-isbn)
                                     ((ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db)
                                      "doi")
                                     ;; ...else to the field at point.
                                     (t
                                      (ebib--current-field)))))
                         (value (ebib-get-field-value
                                 field
                                 (ebib--get-key-at-point)
                                 ebib--cur-db
                                 'noerror
                                 'unbraced
                                 'xref)))
                    (cond ((equal field "title")
                           (url-hexify-string value))
                          ;; ((equal field "isbn")
                          ;; (s-replace "-" "" value))
                          (t
                           value)))
                (url-hexify-string
                 (read-string
                  (concat
                   name
                   ": ")))))))
      (browse-url (concat prefix search-query suffix))))

  (defun ps/ebib-search-multi (&optional field search-query search-group)
    "docstring"
    (let ((search-query (or search-query
                            (unless (member major-mode (list 'ebib-entry-mode 'ebib-index-mode))
                              (read-string "Search query: ")))))
      (dolist (search-engine search-group)
        (funcall search-engine field search-query))))

  (defun ps/ebib-search-book (&optional field search-query)
    "The list of search engines is specified by the variable
  `ps/ebib-search-book-functions'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-search-book-functions))

  (defun ps/ebib-download-book (&optional field search-query)
    "The list of search engines is specified by the variable
  `ps/ebib-download-book-functions'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-download-book-functions))

  (defun ps/ebib-download-isbn (&optional field search-query)
    "The list of search engines is specified by the variable
  `ps/ebib-download-isbn'."
    (interactive)
    (ps/ebib-search-multi field search-query ps/ebib-download-book-functions))

  (defun ps/ebib-download-doi (&optional doi)
    "Download DOI from Sci-Hub. If DOI is not supplied, obtain it from
  the Ebib entry at point."
    (interactive)
    (unless (executable-find "scidownl")
      (error "Please install scidownl (https://github.com/Tishacy/SciDownl)"))
    (ebib--execute-when
      (entries
       (let ((doi (or doi
                      (ebib--execute-when
                        (entries
                         (ebib-get-field-value "doi" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref))
                        (default
                         (beep)))))
             (default-directory ps/dir-downloads))
         (unless doi
           (error "[Ebib] No DOI found in doi field"))
         (message "Trying to download file...")
         (async-shell-command
          (format "/Users/pablostafforini/.pyenv/shims/scidownl download --doi %s" doi))))
      (default
       (beep))))

  (defun ps/ebib-search-article (&optional field search-query)
    "The list of search engines is specified by the variable
  `ps/ebib-search-article-functions'."
    (interactive)
    (ebib--execute-when
      (entries
       (ps/ebib-search-multi field search-query ps/ebib-search-article-functions))
      (default
       (beep))))

  (defun ps/ebib-download-article (&optional field search-query)
    "The list of search engines is specified by the variable
  `ps/ebib-download-article'."
    (interactive)
    (ebib--execute-when
      (entries
       (ps/ebib-search-multi field search-query ps/ebib-search-article-functions))
      (default
       (beep))))

  (defun ps/ebib-search-book-by-title ()
    "Search book by title."
    (interactive)
    (ebib--execute-when
      (entries
       (if (or (ebib-get-field-value "booktitle" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
               (ebib-get-field-value "title" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
               (user-error "`title' field is empty!"))
           (ps/ebib-search-book "title")))
      (default
       (beep))))

  (defun ps/ebib-download-book-by-title ()
    "Download book by title."
    (interactive)
    (ebib--execute-when
      (entries
       (if (or (ebib-get-field-value "booktitle" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
               (ebib-get-field-value "title" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
               (user-error "`title' field is empty!"))
           (ps/ebib-download-book "title")))
      (default
       (beep))))

  (defun ps/ebib-search-article-by-title ()
    "Search article by title."
    (interactive)
    (ebib--execute-when
      (entries
       (if (ebib-get-field-value "article" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
           (user-error "`title' field is empty!")
         (ps/ebib-search-article "title")))
      (default
       (beep))))

  (defun ps/ebib-download-article-by-title ()
    "Download article by title."
    (interactive)
    (ebib--execute-when
      (entries
       (if (ebib-get-field-value "article" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)
           (user-error "`title' field is empty!")
         (ps/ebib-download-article "title")))
      (default
       (beep))))

  (defun ps/ebib-download-video (id)
    "Download video with id ID using `yt-dlp'."
    (unless (executable-find "yt-dlp")
      (user-error "Please install `yt-dlp'"))
    (ebib--execute-when
      (entries
       (let* ((key (ebib--get-key-at-point))
              (file-name
               (ps/ebib--rename-and-abbreviate-file
                ps/dir-library-media key "webm")))
         (async-shell-command (format "yt-dlp --output '%s' '%s'" file-name id))
         (message (format "Downloading video from '%s'" (substring-no-properties id)))
         (ps/ebib--update-file-field-contents key file-name)))
      (default
       (beep))))

  (defun ps/ebib-sentence-case ()
    "docstring"
    (interactive)
    (ebib--execute-when
      (entries
       (let* ((field (ebib--current-field))
              (value (ebib-get-field-value field (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref))
              (words (split-string value)))
         (setq words (mapcar
                      (lambda (word)
                        (if
                            ;; match words containing {} or \ which are probably
                            ;; LaTeX or protected words
                            (string-match "\\$\\|{\\|}\\|\\\\" word)
                            word
                          (s-downcase word)))
                      words))
         ;; capitalize first word
         (setf (car words) (s-capitalize (car words)))
         (setq value (mapconcat 'identity words " "))
         (ebib-set-field-value field value (ebib--get-key-at-point) ebib--cur-db 'overwrite 'unbraced)
         (ebib--store-multiline-text (current-buffer))
         (ebib--redisplay-field field)
         (ebib--redisplay-index-item field)
         (ebib-save-current-database nil)))
      (default
       (beep))))

  (defun ps/ebib-open-current-bibtex-file ()
    "Open bibtex file associated with the current entry."
    (interactive)
    (when-let ((file (ebib-db-get-filename ebib--cur-db)))
      (find-file file)))

  (defun ps/ebib-open-key (key)
    "Open the entry for KEY in Ebib."
    (ebib--execute-when
      (entries
       (let ((file (cond ((member key (ebib-db-list-keys (nth 0 ebib--databases)))
                          ps/file-bibliography-new)
                         ((member key (ebib-db-list-keys (nth 1 ebib--databases)))
                          file ps/file-bibliography-old)
                         (t
                          (ebib--error "Key not found in any database")))))
         (ebib file key)
         (ebib--pop-to-buffer (ebib--buffer 'entry))))
      (default
       (ebib--error "No database is loaded"))))

  (defvar ps/ebib-sort-toggle 'Title)

  (defun ps/ebib-sort-toggle ()
    "Toggle between sorting by timestamp, author, and title."
    (interactive)
    (ebib--execute-when
      (entries
       (unless (string= (ebib-db-get-filename ebib--cur-db) ps/file-bibliography-new)
         (user-error (format "Due to performane issues, this command only works on database `%s'"
                             (file-name-nondirectory ps/file-bibliography-new))))
       (let ((order 'ascend))
         (pcase ps/ebib-sort-toggle
           ('Timestamp
            (setq ps/ebib-sort-toggle 'Author))
           ('Author
            (setq ps/ebib-sort-toggle 'Title))
           ('Title
            (setq ps/ebib-sort-toggle 'Timestamp)
            (setq order 'descend)))
         (ebib--index-sort (symbol-name ps/ebib-sort-toggle) order)
         (goto-char (point-min))
         (message (format "Sorting by %s" ps/ebib-sort-toggle))))
      (default
       (beep))))

  (defun ps/ebib-merge-databases (source target)
    "Move the contents of SOURCE to TARGET."
    (find-file-noselect source)
    (find-file-noselect target)
    (with-current-buffer (file-name-nondirectory target)
      (goto-char (point-max))
      (insert-file-contents source))
    (with-current-buffer (file-name-nondirectory source)
      (erase-buffer)))

  (defun ps/ebib-end-of-index-buffer ()
    "Move to the end of the index buffer."
    (interactive)
    (when (equal major-mode 'ebib-index-mode)
      (goto-char (point-max))
      (forward-line -1)))

  (defun ps/ebib-duplicate-entry ()
    "Duplicate the entry at point."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((key (ebib--get-key-at-point)))
         (save-window-excursion
           (find-file zotra-default-bibliography)
           (goto-char (point-max))
           (ebib--format-entry key ebib--cur-db)
           (bibtex-narrow-to-entry)
           (goto-char (point-min))
           (replace-regexp "^\\(@.*{.*\\)," "\\1-dup,")
           (save-buffer))
         (ebib-switch-to-database-nth 1)
         (ps/ebib-reload-current-database-no-confirm)))
      (default
       (beep))))

  (defun ps/ebib-download-url-with-zotra ()
    "Download the URL associated with the current entry with `zotra'."
    (interactive)
    (ebib--execute-when
      (entries
       (let ((url (ebib-get-field-value "url" (ebib--get-key-at-point) ebib--cur-db 'noerror 'unbraced 'xref)))
         (zotra-download-attachment-from-url url)))
      (default
       (beep))))

  (defun ps/ebib-citar-open-notes ()
    "Open note for the entry at point using `citar-open-notes'.
This command replaces the native `ebib-popup-note'. The
replacement ensures that, when a note doesn't already exist, it
is created following the same schema as notes created with
`citar'."
    (interactive)
    (ebib--execute-when
      (entries
       (when-let ((citekey (ebib-db-set-current-entry-key (ebib--get-key-at-point) ebib--cur-db)))
         (citar-open-notes (list citekey))))
      (default
       (beep))))

  (defun ps/ebib-move-titleaddon-to-journaltitle ()
    "Move contents of field `titleaddon' to `journaltitle'.
When items are imported with the Zotero translation server, the
online publication venue is recorded in the `titleaddon' field.
The correct Biblatex field for this information is
`journaltitle', so we move it there."
    (interactive)
    (ebib--execute-when
      (entries
       (when-let* ((field "titleaddon")
                   (key (ebib--get-key-at-point))
                   (content (ebib-get-field-value field key ebib--cur-db t t)))
         (ebib-set-field-value "journaltitle" content key ebib--cur-db nil 'unbraced)
         (ebib-delete-field-contents field t)))
      (default
       (beep))))

  (add-hook 'ebib-index-mode-hook #'doom-modeline-mode)
  (add-hook 'ebib-entry-mode-hook #'visual-line-mode)

  :general
  ("A-i" 'ps/ebib-open-or-switch)
  (ebib-multiline-mode-map
   "s-c" 'ebib-quit-multiline-buffer-and-save)
  ((ebib-entry-mode-map ebib-index-mode-map)
   "H-s" 'ebib-save-current-database
   "Q" 'ebib-quit
   "n" 'ps/ebib-citar-open-notes)
  (ebib-entry-mode-map
   "TAB" 'ebib-goto-next-set
   "<backtab>" 'ebib-goto-prev-set
   "SPC" 'ps/ebib-open-file-dwim
   "H-s" 'ebib-save-current-database
   "!" 'ebib-generate-autokey
   "," 'ps/ebib-title-case
   "." 'ps/ebib-sentence-case
   "/" (lambda! (ps/ebib-attach-file t))
   "?" 'ps/ebib-attach-file
   "a" 'ps/ebib-search-amazon
   "A" 'ebib-add-field
   "b" 'ps/ebib-open-current-bibtex-file
   "c" 'ebib-copy-current-field-contents
   "D" 'ebib-delete-current-field-contents
   "d" 'ps/ebib-download-dwim
   "E" 'ebib-edit-keyname
   "g" 'ps/ebib-search-library-genesis
   "G" 'ps/ebib-search-goodreads
   "h" 'ps/ebib-open-html-file
   "i" 'ps/ebib-download-by-identifier
   "o" 'ps/ebib-search-connected-papers
   "p" 'ps/ebib-open-pdf-file
   "P" 'ps/ebib-open-pdf-file-externally
   "r" 'ps/ebib-rename-files
   "s" 'ps/ebib-search-dwim
   "t" 'ps/ebib-search-book-dwim
   "u" 'ebib-browse-url
   "v" 'ps/ebib-open-webm-file
   "V" 'ps/ebib-search-internet-archive
   "w" 'ps/ebib-search-worldcat
   "W" 'ps/ebib-search-wikipedia
   "x" 'ps/ebib-search-university-of-toronto
   "y" 'ps/ebib-search-hathitrust
   "z" 'ps/ebib-search-google-scholar
   "1" (lambda! (ebib-view-file-in-field 1))
   "2" (lambda! (ebib-view-file-in-field 2)))
  (ebib-index-mode-map
   "<return>" 'ebib-edit-entry
   "A-C-s-SPC" 'ps/ebib-end-of-index-buffer
   "d" 'ps/ebib-duplicate-entry
   "D" 'ebib-delete-entry
   "k" 'ebib-prev-entry
   "l" 'ebib-next-entry
   "s" 'ps/ebib-sort-toggle))
#+end_src

The macro below generates the commands correcty. But attempting to define key bindings results in duplicate commands. I'm not sure what's on; it seems to be related to ~use-package~.

*** TODO Ebib: Add new websites to 'journal' field
:PROPERTIES:
:ID:       3CF3C58F-4EF5-42EF-92DA-5AA33C726DFA
:END:

*** TODO Decide how ebib should deal with multi-volume works
:PROPERTIES:
:ID:       33D8549E-7DD8-4E4B-A690-0E6D29A8CA60
:END:

*** TODO Decide exhaustive list of work types
:PROPERTIES:
:ID:       9837CC84-AE98-4749-A16B-86EF995D4531
:END:

*** TODO Modify my custom ebib formulas so that they use native uniquify
:PROPERTIES:
:ID:       BA7B5845-B148-43B6-BE50-C1CBF89478BB
:END:

*** resources
:PROPERTIES:
:ID:       A05D6298-646A-4E47-B3B2-07A14EABCEC5
:END:

[[https://juanjose.garciaripoll.com/blog/ebib-biblio-interface/index.html][eBib-Biblio interface, aka. Mendeley for Emacs]]

** persid
:PROPERTIES:
:ID:       57366A1C-A55A-47F8-8B62-E3412D674879
:END:

/[[https://github.com/rougier/persid][persid]] is a persistent identifier library for Emacs./

To check out.

** zotra
:PROPERTIES:
:ID:       815B8CEA-D36D-4E47-B728-D86FEFB736DF
:END:
:LOGBOOK:
CLOCK: [2023-05-14 Sun 19:59]--[2023-05-14 Sun 20:02] =>  0:03
CLOCK: [2023-03-09 Thu 19:19]--[2023-03-09 Thu 19:56] =>  0:37
CLOCK: [2022-08-31 Wed 16:37]--[2022-08-31 Wed 17:37] =>  1:00
CLOCK: [2022-08-31 Wed 14:05]--[2022-08-31 Wed 14:17] =>  0:12
CLOCK: [2022-07-16 Sat 21:03]--[2022-07-16 Sat 21:15] =>  0:12
CLOCK: [2022-07-16 Sat 15:26]--[2022-07-16 Sat 15:40] =>  0:14
:END:

/[[https://github.com/mpedramfar/zotra][zotra]] provides functions to get bibliographic information from a URL via [[https://www.zotero.org/support/translators][Zotero translators]], but without relying on the Zotero client./

To run translation server,

#+begin_src bash :tangle no
cd ~/source/translation-server
npm start
#+end_src

I experimented with setting the value of ~zotra-backend~ to each of the three available values, but only ~translation-server~ works reliably.

#+begin_src emacs-lisp :results silent
(use-package zotra
  :elpaca (zotra
           :host github
           :repo "mpedramfar/zotra")
  :defer 15

  :config
  (setq zotra-use-curl nil)
  (setq zotra-url-retrieve-timeout 10)
  (setq zotra-default-bibliography ps/file-bibliography-new)
  (setq zotra-default-entry-format "biblatex")
  (setq zotra-after-add-entry-hook nil)
  (setq zotra-download-attachment-default-directory ps/dir-downloads)
  (setq zotra-backend 'translation-server)
  (setq zotra-cli-command (file-name-concat ps/dir-dropbox "source/zotra-cli/bin/index.js"))

  (defun ps/zotra-add-entry (url-or-search-string &optional is-search bibfile entry-format)
    (let ((bibfile
           (or bibfile zotra-default-bibliography
               (completing-read
                "Bibfile: "
                (append (directory-files "." t ".*\\.bib$")
                        (org-cite-list-bibliography-files))))))
      (find-file bibfile)
      (widen)
      (goto-char (point-max))
      (when (not (looking-at "^")) (insert "\n"))
      (insert (zotra-get-entry url-or-search-string is-search entry-format))
      (save-excursion
        (save-restriction
          (bibtex-narrow-to-entry)
          (bibtex-beginning-of-entry)
          (goto-char (point-max))
          (when (not (looking-at "^")) (insert "\n"))
          (advice-add 'select-safe-coding-system-interactively :override #'ps/select-safe-coding-system-interactively)
          (save-buffer)
          (advice-remove 'select-safe-coding-system-interactively #'ps/select-safe-coding-system-interactively)
          (run-hooks 'zotra-after-add-entry-hook)))))

  (defun ps/zotra-after-add-entry-hook-function ()
    "Function to trigger with `zotra-after-add-entry-hook'."
    (revert-buffer nil t)
    (goto-char (point-max))
    (bibtex-set-field "timestamp" (format-time-string ebib-timestamp-format nil "GMT"))
    (bibtex-clean-entry)
    (org-ref-clean-bibtex-entry)
    (save-buffer)
    (ps/ebib-reload-current-database-no-confirm)
    (let ((citekey (ps/bibtex-get-key)))
      (ebib ps/file-bibliography-new citekey)
      (ebib--index-sort "Timestamp" 'descend)
      (goto-char (point-min))
      (ps/ebib-open-key citekey)))

  (defun ps/select-safe-coding-system-interactively (from to codings unsafe
                                                          &optional rejected default)
    "Select interactively a coding system for the region FROM ... TO.
FROM can be a string, as in `write-region'.
CODINGS is the list of base coding systems known to be safe for this region,
  typically obtained with `find-coding-systems-region'.
UNSAFE is a list of coding systems known to be unsafe for this region.
REJECTED is a list of coding systems which were safe but for some reason
  were not recommended in the particular context.
DEFAULT is the coding system to use by default in the query."
    ;; At first, if some defaults are unsafe, record at most 11
    ;; problematic characters and their positions for them by turning
    ;;	(CODING ...)
    ;; into
    ;;	((CODING (POS . CHAR) (POS . CHAR) ...) ...)
    (if unsafe
        (setq unsafe
              (mapcar (lambda (coding)
                        (cons coding
                              (if (stringp from)
                                  (mapcar (lambda (pos)
                                            (cons pos (aref from pos)))
                                          (unencodable-char-position
                                           0 (length from) coding
                                           11 from))
                                (mapcar (lambda (pos)
                                          (cons pos (char-after pos)))
                                        (unencodable-char-position
                                         from to coding 11)))))
                      unsafe)))

    (setq codings (sanitize-coding-system-list codings))

    (let ((window-configuration (current-window-configuration))
          (bufname (buffer-name))
          coding-system)
      (save-excursion
        ;; If some defaults are unsafe, make sure the offending
        ;; buffer is displayed.
        (when (and unsafe (not (stringp from)))
          (pop-to-buffer bufname)
          (goto-char (apply #'min (mapcar (lambda (x) (or (car (cadr x)) (point-max)))
                                          unsafe))))
        ;; Then ask users to select one from CODINGS while showing
        ;; the reason why none of the defaults are not used.
        (with-output-to-temp-buffer "*Warning*"
          (with-current-buffer standard-output
            (if (and (null rejected) (null unsafe))
                (insert "No default coding systems to try for "
                        (if (stringp from)
                            (format "string \"%s\"." from)
                          (format-message "buffer `%s'." bufname)))
              (insert
               "These default coding systems were tried to encode"
               (if (stringp from)
                   (concat " \"" (if (> (length from) 10)
                                     (concat (substring from 0 10) "...\"")
                                   (concat from "\"")))
                 (format-message
                  " the following\nproblematic characters in the buffer `%s'"
                  bufname))
               ":\n")
              (select-safe-coding-system--format-list unsafe)
              (when rejected
                (insert "These safely encode the text in the buffer,
but are not recommended for encoding text in this context,
e.g., for sending an email message.\n ")
                (dolist (x rejected)
                  (princ " ") (princ x))
                (insert "\n"))
              (when unsafe
                (insert (if rejected "The other coding systems"
                          "However, each of them")
                        (substitute-command-keys
                         " encountered characters it couldn't encode:\n"))
                (dolist (coding unsafe)
                  (insert (format "  %s cannot encode these:" (car coding)))
                  (let ((i 0)
                        (func1
                         (lambda (bufname pos)
                           (when (buffer-live-p (get-buffer bufname))
                             (pop-to-buffer bufname)
                             (goto-char pos))))
                        (func2
                         (lambda (bufname pos coding)
                           (when (buffer-live-p (get-buffer bufname))
                             (pop-to-buffer bufname)
                             (if (< (point) pos)
                                 (goto-char pos)
                               (forward-char 1)
                               (search-unencodable-char coding)
                               (forward-char -1))))))
                    (dolist (elt (cdr coding))
                      (insert " ")
                      (if (stringp from)
                          (insert (if (< i 10) (cdr elt) "..."))
                        (if (< i 10)
                            (insert-text-button
                             (cdr elt)
                             :type 'help-xref
                             'face 'link
                             'help-echo
                             "mouse-2, RET: jump to this character"
                             'help-function func1
                             'help-args (list bufname (car elt)))
                          (insert-text-button
                           "..."
                           :type 'help-xref
                           'face 'link
                           'help-echo
                           "mouse-2, RET: next unencodable character"
                           'help-function func2
                           'help-args (list bufname (car elt)
                                            (car coding)))))
                      (setq i (1+ i))))
                  (insert "\n"))
                (insert (substitute-command-keys "\

Click on a character (or switch to this window by `\\[other-window]'\n\
and select the characters by RET) to jump to the place it appears,\n\
where `\\[universal-argument] \\[what-cursor-position]' will give information about it.\n"))))
            (insert (substitute-command-keys "\nSelect \
one of the safe coding systems listed below,\n\
or cancel the writing with \\[keyboard-quit] and edit the buffer\n\
   to remove or modify the problematic characters,\n\
or specify any other coding system (and risk losing\n\
   the problematic characters).\n\n"))
            (let ((pos (point))
                  (fill-prefix "  "))
              (dolist (x codings)
                (princ "  ") (princ x))
              (insert "\n")
              (fill-region-as-paragraph pos (point)))))

        ;; Read a coding system.
        (setq coding-system 'utf-8)
        (setq last-coding-system-specified coding-system))

      (kill-buffer "*Warning*")
      (set-window-configuration window-configuration)
      coding-system))

  ;; Ugly hack to fix encoding issues.
  ;; TODO: Fix this properly.
  (advice-add 'zotra-add-entry :override #'ps/zotra-add-entry)

  (add-hook 'zotra-after-add-entry-hook #'ps/zotra-after-add-entry-hook-function)

  (defun ps/zotra-add-from-eww ()
    "Add web page at point.
Also, save the web page as PDF and HTML."
    (interactive)
    (unless ebib--cur-db
      (ebib))
    (let ((url (eww-current-url)))
      (zotra-add-entry-from-url url)
      (ps/eww-url-to-pdf url)
      (ps/eww-url-to-html url)))

  :general
  ("C-H-M-S-z" 'zotra-add-entry-from-url) ; triggered by KM macro
  (ebib-index-mode-map
   "i" 'zotra-add-entry-from-search
   "u" 'zotra-add-entry-from-url)
  (eww-mode-map
   "i" 'ps/zotra-add-from-eww))
#+end_src

*** WAITING Launch zotra outside emacs
:PROPERTIES:
:ID:       00F3FD0E-44A4-41D6-935D-1E441B823E9D
:END:
:LOGBOOK:
CLOCK: [2023-03-06 Mon 13:45]--[2023-03-06 Mon 13:50] =>  0:05
:END:

* email
:PROPERTIES:
:ID:       2CF6D256-143D-4F3E-8383-36CB090FC4F2
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 20:05]--[2021-12-11 Sat 20:15] =>  0:10
CLOCK: [2021-07-12 Mon 18:56]--[2021-07-12 Mon 19:03] =>  0:07
CLOCK: [2021-07-10 Sat 20:11]--[2021-07-10 Sat 20:20] =>  0:09
CLOCK: [2021-04-08 Thu 10:10]--[2021-04-08 Thu 10:52] =>  0:42
CLOCK: [2021-04-05 Mon 21:03]--[2021-04-05 Mon 21:42] =>  0:39
:END:

** simple
:PROPERTIES:
:ID:       509B1DFA-E776-4BF5-8231-4A5984FD0150
:END:

#+begin_src emacs-lisp
(use-feature simple
  :demand t
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  (setq read-mail-command 'mu4e))
#+end_src

** sendmail
:PROPERTIES:
:ID:       25BB02C1-B537-4D2F-AF95-3B1217A58E6D
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Sending.html][sendmail]] is a mode that provides mail-sending facilities from within Emacs./

#+begin_src emacs-lisp :results silent
(use-feature sendmail
  :config
  (setq send-mail-function 'smtpmail-send-it))
#+end_src

** smtpmail
:PROPERTIES:
:ID:       F05AFA09-978B-441D-B947-0DBEA4DBC7BF
:END:

#+begin_src emacs-lisp :results silent
(use-feature smtpmail
  :config
  (setq smtpmail-smtp-user ps/personal-gmail)
  (setq smtpmail-local-domain "gmail.com")
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587))
#+end_src


** async-mail-sending
:PROPERTIES:
:ID:       BEF562DB-61D5-4AB5-8B8A-44DD866FE285
:END:

/[[https://github.com/lordpretzel/async-email-sending][async-email-sending]] enables asynchronous sending of emails in Emacs using the new built-in sqlite support in Emacs 29./

** message
:PROPERTIES:
:ID:       67208BCE-6FFD-48B2-A5AD-7B72BAF31692
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/message.html][message]] is a message composition mode./

#+begin_src emacs-lisp :results silent
(use-feature emacs
  :demand t
  :config
  (setq message-kill-buffer-on-exit t) ; make `message-send-and-exit' kill buffer, not bury it
  (setq message-send-mail-function 'smtpmail-send-it)

  (add-hook 'message-mode-hook #'(lambda () (auto-fill-mode -1)))

  :general
  ((message-mode-map org-msg-edit-mode-map)
   "s-c" 'message-send-and-exit
   "s-f" 'message-goto-from
   "s-s" 'message-goto-subject
   "s-t" 'message-goto-to
   "s-A-b" 'message-goto-bcc
   "s-A-c" 'message-goto-cc
   "s-A-s" 'message-send)
  (message-mode-map
   "s-b" 'message-goto-body))
#+end_src

*** TODO [#4] Configure ~message-send-mail-function~ so that messages are sent asynchronously
:PROPERTIES:
:ID:       6A48B9FE-3FC9-4D41-B124-F9D7D3898CB4
:Effort:   0:45
:END:

[[https://turkja.fi/posts/emacs-and-smtp/][Emacs and SMTP with gmail | Jarkko Turkulainen]]
https://gist.github.com/loziju/66d3f024e102704ff5222e54a4bfd50e
** mml
:PROPERTIES:
:ID:       2A87061B-BE45-443B-AB2C-893A69C20003
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/Composing.html][mml]] is a library that parses a MML (MIME Meta Language) and generates MIME messages./

#+begin_src emacs-lisp :results silent
(use-feature mml
  :general
  (message-mode-map
   "s-a" 'mml-attach-file))
#+end_src

** mu4e
:PROPERTIES:
:ID:       1B568415-F030-437B-921C-B4A65B370A6E
:END:
:LOGBOOK:
CLOCK: [2023-04-05 Wed 22:30]--[2023-04-05 Wed 22:53] =>  0:23
CLOCK: [2023-03-23 Thu 23:21]--[2023-03-23 Thu 23:35] =>  0:14
CLOCK: [2023-03-22 Wed 09:29]--[2023-03-22 Wed 09:36] =>  0:07
CLOCK: [2023-03-16 Thu 19:28]--[2023-03-16 Thu 20:20] =>  0:52
CLOCK: [2023-03-16 Thu 17:13]--[2023-03-16 Thu 18:24] =>  1:11
CLOCK: [2023-03-08 Wed 19:40]--[2023-03-08 Wed 19:48] =>  0:08
CLOCK: [2022-07-19 Tue 09:23]--[2022-07-19 Tue 09:48] =>  0:25
CLOCK: [2022-07-19 Tue 08:37]--[2022-07-19 Tue 09:01] =>  0:24
CLOCK: [2022-07-18 Mon 23:00]--[2022-07-18 Mon 23:54] =>  0:54
CLOCK: [2022-07-15 Fri 14:22]--[2022-07-15 Fri 14:46] =>  0:24
CLOCK: [2022-07-11 Mon 22:30]--[2022-07-12 Tue 00:07] =>  1:37
CLOCK: [2022-07-09 Sat 22:07]--[2022-07-09 Sat 23:16] =>  1:09
CLOCK: [2022-06-09 Thu 22:38]--[2022-06-09 Thu 22:55] =>  0:17
CLOCK: [2022-05-30 Mon 17:03]--[2022-05-30 Mon 17:21] =>  0:18
CLOCK: [2022-05-30 Mon 03:45]--[2022-05-30 Mon 04:19] =>  0:34
CLOCK: [2022-05-29 Sun 10:31]--[2022-05-29 Sun 10:55] =>  0:24
CLOCK: [2022-05-24 Tue 14:59]--[2022-05-24 Tue 15:16] =>  0:17
CLOCK: [2022-05-13 Fri 16:30]--[2022-05-13 Fri 17:02] =>  0:32
CLOCK: [2021-12-06 Mon 23:37]--[2021-12-07 Tue 00:24] =>  0:47
CLOCK: [2021-12-03 Fri 15:48]--[2021-12-03 Fri 16:15] =>  0:27
CLOCK: [2021-11-18 Thu 14:17]--[2021-11-18 Thu 14:22] =>  0:05
CLOCK: [2021-10-25 Mon 10:27]--[2021-10-25 Mon 10:30] =>  0:03
CLOCK: [2021-10-20 Wed 20:07]--[2021-10-20 Wed 20:15] =>  0:08
CLOCK: [2021-10-02 Sat 13:00]--[2021-10-02 Sat 13:06] =>  0:06
CLOCK: [2021-10-01 Fri 22:04]--[2021-10-01 Fri 22:28] =>  0:24
CLOCK: [2021-09-29 Wed 21:39]--[2021-09-29 Wed 22:02] =>  0:23
CLOCK: [2021-09-16 Thu 21:00]--[2021-09-16 Thu 21:11] =>  0:11
CLOCK: [2021-09-16 Thu 20:12]--[2021-09-16 Thu 20:16] =>  0:04
CLOCK: [2021-09-10 Fri 11:02]--[2021-09-10 Fri 11:12] =>  0:10
CLOCK: [2021-08-21 Sat 20:44]--[2021-08-21 Sat 21:07] =>  0:23
CLOCK: [2021-08-20 Fri 12:46]--[2021-08-20 Fri 12:50] =>  0:04
CLOCK: [2021-08-17 Tue 14:45]--[2021-08-17 Tue 14:52] =>  0:07
CLOCK: [2021-08-17 Tue 09:48]--[2021-08-17 Tue 09:59] =>  0:11
CLOCK: [2021-08-16 Mon 21:08]--[2021-08-16 Mon 21:11] =>  0:03
CLOCK: [2021-08-16 Mon 19:41]--[2021-08-16 Mon 20:05] =>  0:24
CLOCK: [2021-08-16 Mon 14:12]--[2021-08-16 Mon 17:22] =>  3:10
CLOCK: [2021-08-15 Sun 13:34]--[2021-08-15 Sun 13:46] =>  0:12
CLOCK: [2021-08-14 Sat 17:53]--[2021-08-14 Sat 18:13] =>  0:20
CLOCK: [2021-08-13 Fri 21:36]--[2021-08-13 Fri 22:05] =>  0:29
CLOCK: [2021-08-12 Thu 15:57]--[2021-08-12 Thu 16:25] =>  0:28
CLOCK: [2021-08-12 Thu 09:28]--[2021-08-12 Thu 09:54] =>  0:26
CLOCK: [2021-08-10 Tue 20:37]--[2021-08-10 Tue 20:38] =>  0:01
CLOCK: [2021-08-09 Mon 23:06]--[2021-08-09 Mon 23:45] =>  0:39
CLOCK: [2021-08-09 Mon 22:40]--[2021-08-09 Mon 23:00] =>  0:20
CLOCK: [2021-08-09 Mon 22:16]--[2021-08-09 Mon 22:30] =>  0:14
CLOCK: [2021-08-09 Mon 21:40]--[2021-08-09 Mon 22:05] =>  0:25
CLOCK: [2021-08-09 Mon 20:35]--[2021-08-09 Mon 21:28] =>  0:53
CLOCK: [2021-08-09 Mon 19:37]--[2021-08-09 Mon 20:05] =>  0:24
CLOCK: [2021-08-09 Mon 18:57]--[2021-08-09 Mon 19:21] =>  0:24
CLOCK: [2021-08-09 Mon 18:33]--[2021-08-09 Mon 18:51] =>  0:18
CLOCK: [2021-08-08 Sun 22:08]--[2021-08-08 Sun 22:36] =>  0:28
CLOCK: [2021-08-08 Sun 21:10]--[2021-08-08 Sun 21:44] =>  0:34
CLOCK: [2021-08-08 Sun 20:27]--[2021-08-08 Sun 21:02] =>  0:35
CLOCK: [2021-08-08 Sun 19:47]--[2021-08-08 Sun 20:01] =>  0:14
CLOCK: [2021-08-08 Sun 19:12]--[2021-08-08 Sun 19:42] =>  0:30
CLOCK: [2021-08-08 Sun 17:51]--[2021-08-08 Sun 18:12] =>  0:21
CLOCK: [2021-08-08 Sun 15:29]--[2021-08-08 Sun 15:45] =>  0:16
CLOCK: [2021-08-08 Sun 15:27]--[2021-08-08 Sun 15:28] =>  0:01
CLOCK: [2021-08-08 Sun 12:14]--[2021-08-08 Sun 13:04] =>  0:50
CLOCK: [2021-08-08 Sun 10:50]--[2021-08-08 Sun 10:54] =>  0:04
CLOCK: [2021-08-06 Fri 12:40]--[2021-08-06 Fri 14:16] =>  1:36
CLOCK: [2021-08-06 Fri 12:28]--[2021-08-06 Fri 12:38] =>  0:10
CLOCK: [2021-08-06 Fri 11:26]--[2021-08-06 Fri 11:31] =>  0:05
CLOCK: [2021-08-05 Thu 21:33]--[2021-08-05 Thu 21:49] =>  0:16
CLOCK: [2021-08-05 Thu 19:40]--[2021-08-05 Thu 20:00] =>  0:20
CLOCK: [2021-08-05 Thu 19:12]--[2021-08-05 Thu 19:20] =>  0:08
CLOCK: [2021-08-05 Thu 13:57]--[2021-08-05 Thu 14:50] =>  0:53
CLOCK: [2021-08-05 Thu 13:42]--[2021-08-05 Thu 13:53] =>  0:11
CLOCK: [2021-08-05 Thu 13:08]--[2021-08-05 Thu 13:16] =>  0:08
CLOCK: [2021-04-18 Sun 21:36]--[2021-04-18 Sun 22:25] =>  0:49
CLOCK: [2021-04-18 Sun 20:55]--[2021-04-18 Sun 21:27] =>  0:32
CLOCK: [2021-04-15 Thu 20:52]--[2021-04-15 Thu 21:10] =>  0:18
CLOCK: [2021-04-15 Thu 16:13]--[2021-04-15 Thu 16:31] =>  0:18
:END:

/[[https://github.com/djcb/mu][mu4e]] is an an emacs-based e-mail client./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/mu4e)
(use-package mu4e
  :elpaca (:local-repo
           "/opt/homebrew/Cellar/mu/1.10.3/share/emacs/site-lisp/mu/mu4e"
           :pre-build
           ())
  :demand t
  :init
  (setq ps/mu4e-inbox-folder "/Inbox")
  (setq ps/mu4e-daily-folder "/Daily")

  :config/el-patch
  ;; do not prompt for an URL number when there is only one URL
  (defun mu4e--view-get-urls-num (prompt &optional multi)
    "Ask the user with PROMPT for an URL number for MSG.
The number is [1..n] for URLs \[0..(n-1)] in the message. If
MULTI is nil, return the number for the URL; otherwise (MULTI is
non-nil), accept ranges of URL numbers, as per
`mu4e-split-ranges-to-numbers', and return the corresponding
string."
    (let* ((count (hash-table-count mu4e--view-link-map)) (def))
      (when (zerop count) (mu4e-error "No links for this message"))
      (if (not multi)
          (if (= count 1)
              (el-patch-swap (read-number (mu4e-format "%s: " prompt) 1) 1)
            (read-number (mu4e-format "%s (1-%d): " prompt count)))
        (progn
          (setq def (if (= count 1) "1" (format "1-%d" count)))
          (read-string (mu4e-format "%s (default %s): " prompt def)
                       nil nil def)))))

  :config
  ;; (mu4e-debug t) ; uncomment when debugging
  (setq mu4e-split-view 'single-window)
  (setq mu4e-headers-show-target nil)
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval 180)
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder "/[Gmail]/Trash")
  (setq mu4e-attachment-dir ps/dir-downloads)
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-maildir-shortcuts
        `((,ps/mu4e-inbox-folder . ?i)
          (,ps/mu4e-daily-folder . ?y)
          (,mu4e-drafts-folder  . ?d)
          (,mu4e-sent-folder    . ?t)
          (,mu4e-trash-folder   . ?x)
          (,mu4e-refile-folder  . ?a))) ; required for correct Gmail refiling
  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-compose-format-flowed t)
  (setq mu4e-confirm-quit nil)
  (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (setq mu4e-headers-include-related nil)
  (setq mu4e-headers-results-limit 1000)
  (setq mu4e-headers-visible-lines 25)
  (setq mu4e-hide-index-messages t)
  (setq mu4e-html2text-command 'mu4e-shr2text) ; requires `mu4e-contrib'
  (setq mu4e-sent-messages-behavior 'delete) ; Gmail already keeps a copy
  (setq mu4e-view-show-addresses t)
  (setq mu4e-view-show-images t)

  ;; performance improvements
  ;; groups.google.com/g/mu-discuss/c/hRRNhM5mwr0
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html
  (setq mu4e-index-cleanup t) ; `nil' improves performance"
  (setq mu4e-index-lazy-check nil) ; `t' improves performance"

  (mu4e t)
  (defun ps/mu4e-gmail-fix-flags (mark msg)
    (cond ((eq mark 'trash)  (mu4e-action-retag-message msg "-\\Inbox,+\\Trash,-\\Draft"))
          ((eq mark 'refile) (mu4e-action-retag-message msg "-\\Inbox"))
          ((eq mark 'flag)   (mu4e-action-retag-message msg "+\\Starred"))
          ((eq mark 'unflag) (mu4e-action-retag-message msg "-\\Starred"))))

  (defun ps/mu4e-headers-archive ()
    "In headers mode, archive message at point.
Do not ask for confirmation."
    (interactive)
    (mu4e-headers-mark-for-refile)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-archive ()
    "In view mode, archive message at point.
Do not ask for confirmation."
    (interactive)
    (mu4e-view-mark-for-refile)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-org-capture (&optional arg)
    "In view mode, `org-capture' message at point and archive it.
If invoked with prefix argument, capture without archiving it.

If the message body contains with '[org-capture : KEY]',
interpret KEY as the org-capture template key."
    (interactive "P")
    (if (eq major-mode 'mu4e-view-mode)
        (let* ((message-body (or (mu4e-message-field (mu4e-message-at-point) :body-txt)
                                 ;; inexplicably, the above returns nil
                                 ;; for a few non-empty messages; to avoid
                                 ;; an error in these cases, we add an
                                 ;; empty string as a second disjunct
                                 ""))
               (key (if
                        (string-match "\\[org-capture key: \\(.*\\)\\]" message-body)
                        (match-string-no-properties 1 message-body)
                      "e")))
          (org-capture nil key)
          (unless arg
            (ps/mu4e-view-archive)))
      (user-error "Not in mu4e-view-mode")))

  (defun ps/mu4e-headers-trash ()
    "In headers mode, trash message at point without asking for
confirmation."
    (interactive)
    (mu4e-headers-mark-for-trash)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-trash ()
    "In view mode, trash message at point without asking for
confirmation."
    (interactive)
    (mu4e-view-mark-for-trash)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-headers-move ()
    "In headers mode, move and execute message at point without
asking for confirmation."
    (interactive)
    (mu4e-headers-mark-for-move)
    (mu4e-mark-execute-all t))

  (defun ps/mu4e-view-move ()
    "In view mode, move and execute message at point without asking
for confirmation."
    (interactive)
    (mu4e-view-mark-for-move)
    (mu4e-mark-execute-all t))

  ;; github.com/danielfleischer/mu4easy#mu4e
  (setf (alist-get 'trash mu4e-marks)
        '(:char ("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                ;; Here's the main difference to the regular trash mark, no +T
                ;; before -N so the message is not marked as IMAP-deleted:
                :action (lambda (docid msg target)
                          (mu4e~proc-move docid
                                          (mu4e~mark-check-target target) "+S-u-N"))))

  (defun ps/mu4e-view-in-gmail ()
    "Open Gmail in a browser and view message at point in it."
    (interactive)
    (let* ((id (url-hexify-string
                (plist-get (mu4e-message-at-point) :message-id)))
           (url (concat "https://mail.google.com/mail/u/0/#search/rfc822msgid%3A" id)))
      (browse-url url)))

  ;; github.com/djcb/mu/issues/2198
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieving-mail.html
  (defun ps/mu4e-reindex-db ()
    "Reindex `mu' database."
    (interactive)
    (when (shell-command "pkill -2 -u $UID mu")
      (shell-command "sleep 1")
      (shell-command "mu index")))

  (defun ps/mu4e-copy-sum ()
    "Copy amount in subject line."
    (interactive)
    (when (eq major-mode 'mu4e-headers-mode)
      (save-excursion
        (re-search-forward "\\(\\$\\)\\([[:digit:]]+.[[:digit:]]+\\)")
        (kill-new (match-string 2)))))

  (defun ps/mu4e-compose-new-externally ()
    "Start writing a new message in Gmail."
    (interactive)
    (browse-url "https://mail.google.com/mail/u/0/#inbox?compose=new"))

  (defun ps/mu4e-mark-execute-all-no-confirm ()
    "Execute the actions for all marked messages in this buffer,
without asking for user confirmation."
    (interactive)
    (mu4e-mark-execute-all))

  (defun ps/mu4e-goto-archive ()
    "Go to `archive' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-archive-folder "\"")))

  (defun ps/mu4e-goto-daily ()
    "Go to `daily' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-daily-folder "\"")))

  (defun ps/mu4e-goto-drafts ()
    "Go to `drafts' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-drafts-folder "\"")))

  (defun ps/mu4e-goto-inbox ()
    "Go to `inbox' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-inbox-folder "\"")))

  (defun ps/mu4e-goto-sent ()
    "Go to `sent' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-sent-folder "\"")))

  (defun ps/mu4e-goto-trash ()
    "Go to `trash' folder."
    (interactive)
    (mu4e-headers-search (concat "maildir:\"" mu4e-trash-folder "\"")))

  (defun ps/mu4e-headers-mark-read-and-archive ()
    "In headers mode, mark message at point and read and archive
it, without asking for confirmation."
    (interactive)
    (mu4e-headers-mark-for-read)
    (mu4e-mark-execute-all t)
    (forward-line -1)
    (ps/mu4e-headers-archive))

  (defun ps/mu4e-view-mode-hook-functions ()
    "Functions to be called by `mu4e-view-mode-hook'."
    (interactive)
    (toggle-truncate-lines 1)
    (set-face-attribute 'variable-pitch nil :family ps/face-variable-pitch :height 1.15))

  (add-hook 'mu4e-view-mode-hook #'ps/mu4e-view-mode-hook-functions)
  (add-hook 'change-major-mode-hook #'ps/faces-load-custom-faces) ; reload normal faces upon leaving mu4e-view-mode
  (add-hook 'mu4e-mark-execute-pre-hook #'ps/mu4e-gmail-fix-flags)
  ;; Is this needed?
  (add-hook 'mu4e-compose-pre-hook #'org-msg-mode)

  :general
  ("A-m" 'mu4e)
  ((mu4e-main-mode-map mu4e-headers-mode-map mu4e-view-mode-map)
   "c" 'mu4e-compose-new)
  ((mu4e-headers-mode-map mu4e-view-mode-map)
   "$" 'ps/mu4e-copy-sum
   "," 'mu4e-copy-message-path
   "<" 'mu4e-headers-split-view-shrink
   ">" 'mu4e-headers-split-view-grow
   "s-f" 'mu4e-compose-forward
   "i" 'mu4e-select-other-view
   "r" 'mu4e-compose-reply)
  (mu4e-main-mode-map
   "a" 'ps/mu4e-goto-archive
   "d" 'ps/mu4e-goto-drafts
   "g" 'ps/mu4e-compose-new-externally
   "h" 'mu4e-display-manual
   "i" 'ps/mu4e-goto-inbox
   "j" 'mu4e~headers-jump-to-maildir
   "r" 'ps/mu4e-reindex-db
   "s" 'mu4e-headers-search
   "t" 'ps/mu4e-goto-send
   "u" 'mu4e-update-mail-and-index
   "y" 'ps/mu4e-goto-daily
   "x" 'ps/mu4e-goto-trash)
  (mu4e-headers-mode-map
   "*" 'mu4e-headers-mark-all
   "A" 'mu4e-headers-mark-all-unread-read
   "d" 'mu4e-headers-mark-for-delete
   "D" 'ps/mu4e-headers-trash
   "e" 'ps/mu4e-headers-archive
   "E" 'ps/mu4e-headers-mark-read-and-archive
   "f" 'ps/mu4e-headers-view-message
   "k" 'mu4e-headers-prev
   "l" 'mu4e-headers-next
   "m" 'mu4e-headers-mark-for-something
   "R" 'mu4e-headers-mark-for-refile
   "V" 'mu4e-headers-mark-for-move
   "v" 'ps/mu4e-headers-move
   "x" 'ps/mu4e-mark-execute-all-no-confirm)
  (mu4e-view-mode-map
   "," 'mu4e-view-headers-next
   "." 'mu4e-view-headers-prev
   "d" 'mu4e-view-mark-for-delete
   "D" 'ps/mu4e-view-trash
   "e" 'ps/mu4e-view-archive
   "x" 'ps/mu4e-view-in-gmail
   "L" 'mu4e-view-save-attachments
   "m" 'mu4e-view-mark-for-something
   "o" 'ps/mu4e-view-org-capture
   "v" 'ps/mu4e-view-move
   "w" 'mu4e-copy-message-path
   "A-C-s-u" nil
   "A-C-s-p" nil))
#+end_src

*** resources
:PROPERTIES:
:ID:       A7472C4E-FF72-4CBE-A9E2-E3C3F0AB0B38
:END:

- [[https://github.com/morzahavi/.emacs.d/blob/3c5dcd402f19b4b6a9c07942825de52a874e870c/modules/email/mu4e/config.el][.emacs.d/config.el at 3c5dcd402f19b4b6a9c07942825de52a874e870c · morzahavi/.emacs.d · GitHub]]. Highly elaborate config.
- https://ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html. Excellent setup instructions.
- Package to try: [[https://github.com/rougier/mu4e-thread-folding][GitHub - rougier/mu4e-thread-folding: Functions for folding threads in mu4e headers view]]
  - See also [[https://gist.github.com/rougier/98e83fb50e19fb73fe34a7ecc5fc1ccc][this]] (discussed [[https://www.reddit.com/r/emacs/comments/pvpb6d/mu4e_very_fast_thread_folding/][here]])

- [[https://www.youtube.com/watch?v=yZRyEhi4y44]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][A Complete Guide to Email in Emacs using Mu and Mu4e]]. Advanced setup, for MacOS. But uses OfflineMAP rather than isync.
- [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e for Dummies : emacs]].
- [[https://www.ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html][Reading IMAP email in Emacs]]. Very thorough and clearly explained tutorial, written in 2021. Looks like the best resource so far.
- [[https://gist.github.com/areina/3879626][Manage your email in emacs with mu4e · GitHub]]. Instructions from 2016, with updates in comments.
- [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]. Very nice appearance/layout.

- How to set up ~offlineimap~ to retrieve password from ~pass~: https://unix.stackexchange.com/a/48355
- How to install ~mu4e~: https://emacs.stackexchange.com/questions/46156/how-to-install-mu-and-mu4e-with-gui-emacs
- https://www.sastibe.de/2021/01/setting-up-emacs-as-mail-client/

  https://emacs.readthedocs.io/en/latest/mu4e__email_client.html

To re-index the database without restarting Emacs, run ~pkill -2 -u $UID mu~ or ~then ~mu index~ from the terminal. Or try [[https://github.com/djcb/mu/issues/8#issuecomment-396649525][this script]].

If you get a ~pinentry~ problem, try running this on the termnal ~gpgconf --kill gpg-agent~.

To debug "Update process returned with non-zero exit code", ~(start-process-shell-command "test-mu4e" "test-mu4e" mu4e-get-mail-command)~
https://mu-discuss.narkive.com/mxM4AVIW/how-to-debug-non-zero-exit-code

If you encounter problems with mu and Straight, see [[https://github.com/raxod502/straight.el/issues/491#issuecomment-760150634][this thread]].

[2022-07-11 Mon 23:58] Note: ~mu~ is now pinned in ~brew~ (~brew pin mu~) to version 1.6.11. The most recent version (1.8.5) wasn't working well with [[id:DADEABFE-0E73-4E8F-9973-771FFEF55B60][org-msg]] (see [[https://github.com/jeremy-compostella/org-msg/issues/153][this issue]] and [[https://groups.google.com/g/mu-discuss/c/V1WxQzglkZA/m/Av9vJ_BkAgAJ][this thread]]). Once the issue is resolved, unpin it and upgrade to the latest version.

** mu4e-contrib
:PROPERTIES:
:ID:       7D84D1E5-BFA6-4990-AD14-21C51BFD356E
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/mu4e)
(use-feature mu4e-contrib
  :after mu4e
  :demand t)
#+end_src

** mu4e-alert
:PROPERTIES:
:ID:       32C6498F-B3C5-4D50-8ACC-8DD83FF48448
:END:

/[[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] supports desktop notifications and modeline display for mu4e./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/mu4e)
(use-package mu4e-alert
  :after mu4e
  :demand t
  :config
  ;; Notify about unread emails in inbox only
  (setq mu4e-alert-interesting-mail-query "flag:unread AND maildir:/inbox")

  (mu4e-alert-enable-mode-line-display))
#+end_src

** org-msg
:PROPERTIES:
:ID:       DADEABFE-0E73-4E8F-9973-771FFEF55B60
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:14]--[2022-07-22 Fri 19:16] =>  1:02
CLOCK: [2022-07-22 Fri 10:45]--[2022-07-22 Fri 11:14] =>  0:29
CLOCK: [2021-12-18 Sat 14:19]--[2021-12-18 Sat 14:22] =>  0:03
CLOCK: [2021-08-17 Tue 21:26]--[2021-08-17 Tue 21:33] =>  0:07
CLOCK: [2021-08-05 Thu 12:49]--[2021-08-05 Thu 13:03] =>  0:14
:END:

/[[https://github.com/jeremy-compostella/org-msg][org-msg]] is a global minor mode mixing up Org mode and Message mode to compose and reply to emails in a HTML-friendly style./

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/mu4e)
(use-package org-msg
  :after org mu4e
  :demand t
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (setq org-msg-startup "hidestars indent inlineimages")
  (setq org-msg-recipient-names `((,ps/personal-gmail . "Pablo")))
  (setq org-msg-greeting-name-limit 3)
  (setq org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text))))
  (setq org-msg-convert-citation t)
  (setq org-msg-signature ps/personal-signature)
  (setq org-msg-enforce-css '((del nil
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (color . "grey")
                                    (border-left . "none")
                                    (text-decoration . "line-through")
                                    (margin-bottom . "0px")
                                    (margin-top . "10px")
                                    (line-height . "1.3")))
                              (a nil
                                 ((color . "#4078F2")))
                              (a reply-header
                                 ((color . "black")
                                  (text-decoration . "none")))
                              (div reply-header
                                   ((padding . "3.0pt 0in 0in 0in")
                                    (border-top . "solid #d5d5d5 1.0pt")
                                    (margin-bottom . "20px")))
                              (span underline
                                    ((text-decoration . "underline")))
                              (li nil
                                  ((font-family . "\"Georgia\"")
                                   (font-size . "11pt")
                                   (line-height . "1.3")
                                   (margin-bottom . "0px")
                                   (margin-top . "2px")))
                              (nil org-ul
                                   ((list-style-type . "square")))
                              (nil org-ol
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (line-height . "1.3")
                                    (margin-bottom . "0px")
                                    (margin-top . "0px")
                                    (margin-left . "30px")
                                    (padding-top . "0px")
                                    (padding-left . "5px")))
                              (nil signature
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (margin-bottom . "20px")))
                              (blockquote quote0
                                          ((padding-left . "5px")
                                           (font-size . "0.9")
                                           (margin-left . "10px")
                                           (margin-top . "10px")
                                           (margin-bottom . "0")
                                           (background . "#f9f9f9")
                                           (border-left . "3px solid #d5d5d5")))
                              (blockquote quote1
                                          ((padding-left . "5px")
                                           (font-size . "0.9")
                                           (margin-left . "10px")
                                           (margin-top . "10px")
                                           (margin-bottom . "0")
                                           (background . "#f9f9f9")
                                           (color . "#324e72")
                                           (border-left . "3px solid #3c5d88")))
                              (pre nil
                                   ((line-height . "1.3")
                                    (color . "#000000")
                                    (background-color . "#f0f0f0")
                                    (margin . "0px")
                                    (font-size . "9pt")
                                    (font-family . "monospace")))
                              (p nil
                                 ((text-decoration . "none")
                                  (margin-bottom . "0px")
                                  (margin-top . "10px")
                                  (line-height . "1.3")
                                  (font-size . "11pt")
                                  (font-family . "\"Georgia\"")))
                              (div nil
                                   ((font-family . "\"Georgia\"")
                                    (font-size . "11pt")
                                    (line-height . "11pt")))))

  (org-msg-mode)

  (defun ps/org-msg-grammarly ()
    "Enable `grammarly-mode' in `org-msg-edit-mode'."
    (interactive)
    (if (eq major-mode 'org-mode)
        (org-msg-edit-mode)
      (org-mode)
      (require 'lsp-grammarly)
      (lsp)))

  (defun ps/org-msg-kill-message ()
    "Save the current message to the kill ring."
    (interactive)
    (unless (eq major-mode 'org-msg-edit-mode)
      (user-error "Not in org-msg-edit-mode"))
    (save-excursion
      (goto-char (org-msg-start))
      (re-search-forward "^:END:\n")
      (let ((beg (point)))
        (goto-char (org-msg-end))
        (search-backward "#+begin_signature" nil t)
        (kill-region beg (point)))))

  ;; currently, grammarly isn't working reliably in Emacs, so we use the
  ;; external editor instead
  (defun ps/org-msg-open-in-grammarly ()
    "Copy the current message in Grammarly's external editor."
    (interactive)
    (ps/org-msg-kill-message)
    (ps/grammarly-open-external-editor))

  :general
  (org-msg-edit-mode-map
   "s-a" 'org-msg-attach
   "s-b" 'org-msg-goto-body
   "s-g" 'ps/org-msg-open-in-grammarly
   "s-x" 'ps/org-msg-kill-message)
  (org-mode-map
   "A-s-g" 'ps/org-msg-grammarly))
#+end_src

*** TODO [#5] Figure out how to make ~org-msg~ preserve formatting of quoted emails
:PROPERTIES:
:ID:       E379BBD3-8C33-47F2-8CCF-FB15BFAF14DD
:Effort:   0:30
:END:
I.e. the message quoted when on replies to, or forwards, an existing email.

*** TODO [#5] Figure out how to include LaTeX/Mathjax
:PROPERTIES:
:Effort:   0:30
:ID:       E128A0A2-DA3E-4435-ADBF-472E7268678D
:END:

* messaging
:PROPERTIES:
:ID:       7DD09AFA-70A6-4E9D-AA78-C8E8421A9673
:END:
:LOGBOOK:
:END:

** telega
:PROPERTIES:
:ID:       E5B6D1B4-6225-4F69-8522-F8405127E1DE
:END:
:LOGBOOK:
CLOCK: [2022-09-30 Fri 19:27]--[2022-09-30 Fri 20:50] =>  1:23
CLOCK: [2022-09-30 Fri 19:14]--[2022-09-30 Fri 19:26] =>  0:12
CLOCK: [2022-07-15 Fri 14:46]--[2022-07-15 Fri 15:26] =>  0:40
CLOCK: [2022-07-07 Thu 14:30]--[2022-07-07 Thu 14:49] =>  0:19
CLOCK: [2022-07-07 Thu 14:25]--[2022-07-07 Thu 14:30] =>  0:05
CLOCK: [2022-07-07 Thu 03:55]--[2022-07-07 Thu 09:50] =>  5:55
CLOCK: [2022-07-06 Wed 14:43]--[2022-07-06 Wed 15:10] =>  0:27
CLOCK: [2022-07-05 Tue 11:46]--[2022-07-05 Tue 12:17] =>  0:31
CLOCK: [2022-03-02 Wed 15:00]--[2022-03-02 Wed 17:29] =>  2:29
CLOCK: [2021-12-04 Sat 13:13]--[2021-12-04 Sat 13:15] =>  0:02
CLOCK: [2021-11-27 Sat 14:46]--[2021-11-27 Sat 14:54] =>  0:08
CLOCK: [2021-11-22 Mon 13:27]--[2021-11-22 Mon 13:44] =>  0:17
CLOCK: [2021-11-19 Fri 08:24]--[2021-11-19 Fri 08:52] =>  0:28
CLOCK: [2021-11-18 Thu 21:46]--[2021-11-18 Thu 21:51] =>  0:05
CLOCK: [2021-11-18 Thu 12:05]--[2021-11-18 Thu 12:07] =>  0:02
CLOCK: [2021-11-17 Wed 17:18]--[2021-11-17 Wed 17:19] =>  0:01
CLOCK: [2021-11-16 Tue 21:37]--[2021-11-16 Tue 22:38] =>  1:01
CLOCK: [2021-10-23 Sat 12:46]--[2021-10-23 Sat 13:05] =>  0:19
CLOCK: [2021-10-22 Fri 14:39]--[2021-10-22 Fri 15:14] =>  0:35
CLOCK: [2021-10-10 Sun 11:49]--[2021-10-10 Sun 12:51] =>  1:02
CLOCK: [2021-10-09 Sat 21:02]--[2021-10-09 Sat 22:21] =>  1:19
CLOCK: [2021-10-09 Sat 20:05]--[2021-10-09 Sat 20:14] =>  0:09
CLOCK: [2021-10-09 Sat 14:30]--[2021-10-09 Sat 15:02] =>  0:32
CLOCK: [2021-10-08 Fri 23:15]--[2021-10-08 Fri 23:37] =>  0:22
CLOCK: [2021-10-08 Fri 15:38]--[2021-10-08 Fri 17:03] =>  1:25
CLOCK: [2021-10-08 Fri 13:29]--[2021-10-08 Fri 14:15] =>  0:46
CLOCK: [2021-10-08 Fri 12:30]--[2021-10-08 Fri 12:48] =>  0:18
CLOCK: [2021-10-07 Thu 15:39]--[2021-10-07 Thu 15:58] =>  0:19
CLOCK: [2021-10-05 Tue 15:50]--[2021-10-05 Tue 15:59] =>  0:09
CLOCK: [2021-10-02 Sat 23:03]--[2021-10-02 Sat 23:27] =>  0:24
CLOCK: [2021-08-14 Sat 16:05]--[2021-08-14 Sat 16:13] =>  0:08
CLOCK: [2021-08-05 Thu 11:06]--[2021-08-05 Thu 11:22] =>  0:16
CLOCK: [2021-08-04 Wed 18:19]--[2021-08-04 Wed 18:32] =>  0:13
CLOCK: [2021-08-03 Tue 23:33]--[2021-08-03 Tue 23:48] =>  0:15
CLOCK: [2021-08-03 Tue 23:13]--[2021-08-03 Tue 23:26] =>  0:13
CLOCK: [2021-05-17 Mon 11:55]--[2021-05-17 Mon 12:05] =>  0:10
CLOCK: [2021-04-06 Tue 18:05]--[2021-04-06 Tue 18:34] =>  0:29
:END:

/[[https://github.com/zevlg/telega.el][telega]] is an unofficial Emacs Telegram client./

To upgrade TDLib with homebrew, run ~brew upgrade tdlib --fetch-HEAD~ in a terminal, then ~M-x telega-server-build~.

#+begin_src emacs-lisp :results silent
(use-package telega
  :defer 5
  :config
  (setq telega-server-libs-prefix ps/telega-server-libs-prefix)
  (setq telega-chat-input-markups '("org"))
  (setq telega-use-images t)
  (setq telega-emoji-font-family 'noto-emoji)
  (setq telega-emoji-use-images nil)
  (setq telega-filters-custom '(("Main" . main)
                                ("Important" or mention
                                 (and unread unmuted))
                                ("Archive" . archive)
                                ("Online" and
                                 (not saved-messages) (user is-online))
                                ("Groups" type basicgroup supergroup)
                                ("Channels" type channel)))
  (setq telega-completing-read-function 'completing-read)

  (defun ps/telega-switch-to ()
    "Switch to the most recent telega buffer, if one exists, else
 start telega. Always display telega buffers in the rightmost
 window. Repeated invocations of the command will move point from
 the middle of the chatbuf to the end of it, then to the root
 buffer, then to the beginning of it if not already there."
    (interactive)
    (let* ((telega-buffer-root "*Telega Root*")
           (telega-buffer
            (catch 'tag
              (dolist (buffer (buffer-list))
                (when (with-current-buffer buffer
                        (member major-mode '(telega-root-mode telega-chat-mode)))
                  (throw 'tag (buffer-name buffer))))))
           (current-buffer (current-buffer))
           (telega-buffer-is-current (string= (buffer-name current-buffer) telega-buffer)))
      (if telega-buffer
          (if telega-buffer-is-current
              (if (string> telega-buffer telega-buffer-root)
                  (if (ps/bollp)
                      (progn
                        (kill-buffer)
                        (switch-to-buffer telega-buffer-root))
                    (end-of-buffer))
                (beginning-of-buffer)
                (forward-line 4)) ; one extra to move past pinned message
            (switch-to-buffer telega-buffer))
        (telega))
      (let ((telega-buffer (current-buffer)))
        (ps/window-split-if-unsplit)
        (if (> (frame-width) ps/frame-width-threshold)
            (winum-select-window-3)
          (winum-select-window-2))
        (let ((rightmost-window (selected-window))
              (other-window (previous-window)))
          ;; When the command is invoked from a Telega buffer which
          ;; isn't on the rightmost window, we display on that window
          ;; the most recent non-telega buffer.
          (when telega-buffer-is-current
            (setq current-buffer
                  (catch 'tag
                    (dolist (buffer (buffer-list))
                      (unless (with-current-buffer buffer
                                (member major-mode '(telega-root-mode telega-chat-mode)))
                        (throw 'tag buffer))))))
          (set-window-buffer (selected-window) telega-buffer)
          (set-window-buffer other-window current-buffer)))))

  (defun ps/telega-chat-org-capture ()
    "Capture chat message at point with `org-capture'."
    (interactive)
    (org-store-link nil)
    (org-capture nil "n"))

  (defun ps/telega-chat-org-capture-leo ()
    "Capture chat message at point with `org-capture' and turn it
into a task for Leo."
    (interactive)
    (telega-msg-copy-text (telega-msg-at (point)))
    (org-capture nil "lt"))

  (defun ps/telega-filters-push-archive ()
    "Set active filters list to `archive'."
    (interactive)
    (telega-filters-push '(archive)))

  (defun ps/telega-filters-push-main ()
    "Set active filters list to `main'."
    (interactive)
    (telega-filters-push '(main)))

  (telega-mode-line-mode)

  (add-hook 'telega-chat-mode-hook #'(lambda () (setq default-directory ps/dir-downloads)))
  ;; (add-hook 'telega-chat-mode-hook #'telega-autoplay-mode) ; causes massive slowdown
  ;; (add-hook 'telega-chat-mode-hook #'(lambda () (setq line-spacing nil)))

  :general
  ("A-l" 'ps/telega-switch-to)
  ((telega-msg-button-map telega-root-mode-map)
   "k" 'telega-button-backward
   "l" 'telega-button-forward
   "o" 'ps/telega-chat-org-capture)
  (telega-chat-mode-map
   "M-p" nil
   "<return>" 'newline
   "A-C-s-r" 'telega-chatbuf-beginning-of-thing
   "C-<return>" 'telega-chatbuf-input-send
   ;; if point is on a URL, `telega-msg-button-map' ceases to be
   ;; active and `<return>' triggers `newline' rather than
   ;; `push-button'. this seems to be a bug. as a workaround, we also
   ;; bind `push-button' to `M-<return>' in `telega-chat-mode-map'.
   "M-<return>" 'push-button
   "s-," 'telega-chatbuf-goto-pinned-message
   "s-a" 'telega-chatbuf-attach
   "s-c" 'telega-mnz-chatbuf-attach-code
   "s-d" 'telega-chatbuf-goto-date
   "s-f" 'telega-chatbuf-filter
   "s-m" 'telega-chatbuf-attach-media
   "s-r" 'telega-msg-add-reaction
   "s-s" 'telega-chatbuf-filter-search
   "s-t" 'telega-sticker-choose-favorite-or-recent
   "s-v" 'ps/org-paste-html
   "A-s-v" 'telega-chatbuf-attach-clipboard
   "s-z" 'telega-mnz-chatbuf-attach-code
   "A-s-e" 'telega-chatbuf-edit-prev
   "A-s-s" 'ps/telega-chatbuf-attach-most-recent-screenshot
   "A-s-t" 'ps/telega-chatbuf-attach-most-recent-file
   "A-s-v" 'telega-chatbuf-attach-clipboard
   "" 'telega-chatbuf-attach-voice-note)
  (telega-msg-button-map
   "<return>" 'push-button
   "." 'ps/telega-docs-change-open
   "," 'telega-chatbuf-goto-pinned-message
   "a" (lambda! (end-of-buffer) (ps/kill-this-buffer))
   "F" 'telega-msg-forward-marked-or-at-point
   "C" 'telega-msg-copy-link
   "L" 'ps/telega-chat-org-capture-leo
   "s" 'telega-chatbuf-filter-search
   "w" 'telega-browse-url
   "W" 'telega-chatbuf-filter-cancel)
  (telega-chat-button-map
   "a" nil
   "o" nil)
  (telega-root-mode-map
   "SPC" 'telega-root-next-unread
   "." 'telega-chat-with
   "a" 'telega-chat-toggle-archive
   "m" 'telega-chat-toggle-muted)
  (telega-root-view-map
   "a" 'ps/telega-filters-push-archive
   "m" 'ps/telega-filters-push-main)
  (telega-webpage-mode-map
   "x" 'telega-webpage-browse-url)
  (dired-mode-map
   "A-s-a" 'ps/telega-dired-attach-send))
#+end_src

** telega-mnz
:PROPERTIES:
:ID:       473F7E47-4980-4A4A-8EC7-C008DB30BA22
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-mnz.el][telega-mnz]] displays syntax highlighting in Telega code blocks./

#+begin_src emacs-lisp :results silent
(use-feature telega-mnz
  :demand t
  :after telega
  :config
  (setq telega-mnz-use-language-detection nil)

  (add-hook 'telega-load-hook 'global-telega-mnz-mode))

;; (add-hook 'telega-load-hook #'global-telega-mnz-mode))
#+end_src

** telega-dired-dwim
:PROPERTIES:
:ID:       F38952F5-975A-4868-9E6B-BC74CA491BE2
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-dired-dwim.el][telega-dired-dwim]] enables Dired file attachments in Telega chat buffers./

#+begin_src emacs-lisp :results silent
(use-feature telega-dired-dwim
  :demand t
  :after telega
  :config
  ;; copied from github.com/zevlg/telega.el/issues/231
  (defun ps/telega-dired-attach-func (file)
    "Identify msg type for FILE."
    (let ((file-ext (file-name-extension file)))
      (cond ((member file-ext '("mp3" "flac"))
             #'telega-chatbuf-attach-audio)
            ((member file-ext '("mp4" "mkv"))
             #'telega-chatbuf-attach-video)
            ((image-type-from-file-name file)
             #'telega-chatbuf-attach-photo)
            (t
             #'telega-chatbuf-attach-file))))

  (defun ps/telega-dired-attach-send ()
    "Send the marked files."
    (interactive)
    (let ((dired-files (dired-get-marked-files)))
      (unless dired-files
        (user-error "No marked files"))
      (with-current-buffer (telega-chat--pop-to-buffer
                            (telega-completing-read-chat
                             (format "Send %d files to: " (length dired-files))))
        (let ((inhibit-read-only t)
              (buffer-undo-list t))
          (dolist (file dired-files)
            (funcall (ps/telega-dired-attach-func file) file))))))

  (defun ps/telega-chatbuf-attach-most-recent-screenshot ()
    "Attach most recently captured screenshot as photo."
    (interactive)
    (if-let ((screenshot (ps/newest-file default-directory "\\.png$")))
        (telega-chatbuf-attach-photo screenshot)
      (user-error (format "No screenshots found in %s" default-directory))))

  (defun ps/telega-chatbuf-attach-most-recent-file ()
    "Attach most recently saved file in `downloads' folder."
    (interactive)
    (if-let ((file (ps/newest-file ps/dir-downloads)))
        (telega-chatbuf-attach-file file)
      (user-error (format "No files found in %s" ps/dir-downloads)))))
#+end_src

** ol-telega
:PROPERTIES:
:ID:       E973DAC8-E1DE-4B94-80C6-CF80BD0F0836
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/ol-telega.el][ol-telega]] enables Org mode links to Telega chats and messages./

#+begin_src emacs-lisp :results silent
(use-feature ol-telega
  :demand t
  :after telega)
#+end_src

** erc
:PROPERTIES:
:ID:       4FB5ECDA-2DB5-40F5-8BBE-6B0D4B51524D
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:18]--[2021-06-03 Thu 14:40] =>  0:22
CLOCK: [2021-06-02 Wed 12:02]--[2021-06-02 Wed 12:39] =>  0:37
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][erc]] is an IRC client for Emacs./

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :ps/erc)
(use-feature erc
  :after auth-source-pass
  :config
  (setq erc-server "irc.libera.chat")
  (setq erc-user-full-name user-full-name)
  (setq erc-nick (auth-source-pass-get "user" "auth-sources/erc/libera"))
  (setq erc-password (auth-source-pass-get 'secret "auth-sources/erc/libera"))
  (setq erc-prompt-for-nickserv-password nil)
  ;; erc-track-shorten-start 8 ; characters to display in modeline
  (setq erc-autojoin-channels-alist '(("irc.libera.chat")))
  (setq erc-kill-buffer-on-part nil)
  (setq erc-auto-query t)

  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling))
#+end_src

** circe
:PROPERTIES:
:ID:       B5B892BD-A0E2-4D54-977E-58C1CF3CC248
:END:
:LOGBOOK:
CLOCK: [2021-10-07 Thu 14:31]--[2021-10-07 Thu 15:23] =>  0:52
:END:

/[[https://github.com/emacs-circe/circe][circe]] is another IRC client for Emacs./

#+begin_src emacs-lisp :results silent
(use-package circe)
#+end_src

** accord
:PROPERTIES:
:ID:       143D57CF-122E-4FE2-8437-4FB1DE13BC94
:END:

To try:
https://www.reddit.com/r/emacs/comments/ja1nyd/accord_interact_with_discord_via_emacs/

* web
:PROPERTIES:
:ID:       A1741EF4-6B22-498C-A60B-845A26AFAFE7
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 23:40]--[2021-10-21 Thu 00:05] =>  0:25
CLOCK: [2021-05-19 Wed 17:02]--[2021-05-19 Wed 17:43] =>  0:41
CLOCK: [2021-05-18 Tue 18:26]--[2021-05-18 Tue 18:54] =>  0:28
:END:

- [[http://www.howardism.org/Technical/Emacs/browsing-in-emacs.html][Emacs-focused Web Browsing]]
- [[https://protesilaos.com/codelog/2021-03-25-emacs-eww/][EWW and my extras (text-based Emacs web browser) | Protesilaos Stavrou]]

** browse-url
:PROPERTIES:
:ID:       0373B505-A028-4537-871F-3CCC2E5EADB1
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 17:14]--[2023-04-08 Sat 17:45] =>  0:31
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/browse-url)
(use-feature browse-url
  :config
  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
  (setq browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
  (let ((default 'browse-url-default-browser)
        (firefox 'browse-url-firefox))
    ;; these are websites that use JS and have to be browsed
    ;; externally. there are many sites I hardly ever use, but the
    ;; list aspires to be exhaustive rather than representative of
    ;; my browsing habits.
    (dolist (regex '("airbnb\\.com"
                     "airtable\\.com"
                     "alignmentforum\\.com"
                     "amazon\\."
                     "archive\\.org"
                     "audible\\.com"
                     "beyondpricing\\.com"
                     "bloomberg\\.com"
                     "connectedpapers\\.com"
                     "doi\\.org"
                     "dropbox\\.com"
                     "effectivealtruism\\.org"
                     "facebook\\.com"
                     "github\\.com"
                     "gitguardian\\.com"
                     "gmail\\.com"
                     "goodreads\\.com"
                     "google\\.com"
                     "grammarly\\.com"
                     "hathitrust\\.org"
                     "igmchicago\\.org"
                     "imdb\\.com"
                     "interactivebrokers\\.co"
                     "keyboardmaestro\\.com"
                     "letterboxd\\.com"
                     "libgen\\."
                     "LinkedIn\\.com"
                     "list-manage\\.com"
                     "loc\\.gov"
                     "metafilter\\.com"
                     "mercadopago\\.com"
                     "mercadolibre\\.com"
                     "metaculus\\.com"
                     "metaforecast\\.com"
                     "paxful\\.com"
                     "qualtrics\\.com"
                     "rescuetime\\.com"
                     "slack\\.com"
                     "squarespace\\.com"
                     "stafforini\\.com"
                     "teatrocolon\\.org\\.ar"
                     "twitter\\.com"
                     "utoronto\\.ca"
                     "worldcat\\.org"
                     "wetransfer\\.com"
                     "youtu\\.be"
                     "youtube\\.com"
                     "zoom\\.us"))
      (push (cons regex 'browse-url-default-browser) browse-url-handlers))
    (dolist (regex '("economist\\.com"
                     "ft\\.com"))
      (push (cons regex 'browse-url-firefox) browse-url-handlers)))

  (defun ps/browse-url-of-dired-file-externally ()
    "In Dired, open the file at point in an external browser."
    (interactive)
    (let ((browse-url-browser-function 'browse-url-default-browser))
      (browse-url-of-dired-file)))

  :general
  (mhtml-mode-map
   "s-x" 'browse-url-of-buffer)
  (telega-chat-mode-map
   "s-<return>" 'browse-url-at-point)
  (dired-mode-map
   "e" 'ps/browse-url-of-dired-file-externally))
#+end_src

** shr
:PROPERTIES:
:ID:       3E08CE1B-E73A-4440-A545-D2D3480D951B
:END:
:LOGBOOK:
CLOCK: [2021-08-11 Wed 14:04]--[2021-08-11 Wed 14:09] =>  0:05
:END:

#+begin_src emacs-lisp :results silent
(use-feature shr
  :defer 15
  :config
  (setq shr-bullet "• ")
  (setq shr-use-colors nil)
  (setq shr-use-fonts t)
  (setq shr-image-animate nil)
  (setq shr-width nil)
  (setq shr-max-width 120)
  (setq shr-discard-aria-hidden t)
  (setq shr-cookie-policy t)

  :general
  (mhtml-mode-map
   "s-w" 'shr-render-buffer))
#+end_src

** shr-tag-pre-highlight
:PROPERTIES:
:ID:       8956AD37-95A4-4A73-9287-9F70A406E9AF
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:33]--[2021-11-19 Fri 12:35] =>  0:02
:END:

/[[https://github.com/xuchunyang/shr-tag-pre-highlight.el][shr-tag-pre-highlight]] adds syntax highlighting for code blocks in HTML rendered by ~shr~./

#+begin_src emacs-lisp :results silent
(use-package shr-tag-pre-highlight
  :after shr
  :defer 30
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight)))
#+end_src

** shr-heading
:PROPERTIES:
:ID:       CF3431E0-E5B0-41C3-924A-1C96AD3BB46F
:END:

/[[https://github.com/oantolin/emacs-config/blob/master/my-lisp/shr-heading.el][shr-heading]] supports heading navigation for shr-rendered buffers./

Discussion [[https://www.reddit.com/r/emacs/comments/u234pn/comment/i4i3gqg/?utm_source=share&utm_medium=web2x&context=3][here]].

#+begin_src emacs-lisp
(use-package shr-heading
  :elpaca (shr-heading
             :host github
             :repo "oantolin/emacs-config"
             :files ("my-lisp/shr-heading.el"))
  :demand t
  :config
  (add-hook 'eww-mode-hook #'shr-heading-setup-imenu)

  :general
  ((elfeed-show-mode-map eww-mode-map mu4e-view-mode-map)
   "A-C-s-r" 'shr-heading-previous
   "A-C-s-f" 'shr-heading-next))
#+end_src

** eww
:PROPERTIES:
:ID:       E9E3FE6F-5580-4D21-90D8-6B0E595C10F7
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 12:09]--[2023-04-08 Sat 12:21] =>  0:12
CLOCK: [2021-05-18 Tue 17:41]--[2021-05-18 Tue 18:26] =>  0:45
CLOCK: [2021-05-04 Tue 22:07]--[2021-05-04 Tue 22:25] =>  0:18
CLOCK: [2021-05-02 Sun 21:22]--[2021-05-02 Sun 21:32] =>  0:10
CLOCK: [2021-04-21 Wed 16:35]--[2021-04-21 Wed 16:40] =>  0:05
CLOCK: [2021-03-25 Thu 13:48]--[2021-03-25 Thu 14:14] =>  0:26
:END:

#+begin_src emacs-lisp :results silent
(use-feature eww
  :config
  (setq eww-search-prefix "https://www.google.com/search?q=")
  (setq eww-restore-desktop t)
  (setq eww-desktop-remove-duplicates t)
  (setq eww-header-line-format nil)
  (setq eww-download-directory ps/dir-downloads)
  (setq eww-suggest-uris
        '(eww-links-at-point
          thing-at-point-url-at-point))
  (setq eww-history-limit 100000)
  (setq eww-browse-url-new-window-is-tab nil)
  ;; make eww respect url handlers when following links in webpages
  (dolist (cons browse-url-handlers)
    (setq eww-use-browse-url
          (concat eww-use-browse-url "\\|" (car cons))))

  ;; inspired by Prot
  (defun ps/rename-buffer ()
    "Rename EWW buffer using page title or URL.
To be used by `eww-after-render-hook'."
    (let ((name (if (eq "" (plist-get eww-data :title))
                    (plist-get eww-data :url)
                  (plist-get eww-data :title))))
      (rename-buffer name)))

  (defun ps/eww-url-to-pdf (&optional url)
    "Generate PDF of URL."
    (interactive)
    (let* ((url (or url
                    (when (eq major-mode 'eww-mode)
                      (eww-current-url))
                    (read-string "URL: ")))
           (title (ps/org-web-tools--org-title-for-url url))
           (slug (org-hugo-slug title))
           (file-name (file-name-with-extension slug ".pdf"))
           (output-file (file-name-concat ps/dir-downloads file-name)))
      (async-shell-command
       (format
        "'%s' --headless --no-pdf-header --print-to-pdf='%s' %s"
        browse-url-chrome-program
        output-file
        url))))

  (defun ps/eww-url-to-html (&optional url)
    "Generate HTML of URL."
    (interactive)
    (let* ((url (or url
                    (when (eq major-mode 'eww-mode)
                      (eww-current-url))
                    (read-string "URL: ")))
           (title (ps/org-web-tools--org-title-for-url url))
           (slug (org-hugo-slug title))
           (file-name (file-name-with-extension slug ".html"))
           (output-file (file-name-concat ps/dir-downloads file-name)))
      (async-shell-command
       (format
        "'%s' --headless --dump-dom '%s' > %s"
        browse-url-chrome-program
        url
        output-file))))

  (defvar ps/eww-readable-exceptions
    '("protesilaos\\.com"
      "wikipedia\\.org"
      "git\\.sr\\.ht")
    "List of URLs for which `eww-readable' should not be used by default.")

  (defun ps/eww-readable-autoview ()
    "Display the 'readable' parts of the current web page by default.
    The exceptions are listed in `ps/eww-readable-exceptions'."
    (let* ((current-url (eww-current-url))
           (exception
            (catch 'exception
              (dolist (url ps/eww-readable-exceptions)
                (when (string-match-p url current-url)
                  (throw 'exception t))))))
      (unless exception
        (eww-readable))))

  ;; The following four commands copied from
  ;; github.com/gopar/.emacs.d#eww
  (defun ps/eww-edit-current-url (&optional arg)
    (interactive)
    (let* ((url (eww-copy-page-url))
           (uris (eww-suggested-uris)))
      (setq url (read-string "Edit URL or new search: " url 'eww-promt-history uris))
      (setq url (eww--dwim-expand-url url))
      (eww url (if arg 4 nil))))

  (defun ps/open-eww-with-recent-kill-ring (&optional arg)
    "Open current EWW with most recent item in kill ring.
    If prefix arg is passed, then open in new EWW buffer."
    (interactive "P")
    (if arg
        (with-current-buffer
            (if (eq major-mode 'eww-mode) (clone-buffer)
              (generate-new-buffer "*eww*"))
          (eww-mode)
          (eww (current-kill 0)))
      (eww (current-kill 0))))

  (defun ps/eww-go-up-url-hierarchy ()
    "Go up the URL hierarchy."
    (interactive)
    (let* ((url (url-generic-parse-url (eww-current-url)))
           (filepath (url-filename url))
           (paths (s-split "/" filepath))
           (new-path (s-join "/" (butlast paths 1)))
           (new-url nil))
      (setq new-url (url-parse-make-urlobj
                     (url-type url)
                     (url-user url)
                     (url-password url)
                     (url-host url)
                     (url-port url)
                     new-path
                     (url-target url)
                     nil
                     (url-fullness url)))
      (eww-browse-url (url-recreate-url new-url))))

  (defun ps/eww-go-to-root-url-hierarchy ()
    "Go to root of current URL hierarchy"
    (interactive)
    (let* ((url (url-generic-parse-url (eww-current-url)))
           (new-url nil))
      (setq new-url (url-parse-make-urlobj
                     (url-type url)
                     (url-user url)
                     (url-password url)
                     (url-host url)
                     (url-port url)
                     ""
                     (url-target url)
                     nil
                     (url-fullness url)))
      (eww-browse-url (url-recreate-url new-url))))

  (dolist (function #'(ps/rename-buffer
                       ps/eww-readable-autoview))
    (add-hook 'eww-after-render-hook function))

  :general
  ("A-w" 'eww)
  (eww-mode-map
   "[" 'eww-previous-url
   "]" 'eww-next-url
   "j" 'eww-back-url
   ";" 'eww-forward-url
   "r" 'eww-readable
   "g" nil
   "g e" 'ps/eww-edit-current-url
   "g u" 'ps/eww-go-up-url-hierarchy
   "g U" 'ps/eww-go-to-root-url-hierarchy
   ;; "p" 'ps/open-eww-with-recent-kill-ring
   "o" 'eww-toggle-fonts
   "p" 'ps/eww-url-to-pdf
   ":" (lambda! (eww-follow-link '(4)))
   "x" 'eww-browse-with-external-browser))
#+end_src

*** TODO [#5] Integrate eww Chrome, Firefox history
:PROPERTIES:
:ID:       2C3DB6DF-B599-49DF-AD30-41C77D2326D7
:END:

*** TODO [#6] Create command to background open in ~eww~
:PROPERTIES:
:ID:       52CAC919-6942-466F-AA47-4FF86F7F13AE
:END:

*** TODO [#6] Create command to create PDF of URL
:PROPERTIES:
:ID:       19C5F99D-E00D-4552-8B6C-81150C61DF2F
:Effort:   0:25
:END:
:LOGBOOK:
CLOCK: [2022-07-25 Mon 13:51]--[2022-07-25 Mon 14:01] =>  0:10
CLOCK: [2022-07-19 Tue 21:36]--[2022-07-19 Tue 22:31] =>  0:55
CLOCK: [2022-07-19 Tue 20:49]--[2022-07-19 Tue 21:05] =>  0:16
:END:

** w3m
:PROPERTIES:
:ID:       986E4522-7EE1-477A-89EB-08855BCBECEE
:END:
:LOGBOOK:
CLOCK: [2021-03-29 Mon 21:25]--[2021-03-29 Mon 21:41] =>  0:16
:END:

/[[https://github.com/emacs-w3m/emacs-w3m][w3m]] is an Emacs interface to w3m./

#+begin_src emacs-lisp :results silent
(use-package w3m
  :config
  (setq mm-text-html-renderer 'w3m)
  :general
  (w3m-minor-mode-map
   "<left>" 'left-char
   "<right>" 'right-char)
  (w3m-mode-map
   "s-<return>" 'w3m-view-url-with-browse-url)
  (mu4e-view-mode-map
   "<return>" 'w3m-view-url-with-browse-url))
#+end_src

** elfeed
:PROPERTIES:
:ID:       FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5
:END:
:LOGBOOK:
CLOCK: [2021-12-06 Mon 18:29]--[2021-12-06 Mon 18:41] =>  0:12
CLOCK: [2021-11-19 Fri 17:02]--[2021-11-19 Fri 19:27] =>  2:25
CLOCK: [2021-11-19 Fri 10:34]--[2021-11-19 Fri 10:40] =>  0:06
CLOCK: [2021-11-16 Tue 15:17]--[2021-11-16 Tue 15:27] =>  0:10
CLOCK: [2021-10-09 Sat 13:56]--[2021-10-09 Sat 14:30] =>  0:34
CLOCK: [2021-08-05 Thu 22:25]--[2021-08-05 Thu 22:27] =>  0:02
CLOCK: [2021-07-26 Mon 18:54]--[2021-07-26 Mon 19:12] =>  0:18
CLOCK: [2021-07-06 Tue 15:50]--[2021-07-06 Tue 16:16] =>  0:26
CLOCK: [2021-07-04 Sun 12:44]--[2021-07-04 Sun 13:02] =>  0:18
CLOCK: [2021-07-04 Sun 12:05]--[2021-07-04 Sun 12:37] =>  0:32
CLOCK: [2021-07-04 Sun 11:26]--[2021-07-04 Sun 11:55] =>  0:29
CLOCK: [2021-07-04 Sun 10:36]--[2021-07-04 Sun 10:53] =>  0:17
CLOCK: [2021-06-25 Fri 22:16]--[2021-06-25 Fri 22:18] =>  0:02
CLOCK: [2021-06-25 Fri 12:36]--[2021-06-25 Fri 12:58] =>  0:22
CLOCK: [2021-06-24 Thu 19:49]--[2021-06-24 Thu 19:59] =>  0:10
CLOCK: [2021-06-23 Wed 21:34]--[2021-06-23 Wed 21:46] =>  0:12
CLOCK: [2021-06-22 Tue 18:19]--[2021-06-22 Tue 18:24] =>  0:05
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:05] =>  0:00
CLOCK: [2021-06-16 Wed 21:58]--[2021-06-16 Wed 22:17] =>  0:19
CLOCK: [2021-05-20 Thu 12:33]--[2021-05-20 Thu 12:43] =>  0:10
CLOCK: [2021-05-18 Tue 12:58]--[2021-05-18 Tue 13:07] =>  0:09
CLOCK: [2021-05-14 Fri 10:38]--[2021-05-14 Fri 10:40] =>  0:02
CLOCK: [2021-04-13 Tue 08:10]--[2021-04-13 Tue 08:21] =>  0:11
CLOCK: [2021-04-08 Thu 21:19]--[2021-04-08 Thu 21:50] =>  0:31
:END:

/[[https://github.com/skeeto/elfeed][elfeed]] is a web feeds client./

| key   | command                          | behavior                      |
|-------+----------------------------------+-------------------------------|
| RET   | ~eww-follow-link '(4)~             | open link at point in Chrome  |
| S-RET | ~eww-follow-link~                  | open link at point in eww     |
| x     | ~elfeed-show-visit~                | open link of buffer in Chrome |
| v     | ~ps/elfeed-show-visit-in-eww~      | open link of buffer in eww    |
| c     | ~elfeed-kill-link-url-at-point~    | copy link at point            |
| w     | ~ps/elfeed-kill-link-url-of-entry~ | copy link of buffer           |
| f     | ~ace-link-eww '(4)~                | open link selected in Chrome  |
| F     | ~ace-link-eww~                     | open link selected in eww     |

These key bindings produce the same behavior in eww.

If the lines are breaking at the wrong places, set ~shr-width~ to the right value.

Check [[https://www.reddit.com/r/emacs/comments/gpoaaa/updating_elfeed_using_seperate_emacs_process/][this]].

#+begin_src emacs-lisp :results silent
(use-package elfeed
  :config

  (setq-default elfeed-search-filter "+unread -wiki")

  ;; Borrowed from Prot
  (defun ps/elfeed-show-visit-in-eww (&optional link)
    "Browse current entry's link or optional LINK in `eww'. Only show
the readable part once the website loads. This can fail on
poorly-designed websites."
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (or link (elfeed-entry-link entry))))
      (eww link)
      (add-hook 'eww-after-render-hook 'eww-readable nil t)))

  (defun ps/elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (defun ps/elfeed-full-update ()
    "*Really* update feeds!"
    (interactive)
    (let ((elfeed-search-buffer "*elfeed-search*"))
      (when (and (get-buffer elfeed-search-buffer)
                 (not (equal (buffer-name) elfeed-search-buffer)))
        (kill-buffer elfeed-search-buffer)))
    (elfeed-org)
    (elfeed-unjam)
    (elfeed-update))

  (defun ps/elfeed-kill-link-url-of-entry ()
    "Add link of current entry to kill ring."
    (interactive)
    (let ((link (elfeed-entry-link elfeed-show-entry)))
      (when link
        (message "Copied link: %s" link)
        (kill-new link))))

  (defun ps/elfeed-filter-tags (tags)
    (elfeed-search-set-filter tags)
    (if (string= tags "")
        (message "Showing everything")
      (message (concat "Showing " tags))))

  (defvar ps/elfeed-toggle-read-entries t)
  (defun ps/elfeed-toggle-read-entries ()
    "Toggle between showing and hiding read entries."
    (interactive)
    (if ps/elfeed-toggle-read-entries
        (ps/elfeed-filter-tags "")
      (ps/elfeed-filter-tags "+unread"))
    (setq ps/elfeed-toggle-read-entries (not ps/elfeed-toggle-read-entries)))

  (defvar ps/elfeed-toggle-wiki-entries t)
  (defun ps/elfeed-toggle-wiki-entries ()
    "Toggle between showing all, or only 'wiki', unread entries."
    (interactive)
    (if ps/elfeed-toggle-wiki-entries
        (ps/elfeed-filter-tags "+unread +wiki")
      (ps/elfeed-filter-tags "+unread -wiki"))
    (setq ps/elfeed-toggle-wiki-entries (not ps/elfeed-toggle-wiki-entries)))

  (defun ps/elfeed-toggle-fixed-pitch ()
    "Toggle between fixed pitch and variable pitch."
    (interactive)
    (if shr-use-fonts
        (setq shr-use-fonts nil)
      (setq shr-use-fonts t))
    (elfeed-show-refresh))

  (defun ps/elfeed-toggle-session ()
    "Start or end an `elfeed' session."
    (interactive)
    (if (or
         (equal major-mode 'elfeed-search-mode)
         (equal major-mode 'elfeed-show-mode))
        (progn
          ;; (global-writeroom-mode 0)
          (kill-matching-buffers "^\*elfeed\-*\*" nil t))
      (elfeed)
      (when (< elfeed-search-last-update
               (time-to-seconds (time-subtract (current-time) (seconds-to-time (* 60 60 2)))))
        (elfeed-update))
      ;; (global-writeroom-mode 1)
      ))

  ;; This only works in Firefox due to a Chrome limitation
  ;; xenodium.com/open-emacs-elfeed-links-in-background/
  (defun ps/elfeed-search-browse-background-url ()
    "Open current `elfeed' entry (or region entries) in browser without losing focus."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (mapc (lambda (entry)
              (cl-assert (memq system-type '(darwin)) t "open command is macOS only")
              (start-process (concat "open " (elfeed-entry-link entry))
                             nil "open" "--background" (elfeed-entry-link entry))
              (elfeed-untag entry 'unread)
              (elfeed-search-update-entry entry))
            entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
        (forward-line))))

  (defun ps/show-elfeed (buffer)
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (goto-char (point-min))
      (re-search-forward "\n\n")
      (fill-individual-paragraphs (point) (point-max))
      (setq buffer-read-only t))
    (switch-to-buffer buffer)
    (elfeed-show-refresh))

  ;; (run-with-idle-timer (* 60 10) t 'elfeed-update)

  (add-hook 'elfeed-show-mode-hook #'shr-heading-setup-imenu)
  ;; I believe this is no longer needed
  ;; github.com/skeeto/elfeed/issues/190#issuecomment-384346895
  ;; (elfeed-show-mode-hook . (lambda ()
  ;;                            (setq fill-column (current-fill-column))
  ;;                            (setq-local shr-width (current-fill-column))
  ;;                            (setq elfeed-show-entry-switch #'ps/show-elfeed)))

  :general
  ;; ("A-f" (lambda! (elfeed) (ps/elfeed-full-update)))
  ("A-f" 'ps/elfeed-toggle-session)
  (eww-mode-map
   "c" 'elfeed-kill-link-url-at-point)
  (elfeed-show-mode-map
   "q" nil)
  (elfeed-search-mode-map
   "A" 'ps/elfeed-mark-all-as-read
   "d" 'elfeed-update
   "e" 'ps/elfeed-toggle-read-entries
   "f" 'ps/avy-elfeed-search-show-entry
   "q" 'ps/elfeed-toggle-session
   "U" 'ps/elfeed-full-update
   "j" 'elfeed-unjam
   "o" 'elfeed-org
   "w" 'ps/elfeed-toggle-wiki-entries)
  (elfeed-show-mode-map
   "S-<return>" 'eww-follow-link
   "<return>" 'eww-follow-link
   "<tab>" (lambda! (elfeed-show-next-link) (recenter))
   "b" nil
   "q" 'elfeed
   "i" 'ps/elfeed-toggle-fixed-pitch
   "j" 'elfeed-show-next
   ";W" 'elfeed-show-prev
   "v" 'ps/elfeed-show-visit-in-eww
   "w" 'ps/elfeed-kill-link-url-of-entry
   "x" 'elfeed-show-visit))
#+end_src

** elfeed-org
:PROPERTIES:
:ID:       DF954E99-17CB-4698-934E-53E038C654EF
:END:

/[[https://github.com/remyhonig/elfeed-org][elfeed-org]] supports defining the feeds used by elfeed in an org-mode file./

#+begin_src emacs-lisp :results silent
(use-package elfeed-org
  :after elfeed
  :demand t
  :config
  (setq rmh-elfeed-org-files (list ps/file-feeds-pablo ps/file-tlon-feeds))

  (elfeed-org))
#+end_src

** google-this
:PROPERTIES:
:ID:       877DFFD8-8121-4CEC-B8EC-175EB8526641
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 14:43]--[2022-07-21 Thu 14:56] =>  0:13
CLOCK: [2022-07-21 Thu 14:30]--[2022-07-21 Thu 14:30] =>  0:00
CLOCK: [2021-05-22 Sat 21:42]--[2021-05-22 Sat 21:50] =>  0:08
:END:

/[[https://github.com/Malabarba/emacs-google-this][google-this]] is a set of emacs functions and bindings to google under point./

[2023-05-09 Tue 10:07] Replacing with ~engine-mode~

#+begin_src emacs-lisp :results silent :tangle no
(use-package google-this
  :config/el-patch
  ;; Tweak original function to offer contents of kill ring if there
  ;; is no symbol or word at point.
  (defun google-this-pick-term (prefix)
    "Decide what \"this\" and return it.
PREFIX determines quoting."
    (let* ((term (if (region-active-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (or (thing-at-point 'symbol)
                       (thing-at-point 'word)
                       (el-patch-swap
                         (buffer-substring-no-properties (line-beginning-position)
                                                         (line-end-position))
                         (current-kill 0)))))
           (term (read-string (concat "Googling [" term "]: ") nil nil term)))
      term))

  :general
  ("H-g" 'google-this-search)
  :bind-keymap
  ("H-G" . google-this-mode-submap))
#+end_src

** engine-mode
:PROPERTIES:
:ID:       437B98FC-3667-43C4-9EF6-470E23FE7561
:END:
:LOGBOOK:
CLOCK: [2023-05-14 Sun 18:09]--[2023-05-14 Sun 19:59] =>  1:50
CLOCK: [2023-04-07 Fri 21:53]--[2023-04-07 Fri 22:38] =>  0:45
CLOCK: [2021-04-21 Wed 20:39]--[2021-04-21 Wed 20:41] =>  0:02
:END:

/[[https://github.com/hrs/engine-mode][engine-mode]] is a minor mode for defining and querying search engines through Emacs./

#+begin_src emacs-lisp :results silent
(use-package engine-mode
  :init
  (engine-mode)

  :config
  (setq engine/browser-function browse-url-browser-function)

  (defun ps/engine-mode-import-from-chrome (csv-file-path)
    "Import csv file exported from Chrome.
To export Chrome search engines, see
https://superuser.com/a/1350144/387888."
    (with-temp-buffer
      (insert-file-contents csv-file-path)
      (goto-char (point-min))
      (while (not (eobp))
        (let* ((line (buffer-substring-no-properties (line-beginning-position)
                                                     (line-end-position)))
               (split-line (split-string line ","))
               (raw-engine-name (car split-line))
               (engine-name (replace-regexp-in-string " " ""
                                                      (replace-regexp-in-string "\"" "" raw-engine-name)))
               (keybinding (cadr split-line))
               (url (caddr split-line)))
          (message "(defengine %s\n    \"%s\"\n    :keybinding \"%s\")"
                   engine-name url keybinding))
        (forward-line))))

  (defengine AllMusic
    "http://www.allmusic.com/search/all/%s"
    :keybinding "a m")
  (defengine Alignment-Forum
    "https://www.alignmentforum.org/search?query=%s"
    :keybinding "a f")
  (defengine AlternativeTo
    "http://alternativeto.net/SearchResult.aspx?profile=all&search=%s"
    :keybinding "a t")
  (defengine Amazon-DE
    "http://www.amazon.de/s?k=%s"
    :keybinding "a d")
  (defengine Amazon-ES
    "http://www.amazon.es/s?k=%s"
    :keybinding "a e")
  (defengine Amazon-FR
    "https://www.amazon.fr/s?k=%s"
    :keybinding "a f")
  (defengine Amazon-IT
    "https://www.amazon.it/s?k=%s"
    :keybinding "a i")
  (defengine Amazon-MX
    "https://www.amazon.com.mx/s?k=%s"
    :keybinding "a x")
  (defengine Amazon-UK
    "http://www.amazon.co.uk/s?k=%s"
    :keybinding "a k")
  (defengine Amazon-US
    "http://www.amazon.com/s?k=%s"
    :keybinding "a a")
  (defengine AnkiWeb
    "https://ankiweb.net/shared/decks/%s"
    :keybinding "a w")
  (defengine AstralCodexTen
    "https://substack.com/search/%s?focusedPublicationId=89120"
    :keybinding "a c"
    ;; individual Substack posts render nicely in eww, but for other pages we need a modern browser
    :browser 'browse-url-default-browser)
  (defengine Audible
    "https://www.audible.com/search/ref=a_hp_tseft?advsearchKeywords=%s&filterby=field-keywords&x=13&y=11"
    :keybinding "a u")
  (defengine AudioBookBay
    "https://audiobookbay.se/?s=%s"
    :keybinding "a b")
  (defengine EABlogs
    "https://cse.google.com/cse?cx=013594344773078830993:k3igzr2se6y&q=%s"
    :keybinding "b b")
  (defengine Bing
    "https://www.bing.com/search?q=%s&PC=U316&FORM=CHROMN"
    :keybinding "b i")
  (defengine Blackwells
    "http://bookshop.blackwell.co.uk/bookshop/search/?keyword=%s"
    :keybinding "b l")
  (defengine BookFinder
    "http://www.bookfinder.com/search/?keywords=%s&st=xl&ac=qr&src=opensearch"
    :keybinding "b f")
  (defengine MercadoLibre
    "https://listado.mercadolibre.com.ar/%s#D[A:qwer]"
    :keybinding "c c")
  (defengine CRSocietyForums
    "https://www.crsociety.org/search/?q=%s"
    :keybinding "c r")
  (defengine Calendly
    "https://calendly.com/app/login?email=%s&lang=en"
    :keybinding "c l")
  (defengine ChromeExtensions
    "https://chrome.google.com/webstore/search/%s?_category=extensions"
    :keybinding "c e")
  (defengine Crossref
    "https://search.crossref.org/?q=%s"
    :keybinding "c r")
  (defengine DOI
    "https://doi.org/%s"
    :keybinding "d o")
  (defengine DuckDuckGo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d d")
  (defengine EAForum
    "https://www.google.com/search?q=%s+site:forum.effectivealtruism.org"
    :keybinding "f f")
  (defengine Ebay-UK
    "https://www.ebay.co.uk/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e k")
  (defengine Ebay-US
    "https://www.ebay.com/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e b")
  (defengine Ebay-DE
    "https://www.ebay.de/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e d")
  (defengine Flickr
    "http://www.flickr.com/search/?q=%s"
    :keybinding "f l")
    (defengine Financial-Times
    "https://www.ft.com/search?q=%s"
    :keybinding "f t")
  (defengine GitHub
    "https://github.com/search?q=%s&type=codeu"
    :keybinding "g h")
  (defengine GiveWell
    "https://www.givewell.org/search/ss360/%s"
    :keybinding "g w")
  (defengine Goodreads
    "http://www.goodreads.com/search/search?search_type=books&search[query]=%s"
    :keybinding "g r")
  (defengine Google
    "https://www.google.com/search?q=%s"
    :keybinding "g g")
  (defengine Google-Books
    "https://www.google.com/search?q=%s&btnG=Search+Books&tbm=bks&tbo=1&gws_rd=ssl"
    :keybinding "g k")
  (defengine Google-Custom-Search
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "g c")
  (defengine Google-Domains
    "https://domains.google.com/registrar?s=%s&hl=en"
    :keybinding "g d")
  (defengine Google-Drive
    "https://drive.google.com/drive/u/0/search?q=%s"
    :keybinding "g d")
  (defengine Google-Images
    "https://www.google.com/search?tbm=isch&source=hp&biw=1920&bih=1006&ei=2PlgWp_OEcHF6QTo2b2ACQ&q=%s"
    :keybinding "g i")
  (defengine Google-Maps
    "https://www.google.com/maps/search/%s"
    :keybinding "g m")
  (defengine Google-News
    "https://news.google.com/search?q=%s"
    :keybinding "g n")
  (defengine Google-Photos
    "https://photos.google.com/search/%s"
    :keybinding "g p")
  (defengine Google-Play
    "https://play.google.com/store/search?q=%s"
    :keybinding "g y")
  (defengine Google-Podcasts
    "https://podcasts.google.com/?q=%s"
    :keybinding "g o")
  (defengine Google-Scholar
    "https://scholar.google.com/scholar?hl=en&as_sdt=1%2C5&q=%s&btnG="
    :keybinding "s s")
  (defengine Google-Translate
    "https://translate.google.com/#auto/en/%s"
    :keybinding "g t")
  (defengine Google-Trends
    "http://www.google.com/trends/explore#q=%s"
    :keybinding "g e")
  (defengine Google-Video
    "https://www.google.com/search?q=%s&tbm=vid"
    :keybinding "g v")
  (defengine GoDaddy
    "https://www.godaddy.com/domainsearch/find?checkAvail=1&domainToCheck=%s"
    :keybinding "g d")
  (defengine Gwern
    "https://www.google.com/search?q=%s+site:gwern.net"
    :keybinding "g w")
  (defengine IMDb
    "https://www.imdb.com/find/?q=%s"
    :keybinding "i i")
  (defengine IMDb-Actor
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i a")
  (defengine IMDb-Director
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i d")
  (defengine IMDb-Composer
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i c")
  (defengine Internet-Archive
    "https://archive.org/search.php?query=%s"
    :keybinding "v v")
  (defengine JustWatch
    "https://www.justwatch.com/us/search?q=%s"
    :keybinding "j w")
  (defengine KAYAK
    "https://www.kayak.co.uk/sherlock/opensearch/search?q=%s"
    :keybinding "k k")
  (defengine Keyboard-Maestro
    "https://forum.keyboardmaestro.com/search?q=%s"
    :keybinding "k m")
  (defengine Lastfm
    "http://www.last.fm/search?q=%s"
    :keybinding "f m")
  (defengine LessWrong
    "https://www.google.com/search?q=%s+site:lesswrong.com"
    :keybinding "l w")
  (defengine LessWrongWiki
    "https://wiki.lesswrong.com/index.php?title=Special:Search&search=%s"
    :keybinding "l i")
  (defengine LibraryGenesis
    "http://libgen.li/index.php?req=%s"
    :keybinding "l l")
  (defengine Librivox
    "https://librivox.org/search?q=%s&search_form=advanced"
    :keybinding "l v")
  (defengine LinkedIn
    "http://www.linkedin.com/vsearch/f?type=all&keywords=%s&orig=GLHD&rsid=&pageKey=member-home&search=Search"
    :keybinding "i n")
  (defengine Linguee
    "https://www.linguee.com/english-spanish/search?source=auto&query=%s"
    :keybinding "l i")
  (defengine Marginal-Revolution
    "https://www.google.com/search?ei=MDueW4SzN5H8gAau5I0Y&q=%s+site:marginalrevolution.com"
    :keybinding "m r")
  (defengine MediaCenter
    "https://www.google.com/search?q=%s+site:yabb.jriver.com"
    :keybinding "m c")
  (defengine Medium
    "https://medium.com/search?q=%s&ref=opensearch"
    :keybinding "m d")
  (defengine Melpa
    "https://melpa.org/#/?q=%s"
    :keybinding "m p")
  (defengine MetaFilter
    "https://www.metafilter.com/contribute/search.mefi?site=mefi&q=%s"
    :keybinding "m f")
  (defengine Metaculus
    "https://www.metaculus.com/questions/?order_by=-activity&search=%s"
    :keybinding "m e")
  (defengine Metaforecast
    "https://metaforecast.org/?query=%s"
    :keybinding "m m")
  (defengine Movielens
    "https://movielens.org/explore?q=%s"
    :keybinding "m l")
  (defengine Netflix
    "https://www.netflix.com/search?q=%s"
    :keybinding "n n")
  (defengine New-York-Times
    "https://www.nytimes.com/search?query=%s"
    :keybinding "n y")
  (defengine Notatu-Dignum
    "http://www.stafforini.com/quotes/index.php?s=%s"
    :keybinding "q q")
  (defengine OddsChecker
    "https://www.oddschecker.com/search?query=%s"
    :keybinding "o c")
  (defengine Open-Philanthropy
    "https://www.google.com/search?q=%s+site:openphilanthropy.org"
    :keybinding "o p")
  (defengine Overcoming-Bias
    "https://substack.com/search/%s?focusedPublicationId=1245641"
    :keybinding "o b"
    :browser 'browse-url-default-browser)
  (defengine OxfordReference
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/search?btog=chap&q0=%22%s%22"
    :keybinding "o r")
  (defengine OxfordReferenceDOI
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/view/%s"
    :keybinding "o d")
  (defengine PhilPapers
    "http://philpapers.org/s/%s"
    :keybinding "p p")
  (defengine Reddit
    "https://www.reddit.com/search?q=%s&utm_source=opensearch"
    :keybinding "r r")
  (defengine ReducingSuffering
    "http://reducing-suffering.org/?s=%s"
    :keybinding "r s")
  (defengine Reference
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "r f")
  (defengine sci-hub
    "https://sci-hub.se/%s"
    :keybinding "u u")
  (defengine ScienceDirectencyclopedias
    "https://www.sciencedirect.com/search?qs=%s&articleTypes=EN"
    :keybinding "s e")
  (defengine SlateStarCodex
    "http://slatestarcodex.com/?s=%s"
    :keybinding "s c")
  (defengine StackSnippet
    "http://www.stacksnippet.com/#gsc.tab=0&gsc.q=%s"
    :keybinding "s n")
  (defengine Stanford-Encyclopedia-of-Philosophy
    "https://plato.stanford.edu/search/searcher.py?query=%s"
    :keybinding "s p")
  (defengine Tango-DJ
    "http://www.tango-dj.at/database/?tango-db-search=%s&search=Search"
    :keybinding "d j")
  (defengine TangoDJ-Yahoo-Group
    "http://groups.yahoo.com/group/TangoDJ/msearch?query=%s&submit=Search&charset=ISO-8859-1"
    :keybinding "t y")
  (defengine TasteDive
    "https://tastedive.com/like/%s"
    :keybinding "t d")
  (defengine ThreadReader
    "https://threadreaderapp.com/search?q=%s"
    :keybinding "t r")
  (defengine Twitter
    "https://twitter.com/search?q=%s&src=typed_query"
    :keybinding "t w")
  (defengine Vimeo
    "http://vimeo.com/search?q=%s"
    :keybinding "v m")
  (defengine WaybackMachine
    "http://web.archive.org/web/*/%s"
    :keybinding "w b")
  (defengine Wikipedia-Deutsch
    "https://de.wikipedia.org/w/index.php?title=Spezial:Suche&search=%s"
    :keybinding "w d")
  (defengine Wikipedia-English
    "http://en.wikipedia.org/w/index.php?title=Special:Search&profile=default&search=%s&fulltext=Search"
    :keybinding "w w")
  (defengine Wikipedia-French
    "http://fr.wikipedia.org/w/index.php?title=Spécial:Recherche&search=%s"
    :keybinding "w f")
  (defengine Wikipedia-Italiano
    "http://it.wikipedia.org/w/index.php?title=Speciale:Ricerca&search=%s"
    :keybinding "w i")
  (defengine Wikipedia-Spanish
    "https://es.wikipedia.org/w/index.php?search=%s&title=Especial:Buscar&ns0=1&ns11=1&ns100=1"
    :keybinding "w e")
  (defengine Wikipedia-Swedish
    "http://sv.wikipedia.org/w/index.php?title=Special:S%C3%B6k&search=%s"
    :keybinding "w s")
  (defengine Wirecutter
    "https://thewirecutter.com/search/?s=%s"
    :keybinding "w t")
  (defengine WorldCat
    "http://www.worldcat.org/search?q=%s&qt=results_page"
    :keybinding "w c")
  (defengine YahooFinance
    "https://finance.yahoo.com/company/%s"
    :keybinding "y f")
  (defengine YouTube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y t")
  (defengine YouTubemovies
    "https://www.youtube.com/results?lclk=long&filters=hd%2Clong&search_query=%s"
    :keybinding "y m")

  (engine/set-keymap-prefix (kbd "H-g")))
#+end_src


** osm
:PROPERTIES:
:ID:       1DCEE01C-1951-45F0-B9B8-60977E2D4314
:END:
:LOGBOOK:
CLOCK: [2022-05-16 Mon 19:11]--[2022-05-16 Mon 19:19] =>  0:08
:END:

/[[https://github.com/minad/osm][osm]] is an OpenStreetMap viewer for Emacs./

#+begin_src emacs-lisp :results silent
(use-package osm
  :elpaca (osm
             :host github
             :repo "minad/osm")
  :init
  ;; Load Org link support
  (with-eval-after-load 'org
    (require 'osm-ol)))
#+end_src

** twittering-mode
:PROPERTIES:
:ID:       125BC626-0D89-468E-9026-AF3CF58939F2
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 14:40]--[2022-07-19 Tue 15:56] =>  1:16
CLOCK: [2022-07-18 Mon 19:53]--[2022-07-18 Mon 20:04] =>  0:11
CLOCK: [2022-07-12 Tue 21:47]--[2022-07-12 Tue 22:16] =>  0:29
CLOCK: [2022-07-12 Tue 20:45]--[2022-07-12 Tue 21:30] =>  0:45
CLOCK: [2021-05-20 Thu 19:22]--[2021-05-20 Thu 19:36] =>  0:14
CLOCK: [2021-05-16 Sun 20:34]--[2021-05-16 Sun 21:22] =>  0:48
CLOCK: [2021-04-03 Sat 17:59]--[2021-04-03 Sat 18:15] =>  0:16
:END:

/[[https://github.com/hayamiz/twittering-mode][twittering-mode]] is a Twitter client for Emacs./

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :ps/twittering-mode)
(use-package twittering-mode
  :defer t
  :config
  (defalias 'epa--decode-coding-string 'decode-coding-string) ; github.com/sfromm/emacs.d#twitter
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)
  (setq twittering-use-icon-storage t)
  (setq twittering-icon-storage-limit 10000)
  (setq twittering-timeline-header "Refresh buffer contents\n")
  (setq twittering-timeline-footer "")
  (setq twittering-status-format "%FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}
%FOLD[   ]{%FILL{%t}%QT{
%FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[ ]{%FILL{%t}}
}}}
%FACE[twitter-divider]{                                                                                                }
")

  (defun ps/twittering-account-select (arg)
    "docstring"
    (interactive
     (list
      (completing-read "Select account: " '("EA News" "Future Matters" "GPE"))))
    (cond ((string= arg "EA News") (ps/twittering-ea-news))
          ((string= arg "Future Matters") (ps/twittering-future-matters))
          ((string= arg "GPE") (ps/twittering-gpe))))

  (defface twitter-divider
    '((((background dark))  (:underline (:color "#141519")))
      (((background light)) (:underline (:color "#d3d3d3"))))
    "The vertical divider between tweets."
    :group 'twittering-mode)

  ;; github.com/hayamiz/twittering-mode/issues/83#issuecomment-343649348
  (defun ps/twittering-reload ()
    "Reload `twittering-mode'."
    (require 'twittering-mode)
    ;; Clear existing twit buffers
    (mapcar
     (lambda (buffer)
       (twittering-deactivate-buffer buffer)
       (kill-buffer buffer))
     (twittering-get-buffer-list))
    (twittering-unregister-killed-buffer)
    ;; Clear variables
    (setq twittering-private-info-file-loaded nil)
    (setq twittering-account-authorization nil)
    (setq twittering-oauth-access-token-alist nil)
    (setq twittering-buffer-info-list nil)
    (setq twittering-timeline-data-table (make-hash-table :test 'equal))
    (twit))

  (defun ps/twittering-ea-news ()
    "Start a `twittering-mode' session with the `ea_dot_news'
account."
    (interactive)
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-ea-news.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/ea_dot_news")
    (ps/twittering-reload))

  (defun ps/twittering-future-matters ()
    "Start a `twittering-mode' session with the `futurematters_'
account."
    (setq twittering-private-info-file (expand-file-name "~/.twittering-mode-future-matters.gpg"))
    (auth-source-pass-get 'secret "auth-sources/twitter/futurematters_")
    (ps/twittering-reload))

  (defun ps/twittering-mode-get-uri ()
    "Get URI of tweet at point."
    (or (get-text-property (point) 'uri)
        (if (get-text-property (point) 'field)
            (let* ((id (get-text-property (point) 'id))
                   (status (twittering-find-status id)))
              (twittering-get-status-url-from-alist status))
          nil)))

  (defun ps/twittering-mode-open-externally ()
    "Open URI of tweet at point with external web browser."
    (interactive)
    (browse-url (ps/twittering-mode-get-uri)))

  (defun ps/twittering-mode-open-internally ()
    "Open URI of tweet at point with internal web browser."
    (interactive)
    (eaf-open (eaf-wrap-url (ps/twittering-mode-get-uri)) "browser"))

  (defun ps/twittering-mode-search-people-externally (&optional query)
    "Search for Twitter users in an external browser."
    (interactive)
    (let ((query (or query
                     (read-string "Search for person: "))))
      (browse-url (concat
                   "https://twitter.com/search?q="
                   query
                   "&src=typed_query&f=user"))))

  (defun ps/twittering-mode-org-capture-future-matters-research ()
    "Launch 'Future Matters: Research' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "tlmr"))

  (defun ps/twittering-mode-org-capture-future-matters-news ()
    "Launch 'Future Matters: News' `org-capture' template."
    (interactive)
    (twittering-push-uri-onto-kill-ring)
    (org-capture nil "tlmn"))

  ;; what follows copied from github.com/sfromm/emacs.d#twitter
  (defun ps/twittering-toggle-icons ()
    "Toggle use of icons in twittering mode."
    (interactive)
    (if (eq twittering-icon-mode t)
        (twittering-icon-mode nil)
      (twittering-icon-mode t)))

  (defun ps/twittering-add-image-format (format-table-func status-sym prefix-sym)
    "Adds the I format code to display images in the twittering-mode format table."
    (let ((format-table (funcall format-table-func status-sym prefix-sym)))
      (push `("I" .
              (let* ((entities (cdr (assq 'entity ,status-sym)))
                     text)
                (mapc (lambda (url-info)
                        (setq text (or (cdr (assq 'media-url url-info)) "")))
                      (cdr (assq 'media entities)))
                (if (string-equal "" text)
                    text
                  (let ((twittering-convert-fix-size 720))
                    (twittering-make-icon-string nil nil text))))) format-table)))

  (advice-add #'twittering-generate-format-table :around #'ps/twittering-add-image-format)

  ;; github.com/sfromm/emacs.d#twitter
  (defun ps/org-twittering-store-link ()
    "Store a link to a tweet."
    (when (and (twittering-buffer-p) (twittering-get-id-at))
      (let ((status (twittering-find-status (twittering-get-id-at))))
        (apply 'org-store-link-props
               :type "twittering"
               :link (concat "twittering:"
                             (or (cdr (assq 'retweeting-id status))
                                 (cdr (assq 'id status))))
               :description (format "@%s: %s"
                                    (cdr (assq 'user-screen-name status))
                                    (cdr (assq 'text status)))
               :url (twittering-get-status-url-from-alist status)
               :date
               (format-time-string (org-time-stamp-format)
                                   (cdr (assq 'created-at status)))
               :date-timestamp
               (format-time-string (org-time-stamp-format t)
                                   (cdr (assq 'created-at status)))
               (apply 'append
                      (mapcar
                       (lambda (sym)
                         (let ((name (symbol-name sym)))
                           `(,(intern (concat ":" name))
                             ,(or (cdr (assq sym status))
                                  (concat "[no " name "]")))))
                       '(text
                         id
                         user-id user-name user-screen-name user-description
                         user-url user-location
                         source source-url
                         retweeting-user-id retweeting-user-name
                         retweeting-user-screen-name
                         retweeting-user-description
                         retweeting-user-url
                         retweeting-user-location
                         retweeting-source retweeting-source-url)))))))

  (org-link-set-parameters "twittering"
                           :follow #'ps/org-twittering-open
                           :store #'ps/org-twittering-store-link)

  (defun ps/org-twittering-open (id-str)
    (twittering-visit-timeline (concat ":single/" id-str)))

  :general
  ("A-t" 'ps/twittering-account-select)
  (twittering-mode-map
   "s-m" 'twittering-replies-timeline
   "s-r" 'twittering-mentions-timeline
   "g" (lambda! (twittering-get-and-render-timeline)) ; refresh
   "c" 'twittering-push-tweet-onto-kill-ring
   "d" 'twittering-delete-status
   "A-C-s-f" 'twittering-goto-next-status
   "A-C-s-r" 'twittering-goto-previous-status
   "n" 'ps/twittering-mode-org-capture-future-matters-news
   "P" 'ps/twittering-mode-search-people-externally
   "q" 'twittering-kill-buffer
   "r" 'ps/twittering-mode-org-capture-future-matters-research
   "s" 'twittering-search
   "S" 'ps/twittering-mode-search-people-externally
   "t" 'twittering-update-status-interactive
   "u" 'twittering-push-uri-onto-kill-ring
   "x" 'ps/twittering-mode-open-externally
   "X" 'ps/twittering-mode-open-internally)
  (twittering-edit-mode-map
   "s-p" 'ps/twittering-mode-search-people-externally
   "s-c" 'twittering-edit-post-status))
#+end_src

** org-download
:PROPERTIES:
:ID:       A9F101D1-4130-4297-A2B3-203B15AA408B
:END:
:LOGBOOK:
CLOCK: [2021-06-23 Wed 11:43]--[2021-06-23 Wed 11:51] =>  0:08
:END:

/[[https://github.com/abo-abo/org-download][org-download]] supports drag and drop images to org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-download
  :after org
  :general
  ("H-s-v" 'org-download-clipboard))
#+end_src

** org-web-tools
:PROPERTIES:
:ID:       F139F57B-7CBB-49C9-A061-B827B25DB3DA
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 10:50]--[2021-11-19 Fri 12:00] =>  1:10
CLOCK: [2021-11-18 Thu 20:43]--[2021-11-18 Thu 21:30] =>  0:47
CLOCK: [2021-10-01 Fri 21:10]--[2021-10-01 Fri 21:51] =>  0:41
:END:

/[[https://github.com/alphapapa/org-web-tools][org-web-tools]] supports viewing, capturing, and archiving web pages in org-mode./

#+begin_src emacs-lisp :results silent
(use-package org-web-tools
  :defer 30
  :commands ps/org-web-tools--youtube-dl
  :config
  ;; This function slightly tweaks `org-web-tools-insert-link-for-url'
  ;; so that it can be used with `org-capture'
  ;; blog.lazkani.io/posts/text-editors/bookmark-with-org-capture/
  (defun ps/org-web-tools-insert-link-for-clipboard-url ()
    "Extend org-web-tools-inster-link-for-url to take URL from
clipboard or kill-ring"
    (org-web-tools--org-link-for-url (org-web-tools--get-first-url)))

  (cl-defun ps/org-web-tools--org-title-for-url (&optional (url (org-web-tools--get-first-url)))
    "Return title of HTML page at URL.
 If URL is not given, look for first URL in `kill-ring'. If page
at URL has no title, return URL."
    (let* ((html (org-web-tools--get-url url))
           (title (org-web-tools--html-title html)))
      (if title
          title
        (message "HTML page at URL has no title")
        url)))

  (defun ps/org-web-tools--youtube-dl (url)
    "Create org link to local copy of YouTube video downloaded from URL.
 To be used in conjunction with associated `org-capture'
template."
    (let* ((html (org-web-tools--get-url url))
           (title (org-web-tools--html-title html))
           (file-path (file-name-concat ps/dir-downloads (file-name-with-extension (org-hugo-slug title) "webm"))))
      (if title
          (org-link-make-string (concat "file:" file-path) title)
        (user-error "HTML page at URL has no title"))))

  :general
  (org-mode-map
  "s-A-k" 'org-web-tools-insert-link-for-url))
#+end_src

** request
:PROPERTIES:
:ID:       4B7C17EE-0346-4059-AFF1-24DD7A609ADE
:END:

/[[https://github.com/tkf/emacs-request][request]] provides HTTP request for Emacs Lisp./

#+begin_src emacs-lisp :results silent
(use-package request
  :defer 15)
#+end_src

** deferred
:PROPERTIES:
:ID:       A19273DD-3802-4594-A700-237F4134740A
:END:

/[[https://github.com/kiwanami/emacs-deferred][deferred]] provides simple asynchronous functions for emacs lisp./

#+begin_src emacs-lisp
(use-package deferred
  :defer 15)
#+end_src

** graphql-mode
:PROPERTIES:
:ID:       4B9A26D9-EA9B-420B-A8B2-060AAF19D4E4
:END:

/[[https://github.com/davazp/graphql-mode][graphql-mode]] is a major mode for GraphQL./

#+begin_src emacs-lisp
(use-package graphql-mode)
#+end_src

** mullvad
:PROPERTIES:
:ID:       F932B1C7-4BC0-45AB-A736-3E4DC4FBA09E
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 19:58]--[2023-04-09 Sun 21:23] =>  1:25
CLOCK: [2022-09-29 Thu 16:52]--[2022-09-29 Thu 18:01] =>  1:09
CLOCK: [2022-09-29 Thu 15:39]--[2022-09-29 Thu 16:26] =>  0:47
:END:

This "package" collects a few simple commands I created for interfacing with Mullvad, a VPN service. To use these commands, you must first run ~mullvad account login [your account number]~ in the terminal.  To find your account number, go to "settings" > "account".

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/mullvad)
(use-package mullvad
  :elpaca (mullvad
           :host github
           :repo "tlon-team/mullvad")
  :demand t)
#+end_src

* multimedia
:PROPERTIES:
:ID:       358E28B5-0274-43A0-AE9C-AA004B4775E5
:END:

** EMMS
:PROPERTIES:
:ID:       3B176388-5D13-478F-8E13-9C8C93AB9D10
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 12:18]--[2022-09-05 Mon 13:11] =>  0:53
CLOCK: [2022-09-05 Mon 12:09]--[2022-09-05 Mon 12:12] =>  0:03
CLOCK: [2021-05-04 Tue 21:41]--[2021-05-04 Tue 21:56] =>  0:15
:END:

/[[https://www.gnu.org/software/emms/][EMMS]] (Emacs MultiMedia System) is media player software for Emacs./

EMMS is not powerful enough for my use case (tango DJ with a collection of over 70,000 tracks). But I'm exploring whether I can use it for specific purposes, such as batch-tagging.

#+begin_src emacs-lisp :results silent
(use-package emms
  :config
  (require 'emms-setup)
  (require 'emms-player-simple)
  (require 'emms-source-file)
  (require 'emms-source-playlist)
  (require 'emms-info-native)
  ;; emms-print-metadata binary must be present; see emacs.stackexchange.com/a/22431/32089
  (require 'emms-info-libtag)
  (require 'emms-mode-line)
  (require 'emms-mode-line-icon)
  (require 'emms-playing-time)

  (setq emms-player-list '(emms-player-mpv))
  (setq emms-source-file-default-directory ps/dir-music-tango)
  (setq emms-playlist-buffer-name "*Music*")
  (setq emms-info-functions '(emms-info-libtag)) ; make sure libtag is the only thing delivering metadata
  ;; ~1 order of magnitude fzaster; requires GNU find: `brew install findutils'
  (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)

  (emms-all)
  (emms-default-players)
  (add-to-list 'emms-info-functions 'emms-info-libtag)
  (emms-mode-line-mode)
  (emms-playing-time 1))
#+end_src

*** resources
:PROPERTIES:
:ID:       C043F6EF-C922-4803-8361-E94ACE1C60F0
:END:

[[https://sqrtminusone.xyz/posts/2021-09-07-emms/][My EMMS and elfeed setup]]

** mpv
:PROPERTIES:
:ID:       8D75E528-AA79-4512-B4A9-6EB7A56F9026
:END:

/[[https://github.com/kljohann/mpv.el][mpv]] provides various functions to control [[https://en.wikipedia.org/wiki/Mpv_(media_player)][mpv]]./

#+begin_src emacs-lisp :results silent
(use-package mpv)
#+end_src

** ytdl
:PROPERTIES:
:ID:       26EEEF20-5CDC-4855-A03D-AFEBB784D637
:END:
:LOGBOOK:
CLOCK: [2023-05-07 Sun 10:53]--[2023-05-07 Sun 11:27] =>  0:34
:END:

/[[https://gitlab.com/tuedachu/ytdl][ytdl]] is an Emacs interface for [[https://youtube-dl.org/][youtube-dl]]./

Note that this package also works with [[https://github.com/yt-dlp/yt-dlp][yt-dlp]], a ~youtube-dl~ fork.

#+begin_src emacs-lisp :results silent
(use-package ytdl)
#+end_src

*** TODO [#4] Fix naming problem for videos
:PROPERTIES:
:Effort:   0:45
:ID:       F4F4B47A-6B45-41DD-831C-0C23D67C4398
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 20:22]--[2022-09-05 Mon 21:28] =>  1:06
:END:

** mentor
:PROPERTIES:
:ID:       E3F6210D-F6CD-4397-9004-3D31B5623D18
:END:
:LOGBOOK:
CLOCK: [2023-03-07 Tue 00:53]--[2023-03-07 Tue 01:30] =>  0:37
:END:

/[[https://github.com/skangas/mentor][mentor]] is an Emacs frontend for the rTorrent bittorrent client./

[2022-10-07 Fri 21:48] I wasn't able to make it work.

#+begin_src emacs-lisp :results silent
(use-package mentor
  :config
  (setq mentor-rtorrent-download-directory ps/dir-downloads)
  (setq mentor-rtorrent-external-rpc (expand-file-name "~/.rtorrent-rpc.socket"))

  :general
  (mentor-mode-map
   "SPC" 'mentor-download-load-magnet-link-or-url
   "<return>" 'mentor-download-load-torrent))
#+end_src

** espotify
:PROPERTIES:
:ID:       5879A8B7-0889-4FCD-A16A-77D0BCEE4804
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 14:50]--[2022-06-22 Wed 15:10] =>  0:20
:END:

/[[https://codeberg.org/jao/espotify][espotify]] supports interacting with spotify API and players inside emacs./

[2022-06-22 Wed 15:07] I can't make this work. Maybe related to the [[id:86EE7A94-E470-45DB-B0A5-0AE717A15353][dbus problem]]?

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :ps/espotify)
(use-package espotify
  :disabled
  :after auth-source-pass
  :defer 20
  :config
  (setq espotify-service-name "spotify")
  (setq espotify-use-system-bus-p nil)
  (setq espotify-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (setq espotify-client-secret (auth-source-pass-get 'secret "auth-sources/spotify")))
#+end_src

** smudge
:PROPERTIES:
:ID:       B5010216-E345-4F6D-9033-DE354D7E707A
:END:
:LOGBOOK:
CLOCK: [2021-05-21 Fri 10:45]--[2021-05-21 Fri 10:59] =>  0:14
CLOCK: [2021-05-20 Thu 19:49]--[2021-05-20 Thu 20:00] =>  0:11
CLOCK: [2021-05-20 Thu 19:11]--[2021-05-20 Thu 19:13] =>  0:02
CLOCK: [2021-05-19 Wed 21:40]--[2021-05-19 Wed 21:52] =>  0:12
CLOCK: [2021-05-19 Wed 20:34]--[2021-05-19 Wed 21:13] =>  0:39
CLOCK: [2021-05-19 Wed 16:37]--[2021-05-19 Wed 16:59] =>  0:22
CLOCK: [2021-05-19 Wed 11:26]--[2021-05-19 Wed 12:23] =>  0:57
:END:

/[[https://github.com/danielfm/smudge][smudge]] lets the user control Spotify from Emacs./

#+begin_src emacs-lisp :results silent
(use-package smudge
  :disabled
  :after auth-source-pass
  ;; :defer 600
  :config
  (setq smudge-oauth2-client-id (auth-source-pass-get "id" "auth-sources/spotify"))
  (setq smudge-oauth2-client-secret (auth-source-pass-get 'secret "auth-sources/spotify"))
  (setq smudge-player-status-format "[%a - %t ◷ %l]")
  (setq smudge-api-search-limit 100) ; values >100 result in a 400 error
  (setq smudge-status-location nil)

  ;; should renew credentials and store with `pass'
  (defun ps/smudge ()
    "Turn on global smudge remote mode and go to my playlists."
    (interactive)
    (global-smudge-remote-mode 1)
    (smudge-my-playlists))
  (defun ps/smudge-track-load-more ()
    "Move point to end of playlist buffer and load more tracks."
    (interactive)
    (end-of-buffer)
    (smudge-track-load-more))
  :general
  ("A-y" 'ps/smudge)
  (smudge-track-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "t" 'smudge-track-search
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more)
  (smudge-playlist-search-mode-map
   "RET" 'smudge-track-select
   "b" 'smudge-track-album-select
   "d" 'smudge-select-device
   "m" 'smudge-my-playlists
   "r" 'smudge-recently-played
   "s" 'smudge-track-search
   "t" 'smudge-track-artist-select
   "y" 'smudge-playlist-search
   "." 'ps/smudge-track-load-more))
#+end_src

** read-aloud
:PROPERTIES:
:ID:       71DBC03A-D68C-4E5D-B495-55DE31F6DC2F
:END:

/[[https://github.com/gromnitsky/read-aloud.el][read-aloud]] is an Emacs interface to TTS (text-to-speech) engines./

As a side note, to give Emacs access to the microphone on MacOS, clone ~https://github.com/DocSystem/tccutil~ and from the cloned repo, run ~sudo python3 tccutil.py -p /opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/Emacs.app --micro -e~ (some discussion [[https://scsynth.org/t/emacs-scsynth-and-microphone-permissions/3253][here]]).

#+begin_src emacs-lisp :results silent
(use-package read-aloud
  :defer 20
  :config
  (setq read-aloud-engine "say")

  :general
  ("A-C-r" 'read-aloud-this)) ; remember that `A-C-d' starts/stops dictation
#+end_src

* passwords
:PROPERTIES:
:ID:       D412C998-40EE-4638-959A-C2530EC9F247
:END:
:LOGBOOK:
:END:

** plstore
:PROPERTIES:
:ID:       5257E611-7953-4898-B743-25803EC7D9B4
:END:

#+begin_src emacs-lisp :results silent
(use-feature plstore
  :demand t
  :init
  (setq-default plstore-cache-passphrase-for-symmetric-encryption t))
#+end_src

** epg-config
:PROPERTIES:
:ID:       012F15A3-7717-4B09-9F43-74DA6F5F7C1A
:END:

#+begin_src emacs-lisp :results silent
(use-feature epg-config
  :demand t
  :config
  (setq epg-pinentry-mode 'loopback)) ; use minibuffer for password entry
#+end_src

** auth-source
:PROPERTIES:
:ID:       291F9998-9940-4249-A048-92B5F2A2895E
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 12:33]--[2021-05-29 Sat 13:02] =>  0:29
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source
  :demand t
  :preface
  (eval-when-compile
    (defvar auth-sources))
  :config
  (setq auth-source-debug nil) ; set to t for debugging
  (setq auth-sources '(macos-keychain-internet macos-keychain-generic)))
#+end_src

** oauth2-auto
:PROPERTIES:
:ID:       C7B36982-D472-4248-8C61-B7EB0ED6ACF6
:END:

/[[https://github.com/telotortium/emacs-oauth2-auto][emacs-oauth2-auto]] supports authentication to an OAuth2 provider from within Emacs./

#+begin_src emacs-lisp :results silent
(use-package oauth2-auto
  :elpaca (emacs-oauth2-auto
           :host github
           :repo "telotortium/emacs-oauth2-auto"
           :protocol ssh))
#+end_src

** pass
:PROPERTIES:
:ID:       518D3C1F-AFD6-4B72-8980-CAD10BBAEDDE
:END:
:LOGBOOK:
CLOCK: [2022-06-03 Fri 16:18]--[2022-06-03 Fri 16:35] =>  0:17
CLOCK: [2022-06-03 Fri 16:38]--[2022-06-03 Fri 16:44] =>  0:06
CLOCK: [2021-07-20 Tue 09:33]--[2021-07-20 Tue 10:14] =>  0:41
CLOCK: [2021-05-29 Sat 15:44]--[2021-05-29 Sat 16:28] =>  0:44
CLOCK: [2021-05-26 Wed 17:46]--[2021-05-26 Wed 18:04] =>  0:18
CLOCK: [2021-05-14 Fri 14:55]--[2021-05-14 Fri 15:07] =>  0:12
CLOCK: [2021-04-12 Mon 13:12]--[2021-04-12 Mon 13:20] =>  0:08
CLOCK: [2021-04-11 Sun 14:36]--[2021-04-11 Sun 14:47] =>  0:11
CLOCK: [2021-04-11 Sun 12:14]--[2021-04-11 Sun 12:28] =>  0:14
CLOCK: [2021-04-11 Sun 12:01]--[2021-04-11 Sun 12:10] =>  0:09
:END:

/[[https://github.com/NicolasPetton/pass][pass]] is a major mode for password-store./

#+begin_src emacs-lisp :results silent
(use-package pass
  :defer 10
  :config/el-patch
  (defun pass-quit ()
    "Kill the buffer quitting the window."
    (interactive)
    (when (el-patch-swap (y-or-n-p "Kill all pass entry buffers? ") t)
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (when (eq major-mode 'pass-view-mode)
            (kill-buffer buf)))))
    (quit-window t))

  :config
  (defun ps/pass-open-at-point ()
    "Open the URL associated with the entry at point and its password
to the clipboard."
    (interactive)
    (when (eq major-mode 'pass-mode)
      (pass-copy)
      (pass--with-closest-entry entry
        (let* ((inhibit-message t)
               (parsed-entries (password-store-parse-entry entry))
               (field password-store-url-field))
          (unless (assoc field parsed-entries)
            (user-error "Field `%s' not in  %s" field entry))
          (browse-url (password-store-get-field entry field))))))

  (defun ps/pass-edit ()
    "Edit the entry at point, without confirmation."
    (interactive)
    (pass--with-closest-entry entry
      (password-store-edit entry)))

  (defun ps/pass-git-sync ()
    "Synchronize with remote repository."
    (interactive)
    ;; (shell-command "pass git config pull.rebase false")
    (shell-command "pass git pull; pass git push"))

  (defun ps/pass-insert-generated-no-symbols ()
    "Insert an entry to the password-store without symbols.
Use a generated password instead of reading the password from
user input."
    (interactive)
    (call-interactively #'password-store-generate-no-symbols)
    (pass-update-buffer))

  :general
  ("A-H-o" 'pass)
  (pass-mode-map
   "c" 'pass-copy
   "d" 'pass-kill
   "<return>" 'ps/pass-edit
   "SPC" 'ps/pass-open-at-point
   "e" 'ps/pass-edit
   "I" 'ps/pass-insert-generated-no-symbols
   "y" 'ps/pass-git-sync)
  (pass-view-mode-map
   "s-c" 'pass-view-toggle-password
   "s-s" 'server-edit))
#+end_src

** auth-source-pass
:PROPERTIES:
:ID:       00772E1B-A97C-46B5-8DE9-77462AAE0189
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 15:10]--[2021-05-29 Sat 15:44] =>  0:34
CLOCK: [2021-05-29 Sat 13:52]--[2021-05-29 Sat 14:10] =>  0:18
CLOCK: [2021-05-26 Wed 18:56]--[2021-05-26 Wed 19:23] =>  0:27
:END:

#+begin_src emacs-lisp :results silent
(use-feature auth-source-pass
  :demand t
  :after auth-source pass
  :config
  (setq auth-source-debug t)
  (setq auth-source-do-cache nil)
  (auth-source-pass-enable))
#+end_src

Note: to work, entries must conform to the pattern ~auth-sources/host~.

- Also check [[https://git.sr.ht/~sirn/dotfiles/tree/85b9d5249712e3c35e6140083be1629be1d2b643/etc/emacs/packages/editor-auth.el][~sirn/dotfiles: etc/emacs/packages/editor-auth.el - sourcehut git]]

* misc
:PROPERTIES:
:ID:       EB8682EE-77BC-4D88-AA87-5ECB804C8B53
:END:

** calc
:PROPERTIES:
:ID:       50FAD2F3-E501-408E-A9A2-8358FAA87C1C
:END:

#+begin_src emacs-lisp :results silent
(use-feature calc
  :general
  ("A-c" 'calc
   "A-M-c" 'quick-calc)
  ((calc-mode-map calc-alg-map)
   "C-k" nil))
#+end_src

** alert
:PROPERTIES:
:ID:       694AAC2E-669E-40D4-9794-5E352D77734C
:END:
:LOGBOOK:
CLOCK: [2022-07-28 Thu 11:50]--[2022-07-28 Thu 12:02] =>  0:12
CLOCK: [2022-03-31 Thu 18:32]--[2022-03-31 Thu 18:49] =>  0:17
CLOCK: [2022-03-31 Thu 16:33]--[2022-03-31 Thu 16:33] =>  0:00
CLOCK: [2021-04-08 Thu 18:18]--[2021-04-08 Thu 18:29] =>  0:11
CLOCK: [2021-03-27 Sat 16:50]--[2021-03-27 Sat 17:00] =>  0:10
:END:

/[[https://github.com/jwiegley/alert][alert]] is a Growl-like alerts notifier for Emacs./

#+begin_src emacs-lisp :results silent
(use-package alert
  :demand t
  :config
  ;; the settings below are not working; is it because `alert-default-style' is set to `notifier'?
  (setq alert-fade-time 2)
  (setq alert-persist-idle-time 60)

  (if (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier)
    (setq alert-default-style 'notifications))

  ;; This function has to be loaded manually, for some reason.
  (defun alert-osx-notifier-notify (info)
    (apply #'call-process "osascript" nil nil nil "-e"
           (list (format "display notification %S with title %S"
                         (alert-encode-string (plist-get info :message))
                         (alert-encode-string (plist-get info :title)))))
    (alert-message-notify info))

  (defun ps/alert-dismiss-osx-notification ()
    "docstring"
    (interactive)
    (let ((shell-command-buffer-name "*alert-dismiss-osx-notification*"))
      (shell-command "osascript ~/Library/Scripts/notifications.applescript")
      (kill-buffer shell-command-buffer-name)))

  :general
  ("H-\"" 'ps/alert-dismiss-osx-notification))
#+end_src

** unpackaged
:PROPERTIES:
:ID:       484FDD89-4C12-4624-82CB-FC36795C0A8F
:END:
:LOGBOOK:
:END:

/[[https://github.com/alphapapa/unpackaged.el][unpackaged]] is a collection of useful Emacs Lisp code that isn't substantial enough to be packaged./

#+begin_src emacs-lisp :results silent
(use-package unpackaged
  :elpaca (unpackaged :host github :repo "alphapapa/unpackaged.el")
  :commands (unpackaged/org-forward-to-entry-content))
#+end_src

** midnight
:PROPERTIES:
:ID:       C6B68696-DCCC-4143-A0BC-E5EEE249AACF
:END:
:LOGBOOK:
CLOCK: [2022-08-29 Mon 16:53]--[2022-08-29 Mon 17:06] =>  0:13
CLOCK: [2022-07-15 Fri 10:10]--[2022-07-15 Fri 11:10] =>  1:00
CLOCK: [2022-07-13 Wed 10:43]--[2022-07-13 Wed 10:56] =>  0:13
CLOCK: [2022-05-06 Fri 08:00]--[2022-05-06 Fri 08:15] =>  0:15
CLOCK: [2022-01-05 Wed 07:59]--[2022-01-05 Wed 08:37] =>  0:38
CLOCK: [2021-12-23 Thu 08:03]--[2021-12-23 Thu 08:20] =>  0:17
CLOCK: [2021-12-15 Wed 17:44]--[2021-12-15 Wed 17:53] =>  0:09
CLOCK: [2021-11-18 Thu 22:20]--[2021-11-18 Thu 22:58] =>  0:38
CLOCK: [2021-07-10 Sat 18:47]--[2021-07-10 Sat 19:28] =>  0:41
CLOCK: [2021-07-08 Thu 10:09]--[2021-07-08 Thu 10:33] =>  0:24
CLOCK: [2021-07-07 Wed 23:25]--[2021-07-07 Wed 23:46] =>  0:21
CLOCK: [2021-05-28 Fri 14:34]--[2021-05-28 Fri 14:46] =>  0:12
:END:

/midnight runs custom processes every night./

#+begin_src emacs-lisp :results silent  :tangle (tlon-init-get-tangle-flag :ps/midnight)
(use-feature midnight
  :defer 600
  :config
  (setq clean-buffer-list-kill-never-buffer-names
        '("*mu4e-headers*"
          " *mu4e-update*")) ; not sure if the space is part of the buffer name
  (setq clean-buffer-list-kill-never-regexps
        '("\\` \\*Minibuf-.*\\*\\'"
          "^untitled.*"))
  (setq clean-buffer-list-delay-general 2) ; kill buffers unused for more than three days

  (midnight-mode)
  (midnight-delay-set 'midnight-delay "4:30am")

  ;; note that the hooks appear in reverse order of execution
  (dolist (function #'(el-patch-validate-all
                       org-gcal-sync
                       ps/org-id-update-id-locations
                       org-roam-db-sync
                       ps/pass-git-sync
                       ps/magit-stage-commit-and-push-all-repos
                       ps/ledger-update-commodities
                       ps/ledger-update-coin-prices
                       clean-buffer-list
                       ps/save-all-buffers))
    (add-hook 'midnight-hook function)))
#+end_src

** bbdb
:PROPERTIES:
:ID:       0537BBF6-FD95-44A5-9327-1024A3D106EB
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 16:40]--[2023-04-09 Sun 16:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:10]--[2023-04-02 Sun 21:19] =>  0:09
CLOCK: [2023-03-31 Fri 15:20]--[2023-03-31 Fri 15:23] =>  0:03
CLOCK: [2023-03-28 Tue 22:48]--[2023-03-28 Tue 23:50] =>  1:02
CLOCK: [2023-03-28 Tue 22:32]--[2023-03-28 Tue 22:47] =>  0:15
:END:

/[[https://elpa.gnu.org/packages/bbdb.html][bbdb]] is a contact management package./

A tutorial for this undocumented package may be found [[https://github.com/andycowl/bbdb3-manual/blob/master/tutorial.rst][here]].

[2023-04-09 Sun 02:20] I wasn't able to build it, but I was able to install it with ~M-x package-install~, from which I created a local repo.

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/bbdb)
(use-package bbdb
  :elpaca (bbdb
           :host github
           :repo "tlon-team/bbdb")

  :config
  ;; open URL directly, without prompting for confirmation
  (defun ps/bbdb-browse-url (records &optional which)
    "Brwose URLs stored in the `url' field of RECORDS.
Interactively, use BBDB prefix \
\\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
Prefix WHICH specifies which URL in field `url' is used (starting from 0).
Default is the first URL."
    (interactive (list (bbdb-get-records "Visit (URL): ")
                       (and current-prefix-arg
                            (prefix-numeric-value current-prefix-arg))))
    (unless which (setq which 0))
    (dolist (record (bbdb-record-list records))
      (let ((url (bbdb-record-xfield-split record 'url)))
        (when url
          (setq url (nth which url))
          (unless (string= "" url)
            (browse-url url))))))

  (advice-add 'bbdb-browse-url :override #'ps/bbdb-browse-url)

  ;; do not split windows
  (defun ps/bbdb-pop-up-window (&optional select horiz-p)
    "Display *BBDB* buffer by popping up a new window.
Finds the largest window on the screen, splits it, displaying the
,*BBDB* buffer in the bottom `bbdb-pop-up-window-size' lines (unless
the *BBDB* buffer is already visible, in which case do nothing.)
Select this window if SELECT is non-nil.

If `bbdb-mua-pop-up' is 'horiz, and the first window matching
the predicate HORIZ-P is wider than the car of `bbdb-horiz-pop-up-window-size'
then the window will be split horizontally rather than vertically."
    (let ((buffer (get-buffer bbdb-buffer-name)))
      (unless buffer
        (error "No %s buffer to display" bbdb-buffer-name))
      (cond ((let ((window (get-buffer-window buffer t)))
               ;; We already have a BBDB window so that at most we select it
               (and window
                    (or (not select) (select-window window)))))

            ;; try horizontal split
            ((and (eq bbdb-mua-pop-up 'horiz)
                  horiz-p
                  (>= (frame-width) (car bbdb-horiz-pop-up-window-size))
                  (let ((window-list (window-list))
                        (b-width (cdr bbdb-horiz-pop-up-window-size))
                        (search t) s-window)
                    (while (and (setq s-window (pop window-list))
                                (setq search (not (funcall horiz-p s-window)))))
                    (unless (or search (<= (window-width s-window)
                                           (car bbdb-horiz-pop-up-window-size)))
                      (condition-case nil ; `split-window' might fail
                          (let ((window (split-window
                                         s-window
                                         (if (integerp b-width)
                                             (- (window-width s-window) b-width)
                                           (round (* (- 1 b-width) (window-width s-window))))
                                         t))) ; horizontal split
                            (set-window-buffer window buffer)
                            (cond (bbdb-dedicated-window
                                   (set-window-dedicated-p window bbdb-dedicated-window))
                                  ((fboundp 'display-buffer-record-window) ; GNU Emacs >= 24.1
                                   (set-window-prev-buffers window nil)
                                   (display-buffer-record-window 'window window buffer)))
                            (if select (select-window window))
                            t)
                        (error nil))))))

            ((eq t bbdb-pop-up-window-size)
             (bbdb-pop-up-window-simple buffer select))

            (t ;; vertical split
             (let* ((window (selected-window))
                    (window-height (window-height window)))
               ;; find the tallest window...
               (mapc (lambda (w)
                       (let ((w-height (window-height w)))
                         (if (> w-height window-height)
                             (setq window w window-height w-height))))
                     (window-list))
               (condition-case nil
                   (unless (eql bbdb-pop-up-window-size 1.0)
                     (set-window-buffer window buffer)) ; might fail
                 (cond (bbdb-dedicated-window
                        (set-window-dedicated-p window bbdb-dedicated-window))
                       ((and (fboundp 'display-buffer-record-window) ; GNU Emacs >= 24.1
                             (not (eql bbdb-pop-up-window-size 1.0)))
                        (set-window-prev-buffers window nil)
                        (display-buffer-record-window 'window window buffer)))
                 (if select (select-window window)))
               (error (bbdb-pop-up-window-simple buffer select)))))))

  (advice-add 'bbdb-pop-up-window :override #'ps/bbdb-pop-up-window)

  (setq bbdb-file (file-name-concat ps/dir-bbdb "bbdn.el"))
  (setq bbdb-image-path (file-name-concat ps/dir-bbdb "media/"))
  (bbdb-initialize 'anniv)

  ;; the two functions below replace the corresponding "non-quick"
  ;; native functions. they prompt for a name only.
  (defun ps/bbdb-create-quick (record)
    "Add a new RECORD to BBDB. Prompt for name only."
    (interactive (list (ps/bbdb-read-record-quick current-prefix-arg)))
    (bbdb-change-record record)
    (bbdb-display-records (list record)))

  (defun ps/bbdb-read-record-quick (&optional first-and-last)
    "Read and return a new BBDB record.
 To be used with `ps/bbdb-create-quick'."
    (bbdb-editable)
    (let ((record (bbdb-empty-record)))
      (let (name)
        (bbdb-error-retry
         (setq name (bbdb-read-name first-and-last))
         (bbdb-check-name name))
        (setf (bbdb-record-firstname record) (car name))
        (setf (bbdb-record-lastname record) (cdr name)))
      record))

  (defun ps/bbdb-delete-field-or-record-no-confirm ()
    "Delete the current field or record without confirmation."
    (interactive)
    (bbdb-delete-field-or-record (bbdb-do-records) (bbdb-current-field) t))

  :general
  ("A-b" 'bbdb)
  (bbdb-mode-map
   "A-C-s-r" 'bbdb-prev-record
   "A-C-s-f" 'bbdb-next-record
   "n" 'ps/bbdb-create-quick
   "c" 'bbdb-copy-fields-as-kill
   "C-k" nil
   "M-d" nil
   "D" 'ps/bbdb-delete-field-or-record-no-confirm))
#+end_src


*** TODO Diagnose why elpaca can't load this
:PROPERTIES:
:ID:       88C73B04-2EBA-40A6-B5F4-23C92E3306B5
:END:

** bbdb-vcard
:PROPERTIES:
:ID:       EB0B93F7-30F0-4C6D-A638-CD67C307CB62
:END:

/[[https://github.com/tohojo/bbdb-vcard][bbdb-vcard]] supports import and export for BBDB./

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/bbdb)
(use-package bbdb-vcard
  :after bbdb
  :config
  (setq bbdb-vcard-directory ps/dir-bbdb)
  (setq bbdb-vcard-media-directory "media"))
#+end_src

** keycast
:PROPERTIES:
:ID:       8D51F4B0-7443-420B-919F-7AA9B0EC0CE9
:END:

/[[https://github.com/tarsius/keycast][keycast]] shows the current command and its key in the mode line./

#+begin_src emacs-lisp :results silent
(use-package keycast
  :config
  ;; support for doom modeline (github.com/tarsius/keycast/issues/7)
  (with-eval-after-load 'keycast
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))))
#+end_src

** custom
:PROPERTIES:
:ID:       7C328D33-DCFE-4E47-8B58-7C27E7F7C1DB
:END:

#+begin_src emacs-lisp :results silent
(use-feature custom
  :demand t
  :config
  (setq custom-safe-themes t)
  (setq custom-file (file-name-concat ps/dir-downloads "delete.me"))) ; move unintended customizations to a garbage file
#+end_src

** tetris
:PROPERTIES:
:ID:       F4C5A232-7788-4240-9CE2-B6761C905786
:END:

And finally, the section you've all been waiting for.

#+begin_src emacs-lisp :results silent
(use-feature tetris
  :general
  (tetris-mode-map
   "k" 'tetris-rotate-prev
   "l" 'tetris-move-down
   "j" 'tetris-move-left
   ";" 'tetris-move-right))
#+end_src

* personal
:PROPERTIES:
:ID:       9D7B5C99-2380-4159-A8C8-4021CC0482DE
:END:

** tlon-init
:PROPERTIES:
:ID:       A6FF9A5C-B95D-46A4-AD0F-F5E327A59A4F
:END:

#+begin_src emacs-lisp :tangle (tlon-init-get-tangle-flag :ps/tlon-init)
(use-package tlon-init
  :elpaca (tlon-init
           :host github
           :repo "tlon-team/tlon-init"
           :depth nil) ; clone entire repo, not just last commit
  :demand t)
#+end_src

** tlon-core
:PROPERTIES:
:ID:       9BE75448-80A0-4CD7-9341-97F723C44A4A
:END:

#+begin_src emacs-lisp :results silent :tangle (tlon-init-get-tangle-flag :ps/tlon)
(use-package tlon-core
  :elpaca (tlon-core
           :host github
           :repo "tlon-team/tlon-core"
           :depth nil) ; clone entire repo, not just last commit
  :demand t
  :config
  (defun ps/tlon-core-meeting-with-fede ()
    "TODO: docstring"
    (interactive)
    (tlon-core-meeting-with
     "Fede"
     "CE0C7638-97F1-4509-8212-5B77F4A4AF29"
     "56CBB3F8-8E75-4298-99B3-899365EB75E0"
     "AAB63566-B9AD-4BA3-96E9-0F3F0A26E2B1"))

  (defun ps/tlon-core-meeting-with-leo ()
    "TODO: docstring"
    (interactive)
    (tlon-core-meeting-with
     "Leo"
     "76A01EAA-74BC-41FC-9050-E6BDC0D56029"
     "51610BEB-7583-4C84-8FC2-A3B28CA79FAB"
     "8B2F18B4-A309-4F29-A5E6-CD40E010970D")))
#+end_src

** tlon-bae
:PROPERTIES:
:ID:       5EDD6F28-3299-4D90-83E1-C7476176277D
:END:

#+begin_src emacs-lisp
(use-package tlon-bae
  :elpaca (tlon-bae
           :host github
           :repo "tlon-team/tlon-bae"
           :depth nil) ; clone entire repo, not just last commit
  :demand t
  :general
  ("H-r" 'tlon-bae-dispatch)
  (forge-topic-mode-map
   "'" 'tlon-bae-open-forge-file)
   (github-review-mode-map
   "s-c" 'tlon-bae-submit-comment-revisions)
  (markdown-mode-map
  "s-c" 'tlon-bae-finalize-revision
   "s-u" 'tlon-bae-insert-tag-url)
  (magit-status-mode-map
   "s-r" 'tlon-bae-commit-when-slug-at-point
   "'" 'tlon-bae-open-forge-file))
#+end_src

** Keyboard Maestro
:PROPERTIES:
:ID:       1776C0C3-CEEC-4DED-B609-4DF0DF83B0C2
:END:

These bindings allow Keyboard Maestro to trigger various Emacs processes.

#+begin_src emacs-lisp :results silent
(general-define-key
 "C-H-M-S-c" 'ps/org-copy-heading-contents
 "C-H-M-S-g" 'orgmdb-fill-movie-properties
 "C-H-M-S-n" 'ps/create-new-wiki-entry
 ;; "C-H-M-S-i" 'ps/org-switch-to-id ; delete
 "C-H-M-S-w" 'eww)
#+end_src

* variables
:PROPERTIES:
:ID:       5A96B05D-52BD-4648-B0D6-1E0B6C49DB37
:END:

The section below defines all the personal variables used by this file.

** shared variables
:PROPERTIES:
:ID:       3A5E2CF3-5CC3-4804-8AEC-89BFD943E0BF
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 22:06]--[2023-03-27 Mon 22:17] =>  0:11
:END:

#+begin_src emacs-lisp :tangle (print tlon-init-variables-path)
(
 (ps/personal-name . "Pablo Stafforini")
 (ps/personal-gmail-unus . "pablo.staff") ; will this protect against spammers?
 (ps/personal-gmail-duo . "orini@gmail.com")
 (ps/personal-gmail . (concat ps/personal-gmail-unus ps/personal-gmail-duo))
 (ps/personal-email-εἷς . "pablo@staff")
 (ps/personal-email-δῠ́ο . "orini.com")
 (ps/personal-email . (concat ps/personal-email-εἷς ps/personal-email-δῠ́ο))
 (ps/tlon-email-एकम् . "tlon.sh")
 (ps/tlon-email-द्वे . "ared@gmail.com")
 (ps/tlon-email (concat ps/tlon-email-एकम् ps/tlon-email-द्वे))
 (ps/personal-phone . "+1 4246668293")
 (ps/dir-root . "/")
 (ps/dir-system-apps . "/Applications/")
 (ps/dir-user . (getenv "HOME"))
 (ps/dir-dropbox . (file-name-concat ps/dir-user "Library/CloudStorage/Dropbox/"))
 (ps/dir-downloads . (file-name-concat ps/dir-user "Downloads/"))
 (ps/dir-emacs . user-emacs-directory)
 (ps/dir-google-drive . (file-name-concat ps/dir-user "Google Drive/"))
 (ps/dir-music . (file-name-concat ps/dir-google-drive "music/"))
 (ps/dir-movies . (file-name-concat ps/dir-user "movies/"))
 (ps/dir-finance . (file-name-concat ps/dir-google-drive "finance/"))
 (ps/dir-audiobooks . (file-name-concat ps/dir-google-drive "audiobooks/"))
 (ps/dir-music-tango . (file-name-concat ps/dir-music "tango/"))
 (ps/dir-music-popular . (file-name-concat ps/dir-music "popular/"))
 (ps/dir-music-classical . (file-name-concat ps/dir-music "classical/"))
 (ps/dir-music-to-sort . (file-name-concat ps/dir-music "to sort/"))
 (ps/dir-anki . (file-name-concat ps/dir-dropbox "anki/"))
 (ps/dir-archive . (file-name-concat ps/dir-dropbox "archive/"))
 (ps/dir-inactive . (file-name-concat ps/dir-dropbox "inactive/"))
 (ps/dir-bibliography . (file-name-concat ps/dir-dropbox "bibliography/"))
 (ps/dir-csl-styles . (file-name-concat ps/dir-bibliography "styles/"))
 (ps/dir-csl-locales . (file-name-concat ps/dir-bibliography "locales/"))
 (ps/dir-blog . (file-name-concat ps/dir-dropbox "blog/"))
 (ps/dir-journal . (file-name-concat ps/dir-dropbox "journal/"))
 (ps/dir-wiki . (file-name-concat ps/dir-dropbox "wiki/"))
 (ps/dir-wiki-entries . (file-name-concat ps/dir-wiki "entries/"))
 (ps/dir-wiki-references . (file-name-concat ps/dir-wiki "references/"))
 (ps/dir-dotfiles . (file-name-concat ps/dir-dropbox "dotfiles/"))
 (ps/dir-dotemacs . (file-name-concat ps/dir-dotfiles "emacs/"))
 (ps/dir-karabiner . (file-name-concat ps/dir-dotfiles "karabiner/"))
 (ps/dir-bibliographic-notes . (file-name-concat ps/dir-dropbox "bibliographic-notes/"))
 (ps/dir-yasnippets . (file-name-concat ps/dir-dotemacs "yasnippets/"))
 (ps/dir-yasnippets-private . (file-name-concat ps/dir-dotemacs "yasnippets-private/"))
 (ps/dir-abbrev . (file-name-concat ps/dir-dotemacs "abbrev/"))
 (ps/dir-private . (file-name-concat ps/dir-dotfiles "private/"))
 (ps/dir-ledger . (file-name-concat ps/dir-dropbox "ledger/"))
 (ps/dir-notes . (file-name-concat ps/dir-dropbox "notes/"))
 (ps/dir-people . (file-name-concat ps/dir-dropbox "people/"))
 (ps/dir-android . (file-name-concat ps/dir-dropbox "android/"))
 (ps/dir-bbdb . (file-name-concat ps/dir-dropbox "bbdb/"))
 (ps/dir-ade . (file-name-concat ps/dir-user "Documents/Digital Editions/"))
 (ps/dir-library-pdf . (file-name-concat ps/dir-google-drive "library-pdf/"))
 (ps/dir-library-html . (file-name-concat ps/dir-google-drive "library-html/"))
 (ps/dir-library-media . (file-name-concat ps/dir-google-drive "library-media/"))
 (ps/dir-emacs-var . (file-name-concat ps/dir-emacs "var/"))
 (ps/dir-source . (file-name-concat ps/dir-user "source/"))
 (ps/dir-translation-server . (file-name-concat ps/dir-source "translation-server/"))
 (ps/dir-PW . (file-name-concat ps/dir-dropbox "PW/"))
 (ps/dir-org-clock-reports . ps/dir-dropbox-tlon-pablo)
 (ps/dir-google-drive-tlon . (file-name-concat ps/dir-google-drive "tlon/"))
 (ps/dir-google-drive-tlon-leo . (file-name-concat ps/dir-google-drive-tlon "leo/"))
 (ps/dir-google-drive-tlon-BAE . (file-name-concat ps/dir-google-drive-tlon "BAE/"))
 (ps/dir-google-drive-tlon-EAN . (file-name-concat ps/dir-google-drive-tlon "EAN/"))
 (ps/dir-google-drive-tlon-FM . (file-name-concat ps/dir-google-drive-tlon "FM/"))
 (ps/dir-google-drive-tlon-GPE . (file-name-concat ps/dir-google-drive-tlon "GPE/"))
 (ps/dir-google-drive-tlon-HEAR . (file-name-concat ps/dir-google-drive-tlon "HEAR/"))
 (ps/dir-google-drive-tlon-LBDLH . (file-name-concat ps/dir-google-drive-tlon "LBDLH/"))
 (ps/dir-google-drive-tlon-LP . (file-name-concat ps/dir-google-drive-tlon "LP/"))
 (ps/dir-google-drive-tlon-RAE . (file-name-concat ps/dir-google-drive-tlon "RAE/"))
 (ps/dir-google-drive-tlon-RCG . (file-name-concat ps/dir-google-drive-tlon "RCG/"))
 (ps/dir-dropbox-tlon . (file-name-concat ps/dir-dropbox "tlon/"))
 (ps/dir-google-drive-tlon-core . (file-name-concat ps/dir-google-drive-tlon "core/"))
 (ps/dir-google-drive-tlon-fede . (file-name-concat ps/dir-google-drive-tlon "fede/"))
 (ps/dir-dropbox-tlon-core . (file-name-concat ps/dir-dropbox-tlon "core/"))
 (ps/dir-dropbox-tlon-leo . (file-name-concat ps/dir-dropbox-tlon "leo/"))
 (ps/dir-dropbox-tlon-fede . (file-name-concat ps/dir-dropbox-tlon "fede/"))
 (ps/dir-dropbox-tlon-pablo . (file-name-concat ps/dir-dropbox-tlon "pablo/"))
 (ps/dir-dropbox-tlon-ledger . (file-name-concat ps/dir-dropbox-tlon-core "ledger/"))
 (ps/dir-dropbox-tlon-pass . (file-name-concat ps/dir-dropbox-tlon-core "pass/"))
 (ps/dir-dropbox-tlon-BAE . (file-name-concat ps/dir-dropbox-tlon "BAE/"))
 (ps/dir-dropbox-tlon-EAN . (file-name-concat ps/dir-dropbox-tlon "EAN/"))
 (ps/dir-dropbox-tlon-FM . (file-name-concat ps/dir-dropbox-tlon "FM/"))
 (ps/dir-dropbox-tlon-GPE . (file-name-concat ps/dir-dropbox-tlon "GPE/"))
 (ps/dir-dropbox-tlon-HEAR . (file-name-concat ps/dir-dropbox-tlon "HEAR/"))
 (ps/dir-dropbox-tlon-LBDLH . (file-name-concat ps/dir-dropbox-tlon "LBDLH/"))
 (ps/dir-dropbox-tlon-LP . (file-name-concat ps/dir-dropbox-tlon "LP/"))
 (ps/dir-dropbox-tlon-RAE . (file-name-concat ps/dir-dropbox-tlon "RAE/"))
 (ps/dir-dropbox-tlon-RCG . (file-name-concat ps/dir-dropbox-tlon "RCG/"))
 (ps/dir-repos . (file-name-concat ps/dir-dropbox "repos/"))
 (ps/dir-tlon-biblioteca-altruismo-eficaz . (file-name-concat ps/dir-repos "biblioteca-altruismo-eficaz/"))
 (ps/dir-emacs-local . (file-name-concat ps/dir-emacs "local/"))
 (ps/dir-chemacs-profiles . (file-name-concat ps/dir-user ".config/emacs-profiles/"))
 (ps/dir-org .  ps/dir-dropbox)
 (ps/dir-org-roam .  ps/dir-org)
 (ps/dir-org-images . (file-name-concat ps/dir-google-drive "Pictures/org/"))
 (ps/dir-websites . (file-name-concat ps/dir-dropbox "websites/"))
 (ps/dir-calibre . (file-name-concat ps/dir-user "Calibre Library/"))
 (ps/dir-all-repos . (list ps/dir-android
                           ps/dir-bibliography
                           ps/dir-bibliographic-notes
                           ps/dir-journal
                           ps/dir-notes
                           ps/dir-people))
 (ps/file-notes . (file-name-concat ps/dir-notes "notes.org"))
 (ps/file-inbox-desktop . (file-name-concat ps/dir-android "inbox-desktop.org"))
 (ps/file-inbox-mobile . (file-name-concat ps/dir-android "inbox-mobile.org"))
 (ps/file-calendar . (file-name-concat ps/dir-android "calendar.org"))
 (ps/file-feeds-pablo . (file-name-concat ps/dir-notes "feeds.org"))
 (ps/file-tlon-feeds . (file-name-concat ps/dir-dropbox-tlon-core "feeds.org"))
 (ps/file-anki . (file-name-concat ps/dir-anki "main.org"))
 (ps/file-init . (file-name-concat ps/dir-dotemacs "init.el"))
 (ps/file-config . (file-name-concat ps/dir-dotemacs "config.org"))
 (ps/file-karabiner . (file-name-concat ps/dir-karabiner "modifications.org"))
 (ps/file-karabiner-edn . (file-name-concat ps/dir-karabiner "karabiner.edn"))
 (ps/file-bibliography . (file-name-concat ps/dir-bibliography "bibliography.bib"))
 (ps/file-bibliography-old . (file-name-concat ps/dir-bibliography "old.bib"))
 (ps/file-bibliography-new . (file-name-concat ps/dir-bibliography "new.bib"))
 (ps/file-bibliography-films . (file-name-concat ps/dir-bibliography "films.bib"))
 (ps/file-bibliography-emacs . (file-name-concat ps/dir-bibliography "emacs.bib"))
 (ps/file-wiki-notes . (file-name-concat ps/dir-wiki "wiki-notes.org"))
 (ps/file-wiki-published . (file-name-concat ps/dir-wiki "wiki-published.org"))
 (ps/file-wiki-help . (file-name-concat ps/dir-wiki "wiki-help.org"))
 (ps/file-library . (file-name-concat ps/dir-notes "library.org"))
 (ps/file-quotes . (file-name-concat ps/dir-blog "quotes.org"))
 (ps/file-films . (file-name-concat ps/dir-notes "films.org"))
 (ps/file-tlon-tareas-leo . (file-name-concat ps/dir-dropbox-tlon-leo "tareas.org"))
 (ps/file-tlon-tareas-fede . (file-name-concat ps/dir-dropbox-tlon-fede "tareas.org"))
 (ps/file-org2blog . (file-name-concat ps/dir-websites ".org2blog.org"))
 (ps/file-straight-profile . (file-name-concat ps/dir-dotemacs "straight-profile.el"))
 (ps/file-orb-noter-template . (file-name-concat ps/dir-bibliography "orb-noter-template.org"))
 (ps/file-orb-capture-template . (file-name-concat ps/dir-bibliographic-notes "${citekey}.org"))
 (ps/file-bookmarks . (file-name-concat ps/dir-dropbox "bookmarks"))
 (ps/file-variables . (file-name-concat ps/dir-dotemacs "variables.el"))
 (ps/file-ledger . (file-name-concat ps/dir-ledger "journal.ledger"))
 (ps/file-ledger-db . (file-name-concat ps/dir-ledger ".pricedb"))
 (ps/file-metaculus . (file-name-concat ps/dir-notes "metaculus.org"))
 (ps/file-gpe . (file-name-concat ps/dir-notes "global-priorities-encyclopedia.org"))
 (ps/file-fm . (file-name-concat ps/dir-notes "future-matters.org"))
 (ps/file-ffrp . (file-name-concat ps/dir-notes "future-fund-regranting-program.org"))
 (ps/file-rcg . (file-name-concat ps/dir-notes "riesgos-catastróficos-globales.org"))
 (ps/file-ean . (file-name-concat ps/dir-notes "ea.news.org"))
 (ps/file-cookies . (file-name-concat ps/dir-google-drive "Apps/Chrome/cookies.txt"))
 (ps/file-work . (file-name-concat ps/dir-notes "work-dashboard.org"))
 (ps/file-tlon-ledger-schedule-file . (file-name-concat ps/dir-dropbox-tlon-ledger "ledger-schedule.ledger"))
 (ps/file-tlon-docs . (file-name-concat ps/dir-dropbox-tlon "docs.org"))
 (ps/file-tlon-ledger . (file-name-concat ps/dir-dropbox-tlon-ledger "tlon.ledger"))
 (ps/face-fixed-pitch . "SauceCodePro Nerd Font")
 (ps/face-fixed-pitch-size .  115)
 (ps/face-variable-pitch . "Source Serif Pro")
 (ps/monitor-type . (cdr (assoc 'name (frame-monitor-attributes))))
 (ps/ledger-active-currencies . '("USD" "EUR" "GBP" "MXN" "ARS"))
 (ps/frame-width-threshold .  350)
 (ps/new-empty-buffer-major-mode . 'org-mode)
 (ps/forge-owned-accounts . "benthamite")
 (ps/personal-signature . "

,#+begin_signature
--
,*Pablo*
,#+end_signature")
 (ps/location-name . "Ciudad de Buenos Aires, Argentina")
 (ps/display-wttr-locations . '("Buenos Aires"))
 (ps/location-latitude . -34.58194921101665)
 (ps/location-longitude . -58.41290172678564)

 ;; Threshold for auto splitting the window sideways, in columns
 (ps/split-width-threshold . 200)

 ;; Telega server libs prefix: depends on how tldib is installed:
 ;; using brew --HEAD or compiling it from source
 (ps/telega-server-libs-prefix . "/opt/homebrew")

 (ps/org-agenda-files . `(,ps/file-calendar))
 ;; I have to exclude these files because otherwise extraneous
 ;; information shows up in my agenda, such as TODOs and time
 ;; logs. These files lack the `property' tag but the may still
 ;; otherwise be included if they have been modified recently
 ;; (see the function `vulpea-agenda-files-update')
 (ps/org-agenda-files-excluded . `(,ps/file-tlon-tareas-leo ,ps/file-tlon-tareas-fede))

 (ps/init-location . (file-name-concat
                      (or (catch 'default-path
                            (dolist (profile chemacs-profiles)
                              (when (string= (car profile) "default")
                                (throw 'default-path (cdadr profile)))))
                          "~/.config/emacs-profiles/develop/")
                      "init-pablo.el"))
 ;; "Target location of `init-pablo.el' file to be tangled upon invocation of `org-babel-tangle'. Defaults to the path associated with the default Chemacs profile, when such a profile is defined, else to '~/.config/emacs-profiles/develop/'. A different path may be set manually via `ps/init-configure-tangle-options'."

 (ps/early-init-location . (file-name-concat
                            (or (catch 'default-path
                                  (dolist (profile chemacs-profiles)
                                    (when (string= (car profile) "default")
                                      (throw 'default-path (cdadr profile)))))
                                "~/.config/emacs-profiles/develop/")
                            "early-init.el"))
 ;; "Target location of `early-init.el' file to be tangled upon invocation of `org-babel-tangle'. Defaults to the path associated with the default Chemacs profile, when such a profile is defined, else to '~/.config/emacs-profiles/develop/'. A different path may be set manually via `ps/init-configure-tangle-options'.")

 (ps/init-target-locations . (let (target-directories)
                               (dolist (chemacs-profile chemacs-profiles target-directories)
                                 (push
                                  (cons
                                   (car chemacs-profile)
                                   (file-name-concat (cdadr chemacs-profile) "init-pablo.el"))
                                  target-directories))))
 ;; "Alist of Chemacs profiles and associated locations for the `init-pablo.el' and `early-init-pablo.el' files to be passed to `ps/init-configure-tangle-options'.")

 (ps/init-tangle-flags-filename-sans-directory . "tangle-flags-pablo.el")

 (ps/init-dir . "/Users/pablostafforini/.config/emacs-profiles/develop/")
 )
#+end_src

** local variables
:PROPERTIES:
:ID:       1D879FA3-48B7-4C76-9EE0-8514F9E85A4E
:END:
# Local Variables:
# eval: (ps/buffer-local-set-key (kbd "H-;") 'hydra-org-config/body)
# eval: (ps/buffer-local-set-key (kbd "s-a") 'org-archive-hierarchically)
# eval: (add-hook 'before-save-hook 'org-make-toc nil t)
# org-crypt-key: "tlon.shared@gmail.com"
# End:
