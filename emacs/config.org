#+TITLE:Pablo's Emacs config
#+AUTHOR: Pablo Stafforini
#+PROPERTY: header-args :tangle (print init-file-user-init)
:PROPERTIES:
:TOC:      ignore
:END:
#+filetags: :project:
* exordium
:PROPERTIES:
:ID:       66EACB4A-84D2-42AE-9F85-EF30DA714A17
:END:

#+begin_src markdown :tangle no
In digital realms where coders dwell and roam,
I wrestle with thee, Emacs, day by day.
Thy arcane keystrokes make my fingers stray,
Yet in thy depths, I've found a second home.

I've cursed your name when crashes stole my words,
Yet praised your wisdom when macros saved hours.
Bewildering, brilliant—conflicting powers
That sing to hackers like rare calling birds.

When mastered well, thy buffers sweetly sing!
Org-mode and Magit, treasures without peer.
Extensible beyond what rivals fear,
Transforming thought to structured reasoning.

Though modern editors may tempt and plea,
My love-scarred hands return always to thee.
#+end_src

(courtesy of Claude Sonnet 3.7)

I am not a programmer, let alone an Elisp hacker. My background is in the humanities. It is only a slight exaggeration to say that, before I started using Emacs in 2020, I didn't know the difference between a function and a variable. You have been forewarned.

* table of contents
:PROPERTIES:
:TOC:      :include all :depth 3 :force ((nothing)) :ignore ((nothing)) :local ((nothing))
:ID:       536D7BF2-AA0D-43D7-8865-601DFB6BB8E6
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 21:28]--[2021-08-02 Mon 21:29] =>  0:01
:END:
:CONTENTS:
- [[#exordium][exordium]]
- [[#table-of-contents][table of contents]]
- [[#early-init][early-init]]
- [[#package-management][package management]]
  - [[#elpaca][elpaca]]
  - [[#use-package][use-package]]
  - [[#use-package-extras][use-package-extras]]
  - [[#elpaca-extras][elpaca-extras]]
- [[#foundational][foundational]]
  - [[#gcmh][gcmh]]
  - [[#seq][seq]]
  - [[#paths][paths]]
  - [[#transient][transient]]
  - [[#init][init]]
  - [[#no-littering][no-littering]]
  - [[#ns-win][ns-win]]
  - [[#iso-transl][iso-transl]]
  - [[#el-patch][el-patch]]
  - [[#casual][casual]]
  - [[#warnings][warnings]]
  - [[#comp][comp]]
  - [[#bytecomp][bytecomp]]
  - [[#startup][startup]]
  - [[#server][server]]
  - [[#async][async]]
  - [[#prot-common][prot-common]]
  - [[#prot-simple][prot-simple]]
  - [[#misc][misc]]
- [[#performance][performance]]
  - [[#profiler][profiler]]
  - [[#profiler-extras][profiler-extras]]
  - [[#so-long][so-long]]
  - [[#misc][misc.]]
- [[#secrets][secrets]]
  - [[#plstore][plstore]]
  - [[#epg-config][epg-config]]
  - [[#auth-source][auth-source]]
  - [[#oauth2-auto][oauth2-auto]]
  - [[#pass][pass]]
  - [[#pass-extras][pass-extras]]
  - [[#password-store-otp][password-store-otp]]
  - [[#auth-source-pass][auth-source-pass]]
  - [[#password-generator][password-generator]]
- [[#version-control][version control]]
  - [[#vc][vc]]
  - [[#vc-extras][vc-extras]]
  - [[#log-edit][log-edit]]
  - [[#diff-mode][diff-mode]]
  - [[#ediff][ediff]]
  - [[#ediff-extras][ediff-extras]]
  - [[#smerge][smerge]]
  - [[#gh][gh]]
  - [[#closql][closql]]
  - [[#magit][magit]]
  - [[#magit-extra][magit-extra]]
  - [[#magit-todos][magit-todos]]
  - [[#with-editor][with-editor]]
  - [[#ghub][ghub]]
  - [[#forge][forge]]
  - [[#orgit][orgit]]
  - [[#orgit-forge][orgit-forge]]
  - [[#forge-search][forge-search]]
  - [[#forge-extras][forge-extras]]
  - [[#emacs-pr-review][emacs-pr-review]]
  - [[#git-auto-commit-mode][git-auto-commit-mode]]
  - [[#emsg-blame][emsg-blame]]
- [[#display][display]]
  - [[#fringe][fringe]]
  - [[#faces][faces]]
  - [[#faces-extras][faces-extras]]
  - [[#org-modern][org-modern]]
  - [[#org-modern-indent][org-modern-indent]]
  - [[#org-tidy][org-tidy]]
  - [[#org-appear][org-appear]]
  - [[#face-remap][face-remap]]
  - [[#modus-themes][modus-themes]]
  - [[#modus-themes-extras][modus-themes-extras]]
  - [[#highlight-parentheses][highlight-parentheses]]
  - [[#spacious-padding][spacious-padding]]
  - [[#emoji][emoji]]
  - [[#color][color]]
  - [[#color-extras][color-extras]]
  - [[#rainbow-mode][rainbow-mode]]
  - [[#ct][ct]]
  - [[#hsluv][hsluv]]
  - [[#image][image]]
  - [[#image-mode][image-mode]]
  - [[#paren][paren]]
  - [[#doom-modeline][doom-modeline]]
  - [[#doom-modeline-extras][doom-modeline-extras]]
  - [[#tab-bar][tab-bar]]
  - [[#tab-bar-extras][tab-bar-extras]]
  - [[#breadcrumb][breadcrumb]]
  - [[#battery][battery]]
  - [[#nerd-icons][nerd-icons]]
  - [[#menu-bar][menu-bar]]
  - [[#tool-bar][tool-bar]]
  - [[#scroll-bar][scroll-bar]]
  - [[#pixel-scroll][pixel-scroll]]
  - [[#delsel][delsel]]
  - [[#hl-line][hl-line]]
  - [[#lin][lin]]
  - [[#jit-lock][jit-lock]]
- [[#text-movement][text movement]]
  - [[#words][words]]
  - [[#lines][lines]]
  - [[#sentences][sentences]]
  - [[#paragraphs][paragraphs]]
  - [[#sexps][sexps]]
  - [[#defuns][defuns]]
  - [[#buffers][buffers]]
- [[#text-manipulation][text manipulation]]
  - [[#simple][simple]]
  - [[#simple-extras][simple-extras]]
  - [[#paragraphs][paragraphs]]
- [[#editing][editing]]
  - [[#simple][simple]]
  - [[#rect][rect]]
  - [[#repeat][repeat]]
  - [[#view][view]]
  - [[#sort][sort]]
  - [[#vundo][vundo]]
  - [[#outline][outline]]
  - [[#outline-extras][outline-extras]]
  - [[#outli][outli]]
  - [[#abbrev][abbrev]]
  - [[#abbrev-extras][abbrev-extras]]
  - [[#yasnippet][yasnippet]]
  - [[#yasnippet-snippets][yasnippet-snippets]]
  - [[#expand-region][expand-region]]
  - [[#newcomment][newcomment]]
  - [[#skeleton][skeleton]]
  - [[#crux][crux]]
  - [[#button][button]]
  - [[#back-button][back-button]]
  - [[#goto-last-change][goto-last-change]]
  - [[#goto-addr][goto-addr]]
- [[#registers--bookmarks][registers & bookmarks]]
  - [[#register][register]]
  - [[#register-extras][register-extras]]
  - [[#bookmarks][bookmarks]]
- [[#files--buffers][files & buffers]]
  - [[#files][files]]
  - [[#files-extras][files-extras]]
  - [[#locate][locate]]
  - [[#autorevert][autorevert]]
  - [[#dired][dired]]
  - [[#dired-x][dired-x]]
  - [[#dired-extras][dired-extras]]
  - [[#dired-aux][dired-aux]]
  - [[#dired-git-info][dired-git-info]]
  - [[#dired-du][dired-du]]
  - [[#image-dired][image-dired]]
  - [[#nerd-icons-dired][nerd-icons-dired]]
  - [[#wdired][wdired]]
  - [[#gnus-dired][gnus-dired]]
  - [[#dired-hacks][dired-hacks]]
  - [[#dired-quick-sort][dired-quick-sort]]
  - [[#peep-dired][peep-dired]]
  - [[#minibuffer][minibuffer]]
  - [[#ibuffer][ibuffer]]
  - [[#prot-scratch][prot-scratch]]
  - [[#persistent-scratch][persistent-scratch]]
  - [[#executable][executable]]
  - [[#uniquify][uniquify]]
  - [[#reveal-in-osx-finder][reveal-in-osx-finder]]
  - [[#tramp][tramp]]
  - [[#pandoc-mode][pandoc-mode]]
- [[#windows--frames][windows & frames]]
  - [[#window][window]]
  - [[#window-extras][window-extras]]
  - [[#frame][frame]]
  - [[#frame-extras][frame-extras]]
  - [[#posframe][posframe]]
  - [[#winum][winum]]
  - [[#winner][winner]]
  - [[#popper][popper]]
  - [[#avy][avy]]
  - [[#avy-extras][avy-extras]]
  - [[#writeroom-mode][writeroom-mode]]
  - [[#ace-link][ace-link]]
  - [[#ace-link-extras][ace-link-extras]]
- [[#date--time][date & time]]
  - [[#calendar][calendar]]
  - [[#calendar-extras][calendar-extras]]
  - [[#holidays][holidays]]
  - [[#org-gcal][org-gcal]]
  - [[#org-gcal-extras][org-gcal-extras]]
  - [[#calfw][calfw]]
  - [[#calfw-org][calfw-org]]
  - [[#calfw-blocks][calfw-blocks]]
  - [[#time][time]]
  - [[#timer-list][timer-list]]
  - [[#tmr][tmr]]
  - [[#display-wttr][display-wttr]]
- [[#history][history]]
  - [[#savehist][savehist]]
  - [[#simple][simple]]
  - [[#saveplace][saveplace]]
  - [[#session][session]]
  - [[#recentf][recentf]]
- [[#search--replace][search & replace]]
  - [[#elgrep][elgrep]]
  - [[#isearch][isearch]]
  - [[#isearch-extras][isearch-extras]]
  - [[#replace][replace]]
  - [[#substitute][substitute]]
  - [[#imenu][imenu]]
  - [[#pcre2el][pcre2el]]
  - [[#wgrep][wgrep]]
- [[#minibuffer-completion][minibuffer completion]]
  - [[#bindings][bindings]]
  - [[#vertico][vertico]]
  - [[#embark][embark]]
  - [[#consult][consult]]
  - [[#consult-extras][consult-extras]]
  - [[#consult-dir][consult-dir]]
  - [[#consult-git-log-grep][consult-git-log-grep]]
  - [[#consult-yasnippet][consult-yasnippet]]
  - [[#embark-consult][embark-consult]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#orderless-extras][orderless-extras]]
  - [[#nerd-icons-completion][nerd-icons-completion]]
  - [[#ido][ido]]
  - [[#which-key][which-key]]
- [[#completion-at-point][completion at point]]
  - [[#corfu][corfu]]
  - [[#corfu-extras][corfu-extras]]
  - [[#cape][cape]]
  - [[#corg][corg]]
- [[#help][help]]
  - [[#help][help]]
  - [[#help-at-pt][help-at-pt]]
  - [[#helpful][helpful]]
  - [[#info][info]]
  - [[#man][man]]
  - [[#woman][woman]]
  - [[#shortdoc][shortdoc]]
  - [[#find-func][find-func]]
  - [[#elisp-refs][elisp-refs]]
  - [[#elisp-demos][elisp-demos]]
- [[#keyboard-macros][keyboard macros]]
  - [[#kmacro][kmacro]]
  - [[#kmacro-extras][kmacro-extras]]
- [[#shell][shell]]
  - [[#simple][simple]]
  - [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#em-hist][em-hist]]
  - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
  - [[#dwim-shell-command][dwim-shell-command]]
  - [[#eat][eat]]
- [[#spelling--grammar][spelling & grammar]]
  - [[#jinx][jinx]]
  - [[#jinx-extras][jinx-extras]]
  - [[#flycheck][flycheck]]
  - [[#consult-flycheck][consult-flycheck]]
  - [[#flycheck-ledger][flycheck-ledger]]
  - [[#flycheck-languagetool][flycheck-languagetool]]
  - [[#lsp-mode][lsp-mode]]
  - [[#grammarly][grammarly]]
  - [[#lsp-grammarly][lsp-grammarly]]
- [[#prose][prose]]
  - [[#text-mode][text-mode]]
  - [[#atomic-chrome][atomic-chrome]]
  - [[#markdown-mode][markdown-mode]]
  - [[#markdown-mode-extras][markdown-mode-extras]]
  - [[#grip-mode][grip-mode]]
  - [[#xwidget][xwidget]]
  - [[#edit-indirect][edit-indirect]]
  - [[#mediawiki][mediawiki]]
  - [[#gdrive][gdrive]]
  - [[#ledger-mode][ledger-mode]]
  - [[#ledger-mode-extras][ledger-mode-extras]]
- [[#translation][translation]]
  - [[#tlon][tlon]]
  - [[#go-translate][go-translate]]
  - [[#powerthesaurus][powerthesaurus]]
  - [[#goldendict-ng][goldendict-ng]]
  - [[#reverso][reverso]]
  - [[#dictionary][dictionary]]
- [[#docs][docs]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-tools-extras][pdf-tools-extras]]
  - [[#pdf-tools-pages][pdf-tools-pages]]
  - [[#scroll-other-window][scroll-other-window]]
  - [[#pdf-view-restore][pdf-view-restore]]
  - [[#moon-reader][moon-reader]]
  - [[#org-pdftools][org-pdftools]]
  - [[#nov][nov]]
  - [[#djvu][djvu]]
- [[#programming][programming]]
  - [[#prog-mode][prog-mode]]
  - [[#treesit][treesit]]
  - [[#elisp-mode][elisp-mode]]
  - [[#lisp-mode][lisp-mode]]
  - [[#curl-to-elisp][curl-to-elisp]]
  - [[#f][f]]
  - [[#s][s]]
  - [[#backtrace][backtrace]]
  - [[#debug][debug]]
  - [[#edebug][edebug]]
  - [[#macrostep][macrostep]]
  - [[#js][js]]
  - [[#js2-mode][js2-mode]]
  - [[#clojure][clojure]]
  - [[#haskell-mode][haskell-mode]]
  - [[#python][python]]
  - [[#pyenv-mode][pyenv-mode]]
  - [[#pet][pet]]
  - [[#emacs-ipython-notebook][emacs-ipython-notebook]]
  - [[#go][go]]
  - [[#applescript-mode][applescript-mode]]
  - [[#json-mode][json-mode]]
  - [[#csv-mode][csv-mode]]
  - [[#yaml][yaml]]
  - [[#yaml-mode][yaml-mode]]
  - [[#shut-up][shut-up]]
  - [[#puni][puni]]
  - [[#hl-todo][hl-todo]]
  - [[#project][project]]
  - [[#hideshow][hideshow]]
  - [[#aggressive-indent][aggressive-indent]]
  - [[#elpy][elpy]]
  - [[#eldoc][eldoc]]
- [[#ai][AI]]
  - [[#copilot][copilot]]
  - [[#copilot-extras][copilot-extras]]
  - [[#gptel][gptel]]
  - [[#gptel-plus][gptel-plus]]
  - [[#gptel-extras][gptel-extras]]
  - [[#gptel-quick][gptel-quick]]
  - [[#llm-tool-collection][llm-tool-collection]]
  - [[#codel][codel]]
  - [[#aidermacs][aidermacs]]
  - [[#aidermacs-extras][aidermacs-extras]]
  - [[#semext][semext]]
  - [[#mcp][mcp]]
  - [[#dall-e-shell][dall-e-shell]]
  - [[#llm][llm]]
  - [[#magit-gptcommit][magit-gptcommit]]
- [[#org-mode][org-mode]]
  - [[#org][org]]
  - [[#org-extras][org-extras]]
  - [[#org-agenda][org-agenda]]
  - [[#org-capture][org-capture]]
  - [[#org-clock][org-clock]]
  - [[#org-clock-convenience][org-clock-convenience]]
  - [[#org-clock-split][org-clock-split]]
  - [[#org-cycle][org-cycle]]
  - [[#org-archive][org-archive]]
  - [[#org-archive-hierarchically][org-archive-hierarchically]]
  - [[#org-fold][org-fold]]
  - [[#org-faces][org-faces]]
  - [[#org-id][org-id]]
  - [[#org-list][org-list]]
  - [[#org-refile][org-refile]]
  - [[#org-keys][org-keys]]
  - [[#ol][ol]]
  - [[#ol-bbdb][ol-bbdb]]
  - [[#org-protocol][org-protocol]]
  - [[#ox][ox]]
  - [[#ox-html][ox-html]]
  - [[#ox-latex][ox-latex]]
  - [[#ox-hugo][ox-hugo]]
  - [[#ox-pandoc][ox-pandoc]]
  - [[#ox-gfm][ox-gfm]]
  - [[#ob][ob]]
  - [[#ob-typescript][ob-typescript]]
  - [[#org-tempo][org-tempo]]
  - [[#org-src][org-src]]
  - [[#org-table][org-table]]
  - [[#orgtbl-edit][orgtbl-edit]]
  - [[#orgtbl-join][orgtbl-join]]
  - [[#org-crypt][org-crypt]]
  - [[#org-element][org-element]]
  - [[#org-lint][org-lint]]
  - [[#org-habit][org-habit]]
  - [[#org-contrib][org-contrib]]
  - [[#org-checklist][org-checklist]]
  - [[#org-make-toc][org-make-toc]]
  - [[#org2blog][org2blog]]
  - [[#org2blog-extras][org2blog-extras]]
  - [[#org-journal][org-journal]]
  - [[#org-contacts][org-contacts]]
  - [[#org-vcard][org-vcard]]
  - [[#org-autosort][org-autosort]]
  - [[#ox-clip][ox-clip]]
  - [[#elgantt][elgantt]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#org-pomodoro-extras][org-pomodoro-extras]]
- [[#note-taking][note-taking]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-extras][org-roam-extras]]
  - [[#org-roam-ui][org-roam-ui]]
  - [[#org-transclusion][org-transclusion]]
  - [[#vulpea][vulpea]]
  - [[#vulpea-extras][vulpea-extras]]
  - [[#org-noter][org-noter]]
  - [[#org-noter-extras][org-noter-extras]]
- [[#reference--citation][reference & citation]]
  - [[#oc][oc]]
  - [[#oc-csl][oc-csl]]
  - [[#citeproc][citeproc]]
  - [[#bibtex][bibtex]]
  - [[#bibtex-extras][bibtex-extras]]
  - [[#bibtex-completion][bibtex-completion]]
  - [[#bibtex-completion-extras][bibtex-completion-extras]]
  - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#citar][citar]]
  - [[#citar-extras][citar-extras]]
  - [[#citar-citeproc][citar-citeproc]]
  - [[#citar-embark][citar-embark]]
  - [[#citar-org-roam][citar-org-roam]]
  - [[#org-ref][org-ref]]
  - [[#org-ref-extras][org-ref-extras]]
  - [[#ebib][ebib]]
  - [[#ebib-utils][ebib-utils]]
  - [[#ebib-extras][ebib-extras]]
  - [[#bib][bib]]
  - [[#zotra][zotra]]
  - [[#zotra-extras][zotra-extras]]
  - [[#annas-archive][annas-archive]]
  - [[#scihub][scihub]]
- [[#email][email]]
  - [[#simple][simple]]
  - [[#sendmail][sendmail]]
  - [[#smtpmail][smtpmail]]
  - [[#message][message]]
  - [[#mml][mml]]
  - [[#mu4e][mu4e]]
  - [[#mu4e-extras][mu4e-extras]]
  - [[#org-msg][org-msg]]
  - [[#org-msg-extras][org-msg-extras]]
- [[#messaging][messaging]]
  - [[#telega][telega]]
  - [[#telega-mnz][telega-mnz]]
  - [[#telega-dired-dwim][telega-dired-dwim]]
  - [[#telega-extras][telega-extras]]
  - [[#ol-telega][ol-telega]]
  - [[#ement][ement]]
  - [[#erc][erc]]
  - [[#circe][circe]]
  - [[#slack][slack]]
  - [[#ol-emacs-slack][ol-emacs-slack]]
- [[#web][web]]
  - [[#browse-url][browse-url]]
  - [[#browse-url-extras][browse-url-extras]]
  - [[#shr][shr]]
  - [[#html][html]]
  - [[#mhtml][mhtml]]
  - [[#shr-tag-pre-highlight][shr-tag-pre-highlight]]
  - [[#shr-heading][shr-heading]]
  - [[#eww][eww]]
  - [[#eww-extras][eww-extras]]
  - [[#prot-eww][prot-eww]]
  - [[#w3m][w3m]]
  - [[#elfeed][elfeed]]
  - [[#elfeed-extras][elfeed-extras]]
  - [[#elfeed-org][elfeed-org]]
  - [[#elfeed-tube][elfeed-tube]]
  - [[#elfeed-tube-mpv][elfeed-tube-mpv]]
  - [[#engine-mode][engine-mode]]
  - [[#org-download][org-download]]
  - [[#org-web-tools][org-web-tools]]
  - [[#org-web-tools-extras][org-web-tools-extras]]
  - [[#request][request]]
  - [[#deferred][deferred]]
  - [[#graphql-mode][graphql-mode]]
  - [[#mullvad][mullvad]]
- [[#multimedia][multimedia]]
  - [[#emms][EMMS]]
  - [[#empv][empv]]
  - [[#ytdl][ytdl]]
  - [[#emacs-speech-input][emacs-speech-input]]
  - [[#read-aloud][read-aloud]]
  - [[#read-aloud-extras][read-aloud-extras]]
  - [[#subed][subed]]
- [[#misc][misc]]
  - [[#calc][calc]]
  - [[#calc-ext][calc-ext]]
  - [[#alert][alert]]
  - [[#midnight][midnight]]
  - [[#bbdb][bbdb]]
  - [[#bbdb-extras][bbdb-extras]]
  - [[#bbdb-vcard][bbdb-vcard]]
  - [[#macos][macos]]
  - [[#keycast][keycast]]
  - [[#activity-watch-mode][activity-watch-mode]]
  - [[#custom][custom]]
  - [[#mercado-libre][mercado-libre]]
  - [[#polymarket][polymarket]]
  - [[#kelly][kelly]]
  - [[#fatebook][fatebook]]
  - [[#tetris][tetris]]
- [[#personal][personal]]
  - [[#keyboard-maestro][keyboard-maestro]]
- [[#appendices][appendices]]
  - [[#key-bindings][key bindings]]
  - [[#profiling][profiling]]
  - [[#installation][installation]]
  - [[#other-config-files][other config files]]
- [[#local-variables][local variables]]
:END:

* early-init
:PROPERTIES:
:ID:       F59230DF-14ED-44FF-B54B-4A6758C12D99
:END:

The contents of this code block are tangled to the ~early-init.el~ file.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally nil t)
(defun macos-get-system-appearance ()
  "Return the current macOS system appearance."
  (intern (downcase (string-trim (shell-command-to-string
                                  "defaults read -g AppleInterfaceStyle 2>/dev/null || echo 'Light'")))))

(defun early-init-blacken-screen ()
  "Blacken screen as soon as Emacs starts, if the system theme is `dark'."
  (when (eq (macos-get-system-appearance) 'dark)
    (setopt mode-line-format nil)
    (set-face-attribute 'default nil :background "#000000" :foreground "#ffffff")
    (set-face-attribute 'mode-line nil :background "#000000" :foreground "#ffffff" :box 'unspecified)))

(early-init-blacken-screen)

;; recommended for straight/elpaca (github.com/radian-software/straight.el#getting-started)
(setopt package-enable-at-startup nil)

(add-to-list 'default-frame-alist '(undecorated-round . t)) ; remove title bar
(add-to-list 'initial-frame-alist '(fullscreen . maximized)) ; maximize frame on startup

;; github.com/emacscollective/no-littering#native-compilation-cache
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (file-name-concat (getenv "HOME")
                     ".config/emacs-profiles/var/eln-cache/")))

;; for debugging
(defun early-init-trace-feature-load (feature)
  "Print a backtrace immediately after FEATURE is loaded."
  (eval-after-load feature
    `(message "Feature '%s' loaded by:\n%s"
              ',feature
              (with-output-to-string
                (backtrace)))))
#+end_src

* package management
:PROPERTIES:
:ID:       0A714FC1-D562-4E41-A000-D5F369EBEBBD
:END:

** elpaca
:PROPERTIES:
:ID:       9CF1D7BB-62B0-4F7C-BB5A-A695BFD4D58D
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 19:04]--[2023-04-08 Sat 21:29] =>  2:25
CLOCK: [2023-04-05 Wed 22:53]--[2023-04-06 Thu 00:04] =>  1:11
:END:

/[[https://github.com/progfolio/elpaca][elpaca]] is a package manager that supports asynchronous installation of packages./

When experiencing issues, [[https://github.com/progfolio/elpaca/wiki/Troubleshooting][follow these steps]].

- By default, ~elpaca~ makes shallow copies of all the repos it clones. You can specify the repo depth with the [[https://github.com/progfolio/elpaca/blob/master/doc/manual.md#recipe-keyword-depth][:depth]] keyword. What if, however, you want to turn a shallow repo into a full repo /after/ it has been cloned? There is a relatively obscure command in Magit that lets you do this: =magit-remote-unshallow=. (Note that this not only passes the ~--unshallow~ flag but also restores access to all branches in addition to the main one.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
;;; init.el --- Init File -*- lexical-binding: t -*-
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
(elpaca-wait)

(require 'elpaca-menu-elpa)
(setf (alist-get 'packages-url (alist-get 'gnu elpaca-menu-elpas))
      "https://raw.githubusercontent.com/emacsmirror/gnu_elpa/refs/heads/main/elpa-packages"
      (alist-get 'remote (alist-get 'gnu elpaca-menu-elpas))
      "https://github.com/emacsmirror/gnu_elpa"
      (alist-get 'packages-url (alist-get 'nongnu elpaca-menu-elpas))
      "https://raw.githubusercontent.com/emacsmirror/nongnu_elpa/refs/heads/main/elpa-packages"
      (alist-get 'remote (alist-get 'nongnu elpaca-menu-elpas))
      "https://github.com/emacsmirror/nongnu_elpa")

(toggle-debug-on-error) ; uncomment when debugging
(setq elpaca-lock-file (file-name-concat (file-name-directory (directory-file-name elpaca-directory)) "lockfile.el"))
#+end_src

** use-package
:PROPERTIES:
:ID:       C53EA5F9-B256-480E-9BCB-7AD2D0D5DDC2
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 14:44]--[2022-05-06 Fri 15:06] =>  0:22
CLOCK: [2021-08-02 Mon 21:30]--[2021-08-02 Mon 21:32] =>  0:02
CLOCK: [2021-06-13 Sun 18:51]--[2021-06-13 Sun 18:53] =>  0:02
CLOCK: [2021-05-14 Fri 22:50]--[2021-05-15 Sat 00:20] =>  1:30
CLOCK: [2021-05-15 Sat 11:32]--[2021-05-15 Sat 11:50] =>  0:18
CLOCK: [2021-04-03 Sat 19:35]--[2021-04-03 Sat 20:18] =>  0:43
:END:

/[[https://github.com/jwiegley/use-package][use-package]] is a package organizer./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(use-package use-package
  :demand t
  :custom
  (use-package-always-ensure t)
  (use-package-verbose t)
  (use-package-compute-statistics t)
  (use-package-hook-name-suffix nil) ; use real name for hooks, i.e. do not omit the `-hook' bit
  (use-package-minimum-reported-time 0.1)

  :config
  (defmacro use-personal-package (name &rest args)
    "Like `use-package' but to load personal packages.
NAME and ARGS as in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :ensure (:host github
                      :repo "benthamite/dotfiles"
                      :files ,(list (file-name-concat
                                     "emacs/extras"
                                     (file-name-with-extension (symbol-name (eval `(quote ,name))) "el")))
                      :depth nil)
       ,@args)))

(elpaca-wait)
#+end_src

** use-package-extras
:PROPERTIES:
:ID:       A1D2F9BE-0983-4CE8-89C2-6727149F3268
:END:

/[[file:extras/use-package-extras.el][use-package-extras]] collects my extensions for =use-package=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package use-package-extras
  :demand t
  :hook
  (init-post-init-hook . use-package-extras-display-startup-time))
#+end_src

** elpaca-extras
:PROPERTIES:
:ID:       9A6A90C2-ACB6-4899-B38C-1C483A4FFE06
:END:

/[[file:extras/elpaca-extras.el][elpaca-extras]] collects my extensions for =elpaca=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package elpaca-extras
  :ensure (:wait t)
  :after use-package-extras)
#+end_src

* foundational
:PROPERTIES:
:ID:       B2CADEA2-F8B7-4E8E-8FB0-D6B59658933D
:END:
** gcmh
:PROPERTIES:
:ID:       A8BBF291-D5CE-4FF2-B80C-B69570AD129D
:END:

/[[https://github.com/emacsmirror/gcmh][GCMH]] enforces a sneaky Garbage Collection strategy to minimize GC interference with user activity./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gcmh
  :config
  (gcmh-mode))
#+end_src

** seq
:PROPERTIES:
:ID:       FD3A9A18-BDB8-4D52-9F5C-8E040FA042A2
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/seq.el][seq]] provides sequence-manipulation functions that complement basic functions provided by ~subr.el~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
;; https://github.com/progfolio/elpaca/issues/216#issuecomment-1868747372
(defun elpaca-unload-seq (e)
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun elpaca-seq-build-steps ()
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps elpaca-build-steps))
          (list 'elpaca-unload-seq 'elpaca--activate-package)))

(use-package seq
  :ensure `(seq :build ,(elpaca-seq-build-steps)))
#+end_src

** paths
:PROPERTIES:
:ID:       9D90809B-4CCF-4058-BB8B-396CF12B6E3F
:END:

/[[file:extras/paths.el][paths]] defines various paths used in this configuration./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package paths)
#+end_src

** transient
:PROPERTIES:
:ID:       E21AC33E-D108-4860-997C-A4982569005E
:END:

/transient is a library for creating keyboard-driven menus./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package transient
  :ensure (:host github
                 :repo "magit/transient"
                 :branch "main" ; github.com/progfolio/elpaca/issues/342
                 :build (:not elpaca--check-version))
  :after seq
  :custom
  (transient-default-level 7) ; magit.vc/manual/transient/Enabling-and-Disabling-Suffixes.html
  (transient-save-history nil) ; the history file was throwing an error on startup

  :bind
  (:map transient-base-map
        ("M-q" . transient-quit-one)))
#+end_src

** init
:PROPERTIES:
:ID:       BCE74006-DDB4-4AF5-AAFA-D44BC6AF55A7
:END:

/[[https://github.com/benthamite/init][init]] is a private package that I use to manage my config files and profiles./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package init
  :ensure (:host github
                 :repo "benthamite/init"
                 :depth nil ; clone entire repo, not just last commit
                 :wait t)
  :after paths
  :demand t
  :config
  (init-startup)

  :bind
  ("A-n" . init-menu))
#+end_src

** no-littering
:PROPERTIES:
:ID:       21B40C49-BBD2-4E04-871B-BB578C92F71B
:END:

/[[https://github.com/emacscollective/no-littering][no-littering]] keeps ~.emacs.d~ clean./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package no-littering
  :ensure (:wait t)
  :demand t
  :init
  ;; these directories should be shared across profiles, so there should
  ;; be only one `var' and one `etc' directory in `emacs-profiles'
  ;; rather than a pair of such directories for each profile
  (setq no-littering-etc-directory (file-name-concat paths-dir-emacs-profiles "etc/"))
  (setq no-littering-var-directory (file-name-concat paths-dir-emacs-profiles "var/"))

  :config
  ;; github.com/emacscollective/no-littering#auto-save-settings
  ;; should not be set via :custom
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** ns-win
:PROPERTIES:
:ID:       3411777E-E554-4EF3-9389-63242D4F3072
:END:

/ns-win provides various Nexstep convenience functions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ns-win
  :custom
  (mac-option-modifier 'meta)
  (mac-control-modifier 'control)
  (mac-command-modifier 'hyper)
  (mac-function-modifier 'none)
  (mac-right-option-modifier 'none)
  (mac-right-control-modifier 'super)
  (mac-right-command-modifier 'alt))
#+end_src

** iso-transl
:PROPERTIES:
:ID:       0A62A6C8-D3D8-4960-A809-35B60A479D2B
:END:

/iso-transl defines ways of entering the non-ASCII printable characters with codes above 127./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature iso-transl
  :config
  (setq iso-transl-char-map nil) ; emacs.stackexchange.com/questions/17508/

  ;; unset all `Super' key bindings
  (dolist (char (number-sequence ?a ?z))
    (keymap-global-unset (concat "s-" (char-to-string char))))

  ;; unset some `Alt' key bindings in `key-translation-map'
  (dolist (char '("SPC" "!" "$" "+" "-" "<" ">" "?" "a" "c" "m" "o" "u" "x" "C" "L" "P" "R" "S" "T" "Y" "[" "]" "{" "|" "}"))
    (keymap-unset key-translation-map (concat "A-" char))))
#+end_src

** el-patch
:PROPERTIES:
:ID:       554FC4A9-4993-495F-A154-DBC01A11747D
:END:
:LOGBOOK:
CLOCK: [2021-10-05 Tue 12:20]--[2021-10-05 Tue 13:11] =>  0:51
CLOCK: [2021-10-04 Mon 18:59]--[2021-10-04 Mon 19:31] =>  0:32
:END:

/[[https://github.com/raxod502/el-patch][el-patch]] customizes the behavior of Emacs Lisp functions and notifies the user when a function so customized changes./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package el-patch)
#+end_src

** casual
:PROPERTIES:
:ID:       53C5FB12-8D49-44D6-84B2-9D43F9201761
:END:

/[[https://github.com/kickingvegas/casual][casual]] is a collection of Transient menus for various Emacs modes./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package casual
  :defer t
  :init
  (with-eval-after-load 'calc-mode
    (bind-keys :map calc-mode-map
               ("C-o" . casual-calc-tmenu)
               :map calc-alg-map
               ("C-o" . casual-calc-tmenu))))
#+end_src

** warnings
:PROPERTIES:
:ID:       C8FB5BC6-6895-4D63-86A8-E49D6BB3001C
:END:

/warnings provides support for logging and displaying warnings./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature warnings
  :custom
  (warning-suppress-types '((copilot copilot-exceeds-max-char)
                            (flycheck syntax-checker)
                            (org-roam)
                            (tramp)
                            (aidermacs)
                            (org-element-cache)
                            (yasnippet backquote-change))))
#+end_src

** comp
:PROPERTIES:
:ID:       191AB5FC-F979-4B71-84A0-D8FC108CEBD3
:END:

/comp compiles Lisp code into native code./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature comp
  :custom
  (native-comp-async-report-warnings-errors nil))
#+end_src

** bytecomp
:PROPERTIES:
:ID:       630FB32E-8D10-47C5-98EB-B436C6CF97D9
:END:

/bytecomp compiles Lisp code into byte code./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature bytecomp
  :custom
  (byte-compile-warnings '(cl-functions)))
#+end_src

** startup
:PROPERTIES:
:ID:       853A9EBB-356D-428E-AC94-F14BBDA78FB4
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :custom
  (user-full-name "Pablo Stafforini")
  (user-mail-address (getenv "PERSONAL_GMAIL"))
  (initial-scratch-message nil)
  (inhibit-startup-screen t)
  (inhibit-startup-echo-area-message user-login-name)
  (inhibit-startup-buffer-menu t)
  (frame-resize-pixelwise t))
#+end_src

** server
:PROPERTIES:
:ID:       8514378A-0BA2-4A8E-971F-10C07ED4D38A
:END:

/server starts a server for external clients to connect to./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature server
  :defer 5
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** async
:PROPERTIES:
:ID:       B37674EC-9F35-4425-A587-F8D1944894EA
:END:

/[[https://github.com/jwiegley/emacs-async][async]] is a simple library for asynchronous processing in Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package async
  :defer t)
#+end_src

** prot-common
:PROPERTIES:
:ID:       300DFB2C-878E-4F21-833C-327C9DFDC01B
:END:

/[[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-common.el][prot-common]] is a set of functions used by Protesilaos Stavrou's unreleased "packages"./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package prot-common
  :ensure (:host github
           :repo "protesilaos/dotfiles"
           :local-repo "prot-common"
           :main "emacs/.emacs.d/prot-lisp/prot-common.el"
           :build (:not elpaca--check-version)
           :files ("emacs/.emacs.d/prot-lisp/prot-common.el")))
#+end_src

** prot-simple
:PROPERTIES:
:ID:       6C67743E-7250-4BC5-B496-2D969EF2D015
:END:

/[[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-simple.el][prot-simple]] is a set of common commands used by Protesilaos Stavrou's unreleased "packages"./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package prot-simple
  :ensure (:host github
           :repo "protesilaos/dotfiles"
           :local-repo "prot-simple"
           :main "emacs/.emacs.d/prot-lisp/prot-simple.el"
           :build (:not elpaca--check-version)
           :files ("emacs/.emacs.d/prot-lisp/prot-simple.el"))
  :after prot-common
  :custom
  (prot-simple-date-specifier "%F")
  (prot-simple-time-specifier "%R %z")

  :bind
  (("M-s-=" . prot-simple-insert-date)
   ("A-C-H-j" . prot-simple-mark-sexp)))
#+end_src

** misc
:PROPERTIES:
:ID:       72D2BA33-0E12-4893-B790-B132CE2F9404
:END:
:LOGBOOK:
CLOCK: [2021-12-13 Mon 13:04]--[2021-12-13 Mon 13:15] =>  0:11
CLOCK: [2021-07-25 Sun 11:48]--[2021-07-25 Sun 12:47] =>  0:59
CLOCK: [2021-07-18 Sun 20:32]--[2021-07-18 Sun 20:42] =>  0:10
CLOCK: [2021-05-05 Wed 21:05]--[2021-05-05 Wed 21:55] =>  0:50
CLOCK: [2021-02-11 Thu 08:51]--[2021-02-11 Thu 09:35] =>  0:44
CLOCK: [2021-04-05 Mon 15:49]--[2021-04-05 Mon 15:56] =>  0:07
CLOCK: [2021-02-07 Sun 12:07]--[2021-02-07 Sun 12:15] =>  0:08
CLOCK: [2021-04-08 Thu 07:27]--[2021-04-08 Thu 08:13] =>  0:46
CLOCK: [2021-04-06 Tue 19:57]--[2021-04-06 Tue 20:03] =>  0:06
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :custom
  (default-directory paths-dir-dropbox)
  (use-short-answers t)
  (message-log-max t)
  (ring-bell-function 'ignore) ; silence bell when mistake is made
  (x-stretch-cursor t) ; make curor the width of the character under it
  ;; emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  ;; UTF8 stuff.

  :init
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  :bind
  (:map input-decode-map
        ("M-8" . "•")))
#+end_src

* performance
:PROPERTIES:
:ID:       EF047473-EE10-41A2-852A-8CCD803469CD
:END:
:LOGBOOK:
CLOCK: [2021-10-15 Fri 12:34]--[2021-10-15 Fri 12:40] =>  0:06
CLOCK: [2021-03-20 Sat 22:11]--[2021-03-20 Sat 22:18] =>  0:07
CLOCK: [2021-02-28 Sun 11:18]--[2021-02-28 Sun 11:26] =>  0:08
CLOCK: [2021-02-28 Sun 10:30]--[2021-02-28 Sun 10:57] =>  0:27
CLOCK: [2021-02-26 Fri 18:00]--[2021-02-26 Fri 18:12] =>  0:12
CLOCK: [2021-02-26 Fri 09:51]--[2021-02-26 Fri 10:02] =>  0:11
CLOCK: [2021-02-25 Thu 15:32]--[2021-02-25 Thu 15:59] =>  0:27
CLOCK: [2021-02-21 Sun 10:01]--[2021-02-21 Sun 10:34] =>  0:33
CLOCK: [2021-02-12 Fri 08:47]--[2021-02-12 Fri 08:55] =>  0:08
CLOCK: [2021-02-07 Sun 12:15]--[2021-02-07 Sun 12:49] =>  0:34
CLOCK: [2021-08-06 Fri 15:28]--[2021-08-06 Fri 15:32] =>  0:04
CLOCK: [2021-07-13 Tue 20:44]--[2021-07-13 Tue 21:07] =>  0:23
CLOCK: [2021-07-13 Tue 19:51]--[2021-07-13 Tue 20:02] =>  0:11
CLOCK: [2021-06-15 Tue 21:28]--[2021-06-15 Tue 21:35] =>  0:07
CLOCK: [2021-06-08 Tue 20:45]--[2021-06-08 Tue 21:15] =>  0:30
CLOCK: [2021-03-25 Thu 20:06]--[2021-03-25 Thu 20:11] =>  0:05
CLOCK: [2021-03-25 Thu 15:25]--[2021-03-25 Thu 16:57] =>  1:32
CLOCK: [2021-03-25 Thu 08:56]--[2021-03-25 Thu 09:30] =>  0:34
CLOCK: [2021-03-21 Sun 09:13]--[2021-03-21 Sun 10:13] =>  1:00
CLOCK: [2021-03-17 Wed 09:19]--[2021-03-17 Wed 10:04] =>  0:45
CLOCK: [2021-03-04 Thu 09:50]--[2021-03-04 Thu 10:01] =>  0:11
CLOCK: [2021-02-08 Mon 11:45]--[2021-02-08 Mon 12:07] =>  0:22
CLOCK: [2021-10-03 Sun 18:50]--[2021-10-03 Sun 19:05] =>  0:15
CLOCK: [2021-04-05 Mon 21:50]--[2021-04-05 Mon 22:15] =>  0:25
:END:

** profiler
:PROPERTIES:
:ID:       82CFBDD5-12E8-46EC-ADF8-2769E59B5DD8
:END:
:LOGBOOK:
CLOCK: [2021-11-14 Sun 10:39]--[2021-11-14 Sun 10:56] =>  0:17
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature profiler
  :defer t)
#+end_src

** profiler-extras
:PROPERTIES:
:ID:       21CE8D7E-377F-49AD-A864-D7926F462D4E
:END:

/[[file:extras/profiler-extras.el][profiler-extras]] collects my extensions for =profiler=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package profiler-extras
  :bind
  (("A-H-p" . profiler-extras-profiler-toggle)
   :map profiler-report-mode-map
   ("<backtab>" . profiler-extras-profiler-report-toggle-entry-global)))
#+end_src

** so-long
:PROPERTIES:
:ID:       F738DFB0-AA9C-47B5-9D3B-DC22EF83D357
:END:

/[[https://savannah.nongnu.org/projects/so-long][so-long]] optimizes performance with minified code./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature so-long
  :custom
  (so-long-threshold 500000)

  :hook
  (find-file-hook . global-so-long-mode))
#+end_src

** misc.
:PROPERTIES:
:ID:       1EA302FA-D0A2-470C-82C2-47FCA4E04FAF
:END:

Partly borrowed from [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][Prot]].

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :custom
  (bidi-display-reordering nil)
  (bidi-inhibit-bpa t)
  (inhibit-compacting-font-caches t)
  (redisplay-skip-fontification-on-input t)
  ;; emacs-lsp.github.io/lsp-mode/page/performance/
  (read-process-output-max (expt 1024 2))
  (bidi-paragraph-direction 'left-to-right))
#+end_src

* secrets
:PROPERTIES:
:ID:       D412C998-40EE-4638-959A-C2530EC9F247
:END:
:LOGBOOK:
:END:

** plstore
:PROPERTIES:
:ID:       5257E611-7953-4898-B743-25803EC7D9B4
:END:

/plstore is a plist based data store providing search and partial encryption./

This feature is required by =org-gcal=. We create a new GPG key to use with =org-gcal= and add its public ID to =plstore-encrypt-to= , following [[https://github.com/kidd/org-gcal.el#note][these instructions]]. (This method is superior to using symmetric encryption because it does not prompt the user for authentication with every new Emacs session.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature plstore
  :after pass
  :config
  (add-to-list 'plstore-encrypt-to "A7C6A908CD1254A8B4051D3DCDBBB523C9627A26"))
#+end_src

** epg-config
:PROPERTIES:
:ID:       012F15A3-7717-4B09-9F43-74DA6F5F7C1A
:END:

/epg-config provides configuration for the Easy Privacy Guard library./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature epg-config
  :custom
  (epg-pinentry-mode 'loopback) ; use minibuffer for password entry
  (epg-gpg-program "/opt/homebrew/bin/gpg"))
#+end_src

** auth-source
:PROPERTIES:
:ID:       291F9998-9940-4249-A048-92B5F2A2895E
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 12:33]--[2021-05-29 Sat 13:02] =>  0:29
:END:

/auth-source supports authentication sources for Gnus and Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature auth-source
  :preface
  (eval-when-compile
    (defvar auth-sources))

  :custom
  (auth-source-debug nil) ; set to t for debugging
  (auth-source-do-cache nil) ; not sure why set to nil
  (auth-sources '(macos-keychain-internet macos-keychain-generic)))
#+end_src

** oauth2-auto
:PROPERTIES:
:ID:       C7B36982-D472-4248-8C61-B7EB0ED6ACF6
:END:

/[[https://github.com/telotortium/emacs-oauth2-auto][emacs-oauth2-auto]] supports authentication to an OAuth2 provider from within Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package oauth2-auto
  :ensure (:host github
                 :repo "telotortium/emacs-oauth2-auto"
                 :protocol ssh)
  :after org-gcal
  :custom
  (oauth2-auto-plstore (no-littering-expand-var-file-name "oauth2-auto.plist")))
#+end_src

** pass
:PROPERTIES:
:ID:       518D3C1F-AFD6-4B72-8980-CAD10BBAEDDE
:END:
:LOGBOOK:
CLOCK: [2022-06-03 Fri 16:18]--[2022-06-03 Fri 16:35] =>  0:17
CLOCK: [2022-06-03 Fri 16:38]--[2022-06-03 Fri 16:44] =>  0:06
CLOCK: [2021-07-20 Tue 09:33]--[2021-07-20 Tue 10:14] =>  0:41
CLOCK: [2021-05-29 Sat 15:44]--[2021-05-29 Sat 16:28] =>  0:44
CLOCK: [2021-05-26 Wed 17:46]--[2021-05-26 Wed 18:04] =>  0:18
CLOCK: [2021-05-14 Fri 14:55]--[2021-05-14 Fri 15:07] =>  0:12
CLOCK: [2021-04-12 Mon 13:12]--[2021-04-12 Mon 13:20] =>  0:08
CLOCK: [2021-04-11 Sun 14:36]--[2021-04-11 Sun 14:47] =>  0:11
CLOCK: [2021-04-11 Sun 12:14]--[2021-04-11 Sun 12:28] =>  0:14
CLOCK: [2021-04-11 Sun 12:01]--[2021-04-11 Sun 12:10] =>  0:09
:END:

/[[https://github.com/NicolasPetton/pass][pass]] is a major mode for [[https://en.wikipedia.org/wiki/Pass_(software)][pass]], the standard Unix password manager/

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pass
  :custom
  (pass-suppress-confirmations t)
  (pass-show-keybindings nil)

  :config
  (run-with-timer (* 5 60) t (lambda () (magit-extras-warn-if-repo-is-dirty paths-dir-dropbox-tlon-pass)))

  :bind
  (("A-H-o" . pass)
   :map pass-mode-map
   ("RET" . pass-edit)
   ("c" . pass-copy)
   ("D" . pass-kill)
   :map pass-view-mode-map
   ("s-p" . pass-view-toggle-password)
   ("H-q" . pass-quit)
   ("s-s" . server-edit)))
#+end_src

** pass-extras
:PROPERTIES:
:ID:       524FE3D7-EA5B-408E-A338-68E633528632
:END:

/[[file:extras/pass-extras.el][pass-extras]] collects my extensions for =pass=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package pass-extras
  :bind
  (:map pass-mode-map
        ("SPC" . pass-extras-open-at-point)
        ("e" . pass-extras-edit)
        ("G" . pass-extras-generate-password)
        ("I" . pass-extras-insert-generated-no-symbols)))
#+end_src

** password-store-otp
:PROPERTIES:
:ID:       761A0B71-DA6A-42A1-8137-F4C857F029F0
:END:

/[[https://github.com/volrath/password-store-otp.el][password-store-otp]] provides integration with the pass-otp extension for pass./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package password-store-otp
  :ensure (:version (lambda (_) "0.1.5"))  ; github.com/progfolio/elpaca/issues/229
  :after pass)
#+end_src

** auth-source-pass
:PROPERTIES:
:ID:       00772E1B-A97C-46B5-8DE9-77462AAE0189
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 15:10]--[2021-05-29 Sat 15:44] =>  0:34
CLOCK: [2021-05-29 Sat 13:52]--[2021-05-29 Sat 14:10] =>  0:18
CLOCK: [2021-05-26 Wed 18:56]--[2021-05-26 Wed 19:23] =>  0:27
:END:

/auth-source-pass integrates auth-source with password-store./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature auth-source-pass
  :demand t
  :after auth-source pass
  :config
  (auth-source-pass-enable)

  :hook
  (doom-modeline-before-github-fetch-notification-hook . auth-source-pass-enable))
#+end_src

** password-generator
:PROPERTIES:
:ID:       D1CAD413-7307-49C4-86BC-48EF397C083C
:END:

/[[https://github.com/vandrlexay/emacs-password-genarator][password-generator]] [sic] generates various types of passwords./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package password-generator
  :ensure (:host github
                 :repo "vandrlexay/emacs-password-genarator") ; sic
  :defer t)
#+end_src

* version control
:PROPERTIES:
:ID:       CBBAD256-2800-4E9C-9042-C033FF95FA58
:END:
:LOGBOOK:
:END:

** vc
:PROPERTIES:
:ID:       B9E38DFD-09DC-4DB2-B710-44DB6F00D9DC
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 18:13]--[2021-07-22 Thu 18:34] =>  0:21
:END:

/vc provides support for various version control systems./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature vc
  :defer t
  :custom
  (vc-handled-backends '(Git))
  (vc-follow-symlinks t) ; don't ask for confirmation when opening symlinked file
  (vc-make-backup-files nil)) ; do not backup version controlled files
#+end_src

** vc-extras
:PROPERTIES:
:ID:       A7254905-0FBE-4F8F-8D93-1A5D1FA95BB9
:END:

/[[file:extras/vc-extras.el][vc-extras]] collects my extensions for =vc=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package vc-extras
  :after vc
  :custom
  (vc-extras-split-repo t)

  :bind
  ("A-v" . vc-extras-menu))
#+end_src

** log-edit
:PROPERTIES:
:ID:       FABAB5ED-7883-4F95-B3A2-3EB8F07DD33F
:END:

/log-edit is a major mode for editing CVS commit messages./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature log-edit
  :defer t
  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'log-edit-comment-ring)))
#+end_src

** diff-mode
:PROPERTIES:
:ID:       33F1D5AA-3DA7-43EC-8ACD-0D8360445459
:END:

/diff-mode is a mode for viewing and editing context diffs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature diff-mode
  :bind
  (:map diff-mode-map
   ("M-o" . nil)))
#+end_src

** ediff
:PROPERTIES:
:ID:       987C9066-28ED-4B5A-944C-A90681182264
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ediff
  :custom
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)

  :config
  (defun ediff-toggle-word-mode ()
    "Toggle between linewise and wordwise comparisons."
    (interactive)
    (setq ediff-word-mode (not ediff-word-mode))
    (message "Word mode %s"
             (if ediff-word-mode "disabled" "enabled"))
    (ediff-update-diffs))

  :bind
  (("A-d" . ediff)))
#+end_src

** ediff-extras
:PROPERTIES:
:ID:       BFD82441-5547-45C5-AD36-E5DE9FDD4898
:END:

/[[file:extras/ediff-extras.el][ediff-extras]] collects my extensions for =ediff=./

** smerge
:PROPERTIES:
:ID:       FE85CC7E-E2A0-4494-8D1E-A64A4C40013E
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature smerge-mode
  :bind
  (:map smerge-mode-map
        ("s-n" . smerge-next)
        ("s-SPC" . smerge-next)
        ("s-p" . smerge-prev)
        ("s-l" . smerge-keep-lower)
        ("s-k" . smerge-keep-upper)
        ("s-a" . smerge-keep-all)
        ("s-b" . smerge-keep-base)
        ("s-c" . smerge-keep-current)))
#+end_src

** gh
:PROPERTIES:
:ID:       8FCB87B4-2396-4A9A-8638-AEA8A5818252
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gh
  :ensure (:version (lambda (_) "2.29"))
  :defer t) ; github.com/progfolio/elpaca/issues/229
#+end_src

** closql
:PROPERTIES:
:ID:       917EA2B7-565D-4BC9-94BF-2BE6F1D9B9BC
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package closql
  :ensure (:host github
                 :repo "magit/closql")
  :defer t)
#+end_src

** magit
:PROPERTIES:
:ID:       B662CE1B-3F94-486E-A3DE-052775035960
:END:
:LOGBOOK:
CLOCK: [2021-11-18 Thu 21:51]--[2021-11-18 Thu 21:52] =>  0:01
CLOCK: [2021-07-22 Thu 17:12]--[2021-07-22 Thu 17:20] =>  0:08
CLOCK: [2021-07-01 Thu 22:05]--[2021-07-01 Thu 22:55] =>  0:50
CLOCK: [2021-02-25 Thu 17:24]--[2021-02-25 Thu 17:45] =>  0:21
CLOCK: [2021-02-25 Thu 14:53]--[2021-02-25 Thu 15:00] =>  0:07
:END:

/[[https://github.com/magit/magit][magit]] is a complete text-based user interface to Git./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package magit
  :ensure (:host github
                 :repo "magit/magit"
                 :branch "main"
                 :build (:not elpaca--check-version))
  :custom
  (magit-commit-ask-to-stage 'stage)
  (magit-clone-set-remote.pushDefault t)
  (magit-diff-refine-hunk 'all) ; show word-granularity differences in all diff hunks

  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'magit-read-rev-history))

  (add-to-list 'magit-no-confirm 'stage-all-changes)

  :hook
  ((magit-status-mode-hook magit-diff-mode-hook) .
   (lambda ()
     "Disable line truncation in Magit buffers."
     (setq truncate-lines nil)))

  :bind
  (("A-g" . magit)
   ("A-M-g" . magit-clone)
   :map magit-log-mode-map
   ("k" . magit-section-backward-sibling)
   ("l" . magit-section-forward-sibling)
   :map magit-mode-map
   ("p" . magit-pull)
   ("." . magit-push)
   :map magit-diff-mode-map
   ("A-C-s-r" . magit-section-backward-sibling)
   ("A-C-s-f" . magit-section-forward-sibling)
   :map magit-hunk-section-map
   ("s-l" . magit-smerge-keep-lower)
   ("s-k" . magit-smerge-keep-upper)
   ("s-a" . magit-smerge-keep-all)
   ("s-b" . magit-smerge-keep-base)
   ("s-c" . magit-smerge-keep-current)
   :map magit-hunk-section-smerge-map
   ("s-l" . magit-smerge-keep-lower)
   ("s-k" . magit-smerge-keep-upper)
   ("s-a" . magit-smerge-keep-all)
   ("s-b" . magit-smerge-keep-base)
   ("s-c" . magit-smerge-keep-current)
   :map magit-status-mode-map
   ("s-l" . magit-smerge-keep-lower)
   ("s-k" . magit-smerge-keep-upper)
   ("s-a" . magit-smerge-keep-all)
   ("s-b" . magit-smerge-keep-base)
   ("s-c" . magit-smerge-keep-current)
   ("s-r" . tlon-commit-when-slug-at-point)
   ("s-u" . magit-remote-unshallow)
   ("A-C-s-r" . magit-section-backward-sibling)
   ("A-C-s-f" . magit-section-forward-sibling)
   :map magit-revision-mode-map
   ("A-C-s-r" . magit-section-backward-sibling)
   ("A-C-s-f" . magit-section-forward-sibling)))
#+end_src

- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- To read: [[https://emacsredux.com/blog/2020/12/11/super-keybindings-for-magit/][Super Keybindings for Magit | Emacs Redux]]

*** resources
:PROPERTIES:
:ID:       09A7E16B-377A-4BB7-AC3B-4D7A673E7CA8
:END:
- [[https://emacspeak.blogspot.com/2020/05/github-standard-fork-and-pull-request.html][EMACSPEAK The Complete Audio Desktop: GitHub Standard Fork And Pull-Request Workflow From Emacs]]
- https://tvraman.github.io/emacspeak/blog/github-quick-workflow.html
- [[https://prathamesh.tech/2019/06/21/creating-pull-requests-from-emacs/][Creating pull requests from emacs]]

** magit-extra
:PROPERTIES:
:ID:       DFB5D4F4-0BF8-4C1F-8C3C-1A3992387CBC
:END:


/[[file:extras/magit-extra.el][magit-extra]] collects my extensions for =magit=./

Note that this is called ~magit-extra~ (with no ‘s’ at the end) because Magit already provides a feature called ~magit-extras~.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package magit-extra
  :after magit
  :demand t
  :hook
  (git-commit-setup-hook . magit-extras-move-point-to-start)

  :bind
  ("s-p" . magit-extras-with-editor-finish-and-push))
#+end_src

** magit-todos
:PROPERTIES:
:ID:       63750AFE-71E9-4BFA-A127-F3FAA5BD5954
:END:

/[[https://github.com/alphapapa/magit-todos][magit-todos]] displays TODOs present in project files in the Magit status buffer./

[2024-09-25 Wed] Disabling until I fix/diagnose this issue:

#+begin_src
error in process sentinel: magit-todos--async-when-done: Process "magit-todos--scan-with-rg" failed with exit code 2.  Output:"rg: No files were searched, which means ripgrep probably applied a filter you didn't expect.
Running with --debug will show why files are being skipped.
#+end_src

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package magit-todos
  :ensure (:host github
                 :repo "alphapapa/magit-todos"
                 :build (:not elpaca--check-version))
  :disabled
  :after magit hl-todo
  :custom
  (magit-todos-branch-list nil)

  :config
  (magit-todos-mode))
#+end_src

** with-editor
:PROPERTIES:
:ID:       48431AA9-2ABE-403C-9E91-68066B24CB26
:END:

/[[https://github.com/magit/with-editor][with-editor]] allows the use of Emacsclient as the $EDITOR for external programs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package with-editor
  :bind (("s-c" . with-editor-finish)
         ("s-k" . with-editor-cancel)
         ("C-c C-c" . with-editor-finish)))
#+end_src

** ghub
:PROPERTIES:
:ID:       C557A862-9EC7-406C-98E1-C248F7D579F5
:END:

/[[https://github.com/magit/ghub][ghub]] provides basic support for using the APIs of various Git forges from Emacs packages./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ghub
  :ensure (:host github
                 :build (:not elpaca--check-version)
                 :repo "magit/ghub"
                 :branch "main")
  :defer t
  :config
  (require 'pass))
#+end_src

** forge
:PROPERTIES:
:ID:       F6F60AE4-9FEA-4179-922C-CC649BC752A4
:END:
:LOGBOOK:
CLOCK: [2023-04-19 Wed 17:59]--[2023-04-19 Wed 18:48] =>  0:49
CLOCK: [2022-06-25 Sat 15:55]--[2022-06-25 Sat 16:30] =>  0:35
CLOCK: [2021-12-21 Tue 20:20]--[2021-12-21 Tue 20:27] =>  0:07
CLOCK: [2021-07-19 Mon 16:11]--[2021-07-19 Mon 16:39] =>  0:28
CLOCK: [2021-07-19 Mon 14:22]--[2021-07-19 Mon 15:15] =>  0:53
CLOCK: [2021-04-15 Thu 13:37]--[2021-04-15 Thu 13:42] =>  0:05
:END:

/[[https://github.com/magit/forge][forge]] let's one work with git forges directly from Magit./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package forge
  :ensure (:host github
                 :repo "magit/forge"
                 :branch "main" ; github.com/progfolio/elpaca/issues/342
                 :build (:not elpaca--check-version))
  :after magit ghub emacsql auth-source-pass
  :init
  (with-eval-after-load 'magit-status
    (bind-keys :map 'magit-status-mode-map
               ("s-a" . forge-topic-set-assignees)
               ("s-d" . forge-delete-comment)
               ("s-e" . forge-edit-post)
               ("s-i" . forge-browse-issue)
               ("s-I" . forge-browse-issues)
               ("s-l" . forge-topic-set-labels)
               ("s-o" . forge-topic-status-set-done)
               ("s-p" . forge-create-post)
               ("s-r" . forge-create-post)
               ("s-t" . forge-topic-set-title)))
  (with-eval-after-load 'magit
    (bind-keys :map 'magit-mode-map
               ("n" . forge-dispatch)))
  :custom
  (forge-owned-accounts '(("benthamite")))
  (forge-topic-list-limit '(500 . -500)) ; show closed topics only via `forge-toggle-closed-visibility'
  ;; do not show inactive topics by default; keep other settings unchanged
  (forge-status-buffer-default-topic-filters
   (forge--topics-spec :type 'topic :active nil :state 'open :order 'newest))

  :config
  ;; why is this turned on by default!?
  (remove-hook 'forge-post-mode-hook 'turn-on-flyspell)

  ;; temporarily overwrite function until idiotic error message is removed
  (defun forge--ghub-massage-notification (data githost)
    (let-alist data
      (let* ((type (intern (downcase .subject.type)))
             (type (if (eq type 'pullrequest) 'pullreq type))
             (_ (unless (memq type '( discussion issue pullreq
                                      commit release checksuite)) ; Added checksuite
                  (message "Forge: Ignoring unknown notification type: %s" type))) ; Changed error to message
             (number-or-commit (and .subject.url
                                    (string-match "[^/]*\\'" .subject.url)
                                    (match-string 0 .subject.url)))
             (number (and (memq type '(discussion issue pullreq))
                          (string-to-number number-or-commit)))
             (repo   (forge-get-repository
                      (list githost
                            .repository.owner.login
                            .repository.name)
                      nil :insert!))
             (repoid (oref repo id))
             (owner  (oref repo owner))
             (name   (oref repo name))
             (id     (forge--object-id repoid (string-to-number .id)))
             (alias  (intern (concat "_" (string-replace "=" "_" id)))))
        (and number
             (list alias id
                   `((,alias repository)
                     [(name ,name)
                      (owner ,owner)]
                     ,@(cddr
                        (caddr
                         (ghub--graphql-prepare-query
                          ghub-fetch-repository
                          (pcase type
                            ('discussion `(repository
                                           discussions
                                           (discussion . ,number)))
                            ('issue      `(repository
                                           issues
                                           (issue . ,number)))
                            ('pullreq    `(repository
                                           pullRequest
                                           (pullRequest . ,number))))))))
                   repo type data)))))

  :hook
  (forge-issue-mode-hook . simple-extras-visual-line-mode-enhanced)

  :bind
  (:map forge-post-mode-map
        ("s-c" . forge-post-submit)
        ;; :map forge-issue-list-mode-map
        ;; ("n" . forge-dispatch)
        :map forge-issue-mode-map
        ("s-a" . forge-topic-set-assignees)
        ("s-d" . forge-delete-comment)
        ("s-e" . forge-edit-post)
        ("s-i" . forge-browse-issue)
        ("s-I" . forge-browse-issues)
        ("s-l" . forge-topic-set-labels)
        ("s-o" . forge-topic-status-set-done)
        ("s-p" . forge-create-post)
        ("s-r" . forge-create-post)
        ("s-t" . forge-topic-set-title)
        :map forge-notifications-mode-map
        ("s-a" . forge-topic-set-assignees)
        ("s-d" . forge-delete-comment)
        ("s-e" . forge-edit-post)
        ("s-i" . forge-browse-issue)
        ("s-I" . forge-browse-issues)
        ("s-l" . forge-topic-set-labels)
        ("s-o" . forge-topic-status-set-done)
        ("s-p" . forge-create-post)
        ("s-r" . forge-create-post)
        ("s-t" . forge-topic-set-title)
        :map forge-topic-mode-map
        ("s-a" . forge-topic-set-assignees)
        ("s-d" . forge-delete-comment)
        ("s-e" . forge-edit-post)
        ("s-i" . forge-browse-issue)
        ("s-I" . forge-browse-issues)
        ("s-l" . forge-topic-set-labels)
        ("s-o" . forge-topic-status-set-done)
        ("s-p" . forge-create-post)
        ("s-r" . forge-create-post)
        ("s-t" . forge-topic-set-title)))
#+end_src

** orgit
:PROPERTIES:
:ID:       92DF0F69-73D6-4234-B227-02D0DE120F46
:END:

/[[https://github.com/magit/orgit][orgit]] provides support for Org links to Magit buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package orgit
  :ensure (:build (:not elpaca--check-version))
  :defer t)
#+end_src

** orgit-forge
:PROPERTIES:
:ID:       8D2CFDBF-4DD1-412C-A9F0-0D9393156A11
:END:

/[[https://github.com/magit/orgit-forge][orgit-forge]] supports ~org-mode~ links to ~forge~ buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package orgit-forge
  :after org forge
  :ensure (:build (:not elpaca--check-version)))
#+end_src

** forge-search
:PROPERTIES:
:ID:       1E83FDA2-3529-4189-8F5D-6B3388A45AE4
:END:

/[[https://github.com/eatse21/forge-search.el/blob/master/forge-search.el][forge-search]] supports searching through issues and pull requests within ~forge~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package forge-search
  :ensure (:host github
                 :repo "benthamite/forge-search.el"
                 :branch "fix/forge-get-repository")
  :after forge
  :bind
  (:map forge-search-mode-map
        ("A-C-s-r" . magit-section-backward-sibling)
        ("A-C-s-f" . magit-section-forward-sibling)))
#+end_src

** forge-extras
:PROPERTIES:
:ID:       B74712E7-2A8C-4D17-8FD4-C854C88D3D72
:END:

/[[file:extras/forge-extras.el][forge-extras]] collects my extensions for =forge=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package forge-extras
  :after forge
  :demand t
  :init
  (with-eval-after-load 'magit-status
    (bind-keys :map 'magit-status-mode-map
               ("s-x" . forge-extras-state-set-dwim)))

  :custom
  (forge-extras-project-owner "tlon-team")
  (forge-extras-project-number 9)
  (forge-extras-project-node-id "PVT_kwDOBtGWf84A5jZf")
  (forge-extras-status-field-node-id "PVTSSF_lADOBtGWf84A5jZfzguVNY8")
  (forge-extras-estimate-field-node-id "PVTF_lADOBtGWf84A5jZfzguVNc0")
  (forge-extras-status-option-ids-alist
   '(("Doing" . "47fc9ee4")
     ("Next" . "8607328f")
     ("Later" . "13e22f63")
     ("Someday" . "4bf0f00e")
     ("Waiting" . "28097d1b")
     ("Done" . "98236657")))

  :config
  (advice-add 'orgit-store-link :override #'forge-extras-orgit-store-link)
  ;; hack: to mark the topic as read, we browse it in the background
  (advice-add 'forge-visit-this-topic :before #'forge-extras-sync-read-status)

  (run-with-idle-timer 30 t #'forge-extras-pull-notifications)

  :bind
  (:map forge-issue-mode-map
        ("A-C-s-d" . forge-previous-message)
        ("A-C-s-f" . forge-next-message)
        ("s-s" . forge-extras-set-project-status)
        ("s-w" . forge-extras-copy-message-at-point-as-kill))
  (:map forge-notifications-mode-map
        ("x" . forge-extras-browse-github-inbox)
        ("s-x" . forge-extras-state-set-dwim))
  (:map forge-topic-mode-map
        ("s-x" . forge-extras-state-set-dwim)))
#+end_src

** emacs-pr-review
:PROPERTIES:
:ID:       56FB9BF0-5E8A-4D4E-8D1A-DDD2AE2A8B4C
:END:

/[[https://github.com/blahgeek/emacs-pr-review][emacs-pr-review]] provides support for reviewing pull requests in Emacs./

See [[https://gitlab.com/magus/mes/-/blob/8615353ec007bd66209ee1ae3badddd26d3a3dc9/lisp/mes-dev-basics.el#L76][this config]] for ideas.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pr-review
  :after forge)
#+end_src

** git-auto-commit-mode
:PROPERTIES:
:ID:       FCB4DDAC-CD47-48CE-BA0F-96C0574C458A
:END:

/[[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]] allows for committing and pushing automatically after each save./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package git-auto-commit-mode
  :after recentf
  :config
  (setq-default gac-automatically-push-p nil)
  (setq-default gac-debounce-interval 30)
  (setq-default gac-silent-message-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+end_src

** emsg-blame
:PROPERTIES:
:ID:       CF62CF9F-66EC-4E1D-81C4-ECCB85AD5BCE
:END:

/[[https://github.com/ISouthRain/emsg-blame][emsg-blame]] displays git blame information in the echo area./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package emsg-blame
  :ensure (:host github
                 :repo "ISouthRain/emsg-blame")
  :custom
  (emsg-blame-display #'emsg-blame-display-message)
  (emsg-blame-idle-time 0.5)
  (emsg-blame-no-commit-message "")

  :config
  ;; this is now included in the readme: github.com/ISouthRain/emsg-blame/pull/1
  (defun emsg-blame-display-message ()
    "Display git blame message, right-aligned with Magit-style faces.
If another message is already being displayed, display both messages unless they
do not both fit in the echo area."
    (require 'magit-log)
    (let* ((message-log-max nil)
           (cur-msg (current-message))
           (blm-msg (format "%s %s %s "
                            emsg-blame--commit-summary
                            (propertize emsg-blame--commit-author 'face 'magit-log-author)
                            (propertize emsg-blame--commit-date 'face 'magit-log-date)))
           (available-width (- (frame-width) (length cur-msg) 6))
           (blm-msg-fits-p (lambda () (> available-width (length blm-msg))))
           (rev-blm-msg (if (< (length blm-msg) (frame-width))
                            (let ((padding (if (funcall blm-msg-fits-p)
                                               (- available-width (length blm-msg))
                                             (- (frame-width) (length blm-msg)))))
                              (concat (make-string padding ?\s) blm-msg))
                          blm-msg)))
      (if (funcall blm-msg-fits-p)
          (message (concat cur-msg rev-blm-msg))
        (message rev-blm-msg))))

  :hook
  (prog-mode-hook . emsg-blame-mode)
  (text-mode-hook . emsg-blame-mode))
#+end_src

* display
:PROPERTIES:
:ID:       DE6D2307-9EBD-4E0F-B873-003C9813CA27
:END:
:LOGBOOK:
CLOCK: [2022-07-05 Tue 10:10]--[2022-07-05 Tue 10:17] =>  0:07
CLOCK: [2021-05-25 Tue 18:26]--[2021-05-25 Tue 18:31] =>  0:05
CLOCK: [2021-05-04 Tue 19:02]--[2021-05-04 Tue 19:09] =>  0:07
CLOCK: [2021-04-03 Sat 16:26]--[2021-04-03 Sat 17:04] =>  0:38
CLOCK: [2021-03-28 Sun 19:21]--[2021-03-28 Sun 19:35] =>  0:14
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(setq-default line-spacing 2)
#+end_src

** fringe
:PROPERTIES:
:ID:       A0748A82-CE1C-4700-95E1-610B6CA7F8E0
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature fringe
  :config
  (setq-default fringe-indicator-alist
                '((truncation nil nil)
                  (continuation nil nil)
                  (overlay-arrow . right-triangle)
                  (up . up-arrow)
                  (down . down-arrow)
                  (top top-left-angle top-right-angle)
                  (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
                  (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
                  (empty-line . empty-line)
                  (unknown . question-mark))))
#+end_src

** faces
:PROPERTIES:
:ID:       168A61B0-4580-443D-B04F-78F08EFA0458
:END:
:LOGBOOK:
CLOCK: [2022-05-04 Wed 10:45]--[2022-05-04 Wed 11:00] =>  0:15
CLOCK: [2021-11-17 Wed 19:48]--[2021-11-17 Wed 19:57] =>  0:09
CLOCK: [2021-11-17 Wed 11:27]--[2021-11-17 Wed 11:38] =>  0:11
CLOCK: [2021-11-16 Tue 16:27]--[2021-11-16 Tue 17:55] =>  1:28
CLOCK: [2021-08-19 Thu 19:18]--[2021-08-19 Thu 19:31] =>  0:13
CLOCK: [2021-03-28 Sun 21:05]--[2021-03-28 Sun 21:21] =>  0:16
CLOCK: [2021-02-27 Sat 18:27]--[2021-02-27 Sat 18:32] =>  0:05
CLOCK: [2021-02-04 Thu 20:54]--[2021-02-04 Thu 20:59] =>  0:05
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature faces
  :config
  (setq ns-use-thin-smoothing t))
#+end_src

- [[https://out-of-cheese-error.netlify.app/spacemacs-config][An Annotated Spacemacs - For an org-mode workflow ·]]
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][- zzamboni.org | Beautifying Org Mode in Emacs]]

** faces-extras
:PROPERTIES:
:ID:       9478C42B-7864-4F53-BD17-5EBEC2A55DB8
:END:


/[[file:extras/faces-extras.el][faces-extras]] collects my extensions for =faces=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package faces-extras
  :demand t
  :config
  (faces-extras-set-and-store-face-attributes
   '((default :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
     (fixed-pitch :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-height)
     (variable-pitch :family faces-extras-variable-pitch-font :height faces-extras-variable-pitch-height)
     (window-divider :foreground (face-attribute 'mode-line-inactive :background))))

  :hook
  (init-post-init-hook . faces-extras-set-custom-face-attributes)

  :bind
  ("C-h C-f" . faces-extras-describe-face))
#+end_src

** org-modern
:PROPERTIES:
:ID:       FB673B28-FB6D-48EE-97B8-1E9C5D9F32FD
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:25]--[2023-04-30 Sun 11:40] =>  0:15
:END:

/[[https://github.com/minad/org-modern][org-modern]] prettifies org mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-modern
  :after org faces-extras
  :custom
  (org-modern-table nil) ; doesn’t work well with variable-pitch: github.com/minad/org-modern/issues/99
  (org-modern-statistics nil)
  (org-modern-star 'fold)
  (org-modern-fold-stars
   '(("▸" . "▾")
     ("▸" . "▾")
     ("▸" . "▾")
     ("▸" . "▾")
     ("▸" . "▾")))
  (org-modern-replace-stars '("◉" "◉" "◉" "◉" "◉"))
  (org-modern-list
   '((42 . "○")
     (43 . "○")
     (45 . "○")))

  :config
  (faces-extras-set-and-store-face-attributes
   '((org-modern-date-active :family faces-extras-fixed-pitch-font :height faces-extras-org-date-height)
     (org-modern-date-inactive :family faces-extras-fixed-pitch-font :height faces-extras-org-date-height)
     (org-modern-tag :family faces-extras-fixed-pitch-font :height faces-extras-org-tag-height)
     (org-modern-label :family faces-extras-fixed-pitch-font :height 0.8)))

  (global-org-modern-mode))
#+end_src

** org-modern-indent
:PROPERTIES:
:ID:       740E3E7F-BF38-484E-BBD6-BF9AEC978612
:END:

/[[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]] extends org-modern stylistic improvements to contexts involving indentation./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-modern-indent
  :ensure (:host github
                 :repo "jdtsmith/org-modern-indent")
  :after org-modern
  :hook org-mode-hook)
#+end_src

** org-tidy
:PROPERTIES:
:ID:       04545CB2-85AE-472E-BAB7-9013189598E7
:END:
:LOGBOOK:
CLOCK: [2023-11-05 Sun 13:34]--[2023-11-05 Sun 13:59] =>  0:25
:END:

/[[https://github.com/jxq0/org-tidy][org-tidy]] hides org-mode property drawers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-tidy
  :after org
  :custom
  (org-tidy-properties-inline-symbol "")
  (org-tidy-protect-overlay nil) ; github.com/jxq0/org-tidy/issues/11

  :hook org-mode-hook)
#+end_src

** org-appear
:PROPERTIES:
:ID:       9F84EE2C-F5E7-4935-912E-5D286B897C19
:END:

/[[https://github.com/awth13/org-appear][org-appear]] toggles the visibility of hidden org mode element parts upon entering and leaving those elements./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-appear
  :after org
  :hook org-mode-hook)
#+end_src

** face-remap
:PROPERTIES:
:ID:       A999E839-CB99-4BC3-BB40-962B17683EDE
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/face-remap.el][face-remap]] defines simple operations for face remapping./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature face-remap
  :after eww
  :hook
  ((elfeed-show-mode-hook
    telega-webpage-mode-hook
    eww-mode-hook
    mu4e-view-mode-hook
    outline-mode-hook) . variable-pitch-mode)

  :bind
  (:map eww-mode-map
        ("+" . text-scale-increase)
        ("-" . text-scale-decrease)))
#+end_src

** modus-themes
:PROPERTIES:
:ID:       95665A5E-A88C-4DCA-BDDD-84DC436A1E80
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 00:37]--[2023-02-25 Sat 01:15] =>  0:38
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 10:55] =>  0:13
CLOCK: [2023-02-17 Fri 10:42]--[2023-02-17 Fri 11:25] =>  0:43
CLOCK: [2021-11-18 Thu 18:12]--[2021-11-18 Thu 18:28] =>  0:16
CLOCK: [2021-05-13 Thu 18:36]--[2021-05-13 Thu 18:37] =>  0:01
CLOCK: [2021-05-11 Tue 07:36]--[2021-05-11 Tue 07:54] =>  0:18
:END:

/[[https://protesilaos.com/emacs/modus-themes][modus-themes]] are a pair of accessible white/dark themes for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package modus-themes
  :ensure (:host github
                 :repo "protesilaos/modus-themes")
  :after faces faces-extras simple-extras
  :demand t
  :custom
  (modus-themes-mixed-fonts t)

  :config
  (setopt modus-themes-common-palette-overrides
   `((fringe unspecified) ; hide the fringe
     (bg-prose-block-delimiter bg-inactive)
     (fg-prose-block-delimiter gray)
     ;; for the rest, use the predefined intense values
     ,@modus-themes-preset-overrides-intense))

  :hook
  (modus-themes-after-load-theme-hook . faces-extras-set-custom-face-attributes)
  (modus-themes-after-load-theme-hook . frame-extras-restore-window-divider)

  :bind
  ("A-u" . modus-themes-toggle))
#+end_src

** modus-themes-extras
:PROPERTIES:
:ID:       9EB47A74-CEFE-4929-B990-F88A57D57A1D
:END:


/[[file:extras/modus-themes-extras.el][modus-themes-extras]] collects my extensions for =modus-themes=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package modus-themes-extras
  :after modus-themes
  :demand t
  :config
  (init-override-code
   :modus-themes-load
   '((modus-themes-extras-load-theme-conditionally)))

  :hook
  (modus-themes-after-load-theme-hook . modus-themes-extras-highlight-parentheses)
  (modus-themes-after-load-theme-hook . modus-themes-extras-set-faces))
#+end_src

** highlight-parentheses
:PROPERTIES:
:ID:       2B0F192C-2147-4CF6-AE69-73C1D85FEB77
:END:
:LOGBOOK:
CLOCK: [2022-05-07 Sat 19:00]--[2022-05-07 Sat 19:38] =>  0:38
:END:

/[[https://sr.ht/~tsdh/highlight-parentheses.el/][highlight-parentheses]] dynamically highlights the parentheses surrounding point based on nesting-level using configurable lists of colors, background colors, and other properties./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package highlight-parentheses
  :custom
  (highlight-parentheses-delay 0)

  :config
  (global-highlight-parentheses-mode)

  :hook
  (minibuffer-setup-hook . highlight-parentheses-minibuffer-setup))
#+end_src

** spacious-padding
:PROPERTIES:
:ID:       7CEDA166-BA43-49E6-99EB-0F24766398F6
:END:

/[[https://git.sr.ht/~protesilaos/spacious-padding][spacious-padding]] increases the spacing of frames and windows./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package spacious-padding
  :ensure (:tag "0.3.0") ; using tagged version to avoid error on 2024-02-21
  :custom
  (spacious-padding-widths '())

  :config
  (spacious-padding-mode))
#+end_src

** emoji
:PROPERTIES:
:ID:       6B52C1E5-898C-48C6-AB4C-4BFDE8C5A0B5
:END:

/emoji provides commands for emoji insertion./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emoji
  :bind
  ("H-E" . emoji-search))
#+end_src

** color
:PROPERTIES:
:ID:       83EC4A72-3E64-403B-9196-339DD0EB202E
:END:

/color is a color manipulation library./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature color)
#+end_src

** color-extras
:PROPERTIES:
:ID:       0873C089-B832-4EB2-BAFF-2D3CF0268AE4
:END:

/[[file:extras/color-extras.el][color-extras]] collects my extensions for =color=./

Note that the loading of ~color~ cannot be deferred, since it is required by ~pulse~. So we defer-load this package.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package color-extras
  :after color
  :defer 10)
#+end_src

** rainbow-mode
:PROPERTIES:
:ID:       9FCB7FE9-D305-4658-922E-72C4D9F4C4A2
:END:

/[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] colorizes strings that match color names./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package rainbow-mode
  :after color-extras
  :custom
  (rainbow-ansi-colors nil)
  (rainbow-x-colors nil))
#+end_src

** ct
:PROPERTIES:
:ID:       7C288815-B02D-4386-888B-0FC350E90C1E
:END:


/[[https://github.com/neeasade/ct.el][ct]] is color library meant for making changes to individual colors in various color spaces./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ct
  :after color-extras)
#+end_src

** hsluv
:PROPERTIES:
:ID:       F35ACEE0-5AB8-4643-A3E2-A2E9ED7B9CB9
:END:


/[[https://github.com/hsluv/hsluv-emacs][hsluv]] is a HSLuv implementation for Emacs Lisp./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package hsluv
  :after color-extras)
#+end_src

** image
:PROPERTIES:
:ID:       E1A616FF-7D93-4AB4-AD44-44FB6550FD2E
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature image
  :after image-mode
  :init
  ;; Use imagemagick, if available.
  ;; djcbsoftware.nl/code/mu/mu4e/Viewing-images-inline.html
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  :bind
  (:map image-mode-map
        ("+" . image-increase-size)
        ("-" . image-decrease-size)))
#+end_src

** image-mode
:PROPERTIES:
:ID:       DE1E96EB-4F0B-4C8C-8827-C436B8EAB43F
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature image-mode
  :bind
  (:map image-mode-map
        ("c" . dired-extras-copy-image)))
#+end_src

** paren
:PROPERTIES:
:ID:       E39A1AC5-7BF7-4995-B116-BB6323C7605F
:END:


/[[https://github.com/emacs-mirror/emacs/blob/e7260d4eb3ed1bebcaa9e2b934f162d4bb42e413/lisp/paren.el#L4][paren]] highlights matching parens./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature paren
  :custom
  (show-paren-delay 0)

  :config
  (show-paren-mode))
#+end_src

** doom-modeline
:PROPERTIES:
:ID:       C3D90EBC-EB70-440E-9718-A2832FF9F077
:END:
:LOGBOOK:
CLOCK: [2023-04-28 Fri 13:05]--[2023-04-28 Fri 13:12] =>  0:07
CLOCK: [2023-03-27 Mon 21:53]--[2023-03-27 Mon 22:01] =>  0:08
CLOCK: [2021-06-02 Wed 21:16]--[2021-06-02 Wed 21:32] =>  0:16
CLOCK: [2021-06-02 Wed 18:04]--[2021-06-02 Wed 18:07] =>  0:03
CLOCK: [2021-05-23 Sun 12:38]--[2021-05-23 Sun 12:43] =>  0:05
CLOCK: [2021-04-03 Sat 17:09]--[2021-04-03 Sat 17:25] =>  0:16
:END:

/[[https://github.com/seagle0128/doom-modeline/][doom-modeline]] is a tidier and more aesthetically pleasing modeline./

I combine the modeline with the tab bar to display various types of information. Specifically, I use the modeline to display buffer-local information (such as the buffer major mode, line number, or word count), and the tab bar to display global information (such as the time and date, the weather, the computer’s battery status, and various notifications). This functionality is provided by a combination of the ==doom-modeline= package, the =tab-bar= feature, and my corresponding extensions (=doom-modeline-extras= and =tab-bar-extras=). In short, I move to the tab bar some of the elements that would normally be displayed in the modeline by (1) /enabling/ those elements via the relevant =doom-modeline= user options, (2) /hiding/ those elements via the =doom-modeline-def-modeline= macro, and (3) /adding/ equivalent elements to the tab bar via the =tab-bar-format= user option.

Here’s a screenshot illustrating the modeline and tab bar in action (click to enlarge):

[[file:etc/screenshot-config.png]]

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package doom-modeline
  :ensure (:build (:not elpaca--check-version))
  :demand t
  :custom
  (doom-modeline-time nil) ; we display time (and date) in the tab bar
  (doom-modeline-buffer-name t)
  (doom-modeline-buffer-file-name-style 'file-name) ; we display the full path in the header line via `breadcrumb'
  (doom-modeline-check-simple-format t)
  (doom-modeline-total-line-number t)
  (doom-modeline-position-column-line-format '(" %c %l"))
  (doom-modeline-enable-word-count t)
  (doom-modeline-indent-info nil)
  (doom-modeline-github t)
  (doom-modeline-github-interval 60)

  :config
  (dolist (cons  '((display-time-mode-hook . doom-modeline-override-time)
                   (doom-modeline-mode-hook . doom-modeline-override-time)))
    (remove-hook (car cons) (cdr cons))))
#+end_src

** doom-modeline-extras
:PROPERTIES:
:ID:       AA94A6D8-DD39-415C-9E34-5793F44B9FF9
:END:

/[[file:extras/doom-modeline-extras.el][doom-modeline-extras]] collects my extensions for =doom-modeline=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package doom-modeline-extras
  :after doom-modeline
  :demand t
  :config
  (doom-modeline-def-modeline 'main
    '(bar workspace-name parrot buffer-info modals matches follow remote-host buffer-position word-count selection-info org-roam-backlinks)
    '(tlon-split compilation objed-state misc-info persp-name grip irc mu4e gnus lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs check time))

  (doom-modeline-def-modeline 'vcs
    '(bar window-number modals matches buffer-info remote-host buffer-position parrot selection-info)
    '(compilation misc-info irc mu4e gnus minor-modes buffer-encoding major-mode process time))

  (doom-modeline-def-modeline 'dashboard
    '(bar window-number modals buffer-default-directory-simple remote-host)
    '(compilation misc-info irc mu4e gnus minor-modes input-method major-mode process time))

  (doom-modeline-def-modeline 'project
    '(bar window-number modals buffer-default-directory remote-host buffer-position)
    '(compilation misc-info irc mu4e gnus github minor-modes input-method major-mode process time))

  (doom-modeline-mode))
#+end_src

** tab-bar
:PROPERTIES:
:ID:       F8B7C324-C5CF-4DBD-A527-92101BDA70AB
:END:
:LOGBOOK:
CLOCK: [2023-03-30 Thu 22:12]--[2023-03-30 Thu 22:20] =>  0:08
:END:

/tab-bar displays a tab bar at the top of the frame, just below the tool bar./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature tab-bar
  :after faces-extras
  :custom
  (tab-bar-format '(tab-bar-align-right
                    tab-bar-format-global))
  (auto-resize-tab-bar nil)

  :config
  (setf mode-line-misc-info
        ;; When the tab-bar is active, don't show `global-mode-string'
        ;; in `mode-line-misc-info', because we now show that in the
        ;; tab-bar using `tab-bar-format-align-right' and
        ;; `tab-bar-format-global'.
        (remove '(global-mode-string ("" global-mode-string))
                mode-line-misc-info))

  :hook
  (init-post-init-hook
   . (lambda ()
       "Set and store the tab bar attributes, then activate the tab bar."
       (faces-extras-set-and-store-face-attributes
        '((tab-bar :background (face-background 'mode-line)
                   :box `(:line-width 6 :color ,(face-attribute 'mode-line :background) :style nil))))
       (tab-bar-mode))))
#+end_src

** tab-bar-extras
:PROPERTIES:
:ID:       97CCF169-9F3B-40A4-BB81-220DDE6DB1DB
:END:
:LOGBOOK:
CLOCK: [2023-11-26 Sun 09:51]--[2023-11-26 Sun 10:39] =>  0:48
:END:


/[[file:extras/tab-bar-extras.el][tab-bar-extras]] collects my extensions for =tab-bar=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package tab-bar-extras
  :config
  (setq tab-bar-extras-global-mode-string
        `(,tab-bar-extras-prefix-element
          ,tab-bar-extras-notification-status-element
          ;; ,tab-bar-extras-time-element
          ;; ,tab-bar-extras-separator-element
          ,tab-bar-extras-emacs-profile-element
          ;; ,tab-bar-extras-separator-element
          ;; ,tab-bar-extras-battery-element
          ,tab-bar-extras-telega-element
          ,tab-bar-extras-github-element
          ,tab-bar-extras-pomodoro-element
          ,tab-bar-extras-debug-element
          ,tab-bar-extras-separator-element ; we add a separator at the end because `wttr' appends itself after it
          ))

  :hook
  (init-post-init-hook
   . (lambda ()
       "Reset the tab shortly after startup to show all its elements correctly."
       (run-with-timer 1 nil #'tab-bar-extras-quick-reset))))
#+end_src

** breadcrumb
:PROPERTIES:
:ID:       483A0D4F-B273-449C-BCB0-E8703AC45FC5
:END:

/[[https://github.com/joaotavora/breadcrumb/][breadcrumb]] displays project information in the header line./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package breadcrumb
  :defer 3
  :custom
  (breadcrumb-project-max-length 0.5)
  (breadcrumb-project-crumb-separator "/")
  (breadcrumb-imenu-max-length 1.0)
  (breadcrumb-imenu-crumb-separator " > ")

  :config
  (breadcrumb-mode))
#+end_src

** battery
:PROPERTIES:
:ID:       6507FA19-D87D-41B9-AC04-598E87370416
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature battery
  :defer t
  :config
  (display-battery-mode))
#+end_src

** nerd-icons
:PROPERTIES:
:ID:       0C470436-3327-4B81-89DA-005449893FF4
:END:

/[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] is a library for [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs./

Note that the icons need to be installed via =nerd-icons-install-fonts=. If you want to install the icons with ~brew~ on macOS, run =brew tap homebrew/cask-fonts && brew install --cask font-symbols-only-nerd-font=.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package nerd-icons
  :defer t)
#+end_src

** menu-bar
:PROPERTIES:
:ID:       08F1FCC3-7287-43B6-B455-C2D4377848E7
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature menu-bar
  :config
  (menu-bar-mode -1))
#+end_src

** tool-bar
:PROPERTIES:
:ID:       EBE7677A-4C70-4312-816A-E9F8E5999078
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature tool-bar
  :config
  (tool-bar-mode -1))
#+end_src

** scroll-bar
:PROPERTIES:
:ID:       0AE186DB-0FC3-4B1B-B38E-7597B97A8DBA
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature scroll-bar
  :config
  (scroll-bar-mode -1))
#+end_src

** pixel-scroll
:PROPERTIES:
:ID:       167D3771-8128-4601-A9FE-F22B4D62CDA5
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/pixel-scroll.el][pixel-scroll]] supports smooth scrolling./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature pixel-scroll
  :defer 5
  :config
  (pixel-scroll-precision-mode))
#+end_src

** delsel
:PROPERTIES:
:ID:       6473F2BF-059F-464B-859E-B8DA91B81DE2
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/delsel.el][delsel]] deletes the selection when the user start typing./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature delsel
  :config
  (delete-selection-mode))
#+end_src

** hl-line
:PROPERTIES:
:ID:       EBCFE2FC-27B4-4C30-9D2A-A841B34271F7
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature hl-line
  :hook
  (dired-mode-hook . hl-line-mode)
  (ledger-reconcile-mode-hook . hl-line-mode))
#+end_src

** lin
:PROPERTIES:
:ID:       FA8149A2-9984-4C39-AA81-120317615E86
:END:
:LOGBOOK:
CLOCK: [2022-09-12 Mon 16:21]--[2022-09-12 Mon 16:30] =>  0:09
:END:

/[[https://protesilaos.com/codelog/2022-09-08-lin-1-0-0/][lin]] is a stylistic enhancement for Emacs’ built-in =hl-line-mode=. It remaps the =hl-line= face (or equivalent) buffer-locally to a style optimal for major modes where line selection is the primary mode of interaction./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package lin
  :custom
  (lin-face 'lin-blue)
  (lin-mode-hooks
   '(dired-mode-hook
     elfeed-search-mode-hook
     git-rebase-mode-hook
     grep-mode-hook
     ibuffer-mode-hook
     ilist-mode-hook
     ledger-report-mode-hook
     log-view-mode-hook
     magit-log-mode-hook
     mu4e-headers-mode
     occur-mode-hook
     org-agenda-mode-hook
     pdf-outline-buffer-mode-hook
     proced-mode-hook
     tabulated-list-mode-hook))

  :hook
  (init-post-init-hook . lin-global-mode))
#+end_src

** jit-lock
:PROPERTIES:
:ID:       66598B06-4BB1-4E7C-AE36-7CE81E4CBF5A
:END:


/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/jit-lock.el][jit-lock]] provides just-in-time fontification./

I have [[https://emacs.stackexchange.com/questions/72417/face-properties-fail-to-apply-to-parts-of-org-mode-buffer/72439#72439][noticed]] that Emacs will sometimes fail to fontify parts of a buffer. This problem is solved, in my experience, by increasing the value of the user option ~jit-lock-chunk-size~. Its docstring says that “The optimum value is a little over the typical number of buffer characters which fit in a typical window”, so we set its value dynamically by multiplying the number of lines per window by the number of characters per line, doubling that for safety.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature jit-lock
  :defer 10
  :custom
  (jit-lock-chunk-size
        (* (window-max-chars-per-line) (window-body-height) 2)))
#+end_src

* text movement
:PROPERTIES:
:ID:       1E8F4417-5D5F-4406-BB70-AA272F714EF2
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 09:27]--[2022-07-17 Sun 09:47] =>  0:20
CLOCK: [2022-07-11 Mon 13:34]--[2022-07-11 Mon 14:41] =>  1:07
CLOCK: [2022-07-11 Mon 12:37]--[2022-07-11 Mon 12:43] =>  0:06
CLOCK: [2021-05-22 Sat 17:22]--[2021-05-22 Sat 17:35] =>  0:13
:END:

** words
:PROPERTIES:
:ID:       3493B00B-C36E-406F-B681-F145FD1684B2
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :bind
  (("A-C-s-p" . forward-word)
   ("A-C-s-u" . backward-word)))
#+end_src

** lines
:PROPERTIES:
:ID:       73DC1518-87FD-48D7-9EE5-C863126905AD
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :commands next-line previous-line
  :init
  (with-eval-after-load 'em-hist
    (bind-keys :map eshell-hist-mode-map
               ("<up>" . previous-line)
               ("<down>" . next-line)))
  (with-eval-after-load 'cus-edit
    (bind-keys :map custom-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'ebib
    (bind-keys :map ebib-entry-mode-map
               ("k" . previous-line)
               ("l" . next-line))
    (bind-keys :map ebib-index-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'elfeed
    (bind-keys :map elfeed-show-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'elisp-refs
    (bind-keys :map elisp-refs-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'eww
    (bind-keys :map eww-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'forge-notify
    (bind-keys :map forge-notifications-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'help
    (bind-keys :map help-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'helpful
    (bind-keys :map helpful-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'info
    (bind-keys :map Info-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'ledger-reconcile
    (bind-keys :map ledger-reconcile-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'Man
    (bind-keys :map Man-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'mu4e
    (bind-keys :map mu4e-view-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'org-lint
    (bind-keys :map org-lint--report-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'osa-chrome
    (bind-keys :map osa-chrome-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'pass
    (bind-keys :map pass-mode-map
               ("k" . previous-line)
               ("l" . next-line)))
  (with-eval-after-load 'simple
    (bind-keys :map special-mode-map
               ("k" . previous-line)
               ("l" . next-line)))

  :bind
  (("A-C-s-m" . move-beginning-of-line)
   ("A-C-s-/" . move-end-of-line)))
#+end_src

** sentences
:PROPERTIES:
:ID:       9BCDE791-E716-4CFE-AED3-4E4E4874DDDE
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :bind
  (("A-C-s-i" . backward-sentence)
   ("A-C-s-o" . forward-sentence)))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       E10CAF75-4C0C-4910-856F-39707E30A565
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :bind
  (("A-C-s-," . backward-paragraph)
   ("A-C-s-." . forward-paragraph)))
#+end_src

** sexps
:PROPERTIES:
:ID:       DF16B7CC-E0CF-4062-A0C2-93CBE83F619C
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :bind
  (("A-C-s-e" . backward-sexp)
   ("A-H-M-s-d" . forward-sexp) ; nonstandard binding because otherwise intercepted by OSX
   ))
#+end_src

** defuns
:PROPERTIES:
:ID:       868B32C0-52FC-4131-9191-DD43BEAABCEA
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :bind
  (("A-C-s-w" . beginning-of-defun)
   ("A-C-s-s" . end-of-defun)))
#+end_src

** buffers
:PROPERTIES:
:ID:       E71DE3A8-E941-4864-8224-2326C22E3AEB
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :bind
  (("A-C-s-SPC" . beginning-of-buffer)
   ("A-C-s-<tab>" . end-of-buffer)))
#+end_src

* text manipulation
:PROPERTIES:
:ID:       179BB021-8B2A-4BF0-B3AA-43AF5A212D4B
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 12:53]--[2021-09-29 Wed 13:16] =>  0:23
CLOCK: [2021-09-29 Wed 12:22]--[2021-09-29 Wed 12:49] =>  0:27
CLOCK: [2021-07-13 Tue 08:44]--[2021-07-13 Tue 09:00] =>  0:16
CLOCK: [2021-06-15 Tue 21:35]--[2021-06-15 Tue 21:52] =>  0:17
CLOCK: [2021-06-08 Tue 21:15]--[2021-06-08 Tue 21:44] =>  0:29
CLOCK: [2021-06-01 Tue 12:34]--[2021-06-01 Tue 12:43] =>  0:09
CLOCK: [2021-05-29 Sat 21:04]--[2021-05-29 Sat 21:12] =>  0:08
CLOCK: [2021-05-29 Sat 19:52]--[2021-05-29 Sat 20:05] =>  0:13
CLOCK: [2021-04-03 Sat 18:55]--[2021-04-03 Sat 19:01] =>  0:06
CLOCK: [2021-04-03 Sat 18:54]--[2021-04-03 Sat 18:55] =>  0:01
CLOCK: [2021-03-22 Mon 20:56]--[2021-03-22 Mon 21:16] =>  0:20
:END:

** simple
:PROPERTIES:
:ID:       E2461097-8125-471E-A987-139F0D3EBEAA
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :custom
  (kill-ring-max 99999)
  (save-interprogram-paste-before-kill t) ; add system clipboard to kill ring
  (auto-save-interval 5)

  :bind
  (("A-H-M-d" . transpose-chars)
   ("A-H-M-e" . transpose-sentences)
   ("A-H-M-f" . transpose-sexps)
   ("A-H-M-r" . transpose-words)
   ("A-H-M-v" . transpose-lines)
   ("C-k" . nil)
   ("C-<delete>" . nil)
   ("C-H-M-=" . overwrite-mode)
   ("C-H-M-a" . backward-kill-sexp)
   ("C-H-M-d" . delete-forward-char)
   ("C-H-M-e" . kill-sentence)
   ("C-H-M-f" . kill-sexp)
   ("C-H-M-f" . zap-to-char)
   ("C-H-M-g" . append-next-kill)
   ("C-H-M-q" . backward-kill-word)
   ("C-H-M-r" . kill-word)
   ("C-H-M-s" . delete-backward-char)
   ("M-SPC" . cycle-spacing)
   ("C-H-M-v" . kill-line)
   ("C-H-M-w" . backward-kill-sentence)
   ("C-H-M-z" . crux-kill-line-backwards)
   ("C-M-<backspace>" . nil)
   ("C-M-k" . nil)
   ("H-e" . shell-command)
   ("H-v" . yank)
   ("M-DEL" . nil)
   ("s-C" . nil)))
#+end_src

** simple-extras
:PROPERTIES:
:ID:       791A7EFE-DE33-4E5D-A99B-22CA63C31ACA
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:47]--[2022-07-15 Fri 13:48] =>  0:01
CLOCK: [2021-06-05 Sat 18:28]--[2021-06-05 Sat 19:09] =>  0:41
CLOCK: [2021-04-21 Wed 21:25]--[2021-04-21 Wed 21:39] =>  0:14
CLOCK: [2023-02-20 Mon 13:44]--[2023-02-20 Mon 13:48] =>  0:04
CLOCK: [2021-06-05 Sat 13:03]--[2021-06-05 Sat 13:07] =>  0:04
CLOCK: [2021-06-05 Sat 11:51]--[2021-06-05 Sat 11:59] =>  0:08
CLOCK: [2021-05-29 Sat 21:12]--[2021-05-29 Sat 21:28] =>  0:16
CLOCK: [2021-06-08 Tue 19:12]--[2021-06-08 Tue 19:53] =>  0:41
CLOCK: [2021-06-05 Sat 11:59]--[2021-06-05 Sat 12:40] =>  0:41
CLOCK: [2021-06-01 Tue 12:43]--[2021-06-01 Tue 13:10] =>  0:27
CLOCK: [2021-05-31 Mon 20:46]--[2021-05-31 Mon 20:53] =>  0:07
CLOCK: [2021-07-31 Sat 22:34]--[2021-07-31 Sat 22:56] =>  0:22
CLOCK: [2021-05-29 Sat 21:28]--[2021-05-29 Sat 22:17] =>  0:49
CLOCK: [2023-02-20 Mon 13:48]--[2023-02-20 Mon 13:52] =>  0:04
CLOCK: [2022-06-21 Tue 15:31]--[2022-06-21 Tue 15:35] =>  0:04
CLOCK: [2021-06-05 Sat 13:14]--[2021-06-05 Sat 13:20] =>  0:06
CLOCK: [2021-05-31 Mon 20:53]--[2021-05-31 Mon 21:21] =>  0:28
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
CLOCK: [2021-05-30 Sun 11:16]--[2021-05-30 Sun 12:16] =>  1:00
CLOCK: [2021-05-29 Sat 19:02]--[2021-05-29 Sat 19:52] =>  0:50
:END:


/[[file:extras/simple-extras.el][simple-extras]] collects my extensions for =simple=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package simple-extras
  :demand t
  :bind
  (("A-C-H-a" . simple-extras-copy-whole-sexp)
   ("A-C-H-f" . simple-extras-delete-whole-sexp)
   ("A-C-H-M-S-s-a" . simple-extras-backward-delete-sexp)
   ("A-C-H-M-S-s-a" . simple-extras-backward-zap-delete-to-char)
   ("A-C-H-M-S-s-e" . simple-extras-delete-sentence)
   ("A-C-H-M-S-s-f" . simple-extras-delete-sexp)
   ("A-C-H-M-S-s-f" . simple-extras-zap-delete-to-char)
   ("A-C-H-M-S-s-q" . simple-extras-backward-delete-word)
   ("A-C-H-M-S-s-r" . simple-extras-delete-word)
   ("A-C-H-M-S-s-v" . simple-extras-delete-line)
   ("A-C-H-M-S-s-w" . simple-extras-backward-delete-sentence)
   ("A-C-H-M-S-s-z" . simple-extras-backward-delete-line)
   ("A-H-c" . simple-extras-count-words-dwim)
   ("A-H-C-e" . simple-extras-delete-whole-sentence)
   ("A-H-C-i" . simple-extras-kill-whole-sentence)
   ("A-H-C-m" . simple-extras-kill-whole-line)
   ("A-H-C-r" . simple-extras-delete-whole-word)
   ("A-H-C-u" . simple-extras-kill-whole-word)
   ("A-H-C-v" . simple-extras-delete-whole-line)
   ("A-H-C-w" . simple-extras-copy-whole-sentence)
   ("A-H-C-z" . simple-extras-copy-whole-line)
   ("A-H-M-a" . simple-extras-transpose-sexps-backward)
   ("A-H-M-q" . simple-extras-transpose-words-backward)
   ("A-H-M-s" . simple-extras-transpose-chars-backward)
   ("A-H-M-s-9" . simple-extras-copy-whole-word) ; `.-q'
   ("A-H-M-w" . simple-extras-transpose-sentences-backward)
   ("A-H-M-z" . simple-extras-transpose-lines-backward)
   ("A-M-f" . simple-extras-fill-or-unfill-paragraph)
   ("C-g" . simple-extras-keyboard-quit-dwim)
   ("C-H-M-a" . simple-extras-backward-zap-to-char)
   ("C-H-M-b" . simple-extras-strip-thing-at-point)
   ("C-H-M-s-A-a" . simple-extras-backward-copy-sexp)
   ("C-H-M-s-A-a" . simple-extras-backward-zap-copy-to-char)
   ("C-H-M-s-A-e" . simple-extras-copy-sentence)
   ("C-H-M-s-A-f" . simple-extras-copy-sexp)
   ("C-H-M-s-A-f" . simple-extras-zap-copy-to-char)
   ("C-H-M-s-A-q" . simple-extras-backward-copy-word)
   ("C-H-M-s-A-r" . simple-extras-copy-word)
   ("C-H-M-s-A-v" . simple-extras-copy-line)
   ("C-H-M-s-A-w" . simple-extras-backward-copy-sentence)
   ("C-H-M-s-A-z" . simple-extras-backward-copy-line)
   ("C-v" . simple-extras-paste-no-properties)
   ("C-w" . simple-extras-narrow-or-widen-dwim)
   ("H-A-v" . simple-extras-yank-and-pop)
   ("H-c" . simple-extras-smart-copy-region)
   ("H-M"  . simple-extras-exchange-point-and-mark)
   ("H-X" . simple-extras-smart-delete-region)
   ("H-x" . simple-extras-smart-kill-region)
   ("M-A-i" . simple-extras-visual-line-mode-enhanced)
   ("M-i" . simple-extras-indent-dwim)
   ("M-q" . simple-extras-keyboard-quit-dwim)
   ("M-v" . simple-extras-visible-mode-enhanced)
   :map isearch-mode-map
   ("C-w" . simple-extras-narrow-or-widen-dwim)))
#+end_src

** paragraphs
:PROPERTIES:
:ID:       2B3DDC12-D660-47EF-BA22-8B1419A5F5D2
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 13:07]--[2021-06-05 Sat 13:10] =>  0:03
CLOCK: [2021-05-29 Sat 22:17]--[2021-05-29 Sat 23:00] =>  0:43
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature emacs
  :demand t
  :commands kill-paragraph transpose-paragraphs backward-kill-paragraph
  :custom
  (sentence-end-double-space nil)

  :init
  (with-eval-after-load 'text-mode
    (bind-keys :map text-mode-map
               ("C-H-M-c" . kill-paragraph)
               ("C-H-M-x" . backward-kill-paragraph)
               ("A-C-H-M-S-s-c" . simple-extras-delete-paragraph)
               ("A-C-H-M-S-s-x" . simple-extras-backward-delete-paragraph)
               ("C-H-M-s-A-c" . simple-extras-copy-paragraph)
               ("C-H-M-s-A-x" . simple-extras-backward-copy-paragraph)
               ("A-H-C-c" . simple-extras-delete-whole-paragraph)
               ("A-H-C-x" . simple-extras-copy-whole-paragraph)
               ("A-H-C-," . simple-extras-kill-whole-paragraph)
               ("A-H-M-c" . transpose-paragraphs)
               ("A-H-M-x" . simple-extras-transpose-paragraphs-backward)))
  (with-eval-after-load 'org
    (bind-keys :map org-mode-map
               ("C-H-M-c" . kill-paragraph)
               ("C-H-M-x" . backward-kill-paragraph)
               ("A-C-H-M-S-s-c" . simple-extras-delete-paragraph)
               ("A-C-H-M-S-s-x" . simple-extras-backward-delete-paragraph)
               ("C-H-M-s-A-c" . simple-extras-copy-paragraph)
               ("C-H-M-s-A-x" . simple-extras-backward-copy-paragraph)
               ("A-H-C-c" . simple-extras-delete-whole-paragraph)
               ("A-H-C-x" . simple-extras-copy-whole-paragraph)
               ("A-H-C-," . simple-extras-kill-whole-paragraph)
               ("A-H-M-c" . transpose-paragraphs)
               ("A-H-M-x" . simple-extras-transpose-paragraphs-backward)))
  (with-eval-after-load 'outline
    (bind-keys :map outline-mode-map
               ("C-H-M-c" . kill-paragraph)
               ("C-H-M-x" . backward-kill-paragraph)
               ("A-C-H-M-S-s-c" . simple-extras-delete-paragraph)
               ("A-C-H-M-S-s-x" . simple-extras-backward-delete-paragraph)
               ("C-H-M-s-A-c" . simple-extras-copy-paragraph)
               ("C-H-M-s-A-x" . simple-extras-backward-copy-paragraph)
               ("A-H-C-c" . simple-extras-delete-whole-paragraph)
               ("A-H-C-x" . simple-extras-copy-whole-paragraph)
               ("A-H-C-," . simple-extras-kill-whole-paragraph)
               ("A-H-M-c" . transpose-paragraphs)
               ("A-H-M-x" . simple-extras-transpose-paragraphs-backward)))
  (with-eval-after-load 'telega
    (bind-keys :map telega-chat-mode-map
               ("C-H-M-c" . kill-paragraph)
               ("C-H-M-x" . backward-kill-paragraph)
               ("A-C-H-M-S-s-c" . simple-extras-delete-paragraph)
               ("A-C-H-M-S-s-x" . simple-extras-backward-delete-paragraph)
               ("C-H-M-s-A-c" . simple-extras-copy-paragraph)
               ("C-H-M-s-A-x" . simple-extras-backward-copy-paragraph)
               ("A-H-C-c" . simple-extras-delete-whole-paragraph)
               ("A-H-C-x" . simple-extras-copy-whole-paragraph)
               ("A-H-C-," . simple-extras-kill-whole-paragraph)
               ("A-H-M-c" . transpose-paragraphs)
               ("A-H-M-x" . simple-extras-transpose-paragraphs-backward))))
#+end_src

* editing
:PROPERTIES:
:ID:       D06BE38F-DFC1-47DC-8F2C-FE2F1A437227
:END:

** simple
:PROPERTIES:
:ID:       D3A1830F-6A23-4DD3-99D3-2E582B79EA35
:END:
:LOGBOOK:
CLOCK: [2021-09-29 Wed 08:57]--[2023-11-16 Thu 19:08] => 18683:11
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :custom
  (shift-select-mode nil) ; Shift keys do not activate the mark momentarily.
  ;; hide commands in M-x which do not apply to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p)
  (eval-expression-print-level nil)
  (eval-expression-print-length nil)
  (print-level nil)
  (print-length nil)
  (truncate-partial-width-windows nil)
  (tab-always-indent 'complete)

  :config
  (setq-default fill-column 80)

  :init
  (column-number-mode)

  :bind
  (("C-A-e" . eval-expression)
   ("C-e" . eval-last-sexp)
   ("H-C" . kill-ring-save)
   ("H-m" . set-mark-command)
   ("H-Z" . undo-redo)
   ("M-o" . downcase-dwim)
   ("M-u" . capitalize-dwim)
   ("A-M-u" . upcase-dwim)
   ("M-w" . count-words-region)
   ("H-z" . undo-only)))
#+end_src

** rect
:PROPERTIES:
:ID:       CAA53E10-D4A2-41F4-8B5F-77649D125E54
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature rect
  :bind ("C-x r w" . copy-rectangle-as-kill))
#+end_src

** repeat
:PROPERTIES:
:ID:       000730A4-2F70-4842-BD3E-2B843875D6EB
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature repeat
  :bind
  (("M-r" . repeat)
   ("A-M-r" . repeat-complex-command)))
#+end_src

** view
:PROPERTIES:
:ID:       796E696E-E797-4EDF-B4AC-2436507A1EFC
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature view
  :bind
  ("M-A-v" . view-mode))
#+end_src

** sort
:PROPERTIES:
:ID:       64011AE8-B6DF-413B-A8CD-EF4E133272BD
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature sort
  :custom
  (sort-fold-case t)

  :bind
  ("C-t" . sort-lines))
#+end_src

** vundo
:PROPERTIES:
:ID:       616AD0A8-0098-4147-927E-E2A47B18A65E
:END:

/[[https://github.com/casouri/vundo][vundo]] displays the undo history as a tree./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package vundo
  :custom
  (undo-limit (* 100 1000 1000))
  (undo-strong-limit undo-limit)
  (undo-outer-limit undo-limit)

  :bind
  (("A-z" . vundo)
   :map vundo-mode-map
   ("j" . vundo-backward)
   (";" . vundo-forward)
   ("k" . vundo-previous)
   ("l" . vundo-next)))
#+end_src

** outline
:PROPERTIES:
:ID:       286464A9-EB12-4351-A980-D9D837BDEABB
:END:
:LOGBOOK:
CLOCK: [2021-06-05 Sat 11:33]--[2021-06-05 Sat 11:49] =>  0:16
CLOCK: [2021-05-31 Mon 21:21]--[2021-05-31 Mon 21:27] =>  0:06
CLOCK: [2021-04-02 Fri 16:48]--[2021-04-02 Fri 16:59] =>  0:11
CLOCK: [2021-03-28 Sun 08:40]--[2021-03-28 Sun 10:35] =>  1:55
CLOCK: [2021-03-27 Sat 18:01]--[2021-03-27 Sat 19:53] =>  1:52
CLOCK: [2021-06-06 Sun 13:00]--[2021-06-06 Sun 13:19] =>  0:19
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature outline
  :hook
  (prog-mode-hook . outline-minor-mode)

  :bind
  (:map outline-mode-map
        ("TAB" . outline-cycle)
        ("<backtab>" . outline-cycle-buffer)
        ("A-C-s-r" . outline-previous-heading)
        ("A-C-s-f" . outline-next-heading)
        ("C-H-M-s-a" . outline-extras-promote-heading)
        ("C-H-M-s-s" . outline-move-subtree-up)
        ("C-H-M-s-d" . outline-move-subtree-down)
        ("C-H-M-s-f" . outline-extras-demote-heading)
        ("C-H-M-s-q" . outline-promote)
        ("C-H-M-s-r" . outline-demote)
        :map outline-minor-mode-map
        ("TAB" . outline-cycle)
        ("<backtab>" . outline-cycle-buffer)
        ("A-C-s-r" . outline-previous-heading)
        ("A-C-s-f" . outline-next-heading)
        ("C-H-M-s-a" . outline-extras-promote-heading)
        ("C-H-M-s-s" . outline-move-subtree-up)
        ("C-H-M-s-d" . outline-move-subtree-down)
        ("C-H-M-s-f" . outline-extras-demote-heading)
        ("C-H-M-s-q" . outline-promote)
        ("C-H-M-s-r" . outline-demote)))
#+end_src

** outline-extras
:PROPERTIES:
:ID:       8BC3FF58-62AD-43E9-87A0-B886F20B428A
:END:


/[[file:extras/outline-extras.el][outline-extras]] collects my extensions for =outline=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package outline-extras
  :after outline)
#+end_src

** outli
:PROPERTIES:
:ID:       FEACA323-B5F2-4DBB-890C-41EA39E6794B
:END:
:LOGBOOK:
CLOCK: [2023-09-23 Sat 13:07]--[2023-09-23 Sat 13:36] =>  0:29
:END:

/[[https://github.com/jdtsmith/outli][outli]] is a simple comment-based outliner for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package outli
  :ensure (:host github
                 :repo "jdtsmith/outli")
  :after outline
  :custom
  (outli-speed-commands
   '(("Outline navigation")
     ("k" . outline-previous-visible-heading)
     ("." . outline-forward-same-level)
     ("," . outline-backward-same-level)
     ("l" . outline-next-visible-heading)
     ("m" . outline-up-heading)
     ("j" . consult-imenu)
     ("Outline structure editing")
     ("q" . outline-promote)
     ("a" . outline-extras-promote-heading)
     ("d" . outline-move-subtree-down)
     ("s" . outline-move-subtree-up)
     ("f" . outline-extras-demote-heading)
     ("r" . outline-demote)
     ("Outline visibility")
     ("<tab>" . outline-cycle)
     ("C" . outline-cycle-buffer)
     ("w" . outli-toggle-narrow-to-subtree)
     ("Regular editing")
     ("z" . undo-only)
     ("v" . yank)
     ("Other")
     ("?" . outli-speed-command-help)))

  :hook emacs-lisp-mode-hook)
#+end_src

** abbrev
:PROPERTIES:
:ID:       2D69896F-CF17-4D0C-BEFE-E7C473FB1C2B
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature abbrev
  :custom
  (save-abbrevs 'silently)
  (abbrev-file-name (file-name-concat paths-dir-abbrev "abbrev_defs"))

  :config
  (setq-default abbrev-mode t)
  ;; do not look up abbrevs with case folding; e.g. `EA' will not expand an `ea' abbrev
  (abbrev-table-put global-abbrev-table :case-fixed t)
  (abbrev-table-put text-mode-abbrev-table :case-fixed t))
#+end_src

** abbrev-extras
:PROPERTIES:
:ID:       50BEF838-0ECD-42E1-9B26-A17FB4E44EA3
:END:

/[[file:extras/abbrev-extras.el][abbrev-extras]] collects my extensions for =abbrev=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package abbrev-extras
  :after abbrev)
#+end_src

** yasnippet
:PROPERTIES:
:ID:       6405B8E7-6612-4D71-8C2C-A51F8808F4C6
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 12:10]--[2023-03-27 Mon 12:40] =>  0:30
CLOCK: [2022-10-01 Sat 13:23]--[2022-10-01 Sat 13:26] =>  0:03
CLOCK: [2021-11-11 Thu 14:05]--[2021-11-11 Thu 14:09] =>  0:04
CLOCK: [2021-10-28 Thu 19:00]--[2021-10-28 Thu 19:56] =>  0:56
CLOCK: [2021-10-13 Wed 21:01]--[2021-10-13 Wed 21:13] =>  0:12
CLOCK: [2021-10-02 Sat 14:55]--[2021-10-02 Sat 15:48] =>  0:53
CLOCK: [2021-06-01 Tue 17:08]--[2021-06-01 Tue 17:30] =>  0:22
CLOCK: [2021-03-16 Tue 17:07]--[2021-03-16 Tue 17:24] =>  0:17
CLOCK: [2021-08-14 Sat 10:36]--[2021-08-14 Sat 10:49] =>  0:13
CLOCK: [2021-07-29 Thu 19:15]--[2021-07-29 Thu 19:22] =>  0:07
CLOCK: [2021-07-26 Mon 20:38]--[2021-07-26 Mon 20:39] =>  0:01
CLOCK: [2021-07-24 Sat 10:00]--[2021-07-24 Sat 10:21] =>  0:21
CLOCK: [2021-06-25 Fri 15:35]--[2021-06-25 Fri 16:19] =>  0:44
CLOCK: [2021-06-23 Wed 21:05]--[2021-06-23 Wed 21:14] =>  0:09
CLOCK: [2021-05-05 Wed 20:55]--[2021-05-05 Wed 21:05] =>  0:10
CLOCK: [2021-04-05 Mon 15:35]--[2021-04-05 Mon 15:49] =>  0:14
CLOCK: [2021-04-04 Sun 21:36]--[2021-04-04 Sun 22:00] =>  0:24
CLOCK: [2021-04-04 Sun 20:52]--[2021-04-04 Sun 21:35] =>  0:43
CLOCK: [2021-03-20 Sat 12:15]--[2021-03-20 Sat 12:17] =>  0:02
CLOCK: [2021-03-07 Sun 11:00]--[2021-03-07 Sun 11:01] =>  0:01
CLOCK: [2021-02-04 Thu 21:02]--[2021-02-04 Thu 21:19] =>  0:17
:END:

/[[https://github.com/joaotavora/yasnippet][yasnippet]] is a template system for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package yasnippet
  :custom
  (yas-snippet-dirs (list paths-dir-yasnippets
                          paths-dir-yasnippets-private
                          (file-name-concat elpaca-builds-directory "yasnippet-snippets/snippets/")))
  (yas-triggers-in-field t) ; allow stacked expansions
  (yas-new-snippet-default
   (format "# -*- mode: snippet -*-\n# name: $1\n# key: $2\n# contributor: %s\n# --\n$0" user-full-name))

  :config
  (yas-global-mode)

  :hook
  (minibuffer-setup-hook . yas-minor-mode)

  :bind
  ("C-y" . yas-new-snippet))
#+end_src

** yasnippet-snippets
:PROPERTIES:
:ID:       E3499A47-009A-4A52-9134-2067C79FFBC8
:END:

/[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] is a public repository of yasnippet snippets./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

** expand-region
:PROPERTIES:
:ID:       8C9AE82C-9B5D-44D7-8FEE-1738032AD3C0
:END:
:LOGBOOK:
CLOCK: [2022-10-03 Mon 19:53]--[2022-10-03 Mon 22:42] =>  2:49
CLOCK: [2021-06-03 Thu 15:47]--[2021-06-03 Thu 16:04] =>  0:17
:END:

/[[https://github.com/magnars/expand-region.el][expand-region]] incrementally selects regions by semantic units./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package expand-region
  :bind
  (("C-H-s-n" . er/expand-region)
   ("C-H-s-h" . er/contract-region)))
#+end_src

** newcomment
:PROPERTIES:
:ID:       C079E18F-8A96-4A3E-8024-C0F9E29CD182
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature newcomment
  :bind
  ("M-/" . comment-line))
#+end_src

** skeleton
:PROPERTIES:
:ID:       FCF33E87-02CA-4244-9220-D7E6CEE7F7EF
:END:


/skeleton provides a concise language extension for writing structured statement skeleton insertion commands for programming modes./

The code block below specifies how certain characters should be paired either globally or in specific modes.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature skeleton
  :init
  (setq skeleton-pair t)
  (with-eval-after-load 'telega
    (bind-keys :map telega-chat-mode-map
               ("~" . skeleton-pair-insert-maybe)
               ("=" . skeleton-pair-insert-maybe)))
  (with-eval-after-load 'markdown-mode
    (bind-keys :map markdown-mode-map
               ("*" . skeleton-pair-insert-maybe)
               ("`" . skeleton-pair-insert-maybe)))
  (with-eval-after-load 'forge
    (bind-keys  :map forge-post-mode-map
                ("*" . skeleton-pair-insert-maybe)
                ("`" . skeleton-pair-insert-maybe)))

  :hook
  ((markdown-mode-hook forge-post-mode-hook) .
   (lambda ()
     "Use two backticks, rather than ` and ', in selected modes."
     (setq-local skeleton-pair-alist '((?` _ ?`)))))

  :bind
  (("[" . skeleton-pair-insert-maybe)
   ("{" . skeleton-pair-insert-maybe)
   ("(" . skeleton-pair-insert-maybe)
   ("\"" . skeleton-pair-insert-maybe)
   ("«" . skeleton-pair-insert-maybe)
   :map org-mode-map
   ("~" . skeleton-pair-insert-maybe)
   ("=" . skeleton-pair-insert-maybe)
   :map emacs-lisp-mode-map
   ("`" . skeleton-pair-insert-maybe)
   :map lisp-interaction-mode-map
   ("`" . skeleton-pair-insert-maybe)))
#+end_src

** crux
:PROPERTIES:
:ID:       B7CD0E70-E601-4EEC-B51F-82F94ECA32BA
:END:
:LOGBOOK:
CLOCK: [2022-06-08 Wed 17:31]--[2022-06-08 Wed 17:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:17]--[2021-06-25 Fri 21:18] =>  0:01
:END:

/[[https://github.com/bbatsov/crux][crux]] is a “collection of ridiculously useful extensions”./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package crux
  :init
  (defun crux-smart-open-line-before ()
    "Insert an empty line before the current line."
    (interactive)
    (crux-smart-open-line t))

  :bind
  (("M-l" . crux-smart-open-line)
   ("M-A-l" . crux-smart-open-line-before)
   ("A-H-l" . crux-duplicate-current-line-or-region)))
#+end_src

** button
:PROPERTIES:
:ID:       38C9C0A7-5979-4656-879D-F71638FCF40D
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/button.el][button]] defines functions for inserting and manipulating clickable buttons in Emacs buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature button
  :after telega
  :bind
  (("A-C-M-s-j" . backward-button)
   ("A-C-M-s-;" . forward-button)
   :map telega-chat-mode-map
   ("M-RET" . push-button)))
#+end_src

** back-button
:PROPERTIES:
:ID:       59041577-18F8-4336-80FF-4CC8C7AA7814
:END:

/[[https://github.com/rolandwalker/back-button][back-button]] supports navigating the mark ring forward and backward./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package back-button
  :config
  (back-button-mode)

  :bind
  (("H-," . back-button-local-backward)
   ("H-." . back-button-local-forward)
   ("H-<" . back-button-global-backward)
   ("H->" . back-button-global-forward)))
#+end_src

** goto-last-change
:PROPERTIES:
:ID:       DD6DA81B-89B8-4881-A901-200A8CAF1974
:END:
:LOGBOOK:
CLOCK: [2021-06-25 Fri 21:18]--[2021-06-25 Fri 21:19] =>  0:01
:END:

/[[https://github.com/camdez/goto-last-change.el][goto-last-change]] moves point through buffer-undo-list positions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package goto-last-change
  :bind
  ("C-z" . goto-last-change))
#+end_src

** goto-addr
:PROPERTIES:
:ID:       29DA9B62-C7A6-4B53-B49C-BE2C47D0F3AF
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/net/goto-addr.el][goto-addr]] activates URLs and e-mail addresses in buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature goto-addr
  :defer 7
  :config
  (global-goto-address-mode))
#+end_src

* registers & bookmarks
:PROPERTIES:
:ID:       E40A01AD-2B18-4B98-83E9-5E78D1E7195F
:END:
:LOGBOOK:
CLOCK: [2021-07-29 Thu 16:15]--[2021-07-29 Thu 16:23] =>  0:08
CLOCK: [2021-04-05 Mon 15:34]--[2021-04-05 Mon 15:35] =>  0:01
:END:

** register
:PROPERTIES:
:ID:       893A2A5B-707A-4C9A-9E25-414DC663F2CD
:END:
:LOGBOOK:
CLOCK: [2021-07-30 Fri 21:35]--[2021-07-30 Fri 22:18] =>  0:43
CLOCK: [2021-07-30 Fri 21:16]--[2021-07-30 Fri 21:31] =>  0:15
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/register.el][register]] saves text, rectangles, positions, and other things for later use./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature register
  :after savehist
  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'register-alist)))
#+end_src

** register-extras
:PROPERTIES:
:ID:       A2DCE7E0-6094-45FC-B5BE-AF3A0351D3CC
:END:

/[[file:extras/register-extras.el][register-extras]] collects my extensions for =register=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package register-extras
  :bind
  ("C-r" . register-extras-dispatch))
#+end_src

** bookmarks
:PROPERTIES:
:ID:       943D5DC0-7F0E-449C-8D21-089E051F1027
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature bookmark
  :custom
  (bookmark-default-file paths-file-bookmarks) ; Set location of bookmarks file
  (bookmark-save-flag 1)) ; Save bookmarks after each entry
#+end_src

* files & buffers
:PROPERTIES:
:ID:       B29F4586-2B8D-41FE-82DE-FEDCD863C74B
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:05]--[2022-07-14 Thu 20:14] =>  0:09
CLOCK: [2022-07-09 Sat 20:43]--[2022-07-09 Sat 21:51] =>  1:08
CLOCK: [2022-06-12 Sun 13:10]--[2022-06-12 Sun 13:15] =>  0:05
CLOCK: [2022-06-10 Fri 21:15]--[2022-06-10 Fri 22:23] =>  1:08
CLOCK: [2022-05-15 Sun 10:34]--[2022-05-15 Sun 12:02] =>  1:28
CLOCK: [2022-05-15 Sun 10:25]--[2022-05-15 Sun 10:34] =>  0:09
CLOCK: [2022-05-05 Thu 23:03]--[2022-05-05 Thu 23:31] =>  0:28
CLOCK: [2021-12-03 Fri 19:50]--[2021-12-03 Fri 20:15] =>  0:25
CLOCK: [2021-11-19 Fri 20:55]--[2021-11-19 Fri 21:02] =>  0:07
CLOCK: [2021-10-20 Wed 20:49]--[2021-10-20 Wed 21:01] =>  0:12
CLOCK: [2021-09-26 Sun 21:50]--[2021-09-26 Sun 22:07] =>  0:17
CLOCK: [2021-09-26 Sun 19:31]--[2021-09-26 Sun 20:06] =>  0:35
CLOCK: [2021-09-18 Sat 19:01]--[2021-09-18 Sat 19:15] =>  0:14
CLOCK: [2021-08-17 Tue 09:05]--[2021-08-17 Tue 09:22] =>  0:17
CLOCK: [2021-07-25 Sun 12:58]--[2021-07-25 Sun 13:03] =>  0:05
CLOCK: [2021-06-09 Wed 21:29]--[2021-06-09 Wed 21:36] =>  0:07
CLOCK: [2021-06-10 Thu 19:20]--[2021-06-10 Thu 19:46] =>  0:26
CLOCK: [2021-05-27 Thu 07:31]--[2021-05-27 Thu 07:45] =>  0:14
CLOCK: [2021-05-21 Fri 18:03]--[2021-05-21 Fri 18:12] =>  0:09
CLOCK: [2021-05-20 Thu 18:17]--[2021-05-20 Thu 18:21] =>  0:04
CLOCK: [2021-04-07 Wed 16:18]--[2021-04-07 Wed 16:25] =>  0:07
CLOCK: [2021-04-05 Mon 09:14]--[2021-04-05 Mon 09:20] =>  0:06
CLOCK: [2021-04-03 Sat 10:07]--[2021-04-03 Sat 10:19] =>  0:12
CLOCK: [2021-04-02 Fri 11:08]--[2021-04-02 Fri 11:14] =>  0:06
CLOCK: [2021-04-02 Fri 10:10]--[2021-04-02 Fri 10:40] =>  0:30
CLOCK: [2021-04-02 Fri 09:48]--[2021-04-02 Fri 10:02] =>  0:14
CLOCK: [2021-03-30 Tue 09:02]--[2021-03-30 Tue 09:10] =>  0:08
CLOCK: [2021-03-23 Tue 18:00]--[2021-03-23 Tue 18:38] =>  0:38
CLOCK: [2021-03-22 Mon 21:49]--[2021-03-22 Mon 22:38] =>  0:49
CLOCK: [2021-04-09 Fri 11:49]--[2021-04-09 Fri 11:49] =>  0:00
:END:

** files
:PROPERTIES:
:ID:       A7E824CC-5E71-4B12-A99B-D4C09CE164FF
:END:
:LOGBOOK:
CLOCK: [2023-04-12 Wed 12:43]--[2023-04-12 Wed 12:47] =>  0:04
CLOCK: [2023-02-22 Wed 21:58]--[2023-02-22 Wed 23:59] =>  2:01
CLOCK: [2022-08-19 Fri 13:45]--[2022-08-19 Fri 13:47] =>  0:02
CLOCK: [2021-07-24 Sat 21:09]--[2021-07-24 Sat 21:34] =>  0:25
CLOCK: [2021-07-24 Sat 20:41]--[2021-07-24 Sat 20:46] =>  0:05
CLOCK: [2021-07-01 Thu 20:45]--[2021-07-01 Thu 20:55] =>  0:10
CLOCK: [2021-02-07 Sun 13:37]--[2021-02-07 Sun 13:54] =>  0:17
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature files
  :after savehist
  :custom
  (confirm-kill-processes nil) ; do not prompt to kill running processes when quitting Emacs
  (delete-by-moving-to-trash t)
  (trash-directory (expand-file-name (file-name-concat "~" ".Trash"))) ; fallback for `move-file-to-trash'
  (remote-file-name-inhibit-delete-by-moving-to-trash t)
  (remote-file-name-inhibit-auto-save t)
  (find-file-visit-truename t); emacs.stackexchange.com/questions/14509/kill-process-buffer-without-confirmation
  (create-lockfiles nil) ; lockfiles are indexed by `org-roam', which causes problems with `org-agenda'
  (large-file-warning-threshold (* 200 1000 1000))
  (enable-local-variables :all)
  (insert-directory-program "/opt/homebrew/bin/gls") ; use coreutils to avoid 'listing directory failed' error
  (auto-save-no-message t)
  (delete-old-versions t)
  (make-backup-files nil)
  (version-control 'never)
  (auto-save-visited-interval 1)

  :config
  (setq kill-buffer-query-functions nil) ; not a customizable variable
  ;; we enable `auto-save-visited-mode' globally...
  (auto-save-visited-mode)
  ;; ...but then we disable it for all buffers
  (setq-default auto-save-visited-mode nil)
  ;; so that we can then re-enable it for specific buffers via a file-local variable:
  ;; # Local Variables:
  ;; # eval: (setq-local auto-save-visited-mode t)
  ;; # End:

  (advice-add 'recover-session
              :after (lambda ()
                       "Disable `dired-hide-details-mode' to show dates in `recover-session'."
                       (dired-hide-details-mode -1)))

  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'file-name-history))

  (add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))

  :bind
  (("M--" . not-modified)
   ("H-a" . mark-whole-buffer)
   ("H-s" . save-buffer)
   ("C-b" . clone-indirect-buffer-other-window)
   ("H-C-g" . abort-recursive-edit)
   ("H-C-S-g" . top-level)
   ("H-C-A-g" . keyboard-escape-quit))) ; ESC ESC ESC
#+end_src

** files-extras
:PROPERTIES:
:ID:       DA1D9D59-0EE4-439E-BCC9-5A7C316794A2
:END:


/[[file:extras/files-extras.el][files-extras]] collects my extensions for =files=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package files-extras
  :bind
  (("M-;" . files-extras-copy-current-path)
   ("H-f" . files-extras-dispatch)
   ("M-b" . files-extras-save-and-revert-buffer)
   ("M-e" . files-extras-eval-region-or-buffer)
   ("H-q" . files-extras-kill-this-buffer)
   ("A-H-M-s-q" . files-extras-kill-this-buffer-switch-to-other-window)
   ("A-H-q" . files-extras-kill-other-buffer)
   ("H-n" . files-extras-new-empty-buffer)
   ("A-H-n" . files-extras-new-buffer-in-current-mode)
   ("H-S" . files-extras-save-all-buffers)
   ("A-H-M-s-SPC" . files-extras-switch-to-alternate-buffer)
   ("A-H-v" . files-extras-internet-archive-dwim))

  :init
  (with-eval-after-load 'dired
    (bind-keys :map dired-mode-map
               ("s-o" . files-extras-ocr-pdf)))
  (with-eval-after-load 'pdf-view
    (bind-keys :map pdf-view-mode-map
               ("s-o" . files-extras-ocr-pdf)))
  (with-eval-after-load 'ebib
    (bind-keys :map ebib-entry-mode-map
               ("v" . files-extras-internet-archive-dwim)
               ("q" . files-extras-bury-buffer-switch-to-other-window)
               :map ebib-index-mode-map
               ("q" . files-extras-bury-buffer-switch-to-other-window)))
  (with-eval-after-load 'simple
    (bind-keys :map messages-buffer-mode-map
               ("q" . files-extras-bury-buffer-switch-to-other-window)))
  (with-eval-after-load 'telega
    (bind-keys :map telega-root-mode-map
               ("q" . files-extras-bury-buffer-switch-to-other-window)))
  (with-eval-after-load 'apropos
    (bind-keys :map apropos-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'calendar
    (bind-keys :map calendar-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'completion-list
    (bind-keys :map completion-list-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'dired
    (bind-keys :map dired-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'Info
    (bind-keys :map Info-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'finder
    (bind-keys :map finder-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'ledger-reconcile
    (bind-keys :map ledger-reconcile-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'mu4e
    (bind-keys :map mu4e-headers-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'pass
    (bind-keys :map pass-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'slack
    (bind-keys :map slack-message-buffer-mode-map
               ("q" . files-extras-kill-this-buffer))
    (bind-keys :map slack-thread-message-buffer-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'special
    (bind-keys :map special-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'tetris
    (bind-keys :map tetris-mode-map
               ("q" . files-extras-kill-this-buffer)))
  (with-eval-after-load 'view
    (bind-keys :map view-mode-map
               ("q" . files-extras-kill-this-buffer)))
  ;; We typically enter these modes to lookup some information and
  ;; then return to the previous buffer, so we set `q' to switch to
  ;; the other window, and reserve `Q' for the normal behavior
  (with-eval-after-load 'help
    (bind-keys :map help-mode-map
               ("Q" . files-extras-kill-this-buffer)
               ("q" . files-extras-kill-this-buffer-switch-to-other-window)))
  (with-eval-after-load 'helpful
    (bind-keys :map helpful-mode-map
               ("Q" . files-extras-kill-this-buffer)
               ("q" . files-extras-kill-this-buffer-switch-to-other-window)))
  (with-eval-after-load 'markdown-mode
    (bind-keys :map markdown-mode-map
               ("s-g" . file-extras-grammarly-open-in-external-editor)
               :map gfm-mode-map
               ("s-g" . file-extras-grammarly-open-in-external-editor))))
#+end_src

** locate
:PROPERTIES:
:ID:       A0784673-AFD3-4111-AF83-C018CB12C897
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature locate
  :after consult
  :custom
  (locate-command "mdfind")) ; use the OSX Spotlight backend
#+end_src

** autorevert
:PROPERTIES:
:ID:       B4DE3D43-3085-4FA5-9DA4-1148CF49400C
:END:

/autorevert automatically reverts buffers when their files change on disk./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature autorevert
  :custom
  (auto-revert-use-notify nil) ; reddit.com/r/emacs/comments/mq2znn/comment/gugo0n4/

  :hook
  (find-file-hook . global-auto-revert-mode))
#+end_src

** dired
:PROPERTIES:
:ID:       617F5323-6518-4751-948B-3E8032D93130
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:17]--[2022-07-14 Thu 20:31] =>  0:14
CLOCK: [2022-07-03 Sun 21:36]--[2022-07-03 Sun 21:40] =>  0:04
CLOCK: [2022-05-02 Mon 21:26]--[2022-05-02 Mon 21:36] =>  0:10
CLOCK: [2022-05-02 Mon 10:55]--[2022-05-02 Mon 11:55] =>  1:00
CLOCK: [2021-12-19 Sun 09:42]--[2021-12-19 Sun 09:50] =>  0:08
CLOCK: [2021-12-13 Mon 12:51]--[2021-12-13 Mon 13:04] =>  0:13
CLOCK: [2021-12-10 Fri 17:35]--[2021-12-10 Fri 17:45] =>  0:10
CLOCK: [2021-12-04 Sat 16:34]--[2021-12-04 Sat 16:36] =>  0:02
CLOCK: [2021-11-23 Tue 22:42]--[2021-11-23 Tue 23:22] =>  0:40
CLOCK: [2021-10-03 Sun 19:19]--[2021-10-03 Sun 19:50] =>  0:31
CLOCK: [2021-09-28 Tue 14:37]--[2021-09-28 Tue 14:55] =>  0:18
CLOCK: [2021-05-11 Tue 18:03]--[2021-05-11 Tue 18:16] =>  0:13
CLOCK: [2021-03-28 Sun 14:34]--[2021-03-28 Sun 14:51] =>  0:17
CLOCK: [2021-07-23 Fri 16:13]--[2021-07-23 Fri 16:39] =>  0:26
CLOCK: [2021-07-23 Fri 12:49]--[2021-07-23 Fri 14:00] =>  1:11
CLOCK: [2021-07-22 Thu 21:10]--[2021-07-22 Thu 21:31] =>  0:21
CLOCK: [2021-07-08 Thu 14:38]--[2021-07-08 Thu 14:50] =>  0:12
CLOCK: [2021-06-09 Wed 20:51]--[2021-06-09 Wed 21:29] =>  0:38
CLOCK: [2021-05-10 Mon 17:55]--[2021-05-10 Mon 18:23] =>  0:28
CLOCK: [2021-04-25 Sun 14:06]--[2021-04-25 Sun 14:13] =>  0:07
CLOCK: [2021-04-15 Thu 21:53]--[2021-04-15 Thu 22:00] =>  0:07
CLOCK: [2021-04-08 Thu 13:42]--[2021-04-08 Thu 13:51] =>  0:09
CLOCK: [2021-04-06 Tue 21:54]--[2021-04-06 Tue 22:03] =>  0:09
CLOCK: [2021-04-04 Sun 10:14]--[2021-04-04 Sun 10:43] =>  0:29
CLOCK: [2021-04-01 Thu 10:05]--[2021-04-01 Thu 10:41] =>  0:36
CLOCK: [2021-03-31 Wed 20:56]--[2021-03-31 Wed 21:01] =>  0:05
CLOCK: [2021-03-27 Sat 21:30]--[2021-03-27 Sat 21:33] =>  0:03
CLOCK: [2021-03-27 Sat 21:33]--[2021-03-27 Sat 21:50] =>  0:17
:END:


/dired is the Emacs directory editor./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature dired
  :init
  (with-eval-after-load 'pdf-annot
    (bind-keys
     :map pdf-annot-minor-mode-map
     ("x" . dired-jump)))

  :custom
  (dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso")
  (dired-auto-revert-buffer t)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  (dired-no-confirm t) ; never ask for confirmation
  (dired-dwim-target t) ; if Dired buffer in other window, use that buffer's current directory as target
  (dired-vc-rename-file t)
  (dired-do-revert-buffer t)
  (dired-create-destination-dirs 'ask)
  (dired-guess-shell-alist-user '(("" "open")))

  :config
  (setq dired-deletion-confirmer (lambda (x) t)) ; not a customizable variable
  (put 'dired-find-alternate-file 'disabled nil) ; do not disable dired-find-alternate-file!

  :hook
  (dired-mode-hook . dired-hide-details-mode)
  (dired-mode-hook . (lambda () (visual-line-mode -1)))

  :bind
  (:map dired-mode-map
        ("<tab>" . dired-extras-subtree-toggle)
        (";" . dired-do-rename)
        ("." . dired-find-alternate-file)
        ("C" . dired-do-copy)
        ("s-s" . dired-isearch-filenames)
        ("J" . dired-jump-other-window)
        ("e" . browse-url-extras-of-dired-file-externally)
        ("f" . avy-extras-dired-find-file)
        ("k" . dired-previous-line)
        ("l" . dired-next-line)
        ("r" . dired-toggle-read-only)
        ("H-z" . dired-undo)
        ("A-C-s-r" . dired-prev-dirline)
        ("A-C-s-f" . dired-next-dirline)
        ("A-C-s-," . dired-prev-marked-file)
        ("A-C-s-." . dired-next-marked-file)
        ("C-o" . nil)))
#+end_src

** dired-x
:PROPERTIES:
:ID:       43A42081-7B3A-460D-A47D-52EE95202050
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 22:53]--[2021-10-03 Sun 23:36] =>  0:43
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature dired-x
  :custom
  (dired-omit-verbose nil) ; shut up
  (dired-omit-size-limit nil)  ; always omit, regardless of directory size

  :config
  (setopt dired-omit-files
   (concat dired-omit-files "\\|^.localized$\\|^\\.DS_Store$\\|^\\.pdf-view-restore\\|^Icon\\\015"))

  :hook
  (dired-mode-hook . dired-omit-mode))
#+end_src

** dired-extras
:PROPERTIES:
:ID:       DDF9A650-13A5-4C47-B2C5-6B376B75998D
:END:

/[[file:extras/dired-extras.el][dired-extras]] collects my extensions for =dired=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package dired-extras
  :hook
  (dired-mode-hook . (lambda () (require 'dired-extras)))

  :bind
  (("H-d" . dired-extras-dispatch)
   :map  dired-mode-map
   ("," . dired-extras-up-directory-reuse)
   ("-" . dired-extras-hide-details-mode-enhanced)
   ("H-." . dired-extras-dotfiles-toggle)
   ("c" . dired-extras-copy-filename-as-kill-absolute)
   ("w" . dired-extras-copy-filename-as-kill-dwim)
   ("W" . dired-extras-copy-filename-as-kill-sans-extension)
   ("z" . dired-extras-mark-screenshots)
   ("s" . dired-extras-sort-toggle-dwim)
   ("s-d" . dired-extras-do-delete-fast)
   ("s-r" . dired-extras-copy-to-remote-docs-directory)))
#+end_src

** dired-aux
:PROPERTIES:
:ID:       F41AFC26-002A-4152-9FC7-E9AD92DF5BBA
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature dired-aux
  :after dired-x
  :config
  (push '("\\.rar\\'" "" "unar") dired-compress-file-suffixes)) ; with `unar' installed, `Z' uncompresses `rar' files
#+end_src

** dired-git-info
:PROPERTIES:
:ID:       0A10074E-2431-4088-A3BB-8DF74A9FEEE5
:END:


/[[https://github.com/clemera/dired-git-info][dired-git-info]] displays information about Git files in Dired./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dired-git-info
  :after dired
  :custom
  (dgi-commit-message-format "%s	%cr	%an")

  :bind
  (:map dired-mode-map
        ("b" . dired-git-info-mode)))
#+end_src

** dired-du
:PROPERTIES:
:ID:       22FCD9F4-A3EE-4605-BDB0-E90FC8471B21
:END:
:LOGBOOK:
CLOCK: [2022-01-04 Tue 08:50]--[2022-01-04 Tue 09:24] =>  0:34
:END:
/[[https://github.com/calancha/dired-du][dired-du]] displays the recursive size of directories in Dired./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dired-du
  :after dired
  :custom
  (dired-du-size-format 'comma)

  :bind
  (:map dired-mode-map
        ("'" . dired-du-mode)))
#+end_src

** image-dired
:PROPERTIES:
:ID:       E07C1115-1881-4D5F-8B88-613DA4FD38A8
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature image-dired
  :after dired
  :custom
  (image-dired-main-image-directory (expand-file-name "~/Pictures/"))
  (image-dired-external-viewer "open")

  :bind
  (:map image-dired-thumbnail-mode-map
        ("c" . dired-extras-image-copy-filename-as-kill-absolute)
        ("e" . image-dired-thumbnail-display-external)
        ("k" . image-dired-display-previous)
        ("l" . image-dired-display-next)
        :map dired-mode-map
        ("I" . dired-extras-image-dired-current-directory)))
#+end_src

** nerd-icons-dired
:PROPERTIES:
:ID:       C3F3F430-4DAE-4C77-907A-84B385CC3CCB
:END:

/[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] adds Dired support to nerd-icons./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package nerd-icons-dired
  :after dired
  :hook
  (dired-mode-hook . nerd-icons-dired-mode))
#+end_src

** wdired
:PROPERTIES:
:ID:       B892CCBB-FB26-48A6-97BE-EF37CE8FB332
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature wdired
  :custom
  (wdired-allow-to-change-permissions t)

  :bind
  (:map wdired-mode-map
   ("s-c" . wdired-finish-edit)
   ("<return>" . wdired-finish-edit)))
#+end_src

** gnus-dired
:PROPERTIES:
:ID:       8AD56019-FF0A-407F-B610-F9F2F4DE1B90
:END:


/gnus-dired provides utility functions for intersections of =gnus= and =dired=./

I use =mu4e= (see below) rather than =gnus= to handle email. However, a specific functionality in this feature also works with =mu4e=, allowing me to attach a file to an email directly from a Dired buffer.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature gnus-dired
  :after dired
  :custom
  ;; enable `mu4e' attachments from `dired'
  ;; djcbsoftware.nl/code/mu/mu4e/Dired.html
  (gnus-dired-mail-mode 'mu4e-user-agent)

  :hook
  (dired-mode-hook . turn-on-gnus-dired-mode)

  :bind
  (:map dired-mode-map
        ("s-a" . gnus-dired-attach)))
#+end_src

** dired-hacks
:PROPERTIES:
:ID:       C3E2CA62-26C4-4681-81D8-4326BE474717
:END:
:LOGBOOK:
CLOCK: [2021-12-12 Sun 15:32]--[2021-12-12 Sun 15:57] =>  0:25
CLOCK: [2021-06-25 Fri 21:19]--[2021-06-25 Fri 21:24] =>  0:05
CLOCK: [2021-04-07 Wed 12:28]--[2021-04-07 Wed 12:35] =>  0:07
CLOCK: [2021-04-06 Tue 22:25]--[2021-04-06 Tue 22:35] =>  0:10
:END:

/[[https://github.com/Fuco1/dired-hacks][dired-hacks]] is a collection of useful dired additions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dired-hacks
  :ensure (:host github
                    :repo "Fuco1/dired-hacks")
  :after dired
  :init
  (advice-add 'dired-subtree-toggle :after (lambda () (dired-omit-mode) (dired-omit-mode)))
  (advice-add 'dired-subtree-cycle :after (lambda () (dired-omit-mode) (dired-omit-mode)))

  :bind
  (:map dired-mode-map
   ("C-w" . dired-narrow-regexp)
   ("<tab>" . dired-subtree-toggle)
   ("<backtab>" . dired-subtree-cycle)))
#+end_src

** dired-quick-sort
:PROPERTIES:
:ID:       9BF30679-50B1-4F78-BD6A-0DEF565D22A4
:END:
:LOGBOOK:
CLOCK: [2022-01-07 Fri 10:39]--[2022-01-07 Fri 10:45] =>  0:06
:END:

/[[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]] provides persistent quick sorting of Dired buffers in various ways./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dired-quick-sort
  :after dired
  :bind
  (:map dired-mode-map
        ("T" . hydra-dired-quick-sort/body)))
#+end_src

** peep-dired
:PROPERTIES:
:ID:       B0502885-D248-47E7-BE4F-54F597EBD390
:END:

/[[https://github.com/asok/peep-dired][peep-dired]] supports browsing file contents in other window while browsing directory in dired./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package peep-dired
  :after dired
  :bind
  (:map dired-mode-map
        ("F" . peep-dired)))
#+end_src

** minibuffer
:PROPERTIES:
:ID:       40F49ECD-7225-4AD2-9E07-16C5A5857FFF
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature minibuffer
  :custom
  (enable-recursive-minibuffers t)
  (resize-mini-windows t)
  (completion-cycle-threshold 3) ; TAB cycle if there are only few candidates
  (minibuffer-default-prompt-format " [%s]")
  (minibuffer-electric-default-mode)

  :bind
  (:map minibuffer-mode-map
        ("M-k" . previous-history-element)
        ("M-l" . next-history-element)
        ("C-e" . search-query-replace)
        ("TAB" . yas-maybe-expand)
        ("s-i" . org-roam-node-insert)
        ("M-n" . nil)
        ("M-p" . nil)))
#+end_src

** ibuffer
:PROPERTIES:
:ID:       11E1F107-4D7A-40DE-AA8E-9D995A10A351
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ibuffer
  :bind
  (:map ibuffer-mode-map
   ("k" . ibuffer-do-delete)))
#+end_src

** prot-scratch
:PROPERTIES:
:ID:       FF8B73D7-0A56-44FE-8F66-DDD18C9D5CE1
:END:

/[[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-scratch.el][prot-scratch]] supports scratch buffers for an editable major mode of choice./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package prot-scratch
  :ensure (:host github
                 :repo "protesilaos/dotfiles"
                 :local-repo "prot-scratch"
                 :main "emacs/.emacs.d/prot-lisp/prot-scratch.el"
                 :build (:not elpaca--check-version)
                 :files ("emacs/.emacs.d/prot-lisp/prot-scratch.el"))
  :custom
  (prot-scratch-default-mode 'org-mode)

  :bind
  ("C-n" . prot-scratch-buffer))
#+end_src

** persistent-scratch
:PROPERTIES:
:ID:       ACB8DF75-3FC0-4780-A587-B173E4366F62
:END:

/[[https://github.com/Fanael/persistent-scratch][persistent-scratch]] preserves the scratch buffer across Emacs sessions./

I use this package in combination with =prot-scratch= (see above) to persist scratch buffers in different modes. This way, I am able to open a scratch buffer in /any/ mode for temporary notes, without running the risk of losing them.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package persistent-scratch
  :custom
  (persistent-scratch-autosave-interval 10)
  (persistent-scratch-backup-directory
   (no-littering-expand-var-file-name "auto-save/scratch-buffers/"))

  :config
  (persistent-scratch-setup-default))
#+end_src

** executable
:PROPERTIES:
:ID:       0838A480-2BBF-4AAE-8DC0-FBED8D7E9B9E
:END:


/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/executable.el][executable]] provides base functionality for executable interpreter scripts./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature executable
  :hook
  ;; masteringemacs.org/article/script-files-executable-automatically
  (after-save-hook . executable-make-buffer-file-executable-if-script-p))
#+end_src

** uniquify
:PROPERTIES:
:ID:       295BE204-62D9-4003-AFB0-06F6D817AE4C
:END:


/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/uniquify.el][uniquify]] provides unique buffer names./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature uniquify
  :custom
  (uniquify-buffer-name-style 'forward))
#+end_src

** reveal-in-osx-finder
:PROPERTIES:
:ID:       5BA0A794-59F0-471D-AD81-4C281095BF48
:END:

/[[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]] lets you open the file at point or the current file-visiting buffer in OS X Finder./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package reveal-in-osx-finder
  :after dired
  :demand t
  :bind (:map dired-mode-map
              ("/" . reveal-in-osx-finder)))
#+end_src

** tramp
:PROPERTIES:
:ID:       23FDB037-73C2-4AE1-A887-437C996F78D2
:END:
:LOGBOOK:
CLOCK: [2022-08-20 Sat 18:11]--[2022-08-20 Sat 18:32] =>  0:21
:END:

/[[https://www.gnu.org/software/tramp/][tramp]] is a remote file editing package for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature tramp
  :after dired-x
  :custom
  (tramp-auto-save-directory no-littering-var-directory)
  ;; Disable version control on tramp buffers to avoid freezes.
  (vc-ignore-dir-regexp
   (format "\\(%s\\)\\|\\(%s\\)"
           vc-ignore-dir-regexp
           tramp-file-name-regexp))

  ;; Don't clean up recentf tramp buffers.
  (recentf-auto-cleanup 'never)

  ;; This is supposedly [[https://www.emacswiki.org/emacs/TrampMode][faster than the default]], `scp'.
  (tramp-default-method "sshx")

  ;; Store TRAMP auto-save files locally.
  (tramp-auto-save-directory paths-dir-emacs-var)

  ;; A more representative name for this file.
  (tramp-persistency-file-name (file-name-concat tramp-auto-save-directory "tramp-connection-history"))

  ;; Cache SSH passwords during the whole Emacs session.
  (password-cache-expiry nil)

  ;; emacs.stackexchange.com/a/37855/32089
  (remote-file-name-inhibit-cache nil)

  :config
  ;; Reuse SSH connections. Taken from the TRAMP FAQ.
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))

  ;; This will put in effect PATH changes in the remote ~/.profile.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  (advice-add 'projectile-project-root
              :around (lambda ()
                        "Ignore remote files."
                        (unless (file-remote-p default-directory 'no-identification)
                          (apply orig-fun args))))

  (add-to-list 'tramp-connection-properties
               (list (regexp-quote "/ssh:fede@tlon.team:")
                     "direct-async-process" t)))
#+end_src

** pandoc-mode
:PROPERTIES:
:ID:       8EBA8303-EA43-4FB2-BB9D-1734F40DDB77
:END:

/[[https://github.com/joostkremers/pandoc-mode][pandoc-mode]] is a minor mode for interacting with Pandoc./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pandoc-mode
  :defer t)
#+end_src

*** TODO [#7] Make pandoc preserve emojis
:PROPERTIES:
:ID:       3C4F154F-6600-4DF0-826F-0EB031146BA2
:END:

* windows & frames
:PROPERTIES:
:ID:       7E9A81E0-CAEB-4029-AD2C-B2416439FCDA
:END:
:LOGBOOK:
CLOCK: [2021-12-21 Tue 20:13]--[2021-12-21 Tue 20:20] =>  0:07
CLOCK: [2021-10-28 Thu 21:35]--[2021-10-28 Thu 21:52] =>  0:17
CLOCK: [2021-08-18 Wed 13:00]--[2021-08-18 Wed 13:04] =>  0:04
CLOCK: [2021-08-17 Tue 22:09]--[2021-08-18 Wed 00:24] =>  2:15
CLOCK: [2021-06-23 Wed 20:47]--[2021-06-23 Wed 20:55] =>  0:08
CLOCK: [2021-06-01 Tue 22:28]--[2021-06-01 Tue 22:45] =>  0:17
CLOCK: [2021-05-16 Sun 12:02]--[2021-05-16 Sun 12:12] =>  0:10
CLOCK: [2021-04-06 Tue 16:41]--[2021-04-06 Tue 16:45] =>  0:04
CLOCK: [2021-04-05 Mon 12:51]--[2021-04-05 Mon 13:17] =>  0:26
CLOCK: [2021-03-30 Tue 09:32]--[2021-03-30 Tue 09:36] =>  0:04
:END:

** window
:PROPERTIES:
:ID:       614546C0-75B2-4E44-9447-923DF5CF4AC3
:END:
:LOGBOOK:
CLOCK: [2022-09-14 Wed 15:06]--[2022-09-14 Wed 17:20] =>  2:14
CLOCK: [2022-09-14 Wed 13:25]--[2022-09-14 Wed 15:00] =>  1:35
CLOCK: [2022-09-14 Wed 12:00]--[2022-09-14 Wed 12:41] =>  0:41
CLOCK: [2022-09-08 Thu 15:47]--[2022-09-08 Thu 17:04] =>  1:17
CLOCK: [2022-09-02 Fri 18:13]--[2022-09-02 Fri 21:20] =>  3:07
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature window
  :init
  (with-eval-after-load 'ebib
    (bind-keys :map ebib-index-mode-map
               ("H-q" . bury-buffer)
               :map ebib-entry-mode-map
               ("H-q" . bury-buffer)))
  (with-eval-after-load 'simple
    (bind-keys :map messages-buffer-mode-map
               ("H-q" . bury-buffer)))
  (with-eval-after-load 'telega
    (bind-keys :map 'telega-root-mode-map
               ("H-q" . bury-buffer)))
  (with-eval-after-load 'elfeed
    (bind-keys :map elfeed-show-mode-map
               ("y" . scroll-down-command)
               ("h" . scroll-up-command)))
  (with-eval-after-load 'helpful
    (bind-keys :map helpful-mode-map
               ("y" . scroll-down-command)
               ("h" . scroll-up-command)))
  (with-eval-after-load 'mu4e
    (bind-keys :map mu4e-view-mode-map
               ("y" . scroll-down-command)
               ("h" . scroll-up-command)))
  (with-eval-after-load 'telega
    (bind-keys :map telega-msg-button-map
               ("y" . scroll-down-command)
               ("h" . scroll-up-command)))

  :custom
  (split-height-threshold nil)
  ;; move point to top of buffer if `scroll-down-command' invoked when screen can scroll no further
  (scroll-error-top-bottom t)
  (split-width-threshold 200)

  :config
  ;; we add `*ocr-pdf' buffer to list of buffers not to be displayed,
  ;; so that the process runs in the background`
  (push '("*ocr-pdf*" display-buffer-no-window) display-buffer-alist)

  ;; The following prevents Emacs from splitting windows indefinitely when the monitor config changes
  ;; stackoverflow.com/questions/23207958/how-to-prevent-emacs-dired-from-splitting-frame-into-more-than-two-windows
  (add-to-list 'display-buffer-alist `(,shell-command-buffer-name-async display-buffer-no-window))

  (init-override-code
   :window-split
   '((add-hook 'elpaca-after-init-hook #'window-extras-split-if-unsplit)))

  :bind
  (("H-w" . delete-window)
   ("A-C-s-y" . scroll-down-command)
   ("A-C-s-h" . scroll-up-command)
   ("A-C-s-g" . scroll-other-window)
   ("A-C-s-t" . scroll-other-window-down)))
#+end_src

** window-extras
:PROPERTIES:
:ID:       E29EF401-C8A5-4B57-8CB4-C2C8B386F446
:END:


/[[file:extras/window-extras.el][window-extras]] collects my extensions for =window=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package window-extras
  :bind
  (("C-H-0" . window-extras-switch-to-last-window)
   ("A-C-H-0" . window-extras-switch-to-minibuffer-window)
   ("M-," . window-extras-buffer-move-left)
   ("M-." . window-extras-buffer-move-right)
   ("A-M--" . window-extras-buffer-swap) ; `emacs-mac'
   ("A-M-–" . window-extras-buffer-swap))) ; `emacs-plus'
#+end_src

** frame
:PROPERTIES:
:ID:       3ADE4889-B4BE-4733-ABE3-BECCD4F9A73D
:END:


/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/frame.el][frame]] provides multi-frame management independent of window systems./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature frame
  :demand t
  :custom
  (window-divider-default-right-width 1)

  :config
  (blink-cursor-mode)
  (window-divider-mode)

  :bind
  (("H-M-<tab>" . other-frame) ; M-S-TAB
   ("M-N" . make-frame)
   ("M-W" . delete-frame)))
#+end_src

** frame-extras
:PROPERTIES:
:ID:       488EF2B1-CCAC-4B91-A927-F89F71BCDAD3
:END:
:LOGBOOK:
CLOCK: [2024-08-27 Tue 11:34]--[2024-08-27 Tue 12:10] =>  0:36
CLOCK: [2024-08-26 Mon 21:09]--[2024-08-26 Mon 21:29] =>  0:20
:END:


/[[file:extras/frame-extras.el][frame-extras]] collects my extensions for =frame=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package frame-extras
  :hook
  (elpaca-after-init-hook . frame-extras-maximize-frame)
  (spacious-padding-mode-hook . frame-extras-restore-window-divider)

  :bind
  ;; the key bindings below are triggered via Karabiner
  (("C-H-I" . frame-extras-maximize-frame)
   ("C-H-U" . frame-extras-left-half)
   ("C-H-P" . frame-extras-right-half)))
#+end_src

** posframe
:PROPERTIES:
:ID:       8D0FB41B-09C9-4F31-AB8B-3481B151C03E
:END:

/[[https://github.com/tumashu/posframe][posframe]] supports displaying small popup frames./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package posframe)
#+end_src

** winum
:PROPERTIES:
:ID:       90677099-6D75-4BA3-B490-0C325A17A55F
:END:
:LOGBOOK:
CLOCK: [2022-07-21 Thu 21:24]--[2022-07-21 Thu 22:45] =>  1:21
:END:

/[[https://github.com/deb0ch/emacs-winum][winum-mode]] supports navigation of windows and frames using numbers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package winum
  :custom
  (winum-scope 'frame-local)

  :config
  (winum-mode)

  :bind
  (("<C-m>" . winum-select-window-1)
   ("C-," . winum-select-window-2)
   ("C-." . winum-select-window-3)
   ("C-/" . winum-select-window-4)))
#+end_src

** winner
:PROPERTIES:
:ID:       598E0C53-2797-41B5-A53D-C229D4F69A76
:END:
:LOGBOOK:
CLOCK: [2021-10-03 Sun 18:45]--[2021-12-30 Thu 12:11] => 2105:26
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] is a global minor mode that records the changes in the window configuration (i.e., how the frames are partitioned into windows), so that you can undo them./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature winner
  :config
  (remove-hook 'minibuffer-setup-hook 'winner-save-unconditionally)
  (winner-mode)

  :bind
  ("H-W" . winner-undo))
#+end_src

** popper
:PROPERTIES:
:ID:       4DAF7C68-4A91-4E42-967C-F721148C95CA
:END:
:LOGBOOK:
CLOCK: [2024-08-28 Wed 09:31]--[2024-08-28 Wed 11:38] =>  2:07
:END:

/[[https://github.com/karthink/popper][popper]] is a minor-mode to summon and dismiss buffers easily./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package popper
  :init
  (setopt popper-reference-buffers
        '("\\*Warnings\\*"
          "Output\\*$"
          help-mode
          helpful-mode
          compilation-mode))
  (popper-mode)
  (popper-echo-mode)

  :custom
  (popper-display-control 'user) ; assumes buffer-specific behavior customized via `display-buffer-alist'
  (popper-echo-dispatch-keys '(?a ?s ?d ?f ?j ?l ?r ?q ?w ?e ?r ?u ?i ?o ?p ?z ?x ?c ?v ?m ?, ?. ?/ ? ))
  (popper-window-height (lambda (window)
                          "Set WINDOW to a size up to 33% of the frame height."
                          (fit-window-to-buffer
                           window
                           (floor (frame-height) 3))))

  :bind
  (("C-o" . popper-toggle)
   ("A-C-o" . popper-toggle-type)
   ("C-H-o" . popper-cycle)))
#+end_src

** avy
:PROPERTIES:
:ID:       D83A1681-A3F0-4C70-9986-F01275320585
:END:
:LOGBOOK:
CLOCK: [2021-11-22 Mon 10:15]--[2021-11-22 Mon 10:38] =>  0:23
CLOCK: [2021-11-13 Sat 22:01]--[2021-11-13 Sat 22:47] =>  0:46
CLOCK: [2021-11-13 Sat 21:14]--[2021-11-13 Sat 21:51] =>  0:37
CLOCK: [2021-10-12 Tue 15:22]--[2021-10-12 Tue 16:06] =>  0:44
CLOCK: [2021-08-16 Mon 10:36]--[2021-08-16 Mon 10:58] =>  0:22
CLOCK: [2021-08-10 Tue 16:50]--[2021-08-10 Tue 18:15] =>  1:25
CLOCK: [2021-07-13 Tue 08:23]--[2021-07-13 Tue 08:44] =>  0:21
CLOCK: [2021-05-16 Sun 08:30]--[2021-05-16 Sun 08:55] =>  0:25
:END:

/[[https://github.com/abo-abo/avy][avy]] lets you jump to any visible text using a char-based decision tree./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package avy
  :init
  (with-eval-after-load 'ebib
    (bind-keys :map ebib-entry-mode-map
               ("f" . avy-goto-line)))
  (with-eval-after-load 'isearch
    (bind-keys :map isearch-mode-map
               ("M-f" . avy-isearch)))

  :custom
  (avy-case-fold-search nil)
  (avy-timeout-seconds 0.2)
  (avy-all-windows nil)
  (avy-keys (append '(?k) popper-echo-dispatch-keys))

  :config
  (setf (alist-get ?r avy-dispatch-alist) 'avy-extras-action-mark-to-char)

  :bind
  (("C-H-s-m" . avy-goto-line-above)
   ("C-H-s-." . avy-goto-line-below)
   ("C-H-s-k" . avy-goto-word-1-above)
   ("C-H-s-l" . avy-goto-word-1-below)))
#+end_src

** avy-extras
:PROPERTIES:
:ID:       E8AFD4F9-439F-48F6-8C60-149CB87B5FEA
:END:


/[[file:extras/avy-extras.el][avy-extras]] collects my extensions for =avy=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package avy-extras
  :bind
  (("C-H-s-u" . avy-extras-goto-word-in-line-behind)
   ("C-H-s-p" . avy-extras-goto-word-in-line-ahead)
   ("C-H-s-," . avy-extras-goto-end-of-line-above)
   ("C-H-s-/" . avy-extras-goto-end-of-line-below)
   ("C-H-s-j" . avy-extras-goto-char-backward)
   ("C-H-s-;" . avy-extras-goto-char-forward)))
#+end_src

** writeroom-mode
:PROPERTIES:
:ID:       AD1CE3FE-8897-4593-BD37-FEA38630611A
:END:
:LOGBOOK:
CLOCK: [2023-03-25 Sat 11:05]--[2023-03-25 Sat 11:26] =>  0:21
CLOCK: [2022-09-14 Wed 18:43]--[2022-09-14 Wed 19:00] =>  0:17
CLOCK: [2022-02-04 Fri 11:23]--[2022-02-04 Fri 11:25] =>  0:02
CLOCK: [2021-12-12 Sun 21:14]--[2021-12-12 Sun 21:17] =>  0:03
CLOCK: [2021-05-28 Fri 20:40]--[2021-05-28 Fri 20:45] =>  0:05
CLOCK: [2021-05-27 Thu 19:37]--[2021-05-27 Thu 20:00] =>  0:23
CLOCK: [2021-05-19 Wed 22:40]--[2021-05-19 Wed 23:05] =>  0:25
CLOCK: [2021-05-19 Wed 21:54]--[2021-05-19 Wed 22:36] =>  0:42
CLOCK: [2021-04-13 Tue 07:25]--[2021-04-13 Tue 08:07] =>  0:42
CLOCK: [2021-04-05 Mon 18:53]--[2021-04-05 Mon 19:15] =>  0:22
CLOCK: [2021-03-30 Tue 12:34]--[2021-03-30 Tue 13:06] =>  0:32
CLOCK: [2021-03-30 Tue 21:45]--[2021-03-30 Tue 22:02] =>  0:17
:END:

/[[https://github.com/joostkremers/writeroom-mode][writeroom-mode]] provides distraction-free writing for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package writeroom-mode
  :custom
  (writeroom-global-effects '(writeroom-set-fullscreen
                              writeroom-set-alpha
                              writeroom-set-menu-bar-lines
                              writeroom-set-tool-bar-lines
                              writeroom-set-vertical-scroll-bars
                              writeroom-set-bottom-divider-width
                              (lambda (arg) (tab-bar-mode (* -1 arg)))))
  (writeroom-restore-window-config t) ; upon leaving `writeroom mode', restore pre-existing number of windows
  (writeroom-major-modes '(org-mode
                           elfeed-search-mode
                           elfeed-show-mode
                           eww-mode
                           eww-buffers-mode)) ; major modes activated in global-writeroom-mode
  (writeroom-fullscreen-effect 'maximized) ; disables annoying fullscreen transition effect on macos
  (writeroom-maximize-window t)

  :config
  (advice-add 'writeroom-mode :before (lambda (&rest args)
                                        "Set `writeroom-width' to the width of the window in which it is invoked."
                                        (setopt writeroom-width (window-total-width))))

  :bind
  ("H-u" . writeroom-mode))
#+end_src

** ace-link
:PROPERTIES:
:ID:       F1C54CDB-1E70-41D1-8FAB-A45598C5021A
:END:
:LOGBOOK:
CLOCK: [2022-07-15 Fri 13:48]--[2022-07-15 Fri 13:51] =>  0:03
CLOCK: [2022-07-10 Sun 11:50]--[2022-07-10 Sun 12:32] =>  0:42
CLOCK: [2022-07-03 Sun 09:54]--[2022-07-03 Sun 10:20] =>  0:26
CLOCK: [2021-10-10 Sun 13:02]--[2021-10-10 Sun 13:06] =>  0:04
CLOCK: [2021-08-14 Sat 14:46]--[2021-08-14 Sat 15:50] =>  1:04
CLOCK: [2021-06-27 Sun 17:26]--[2021-06-27 Sun 17:52] =>  0:26
CLOCK: [2021-06-25 Fri 21:24]--[2021-06-25 Fri 21:35] =>  0:11
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:47] =>  0:42
CLOCK: [2021-05-20 Thu 14:23]--[2021-05-20 Thu 14:32] =>  0:09
:END:

/[[https://github.com/abo-abo/ace-link][ace-link]] lets you quickly follow links in Emacs, Vimium-style./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ace-link
  :defer t)
#+end_src

** ace-link-extras
:PROPERTIES:
:ID:       BD522C3E-92F7-4D61-A697-8186F01E2BE7
:END:

/[[file:extras/ace-link-extras.el][ace-link-extras]] collects my extensions for =ace-link=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package ace-link-extras
  :after ace-link)
#+end_src

* date & time
:PROPERTIES:
:ID:       CE84D144-875A-492E-B6A1-6E71CBEACCD7
:END:
:LOGBOOK:
CLOCK: [2022-05-09 Mon 10:27]--[2022-05-09 Mon 10:35] =>  0:08
CLOCK: [2021-07-04 Sun 22:07]--[2021-07-04 Sun 22:41] =>  0:34
CLOCK: [2021-07-04 Sun 19:54]--[2021-07-04 Sun 20:13] =>  0:19
CLOCK: [2021-04-02 Fri 11:35]--[2021-04-02 Fri 13:10] =>  1:35
CLOCK: [2021-04-02 Fri 11:22]--[2021-04-02 Fri 11:28] =>  0:06
CLOCK: [2021-03-28 Sun 12:35]--[2021-03-28 Sun 13:01] =>  0:26
CLOCK: [2021-02-27 Sat 16:19]--[2021-02-27 Sat 17:17] =>  0:58
:END:

** calendar
:PROPERTIES:
:ID:       4F3AEDB7-C357-40BA-B670-DE392FAF8F7A
:END:


/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/calendar/calendar.el][calendar]] provides a collection of calendar-related functions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature calendar
  :custom
  (calendar-week-start-day 1)    ; week starts on Monday
  (calendar-set-date-style 'iso) ; this isn't the default?
  (calendar-time-display-form
   '(24-hours ":" minutes
              (when time-zone
                (concat " (" time-zone ")"))))
  (calendar-mark-holidays-flag nil)
  (calendar-time-zone-style 'numeric)
  (holiday-bahai-holidays nil)

  :bind
  (("C-d" . calendar)
   ("s-=" . "C-u A-s-=")
   :map calendar-mode-map
   ("H-m" . calendar-set-mark)
   ("A-C-s-u" . calendar-backward-day)
   ("A-C-s-i" . calendar-backward-week)
   ("A-C-s-o" . calendar-forward-week)
   ("A-C-s-p" . calendar-forward-day)
   ("A-C-s-m" . calendar-backward-month)
   ("A-C-s-," . calendar-backward-year)
   ("A-C-s-." . calendar-forward-year)
   ("A-C-s-/" . calendar-forward-month)
   ("C-f" . nil)
   ("C-b" . nil)
   ("C-n" . nil)
   ("C-p" . nil)
   ("=" . calendar-count-days-region)))
#+end_src

** calendar-extras
:PROPERTIES:
:ID:       746F8B0D-5817-4FCC-9DA5-C198CE632F92
:END:
/[[file:extras/calendar-extras.el][calendar-extras]] collects my extensions for =calendar=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package calendar-extras
  :after org-agenda
  :custom
  (calendar-extras-location-name "Buenos Aires")
  (calendar-extras-use-geolocation t))
#+end_src

** holidays
:PROPERTIES:
:ID:       08F898A1-71C0-4BF4-B6E8-5D6649DB230C
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/calendar/holidays.el#L98][holidays]] provides holiday functions for ~calendar~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature holidays
  :after org-agenda
  :config
  (dolist (holiday '((holiday-float 6 0 3 "Father's Day")
                     (holiday-float 5 0 2 "Mother's Day")))
    (delete holiday holiday-general-holidays)))
#+end_src

** org-gcal
:PROPERTIES:
:ID:       9E8AEF97-2E1A-489E-929A-CE5789EABFB9
:org-gcal-managed: org
:END:
:LOGBOOK:
CLOCK: [2023-05-20 Sat 08:56]--[2023-05-20 Sat 09:40] =>  0:44
CLOCK: [2023-03-28 Tue 13:25]--[2023-03-28 Tue 13:28] =>  0:03
CLOCK: [2022-07-15 Fri 11:10]--[2022-07-15 Fri 11:19] =>  0:09
CLOCK: [2022-07-11 Mon 15:51]--[2022-07-11 Mon 16:17] =>  0:26
CLOCK: [2022-07-03 Sun 10:53]--[2022-07-03 Sun 11:18] =>  0:25
CLOCK: [2022-06-27 Mon 12:00]--[2022-06-27 Mon 12:10] =>  0:10
CLOCK: [2022-06-02 Thu 12:05]--[2022-06-02 Thu 12:16] =>  0:11
CLOCK: [2022-05-07 Sat 07:24]--[2022-05-07 Sat 08:33] =>  1:09
CLOCK: [2021-12-06 Mon 12:52]--[2021-12-06 Mon 12:52] =>  0:00
CLOCK: [2021-11-21 Sun 20:11]--[2021-11-21 Sun 20:28] =>  0:17
CLOCK: [2021-11-17 Wed 11:49]--[2021-11-17 Wed 13:10] =>  1:21
CLOCK: [2021-10-10 Sun 21:33]--[2021-10-10 Sun 22:14] =>  0:41
CLOCK: [2021-10-04 Mon 18:43]--[2021-10-04 Mon 18:52] =>  0:09
CLOCK: [2021-10-04 Mon 18:11]--[2021-10-04 Mon 18:43] =>  0:32
CLOCK: [2021-09-29 Wed 23:08]--[2021-09-29 Wed 23:16] =>  0:08
CLOCK: [2021-09-29 Wed 22:54]--[2021-09-29 Wed 23:02] =>  0:08
CLOCK: [2021-09-29 Wed 22:12]--[2021-09-29 Wed 22:45] =>  0:33
CLOCK: [2021-09-27 Mon 20:51]--[2021-09-27 Mon 20:59] =>  0:08
CLOCK: [2021-08-02 Mon 18:47]--[2021-08-02 Mon 18:50] =>  0:03
CLOCK: [2021-08-02 Mon 08:30]--[2021-08-02 Mon 08:52] =>  0:22
CLOCK: [2021-07-26 Mon 21:15]--[2021-07-26 Mon 21:29] =>  0:14
CLOCK: [2021-07-22 Thu 12:23]--[2021-07-22 Thu 12:50] =>  0:27
CLOCK: [2021-04-02 Fri 13:56]--[2021-04-02 Fri 15:24] =>  1:28
:END:
/[[https://github.com/kidd/org-gcal.el][org-gcal]] integrates ~org-mode~ with Google Calendar./

(That's the actively maintained fork; the [[https://github.com/myuhe/org-gcal.el/issues/124#issuecomment-642859466][official repository]] is no longer maintained.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-gcal
  :ensure (:host github
                 :repo "kidd/org-gcal.el"
                 :build (:not elpaca--check-version)) ; to prevent elnode version error
  :after auth-source-pass org-agenda
  :custom
  (org-gcal-client-id (auth-source-pass-get "host" "auth-sources/org-gcal"))
  (org-gcal-client-secret (auth-source-pass-get 'secret "auth-sources/org-gcal"))
  (org-gcal-fetch-file-alist `((,(getenv "PERSONAL_GMAIL") . ,paths-file-calendar)))
  (org-gcal-recurring-events-mode 'top-level)
  (org-gcal-remove-api-cancelled-events nil) ; never remove cancelled events
  (org-gcal-notify-p nil)
  (org-gcal-up-days 1)
  (org-gcal-down-days 7)
  (org-gcal-auto-archive nil)
  (org-gcal-org-timestamp-property :deadline)

  :config
  ;; see the relevant section in this config file for more details on how to set
  ;; up `org-gcal' with asymmetric encryption
  (require 'plstore))
#+end_src

** org-gcal-extras
:PROPERTIES:
:ID:       BBED8E2E-2A29-4465-926A-22D531E6DBE7
:END:
/[[file:extras/org-gcal-extras.el][org-gcal-extras]] collects my extensions for =org-gcal=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-gcal-extras
  :after org-gcal
  :demand t)
#+end_src

** calfw
:PROPERTIES:
:ID:       05F8BF13-CF3A-43D7-8959-D19E0C7EB092
:END:
:LOGBOOK:
CLOCK: [2023-11-17 Fri 20:11]--[2023-11-17 Fri 20:41] =>  0:30
:END:

/[[https://github.com/haji-ali/emacs-calfw][calf]] is a calendar framework for Emacs./

The original package is no longer maintained. A [[https://github.com/haji-ali/emacs-calfw][fork]] by Abdul-Lateef Haji-Ali below added a few improvements. But that fork itself ceased to be maintained so I am now using my own fork.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package calfw
  :ensure (:host github
                 :repo "benthamite/emacs-calfw")
  :after org-agenda)
#+end_src

** calfw-org
:PROPERTIES:
:ID:       67CD7ECA-260B-4E09-B56B-6A39BAB78D5A
:END:
/[[https://github.com/benthamite/emacs-calfw/blob/master/calfw-org.el][calfw-org]] display org-agenda items in the calfw buffer./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package calfw-org
  :after calfw)
#+end_src

** calfw-blocks
:PROPERTIES:
:ID:       03DD73DD-6347-4D30-B103-A61718459C41
:END:

/[[https://github.com/ml729/calfw-blocks][calfw-blocks]] provides visual enhancements for calfw./

The original package appears to no longer be maintained, so I have created my own fork.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package calfw-blocks
  :ensure (calfw-blocks
             :host github
             :repo "benthamite/calfw-blocks")
  :after calfw)
#+end_src

** time
:PROPERTIES:
:ID:       88CCE9CB-8284-4C8B-8264-A1E54E299941
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/time.el#L2][time]] provides facilities to display the current date and time, and a new-mail indicator mode line./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature time
  :demand t
  :custom
  (zoneinfo-style-world-list '(("America/Buenos_Aires" "Buenos Aires")
                               ("Europe/London" "London")
                               ("Europe/Madrid" "Madrid")
                               ("America/New_York" "New York")
                               ("America/Los_Angeles" "San Francisco")
                               ("Europe/Stockholm" "Stockholm")))
  (world-clock-list t)
  (world-clock-time-format "%R %z (%Z)  %A %d %B")
  (world-clock-buffer-name "*world-clock*")
  (world-clock-timer-enable t)
  (world-clock-timer-second 60)

  (display-time-interval 1)
  (display-time-format "%a %e %b %T %z")
  (display-time-default-load-average nil)

  :config
  (display-time-mode)

  :bind
  ("M-A-t" . world-clock))
#+end_src

** timer-list
:PROPERTIES:
:ID:       5B9F0580-D100-4F53-8B99-7BEAE7E233A5
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature timer-list
  :config
  ;; disable warning
  (put 'list-timers 'disabled nil))
#+end_src

** tmr
:PROPERTIES:
:ID:       87D2EB00-727C-4CA3-85F1-B8D82D37B48D
:END:

/[[https://protesilaos.com/emacs/tmr][tmr]] set timers using a convenient notation./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package tmr
  :config
  (when (eq system-type 'darwin)
    (setopt tmr-sound-file "/System/Library/Sounds/Blow.aiff"))

  :bind
  ("A-t" . tmr))
#+end_src

** display-wttr
:PROPERTIES:
:ID:       E1DB2097-7273-4FAC-BA84-67D46815FC45
:END:

/[[https://git.sr.ht/~josegpt/display-wttr][display-wttr]] displays weather information in the mode line./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package display-wttr
  :disabled ; triggering lots of errors
  :after calendar-extras
  :custom
  (display-wttr-interval (* 15 60))
  (display-wttr-locations `(,calendar-extras-location-name))

  :config
  (display-wttr-mode))
#+end_src

* history
:PROPERTIES:
:ID:       20B0D7AB-5B27-4D80-A9D8-DAAAFCB27651
:END:

** savehist
:PROPERTIES:
:ID:       D411AA79-C8FE-4E03-B06E-1BED5B7688BC
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/savehist.el][savehist]] makes Emacs remember completion history across sessions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature savehist
  :custom
  (history-length t) ; unlimited history
  (savehist-save-minibuffer-history t)

  :config
  (savehist-mode))
#+end_src

** simple
:PROPERTIES:
:ID:       C7BA09A3-635F-4F31-A17A-F94F3B024522
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :defer t
  :config
  (with-eval-after-load 'savehist
    (dolist (var '(command-history
                   extended-command-history
                   kill-ring
                   mark-ring
                   shell-command-history
                   read-expression-history))
      (add-to-list 'savehist-additional-variables var))))
#+end_src

** saveplace
:PROPERTIES:
:ID:       8DE4A4B7-4B96-445F-BC1F-B10BBF181F53
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/saveplace.el][saveplace]] makes Emacs remember point position in file across sessions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature saveplace
  :config
  (save-place-mode))
#+end_src

** session
:PROPERTIES:
:ID:       F4D1CD7C-0BA9-4D20-8D99-399331682D1B
:END:

/[[https://github.com/emacsorphanage/session][session]] lets you use variables, registers and buffer places across sessions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package session
  :custom
  (session-globals-include '((kill-ring 100)
                             (session-file-alist 100 t)
                             (file-name-history 100)
                             search-ring regexp-search-ring))

  :hook
  (elpaca-after-init-hook . session-initialize))
#+end_src

** recentf
:PROPERTIES:
:ID:       C22F4A07-A237-498A-999D-F841F3B10074
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e819413e24d81875abaf81c281115e695ad5cc28/lisp/recentf.el][recentf]] makes Emacs remember the most recently visited files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature recentf
  :custom
  (recentf-max-saved-items 100)

  :config
  ;; github.com/emacscollective/no-littering#suggested-settings
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)

  :hook find-file-hook)
#+end_src

* search & replace
:PROPERTIES:
:ID:       9FDBBF3E-724F-4402-9DDB-F9349F65AB0E
:END:
:LOGBOOK:
CLOCK: [2021-05-23 Sun 15:31]--[2021-05-23 Sun 15:42] =>  0:11
CLOCK: [2021-05-22 Sat 22:23]--[2021-05-22 Sat 22:46] =>  0:23
CLOCK: [2021-04-04 Sun 19:29]--[2021-04-04 Sun 19:40] =>  0:11
CLOCK: [2021-03-17 Wed 16:40]--[2021-03-17 Wed 16:43] =>  0:03
:END:

** elgrep
:PROPERTIES:
:ID:       783E764B-7E5D-4CFB-9DE7-D87C5BF51518
:END:

/[[https://github.com/TobiasZawada/elgrep][elgrep]] is an Emacs implementation of grep that requires no external dependencies./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elgrep
  :bind
  (:map elgrep-mode-map
        ("r" . elgrep-edit-mode)
        ("s-c" . elgrep-save)))
#+end_src

** isearch
:PROPERTIES:
:ID:       4B274841-062C-4511-8FF3-C850BAB05905
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature isearch
  :custom
  (search-default-mode #'char-fold-to-regexp)
  (isearch-yank-on-move t)
  (isearch-lazy-count t)
  (lazy-count-prefix-format nil)
  (lazy-count-suffix-format " (%s/%s)")
  (isearch-allow-scroll 'unlimited)
  (search-upper-case t)
  (search-exit-option t) ; `t' is the default, but some alternative value may be more sensible

  :config
  (with-eval-after-load 'savehist
    (dolist (var '(regexp-search-ring search-ring))
      (add-to-list 'savehist-additional-variables var)))

  :hook
  (isearch-mode-end-hook . recenter-top-bottom)

  :bind
  (:map isearch-mode-map
        ("C-H-M-s" . isearch-delete-char)
        ("C-H-M-d" . "C-- C-H-M-s") ; delete forward char
        ("C-g" . isearch-abort) ; "quit once"
        ("C-H-g" . isearch-exit) ; "quit twice"
        ("C-. " . isearch-toggle-char-fold)
        ("C-," . isearch-forward-symbol-at-point)
        ("C-." . isearch-forward-thing-at-point)
        ("C-/" . isearch-complete)
        ("H-m" . isearch-toggle-lax-whitespace)
        ("C-a" . isearch-toggle-regexp)
        ("C-b" . isearch-beginning-of-buffer)
        ("C-d" . isearch-toggle-word)
        ("C-f" . isearch-highlight-lines-matching-regexp)
        ("C-i" . isearch-toggle-invisible)
        ("C-l" . isearch-yank-line)
        ("C-m" . isearch-toggle-symbol)
        ("C-n" . isearch-end-of-buffer)
        ("C-o" . isearch-occur)
        ("C-p" . isearch-highlight-regexp)
        ("C-v" . isearch-yank-kill)
        ("C-y" . isearch-forward-symbol-at-point)
        ("M-k" . isearch-ring-retreat)
        ("M-l" . isearch-ring-advance)
        ("C-e" . isearch-query-replace)))
#+end_src

To check: [[https://karthinks.com/software/bridging-islands-in-emacs-1/][Bridging Islands in Emacs: re-builder and query-replace-regexp | Karthinks]]

** isearch-extras
:PROPERTIES:
:ID:       6992A0D9-FF6A-4BF7-95C9-B3E3B25CD44C
:END:


/[[file:extras/isearch-extras.el][isearch-extras]] collects my extensions for =isearch=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package isearch-extras
  :config
  (advice-add 'isearch-mode :around #'isearch-extras-use-selection)

  :bind
  (:map isearch-mode-map
        ("C-<return>" . isearch-extras-exit-other-end)
        ("H-c" . isearch-extras-copy-match)
        ("C-p" . isearch-extras-project-search)
        ("C-l" . isearch-extras-consult-line)
        ("C-H-v" . isearch-extras-yank-kill-literally)))
#+end_src

** replace
:PROPERTIES:
:ID:       DC08C217-5005-4A65-986B-85EA876ECB6D
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature replace
  :custom
  ;; emacs.stackexchange.com/a/12318/32089
  (query-replace-from-history-variable 'regexp-search-ring)
  (case-replace nil)

  :bind
  (("C-H-a" . query-replace)
   ("C-H-s" . query-replace-regexp)))
#+end_src

** substitute
:PROPERTIES:
:ID:       CDB7BD03-86D2-4780-871E-205F20EFA367
:END:

/[[https://git.sr.ht/~protesilaos/substitute][substitute]] efficiently replaces targets in the buffer or context./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package substitute
  :ensure (:host github
                 :repo "protesilaos/substitute")
  :hook
  (substitute-post-replace-functions . substitute-report-operation)

  :bind
  (("A-H-b" . substitute-target-in-buffer)
   :map prog-mode-map
   ("A-H-d" . substitute-target-in-defun)))
#+end_src

** imenu
:PROPERTIES:
:ID:       CC1F3F93-2446-4399-A14D-9DCB6753D26B
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/imenu.el][imenu]] is a framework for mode-specific buffer indexes./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature imenu
  :defer t
  :custom
  (org-imenu-depth 3))
#+end_src

** pcre2el
:PROPERTIES:
:ID:       1E9DDAD1-9663-432D-8882-A875227AB6B2
:END:

/[[https://github.com/joddie/pcre2el][pcre2el]] supports conversion between PCRE, Emacs and rx regexp syntax./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pcre2el
  :defer t)
#+end_src

** wgrep
:PROPERTIES:
:ID:       928E0F8E-569F-4DCA-9F29-C0623C2973C7
:END:

/[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] lets you create a writable grep buffer and apply the changes to files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package wgrep
  :custom
  (wgrep-auto-save-buffer t)
  (wgrep-enable-key "r")

  :bind
  (:map wgrep-mode-map
   ("s-c" . wgrep-finish-edit)))
#+end_src

* minibuffer completion
:PROPERTIES:
:ID:       E83EC00B-0C94-44CD-9EC0-355992C99234
:END:
:LOGBOOK:
CLOCK: [2021-06-10 Thu 12:43]--[2021-06-10 Thu 12:49] =>  0:06
:END:

| package    | what it does                      |
|------------+-----------------------------------|
| [[id:970043EC-39A9-46AE-9CC9-1F5F2175BF70][vertico]]    | minibuffer completion UI          |
| [[id:C6144D48-2E3C-4033-AD6E-5D7EE175D9E1][consult]]    | minibuffer completion backend     |
| [[id:D0A453D1-784F-49E4-B238-ED009AF84EDB][orderless]]  | minibuffer completion styles      |
| [[id:C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68][marginalia]] | minibuffer completion annotations |
| [[id:19A4F21C-2169-4529-92E4-68E3A584DDAC][embark]]     | minibuffer completion actions     |

For an introduction to minibuffer completion, I recommend [[https://www.youtube.com/watch?v=d3aaxOqwHhI][this video]] by Protesilaos Stavrou. For a comprehensive overview of both minibuffer completion and completion at point, I recommend [[https://www.youtube.com/watch?v=fnE0lXoe7Y0][this video]] by Andrew Tropin.

** bindings
:PROPERTIES:
:ID:       7591FA5E-C016-47FF-9389-C833AB2F1A14
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/bindings.el][bindings]] defines standard key bindings and some variables./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature bindings
  :bind
  ("<C-i>" . complete-symbol))
#+end_src

** vertico
:PROPERTIES:
:ID:       970043EC-39A9-46AE-9CC9-1F5F2175BF70
:END:
:LOGBOOK:
CLOCK: [2022-06-21 Tue 20:10]--[2022-06-21 Tue 20:57] =>  0:47
:END:

/[[https://github.com/minad/vertico][vertico]] is a vertical completion UI based on the default completion system./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package vertico
  :ensure (:files (:defaults "extensions/*")
                  :includes (vertico-indexed
                             vertico-flat
                             vertico-grid
                             vertico-mouse
                             vertico-quick
                             vertico-buffer
                             vertico-repeat
                             vertico-reverse
                             vertico-directory
                             vertico-multiform
                             vertico-unobtrusive))
  :init
  (vertico-mode)

  :custom
  (vertico-multiform-commands
   '((consult-line buffer)
     (consult-imenu buffer)
     (consult-grep buffer)
     (isearch-extras-consult-line buffer)))
  (vertico-multiform-categories
   '((grid)))
  (vertico-cycle t)
  (vertico-count 16)

  :config
  (vertico-multiform-mode)

  :hook
  ;; youtu.be/L_4pLN0gXGI?t=779
  (rfn-eshadow-update-overlay-hook . vertico-directory-tidy)

  :bind
  (:map vertico-map
        ("<C-i>" . vertico-exit)
        ("M-f" . vertico-quick-exit)
        ("C-k" . vertico-previous-group)
        ("C-l" . vertico-next-group)
        ("C-H-M-w" . vertico-directory-up)))
#+end_src

** embark
:PROPERTIES:
:ID:       19A4F21C-2169-4529-92E4-68E3A584DDAC
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:10]--[2022-07-22 Fri 18:13] =>  0:03
CLOCK: [2022-07-21 Thu 21:18]--[2022-07-21 Thu 21:24] =>  0:06
:END:

/[[https://github.com/oantolin/embark][embark]] provides contextually relevant actions in completion menus and in normal buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package embark
  :custom
  (embark-confirm-act-all nil)

  :config
  (defvar-keymap embark-yasnippet-completion-actions
    :doc "Keymap for actions on yasnippet completions."
    :parent embark-general-map
    "d" #'consult-yasnippet-visit-snippet-file)
  (add-to-list 'embark-keymap-alist '(yasnippet . embark-yasnippet-completion-actions))

  (keymap-set embark-general-map "?" #'gptel-quick)
  (keymap-set embark-defun-map "R" #'gptel-extras-rewrite-defun)

  :bind
  (("C-;" . embark-act)
   ("C-H-;" . embark-act-all)
   ("C-h B" . embark-bindings)
   :map embark-general-map
   ("DEL" . nil)
   ("D" . delete-region)
   ("f" . helpful-symbol)
   :map embark-file-map
   ("D" . delete-region)
   :map embark-general-map
   ("I" . embark-insert)
   :map embark-identifier-map
   ("i" . citar-extras-open-in-ebib)
   :map embark-file-map
   ("H-c" . file-extras-copy-contents)))
#+end_src

** consult
:PROPERTIES:
:ID:       C6144D48-2E3C-4033-AD6E-5D7EE175D9E1
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:32]--[2023-03-18 Sat 13:14] =>  0:42
CLOCK: [2022-07-15 Fri 21:21]--[2022-07-15 Fri 21:44] =>  0:23
CLOCK: [2022-07-15 Fri 13:51]--[2022-07-15 Fri 14:22] =>  0:31
CLOCK: [2022-07-09 Sat 09:56]--[2022-07-09 Sat 10:33] =>  0:37
CLOCK: [2022-06-22 Wed 11:05]--[2022-06-22 Wed 11:10] =>  0:05
CLOCK: [2022-06-21 Tue 21:48]--[2022-06-21 Tue 23:04] =>  1:16
CLOCK: [2022-06-21 Tue 17:53]--[2022-06-21 Tue 18:40] =>  0:47
:END:

/[[https://github.com/minad/consult][consult]] provides practical commands based on the Emacs completion function =completing-read=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package consult
  :init
  (with-eval-after-load 'helpful
    (bind-keys :map helpful-mode-map
               ("s-j" . consult-outline)))
  (with-eval-after-load 'markdown-mode
    (bind-keys :map markdown-mode-map
               ("s-j" . consult-outline)))
  (with-eval-after-load 'gfm-mode
    (bind-keys :map gfm-mode-map
               ("s-j" . consult-outline)))
  (with-eval-after-load 'outline
    (bind-keys :map outline-mode-map
               ("s-j" . consult-outline)))

  :custom
  ;; we call this wrapper to silence the annoying two lines of debug info that
  ;; `mdfind' outputs, which show briefly in the echo area and pollute the
  ;; `consult' search field. the file is in the `bin' directory of this repo.
  (consult-locate-args "mdfind-wrapper")
  (consult-narrow-key "<")
  (consult-widen-key ">")
  (consult-grep-max-columns nil)

  :config
  (setopt consult-ripgrep-args (concat consult-ripgrep-args " --hidden")) ; include hidden files

  :bind
  (("C-H-l" . consult-line)
   ("C-f" . consult-find)
   ("s-j" . consult-imenu)
   ("H-b" . consult-buffer)
   ("H-B" . consult-project-buffer)
   ("A-H-i" . consult-info)
   ("H-R" . consult-history)
   ("H-V" . consult-yank-pop)))
#+end_src

** consult-extras
:PROPERTIES:
:ID:       163D3CB3-B2D9-44DB-9728-E2F5CA7600A8
:END:


/[[file:extras/consult-extras.el][consult-extras]] collects my extensions for =consult=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package consult-extras
  :bind
  (("H-F" . consult-extras-locate-file-current)
   ("H-k" . consult-extras-locate-current)
   ("H-p" . consult-extras-ripgrep-current)))
#+end_src

** consult-dir
:PROPERTIES:
:ID:       3250EBD7-513E-439F-972F-B43C8214AC46
:END:

/[[https://github.com/karthink/consult-dir][consult-dir]] enables insertion of paths into the minibuffer prompt./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package consult-dir
  :after consult
  :custom
  (consult-dir-default-command 'consult-dir-dired)

  :bind
  (:map minibuffer-mode-map
        ("H-d" . consult-dir)))
#+end_src

** consult-git-log-grep
:PROPERTIES:
:ID:       BA613BB1-A3CF-4C47-973A-6B54091B3C0E
:END:

/[[https://github.com/ghosty141/consult-git-log-grep][consult-git-log-grep]] provides an interactive way to search the git log using =consult=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package consult-git-log-grep
  :after consult
  :defer t)
#+end_src

** consult-yasnippet
:PROPERTIES:
:ID:       437A790A-467F-46CB-9EE3-25AA91D43D89
:END:
:LOGBOOK:
CLOCK: [2022-06-27 Mon 20:12]--[2022-06-27 Mon 20:16] =>  0:04
:END:

/[[https://github.com/mohkale/consult-yasnippet/tree/cdb256d2c50e4f8473c6052e1009441b65b8f8ab][consult-yasnippet]] provides =consult= functionality to =yasnippet=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package consult-yasnippet
  :config
  ;; we delay previews to avoid accidentally triggering snippets that execute elisp code
  (consult-customize consult-yasnippet :preview-key nil)

  (add-to-list 'vertico-multiform-commands
               '(consult-yasnippet grid))

  :bind
  ("C-H-y" . consult-yasnippet))
#+end_src

** embark-consult
:PROPERTIES:
:ID:       C7BDCA9D-F507-4C25-9AF8-1EBB86D99A61
:END:
:LOGBOOK:
CLOCK: [2022-07-19 Tue 18:17]--[2022-07-19 Tue 18:35] =>  0:18
:END:

/[[https://github.com/oantolin/embark/blob/master/embark-consult.el][embark-consult]] provides integration between =embark= and =consult=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package embark-consult
  :after embark consult
  :hook
  (embark-collect-mode-hook . consult-preview-at-point-mode))
#+end_src

** marginalia
:PROPERTIES:
:ID:       C1B0678E-7334-4AF3-B1FE-9D63DFB6BE68
:END:

/[[https://github.com/minad/marginalia][marginalia]] displays annotations (such as docstrings) next to completion candidates./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src

** orderless
:PROPERTIES:
:ID:       D0A453D1-784F-49E4-B238-ED009AF84EDB
:END:

/[[https://github.com/oantolin/orderless][orderless]] is an completion style that matches multiple regexps in any order./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package orderless
  :custom
  (completion-styles '(orderless basic partial-completion))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (orderless-matching-styles '(orderless-regexp)))
#+end_src

** orderless-extras
:PROPERTIES:
:ID:       2B2BED63-EC35-4DD6-B6A4-DC8E06817290
:END:


/[[file:extras/orderless-extras.el][orderless-extras]] collects my extensions for =orderless=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package orderless-extras
  :after orderless
  :custom
  (orderless-style-dispatchers '(orderless-extras-flex-dispatcher
                                 orderless-extras-initialism-dispatcher
                                 orderless-extras-prefixes-dispatcher
                                 orderless-extras-exclusion-dispatcher)))
#+end_src

** nerd-icons-completion
:PROPERTIES:
:ID:       1a127c06-43b5-435b-a4e5-becc61997794
:END:

/[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]] displays nerd icons in completion candidates./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)

  :hook
  (marginalia-mode-hook . nerd-icons-completion-marginalia-setup))
#+end_src

** ido
:PROPERTIES:
:ID:       458A26BD-1601-41D9-BC7E-7630466BC374
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 20:14]--[2022-07-14 Thu 20:17] =>  0:03
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/ido.el][ido]] is a completion package for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ido
  :after dired
  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'ido-file-history))

  :bind
  (:map dired-mode-map
        ("i" . ido-find-file)))
#+end_src

** which-key
:PROPERTIES:
:ID:       7781DC87-0D61-4482-91EE-6D2E1F8E122D
:END:

/[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in a popup./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature which-key
  :defer 5
  :custom
  (which-key-idle-delay 0)

  :config
  (which-key-mode))
#+end_src

* completion at point
:PROPERTIES:
:ID:       9037BE0D-FD13-4D33-8514-BE503421774D
:END:

| package | what it does                |
|---------+-----------------------------|
| [[id:35370B0F-9EBD-433F-B59C-576EE8A69772][corfu]]   | completion at point UI      |
| [[id:5A103245-9DC3-4D95-96D7-2161F6CCD0B1][cape]]    | completion at point backend |

** corfu
:PROPERTIES:
:ID:       35370B0F-9EBD-433F-B59C-576EE8A69772
:END:

/[[https://github.com/minad/corfu][corfu]] enhances completion at point with a small completion popup./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package corfu
  :ensure (:files (:defaults "extensions/*")
                  :includes (corfu-info
                             corfu-echo
                             corfu-history
                             corfu-popupinfo
                             corfu-quick))
  :after faces-extras
  :custom
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-quit-no-match t)        ;; Automatically quit if there is no match
  (corfu-cycle vertico-cycle)
  (corfu-count vertico-count)
  (corfu-auto-prefix 3)
  (corfu-auto-delay 0.5)
  (corfu-popupinfo-delay 0.1)

  :config
  (faces-extras-set-and-store-face-attributes
   '((corfu-default :family faces-extras-fixed-pitch-font :height 1)))

  (global-corfu-mode)

  (with-eval-after-load 'savehist
    (add-to-list 'corfu-history 'savehist-additional-variables))

  :hook
  (prog-mode-hook . corfu-popupinfo-mode)
  (prog-mode-hook . corfu-echo-mode)
  (corfu-mode-hook . corfu-history-mode)

  :bind
  (:map corfu-map
        ("M-f" . corfu-quick-complete)
        ("TAB" . nil)
        ("<tab>" . nil)
        ("<return>" . corfu-complete)
        ("RET" . corfu-complete)))
#+end_src

** corfu-extras
:PROPERTIES:
:ID:       061EBAB9-2846-4922-BBAF-C29E11FAA476
:END:


/[[file:extras/corfu-extras.el][corfu-extras]] collects my extensions for =corfu=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package corfu-extras
  :hook
  (minibuffer-setup-hook . corfu-extras-enable-always-in-minibuffer)

  :bind
  (:map corfu-map
        ("M-m" . corfu-extras-move-to-minibuffer)))
#+end_src

** cape
:PROPERTIES:
:ID:       5A103245-9DC3-4D95-96D7-2161F6CCD0B1
:END:

/[[https://github.com/minad/cape][cape]] provides completion-at-point extensions/

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package cape
  :after corfu
  :custom
  (cape-dabbrev-min-length 4)

  :config
  (defun cape-enable-completions ()
    "Enable file and emoji completion in the current buffer."
    (setq-local completion-at-point-functions
                (cons #'cape-file completion-at-point-functions)
                completion-at-point-functions
                (cons #'cape-emoji completion-at-point-functions)))

  :hook
  ((text-mode-hook prog-mode-hook) . cape-enable-completions))
#+end_src

** corg
:PROPERTIES:
:ID:       4E7EF83E-6E4B-4F17-B0F6-B018C8BA8A08
:END:

/[[https://github.com/isamert/corg.el][corg]] provides provides completion-at-point for org-mode source block and dynamic block headers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package corg
  :ensure (:host github
                 :repo "isamert/corg.el")
  :hook
  (org-mode-hook . corg-setup))
#+end_src

* help
:PROPERTIES:
:ID:       7F0CBD06-FDB3-4889-91CE-D8A25D4F2613
:END:
:LOGBOOK:
CLOCK: [2021-07-04 Sun 11:55]--[2021-07-04 Sun 12:05] =>  0:10
CLOCK: [2021-05-24 Mon 20:57]--[2021-05-24 Mon 21:07] =>  0:10
CLOCK: [2021-05-21 Fri 17:13]--[2021-05-21 Fri 17:47] =>  0:34
CLOCK: [2021-05-21 Fri 16:52]--[2021-05-21 Fri 17:04] =>  0:12
:END:

** help
:PROPERTIES:
:ID:       B4F00E3C-2682-486D-B05A-E983ACC82D09
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature help
  :custom
  (help-window-select t)

  :config
  (lossage-size 10000)

  :bind
  (("C-h C-k" . describe-keymap)
   ("C-h C-." . display-local-help)
   :map help-mode-map
   ("f" . ace-link-help)
   :map input-decode-map
   ([?\C-m] . [C-m])
   ([?\C-i] . [C-i])))
#+end_src

** help-at-pt
:PROPERTIES:
:ID:       263F5A59-1B63-47BC-B77B-8165FBBE3E75
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature help-at-pt
  :custom
  (help-at-pt-display-when-idle 'never)
  (help-at-pt-timer-delay 1) ; show help immediately when enabled

  :init
  (help-at-pt-set-timer)) ; set timer, thus enabling local help
#+end_src

** helpful
:PROPERTIES:
:ID:       6DCDFA24-4561-43CD-9D82-7C870A1044D1
:END:
:LOGBOOK:
CLOCK: [2021-11-27 Sat 14:54]--[2021-11-27 Sat 15:00] =>  0:06
CLOCK: [2021-05-11 Tue 10:01]--[2021-05-11 Tue 10:12] =>  0:11
CLOCK: [2021-04-04 Sun 22:14]--[2021-04-04 Sun 22:33] =>  0:19
:END:

/[[https://github.com/Wilfred/helpful][helpful]] enhances the Emacs help buffer./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package helpful
  :config
  ;; always use `helpful', even when `describe-function' is called by a program
  ;; (e.g. `transient')
  (advice-add 'describe-function :override #'helpful-function)

  :hook
  (minibuffer-setup-hook . (lambda () (require 'helpful)))

  :bind
  (("C-h k" . helpful-key)
   ("C-h f" . helpful-function)
   ("C-h c" . helpful-command)
   ("C-h o" . helpful-symbol)
   ("C-h v" . helpful-variable)
   ("C-h ." . helpful-at-point)
   :map helpful-mode-map
   ("f" . ace-link-help)
   ("w" . file-extras-copy-as-kill-dwim)))
#+end_src

** info
:PROPERTIES:
:ID:       28966DB8-E893-4AEA-A7BD-8C18B8A97592
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature info
  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'Info-history-list))

  :bind
  (:map Info-mode-map
        ("f" . ace-link-info)
        ("m" . Info-prev)
        ("/" . Info-next)
        ("," . Info-up)
        ("j" . Info-backward-node)
        (";" . Info-forward-node)
        ("s-j" . Info-menu)))
#+end_src

** man
:PROPERTIES:
:ID:       5621ACF8-E2E1-41DE-8994-F26DF80C5246
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature man
  :bind
  (:map Man-mode-map
        ("f" . ace-link-man)))
#+end_src

** woman
:PROPERTIES:
:ID:       421D3C11-CDD5-44B7-9262-10FD172F1094
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature woman
  :bind
  (:map woman-mode-map
        ("f" . ace-link-woman)))
#+end_src

** shortdoc
:PROPERTIES:
:ID:       5422C312-C976-4C9E-AE27-9D1771F8127C
:END:

/[[https://github.com/emacs-mirror/emacs/blob/e7260d4eb3ed1bebcaa9e2b934f162d4bb42e413/lisp/emacs-lisp/shortdoc.el][shortdoc]] provides short function summaries./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature shortdoc
  :bind
  ("C-h u" . shortdoc-display-group))
#+end_src

** find-func
:PROPERTIES:
:ID:       CCC22544-B620-4C24-A419-1C153AF2A9E8
:END:

/find-func finds the definition of the Emacs Lisp function near point./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature find-func
  :bind
  ("M-L" . find-library))
#+end_src

** elisp-refs
:PROPERTIES:
:ID:       238DF78B-035A-48B1-8F8F-E9E7F1D4BC67
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature elisp-refs
  :bind (:map elisp-refs-mode-map
              ("f" . ace-link-help)))
#+end_src

** elisp-demos
:PROPERTIES:
:ID:       DCEBBA6C-04D4-4168-9FCB-772876C36E37
:END:

/[[https://github.com/xuchunyang/elisp-demos][elisp-demos]] displays examples for many Elisp functions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elisp-demos
  :after helpful
  :init
  (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
#+end_src

* keyboard macros
:PROPERTIES:
:ID:       ADB25EC1-6E97-4057-AEBD-FB7B7E4503CF
:END:

** kmacro
:PROPERTIES:
:ID:       92DE0CE6-CA2B-4D43-84D1-EE2B5B068197
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 17:58]--[2021-07-25 Sun 18:03] =>  0:05
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature kmacro
  :config
  (kmacro-set-counter 1)
  (with-eval-after-load 'savehist
    (dolist (var '(kmacro-ring last-kbd-macro))
      (add-to-list 'savehist-additional-variables var)))

  :bind
  (("A-H-M-s-h" . kmacro-end-or-call-macro) ; = H-h, to circumvent OSX mapping
   ("H-H" . kmacro-start-macro-or-insert-counter)
   ("A-C-H-s-h" . kmacro-set-counter)
   ("A-h" . name-last-kbd-macro)
   ("M-h" . kmacro-edit-macro)
   ("M-A-h" . kmacro-bind-to-key)))
#+end_src

** kmacro-extras
:PROPERTIES:
:ID:       13CB9BBA-95F7-446A-A6DB-924C5F62C1C4
:END:


/[[file:extras/kmacro-extras.el][kmacro-extras]] collects my extensions for =kmacro=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package kmacro-extras
  :bind
  ("C-A-h" . kmacro-extras-counter-toggle-alpha-number))
#+end_src

* shell
:PROPERTIES:
:ID:       C97337A7-A91F-49DA-9F33-6556937E7AFC
:END:

** simple
:PROPERTIES:
:ID:       A34DA7F2-47E4-400E-B2C8-167BCAEA73E7
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :custom
  (shell-command-switch "-ic") ; https://stackoverflow.com/a/12229404/4479455
  (async-shell-command-buffer 'new-buffer)) ; don't ask for confirmation before running command in a new buffer
#+end_src

** shell
:PROPERTIES:
:ID:       231A8710-B820-4761-ABF8-5BE648908CD1
:END:
:LOGBOOK:
CLOCK: [2022-09-02 Fri 18:00]--[2022-09-02 Fri 18:07] =>  0:07
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature shell
  :init
  ;; remove maddening "saving session" messages in non-interactive shells
  (let ((filtered-env
       (seq-filter
        (lambda (var)
          (let ((var-name (car (split-string var "="))))
            (not (member var-name '("TERM_PROGRAM" "TERM_SESSION_ID")))))
        process-environment)))
  (setq process-environment filtered-env
        shell-command-environment filtered-env))

  :bind
  (("A-s" . shell)
  :map shell-mode-map
   ("M-p" . nil)
   ("M-n" . nil)
   ("M-k" . comint-previous-input)
   ("M-l" . comint-next-input)))
#+end_src

** eshell
:PROPERTIES:
:ID:       ABD03BEF-8E02-43AF-A137-AE9F9906704C
:END:
:LOGBOOK:
CLOCK: [2022-08-21 Sun 19:42]--[2022-08-21 Sun 20:00] =>  0:18
CLOCK: [2022-06-17 Fri 17:11]--[2022-06-17 Fri 17:41] =>  0:30
CLOCK: [2021-11-19 Fri 12:59]--[2021-11-19 Fri 13:39] =>  0:40
CLOCK: [2021-10-14 Thu 23:18]--[2021-10-14 Thu 23:31] =>  0:13
CLOCK: [2021-07-16 Fri 10:48]--[2021-07-16 Fri 11:04] =>  0:16
CLOCK: [2021-04-15 Thu 21:10]--[2021-04-15 Thu 21:30] =>  0:20
CLOCK: [2021-04-07 Wed 12:42]--[2021-04-07 Wed 13:09] =>  0:27
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature eshell
  :after simple
  :custom
  (eshell-banner-message "")
  (eshell-save-history-on-exit t)
  (eshell-hist-ignoredups t)
  (eshell-history-size 100000)
  (eshell-last-dir-ring-size 1000)

  :config
  (require 'esh-mode)

  :bind
  (("A-e" . eshell)
   :map eshell-mode-map
   ("<tab>" . yas-next-field-or-maybe-expand)
   ("TAB" . yas-next-field-or-maybe-expand) ; why is this necessary for eshell only?
   ("C-H-M-z" . eshell-kill-input)
   ("A-C-s-m" . beginning-of-line)
   ("M-k" . eshell-previous-matching-input-from-input)
   ("M-l" . eshell-next-matching-input-from-input)
   ("s-l" . eshell/clear)
   ("s-d" . eshell-send-eof-to-process)
   ("M-p" . nil)
   ("M-n" . nil)))
#+end_src

** em-hist
:PROPERTIES:
:ID:       692C4FF8-FD07-4D35-A9B3-A87F0E9A1B53
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature em-hist
  :defer t
  :custom
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t))
#+end_src

** eshell-syntax-highlighting
:PROPERTIES:
:ID:       960266D6-7B07-436B-B25E-F59FBDCB818A
:END:

/[[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]] provides syntax highlighting for eshell-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package eshell-syntax-highlighting
  :after eshell
  :hook
  (eshell-mode-hook . eshell-syntax-highlighting-global-mode))
#+end_src

** dwim-shell-command
:PROPERTIES:
:ID:       89FC07FE-AB08-4C9C-B999-73D176458C64
:END:

/[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] supports Emacs shell commands with dwim behaviour./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dwim-shell-command
  :ensure (:host github
           :repo "xenodium/dwim-shell-command")
  :defer t)
#+end_src

** eat
:PROPERTIES:
:ID:       80E53FAD-1669-408C-A45D-9232C2D51924
:END:


/[[https://codeberg.org/akib/emacs-eat][eat]] provides a visual command line for eshell./
#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package eat
  :ensure (:host codeberg
                 :repo "akib/emacs-eat"
                 :files ("*.el" ("term" "term/*.el") "*.texi"
                         "*.ti" ("terminfo/e" "terminfo/e/*")
                         ("terminfo/65" "terminfo/65/*")
                         ("integration" "integration/*")
                         (:exclude ".dir-locals.el" "*-tests.el")))
  :hook
  (eshell-load-hook . eat-eshell-mode)
  (eshell-load-hook . eat-eshell-visual-command-mode))
#+end_src

* spelling & grammar
:PROPERTIES:
:ID:       CC425FA6-7E2B-45EC-82DD-6D4402C3BE5C
:END:

** jinx
:PROPERTIES:
:ID:       23D402FB-7C7D-454B-9895-B147F0C9950D
:END:

/[[https://github.com/minad/jinx][jinx]] is a highly performant spell-checker for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package jinx
  :after faces-extras
  :custom
  (jinx-languages "en")

  :config
  (faces-extras-set-and-store-face-attributes
   '((jinx-misspelled :underline '(:color "#008000" :style wave))))

  (add-to-list 'vertico-multiform-categories
               '(jinx grid (vertico-grid-annotate . 20)))

  :hook
  ((text-mode-hook prog-mode-hook conf-mode-hook) . jinx-mode)

  :bind
  (("M-p" . jinx-correct)
   ("A-M-p" . jinx-extras-toggle-languages)))
#+end_src

** jinx-extras
:PROPERTIES:
:ID:       7C91CA35-275E-446A-ACE8-1214310479BB
:END:


/[[file:extras/jinx-extras.el][jinx-extras]] collects my extensions for =jinx=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package jinx-extras
  :after jinx)
#+end_src

** flycheck
:PROPERTIES:
:ID:       E407F295-B534-4195-A98C-10A131F391D9
:END:

/[[https://github.com/flycheck/flycheck][flycheck]] is a syntax-checker for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package flycheck
  :after faces-extras
  :custom
  ;; move temporary flycheck files to a temporary directory
  (flycheck-temp-prefix (concat temporary-file-directory "flycheck-"))
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-indication-mode nil)
  (flycheck-display-errors-delay 0.5)
  (flycheck-checker-error-threshold 10000)
  ;; https://github.com/skeeto/elfeed/pull/448#issuecomment-1120336279
  (flycheck-global-modes '(not . (elfeed-search-mode)))

  :config
  (faces-extras-set-and-store-face-attributes
   '((flycheck-error :underline '(:color "#ff0000" :style wave))
     (flycheck-warning :underline '(:color "#0000ff" :style wave))))

  :hook
  (find-file-hook . global-flycheck-mode)
  (org-src-mode-hook . (lambda ()
                         "Disable `emacs-lisp-checkdoc' in `org-src' blocks."
                         (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))

  (after-change-major-mode-hook . (lambda ()
                                    "Disable flycheck in selected buffers."
                                    (when (member (buffer-name) '("*scratch*" "notes"))
                                      (flycheck-mode -1))))

  :bind
  ("M-k" . flycheck-next-error))
#+end_src

** consult-flycheck
:PROPERTIES:
:ID:       C205D49D-F578-416E-8047-FC7633D6E4D3
:END:

/[[https://github.com/minad/consult-flycheck][consult-flycheck]] integrates ~flycheck~ with ~consult~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package consult-flycheck
  :after consult flyckeck)
#+end_src

** flycheck-ledger
:PROPERTIES:
:ID:       35BCB962-B49F-43D9-A7E8-269CE61EF6C8
:END:

/[[https://github.com/purcell/flycheck-ledger][flycheck-ledger]] provides ~flycheck~ support for ~ledger-mode~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package flycheck-ledger
  :after flycheck ledger-mode)
#+end_src

** flycheck-languagetool
:PROPERTIES:
:ID:       761BF4F2-8821-42A6-852C-4C87A248EF90
:END:

/[[https://github.com/emacs-languagetool/flycheck-languagetool][flycheck-languagetool]] provides ~flycheck~ support for [[https://languagetool.org/][LanguageTool]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package flycheck-languagetool
  :after flycheck
  :init
  (setopt flycheck-languagetool-server-jar
        (expand-file-name (file-name-concat paths-dir-external-repos "LanguageTool/languagetool-server.jar")))

  :config
  ;; the package doesn't provide a general way of disabling a rule, but as an
  ;; imperfect workaround we extend the list of rules to ignore when
  ;; spell-checking is active; this works well for rules in prose buffers, since
  ;; I normally have spell-checking enabled there.
  (dolist (rule '("ARROWS"
                  "WHITESPACE_RULE"
                  "DATE_NEW_YEAR" ; throws warning with every org-clock line
                  ))
    (add-to-list 'flycheck-languagetool--spelling-rules rule))

  (defun flycheck-languagetool-enable ()
    "Enable `flycheck-languagetool' in selected buffers."
    (unless (derived-mode-p 'forge-post-mode
                            'gfm-mode
                            'mhtml-mode
                            'flycheck-error-message-mode
                            'mu4e-compose-mode
                            'mu4e-view-mode
                            'org-journal-mode
                            'org-msg-edit-mode)
      (flycheck-select-checker 'languagetool)))

  :hook
  ((markdown-mode-hook
    org-mode-hook
    org-msg-edit-mode-hook) . flycheck-languagetool-enable))
#+end_src

*** TODO [#6] Create command to toggle languagetool
:PROPERTIES:
:ID:       554BE364-0D93-46F4-BCA1-E872B1B2C336
:END:

*** TODO [#7] Submit patch for persistent error
:PROPERTIES:
:ID:       74AC88E6-2752-44AE-A1F8-D3FE2BA2AE68
:END:

See [[id:CBEE980E-2D38-4D73-A806-FF824EE5305C][Claude discussion]].

** lsp-mode
:PROPERTIES:
:ID:       E9D2E6CA-5256-4776-801F-13281BD390C9
:END:
/[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is an Emacs client/library for the Language Server Protocol./

I only use =lsp= with =lsp-grammarly=. (There are versions of Grammarly for =flycheck= and =flyspell=, but they do not support premium plans.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package lsp-mode
  :custom
  (lsp-warn-no-matched-clients nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-auto-guess-root t) ; disable annoying prompt to import project
  (lsp-modeline-diagnostics-enable nil)

  :hook
  (lsp-mode . lsp-enable-which-key-integration)

  :bind
  ("A-H-g" . (lambda () (interactive) (if lsp-mode (lsp-disconnect) (lsp)))))
#+end_src

** grammarly
:PROPERTIES:
:ID:       C87EAC5F-7831-469C-96FB-603397C51925
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 14:54]--[2023-04-08 Sat 16:25] =>  1:31
:END:

/[[https://github.com/emacs-grammarly/grammarly][grammarly]] is an API interface for [[https://www.grammarly.com/][Grammarly]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package grammarly
  :after tlon
  :defer t
  :custom
  (grammarly-username tlon-email-shared)
  (grammarly-password (auth-source-pass-get 'secret (concat "tlon/core/grammarly.com/" tlon-email-shared))))
#+end_src

** lsp-grammarly
:PROPERTIES:
:ID:       2D0C20F1-1CE6-45F9-AA4B-46FB02DD0271
:END:
:LOGBOOK:
CLOCK: [2022-09-29 Thu 18:50]--[2022-09-29 Thu 21:20] =>  2:30
CLOCK: [2021-11-27 Sat 21:56]--[2021-11-27 Sat 22:48] =>  0:52
CLOCK: [2021-11-27 Sat 19:44]--[2021-11-27 Sat 20:17] =>  0:33
CLOCK: [2021-11-27 Sat 19:23]--[2021-11-27 Sat 19:26] =>  0:03
CLOCK: [2021-11-27 Sat 19:09]--[2021-11-27 Sat 19:23] =>  0:14
:END:

/[[https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammarly]] provides ~lsp-mode~ support for Grammarly./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package lsp-grammarly
  :after lsp-mode grammarly
  :custom
  (lsp-grammarly-suggestions-split-infinitive nil)
  (lsp-grammarly-suggestions-preposition-at-the-end-of-sentence nil)
  ;; 🙄
  (lsp-grammarly-suggestions-possibly-biased-language-age-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-disability-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-family-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-gender-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-human-rights nil)
  (lsp-grammarly-suggestions-possibly-biased-language-human-rights-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-lgbtqia-related nil)
  (lsp-grammarly-suggestions-possibly-biased-language-race-ethnicity-related nil)
  (lsp-grammarly-suggestions-possibly-politically-incorrect-language nil))
#+end_src

* prose
:PROPERTIES:
:ID:       9C33C68A-B82E-4898-B967-337B7D0619EE
:END:

** text-mode
:PROPERTIES:
:ID:       0C671548-8B32-43D6-9F28-88A6B7E3AA06
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature text-mode
  :hook
  (text-mode-hook . simple-extras-visual-line-mode-enhanced)
  (text-mode-hook . (lambda ()
                      "Disable ispell completion in text mode."
                      (remove-hook 'completion-at-point-functions #'ispell-completion-at-point t))))
#+end_src

** atomic-chrome
:PROPERTIES:
:ID:       D7CE2507-FDB5-44E9-A129-C18E17590476
:END:
:LOGBOOK:
CLOCK: [2021-05-15 Sat 18:11]--[2021-05-15 Sat 18:19] =>  0:08
CLOCK: [2021-04-17 Sat 21:56]--[2021-04-17 Sat 22:07] =>  0:11
CLOCK: [2021-02-11 Thu 20:46]--[2021-02-11 Thu 20:54] =>  0:08
CLOCK: [2021-02-11 Thu 19:59]--[2021-02-11 Thu 20:02] =>  0:03
:END:

/[[https://github.com/alpha22jp/atomic-chrome][atomic chrome]] enables editing of browser input fields in Emacs./

I use it in combination with the [[https://ghosttext.fregante.com/][Ghost Text]] browser extension.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package atomic-chrome
  :defer 10
  :custom
  (atomic-chrome-default-major-mode 'markdown-mode)
  (atomic-chrome-url-major-mode-alist
   '(("github\\.com" . gfm-mode)
     ("wikipedia\\.org" . mediawiki-mode)
     ("timelines\\.issarice\\.com" . mediawiki-mode)))

  :config
  (atomic-chrome-start-server)

  :bind
  (:map atomic-chrome-edit-mode-map
        ("s-c" . atomic-chrome-close-current-buffer)))
#+end_src

** markdown-mode
:PROPERTIES:
:ID:       3E05C5A3-B0E2-4800-B497-5AA1F6B39116
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 21:36]--[2021-12-11 Sat 22:05] =>  0:29
CLOCK: [2021-11-17 Wed 17:19]--[2021-11-17 Wed 17:27] =>  0:08
CLOCK: [2021-10-19 Tue 12:32]--[2021-10-19 Tue 13:19] =>  0:47
:END:

/[[https://github.com/jrblevin/markdown-mode][markdown-mode]] is a major mode for editing Markdown-formatted text./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package markdown-mode
  :custom
  (markdown-fontify-code-blocks-natively t)
  (markdown-command "pandoc --from markdown --to html")
  (markdown-disable-tooltip-prompt t)
  (markdown-italic-underscore t)

  :config
  ;; pop code block indirect buffers in the same window, mirroring the org behavior
  (add-to-list 'display-buffer-alist
             '("\\*edit-indirect.*\\*"
               (display-buffer-same-window)))

  :bind
  (:map gfm-mode-map
        ("s-a" . markdown-insert-gfm-code-block)
        ("s-z" . markdown-edit-code-block)
        ("A-C-H-t" . markdown-mode-extras-copy-section)
        ("A-C-s-r" . markdown-outline-previous)
        ("A-C-s-f" . markdown-outline-next)
        ("M-p" . nil)
        ("A-s-f" . markdown-footnote-goto-text)
        ("A-s-r" . markdown-footnote-return)
        ("s-b" . markdown-insert-bold)
        ("s-e" . markdown-insert-code)
        ("s-f" . markdown-insert-footnote)
        ("s-i" . markdown-insert-italic)
        ("s-k" . markdown-insert-link)
        ("s-p" . markdown-preview)
        :map markdown-mode-map
        ("s-a" . markdown-insert-gfm-code-block)
        ("s-z" . markdown-edit-code-block)
        ("A-C-H-t" . markdown-mode-extras-copy-section)
        ("A-C-s-r" . markdown-outline-previous)
        ("A-C-s-f" . markdown-outline-next)
        ("M-p" . nil)
        ("A-s-f" . markdown-footnote-goto-text)
        ("A-s-r" . markdown-footnote-return)
        ("s-b" . markdown-insert-bold)
        ("s-e" . markdown-insert-code)
        ("s-f" . markdown-insert-footnote)
        ("s-i" . markdown-insert-italic)
        ("s-k" . markdown-insert-link)
        ("s-p" . markdown-preview)))
#+end_src

** markdown-mode-extras
:PROPERTIES:
:ID:       856FDF94-95B6-49EB-A6D5-B95F0A53384A
:END:

/[[file:extras/markdown-mode-extras.el][markdown-mode-extras]] collects my extensions for =markdown-mode=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package markdown-mode-extras
  :bind
  (:map gfm-mode-map
        ("A-C-H-t" . markdown-mode-extras-copy-section)
        ("s-l" . markdown-mode-extras-insert-locator)
        ("s-r" . markdown-mode-extras-remove-url-in-link)
        ("s-v" . markdown-mode-extras-paste-with-conversion)
        ("H-s-v" . markdown-mode-extras-org-paste-dwim)
        :map markdown-mode-map
        ("A-C-H-t" . markdown-mode-extras-copy-section)
        ("s-l" . markdown-mode-extras-insert-locator)
        ("s-r" . markdown-mode-extras-remove-url-in-link)
        ("s-v" . markdown-mode-extras-paste-with-conversion)
        ("H-s-v" . markdown-mode-extras-org-paste-dwim)
        :map org-mode-map
        ("H-s-v" . markdown-mode-extras-org-paste-dwim)))
#+end_src

** grip-mode
:PROPERTIES:
:ID:       5F437CCD-14C3-4120-B77E-3E1C7C891819
:END:

/[[https://github.com/seagle0128/grip-mode][grip-mode]] provides org-mode and Github-flavored Markdown preview using grip./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package grip-mode
  :defer t
  :init
  (with-eval-after-load 'markdown-mode
    (bind-keys :map markdown-mode-map
               ("s-w" . grip-mode)))

  :custom
  (grip-github-user (auth-source-pass-get "user" "tlon/core/api.github.com/grip-mode"))
  (grip-github-password (auth-source-pass-get 'secret "tlon/core/api.github.com/grip-mode"))

  :config
  (require 'xwidget))
#+end_src

** xwidget
:PROPERTIES:
:ID:       DA6275F2-F3A2-482E-B7A8-34633775F430
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/xwidget.el][xwidget]] provides API functions for xwidgets./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature xwidget
  :bind
  (:map xwidget-webkit-mode-map
        ("," . xwidget-webkit-scroll-down)
        ("." . xwidget-webkit-scroll-up)
        ("j" . xwidget-webkit-scroll-top)
        (";" . xwidget-webkit-scroll-bottom)))
#+end_src

** edit-indirect
:PROPERTIES:
:ID:       5660F943-C895-4847-A538-0FA11445420C
:END:

/[[https://github.com/Fanael/edit-indirect][edit-indirect]] supports editing regions in separate buffers./

This package is required by the ~markdown-mode~ command =markdown-edit-code-block=.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package edit-indirect
  :after markdown-mode
  :bind (:map edit-indirect-mode-map
              ("s-z" . edit-indirect-commit)))
#+end_src

** mediawiki
:PROPERTIES:
:ID:       721F42DA-7E97-4C9A-9DBF-8A841DDE99A9
:END:

/[[https://github.com/hexmode/mediawiki-el][mediawiki]] is an Emacs interface to editing mediawiki sites./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package mediawiki
  :after atomic-chrome
  :defer 5
  :bind
  (:map mediawiki-mode-map
        ("s-k" . mediawiki-insert-link)))
#+end_src

** gdrive
:PROPERTIES:
:ID:       CC5C7599-DFA7-48A8-8BA0-3DABE8A3171E
:END:
:LOGBOOK:
CLOCK: [2024-04-20 Sat 11:11]--[2024-04-20 Sat 11:32] =>  0:21
CLOCK: [2021-12-07 Tue 17:12]--[2021-12-07 Tue 18:05] =>  0:53
CLOCK: [2021-12-03 Fri 23:10]--[2021-12-04 Sat 01:01] =>  1:51
CLOCK: [2021-12-03 Fri 22:21]--[2021-12-03 Fri 23:02] =>  0:41
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gdrive
  :ensure (:host github
                 :repo "benthamite/gdrive"
                 :depth nil)
  :defer t
  :init
  (load-file (file-name-concat paths-dir-dotemacs "etc/gdrive-users.el"))
  (defun gdrive-extras-mark-multiple-and-share (&optional file)
    "Search for each line in FILE and share the selected results.
The file should contain one search query per line."
    (interactive)
    (require 'gdrive)
    (gdrive-mark-clear)
    (if-let ((file (or file (when (y-or-n-p "Read file? ")
                              (read-file-name "File: "))))
             (lines (files-extras-lines-to-list file)))
        (dolist (line lines)
          (gdrive-extras--mark-matching-results line))
      (gdrive-extras--mark-matching-results (read-string "ID: ")))
    (gdrive-share-results gdrive-marked-files))

  (defun gdrive-extras--mark-matching-results (string)
    "Mark the files that match STRING."
    (let ((results (gdrive-act-on-selected-search-results string)))
      (gdrive-mark-results results))))
#+end_src

*** TODO [#5] Write command to create new Google Doc in chosen folder
:PROPERTIES:
:Effort:   0:30
:ID:       4D8E953E-44F4-4546-8BF9-08D8983CA699
:END:
:LOGBOOK:
CLOCK: [2024-04-23 Tue 09:54]--[2024-04-23 Tue 10:05] =>  0:11
CLOCK: [2022-05-19 Thu 20:30]--[2022-05-19 Thu 20:33] =>  0:03
:END:

** ledger-mode
:PROPERTIES:
:ID:       6C259EFC-0CF9-4CD7-A8C5-B29B66E98776
:END:
:LOGBOOK:
CLOCK: [2022-05-06 Fri 08:15]--[2022-05-06 Fri 08:28] =>  0:13
CLOCK: [2021-11-23 Tue 10:22]--[2021-11-23 Tue 10:31] =>  0:09
CLOCK: [2021-11-17 Wed 17:35]--[2021-11-17 Wed 17:43] =>  0:08
CLOCK: [2021-10-13 Wed 11:37]--[2021-10-13 Wed 11:54] =>  0:17
CLOCK: [2021-10-08 Fri 18:32]--[2021-10-08 Fri 18:59] =>  0:27
CLOCK: [2021-08-19 Thu 17:50]--[2021-08-19 Thu 18:11] =>  0:21
:END:

/[[https://github.com/ledger/ledger-mode][ledger-mode]] is a major mode for interacting with the Ledger accounting system./

To populate the database of historical prices:
- commodities: https://github.com/LukasJoswiak/blog-code/blob/master/2020/tracking-commodity-prices-ledger/prices.py
  - accompanying post: https://lukasjoswiak.com/tracking-commodity-prices-in-ledger/
- crypto: https://github.com/cjtapper/coinprices
- currencies: https://github.com/wakatara/get-FX
  - couldn't make it work, so I just entered the rates manually once and will use those

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ledger-mode
  :custom
  (ledger-default-date-format ledger-iso-date-format)
  (ledger-reconcile-default-commodity "ARS")
  (ledger-mode-extras-currencies '("USD" "EUR" "GBP" "ARS"))
  (ledger-schedule-file paths-file-tlon-ledger-schedule-file)
  (ledger-schedule-look-forward 0)
  (ledger-schedule-look-backward 30)

  :config
  (dolist (report
           '(("net worth"
              "%(binary) --date-format '%Y-%m-%d' -f %(ledger-file) bal --strict")
             ("net worth (USD)"
              "%(binary) --date-format '%Y-%m-%d' -f %(ledger-file) --price-db .pricedb --exchange USD bal ^assets ^liabilities --strict")
             ("account"
              "%(binary) --date-format '%Y-%m-%d' -f %(ledger-file) reg %(account) --price-db .pricedb")
             ("account (USD)"
              "%(binary) --date-format '%Y-%m-%d' -f %(ledger-file) reg %(account) --price-db .pricedb --exchange USD --limit \"commodity == 'USD'\"")
             ("cost basis"
              "%(binary) --date-format '%Y-%m-%d' -f %(ledger-file) --basis bal %(account) --strict")
             ("account (unrounded)"
              "%(binary) --date-format '%Y-%m-%d' --unround -f %(ledger-file) reg %(account)")))
    (add-to-list 'ledger-reports report))

  :bind
  (:map ledger-mode-map
        ("A-C-s-f" . ledger-navigate-next-xact-or-directive)
        ("A-C-s-r" . ledger-navigate-prev-xact-or-directive)
        ("A-s-e" . ledger-toggle-current-transaction)
        ("M-n" . nil)
        ("M-p" . nil)
        ("s-=" . ledger-reconcile)
        ("s-a" . ledger-add-transaction)
        ("s-b" . ledger-post-edit-amount)
        ("s-d" . ledger-delete-current-transaction)
        ("s-f" . ledger-occur)
        ("s-g" . ledger-report-goto)
        ("s-i" . ledger-insert-effective-date)
        ("s-k" . ledger-report-quit)
        ("s-l" . ledger-display-ledger-stats)
        ("s-o" . ledger-report-edit-report)
        ("s-p" . ledger-display-balance-at-point)
        ("s-q" . ledger-post-align-dwim)
        ("s-r" . ledger-report)
        ("s-s" . ledger-report-save)
        ("s-u" . ledger-schedule-upcoming)
        ("s-v" . ledger-copy-transaction-at-point)
        ("s-x" . ledger-fully-complete-xact)
        ("s-y" . ledger-copy-transaction-at-point)
        ("s-z" . ledger-report-redo)
        :map ledger-report-mode-map
        ("A-C-s-f" . ledger-navigate-next-xact-or-directive)
        ("A-C-s-r" . ledger-navigate-prev-xact-or-directive)
        :map ledger-reconcile-mode-map
        ("q" . ledger-reconcile-quit)))
#+end_src

*** resources
:PROPERTIES:
:ID:       FD6B578E-9794-4C38-A2F3-5A877ED2C4C8
:END:

https://gitlab.com/chrisberkhout/pricehist

- [[https://devhints.io/ledger][Ledger CLI cheatsheet]]
- [[https://github.com/davidkeegan/dklrt][GitHub - davidkeegan/dklrt: Ledger Recurring Transactiions.]]
- [[https://rolfschr.github.io/gswl-book/latest.html][Getting Started With Ledger - August 28, 2019 201f047]]
- [[https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html][Using Ledger for YNAB-like envelope budgeting]]
- [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][TIP: How I use ledger to track my money : emacs]]
- [[https://news.ycombinator.com/item?id=7708777][The reasons why I tried and failed with ledger: - I never quite understood how t... | Hacker News]]
- [[https://github.com/marbu/ledger-bank-import][GitHub - marbu/ledger-bank-import: convert bank csv files into ledger-cli file format]]
- [[https://felixcrux.com/blog/ledger-practices][Ledger Practices - Felix Crux]]

*** how to start from scratch
:PROPERTIES:
:ID:       49D7A193-157E-4A10-9C33-98727FC191BF
:END:
1. [[https://felixcrux.com/blog/ledger-practices-create-a-ledgerrc][create a ~.ledgerrc~ file]]

** ledger-mode-extras
:PROPERTIES:
:ID:       3FC5A39F-AEA9-4D54-AB55-836F58DA8103
:END:

/[[file:extras/ledger-mode-extras.el][ledger-mode-extras]] collects my extensions for =ledger-mode=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package ledger-mode-extras
  :after ledger-mode
  :demand t
  :bind
  (:map ledger-mode-map
        ("s-SPC" . ledger-mode-extras-new-entry-below)
        ("s-t" . ledger-mode-extras-sort-region-or-buffer)
        ("s-e" . ledger-mode-extras-extras-sort-region-or-buffer-reversed)
        ("A-s-a" . ledger-mode-extras-report-account)
        ("A-s-b" . ledger-mode-extras-decrease-date-by-one-day)
        ("A-s-c" . ledger-mode-extras-copy-transaction-at-point)
        ("A-s-f" . ledger-mode-extras-increase-date-by-one-day)
        ("A-s-t" . ledger-mode-extras-sort-region-or-buffer-reversed)
        ("A-s-u" . ledger-mode-extras-report-net-worth-USD)
        ("A-s-w" . ledger-mode-extras-report-net-worth)
        ("s-c" . ledger-mode-extras-align-and-next)
        ("A-s-c" . ledger-mode-extras-copy-transaction-at-point)
        ("s-x" . ledger-mode-extras-kill-transaction-at-point)))
#+end_src

* translation
:PROPERTIES:
:ID:       1A1D70D3-DBB4-4EEC-A83E-15FD4348ED94
:END:

** tlon
:PROPERTIES:
:ID:       5EDD6F28-3299-4D90-83E1-C7476176277D
:END:

/[[https://github.com/tlon-team/tlon][tlon]] is a set of Emacs commands that my team uses in various contexts./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package tlon
  :ensure (:host github
                 :repo "tlon-team/tlon.el"
                 :depth nil) ; clone entire repo, not just last commit
  :after paths
  :init
  (with-eval-after-load 'forge
    (bind-keys :map forge-topic-mode-map
               ("," . tlon-visit-counterpart-or-capture)
               ("'" . tlon-open-forge-file)))
  (with-eval-after-load 'magit
    (bind-keys :map magit-status-mode-map
               ("," . tlon-visit-counterpart-or-capture)
               ("'" . tlon-open-forge-file)))
  (with-eval-after-load 'markdown-mode
    (bind-keys :map markdown-mode-map
               ("H-;" . tlon-md-menu)
               ("A-s-e" . tlon-yaml-edit-field)
               ("s-c" . tlon-copy-dwim)
               ("s-l" . tlon-md-insert-locator)
               ("s-u" . tlon-md-insert-entity)
               ("A-C-s-SPC" . tlon-md-beginning-of-buffer-dwim)
               ("A-C-s-<tab>" . tlon-md-end-of-buffer-dwim)
               :map gfm-mode-map
               ("H-;" . tlon-md-menu)
               ("A-s-e" . tlon-yaml-edit-field)
               ("s-c" . tlon-copy-dwim)
               ("s-l" . tlon-md-insert-locator)
               ("s-u" . tlon-md-insert-entity)
               ("A-C-s-SPC" . tlon-md-beginning-of-buffer-dwim)
               ("A-C-s-<tab>" . tlon-md-end-of-buffer-dwim)))

  :custom
  (tlon-forg-archive-todo-on-close t)
  (tlon-forg-sort-after-sync-or-capture t)

  :config
  (run-with-idle-timer (* 60 60) t #'tlon-pull-issues-in-all-repos)

  :hook
  (init-post-init-hook . tlon-initialize)

  :bind
  (("M-j" . tlon-node-find)
   ("H-r" . tlon-dispatch)
   ("H-?" . tlon-md-insert-mdx-cite)
   ("A-C-p" . tlon-grep)))
#+end_src

** go-translate
:PROPERTIES:
:ID:       543F613A-F3B8-426C-8505-48782483FBEC
:END:

/[[https://github.com/lorniu/go-translate][go-translate]] is an Emacs translator that supports multiple translation engines./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package go-translate
  :disabled
  :custom
  (gts-translate-list '(("en" "es")))
  (gts-default-translator
   (gts-translator

    :picker ; used to pick source text, from, to. choose one.

    ;;(gts-noprompt-picker)
    ;;(gts-noprompt-picker :texter (gts-whole-buffer-texter))
    (gts-prompt-picker)
    ;;(gts-prompt-picker :single t)
    ;;(gts-prompt-picker :texter (gts-current-or-selection-texter) :single t)

    :engines ; engines, one or more. Provide a parser to give different output.

    (list
     ;; (gts-bing-engine)
     ;;(gts-google-engine)
     ;;(gts-google-rpc-engine)
     (gts-deepl-engine :auth-key (auth-source-pass-get "key" (concat "tlon/babel/deepl.com/" tlon-email-shared)) :pro nil)
     ;; (gts-google-engine :parser (gts-google-summary-parser))
     ;;(gts-google-engine :parser (gts-google-parser))
     ;;(gts-google-rpc-engine :parser (gts-google-rpc-summary-parser) :url "https://translate.google.com")
     ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url "https://translate.google.com")
     )

    :render ; render, only one, used to consumer the output result. Install posframe yourself when use gts-posframe-xxx

    ;; (gts-buffer-render)
    ;;(gts-posframe-pop-render)
    ;;(gts-posframe-pop-render :backcolor "#333333" :forecolor "#ffffff")
    ;; (gts-posframe-pin-render)
    ;;(gts-posframe-pin-render :position (cons 1200 20))
    ;;(gts-posframe-pin-render :width 80 :height 25 :position (cons 1000 20) :forecolor "#ffffff" :backcolor "#111111")
    (gts-kill-ring-render)

    :splitter ; optional, used to split text into several parts, and the translation result will be a list.

    (gts-paragraph-splitter)
    )))
#+end_src

** powerthesaurus
:PROPERTIES:
:ID:       81CC0280-A8A5-4C8F-BF05-D324EB917DCD
:END:

/[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]] is an Emacs client for [[https://www.powerthesaurus.org/][power thesaurus]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package powerthesaurus
  :bind
  ("H-y" . powerthesaurus-transient))
#+end_src

** goldendict-ng
:PROPERTIES:
:ID:       32143368-5DE3-44F5-A35B-05F157DEC2A5
:END:
:LOGBOOK:
CLOCK: [2023-11-09 Thu 14:32]--[2023-11-09 Thu 15:00] =>  0:28
CLOCK: [2021-11-24 Wed 15:26]--[2021-11-24 Wed 16:24] =>  0:58
:END:

/[[https://github.com/benthamite/goldendict-ng][goldendict-ng]] integrates [[https://github.com/xiaoyifang/goldendict-ng][GoldenDict]] with Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package goldendict-ng
  :ensure (:host github
           :repo "benthamite/goldendict-ng")
  :custom
  (goldendict-ng-executable "/Applications/GoldenDict.app/Contents/MacOS/GoldenDict")
  (goldendict-ng-groups '(("es-es" . "es")
                               ("es-en" . "es")
                               ("en-en" . "en")
                               ("en-es" . "en")
                               ("fr-es" . "fr")))
  (goldendict-ng-groups-enforce t)
  (goldendict-ng-narrow-groups-to-matching-languages t)
  (goldendict-ng-auto-select-sole-candidate t)
  (goldendict-ng-count-all-group-in-auto-selection nil)

  :bind
  ("A-y" . goldendict-ng-search))
#+end_src

** reverso
:PROPERTIES:
:ID:       F3063A73-ED50-42BD-8ABD-8D7FC68758FD
:END:
:LOGBOOK:
CLOCK: [2023-05-11 Thu 20:24]--[2023-05-11 Thu 20:27] =>  0:03
CLOCK: [2022-08-31 Wed 23:01]--[2022-08-31 Wed 23:11] =>  0:10
:END:

/[[https://github.com/SqrtMinusOne/reverso.el][reverso]] is an Emacs client for [[https://www.reverso.net/][reverso]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package reverso
  :ensure (:host github
           :repo "SqrtMinusOne/reverso.el")
  :custom
  (reverso-languages '(spanish english french german italian portuguese))

  :bind
  ("H-Y" . reverso))
#+end_src

** dictionary
:PROPERTIES:
:ID:       9D2123AF-FA64-465A-B7C1-6FCBFB786F02
:END:

/dictionary is a client for rfc2229 dictionary servers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature dictionary
  :defer t
  :custom
  (dictionary-server "dict.org")
  (dictionary-use-single-buffer t))
#+end_src


*** TODO [#6] Set local server
:PROPERTIES:
:ID:       3C3B9F22-E8AF-4F94-8A7E-A613A47A765B
:END:

See ~dictionary-in-emacs.org~ in ~gptel~ notes directory.

* docs
:PROPERTIES:
:ID:       6C0D0737-734E-4EAB-8A3F-138EF990B967
:END:

** pdf-tools
:PROPERTIES:
:ID:       B4272338-4DCA-44FC-9330-804CC88BF189
:END:
:LOGBOOK:
CLOCK: [2022-07-23 Sat 14:07]--[2022-07-23 Sat 14:20] =>  0:13
CLOCK: [2022-07-23 Sat 13:06]--[2022-07-23 Sat 14:02] =>  0:56
CLOCK: [2021-11-16 Tue 18:40]--[2021-11-16 Tue 19:02] =>  0:22
CLOCK: [2021-07-29 Thu 22:42]--[2021-07-29 Thu 23:08] =>  0:26
CLOCK: [2021-07-25 Sun 15:35]--[2021-07-25 Sun 15:42] =>  0:07
CLOCK: [2021-06-10 Thu 19:08]--[2021-06-10 Thu 19:20] =>  0:12
CLOCK: [2021-02-23 Tue 10:59]--[2021-02-23 Tue 11:05] =>  0:06
:END:

/[[https://github.com/vedang/pdf-tools][pdf-tools]] is a support library for PDF files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :after (:any dired-extras ebib)
  :init
  (pdf-tools-install t)

  (with-eval-after-load 'pdf-annot
    (bind-keys :map pdf-annot-minor-mode-map
               ("e" . pdf-annot-add-highlight-markup-annotation)
               ("j" . pdf-view-goto-page)
               ("k" . pdf-view-previous-line-or-previous-page)
               ("l" . pdf-view-next-line-or-next-page)
               ("H-c" . pdf-view-kill-ring-save)
               ("A-u" . pdf-view-midnight-minor-mode)))

  (with-eval-after-load 'pdf-history
    (bind-keys :map pdf-history-minor-mode-map
               ("e" . pdf-annot-add-highlight-markup-annotation)
               ("j" . pdf-view-goto-page)
               ("k" . pdf-view-previous-line-or-previous-page)
               ("l" . pdf-view-next-line-or-next-page)
               ("H-c" . pdf-view-kill-ring-save)
               ("A-u" . pdf-view-midnight-minor-mode)))

  :custom
  (pdf-view-use-scaling t)
  (pdf-view-use-imagemagick nil)
  (pdf-view-resize-factor 1.01)
  (pdf-annot-default-annotation-properties
   '((t
      (label . user-full-name))
     (text
      (color . "#ff0000")
      (icon . "Note"))
     (highlight
      (color . "LightBlue2"))
     (underline
      (color . "blue"))
     (squiggly
      (color . "orange"))
     (strike-out
      (color . "red"))))

  :config
  (pdf-cache-prefetch-minor-mode -1) ; https://github.com/vedang/pdf-tools/issues/278#issuecomment-2096894629

  :hook
  (pdf-view-mode-hook . pdf-view-fit-page-to-window)

  :bind
  (:map pdf-view-mode-map
        ("s" . save-buffer)
        ("e" . pdf-annot-add-highlight-markup-annotation)
        ("j" . pdf-view-goto-page)
        ("k" . pdf-view-previous-line-or-previous-page)
        ("l" . pdf-view-next-line-or-next-page)
        ("H-c" . pdf-view-kill-ring-save)
        ("A-u" . pdf-view-midnight-minor-mode)))
#+end_src

** pdf-tools-extras
:PROPERTIES:
:ID:       C4B53EDC-372F-42B2-924E-FE48647B67AE
:END:


/[[file:extras/pdf-tools-extras.el][pdf-tools-extras]] collects my extensions for =pdf-tools=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package pdf-tools-extras
  :init
  (with-eval-after-load 'pdf-annot
    (bind-keys :map pdf-annot-minor-mode-map
               ("c" . pdf-tools-extras-copy-dwim)
               ("x" . pdf-tools-extras-count-words)
               ("e" . pdf-tools-extras-open-in-ebib)
               ("h" . pdf-annot-extras-add-highlight-markup-annotation)
               ("t" . pdf-tools-extras-toggle-writeroom)
               ("x" . pdf-tools-extras-open-externally)))
  (with-eval-after-load 'pdf-history
    (bind-keys
     :map pdf-history-minor-mode-map
     ("c" . pdf-tools-extras-copy-dwim)
     ("x" . pdf-tools-extras-count-words)
     ("e" . pdf-tools-extras-open-in-ebib)
     ("h" . pdf-annot-extras-add-highlight-markup-annotation)
     ("t" . pdf-tools-extras-toggle-writeroom)
     ("x" . pdf-tools-extras-open-externally)))

  :hook
  (pdf-tools-enabled-hook . pdf-tools-extras-apply-theme)

  :bind (:map pdf-view-mode-map
              ("c" . pdf-tools-extras-copy-dwim)
              ("x" . pdf-tools-extras-count-words)
              ("e" . pdf-tools-extras-open-in-ebib)
              ("h" . pdf-annot-extras-add-highlight-markup-annotation)
              ("t" . pdf-tools-extras-toggle-writeroom)
              ("x" . pdf-tools-extras-open-externally)))
#+end_src

** pdf-tools-pages
:PROPERTIES:
:ID:       45E2FBF2-8C01-4BA5-82EA-E9BB2F322D6F
:END:

/[[https://github.com/benthamite/pdf-tools-pages][pdf-tools-pages]] is a simple =pdf-tools= extension I created to delete and extract pages from PDF files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pdf-tools-pages
  :ensure (:host github
                 :repo "benthamite/pdf-tools-pages")
  :after pdf-tools
  :init
  (with-eval-after-load 'pdf-annot
    (bind-keys :map pdf-annot-minor-mode-map
               ("C" . pdf-tools-pages-clear-page-selection)
               ("D" . pdf-tools-pages-delete-selected-pages)
               ("S" . pdf-tools-pages-select-dwim)
               ("X" . pdf-tools-pages-extract-selected-pages)))
  (with-eval-after-load 'pdf-history
    (bind-keys
     :map pdf-history-minor-mode-map
     ("C" . pdf-tools-pages-clear-page-selection)
     ("D" . pdf-tools-pages-delete-selected-pages)
     ("S" . pdf-tools-pages-select-dwim)
     ("X" . pdf-tools-pages-extract-selected-pages)))

  :bind (:map pdf-view-mode-map
              ("C" . pdf-tools-pages-clear-page-selection)
              ("D" . pdf-tools-pages-delete-selected-pages)
              ("S" . pdf-tools-pages-select-dwim)
              ("X" . pdf-tools-pages-extract-selected-pages)))
#+end_src

** scroll-other-window
:PROPERTIES:
:ID:       4F29AAB8-CC48-4216-B309-2C26337FE12B
:END:

/[[https://github.com/benthamite/scroll-other-window][scroll-other-window]] enables scrolling of the other window in ~pdf-tools~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package scroll-other-window
  :ensure (:host github
                 :repo "benthamite/scroll-other-window")
  :after pdf-tools
  :hook
  (pdf-tools-enabled-hook . sow-mode)

  :bind
  (:map sow-mode-map
        ("A-C-s-g" . sow-scroll-other-window-down)
        ("A-C-s-t" . sow-scroll-other-window)))
#+end_src

** pdf-view-restore
:PROPERTIES:
:ID:       159A7ABF-5D9C-46C3-BAA2-C1E486682875
:END:

/[[https://github.com/007kevin/pdf-view-restore][pdf-view-restore]] adds support to saving and reopening the last known  PDF position./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pdf-view-restore
  :after pdf-tools
  :init
  ;; https://github.com/007kevin/pdf-view-restore/issues/6
  (defun pdf-view-restore-mode-conditionally ()
    "Enable `pdf-view-restore-mode' iff the current buffer is visiting a PDF."
    (when (buffer-file-name)
      (pdf-view-restore-mode)))

  :hook
  (pdf-view-mode-hook . pdf-view-restore-mode-conditionally))
#+end_src

** moon-reader
:PROPERTIES:
:ID:       CA54B97C-0948-4E28-AB29-392052D306AC
:END:

/[[https://github.com/benthamite/moon-reader][moon-reader]] synchronizes page position between pdf-tools and Moon+ Reader./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package moon-reader
  :ensure (:host github
           :repo "benthamite/moon-reader")
  :after pdf-view-restore
  :custom
  (moon-reader-cache-directory (file-name-concat paths-dir-google-drive "Apps/Books/.Moon+/Cache/")))
#+end_src

** org-pdftools
:PROPERTIES:
:ID:       028468CA-0334-45AE-A476-028D9A300065
:END:

/[[https://github.com/fuxialexander/org-pdftools][org-pdftools]] adds org link support for [[id:B4272338-4DCA-44FC-9330-804CC88BF189][pdf-tools]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-pdftools
  :ensure (:build (:not elpaca--check-version))
  :after org pdf-tools
  :hook
  (org-mode-hook . org-pdftools-setup-link))
#+end_src

** nov
:PROPERTIES:
:ID:       CA54F4D1-2562-483A-BBD0-67A039E0F2FC
:END:

/[[https://depp.brause.cc/nov.el/][nov]] is a major mode for reading EPUBs in Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package nov
  :defer t)
#+end_src

** djvu
:PROPERTIES:
:ID:       CB96565F-C0FF-454C-A1F1-E986BC45EDDE
:END:

/[[https://elpa.gnu.org/packages/djvu.html][djvu]] is a major mode for viewing and editing Djvu files in Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package djvu
  :defer t)
#+end_src

* programming
:PROPERTIES:
:ID:       35CB9C38-D0FE-458A-9F77-EC6702B2D976
:END:

** prog-mode
:PROPERTIES:
:ID:       A8700D18-574A-4093-938C-5707589DBB41
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature prog-mode
  :init
  (with-eval-after-load 'shell
    (bind-keys :map shell-mode-map
               ("s-c" . exit-recursive-edit)))

  :config
  (global-prettify-symbols-mode)

  :bind
  (("A-H-v" . set-variable)
   ("M-d" . toggle-debug-on-error)
   ("A-M-d" . toggle-debug-on-quit)
   :map prog-mode-map
   ("A-H-C-i" . mark-defun)
   ("s-e" . xref-find-definitions)
   ("s-f" . consult-flycheck)
   ("M-q" . nil)
   ("s-q" . prog-fill-reindent-defun)
   :map emacs-lisp-mode-map
   ("s-c" . exit-recursive-edit)))
#+end_src

** treesit
:PROPERTIES:
:ID:       804E391D-E9FC-4135-824B-EA31B3D00705
:END:

/treesit provides Tree-sitter-based syntax highlighting in Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature treesit
  :config
  (setq treesit-language-source-alist
        '((typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))

  (unless (treesit-language-available-p 'typescript)
    (treesit-install-language-grammar 'typescript))

  (unless (treesit-language-available-p 'tsx)
    (treesit-install-language-grammar 'tsx)))
#+end_src

** elisp-mode
:PROPERTIES:
:ID:       24475DE5-E129-4832-BAE5-C22D846C251E
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature elisp-mode
  :init
  (defun instrument-defun ()
    "Instrument the current defun."
    (interactive)
    (eval-defun t))

  :bind (:map emacs-lisp-mode-map
              ("s-b" . eval-buffer)
              ("s-d" . eval-defun)
              ("s-i" . instrument-defun)
              :map lisp-interaction-mode-map
              ("s-b" . eval-buffer)
              ("s-d" . eval-defun)
              ("s-i" . instrument-defun)))
#+end_src

** lisp-mode
:PROPERTIES:
:ID:       E6608F6D-CC63-4A0B-A6B5-D012D3065801
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature lisp-mode
  :custom
  ;; default is 65, which overrides the value of `fill-column'
  (emacs-lisp-docstring-fill-column nil))
#+end_src

** curl-to-elisp
:PROPERTIES:
:ID:       7B9D14E2-752E-4705-A438-78DA6663083A
:END:
/[[https://github.com/xuchunyang/curl-to-elisp][curl-to-elisp]] converts cURL command to Emacs Lisp code./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package curl-to-elisp
  :defer t)
#+end_src

** f
:PROPERTIES:
:ID:       4FD6758A-4021-4B05-BD36-BB09C2063C93
:END:

/[[https://github.com/rejeep/f.el][f]] is a modern API for working with files and directories in Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package f
  :defer t)
#+end_src

** s
:PROPERTIES:
:ID:       127B298B-BD3E-42BD-8032-D20B29075DA0
:END:

/[[https://github.com/magnars/s.el][s]] is a string manipulation library./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package s
  :defer t)
#+end_src

** backtrace
:PROPERTIES:
:ID:       B69F718B-9BAE-4EAD-99DE-2C8C1E98CCA3
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature backtrace
  :custom
  (backtrace-line-length nil))
#+end_src

** debug
:PROPERTIES:
:ID:       AACCFE88-084B-4428-82DB-7C695D9624C4
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature debug
  :config
  (defun debug-copy-and-save-backtrace ()
  "Copy the backtrace to the clipboard and save it to a file."
  (interactive)
  (when (string-match-p "\\*Backtrace\\*" (buffer-name))
    (let* ((contents (buffer-string))
           (file (file-name-concat paths-dir-downloads "backtrace.el"))
           message)
      (kill-new contents)
      (with-temp-buffer
        (insert contents)
        (write-region (point-min) (point-max) file)
        (setq message (format "Backtrace copied to clipboard and saved to \"%s\" (%s)"
                              (abbreviate-file-name file)
                              (file-size-human-readable (file-attribute-size (file-attributes file))))))
      (run-at-time 0.1 nil (lambda () (message message))))
    (kill-buffer)))

  :bind
  (:map debugger-mode-map
        ("s" . debug-copy-and-save-backtrace)))
#+end_src

** edebug
:PROPERTIES:
:ID:       021794F3-1663-449D-B4B7-41C6F3A72083
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature edebug
  :custom
  (edebug-sit-for-seconds 10)
  (edebug-sit-on-break nil)
  ;; do not truncate print results
  (print-level nil)
  (print-length nil)
  (print-circle nil)
  (edebug-print-level nil)
  (edebug-print-length nil)
  (edebug-print-circle nil) ; disable confusing #N= and #N# print syntax

  :bind
  (:map emacs-lisp-mode-map
        ("M-s-d" . edebug-defun)))
#+end_src

** macrostep
:PROPERTIES:
:ID:       8AE42CAA-5B62-4B1C-9C7C-DFD72AC5B3CD
:END:

/[[https://github.com/joddie/macrostep][macrostep]] is an interactive macro-expander./

See [[https://www.youtube.com/watch?v=odkYXXYOxpo][this video]] (starting at 7:30) for an introduction to this package.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package macrostep
  :defer t)
#+end_src

** js
:PROPERTIES:
:ID:       E41E357F-B912-4CC2-9279-1DE400A1BDB4
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/js.el][js]] is a major mode for editing JavaScript./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature js
  :custom
  (js-indent-level 4)

  :bind
  (:map js-mode-map
        ("s-w" . eww-extras-browse-file)
        ("M-," . window-extras-buffer-move-left)
        ("M-." . window-extras-buffer-move-right)))
#+end_src

** js2-mode
:PROPERTIES:
:ID:       14639C64-720D-4105-B31B-3A84A447D19F
:END:

/[[https://github.com/mooz/js2-mode][js2-mode]] is a Javascript editing mode for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package js2-mode
  :defer t)
#+end_src

** clojure
:PROPERTIES:
:ID:       A9508F41-E82B-4E6C-9304-53981A8F0C27
:END:

/[[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] provides support for the Clojure(Script) programming language./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package clojure-mode
  :defer t)
#+end_src

** haskell-mode
:PROPERTIES:
:ID:       44EB7072-5108-416F-8567-5D6BE7AD23D0
:END:
/[[https://github.com/haskell/haskell-mode][haskell-mode]] is a major mode for Haskell./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package haskell-mode
  :defer t)
#+end_src

** python
:PROPERTIES:
:ID:       D00C20E4-925A-41E1-95BD-5BF8BA03637C
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature python
  :custom
  (python-shell-interpreter "/Users/pablostafforini/.pyenv/shims/python3")
  (org-babel-python-command "/Users/pablostafforini/.pyenv/shims/python3")
  (flycheck-python-pycompile-executable "/Users/pablostafforini/.pyenv/shims/python3")

  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  (remove-hook 'python-mode-hook #'yasnippet-snippets--fixed-indent) ; some package (`elpy'?) is adding this

  :bind (:map python-mode-map
              ("C-c p" . run-python)
              ("s-l" . python-shell-send-file)
              ("s-d" . python-shell-send-defun)
              ("s-c" . python-shell-send-buffer)
              ("s-s" . python-shell-send-string)
              ("s-r" . python-shell-send-region)
              ("s-e" . python-shell-send-statement)
              :map python-ts-mode-map
              ("C-c p" . run-python)
              ("s-l" . python-shell-send-file)
              ("s-d" . python-shell-send-defun)
              ("s-c" . python-shell-send-buffer)
              ("s-s" . python-shell-send-string)
              ("s-r" . python-shell-send-region)
              ("s-e" . python-shell-send-statement)))
#+end_src

** pyenv-mode
:PROPERTIES:
:ID:       1D91CD1E-F1E6-4D69-AA42-83C81DC09D57
:END:


/[[https://github.com/pythonic-emacs/pyenv-mode][pyenv-mode]] integrates pyenv with python-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pyenv-mode
  :after python
  :init
  (add-to-list 'exec-path "~/.pyenv/bin"))
#+end_src

** pet
:PROPERTIES:
:ID:       43F4649C-E469-4E9B-ACC4-3DC912EFFE54
:END:

/[[https://github.com/wyuenho/emacs-pet][pet]] tracks down the correct Python tooling executables from Python virtual environments./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package pet
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src

** emacs-ipython-notebook
:PROPERTIES:
:ID:       3F0CEFB0-2983-4659-AB1F-6936AD8BF0FC
:END:

/[[https://github.com/millejoh/emacs-ipython-notebook][emacs-ipython-notebook]] is a Jupyter notebook client in Emacs./

This needs to be configured.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ein
  :after python
  :defer t)
#+end_src

** go
:PROPERTIES:
:ID:       248AB3F6-2BA7-4DD0-8DFE-FFA79762BC73
:END:

/[[https://github.com/dominikh/go-mode.el][go-mode]] provides support for the Go programming language./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package go-mode
  :defer t)
#+end_src

** applescript-mode
:PROPERTIES:
:ID:       6F36A349-196D-40A8-9338-61DB3C86D760
:END:

/[[https://github.com/emacsorphanage/applescript-mode][applescript-mode]] is a major mode for editing AppleScript./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package applescript-mode
  :defer t)
#+end_src

** json-mode
:PROPERTIES:
:ID:       7B4A0E63-4509-4BC0-AE08-08F517911959
:END:

/[[https://github.com/json-emacs/json-mode][json-mode]]/ is major mode for editing JSON files.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package json-mode
  :defer t
  :bind
  (:map json-mode-map
        ("RET" . nil)))
#+end_src

** csv-mode
:PROPERTIES:
:ID:       44D557E4-026E-425C-B1C9-B26F4B6197E4
:END:

/[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] is a major mode for editing comma-separated values./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package csv-mode
  :defer t)
#+end_src

** yaml
:PROPERTIES:
:ID:       9DD1BC24-7AFE-406B-9C1C-7BC66BD241F3
:END:
/[[https://github.com/zkry/yaml.el][yaml]] is YAML parser written in Emacs List without any external dependencies./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package yaml
  :ensure (:host github
                 :repo "zkry/yaml.el")
  :defer t)
#+end_src

** yaml-mode
:PROPERTIES:
:ID:       1D83E6E8-B7DC-4D40-A9B4-A93EFDC9FF0C
:END:

/[[https://github.com/yoshiki/yaml-mode][yaml-mode]] is a major mode for editing YAML files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package yaml-mode)
#+end_src

** shut-up
:PROPERTIES:
:ID:       54AE6A1C-1A30-4C24-B5BA-7CE39F0B10D9
:END:


/[[https://github.com/cask/shut-up/][shut-up]] provides a macro to silence function calls./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package shut-up)
#+end_src

** puni
:PROPERTIES:
:ID:       27705B8C-C2F7-4BE1-9510-8BE0993EAB4A
:END:
:LOGBOOK:
CLOCK: [2023-08-12 Sat 19:13]--[2023-08-12 Sat 19:43] =>  0:30
:END:


/[[https://github.com/AmaiKinono/puni][puni]] supports structured editing for many major modes./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package puni
  :bind
  (:map prog-mode-map
   ("C-H-M-r" . puni-forward-kill-word)
   ("C-H-M-q" . puni-backward-kill-word)
   ("C-H-M-v" . puni-kill-line)
   ("C-H-M-z" . puni-backward-kill-line)
   ("A-C-s-d" . puni-forward-sexp)
   ("A-C-s-e" . puni-backward-sexp)
   ("A-C-s-r" . puni-beginning-of-sexp)
   ("A-C-s-f" . puni-end-of-sexp)
   ("A-C-H-j" . puni-mark-sexp-at-point)
   ("A-C-H-k" . puni-mark-sexp-around-point)))
#+end_src

** hl-todo
:PROPERTIES:
:ID:       2AE50002-CF55-4BF1-AC96-967F128A6718
:END:

/[[https://github.com/tarsius/hl-todo][hl-todo]] highlights TODO and similar keywords in comments and strings./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package hl-todo
  :ensure (:build (:not elpaca--check-version))
  :hook
  (find-file-mode . global-hl-todo-mode))
#+end_src

** project
:PROPERTIES:
:ID:       A8E52422-BB0D-410B-A497-64BB2AC5576D
:END:

/[[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/project.el][project]] provides various functions for dealing with projects./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature project
  :bind
  (:map emacs-lisp-mode-map
   ("s-r" . project-query-replace-regexp)))
#+end_src

** hideshow
:PROPERTIES:
:ID:       8E6459FA-9978-42F8-9DAC-C4D7FB385F97
:END:

/hideshow is a minor mode for block hiding and showing./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature hideshow
  :hook
  (prog-mode-hook . hs-minor-mode))
#+end_src

** aggressive-indent
:PROPERTIES:
:ID:       94B7795A-09C3-4627-934D-1F4AEB14F7C0
:END:

/[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] keeps code always indented./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'snippet-mode))
#+end_src

** elpy
:PROPERTIES:
:ID:       E96C6026-AEFA-42A1-930E-863EA3FF651E
:END:
:LOGBOOK:
CLOCK: [2021-11-25 Thu 17:39]--[2021-11-25 Thu 17:51] =>  0:12
CLOCK: [2021-11-01 Mon 12:09]--[2021-11-01 Mon 12:10] =>  0:01
:END:

/[[https://github.com/jorgenschaefer/elpy][elpy]] is an Emacs Python development environment./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elpy
  :defer t
  :custom
  (elpy-rpc-python-command "python3")
  (elpy-rpc-virtualenv-path 'current)

  :config
  (elpy-enable))
#+end_src

** eldoc
:PROPERTIES:
:ID:       6DF08967-7BC0-4DA6-9E19-63B903675EF1
:END:
:LOGBOOK:
CLOCK: [2022-06-19 Sun 07:14]--[2022-06-19 Sun 07:31] =>  0:17
:END:

/[[https://elpa.gnu.org/packages/eldoc.html][eldoc]] show function arglist or variable docstring in echo area./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature eldoc
  :config
  ;; emacs.stackexchange.com/a/55914/32089
  (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
    "If SYM is a function, append its docstring."
    (concat
     (apply orig-fun sym r)
     (let* ((doc (and (fboundp sym) (documentation sym 'raw)))
            (oneline (and doc (substring doc 0 (string-match "\n" doc)))))
       (and oneline
            (stringp oneline)
            (not (string= "" oneline))
            (concat "  |  " (propertize oneline 'face 'italic))))))

  (global-eldoc-mode))
#+end_src

* AI
:PROPERTIES:
:ID:       9846A789-9972-438B-9B6F-FE6BBBD3020E
:END:

There is an abundance of Emacs GPT packages. See [[https://news.ycombinator.com/item?id=35254389][here]] for a partial list.

** copilot
:PROPERTIES:
:ID:       2064FE34-0301-4E33-AB51-FE4921CA0E16
:END:

/[[https://github.com/copilot-emacs/copilot.el][copilot]] is an unofficial Copilot plugin for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package copilot
  :ensure (:host github
                 :repo "copilot-emacs/copilot.el"
                 :files ("dist" "*.el"))
  :after jsonrpc
  :custom
  (copilot-max-char -1)
  (copilot-indent-offset-warning-disable t)
  (copilot-version "1.272.0") ; needs to match installed version to suppress warning

  :config
  (unless (copilot-installed-version)
    (copilot-install-server))

  :bind
  (:map copilot-completion-map
        ("C-s-g" . copilot-clear-overlay)
        ("<tab>" . copilot-accept-completion-by-line)
        ("M-<tab>" . copilot-accept-completion)
        ("M-k" . copilot-previous-completion)
        ("M-l" . copilot-next-completion)
        ("M-;" . copilot-accept-completion-by-word)))
#+end_src

** copilot-extras
:PROPERTIES:
:ID:       AB88D95E-3D6F-4B70-850F-F1B7E13AF1AD
:END:

/[[file:extras/copilot-extras.el][copilot-extras]] collects my extensions for =copilot=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package copilot-extras
  :custom
  (copilot-extras-excluded-modes '(dsssl-mode mhtml-mode json-mode))

  :config
  (run-with-idle-timer 60 t #'copilot-extras-restart-copilot)

  :hook
  ((prog-mode-hook text-mode-hook) . copilot-extras-enable-conditionally))
#+end_src

** gptel
:PROPERTIES:
:ID:       B84D396B-D1FD-4718-9002-58DEB1BB85E1
:END:
:LOGBOOK:
CLOCK: [2023-10-31 Tue 13:53]--[2023-10-31 Tue 14:02] =>  0:09
:END:

/[[https://github.com/karthink/gptel][gptel]] is a ChatGPT client for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gptel
  :init
  (with-eval-after-load 'dired
    (bind-keys
     :map dired-mode-map
     ("s-l" . gptel-context-add)))

  :custom
  (gptel-default-mode 'org-mode)
  (gptel-track-media t)
  (gptel-max-tokens 10000)
  (gptel-include-reasoning nil)
  (gptel-api-key (auth-source-pass-get "emacs" (concat "tlon/core/openai.com/" tlon-email-shared)))

  :config
  (require 'tlon-core)
  (require 'gptel-integrations)
  (setq gptel-expert-commands t) ; not a user option

  ;; set reasoning effort in o3-mini
  (put 'o3-mini :request-params '(:reasoning_effort "high" :stream :json-false))

  ;; default model
  (setopt gptel-model 'claude-sonnet-4-20250514
          gptel-backend (gptel-make-anthropic "Claude"
                          :stream t
                          :key (auth-source-pass-get "key" (concat "tlon/core/anthropic.com/" tlon-email-shared))))

  ;; other models
  (gptel-make-gemini "Gemini"
    :stream t
    :key (auth-source-pass-get 'secret (concat "tlon/core/aistudio.google.com/" tlon-email-shared)))

  (gptel-make-anthropic "Claude-thinking"
    :key (auth-source-pass-get "key" (concat "tlon/core/anthropic.com/" tlon-email-shared))
    :stream t
    :models '(claude-sonnet-4-20250514)
    :header (lambda () (when-let* ((key (gptel--get-api-key)))
                    `(("x-api-key" . ,key)
                      ("anthropic-version" . "2023-06-01")
                      ("anthropic-beta" . "pdfs-2024-09-25")
                      ("anthropic-beta" . "output-128k-2025-02-19")
                      ("anthropic-beta" . "prompt-caching-2024-07-31"))))
    :request-params `(:thinking (:type "enabled" :budget_tokens ,(* 1024 16))
                                :max_tokens ,(* 1024 32)))

  (gptel-make-openai "DeepSeek"
    :host "api.deepseek.com"
    :endpoint "/chat/completions"
    :stream t
    :key (auth-source-pass-get "emacs" (concat "tlon/core/deepseek.com/" tlon-email-shared))
    :models '(;; <https://api-docs.deepseek.com/quick_start/pricing/
              (deepseek-chat
               :context-window 64.0
               :input-cost 0.27
               :output-cost 1.10
               :cutoff-date "2024-07"
               :description "For simple chat responses or quick answers." )
              (deepseek-reasoner
               :context-window 64.0
               :input-cost 0.55
               :output-cost 2.19
               :cutoff-date "2024-07"
               :description "For detailed reasoning or complex problem-solving.")))

  (gptel-make-openai "Perplexity"
    :host "api.perplexity.ai"
    :key (auth-source-pass-get "key" (concat "tlon/core/perplexity.ai/" tlon-email-shared))
    :endpoint "/chat/completions"
    :stream t
    :models '(;; <https://docs.perplexity.ai/docs/model-cards>
              (sonar
               :context-window 128
               :input-cost 1
               :output-cost 1
               :cutoff-date ""
               :description "Lightweight, cost-effective search model optimized for quick answers" )
              (sonar-pro
               :context-window 200
               :input-cost 3
               :output-cost 15
               :cutoff-date ""
               :description "Advanced search model designed for complex queries")))

  (gptel-make-openai "xAI"
    :host "api.x.ai"
    :key (auth-source-pass-get "emacs" (concat "tlon/core/x.ai/" tlon-email-shared))
    :endpoint "/v1/chat/completions"
    :stream t
    :models '((grok-2-latest
               :context-window 131.072
               :input-cost 2
               :output-cost 10
               :cutoff-date "2024-07"
               :description "Latest Grok model")
              (grok-2-vision-latest
               :context-window 32.768
               :input-cost 2
               :output-cost 10
               :cutoff-date "2024-07"
               :description "Latest Grok vision model")))

  (gptel-make-preset 'tools-clear
    :description "Remove all tools"
    :tools 'nil)

  ;; replace default key bindings in `gptel--suffix-mcp-disconnect'
  (with-eval-after-load 'gptel-transient
    (transient-suffix-put 'gptel-tools "M+" :key "M-a")
    (transient-suffix-put 'gptel-tools "M-" :key "M-k"))

  :bind
  (("M-c" . gptel-send)
   ("H-s-g" . gptel)
   ("H-s-a" . gptel-abort)
   ("H-s-l" . (lambda () (interactive) (gptel-context-remove-all nil)))
   ("H-s-m" . gptel-menu)
   ("H-s-t" . gptel-context-add)
   ("A-C-s-r" . gptel-context-previous)
   ("A-C-s-f" . gptel-context-next)))
#+end_src

** gptel-plus
:PROPERTIES:
:ID:       2843FB0D-7653-4BB5-ABBF-73D4D1D18C68
:END:

/[[https://github.com/benthamite/gptel-plus][gptel-plus]] is a collection of enhancements for gptel./

This package evolved out of gptel-extras.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gptel-plus
  :ensure (:host github
                 :repo "benthamite/gptel-plus")

  :hook
  (org-mode-hook . gptel-plus-enable-gptel-in-org)
  (markdown-mode-hook . gptel-plus-enable-gptel-in-markdown)

  :bind
  (:map gptel-mode-map
        ("s-l" . gptel-plus-list-context-files)))
#+end_src

** gptel-extras
:PROPERTIES:
:ID:       AEA2E978-0321-4F3D-B3EB-14CDA505A9D9
:END:

/[[file:extras/gptel-extras.el][gptel-extras]] collects my extensions for =gptel=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package gptel-extras
  :after gptel
  :demand t
  :init
  (advice-add 'gptel :after #'gptel-extras-save-buffer)

  :custom
  ;; since these models take a while, we trigger a growl-like alert when they
  ;; finish, in case we want to do something else in the meantime
  (gptel-extras-alert-when-finished '(o3 o1))

  :config
  ;; the `gptel-extras-make-tool-presets' macro creates two sets of tools:
  ;; one that clears existing tools and replaces them with the new ones,
  ;; and another one that appends the new tools to the existing ones.
  (gptel-extras-make-tool-presets
   tools-git
   "git-related tools"
   '("git_wrapup_instructions" "git_worktree" "git_tag" "git_status" "git_stash"
     "git_show" "git_set_working_dir" "git_reset" "git_remote" "git_rebase"
     "git_push" "git_pull" "git_merge" "git_log" "git_init" "git_fetch"
     "git_diff" "git_commit" "git_clone" "git_clear_working_dir" "git_clean"
     "git_cherry_pick" "git_checkout" "git_branch" "git_add"))

  (gptel-extras-make-tool-presets
   tools-github
   "GitHub-related tools"
   '("get_pull_request_reviews" "get_pull_request_comments"
     "update_pull_request_branch" "get_pull_request_status"
     "get_pull_request_files" "merge_pull_request" "create_pull_request_review"
     "list_pull_requests" "get_pull_request" "get_issue" "search_users"
     "search_issues" "search_code" "add_issue_comment" "update_issue"
     "list_issues" "list_commits" "create_branch" "fork_repository"
     "create_pull_request" "create_issue" "push_files" "get_file_contents"
     "create_repository" "search_repositories" "create_or_update_file"))

  (gptel-extras-make-tool-presets
   tools-web-search
   "web search tools"
   '("search" "fetch_content" "brave_web_search" "brave_local_search"))

  (gptel-extras-make-tool-presets
   tools-home-assistant
   "Home Assistant tools"
   '("GetLiveContext" "movie_mode_restore_lights" "movie_mode" "todo_get_items"
     "HassListCompleteItem" "HassListAddItem" "HassSetVolume" "HassMediaPrevious"
     "HassMediaNext" "HassMediaPause" "HassMediaUnpause"
     "HassClimateSetTemperature" "HassLightSet" "HassCancelAllTimers"
     "HassTurnOff" "HassTurnOn"))

  (gptel-extras-make-tool-presets
   tools-emacs
   "Emacs tools"
   '("execute_emacs_lisp_code" "generate_emacs_lisp_code"))

  (gptel-extras-make-tool-presets
   tools-filesystem
   "filesystem tools"
   '("read_file" "list_directory" "create_file" "create_directory"))

  (gptel-extras-make-tool-presets
   tools-slack-ea-translations
   "Slack-related tools"
   '("slack_get_user_profile" "slack_get_users" "slack_get_thread_replies" "slack_get_channel_history"
     "slack_add_reaction" "slack_reply_to_thread" "slack_post_message" "slack_list_channels"))

  :hook
  (gptel-post-response-functions . gptel-extras-generate-latex-previews)

  :bind
  (("H-s-c" . gptel-extras-goto-end-and-send)
   ("H-s-o" . gptel-extras-toggle-major-mode)
   ("H-s-s" . gptel-extras-search-and-ask-model)))
#+end_src

** gptel-quick
:PROPERTIES:
:ID:       A3F028E6-A888-4F50-88DE-64897689B6D3
:END:

/[[https://github.com/karthink/gptel-quick][gptel-quick]] supports fast AI lookups./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package gptel-quick
  :ensure (:host github :repo "karthink/gptel-quick")
  :bind
  ("H-s-u" . gptel-quick))
#+end_src

** llm-tool-collection
:PROPERTIES:
:ID:       382BA84D-0C8C-43FD-9419-9A892653EF2B
:END:

/[[https://github.com/skissue/llm-tool-collection][llm-tool-collection]] is a crowd-sourced collection of tools for working with large language models./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package llm-tool-collection
  :ensure (:host github
                 :repo "skissue/llm-tool-collection")
  :after gptel
  :config
  ;; register every tool
  (mapcar (apply-partially #'apply #'gptel-make-tool)
          (llm-tool-collection-get-all)))
#+end_src

** codel
:PROPERTIES:
:ID:       349C4CE5-0091-42EC-BDD0-F5DBB200BC88
:END:

/[[https://github.com/ultronozm/codel.el][codel]] is another collection of llm tools./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package codel
  :ensure (:host github
                 :repo "ultronozm/codel.el")
  :after gptel
  :config
  (codel-setup-gptel))
#+end_src

** aidermacs
:PROPERTIES:
:ID:       29E4D020-70BF-408C-A8AC-D40E411F2F42
:END:

/[[https://github.com/MatthewZMD/aidermacs][aidermacs]] is an alternative Aider integration for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package aidermacs
  :custom
  (aidermacs-auto-commits t)
  (aidermacs-show-diff-after-change nil)
  ;; for thinking mode, add "--thinking-tokens" "16k" to `aidermacs-extra-args'

  :bind (("C-c a" . aidermacs-transient-menu)
         :map aidermacs-comint-mode-map
         ("S-<return>" . comint-send-input)
         ("s-c" . comint-send-input)
         ("<return>" . comint-accumulate)))
#+end_src

** aidermacs-extras
:PROPERTIES:
:ID:       B4534C3F-D95D-45DF-B3D8-552747784B42
:END:

/[[file:extras/a-extras.el][aidermacs-extras]] collects my extensions for =aidermacs=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package aidermacs-extras
  :hook
  (kill-buffer-query-functions . aidermacs-extras-confirm-kill-buffer)

  :bind
  (("H-s-." . aidermacs-extras-run-in-current-dir)))
#+end_src

** semext
:PROPERTIES:
:ID:       CEB2A11F-3C30-4E80-B59B-9B54C50C0AA4
:END:

/[[https://github.com/ahyatt/semext][semext]] provides LLM-powered semantic versions of various Emacs commands./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package semext
  :disabled t
  :ensure (:host github
                 :repo "ahyatt/semext")
  :init

  (setopt semext-provider (make-llm-gemini
                           :key (auth-source-pass-get 'secret (concat "tlon/core/aistudio.google.com/" tlon-email-shared))
                           :chat-model "gemini-2.5-pro-preview-03-25")))
#+end_src

** mcp
:PROPERTIES:
:ID:       edd16d61-f4ae-4b00-a631-28235d1f5d5b
:END:

/[[https://github.com/lizqwerscott/mcp.el][mcp]] an Emacs client for interfacing with [[https://modelcontextprotocol.io/introduction][MCP]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package mcp
  :ensure (:host github
                 :repo "lizqwerscott/mcp.el"
                 :build (:not elpaca--check-version))
  :after gptel
  :config
  (setq mcp-hub-servers
        `(("brave-search" . (:command "npx"
                                      :args ("-y" "@modelcontextprotocol/server-brave-search")
                                      :env (:BRAVE_API_KEY
                                            ,(auth-source-pass-get "consult-mu"
                                                                   (concat "chrome/brave.com/"
                                                                           (getenv "PERSONAL_GMAIL"))))))
          ("context7" . (:command "npx"
                                  :args ("-y" "@upstash/context7-mcp@latest")))
          ("ddg-search" . (:command "uvx"
                                    :args ("duckduckgo-mcp-server")))
          ("emacs-mcp-server"
           . (:command "emacs-mcp-server"  ; Now it's on PATH
                       :env (:OPENAI_API_KEY
                             ,(auth-source-pass-get "emacs" (concat "tlon/core/openai.com/" tlon-email-shared)))))
          ;; ("everything" . (:command "npx"
          ;; :args ("-y" "@modelcontextprotocol/server-everything")))
          ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
          ("filesystem" . (:command "npx"
                                    :args ("-y" "@modelcontextprotocol/server-filesystem"
                                           ,"/")))
          ("git" . (:command "npx"
                             :args ("-y" "@cyanheads/git-mcp-server")))
          ("github-tlon-ai" .
           (:command "npx"
                     :args ("-y" "@modelcontextprotocol/server-github")
                     :env (:GITHUB_PERSONAL_ACCESS_TOKEN
                           ,(auth-source-pass-get "github-mcp"
                                                  (concat "tlon/core/github.com/tlon-ai")))))
          ;; ("graphiti-stdio" .
          ;; (:command "python"
          ;; :args ("-u" "-m" "graphiti_mcp_server" "--transport" "stdio")
          ;; :env (:OPENAI_API_KEY
          ;; ,(auth-source-pass-get "emacs"
          ;; (concat "tlon/core/openai.com/" tlon-email-shared))
          ;; :NEO4J_URI "bolt://localhost:7687"
          ;; :NEO4J_USER "neo4j"
          ;; :NEO4J_PASSWORD "demodemo")))
          ("memory" . (:command "npx"
                                :args ("-y" "@modelcontextprotocol/server-memory")))
          ("puppeteer" . (:command "npx"
                                   :args ("-y" "@modelcontextprotocol/server-puppeteer")))
          ("sequential-thinking" . (:command "npx"
                                             :args ("-y" "@modelcontextprotocol/server-sequential-thinking")))
          ("slack-ea-translations" . (:command "npx"
					       :args ("-y" "@modelcontextprotocol/server-slack")
					       :env (:SLACK_BOT_TOKEN ,(auth-source-pass-get
									"bot-token"
									"tlon/core/slack.com/ea-translations")
								      :SLACK_TEAM_ID "T04EYQYHG74")))
	  ;; ("slack-ae-racionalidad" . (:command "npx"
					       ;; :args ("-y" "@modelcontextprotocol/server-slack")
					       ;; :env (:SLACK_BOT_TOKEN ,(auth-source-pass-get
									;; "bot-token"
									;; "tlon/core/slack.com/ae-racionalidad")
								      ;; :SLACK_TEAM_ID "CA0JVRT5K")))
                                                                      ))

  (when (string= (system-name) "Pablos-MacBook-Pro.local")
    (setq mcp-hub-servers
          (append mcp-hub-servers
                  `(("github-benthamite-owner-benthamite" .
                     (:command "npx"
                               :args ("-y" "@modelcontextprotocol/server-github")
                               :env (:GITHUB_PERSONAL_ACCESS_TOKEN
                                     ,(auth-source-pass-get "github-mcp-owner-benthamite"
                                                            (concat "chrome/github.com/benthamite")))))
                    ("github-benthamite-owner-tlon-team" .
                     (:command "npx"
                               :args ("-y" "@modelcontextprotocol/server-github")
                               :env (:GITHUB_PERSONAL_ACCESS_TOKEN
                                     ,(auth-source-pass-get "github-mcp-owner-tlon-team"
                                                            (concat "chrome/github.com/benthamite")))))))))

  (when (simple-extras-connected-to-network-p "Pablo-mesh")
    (setq mcp-hub-servers
          (append mcp-hub-servers
		  `(("home-assistant" . (:command "mcp-proxy"
						  :env (:SSE_URL "http://homeassistant.local:8123/mcp_server/sse"
								 :API_ACCESS_TOKEN ,(auth-source-pass-get
										     "ha-mcp"
										     "chrome/home-assistant.io/stafforini"))))))))

  (mcp-hub-start-all-server)
  (run-with-timer 15 nil (lambda ()
			   "Connect to all MCP servers after they have started, but do not activate any tools."
			   (gptel-mcp-connect)
			   (gptel--apply-preset 'tools-clear))))
#+end_src

** dall-e-shell
:PROPERTIES:
:ID:       635C8C3D-5614-433C-B3A3-81384F13273D
:END:

/[[https://github.com/xenodium/dall-e-shell][dall-e-shell]] provides an Emacs shell for OpenAI’s DALL-E./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package dall-e-shell
  :disabled
  :demand t
  :custom
  (dall-e-shell-openai-key (auth-source-pass-get "key" (concat "tlon/core/openai.com/" tlon-email-shared))))
#+end_src

** llm
:PROPERTIES:
:ID:       6D49D977-CD85-413E-8C19-884361746678
:END:

/[[https://github.com/ahyatt/llm][llm]] provides a common interface for LLMs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package llm
  :custom
  (llm-warn-on-nonfree nil))
#+end_src

** magit-gptcommit
:PROPERTIES:
:ID:       DFF89B96-95F6-4EDD-A3C2-3152928ED787
:END:

/[[https://github.com/douo/magit-gptcommit][magit-gptcommit]] generates git commit messages on Magit using LLM providers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package magit-gptcommit
  :after magit paths
  :demand t
  :init
  (require 'llm-claude)

  :custom
  (magit-gptcommit-llm-provider
   (make-llm-claude
    :key (auth-source-pass-get "key" (concat "tlon/core/anthropic.com/" tlon-email-shared))
    :chat-model "claude-3-5-haiku-20241022"))

  :config
  (magit-gptcommit-status-buffer-setup))
#+end_src

* org-mode
:PROPERTIES:
:ID:       0E2FD90A-8A8A-4625-ABEA-D82DD3CC88A0
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 21:27]--[2021-11-19 Fri 21:30] =>  0:03
CLOCK: [2021-11-18 Thu 19:05]--[2021-11-18 Thu 19:28] =>  0:23
CLOCK: [2021-07-22 Thu 12:06]--[2021-07-22 Thu 12:12] =>  0:06
CLOCK: [2021-07-11 Sun 11:16]--[2021-07-11 Sun 11:46] =>  0:30
CLOCK: [2021-04-06 Tue 20:40]--[2021-04-06 Tue 21:10] =>  0:30
CLOCK: [2021-04-06 Tue 13:12]--[2021-04-06 Tue 13:48] =>  0:36
CLOCK: [2021-03-30 Tue 09:36]--[2021-03-30 Tue 09:42] =>  0:06
CLOCK: [2021-03-25 Thu 22:19]--[2021-03-25 Thu 23:00] =>  0:41
CLOCK: [2021-03-17 Wed 19:33]--[2021-03-17 Wed 20:00] =>  0:27
CLOCK: [2021-03-17 Wed 15:42]--[2021-03-17 Wed 15:48] =>  0:06
CLOCK: [2021-03-16 Tue 20:03]--[2021-03-16 Tue 20:21] =>  0:18
CLOCK: [2021-03-16 Tue 16:17]--[2021-03-16 Tue 16:18] =>  0:01
CLOCK: [2021-03-09 Tue 21:18]--[2021-03-09 Tue 21:26] =>  0:08
CLOCK: [2021-03-04 Thu 10:04]--[2021-03-04 Thu 10:10] =>  0:06
CLOCK: [2021-03-02 Tue 10:14]--[2021-03-02 Tue 10:23] =>  0:09
CLOCK: [2021-02-20 Sat 22:09]--[2021-02-20 Sat 22:20] =>  0:11
CLOCK: [2021-02-05 Fri 19:19]--[2021-02-05 Fri 19:25] =>  0:06
CLOCK: [2021-02-05 Fri 19:00]--[2021-02-05 Fri 19:09] =>  0:09
CLOCK: [2021-01-30 Sat 21:39]--[2021-01-30 Sat 22:28] =>  0:49
CLOCK: [2021-01-29 Fri 15:32]--[2021-01-29 Fri 15:46] =>  0:14
CLOCK: [2021-01-28 Thu 18:52]--[2021-01-28 Thu 18:54] =>  0:02
CLOCK: [2021-01-28 Thu 17:42]--[2021-01-28 Thu 18:17] =>  0:35
CLOCK: [2021-01-28 Thu 17:23]--[2021-01-28 Thu 17:31] =>  0:08
CLOCK: [2021-01-25 Mon 20:25]--[2021-01-25 Mon 20:35] =>  0:10
CLOCK: [2021-01-25 Mon 16:53]--[2021-01-25 Mon 17:00] =>  0:07
CLOCK: [2021-01-25 Mon 16:39]--[2021-01-25 Mon 16:49] =>  0:10
CLOCK: [2021-01-25 Mon 11:15]--[2021-01-25 Mon 11:25] =>  0:10
CLOCK: [2021-01-24 Sun 12:52]--[2021-01-24 Sun 13:01] =>  0:09
CLOCK: [2021-01-24 Sun 11:48]--[2021-01-24 Sun 12:01] =>  0:13
CLOCK: [2021-01-24 Sun 11:22]--[2021-01-24 Sun 11:37] =>  0:15
CLOCK: [2021-01-23 Sat 18:47]--[2021-01-23 Sat 19:07] =>  0:20
CLOCK: [2021-01-23 Sat 16:41]--[2021-01-23 Sat 16:50] =>  0:09
CLOCK: [2021-01-23 Sat 14:07]--[2021-01-23 Sat 14:14] =>  0:07
CLOCK: [2021-01-23 Sat 12:54]--[2021-01-23 Sat 13:33] =>  0:39
CLOCK: [2021-01-22 Fri 15:46]--[2021-01-22 Fri 15:49] =>  0:03
CLOCK: [2021-01-22 Fri 15:43]--[2021-01-22 Fri 15:46] =>  0:03
CLOCK: [2021-01-22 Fri 13:48]--[2021-01-22 Fri 13:57] =>  0:09
CLOCK: [2021-01-22 Fri 12:51]--[2021-01-22 Fri 12:59] =>  0:08
CLOCK: [2021-01-22 Fri 12:34]--[2021-01-22 Fri 12:50] =>  0:16
CLOCK: [2021-01-19 Tue 18:54]--[2021-01-19 Tue 19:12] =>  0:18
CLOCK: [2021-01-15 Fri 21:28]--[2021-01-15 Fri 22:21] =>  0:53
CLOCK: [2021-01-15 Fri 20:35]--[2021-01-15 Fri 21:25] =>  0:50
CLOCK: [2021-01-15 Fri 18:07]--[2021-01-15 Fri 18:11] =>  0:04
CLOCK: [2021-01-10 Sun 10:49]--[2021-01-10 Sun 11:05] =>  0:16
CLOCK: [2021-01-09 Sat 11:25]--[2021-01-09 Sat 11:34] =>  0:09
CLOCK: [2021-01-09 Sat 10:53]--[2021-01-09 Sat 11:22] =>  0:29
CLOCK: [2021-01-04 Mon 11:12]--[2021-01-04 Mon 11:17] =>  0:05
CLOCK: [2021-01-01 Fri 18:14]--[2021-01-01 Fri 18:26] =>  0:12
CLOCK: [2020-12-29 Tue 15:38]--[2020-12-29 Tue 15:56] =>  0:18
CLOCK: [2020-12-25 Fri 20:51]--[2020-12-25 Fri 20:58] =>  0:07
CLOCK: [2020-12-25 Fri 19:43]--[2020-12-25 Fri 20:05] =>  0:22
CLOCK: [2020-12-25 Fri 19:25]--[2020-12-25 Fri 19:27] =>  0:02
CLOCK: [2020-12-20 Sun 14:15]--[2020-12-20 Sun 14:19] =>  0:04
CLOCK: [2020-12-08 Tue 08:51]--[2020-12-08 Tue 08:55] =>  0:04
CLOCK: [2020-10-22 Thu 12:28]--[2020-10-22 Thu 12:29] =>  0:01
CLOCK: [2020-10-17 Sat 13:40]--[2020-10-17 Sat 13:51] =>  0:11
CLOCK: [2020-10-03 Sat 10:12]--[2020-10-03 Sat 10:17] =>  0:05
CLOCK: [2020-09-27 Sun 19:20]--[2020-09-27 Sun 19:21] =>  0:01
CLOCK: [2020-09-27 Sun 17:25]--[2020-09-27 Sun 18:00] =>  0:35
CLOCK: [2020-09-22 Tue 10:35]--[2020-09-22 Tue 10:50] =>  0:15
CLOCK: [2020-09-21 Mon 22:03]--[2020-09-21 Mon 22:08] =>  0:05
CLOCK: [2020-09-20 Sun 21:55]--[2020-09-20 Sun 22:03] =>  0:08
CLOCK: [2020-09-20 Sun 18:33]--[2020-09-20 Sun 18:56] =>  0:23
CLOCK: [2020-09-19 Sat 20:48]--[2020-09-19 Sat 20:57] =>  0:09
CLOCK: [2020-09-19 Sat 20:36]--[2020-09-19 Sat 20:36] =>  0:00
CLOCK: [2020-09-18 Fri 19:50]--[2020-09-18 Fri 20:08] =>  0:18
CLOCK: [2020-09-17 Thu 19:46]--[2020-09-17 Thu 20:00] =>  0:14
CLOCK: [2020-09-14 Mon 10:30]--[2020-09-14 Mon 10:44] =>  0:00
CLOCK: [2020-09-14 Mon 08:43]--[2020-09-14 Mon 08:52] =>  0:09
CLOCK: [2020-09-01 Tue 18:53]--[2020-09-01 Tue 18:56] =>  0:03
CLOCK: [2020-09-01 Tue 14:16]--[2020-09-01 Tue 14:17] =>  0:01
CLOCK: [2020-08-31 Mon 15:25]--[2020-08-31 Mon 15:34] =>  0:09
CLOCK: [2020-08-30 Sun 21:43]--[2020-08-30 Sun 22:15] =>  0:32
CLOCK: [2020-08-30 Sun 18:08]--[2020-08-30 Sun 18:09] =>  0:01
CLOCK: [2020-08-30 Sun 17:26]--[2020-08-30 Sun 17:56] =>  0:30
CLOCK: [2020-08-29 Sat 15:31]--[2020-08-29 Sat 15:41] =>  0:10
CLOCK: [2020-08-28 Fri 22:05]--[2020-08-28 Fri 22:06] =>  0:01
CLOCK: [2020-08-28 Fri 14:28]--[2020-08-28 Fri 14:42] =>  0:10
CLOCK: [2020-08-27 Thu 13:41]--[2020-08-27 Thu 13:44] =>  0:03
CLOCK: [2020-08-25 Tue 11:26]--[2020-08-25 Tue 11:28] =>  0:02
CLOCK: [2020-08-25 Tue 11:16]--[2020-08-25 Tue 11:22] =>  0:06
CLOCK: [2020-08-25 Tue 11:04]--[2020-08-25 Tue 11:04] =>  0:00
CLOCK: [2020-08-25 Tue 10:57]--[2020-08-25 Tue 11:04] =>  0:07
CLOCK: [2020-08-24 Mon 16:30]--[2020-08-24 Mon 16:37] =>  0:07
CLOCK: [2020-08-24 Mon 16:27]--[2020-08-24 Mon 16:29] =>  0:02
CLOCK: [2020-08-24 Mon 12:45]--[2020-08-24 Mon 12:57] =>  0:12
CLOCK: [2020-08-23 Sun 13:44]--[2020-08-23 Sun 14:01] =>  0:17
CLOCK: [2020-08-23 Sun 12:40]--[2020-08-23 Sun 12:59] =>  0:19
CLOCK: [2020-08-22 Sat 22:42]--[2020-08-22 Sat 22:55] =>  0:13
CLOCK: [2020-08-22 Sat 18:35]--[2020-08-22 Sat 18:53] =>  0:18
CLOCK: [2020-08-22 Sat 15:21]--[2020-08-22 Sat 16:06] =>  0:45
CLOCK: [2020-08-22 Sat 12:48]--[2020-08-22 Sat 12:54] =>  0:06
CLOCK: [2020-08-21 Fri 19:34]--[2020-08-21 Fri 19:54] =>  0:17
CLOCK: [2020-08-20 Thu 13:44]--[2020-08-20 Thu 13:52] =>  0:02
CLOCK: [2020-08-20 Thu 12:53]--[2020-08-20 Thu 13:03] =>  0:10
CLOCK: [2020-08-19 Wed 15:59]--[2020-08-19 Wed 16:01] =>  0:02
CLOCK: [2020-08-18 Tue 12:57]--[2020-08-18 Tue 13:00] =>  0:03
CLOCK: [2020-08-18 Tue 12:06]--[2020-08-18 Tue 12:08] =>  0:02
CLOCK: [2020-08-17 Mon 19:23]--[2020-08-17 Mon 19:31] =>  0:08
CLOCK: [2020-08-17 Mon 19:11]--[2020-08-17 Mon 19:23] =>  0:12
CLOCK: [2020-08-17 Mon 17:57]--[2020-08-17 Mon 18:23] =>  0:26
CLOCK: [2020-08-17 Mon 17:48]--[2020-08-17 Mon 17:53] =>  0:05
CLOCK: [2020-08-17 Mon 13:45]--[2020-08-17 Mon 14:22] =>  0:37
CLOCK: [2020-08-16 Sun 08:58]--[2020-08-16 Sun 09:15] =>  0:17
CLOCK: [2020-08-15 Sat 21:55]--[2020-08-15 Sat 23:55] =>  2:00
CLOCK: [2020-08-15 Sat 21:25]--[2020-08-15 Sat 21:27] =>  0:02
CLOCK: [2020-08-15 Sat 16:03]--[2020-08-15 Sat 17:28] =>  1:25
CLOCK: [2020-08-14 Fri 21:10]--[2020-08-14 Fri 21:22] =>  0:12
CLOCK: [2020-08-14 Fri 17:34]--[2020-08-14 Fri 17:56] =>  0:22
CLOCK: [2020-08-14 Fri 17:05]--[2020-08-14 Fri 17:14] =>  0:09
CLOCK: [2020-08-14 Fri 16:25]--[2020-08-14 Fri 16:34] =>  0:09
CLOCK: [2020-08-13 Thu 17:19]--[2020-08-13 Thu 17:27] =>  0:08
CLOCK: [2020-08-13 Thu 16:24]--[2020-08-13 Thu 16:29] =>  0:05
CLOCK: [2020-08-13 Thu 12:55]--[2020-08-13 Thu 13:12] =>  0:17
CLOCK: [2020-08-13 Thu 12:54]--[2020-08-13 Thu 12:54] =>  0:00
CLOCK: [2020-08-13 Thu 10:13]--[2020-08-13 Thu 10:24] =>  0:11
CLOCK: [2020-08-13 Thu 08:20]--[2020-08-13 Thu 08:28] =>  0:08
CLOCK: [2020-08-13 Thu 07:39]--[2020-08-13 Thu 07:53] =>  0:14
CLOCK: [2020-08-12 Wed 22:19]--[2020-08-12 Wed 23:16] =>  0:57
CLOCK: [2020-08-12 Wed 20:51]--[2020-08-12 Wed 20:52] =>  0:01
CLOCK: [2020-08-12 Wed 19:49]--[2020-08-12 Wed 20:02] =>  0:13
CLOCK: [2020-08-12 Wed 18:58]--[2020-08-12 Wed 18:58] =>  0:00
CLOCK: [2020-08-12 Wed 16:38]--[2020-08-12 Wed 17:31] =>  0:53
CLOCK: [2020-08-12 Wed 15:06]--[2020-08-12 Wed 15:31] =>  0:25
CLOCK: [2020-08-12 Wed 12:44]--[2020-08-12 Wed 12:57] =>  0:13
CLOCK: [2020-08-11 Tue 20:52]--[2020-08-11 Tue 21:31] =>  0:39
CLOCK: [2020-08-11 Tue 19:32]--[2020-08-11 Tue 20:00] =>  0:28
CLOCK: [2020-08-11 Tue 19:03]--[2020-08-11 Tue 19:28] =>  0:25
CLOCK: [2020-08-11 Tue 18:37]--[2020-08-11 Tue 18:48] =>  0:11
CLOCK: [2020-08-11 Tue 18:24]--[2020-08-11 Tue 18:33] =>  0:09
CLOCK: [2020-08-11 Tue 18:11]--[2020-08-11 Tue 18:17] =>  0:06
CLOCK: [2020-08-11 Tue 16:30]--[2020-08-11 Tue 16:34] =>  0:04
CLOCK: [2020-08-11 Tue 13:59]--[2020-08-11 Tue 14:11] =>  0:12
CLOCK: [2020-08-11 Tue 11:29]--[2020-08-11 Tue 11:31] =>  0:02
CLOCK: [2020-08-09 Sun 21:09]--[2020-08-09 Sun 21:20] =>  0:11
CLOCK: [2020-08-09 Sun 16:45]--[2020-08-09 Sun 17:09] =>  0:19
CLOCK: [2020-08-09 Sun 10:55]--[2020-08-09 Sun 10:59] =>  0:04
CLOCK: [2020-08-08 Sat 18:41]--[2020-08-08 Sat 18:53] =>  0:12
CLOCK: [2020-08-08 Sat 17:53]--[2020-08-08 Sat 18:23] =>  0:30
CLOCK: [2020-08-08 Sat 17:19]--[2020-08-08 Sat 17:49] =>  0:30
CLOCK: [2020-08-07 Fri 19:24]--[2020-08-07 Fri 19:34] =>  0:10
CLOCK: [2020-08-07 Fri 18:58]--[2020-08-07 Fri 19:17] =>  0:19
CLOCK: [2020-08-07 Fri 14:51]--[2020-08-07 Fri 15:07] =>  0:16
CLOCK: [2020-08-06 Thu 19:36]--[2020-08-06 Thu 19:50] =>  0:14
CLOCK: [2020-08-06 Thu 10:59]--[2020-08-06 Thu 11:21] =>  0:22
CLOCK: [2020-08-06 Thu 08:41]--[2020-08-06 Thu 08:42] =>  0:01
CLOCK: [2020-08-05 Wed 19:49]--[2020-08-05 Wed 19:53] =>  0:04
CLOCK: [2020-08-05 Wed 19:41]--[2020-08-05 Wed 19:48] =>  0:07
CLOCK: [2020-08-05 Wed 11:54]--[2020-08-05 Wed 11:59] =>  0:05
CLOCK: [2020-08-04 Tue 20:46]--[2020-08-04 Tue 20:50] =>  0:04
CLOCK: [2020-08-03 Mon 20:50]--[2020-08-03 Mon 20:54] =>  0:04
CLOCK: [2020-08-03 Mon 07:56]--[2020-08-03 Mon 07:58] =>  0:02
CLOCK: [2020-08-02 Sun 20:44]--[2020-08-02 Sun 20:49] =>  0:05
CLOCK: [2020-07-31 Fri 20:57]--[2020-07-31 Fri 20:58] =>  0:01
CLOCK: [2020-07-31 Fri 18:44]--[2020-07-31 Fri 18:51] =>  0:07
CLOCK: [2020-07-29 Wed 19:00]--[2020-07-29 Wed 19:09] =>  0:09
CLOCK: [2020-07-29 Wed 13:47]--[2020-07-29 Wed 16:05] =>  2:18
CLOCK: [2020-07-29 Wed 12:24]--[2020-07-29 Wed 12:27] =>  0:03
CLOCK: [2020-07-29 Wed 11:38]--[2020-07-29 Wed 12:23] =>  0:45
CLOCK: [2020-07-28 Tue 20:44]--[2020-07-28 Tue 21:24] =>  0:40
CLOCK: [2020-07-28 Tue 19:21]--[2020-07-28 Tue 19:58] =>  0:37
CLOCK: [2020-07-28 Tue 19:04]--[2020-07-28 Tue 19:14] =>  0:10
CLOCK: [2020-07-28 Tue 17:30]--[2020-07-28 Tue 17:50] =>  0:20
CLOCK: [2020-07-28 Tue 16:58]--[2020-07-28 Tue 17:12] =>  0:14
CLOCK: [2020-07-28 Tue 13:53]--[2020-07-28 Tue 14:01] =>  0:08
CLOCK: [2020-07-27 Mon 21:00]--[2020-07-27 Mon 21:03] =>  0:03
CLOCK: [2020-07-27 Mon 15:08]--[2020-07-27 Mon 15:12] =>  0:04
CLOCK: [2020-07-27 Mon 14:22]--[2020-07-27 Mon 14:25] =>  0:03
CLOCK: [2020-07-26 Sun 20:53]--[2020-07-26 Sun 21:23] =>  0:30
CLOCK: [2020-07-26 Sun 17:04]--[2020-07-26 Sun 17:15] =>  0:11
CLOCK: [2020-07-26 Sun 11:39]--[2020-07-26 Sun 11:47] =>  0:08
CLOCK: [2020-07-23 Thu 10:20]--[2020-07-23 Thu 10:40] =>  0:20
CLOCK: [2020-07-22 Wed 22:10]--[2020-07-22 Wed 22:26] =>  0:16
CLOCK: [2020-07-17 Fri 20:56]--[2020-07-17 Fri 21:18] =>  0:22
CLOCK: [2020-07-17 Fri 12:38]--[2020-07-17 Fri 13:10] =>  0:32
CLOCK: [2020-07-17 Fri 11:45]--[2020-07-17 Fri 12:34] =>  0:49
CLOCK: [2020-07-14 Tue 15:53]--[2020-07-14 Tue 21:51] =>  5:58
CLOCK: [2020-07-14 Tue 13:47]--[2020-07-14 Tue 14:39] =>  0:52
CLOCK: [2020-07-14 Tue 12:34]--[2020-07-14 Tue 12:58] =>  0:24
CLOCK: [2020-07-14 Tue 10:47]--[2020-07-14 Tue 11:43] =>  0:56
CLOCK: [2020-07-13 Mon 12:43]--[2020-07-13 Mon 13:00] =>  0:17
CLOCK: [2020-07-12 Sun 19:31]--[2020-07-12 Sun 19:51] =>  0:20
CLOCK: [2020-07-12 Sun 12:35]--[2020-07-12 Sun 13:06] =>  0:31
CLOCK: [2020-07-08 Wed 15:38]--[2020-07-08 Wed 16:04] =>  0:26
CLOCK: [2020-07-08 Wed 16:05]--[2020-07-08 Wed 16:30] =>  0:25
CLOCK: [2020-07-08 Wed 21:13]--[2020-07-08 Wed 21:25] =>  0:12
CLOCK: [2020-07-08 Wed 21:29]--[2020-07-08 Wed 21:39] =>  0:10
CLOCK: [2020-07-08 Wed 21:39]--[2020-07-08 Wed 21:40] =>  0:01
CLOCK: [2020-07-08 Wed 21:40]--[2020-07-08 Wed 21:58] =>  0:18
CLOCK: [2020-07-09 Thu 13:48]--[2020-07-09 Thu 13:56] =>  0:08
CLOCK: [2020-07-10 Fri 18:19]--[2020-07-10 Fri 18:45] =>  0:26
CLOCK: [2020-07-10 Fri 18:47]--[2020-07-10 Fri 19:05] =>  0:18
CLOCK: [2020-07-10 Fri 19:19]--[2020-07-10 Fri 19:32] =>  0:13
CLOCK: [2020-07-10 Fri 19:36]--[2020-07-10 Fri 19:41] =>  0:05
CLOCK: [2020-07-11 Sat 13:11]--[2020-07-11 Sat 14:59] =>  1:48
CLOCK: [2022-07-28 Thu 14:47]--[2022-07-28 Thu 14:58] =>  0:11
CLOCK: [2021-10-12 Tue 19:21]--[2021-10-12 Tue 19:38] =>  0:17
CLOCK: [2021-06-02 Wed 21:59]--[2021-06-02 Wed 22:00] =>  0:01
CLOCK: [2021-06-02 Wed 19:18]--[2021-06-02 Wed 19:52] =>  0:34
CLOCK: [2021-06-08 Tue 16:06]--[2021-06-08 Tue 16:07] =>  0:01
CLOCK: [2021-04-28 Wed 08:50]--[2021-04-28 Wed 09:07] =>  0:17
CLOCK: [2021-06-08 Tue 16:07]--[2021-06-08 Tue 16:37] =>  0:30
CLOCK: [2021-03-28 Sun 19:01]--[2021-03-28 Sun 19:20] =>  0:19
CLOCK: [2021-06-24 Thu 09:30]--[2021-06-24 Thu 09:39] =>  0:09
CLOCK: [2021-04-02 Fri 17:22]--[2021-04-02 Fri 17:29] =>  0:07
CLOCK: [2021-04-02 Fri 09:39]--[2021-04-02 Fri 09:47] =>  0:08
CLOCK: [2021-02-27 Sat 20:56]--[2021-02-27 Sat 21:06] =>  0:10
CLOCK: [2021-02-25 Thu 22:04]--[2021-02-25 Thu 22:34] =>  0:30
CLOCK: [2021-02-26 Fri 13:40]--[2021-02-26 Fri 13:55] =>  0:15
CLOCK: [2022-07-13 Wed 10:56]--[2022-07-13 Wed 11:30] =>  0:34
CLOCK: [2021-06-27 Sun 15:12]--[2021-06-27 Sun 15:17] =>  0:05
CLOCK: [2021-06-16 Wed 18:16]--[2021-06-16 Wed 18:19] =>  0:03
CLOCK: [2021-06-12 Sat 13:19]--[2021-06-12 Sat 13:31] =>  0:12
CLOCK: [2021-05-28 Fri 19:30]--[2021-05-28 Fri 19:49] =>  0:19
CLOCK: [2021-04-30 Fri 21:37]--[2021-04-30 Fri 21:42] =>  0:05
CLOCK: [2021-04-16 Fri 21:19]--[2021-04-16 Fri 21:25] =>  0:06
CLOCK: [2021-04-07 Wed 19:09]--[2021-04-07 Wed 19:11] =>  0:02
CLOCK: [2021-03-21 Sun 21:18]--[2021-03-21 Sun 22:23] =>  1:05
CLOCK: [2021-03-20 Sat 20:27]--[2021-03-20 Sat 20:47] =>  0:20
CLOCK: [2021-03-17 Wed 15:17]--[2021-03-17 Wed 15:42] =>  0:25
CLOCK: [2021-03-08 Mon 21:40]--[2021-03-08 Mon 21:43] =>  0:03
CLOCK: [2021-03-08 Mon 17:52]--[2021-03-08 Mon 17:59] =>  0:07
CLOCK: [2021-03-08 Mon 15:33]--[2021-03-08 Mon 15:41] =>  0:08
CLOCK: [2022-07-01 Fri 11:48]--[2022-07-01 Fri 12:21] =>  0:33
CLOCK: [2022-05-29 Sun 15:24]--[2022-05-29 Sun 16:00] =>  0:36
CLOCK: [2022-01-15 Sat 19:24]--[2022-01-15 Sat 20:14] =>  0:50
CLOCK: [2021-11-20 Sat 21:32]--[2021-11-20 Sat 21:41] =>  0:09
CLOCK: [2021-10-14 Thu 19:07]--[2021-10-14 Thu 19:39] =>  0:32
CLOCK: [2021-10-05 Tue 13:18]--[2021-10-05 Tue 13:34] =>  0:16
CLOCK: [2021-04-02 Fri 22:44]--[2021-04-02 Fri 23:10] =>  0:26
CLOCK: [2021-07-16 Fri 09:44]--[2021-07-16 Fri 09:45] =>  0:01
CLOCK: [2021-06-11 Fri 18:27]--[2021-06-11 Fri 18:33] =>  0:06
:END:

** org
:PROPERTIES:
:ID:       268B60E4-708C-4372-A59D-5DD876E493CA
:END:

/[[https://orgmode.org/][org-mode]] is a major mode for keeping notes, authoring documents, computational notebooks, literate programming, maintaining to-do lists, planning projects, and more./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org
  :custom
  (org-directory paths-dir-org) ; set org directory
  (org-todo-keywords
   '((sequence "TODO(t)"
               "DOING(g)"
               "IMPORTANT(i)"
               "URGENT(u)"
               "SOMEDAY(s)"
               "MAYBE(m)"
               "WAITING(w)"
               "PROJECT(p)"
               "NEXT(n)"
               "LATER(l)"
               "|"
               "DELEGATED(e)"
               "DONE(d)"
               "CANCELLED(c)")))
  (org-priority-highest 1)
  (org-priority-default 7)
  (org-priority-lowest 9) ; set priorities
  (org-deadline-warning-days 0)              ; show due tasks only on the day the tasks are due
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t) ; indent every heading and hide all but the last leading star
  (org-startup-indented t)
  (org-log-into-drawer "STATES")
  (org-log-done 'time) ; add timestamp when task is marked as DONE
  (org-log-repeat nil) ; do not log TODO status changes for repeating tasks
  (org-M-RET-may-split-line nil) ; irreal.org/blog/?p=6297
  (org-loop-over-headlines-in-active-region t) ; Allow simultaneous modification of multiple task statuses.
  (org-ctrl-k-protect-subtree t)
  (org-special-ctrl-a/e t) ; `org-beginning-of-line' goes to beginning of first word
  (org-mark-ring-length 4)
  (org-pretty-entities nil)
  (org-image-actual-width '(800))
  (org-link-elisp-confirm-function nil)
  (org-file-apps '((auto-mode . emacs)
                   (directory . emacs)
                   ("\\.mm\\'" . default)
                   ("\\.x?html?\\'" . default)
                   ("\\.pdf\\'" . emacs)))
  (org-use-tag-inheritance t)
  (org-yank-dnd-method 'attach)
  (org-yank-image-save-method paths-dir-org-images)
  (org-structure-template-alist
   '(("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("h" . "export html")
     ("l" . "export latex")
     ("q" . "quote")
     ("s" . "src")
     ("se" . "src emacs-lisp")
     ("sE" . "src emacs-lisp :tangle (init-tangle-conditionally)")
     ("sc" . "src clojure")
     ("sj" . "src javascript")
     ("sm" . "src markdown")
     ("sp" . "src python")
     ("sq" . "src sql")
     ("ss" . "src shell")
     ("v" . "verse")
     ("w" . "WP")))

  ;; refile
  (org-reverse-note-order t) ; store notes at the beginning of header

  ;; export
  (org-export-backends '(ascii html icalendar latex md odt texinfo)) ; set export backends
  (org-preview-latex-default-process 'dvisvgm)

  ;; org-src
  (org-src-fontify-natively t)

  ;; org-crypt
  (org-tags-exclude-from-inheritance '("crypt"))

  :config
  (plist-put org-format-latex-options :scale 2)
  (plist-put org-format-latex-options :background "Transparent")
  (dolist (module '(org-habit org-tempo))
    (add-to-list 'org-modules module))

  ;; force reloading of first file opened so the buffer is correctly formatted
  (with-eval-after-load 'org
    (when (and (buffer-file-name)
               (string-match "\\.org$" (buffer-file-name)))
      (revert-buffer nil t)))

  :bind
  (:map org-mode-map
        ("C-H-M-s-z" . org-shiftleft)
        ("C-H-M-s-x" . org-shiftup)
        ("C-H-M-s-c" . org-shiftdown)
        ("C-H-M-s-v" . org-shiftright)
        ("C-H-M-s-a" . org-metaleft)
        ("C-H-M-s-s" . org-metaup)
        ("C-H-M-s-d" . org-metadown)
        ("C-H-M-s-f" . org-metaright)
        ("C-H-M-s-q" . org-shiftmetaleft)
        ("C-H-M-s-w" . org-shiftmetaup)
        ("C-H-M-s-e" . org-shiftmetadown)
        ("C-H-M-s-r" . org-shiftmetaright)
        ("s-j" . consult-extras-org-heading)
        ("s-A-k" . org-web-tools-insert-link-for-url)
        ("s-l" . org-transclusion-add-all)
        ("s-c" . ox-clip-formatted-copy)
        ("s-w" . org-refile)
        ("s-A-i" . org-id-copy)
        ("<S-left>" . nil)
        ("<S-right>" . nil)
        ("<S-up>" . nil)
        ("<S-down>" . nil)
        ("<M-left>" . nil)
        ("<M-right>" . nil)
        ("<M-S-left>" . nil)
        ("<M-S-right>" . nil)
        ("<M-up>" . nil)
        ("<M-down>" . nil)
        ("C-j" . nil)
        ("<backtab>" . org-shifttab)
        ("C-k" . nil)
        ("C-," . nil)
        ("A-C-s-i" . org-backward-sentence)
        ("A-C-s-o" . org-forward-sentence)
        ("A-C-s-," . org-backward-paragraph)
        ("A-C-s-." . org-forward-paragraph) ; org element?
        ("A-C-s-m" . org-beginning-of-line)
        ("A-C-s-z" . org-end-of-line) ; karabiner maps `/' to `z'; otherwise I can't trigger the command while holding `shift'
        ("A-C-s-r" . org-previous-visible-heading)
        ("A-C-s-f" . org-next-visible-heading)
        ("A-C-s-M-m" . org-previous-block)
        ("A-C-s-M-/" . org-next-block)
        ("A-C-H-t" . org-extras-copy-dwim)
        ("A-C-M-s-j" . org-previous-link)
        ("A-C-M-s-;" . org-next-link)
        ("A-H-M-t" . org-transpose-element)
        ("s-d" . org-deadline)
        ("s-e" . org-set-effort)
        ("s-f" . org-footnote-action)
        ("s-h" . org-insert-todo-subheading)
        ("s-p" . org-time-stamp-inactive)
        ("s-A-p" . org-time-stamp)
        ("s-g" . org-agenda)
        ("A-s-g" . org-gcal-extras-menu)
        ("s-k" . org-insert-link)
        ("s-q" . org-set-tags-command)
        ("s-r" . org-roam-buffer-toggle)
        ("s-s" . org-schedule)
        ("s-t" . org-todo)
        ("s-A-t" . org-sort)
        ("s-u" . org-clock-split)
        ("s-y" . org-evaluate-time-range)
        ("s-z" . org-edit-special)
        ("s-," . org-priority)
        ("s-A-e" . org-export-dispatch)
        ("A-<return>" . "C-u M-<return>")
        ("A-M-<return>" . org-insert-todo-heading)
        ;; bindings with matching commands in Fundamental mode
        ("H-v" . org-yank)
        ("M-f" . ace-link-org)))
#+end_src

*** TODO [#4] Create function to compute the total number of TODOs and hours in effort estimates
:PROPERTIES:
:Effort:   2:00
:ID:       FCC486F6-7391-4EA3-9087-6BC3D5AB72B3
:END:

** org-extras
:PROPERTIES:
:ID:       4DE04276-B164-441D-ADCA-017346C525D6
:END:

/[[file:extras/org-extras.el][org-extras]] collects my extensions for =org=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-extras
  :init
  (setq org-extras-agenda-switch-to-agenda-current-day-timer
        (run-with-idle-timer (* 10 60) nil #'org-extras-agenda-switch-to-agenda-current-day))

  :custom
  (org-extras-id-auto-add-excluded-directories `(,paths-dir-dropbox-tlon-leo
                                                 ,(file-name-concat paths-dir-dropbox-tlon-leo "gptel/")
                                                 ,paths-dir-dropbox-tlon-fede
                                                 ,(file-name-concat paths-dir-dropbox-tlon-fede "archive/")))

  (org-extras-agenda-files-excluded (list paths-file-tlon-tareas-leo
                                          paths-file-tlon-tareas-fede))

  (org-extras-clock-in-add-participants-exclude
   "Leo<>Pablo\\|Fede<>Pablo\\|Tlön: group meeting")

  :config
  (setopt org-extras-agenda-files-excluded
        (append org-extras-agenda-files-excluded
                ;; files in `paths-dir-inactive' sans ., .., hidden files and subdirectories
                (seq-filter (lambda (f) (not (file-directory-p f)))
                            (directory-files paths-dir-inactive t "^[^.][^/]*$"))))

  (quote (:link t :maxlevel 5 :fileskip0 t :narrow 70 :formula % :indent t :formatter org-extras-clocktable-sorter))

  :hook
  (before-save-hook . org-extras-id-auto-add-ids-to-headings-in-file)

  :bind
  (("H-l" . org-extras-tlon-menu)
   ("H-;" . org-extras-personal-menu)
   ("A-H-w" . org-extras-refile-goto-latest)
   :map org-mode-map
   ("s-<return>" . org-extras-super-return)
   ("s-v" . org-extras-paste-with-conversion)
   ("A-C-s-n" . org-extras-jump-to-first-heading)
   ("A-s-b" . org-extras-set-todo-properties)
   ("A-s-h" . org-extras-insert-todo-subheading-after-body)
   ("A-s-v" . org-extras-paste-image)
   ("A-s-z" . org-extras-export-to-ea-wiki)
   ("M-w" . org-extras-count-words)
   ("A-s-n" . org-extras-new-clock-entry-today)
   ("s-." . org-extras-time-stamp-active-current-time)
   ("A-s-." . org-extras-time-stamp-active-current-date)
   ("s-/" . org-extras-time-stamp-inactive-current-time)
   ("A-s-/" . org-extras-time-stamp-inactive-current-date)
   ("A-s-u" . org-extras-id-update-id-locations)
   ("A-s-c" . org-extras-mark-checkbox-complete-and-move-to-next-item)
   ("A-s-o" . org-extras-reset-checkbox-state-subtree)
   ("H-s-w" . org-extras-refile-and-archive)
   ("s-A-l" . org-extras-url-dwim)))
#+end_src

** org-agenda
:PROPERTIES:
:ID:       E03F4142-C90D-4550-8990-15391E27AD77
:END:
:LOGBOOK:
CLOCK: [2023-03-28 Tue 12:05]--[2023-03-28 Tue 12:12] =>  0:07
CLOCK: [2022-10-10 Mon 21:40]--[2022-10-11 Tue 00:16] =>  2:36
CLOCK: [2022-07-17 Sun 08:31]--[2022-07-17 Sun 08:54] =>  0:23
CLOCK: [2022-06-25 Sat 11:09]--[2022-06-25 Sat 11:36] =>  0:27
CLOCK: [2022-05-07 Sat 16:16]--[2022-05-07 Sat 17:18] =>  1:02
CLOCK: [2022-05-06 Fri 18:00]--[2022-05-06 Fri 18:12] =>  0:12
CLOCK: [2021-11-18 Thu 12:38]--[2021-11-18 Thu 12:46] =>  0:08
CLOCK: [2021-10-20 Wed 21:01]--[2021-10-20 Wed 21:04] =>  0:03
CLOCK: [2021-08-01 Sun 22:46]--[2021-08-01 Sun 23:25] =>  0:39
CLOCK: [2021-08-01 Sun 18:03]--[2021-08-01 Sun 18:16] =>  0:13
CLOCK: [2021-07-25 Sun 13:03]--[2021-07-25 Sun 13:04] =>  0:01
CLOCK: [2021-07-13 Tue 15:23]--[2021-07-13 Tue 15:27] =>  0:04
CLOCK: [2021-07-13 Tue 09:19]--[2021-07-13 Tue 09:27] =>  0:08
CLOCK: [2021-07-05 Mon 09:48]--[2021-07-05 Mon 11:27] =>  1:39
CLOCK: [2021-07-04 Sun 19:44]--[2021-07-04 Sun 19:54] =>  0:10
CLOCK: [2021-06-30 Wed 13:24]--[2021-06-30 Wed 14:24] =>  1:00
CLOCK: [2021-06-30 Wed 12:26]--[2021-06-30 Wed 13:16] =>  0:20
CLOCK: [2021-06-28 Mon 22:25]--[2021-06-28 Mon 22:58] =>  0:33
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-28 Wed 09:07]--[2021-04-28 Wed 09:17] =>  0:10
CLOCK: [2021-04-22 Thu 16:11]--[2021-04-22 Thu 16:22] =>  0:11
CLOCK: [2021-04-03 Sat 13:02]--[2021-04-03 Sat 13:12] =>  0:10
CLOCK: [2021-04-24 Sat 18:53]--[2021-04-24 Sat 18:55] =>  0:02
CLOCK: [2021-04-24 Sat 12:39]--[2021-04-24 Sat 12:47] =>  0:08
CLOCK: [2021-04-02 Fri 17:47]--[2021-04-02 Fri 17:50] =>  0:03
CLOCK: [2021-03-07 Sun 17:45]--[2021-03-07 Sun 17:56] =>  0:11
CLOCK: [2021-02-03 Wed 21:01]--[2021-02-03 Wed 21:07] =>  0:06
CLOCK: [2021-05-12 Wed 17:50]--[2021-05-12 Wed 18:04] =>  0:14
CLOCK: [2021-04-05 Mon 08:26]--[2021-04-05 Mon 08:34] =>  0:08
CLOCK: [2021-04-08 Thu 22:36]--[2021-04-08 Thu 22:36] =>  0:00
CLOCK: [2021-06-25 Fri 15:05]--[2021-06-25 Fri 15:08] =>  0:03
CLOCK: [2021-04-07 Wed 16:25]--[2021-04-07 Wed 16:41] =>  0:16
CLOCK: [2021-04-06 Tue 21:19]--[2021-04-06 Tue 21:31] =>  0:12
CLOCK: [2021-03-11 Thu 19:18]--[2021-03-11 Thu 19:27] =>  0:09
CLOCK: [2021-03-07 Sun 16:07]--[2021-03-07 Sun 16:41] =>  0:34
CLOCK: [2021-02-27 Sat 13:40]--[2021-02-27 Sat 13:59] =>  0:19
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-agenda
  :after org
  :init
  (setopt org-agenda-hide-tags-regexp "project")

  :custom
  (org-agenda-window-setup 'current-window)
  (org-agenda-use-time-grid nil)
  (org-agenda-ignore-properties '(effort appt category))
  (org-agenda-dim-blocked-tasks nil)
  (org-agenda-sticky t)
  (org-agenda-todo-ignore-with-date t)       ; exclude tasks with a date.
  (org-agenda-todo-ignore-scheduled 'future) ; exclude scheduled tasks.
  (org-agenda-restore-windows-after-quit t)  ; don't destroy window splits
  (org-agenda-span 1)                        ; show daily view by default
  (org-agenda-clock-consistency-checks       ; highlight gaps of five or more minutes in agenda log mode
   '(:max-duration "5:00" :min-duration "0:01" :max-gap 5 :gap-ok-around ("2:00")))
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-log-mode-items '(clock))
  (org-agenda-custom-commands
   '(("E" "TODOs without effort"
      ((org-ql-block '(and (todo)
                           (not (property "effort")))
                     ((org-ql-block-header "TODOs without effort")))))
     ("w" "Weekly review"
      agenda ""
      ((org-agenda-clockreport-mode t)
       (org-agenda-archives-mode t)
       (org-agenda-start-day "-7d")
       (org-agenda-span 7)
       (org-agenda-start-on-weekday 0)))
     ("p" "Appointments" agenda* "Today's appointments"
      ((org-agenda-span 1)
       (org-agenda-max-entries 3)))
     ("r"
      "Reading list"
      tags
      "PRIORITY=\"1\"|PRIORITY=\"2\"|PRIORITY=\"3\"|PRIORITY=\"4\"|PRIORITY=\"5\"|PRIORITY=\"6\"|PRIORITY=\"7\"|PRIORITY=\"8\"|PRIORITY=\"9\""
      ((org-agenda-files (list paths-dir-bibliographic-notes))))
     ("g" "All TODOs"
      todo "TODO")
     ("G" "All Tlön TODOs"
      todo "TODO"
      ((org-agenda-files (list paths-dir-tlon-todos))))
     ("," "All tasks with no priority"
      tags-todo "-PRIORITY=\"1\"-PRIORITY=\"2\"-PRIORITY=\"3\"-PRIORITY=\"4\"-PRIORITY=\"5\"-PRIORITY=\"6\"-PRIORITY=\"7\"-PRIORITY=\"8\"-PRIORITY=\"9\"")))
  (org-agenda-files (list paths-file-calendar))
  (org-agenda-archives-mode 'trees)

  :config
  (advice-add 'org-agenda-goto :after
              (lambda (&rest _)
                "Narrow to the entry and its children after jumping to it."
                (org-extras-narrow-to-entry-and-children)))

  (advice-add 'org-habit-toggle-display-in-agenda :around
              (lambda (orig-fun &rest args)
                "Prevent `org-modern-mode' interference with org habits."
                (if org-habit-show-habits
                    (progn
                      (global-org-modern-mode)
                      (apply orig-fun args)
                      (org-agenda-redo)
                      (global-org-modern-mode))
                  (global-org-modern-mode -1)
                  (apply orig-fun args)
                  (org-agenda-redo)
                  (global-org-modern-mode -1))))

  :hook
  (org-agenda-mode-hook . (lambda ()
                            "Disable `visual-line-mode' and `toggle-truncate-lines' in `org-agenda'."
                            (visual-line-mode -1)
                            (toggle-truncate-lines)))

  :bind
  (("s-g" . org-agenda)
   :map org-agenda-mode-map
   ("A-s-g" . org-gcal-extras-menu)
   ("s-s" . org-save-all-org-buffers)
   ("I" . org-pomodoro)
   ("h" . org-habit-toggle-display-in-agenda)
   ("M-k" . org-clock-convenience-timestamp-up)
   ("M-l" . org-clock-convenience-timestamp-down)
   ("s-b" . calendar-extras-calfw-block-agenda)
   ("f" . ace-link-org-agenda)
   ("?" . org-agenda-filter)
   (";" . org-agenda-later)
   ("C-b" . org-agenda-tree-to-indirect-buffer)
   ("C-k" . nil)
   ("d" . org-agenda-deadline)
   ("M-t" . nil)
   ("H-n" . nil)
   ("s-k" . nil)
   ("s-f" . ace-link-extras-org-agenda-clock-in)
   ("i" . org-agenda-clock-in)
   ("I" . org-agenda-diary-entry)
   ("j" . org-agenda-earlier)
   ("J" . org-agenda-goto-date)
   ("k" . org-agenda-previous-line)
   ("l" . org-agenda-next-line)
   ("n" . org-agenda-date-later)
   ("o" . org-agenda-open-link)
   ("p" . org-agenda-date-earlier)
   ("q" . org-agenda-kill-all-agenda-buffers)
   ("RET" . org-extras-agenda-switch-to-dwim)
   ("/" . org-extras-agenda-done-and-next)
   ("\"" . org-extras-agenda-postpone-and-next)
   ("b" . org-extras-agenda-toggle-anniversaries)
   ("SPC" . org-extras-agenda-goto-and-start-clock)
   ("x" . org-extras-agenda-toggle-log-mode)
   ("s" . org-agenda-schedule)
   ("w" . org-agenda-refile)
   ("W" . org-agenda-week-view)
   ("X" . org-agenda-exit)
   ("y" . org-agenda-day-view)
   ("z" . org-agenda-undo)))
#+end_src

** org-capture
:PROPERTIES:
:ID:       14F93A83-0BE7-42E3-891E-F6806192296B
:END:
:LOGBOOK:
CLOCK: [2023-05-10 Wed 07:50]--[2023-05-10 Wed 08:14] =>  0:24
CLOCK: [2022-06-13 Mon 14:45]--[2022-06-13 Mon 15:00] =>  0:15
CLOCK: [2022-06-11 Sat 13:40]--[2022-06-11 Sat 14:03] =>  0:23
CLOCK: [2022-06-11 Sat 13:19]--[2022-06-11 Sat 13:25] =>  0:06
CLOCK: [2022-06-03 Fri 15:31]--[2022-06-03 Fri 15:51] =>  0:20
CLOCK: [2022-05-28 Sat 17:00]--[2022-05-28 Sat 18:42] =>  1:42
CLOCK: [2022-04-29 Fri 19:46]--[2022-04-29 Fri 20:27] =>  0:41
CLOCK: [2022-04-29 Fri 18:14]--[2022-04-29 Fri 18:24] =>  0:10
CLOCK: [2021-12-03 Fri 19:43]--[2021-12-03 Fri 19:50] =>  0:07
CLOCK: [2021-11-18 Thu 18:28]--[2021-11-18 Thu 18:45] =>  0:17
CLOCK: [2021-08-23 Mon 11:19]--[2021-08-23 Mon 11:22] =>  0:03
CLOCK: [2021-08-20 Fri 14:15]--[2021-08-20 Fri 14:18] =>  0:03
CLOCK: [2021-08-19 Thu 11:04]--[2021-08-19 Thu 11:12] =>  0:08
CLOCK: [2021-08-17 Tue 15:13]--[2021-08-17 Tue 15:36] =>  0:23
CLOCK: [2021-08-17 Tue 14:11]--[2021-08-17 Tue 14:41] =>  0:30
CLOCK: [2021-08-13 Fri 09:09]--[2021-08-13 Fri 09:30] =>  0:21
CLOCK: [2021-07-09 Fri 11:00]--[2021-07-09 Fri 11:10] =>  0:10
CLOCK: [2021-07-09 Fri 10:32]--[2021-07-09 Fri 10:37] =>  0:05
CLOCK: [2021-06-25 Fri 17:37]--[2021-06-25 Fri 17:54] =>  0:17
CLOCK: [2021-06-07 Mon 19:14]--[2021-06-07 Mon 19:20] =>  0:06
CLOCK: [2021-05-22 Sat 18:48]--[2021-05-22 Sat 19:15] =>  0:27
CLOCK: [2021-05-05 Wed 16:03]--[2021-05-05 Wed 16:07] =>  0:04
CLOCK: [2021-04-23 Fri 22:04]--[2021-04-23 Fri 22:32] =>  0:28
CLOCK: [2021-04-12 Mon 22:01]--[2021-04-12 Mon 22:11] =>  0:10
CLOCK: [2021-04-11 Sun 16:27]--[2021-04-11 Sun 17:05] =>  0:38
CLOCK: [2021-04-02 Fri 08:30]--[2021-04-02 Fri 09:00] =>  0:30
CLOCK: [2021-03-28 Sun 18:20]--[2021-03-28 Sun 18:27] =>  0:07
CLOCK: [2021-03-28 Sun 18:18]--[2021-03-28 Sun 18:19] =>  0:01
CLOCK: [2021-03-06 Sat 20:36]--[2021-03-06 Sat 20:46] =>  0:10
CLOCK: [2021-03-02 Tue 12:39]--[2021-03-02 Tue 12:48] =>  0:09
CLOCK: [2021-03-01 Mon 10:46]--[2021-03-01 Mon 10:50] =>  0:09
CLOCK: [2021-02-27 Sat 08:20]--[2021-02-27 Sat 08:26] =>  0:06
CLOCK: [2021-02-21 Sun 19:14]--[2021-02-21 Sun 20:04] =>  0:50
CLOCK: [2021-02-19 Fri 11:11]--[2021-02-19 Fri 11:21] =>  0:10
CLOCK: [2021-02-09 Tue 09:37]--[2021-02-09 Tue 09:42] =>  0:05
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-capture
  :custom
  (org-default-notes-file paths-file-inbox-desktop)
  (org-capture-templates
   `(("." "Todo" entry
      (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
      "** TODO %?\n" :empty-lines 1)
     ;; djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html
     ("e" "Email" entry
      (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
      "** TODO Follow up with %:fromname on %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ("n" "Telegram" entry
      (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
      "** TODO Follow up with %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ("r" "Calendar" entry
      (file ,paths-file-calendar)
      "* TODO [#5] %^ \nDEADLINE: %^T" :empty-lines 1 :immediate-finish t)
     ("s" "Slack" entry
      (id "4388B4D0-3830-48E0-A118-C3195B62F0D1")
      "** TODO Follow up %a\nSCHEDULED: %t\n\n%i" :immediate-finish t :empty-lines 1 :prepend t)
     ("t" "Tlön inbox " entry
      (id "E9C77367-DED8-4D59-B08C-E6E1CCDDEC3A")
      "** TODO %? \n" :empty-lines 1 :prepend t)
     ("y" "YouTube playlist" entry
      (id "319B1611-A5A6-42C8-923F-884A354333F9")
      "* %(org-web-tools-extras-youtube-dl (current-kill 0))\n[[%c][YouTube link]]" :empty-lines 1 :prepend t :immediate-finish t)
     ;; github.com/alphapapa/org-protocol-capture-html#org-capture-template
     ("w" "Web site" entry
      (file paths-file-downloads)
      "* %a :website:\n\n%U %?\n\n%:initial")))

  :hook
  (org-capture-before-finalize-hook . org-extras-capture-before-finalize-hook-function)
  (org-capture-before-prepare-hook . org-extras-capture-prepare-finalize-hook-function)

  :bind
  (("H-t" . org-capture)
   ("A-H-t" . org-capture-goto-last-stored)
   :map org-capture-mode-map
   ("s-c" . org-capture-finalize)
   ("s-w" . org-capture-refile)))
#+end_src

Links to check out:
- [[https://github.com/sprig/org-capture-extension][GitHub - sprig/org-capture-extension: A Chrome and firefox extension facilita...]]
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][Share your Org Capture Templates! : emacs]]
- [[https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el][Org capture templates · sk8ingdom/.emacs.d · GitHub]]
- [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/][Hey Org-Mode Users, show us your org capture templates : orgmode]]. [[https://www.reddit.com/r/orgmode/comments/nmgs2i/hey_orgmode_users_show_us_your_org_capture/gzq9h2v/?utm_source=reddit&utm_medium=web2x&context=3][this one]] has templates for capturing appointments directly to Google Calendar via org-gcal. [I've now incorporated it]
- [[https://orgmode.org/worg/org-contrib/org-collector.html][org-collector.el &#x2014; collect properties into tables]]
- potentially useful capture templates:
  - [[https://helpdeskheadesk.net/sub-menus-in-org/][Submenus in org-mode Capture · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-in-files/][Org-capture in Files · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-1/][My Org Capture Templates - Part 1 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-2/][My Org Capture Templates - Part 2 emacs: · The Art of Not Asking Why]]
  - [[https://helpdeskheadesk.net/org-capture-template-3/][My Org Capture Templates - Part 3 emacs:css: · The Art of Not Asking Why]]

** org-clock
:PROPERTIES:
:ID:       90E8B1CE-433C-4B2B-8AA2-844506EAC031
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 12:30]--[2023-03-18 Sat 12:32] =>  0:02
CLOCK: [2023-03-18 Sat 11:55]--[2023-03-18 Sat 12:30] =>  0:35
CLOCK: [2023-02-22 Wed 15:58]--[2023-02-22 Wed 16:03] =>  0:05
CLOCK: [2023-02-22 Wed 15:07]--[2023-02-22 Wed 15:28] =>  0:21
CLOCK: [2023-02-22 Wed 14:41]--[2023-02-22 Wed 15:06] =>  0:25
CLOCK: [2023-02-21 Tue 23:25]--[2023-02-21 Tue 23:46] =>  0:21
CLOCK: [2022-07-06 Wed 20:26]--[2022-07-06 Wed 21:10] =>  0:44
CLOCK: [2022-06-19 Sun 10:16]--[2022-06-19 Sun 10:53] =>  0:37
CLOCK: [2022-06-13 Mon 22:33]--[2022-06-13 Mon 23:03] =>  0:30
CLOCK: [2022-03-02 Wed 18:19]--[2022-03-02 Wed 18:21] =>  0:02
CLOCK: [2021-10-24 Sun 10:55]--[2021-10-24 Sun 11:09] =>  0:14
CLOCK: [2021-08-01 Sun 18:16]--[2021-08-01 Sun 18:53] =>  0:37
CLOCK: [2021-06-23 Wed 15:48]--[2021-06-23 Wed 16:18] =>  0:30
CLOCK: [2021-06-04 Fri 21:53]--[2021-06-04 Fri 22:05] =>  0:12
CLOCK: [2021-06-04 Fri 20:53]--[2021-06-04 Fri 21:14] =>  0:21
CLOCK: [2021-05-10 Mon 22:11]--[2021-05-10 Mon 22:28] =>  0:00
CLOCK: [2021-05-02 Sun 22:09]--[2021-05-02 Sun 22:22] =>  0:13
CLOCK: [2021-04-14 Wed 18:26]--[2021-04-14 Wed 18:50] =>  0:24
CLOCK: [2021-03-29 Mon 20:57]--[2021-03-29 Mon 21:13] =>  0:16
CLOCK: [2021-03-28 Sun 20:32]--[2021-03-28 Sun 21:01] =>  0:29
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-clock
  :after org
  :custom
  (org-clock-out-when-done t)
  (org-clock-persist t)
  (org-clock-persist-query-resume nil)
  (org-clock-in-resume t)
  (org-clock-report-include-clocking-task t)
  (org-clock-ask-before-exiting nil)
  (org-clock-history-length 30)
  (org-clock-into-drawer "LOGBOOK") ; file task state changes in STATES drawer

  :config
  (org-clock-persistence-insinuate)

  :bind
  (("A-H-j" . org-clock-goto)
   ("A-H-x" . org-clock-cancel)
   ("H-i" . org-clock-in)
   ("H-o" . org-clock-out)))
#+end_src

*** TODO [#6] Find a way to restore the org-clock when refreshing the tab bar
:PROPERTIES:
:ID:       91C2D236-79B7-470A-B667-D200CCA92A9D
:END:
Examine =org-clock-update-mode-line=.
** org-clock-convenience
:PROPERTIES:
:ID:       1DB11C80-DE47-42EA-851A-4D35398C1005
:END:
:LOGBOOK:
CLOCK: [2023-03-18 Sat 13:14]--[2023-03-18 Sat 13:27] =>  0:13
:END:

/[[https://github.com/dfeich/org-clock-convenience][org-clock-convenience]] provides convenience functions to work with org-mode clocking./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-clock-convenience
  :after org-clock org-agenda
  :defer t)
#+end_src

** org-clock-split
:PROPERTIES:
:ID:       594F8AE4-9AE7-4D7D-A504-E75C5139BB5D
:END:

/[[https://github.com/0robustus1/org-clock-split][org-clock-split]] allows splitting of one clock entry into two contiguous entries./

I’m using a fork that fixes some functionality that broke when org changed =org-time-stamp-formats=.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-clock-split
  :ensure (:host github
                 :repo "0robustus1/org-clock-split"
                 :branch "support-emacs-29.1")
  :defer t)
#+end_src

** org-cycle
:PROPERTIES:
:ID:       AAB14053-B232-4627-8C1D-635FAE417A98
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-cycle
  :after org
  :custom
  (org-cycle-emulate-tab nil)) ; TAB always cycles, even if point not on a heading
#+end_src

** org-archive
:PROPERTIES:
:ID:       354B22B6-B3BD-409D-B04F-051D4AD87959
:END:
:LOGBOOK:
CLOCK: [2021-07-22 Thu 12:12]--[2021-07-22 Thu 12:23] =>  0:11
CLOCK: [2021-04-24 Sat 13:10]--[2021-04-24 Sat 13:14] =>  0:04
CLOCK: [2021-03-11 Thu 09:41]--[2021-03-11 Thu 10:00] =>  0:19
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-archive
  :after org
  :custom
  (org-archive-default-command 'org-archive-to-archive-sibling)
  (org-archive-location (expand-file-name "%s_archive.org::" paths-dir-archive))

  :bind
  (:map org-mode-map
        ("s-a" . org-archive-subtree-default)))
#+end_src

** org-archive-hierarchically
:PROPERTIES:
:ID:       27C3C7F9-C040-4844-AC5A-762BBC26C18F
:END:
:LOGBOOK:
CLOCK: [2023-02-17 Fri 11:34]--[2023-02-17 Fri 11:47] =>  0:13
:END:

/[[https://gitlab.com/andersjohansson/org-archive-hierarchically][org-archive-hierarchically]] archives org subtrees in a way that preserves the original heading structure./

I normally archive subtrees with =org-archive-to-archive-sibling=, but use =org-archive-hierarchically= for files in public repositories. =org-archive-to-archive-sibling= moves archived tasks to a heading, which is by default collapsed in org, but in Github archived tasks are always fully visible, creating a lot of clutter.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-archive-hierarchically
  :ensure (:host gitlab
             :repo "andersjohansson/org-archive-hierarchically")
  :defer t)
#+end_src

** org-fold
:PROPERTIES:
:ID:       DCBF8A9B-D230-4D51-B861-B85AA4405D25
:END:
:LOGBOOK:
CLOCK: [2021-03-15 Mon 14:51]--[2021-03-15 Mon 15:07] =>  0:16
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-fold
  :after org
  :custom
  (org-fold-catch-invisible-edits 'smart))
#+end_src

** org-faces
:PROPERTIES:
:ID:       1A295AA4-31BD-4B2E-828B-5B3443AD8D35
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-faces
  :after org faces-extras
  :custom
  (org-fontify-quote-and-verse-blocks t)

  :config
  (faces-extras-set-and-store-face-attributes
   '((org-drawer :family faces-extras-fixed-pitch-font :height faces-extras-org-property-value-height
                 :foreground "LightSkyBlue")
     (org-property-value :family faces-extras-fixed-pitch-font :height faces-extras-org-property-value-height)
     (org-special-keyword :family faces-extras-fixed-pitch-font :height faces-extras-org-property-value-height)
     (org-meta-line :family faces-extras-fixed-pitch-font :height faces-extras-org-property-value-height)
     (org-tag :family faces-extras-fixed-pitch-font :height faces-extras-org-tag-height)
     (org-document-title :family faces-extras-fixed-pitch-font :height 1.0)
     (org-code :family faces-extras-fixed-pitch-font :height faces-extras-org-code-height)
     (org-verbatim :family faces-extras-fixed-pitch-font :height faces-extras-org-code-height)
     (org-todo :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-archived :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-verbatim :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-1 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-2 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-3 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-4 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-5 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-6 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-7 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-level-8 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (org-date :family faces-extras-fixed-pitch-font :height faces-extras-org-date-height)
     (org-block :family faces-extras-fixed-pitch-font :height faces-extras-org-block-height)
     (org-block-begin-line :family faces-extras-fixed-pitch-font :height faces-extras-org-block-height)
     (org-quote :family faces-extras-variable-pitch-font :height faces-extras-variable-pitch-height))))
#+end_src

** org-id
:PROPERTIES:
:ID:       51E91355-66E0-479C-B616-116EF261F930
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 11:32]--[2023-04-08 Sat 12:00] =>  0:28
CLOCK: [2023-03-09 Thu 20:07]--[2023-03-09 Thu 20:19] =>  0:12
CLOCK: [2022-08-29 Mon 17:28]--[2022-08-29 Mon 17:43] =>  0:15
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-id
  :after org
  :defer t
  :custom
  (org-id-link-to-org-use-id t)
  ;; I want these files to be searched for IDs, so that I can use
  ;; org-capture templates with them, but do not want them to be part
  ;; of org-agenda or org-roam.
  (org-id-extra-files (list
                       paths-file-tlon-tareas-leo
                       paths-file-tlon-tareas-fede)))
#+end_src

** org-list
:PROPERTIES:
:ID:       DD345C01-CEAC-4CEC-A8D5-89C16A0182CB
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-list
  :after org
  :custom
  (org-plain-list-ordered-item-terminator ?.)
  (org-list-indent-offset 2))
#+end_src

** org-refile
:PROPERTIES:
:ID:       3FAE7C0D-FB22-4175-A0A4-FFA392539743
:REFILE_TARGET_FILE: config.org
:REFILE_TARGET_HEADING: Watched
:END:
:LOGBOOK:
CLOCK: [2023-02-22 Wed 17:05]--[2023-02-22 Wed 17:30] =>  0:25
CLOCK: [2021-12-15 Wed 10:20]--[2021-12-15 Wed 10:30] =>  0:10
CLOCK: [2021-12-14 Tue 18:00]--[2021-12-14 Tue 18:08] =>  0:08
CLOCK: [2021-10-08 Fri 10:22]--[2021-10-08 Fri 10:32] =>  0:10
CLOCK: [2021-08-21 Sat 21:46]--[2021-08-21 Sat 21:54] =>  0:08
CLOCK: [2021-06-05 Sat 14:17]--[2021-06-05 Sat 14:19] =>  0:02
CLOCK: [2021-02-27 Sat 07:30]--[2021-02-27 Sat 07:46] =>  0:16
CLOCK: [2021-02-24 Wed 06:47]--[2021-02-24 Wed 07:30] =>  0:43
:END:


/org-refile refiles subtrees to various locations./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-refile
  :after org
  :defer t
  :custom
  (org-refile-targets '((org-agenda-files :maxlevel . 9)
                        (files-extras-open-buffer-files :maxlevel . 9)
                        (nil :maxlevel . 9)))
  (org-refile-use-outline-path 'level3)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes nil)
  (org-refile-use-cache t) ;  build cache at startup

  :config
  ;; Regenerate cache every half hour
  (run-with-idle-timer (* 60 30) t #'org-extras-refile-regenerate-cache))
#+end_src

** org-keys
:PROPERTIES:
:ID:       19FC2EEB-7C71-43C1-97E6-52913C31CCDE
:END:
:LOGBOOK:
CLOCK: [2021-12-23 Thu 11:03]--[2021-12-23 Thu 11:21] =>  0:18
CLOCK: [2021-07-14 Wed 22:45]--[2021-07-14 Wed 22:51] =>  0:06
CLOCK: [2021-07-06 Tue 14:58]--[2021-07-06 Tue 15:18] =>  0:20
CLOCK: [2021-06-06 Sun 14:06]--[2021-06-06 Sun 14:16] =>  0:10
CLOCK: [2021-06-06 Sun 12:27]--[2021-06-06 Sun 13:00] =>  0:33
CLOCK: [2021-06-06 Sun 09:45]--[2021-06-06 Sun 10:05] =>  0:20
CLOCK: [2021-06-01 Tue 20:43]--[2021-06-01 Tue 21:00] =>  0:17
CLOCK: [2021-04-21 Wed 17:06]--[2021-04-21 Wed 17:09] =>  0:03
CLOCK: [2021-04-21 Wed 16:42]--[2021-04-21 Wed 17:03] =>  0:21
CLOCK: [2021-04-04 Sun 18:17]--[2021-04-04 Sun 18:22] =>  0:05
CLOCK: [2021-04-04 Sun 12:54]--[2021-04-04 Sun 12:57] =>  0:03
CLOCK: [2021-04-04 Sun 12:25]--[2021-04-04 Sun 12:29] =>  0:04
CLOCK: [2021-04-04 Sun 12:05]--[2021-04-04 Sun 12:25] =>  0:20
CLOCK: [2021-03-23 Tue 12:13]--[2021-03-23 Tue 12:21] =>  0:08
:END:

Enable speed keys. To trigger a speed key, point must be at the very beginning of an org headline. Type '?' for a list of keys.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-keys
  :after org
  :custom
  (org-return-follows-link t)
  (org-use-speed-commands t)
  (org-speed-commands
   '(("Outline navigation")
     ("k" . (org-speed-move-safe 'org-previous-visible-heading))
     ("." . (org-speed-move-safe 'org-forward-heading-same-level))
     ("," . (org-speed-move-safe 'org-backward-heading-same-level))
     ("l" . (org-speed-move-safe 'org-next-visible-heading))
     ("m" . (org-speed-move-safe 'outline-up-heading))
     ("j" . (consult-extras-org-heading))
     ("Outline structure editing")
     ("a" . (org-metaleft))
     ("d" . (org-metadown))
     ("s" . (org-metaup))
     ("f" . (org-metaright))
     ("q" . (org-shiftmetaleft))
     ("e" . (org-shiftmetadown))
     ("w" . (org-shiftmetaup))
     ("r" . (org-shiftmetaright))
     ("Archiving")
     ("A" . (org-archive-subtree-default))
     ("'" . (org-force-cycle-archived))
     ("Meta data editing")
     ("t" . (org-todo))
     ("Clock")
     ("h" . (org-extras-jump-to-latest-clock-entry))
     ("H" . (lambda () (org-extras-jump-to-latest-clock-entry) (org-extras-clone-clock-entry)))
     ("i" . (org-clock-in))
     ("o" . (org-clock-out))
     ("Regular editing")
     ("z" . (undo-only))
     ("X" . (org-cut-subtree)) ; capital 'X' to prevent accidents
     ("c" . (org-copy-subtree))
     ("v" . (org-yank))
     ("Other")
     ("I" . (org-id-copy))
     ("p" . (org-priority))
     ("u" . (org-speed-command-help))
     ("g" . (org-agenda)))))
#+end_src

** ol
:PROPERTIES:
:ID:       6BA48DB9-1861-40A3-9811-1B5D9F0E350E
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ol
  :after org
  :custom
  (org-link-search-must-match-exact-headline nil)
  (org-ellipsis " ")

  :bind
  ("H-L" . org-store-link))
#+end_src

** ol-bbdb
:PROPERTIES:
:ID:       B1A25249-1E67-498D-8A68-0E4BDB3D0A2B
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ol-bbdb
  :after org bbdb ol
  :custom
  (org-bbdb-anniversary-field 'birthday))
#+end_src

** org-protocol
:PROPERTIES:
:ID:       03387678-63D2-4B72-AD25-6F6F16992D5C
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 11:51]--[2022-07-17 Sun 11:55] =>  0:04
CLOCK: [2022-07-16 Sat 21:15]--[2022-07-17 Sun 10:49] => 13:34
:END:

[[https://www.orgroam.com/manual.html#Mac-OS][This section of the org-roam manual]] describes how to set up ~org-protocol~ on macOS. Note that [[https://bitbucket.org/mituharu/emacs-mac/][emacs-mac]] supports ~org-protocol~ out of the box and doesn't require turning on the Emacs server.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-protocol
  :after org)
#+end_src

** ox
:PROPERTIES:
:ID:       A3639B32-E7EE-4119-876B-729DF18FD314
:END:
:LOGBOOK:
CLOCK: [2021-07-25 Sun 13:14]--[2021-07-25 Sun 13:18] =>  0:04
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ox
  :after org
  :defer t
  :custom
  (org-export-exclude-tags '("noexport" "ARCHIVE"))
  (org-export-with-broken-links 'mark) ; allow export with broken links
  (org-export-with-section-numbers nil) ; do not add numbers to section headings
  (org-export-with-toc nil) ; do not include table of contents
  (org-export-with-title nil) ; do not include title
  (org-export-headline-levels 4) ; include up to level 4 headlines
  (org-export-preserve-breaks t) ; respect single breaks when exporting
  ;; (org-export-with-author nil "do not include author")
  ;; (org-export-with-date nil "do not include export date")
  ;; (org-html-validation-link nil "do not include validation link")
  (org-export-show-temporary-export-buffer nil)) ; bury temporary export buffers generated by `org-msg'
#+end_src

*** TODO [#6] Change face of content under headline tagged ~unpublished~ or ~noexport~
:PROPERTIES:
:Effort:   0:45
:ID:       1AC4CC67-0F8E-4E4D-95A5-DB7116AEA359
:END:

https://stackoverflow.com/questions/20089530/color-whole-section-line-in-org-mode-depending-on-tag

#+begin_src emacs-lisp :tangle no
(font-lock-add-keywords 'org-mode
                        '(("^.*:noexport:.*$" . font-lock-keyword-face)))
#+end_src

It works, but it only changes the color of the heading, rather than the text underneath.

** ox-html
:PROPERTIES:
:ID:       799486FA-374D-40ED-953A-36C09D7E15B6
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ox-html
  :after org ox
  :custom
  (org-html-postamble nil)) ; the three lines above unnecessary when this set to nil
#+end_src

** ox-latex
:PROPERTIES:
:ID:       0D6DD227-A1C0-44B4-BD75-0C94F03D6FBE
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ox-latex
  :after org ox
  :custom
  ;; get rid of temporary LaTeX files upon export
  (org-latex-logfiles-extensions (quote
                                  ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle"))))
#+end_src

** ox-hugo
:PROPERTIES:
:ID:       1E9E8DC4-83B7-44CA-B467-BA7428DDF812
:END:
:LOGBOOK:
CLOCK: [2022-07-17 Sun 19:17]--[2022-07-17 Sun 21:01] =>  1:44
:END:

/[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] is an org-mode exporter back-end for Hugo./

Hugo should be able to export ~org-cite~ citations.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ox-hugo
  :after org ox
  :defer t)
#+end_src

** ox-pandoc
:PROPERTIES:
:ID:       C16B02FA-64E6-423B-9596-B3B023C93B21
:END:

/[[https://github.com/kawabata/ox-pandoc][ox-pandoc]] is an org-mode exporter that uses Pandoc./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ox-pandoc
  :after org ox
  :defer t)
#+end_src

** ox-gfm
:PROPERTIES:
:ID:       E0D2A0D0-4442-482C-B076-36CD8BB3F062
:END:

/[[https://github.com/larstvei/ox-gfm][ox-gfm]] is a Github Flavored Markdown org-mode exporter./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ox-gfm
  :after org ox
  :defer t)
#+end_src

** ob
:PROPERTIES:
:ID:       A19E8C93-0435-4D02-AF4F-8213212D2386
:END:
:LOGBOOK:
CLOCK: [2021-08-06 Fri 15:59]--[2021-08-06 Fri 15:59] =>  0:00
CLOCK: [2021-07-25 Sun 13:18]--[2021-07-25 Sun 13:33] =>  0:15
CLOCK: [2021-06-06 Sun 14:34]--[2021-06-06 Sun 15:08] =>  0:34
CLOCK: [2021-04-05 Mon 19:18]--[2021-04-05 Mon 19:50] =>  0:32
CLOCK: [2021-02-25 Thu 15:00]--[2021-02-25 Thu 15:32] =>  0:32
:END:


/ob provides support for code blocks in org-mode./

Note to self: Typescript syntax highlighting works fine, but calling ~org-edit-special~ triggers an error; see the gptel conversation named ~typescript-syntax-highlighting~.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ob
  :after org
  :defer t
  :custom
  (org-confirm-babel-evaluate 'org-extras-confirm-babel-evaluate)

  :config
  ;; enable lexical binding in code blocks
  (setcdr (assq :lexical org-babel-default-header-args:emacs-lisp) "no")
  (setq org-babel-default-header-args:python
        '((:exports . "both")
          (:results . "replace output")
          (:session . "none")
          (:cache . "no")
          (:noweb . "no")
          (:hlines . "no")
          (:tangle . "no")))

  (setq org-babel-default-header-args:typescript
        '((:mode . typescript-ts-mode)))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (R . t)
     (typescript . t)))

  (add-to-list 'major-mode-remap-alist '(typescript-mode . typescript-ts-mode))
  (defalias 'typescript-mode 'typescript-ts-mode)

  (dolist (cons (list (cons "j" 'org-babel-next-src-block)
                      (cons "k" 'org-babel-previous-src-block)
                      (cons "n" 'org-babel-insert-header-arg)
                      (cons "p" 'org-babel-remove-result-one-or-many)))
    (add-to-list 'org-babel-key-bindings cons)))
#+end_src

** ob-typescript
:PROPERTIES:
:ID:       7025014B-468D-4BDA-93B3-65980E6EC324
:END:


/[[https://github.com/lurdan/ob-typescript][ob-typescript]] enables the execution of typescript code blocks./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ob-typescript
  :after ob)
#+end_src

** org-tempo
:PROPERTIES:
:ID:       E60D2631-F68D-4510-B857-B5880232D384
:END:

/org-tempo provides completion templates for org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-tempo
  :after org)
#+end_src

** org-src
:PROPERTIES:
:ID:       5D173B55-ED72-495C-80EE-39063BAB0550
:END:



#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-src
  :after org
  :custom
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil)
  (org-src-window-setup 'current-window)
  (org-src-tab-acts-natively nil) ; When set to `nil', newlines will be properly indented

  :bind
  (:map org-src-mode-map
   ("s-z" . org-edit-src-exit)))
#+end_src

** org-table
:PROPERTIES:
:ID:       6DB39CB9-0939-41CD-B3A4-4FC478F24077
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-table
  :after org
  :bind
  (:map org-table-fedit-map
   ("s-c" . org-table-fedit-finish)))
#+end_src

** orgtbl-edit
:PROPERTIES:
:ID:       7C3382D2-F7B4-4F1B-854E-BB60D568E299
:END:

/[[https://github.com/shankar2k/orgtbl-edit][orgtbl-edit]] allows editing a spreadsheet or text-delimited file as an org table./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package orgtbl-edit
  :ensure (:host github
                 :repo "shankar2k/orgtbl-edit")
  :after org-table
  :defer t)
#+end_src

** orgtbl-join
:PROPERTIES:
:ID:       91A9FFF0-BEB8-4C0D-9D78-B2F190C5AA8F
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package orgtbl-join
  :after org-table
  :defer t)
#+end_src

** org-crypt
:PROPERTIES:
:ID:       3C8E083B-55A1-4B55-A30A-BD9C4BE1D1D0
:END:
:LOGBOOK:
CLOCK: [2023-04-30 Sun 11:40]--[2023-04-30 Sun 11:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:19]--[2023-04-02 Sun 21:22] =>  0:03
CLOCK: [2021-03-18 Thu 18:49]--[2021-03-18 Thu 18:51] =>  0:02
:END:

/[[https://orgmode.org/manual/Org-Crypt.html][org-crypt]] encrypts the text under all headlines with a designated tag./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-crypt
  :after org
  :defer t
  :custom
  (org-crypt-key (getenv "PERSONAL_GMAIL"))
  (org-crypt-disable-auto-save t)

  :config
  (org-crypt-use-before-save-magic))
#+end_src

** org-element
:PROPERTIES:
:ID:       79B7B36E-D824-4D67-BBAC-E4E4D8FA628F
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-element
  :after org
  :defer 3
  :custom
  ;; set to nil to temporarily disable cache and avoid `org-element-cache' errors
  (org-element-use-cache t))
#+end_src

** org-lint
:PROPERTIES:
:ID:       43E5754F-7EB8-4FB7-8A92-B57D8BA2AF81
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-lint
  :after org
  :defer t)
#+end_src

** org-habit
:PROPERTIES:
:ID:       A4EE67E0-498C-4CE0-BBB2-E7F24DA6AD69
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-habit
  :after org org-agenda
  :custom
  (org-habit-today-glyph #x1f4c5)
  (org-habit-completed-glyph #x2713)
  (org-habit-preceding-days 25)
  (org-habit-following-days 1)
  (org-habit-graph-column 85)
  (org-habit-show-habits nil)
  (org-habit-show-habits-only-for-today nil))
#+end_src

** org-contrib
:PROPERTIES:
:ID:       F2DD9900-5926-4FE1-A8DC-C398CFE80378
:END:

/[[https://git.sr.ht/~bzg/org-contrib][org-contrib]] features add-ons to ~org-mode~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-contrib
  :after org)
#+end_src

** org-checklist
:PROPERTIES:
:ID:       1ABA68C3-187B-457C-9992-4C4BBEB45C18
:END:
:LOGBOOK:
CLOCK: [2021-07-12 Mon 15:33]--[2021-07-12 Mon 16:00] =>  0:27
CLOCK: [2021-06-22 Tue 21:39]--[2021-06-23 Wed 00:21] =>  2:42
CLOCK: [2021-04-20 Tue 23:28]--[2021-04-20 Tue 23:44] =>  0:16
:END:

Allows reset of checkboxes in recurring tasks. This works only on headings that have the property ~RESET_CHECK_BOXES~ set to ~t~. You can set the property of a heading by invoking the command =org-set-property= with point on that heading or immediately under it.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature org-checklist
  :after org-contrib
  :defer 3)
#+end_src

** org-make-toc
:PROPERTIES:
:ID:       5BAB49C3-DB85-4CB1-9CF7-5FD72AFB4608
:END:
:LOGBOOK:
CLOCK: [2023-02-26 Sun 13:15]--[2023-02-26 Sun 13:28] =>  0:13
:END:

/[[https://github.com/alphapapa/org-make-toc][org-make-toc]] generates automatic tables of contents for org files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-make-toc
  :after org
  :defer 5)
#+end_src

** org2blog
:PROPERTIES:
:ID:       56AD66CB-240C-4BAA-918B-CCD63BD518C4
:END:
:LOGBOOK:
CLOCK: [2021-05-29 Sat 13:27]--[2021-05-29 Sat 13:49] =>  0:22
CLOCK: [2021-05-29 Sat 12:08]--[2021-05-29 Sat 12:30] =>  0:22
CLOCK: [2021-03-27 Sat 22:03]--[2021-03-27 Sat 22:12] =>  0:09
CLOCK: [2021-03-18 Thu 21:57]--[2021-03-18 Thu 22:02] =>  0:05
CLOCK: [2021-03-17 Wed 22:08]--[2021-03-17 Wed 22:23] =>  0:15
CLOCK: [2021-03-17 Wed 20:34]--[2021-03-17 Wed 20:52] =>  0:18
:END:

/[[https://github.com/org2blog/org2blog][org2blog]] lets you blog from Org mode to WordPress./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org2blog
  :after auth-source-pass
  :custom
  (org2blog/wp-blog-alist
        `(("Pablo's website"
           :url "https://www.stafforini.com/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/wp-admin/admin"))
          ("Pablo's miscellany"
           :url "https://www.stafforini.com/blog/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/blog/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/blog/wp-admin/admin"))
          ("notatu dignum"
           :url "https://www.stafforini.com/quotes/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/quotes/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/quotes/wp-admin/admin"))
          ("Puro compás"
           :url "https://www.stafforini.com/tango/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "chrome/stafforini.com/tango/wp-admin/admin")
           :password ,(auth-source-pass-get 'secret "chrome/stafforini.com/tango/wp-admin/admin"))
          ("EA Quotes"
           :url "https://eaquotes.net/xmlrpc.php"
           :username ,(auth-source-pass-get "user" "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net")
           :password ,(auth-source-pass-get 'secret "tlon/EAQUOTES/eaquotes.net/wp_admin@eaquotes.net"))))

  (org2blog/wp-show-post-in-browser 'show)
  (org2blog/wp-track-posts (list paths-file-org2blog "Posts"))

  :bind
  ("A-o" . org2blog-user-interface))
#+end_src

** org2blog-extras
:PROPERTIES:
:ID:       189C41F8-D0BF-40CC-A4AD-96C7F4A76E4D
:END:


/[[file:extras/org2blog-extras.el][org2blog-extras]] collects my extensions for =org2blog=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org2blog-extras
  :after org2blog)
#+end_src

** org-journal
:PROPERTIES:
:ID:       16DB534E-D606-4510-84ED-6C6640780E7A
:END:

/[[https://github.com/bastibe/org-journal][org-journal]] is an org-mode based journaling mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-journal
  :after org
  :custom
  (org-journal-dir paths-dir-journal)
  (org-journal-date-format "%Y-%m-%d")
  (org-journal-file-format "%Y.org")
  (org-journal-file-type 'yearly) ; set org-journal to use the same files for same year entries

  :config
  (defun org-journal-new-entry-in-journal ()
    "Create a new journal entry in the selected journal."
    (interactive)
    (let* ((journal-dirs (list paths-dir-tlon-todos paths-dir-journal))
           (cons (mapcar (lambda (dir)
                           (cons (file-name-nondirectory (directory-file-name dir)) dir))
                         journal-dirs))
           (choice (completing-read "Journal: " cons))
           (org-journal-dir (alist-get choice cons nil nil 'string=)))
      (org-journal-new-entry nil)))

  :bind
  ("A-j" . org-journal-new-entry-in-journal))
#+end_src

*** TODO [#5] Explore how to use org journal as the day organizer
:PROPERTIES:
:ID:       67333293-EE6D-4936-8C88-07F5AE193B81
:END:

** org-contacts
:PROPERTIES:
:ID:       63430292-5227-42B5-ABDC-4630C719E9D1
:END:

/[[https://repo.or.cz/org-contacts.git][org-contacts]] is a contacts management system for Org Mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-contacts
  :ensure (:build (:not elpaca--check-version))
  :after org tlon
  :defer t
  :custom
  (org-contacts-files `(,(file-name-concat paths-dir-tlon-repos "babel-core/contacts.org"))))
#+end_src

** org-vcard
:PROPERTIES:
:ID:       6747452D-3E69-48C9-A179-062D76C0406D
:END:

/[[https://github.com/pinoaffe/org-vcard][org-vcard]] imports and exports vCards from within org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-vcard
  :defer t
  :custom
  ;; optimized for macOS Contacts.app
  (org-vcard-styles-languages-mappings
   '(("flat"
      (("en"
        (("3.0"
          (("ADDRESS_HOME" . "ADR;TYPE=\"home\";PREF=1")
           ("ADDRESS_HOME" . "ADR;TYPE=\"home\"")
           ("BIRTHDAY" . "BDAY")
           ("EMAIL" . "EMAIL;PREF=1")
           ("FN" . "FN")
           ("PHOTO" . "PHOTO;TYPE=JPEG")
           ("URL" . "item1.URL;type=pref")))
         ("4.0"
          (("ADDRESS_HOME" . "ADR;TYPE=\"home\";PREF=1")
           ("ADDRESS_HOME" . "ADR;TYPE=\"home\"")
           ("BIRTHDAY" . "BDAY")
           ("EMAIL" . "EMAIL;PREF=1")
           ("FN" . "FN")
           ("PHOTO" . "PHOTO;TYPE=JPEG")
           ("URL" . "URL;PREF=1")))
         ("2.1"
          (("ADDRESS_HOME" . "ADR;HOME;PREF")
           ("ADDRESS_HOME" . "ADR;HOME")
           ("BIRTHDAY" . "BDAY")
           ("EMAIL" . "EMAIL;PREF")
           ("FN" . "FN")
           ("PHOTO" . "PHOTO;TYPE=JPEG")
           ("URL" . "URL;PREF")))))))))

  :config
  (defun org-vcard--save-photo-and-make-link (base64-data contact-name)
    "Save base64 photo data to file and return org link."
    (let* ((photo-dir (expand-file-name "contact-photos" user-emacs-directory))
           (safe-name (replace-regexp-in-string "[^a-zA-Z0-9]" "_" contact-name))
           (filename (expand-file-name (concat safe-name ".jpg") photo-dir)))
      (unless (file-directory-p photo-dir)
        (make-directory photo-dir t))
      (with-temp-file filename
        (set-buffer-multibyte nil)  ; Use unibyte mode for binary data
        (let ((coding-system-for-write 'binary))
          ;; Remove potential MIME type header if present
          (when (string-match "^data:image/[^;]+;base64," base64-data)
            (setq base64-data (substring base64-data (match-end 0))))
          ;; Process base64 data in chunks
          (let ((chunk-size 4096)
                (start 0)
                (total-length (length base64-data)))
            (while (< start total-length)
              (let* ((end (min (+ start chunk-size) total-length))
                     (chunk (substring base64-data start end)))
                (insert (base64-decode-string chunk))
                (setq start end))))))
      (format "\n#+ATTR_ORG: :width 300\n[[file:%s]]\n" filename)))

  (advice-add 'org-vcard--transfer-write :around
              (lambda (orig-fun direction content destination)
                "Convert PHOTO properties to image links before writing."
                (if (eq direction 'import)
                    (let ((modified-content
                           (with-temp-buffer
                             (insert content)
                             (goto-char (point-min))
                             (while (re-search-forward "^:PHOTO: \\(.+\\)$" nil t)
                               (let* ((base64-data (match-string 1))
                                      (heading (save-excursion
                                                 (re-search-backward "^\\* \\(.+\\)$" nil t)
                                                 (match-string 1)))
                                      (photo-link (condition-case err
                                                      (org-vcard--save-photo-and-make-link
                                                       base64-data heading)
                                                    (error
                                                     (message "Error processing photo for %s: %s"
                                                              heading (error-message-string err))
                                                     ":PHOTO: [Error processing photo]\n"))))
                                 (delete-region (line-beginning-position) (line-end-position))
                                 ;; Delete any following empty line
                                 (when (looking-at "\n")
                                   (delete-char 1))
                                 (save-excursion
                                   (re-search-forward ":END:\n" nil t)
                                   (insert photo-link))))
                             (buffer-string))))
                      (funcall orig-fun direction modified-content destination))
                  (funcall orig-fun direction content destination)))))
#+end_src

** org-autosort
:PROPERTIES:
:ID:       1BC53647-A492-4EA3-A9A5-352C71119629
:END:

/[[https://github.com/yantar92/org-autosort][org-autosort]] sorts entries in org files automatically./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-autosort
  :ensure (:host github
                 :repo "yantar92/org-autosort")
  :after org
  :defer 7)
#+end_src

** ox-clip
:PROPERTIES:
:ID:       E2D54031-28E4-4F96-A3D1-0E06D1B1A17E
:END:

/[[https://github.com/jkitchin/ox-clip][ox-clip]] copies selected regions in org-mode as formatted text on the clipboard./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ox-clip
  :after org
  :defer t
  :custom
  ;; github.com/jkitchin/ox-clip/issues/13
  (ox-clip-osx-cmd
   '(("HTML" . "tee /tmp/ox-clip.html >/dev/null && osascript -e 'set the clipboard to (read (POSIX file \"/tmp/ox-clip.html\") as «class HTML»)'")
     ("Markdown" . "pandoc --wrap=none -f html -t \"markdown+hard_line_breaks\" - | grep -v \"^:::\" | sed 's/{#.*}//g' | pbcopy"))))
#+end_src

** elgantt
:PROPERTIES:
:ID:       22FCE4B1-4A51-4DF5-8BAF-2AC6E837DEE3
:END:

/[[https://github.com/legalnonsense/elgantt/][elgantt]] is a gantt chart for org mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elgantt
  :ensure (:host github
           :repo "legalnonsense/elgantt")
  :after org
  :defer t)
#+end_src

** org-pomodoro
:PROPERTIES:
:ID:       107BED3A-947F-4D35-A382-2C20C1C37AED
:END:
:LOGBOOK:
CLOCK: [2022-04-30 Sat 14:12]--[2022-04-30 Sat 14:38] =>  0:26
CLOCK: [2022-03-31 Thu 18:49]--[2022-03-31 Thu 18:59] =>  0:10
CLOCK: [2022-03-31 Thu 17:36]--[2022-03-31 Thu 18:02] =>  0:26
CLOCK: [2022-03-31 Thu 17:25]--[2022-03-31 Thu 17:30] =>  0:05
:END:

/[[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]] provides org-mode support for the Pomodoro technique./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-pomodoro
  :after org org-agenda
  :custom
  (org-pomodoro-length 25)
  (org-pomodoro-short-break-length (- 30 org-pomodoro-length))
  (org-pomodoro-long-break-length org-pomodoro-short-break-length)
  (org-pomodoro-finished-sound "/System/Library/Sounds/Blow.aiff")
  (org-pomodoro-long-break-sound org-pomodoro-finished-sound)
  (org-pomodoro-short-break-sound org-pomodoro-finished-sound)

  :hook
  (org-pomodoro-started-hook . org-extras-pomodoro-format-timer)
  (org-pomodoro-started-hook . tab-bar-extras-disable-all-notifications)
  (org-pomodoro-finished-hook . tab-bar-extras-enable-all-notifications)

  :bind
  (("H-I" . org-pomodoro)
   ("M-s-e" . org-pomodoro-extend-last-clock)))
#+end_src

- check: https://gist.github.com/bravosierrasierra/1d98a89a7bcb618ef70c6c4a92af1a96#file-org-pomodoro-plus

** org-pomodoro-extras
:PROPERTIES:
:ID:       6D8C1A4B-3131-4175-AB23-4C3DDA311872
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-pomodoro-extras
  :after org-pomodoro)
#+end_src

* note-taking
:PROPERTIES:
:ID:       EC6700D7-C65D-4430-8DAC-57772B423D69
:END:

** org-roam
:PROPERTIES:
:ID:       2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17
:END:
:LOGBOOK:
CLOCK: [2023-05-08 Mon 11:11]--[2023-05-08 Mon 12:20] =>  1:09
CLOCK: [2023-04-08 Sat 11:18]--[2023-04-08 Sat 11:32] =>  0:14
CLOCK: [2023-03-09 Thu 12:35]--[2023-03-09 Thu 12:57] =>  0:22
CLOCK: [2022-09-30 Fri 20:53]--[2022-09-30 Fri 21:21] =>  0:28
CLOCK: [2022-06-28 Tue 20:12]--[2022-06-28 Tue 20:13] =>  0:01
CLOCK: [2022-06-28 Tue 17:57]--[2022-06-28 Tue 18:21] =>  0:24
CLOCK: [2022-06-28 Tue 16:03]--[2022-06-28 Tue 16:06] =>  0:03
CLOCK: [2022-06-28 Tue 11:50]--[2022-06-28 Tue 12:30] =>  0:40
CLOCK: [2022-06-26 Sun 10:50]--[2022-06-26 Sun 11:45] =>  0:55
CLOCK: [2022-06-26 Sun 09:08]--[2022-06-26 Sun 09:29] =>  0:21
CLOCK: [2022-06-18 Sat 17:27]--[2022-06-18 Sat 17:43] =>  0:16
CLOCK: [2022-03-08 Tue 13:05]--[2022-03-08 Tue 13:06] =>  0:01
CLOCK: [2022-02-01 Tue 11:41]--[2022-02-01 Tue 12:01] =>  0:20
CLOCK: [2022-01-31 Mon 15:36]--[2022-01-31 Mon 15:52] =>  0:16
CLOCK: [2021-12-27 Mon 22:14]--[2021-12-27 Mon 22:16] =>  0:02
CLOCK: [2021-12-15 Wed 12:16]--[2021-12-15 Wed 12:26] =>  0:10
CLOCK: [2021-12-05 Sun 18:33]--[2021-12-05 Sun 18:46] =>  0:13
CLOCK: [2021-12-04 Sat 14:40]--[2021-12-04 Sat 15:00] =>  0:20
CLOCK: [2021-12-03 Fri 12:18]--[2021-12-03 Fri 12:23] =>  0:05
CLOCK: [2021-12-02 Thu 21:05]--[2021-12-02 Thu 21:20] =>  0:15
CLOCK: [2021-12-02 Thu 19:51]--[2021-12-02 Thu 20:56] =>  1:05
CLOCK: [2021-12-02 Thu 18:49]--[2021-12-02 Thu 18:55] =>  0:06
CLOCK: [2021-12-02 Thu 18:30]--[2021-12-02 Thu 18:33] =>  0:03
CLOCK: [2021-08-06 Fri 15:32]--[2021-08-06 Fri 15:33] =>  0:01
CLOCK: [2021-08-02 Mon 18:45]--[2021-08-02 Mon 18:47] =>  0:02
CLOCK: [2021-07-30 Fri 14:13]--[2021-07-30 Fri 14:30] =>  0:17
CLOCK: [2021-07-28 Wed 16:27]--[2021-07-28 Wed 16:47] =>  0:20
CLOCK: [2021-07-26 Mon 11:26]--[2021-07-26 Mon 12:25] =>  0:59
CLOCK: [2021-07-24 Sat 22:54]--[2021-07-25 Sun 08:40] =>  9:46
CLOCK: [2021-07-24 Sat 19:19]--[2021-07-24 Sat 19:47] =>  0:28
CLOCK: [2021-07-24 Sat 09:31]--[2021-07-24 Sat 09:51] =>  0:20
CLOCK: [2021-06-25 Fri 21:03]--[2021-06-25 Fri 21:05] =>  0:02
CLOCK: [2021-05-17 Mon 15:45]--[2021-05-17 Mon 16:56] =>  1:11
CLOCK: [2021-05-17 Mon 14:41]--[2021-05-17 Mon 14:55] =>  0:14
CLOCK: [2021-05-03 Mon 20:56]--[2021-05-03 Mon 21:37] =>  0:41
CLOCK: [2021-04-10 Sat 22:05]--[2021-04-10 Sat 22:12] =>  0:07
CLOCK: [2021-03-25 Thu 20:41]--[2021-03-25 Thu 21:18] =>  0:37
CLOCK: [2021-02-11 Thu 18:53]--[2021-02-11 Thu 19:28] =>  0:35
CLOCK: [2020-12-19 Sat 13:47]--[2020-12-19 Sat 14:02] =>  0:15
CLOCK: [2020-09-10 Thu 19:53]--[2020-09-10 Thu 20:01] =>  0:08
CLOCK: [2020-09-08 Tue 19:45]--[2020-09-08 Tue 19:59] =>  0:14
:END:

/[[https://github.com/org-roam/org-roam][org-roam]] is a Roam replica with org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-roam
  :after org
  :custom
  (org-roam-directory paths-dir-org-roam)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-node-display-template
   (concat "${hierarchy:160} "
           (propertize "${tags:20}" 'face 'org-tag)))
  ;; exclude selected headings based on other criteria
  (org-roam-db-node-include-function
   (lambda ()
     (if (or
          ;; exclude based on tags
          (member "noid" (org-get-tags))
          (member "ARCHIVE" (org-get-tags))
          ;; exclude based on heading names
          (member (org-get-heading) '("Local variables"
                                      "COMMENT Local variables"
                                      "TODO Local variables"
                                      "Evaluation"
                                      "History"
                                      "Further reading"
                                      "External links"
                                      "Related entries"
                                      "Archive :ARCHIVE:"))
          ;; exclude buffers when in list of special dirs and org
          ;; heading at point is of level higher than 1 (i.e.
          ;; don't create unnecessary IDs for article
          ;; subsections)
          (and
           ;; dir condition
           (member
            (file-name-directory (buffer-file-name))
            (mapcar #'file-name-as-directory
                    ;; List of special dirs
                    (list
                     paths-dir-journal
                     (file-name-concat paths-dir-dropbox ".Trash"))))
           ;; heading condition
           (> (org-current-level) 1))
          )
         nil
       t)))

  :config
  ;; adapted from
  ;; github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-node-hierarchy
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    (let ((level (org-roam-node-level node)))
      (concat
       (when (> level 0)
         (concat
          (propertize (org-roam-node-file-title node) 'face 'org-level-1)
          " > "))
       ;; This is a hacky propertization because it doesn't color the
       ;; intermediate headings differently, but doing that slowed
       ;; down the function too much.
       (when (> level 1)
         (concat
          (propertize (string-join (org-roam-node-olp node) " > ") 'face 'org-level-2)
          " > "))
       (propertize (org-roam-node-title node) 'face 'org-level-3))))

  (add-to-list 'completion-at-point-functions #'org-roam-complete-link-at-point)

  ;; include transcluded links in `org-roam' backlinks
  (delete '(keyword "transclude") org-roam-db-extra-links-exclude-keys)

  ;; I disable autosync for performance reasons, but still keep the db in sync via an idle timer
  (org-roam-db-autosync-mode -1)
  (run-with-idle-timer (* 20 60) t #'org-roam-db-sync)

  :hook
  (org-roam-capture-new-node-hook . orb--insert-captured-ref-h)
  (org-roam-capture-new-node-hook . org-roam-capture--insert-captured-ref-h)

  :bind
  (:map org-mode-map
        ("s-i" . org-roam-node-insert)
        :map org-roam-mode-map
        ("f" . ace-link-org)))
#+end_src

** org-roam-extras
:PROPERTIES:
:ID:       44F722DC-C324-4A86-85A1-F103812B2A6A
:END:

/[[file:extras/org-roam-extras.el][org-roam-extras]] collects my extensions for =org-roam=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-roam-extras
  :custom
  (org-roam-extras-auto-show-backlink-buffer t)

  :config
  ;; exclude headings in specific files and directories
  (setopt org-roam-file-exclude-regexp
   (let (result)
     (dolist (dir-or-file
              (append
               org-roam-extras-excluded-dirs
               org-roam-extras-excluded-files)
              (regexp-opt result))
       (push (if (file-directory-p dir-or-file)
                 (file-relative-name dir-or-file paths-dir-org-roam)
               dir-or-file)
             result))))
  :hook
  (org-capture-prepare-finalize-hook . org-roam-extras-remove-file-level-properties)

  :bind
  (("H-N" . org-roam-extras-new-note)
   ("H-j" . org-roam-extras-node-find)
   ("H-J" . org-roam-extras-node-find-special)))
#+end_src

** org-roam-ui
:PROPERTIES:
:ID:       BAEADCA3-68C6-4B59-A45A-7A1C11C6F6BB
:END:
:LOGBOOK:
CLOCK: [2021-08-02 Mon 22:29]--[2021-08-02 Mon 22:29] =>  0:00
:END:

/[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] is a graphical frontend for exploring org-roam./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-roam-ui
  :ensure (:host github
                 :repo "org-roam/org-roam-ui"
                 :branch "main"
                 :files ("*.el" "out"))
  :after org-roam
  :defer t
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save nil)
  (org-roam-ui-open-on-start nil))
#+end_src

** org-transclusion
:PROPERTIES:
:ID:       8D8E5E44-248E-485F-9C74-E1D7A8A19D15
:END:

/[[https://github.com/nobiot/org-transclusion][org-transclusion]] supports [[https://en.wikipedia.org/wiki/Transclusion][transclusion]] with org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-transclusion
  :after org
  :defer t
  :config
  (dolist (element '(headline drawer property-drawer))
    (push element org-transclusion-exclude-elements))

  (face-spec-set 'org-transclusion-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec)
  (face-spec-set 'org-transclusion-source-fringe
                 '((((background light))
                    :foreground "black")
                   (t
                    :foreground "white"))
                 'face-override-spec))
#+end_src

** vulpea
:PROPERTIES:
:ID:       697CE296-FAA8-4485-94D8-B1321B59226F
:END:
:LOGBOOK:
CLOCK: [2023-02-25 Sat 16:02]--[2023-02-25 Sat 16:33] =>  0:31
CLOCK: [2022-10-10 Mon 14:36]--[2022-10-10 Mon 15:31] =>  0:55
CLOCK: [2022-07-17 Sun 08:54]--[2022-07-17 Sun 09:27] =>  0:33
CLOCK: [2022-06-27 Mon 12:10]--[2022-06-27 Mon 12:31] =>  0:21
CLOCK: [2022-05-08 Sun 08:45]--[2022-05-08 Sun 09:07] =>  0:22
CLOCK: [2021-12-14 Tue 19:46]--[2021-12-14 Tue 20:06] =>  0:20
:END:

/[[https://github.com/d12frosted/vulpea][vulpea]] is a collection of functions for note taking based on =org= and =org-roam=./

I use this package to define a dynamic agenda, as explained and illustrated [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][here]]. I've made some changes to the system in that link, specifically to exclude files and directories at various stages:
1. At the broadest level, I exclude files and directories from the function (=org-extras-id-auto-add-ids-to-headings-in-file=) that otherwise automatically adds an ID to every org heading in a file-visiting buffer. Headings so excluded are not indexed by org-roam, because a heading requires an ID to be indexed. For details, see that function’s docstring. For examples of how this is used in my config, see the variables =org-extras-id-auto-add-excluded-files= and =org-extras-id-auto-add-excluded-directories= under the =org-id= section of this file.
2. I then exclude some headings with IDs from the org-roam database. For examples of how this is used in my config, see the variables =org-roam-file-exclude-regexp= and =org-roam-db-node-include-function=  under the =org-roam== section of this file.
3. Finally, I selectively include in =org-agenda-files= files that satisfy certain conditions (as defined by =vulpea-extras-project-p=) and files modified recently (as specified by =org-roam-extras-recent=), and exclude from =org-agenda-files= files listed in =org-extras-agenda-files-excluded=.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package vulpea
  :after org org-roam)
#+end_src

** vulpea-extras
:PROPERTIES:
:ID:       466CED55-6DCA-4D17-83C7-B2FE9C2B0A69
:END:


/[[file:extras/vulpea-extras.el][vulpea-extras]] collects my extensions for =vulpea=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package vulpea-extras
  :hook
  ((find-file-hook before-save-hook) . vulpea-extras-project-update-tag))
#+end_src

** org-noter
:PROPERTIES:
:ID:       A1BA5ED1-BF56-4C33-81F8-19D2AFC7F6D7
:END:
:LOGBOOK:
CLOCK: [2023-10-08 Sun 09:23]--[2023-10-08 Sun 10:22] =>  0:59
CLOCK: [2022-01-05 Wed 16:03]--[2022-01-05 Wed 16:11] =>  0:08
CLOCK: [2021-07-27 Tue 20:55]--[2021-07-27 Tue 22:17] =>  1:22
CLOCK: [2021-07-27 Tue 19:42]--[2021-07-27 Tue 20:15] =>  0:33
CLOCK: [2021-07-26 Mon 23:12]--[2021-07-26 Mon 23:29] =>  0:17
CLOCK: [2021-07-26 Mon 22:41]--[2021-07-26 Mon 23:03] =>  0:22
CLOCK: [2021-07-26 Mon 22:15]--[2021-07-26 Mon 22:32] =>  0:17
CLOCK: [2021-07-25 Sun 22:51]--[2021-07-25 Sun 22:55] =>  0:04
CLOCK: [2021-07-18 Sun 10:41]--[2021-07-18 Sun 11:09] =>  0:28
CLOCK: [2021-07-17 Sat 19:16]--[2021-07-17 Sat 19:52] =>  0:36
CLOCK: [2021-07-17 Sat 12:42]--[2021-07-17 Sat 13:24] =>  0:42
:END:

/[[https://github.com/org-noter/org-noter][org-noter]] is an org-mode document annotator./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-noter
  :ensure (:host github
                 :repo "org-noter/org-noter")
  :after org-extras
  :init
  (with-eval-after-load 'pdf-annot
    (bind-keys :map pdf-annot-minor-mode-map
               ("s-s" . org-noter-create-skeleton)))

  :custom
  (org-noter-notes-search-path `(,paths-dir-bibliographic-notes))
  (org-noter-auto-save-last-location t)
  (org-noter-always-create-frame nil)
  (org-noter-separate-notes-from-heading t)
  (org-noter-kill-frame-at-session-end nil)

  :config
  (push paths-file-orb-noter-template org-extras-id-auto-add-excluded-files)

  :bind
  (:map org-noter-notes-mode-map
        ("s-n" . org-noter-sync-current-note)))
#+end_src

- To check: https://org-roam.discourse.group/t/org-roam-bibtex-in-a-sub-directory/649/5
- https://notes.andymatuschak.org/About_these_notes

** org-noter-extras
:PROPERTIES:
:ID:       3E324D44-27D5-4FA4-9D2F-2FFC6A4021DE
:END:


/[[file:extras/org-noter-extras.el][org-noter-extras]] collects my extensions for =org-noter=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-noter-extras
  :after org-noter
  :demand t
  :bind
  (:map org-noter-notes-mode-map
   ("s-a" . org-noter-extras-cleanup-annotation)
   ("s-d" . org-noter-extras-dehyphenate)
   ("s-k" . org-noter-extras-sync-prev-note)
   ("s-l" . org-noter-extras-sync-next-note)
   ("s-o" . org-noter-extras-highlight-offset)))
#+end_src

* reference & citation
:PROPERTIES:
:ID:       4939B006-F4F6-4A5C-9B78-85C998FDA7D8
:END:

See [[https://github.com/emacs-citar/citar/wiki/Comparisons#summary-of-diverse-emacs-bibliographic-and-citation-packages][this section]] of [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]]'s manual for a handy summary of the main bibliographic and citation Emacs packages.

I split my bibliographies into two categories: personal and work. The files providing my personal bibliography are defined in =paths-files-bibliography-personal=. The files providing my work bibliography are defined in =tlon-bibliography-files=. I then define =paths-files-bibliography-all= as the concatenation of these two lists. Finally, this master variable is used to set the values of the user options for all package that define bibliographies:

- =bibtex-files= (for =bibtext=)
- =bibtex-completion-bibliography= (for =bibtex-completion=)
- =citar-bibliography= (for =citar=)
- =ebib-preload-bib-files= (for =ebib=)

Each of these packages requires =tlon=, since the latter must load for =paths-files-bibliography-all= to be set.

** oc
:PROPERTIES:
:ID:       8AF25840-AC38-4FF7-A45F-F01B96C5DF5A
:END:
:LOGBOOK:
CLOCK: [2022-06-22 Wed 15:20]--[2022-06-22 Wed 15:26] =>  0:06
CLOCK: [2021-07-26 Mon 15:14]--[2021-07-26 Mon 15:56] =>  0:42
CLOCK: [2021-07-26 Mon 14:01]--[2021-07-26 Mon 14:26] =>  0:25
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature oc
  :after org el-patch
  :defer t
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar) ; `org-open-at-point' integration
  (org-cite-activate-processor 'citar) ;
  (org-cite-export-processors
   '((t . (csl "long.csl")))))
#+end_src

** oc-csl
:PROPERTIES:
:ID:       72710244-0369-4C12-8B83-0674EE0E11D5
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature oc-csl
  :after oc
  :defer t
  :custom
  (org-cite-csl-styles-dir paths-dir-tlon-csl-styles))
#+end_src

** citeproc
:PROPERTIES:
:ID:       2BB202FC-87DE-4563-B059-01680F8A2CB6
:END:
:LOGBOOK:
CLOCK: [2022-06-24 Fri 12:23]--[2022-06-24 Fri 12:31] =>  0:08
:END:

/[[https://github.com/andras-simonyi/citeproc-el][citeproc]] is a CSL 1.0.2 Citation Processor for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package citeproc
  :after oc
  :defer t)
#+end_src

** bibtex
:PROPERTIES:
:ID:       42191633-D2A1-4EDB-903F-3965ECB61510
:END:
:LOGBOOK:
CLOCK: [2023-03-26 Sun 20:16]--[2023-03-26 Sun 20:19] =>  0:03
CLOCK: [2022-07-16 Sat 16:38]--[2022-07-16 Sat 16:44] =>  0:06
:END:

/bibtex is major mode for editing and validating BibTeX ~.bib~ files./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature bibtex
  :after ebib
  :custom
  (bibtex-files paths-files-bibliography-all)
  ;; This corresponds (roughly?) to `auth+year+shorttitle(3,3)' on Better BibTeX
  ;; retorque.re/zotero-better-bibtex/citing/
  (bibtex-search-entry-globally t)
  (bibtex-autokey-names 1)
  (bibtex-autokey-name-case-convert-function 'capitalize)
  (bibtex-autokey-year-length 4)
  (bibtex-autokey-year-title-separator "")
  (bibtex-autokey-title-terminators "[.!?;]\\|--")
  (bibtex-autokey-titlewords 3)
  (bibtex-autokey-titlewords-stretch 0)
  (bibtex-autokey-titleword-case-convert-function 'capitalize)
  (bibtex-autokey-titleword-length nil)
  (bibtex-autokey-titleword-separator "")
  (bibtex-autokey-titleword-ignore '("A" "a" "An" "an" "On" "on" "The" "the" "Eine?" "Der" "Die" "Das" "El" "La" "Lo" "Los" "Las" "Un" "Una" "Unos" "Unas" "el" "la" "lo" "los" "las" "un" "una" "unos" "unas" "y" "o" "Le" "La" "L'" "Les" "Un" "Une" "Des" "Du" "De la" "De l'" "Des" "le" "la" "l'" "les" "un" "une" "des" "du" "de la" "de l'" "des" "Lo" "Il" "La" "L'" "Gli" "I" "Le" "Uno" "lo" "il" "la" "l'" "gli" "i" "le" "uno"))
  ;; Remove accents
  (bibtex-autokey-before-presentation-function 'simple-extras-asciify-string)
  ;; check tweaked version of `bibtex-format-entry' above
  (bibtex-entry-format '(opts-or-alts-fields last-comma delimiters page-dashes))
  (bibtex-field-indentation 8) ; match ebib value

  :config
  (require 'tlon) ; see explanatory note under ‘reference & citation’
  (push '("\\." . "") bibtex-autokey-name-change-strings)
  ;; add extra entry types
  (dolist (entry '(("Video" . "Video file")
                   ("Movie" . "Film")
                   ("tvepisode" . "TV episode")))
    (push `(,(car entry) ,(cdr entry)
            (("author" nil nil 0)
             ("title")
             ("date" nil nil 1)
             ("year" nil nil -1)
             ("url" nil nil 2))
            nil
            (("abstract")
             ("keywords")
             ("language")
             ("version")
             ("rating")
             ("note")
             ("organization")
             ("eprintclass" nil nil 4)
             ("primaryclass" nil nil -4)
             ("eprinttype" nil nil 5)
             ("archiveprefix" nil nil -5)
             ("urldate")))
          bibtex-biblatex-entry-alist))

  :bind
  (:map bibtex-mode-map
        ("s-f" . ebib-extras-open-file-dwim)
        ("s-/" . ebib-extras-attach-most-recent-file)
        ("s-a" . bibtex-set-field)
        ("s-c" . bibtex-copy-entry-as-kill)
        ("s-v" . bibtex-yank)
        ("s-x" . bibtex-kill-entry)
        ("A-C-H-x" . bibtex-copy-entry-as-kill)
        ("A-C-H-c" . bibtex-kill-entry)
        ("A-C-H-a" . bibtex-copy-field-as-kill)
        ("A-C-H-f" . bibtex-kill-field)
        ("A-C-s-r" . bibtex-previous-entry)
        ("A-C-s-f" . bibtex-next-entry)))
#+end_src

*** TODO [#6] Standardize author names in bibtex file
:PROPERTIES:
:ID:       8B243BA8-8CA1-4E6F-82CA-5CD950D8C498
:END:

** bibtex-extras
:PROPERTIES:
:ID:       31E4CEF9-8CF3-4921-A108-3C60A7191F8F
:END:


/[[file:extras/bibtex-extras.el][bibtex-extras]] collects my extensions for =bibtex=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package bibtex-extras
  :after bibtex
  :demand t
  :custom
  (bibtex-maintain-sorted-entries
   '(bibtex-extras-entry-sorter bibtex-extras-lessp))

  :config
  ;; Replace 'online' entry type
  (bibtex-extras-replace-element-by-name
   bibtex-biblatex-entry-alist
   "Online" '("Online" "Online Resource"
              (("author" nil nil 0) ("title") ("journaltitle" nil nil 3)
               ("date" nil nil 1) ("year" nil nil -1)
               ("doi" nil nil 2) ("url" nil nil 2))
              nil
              (("subtitle") ("language") ("version") ("note")
               ("organization") ("month")
               ("pubstate") ("eprintclass" nil nil 4) ("primaryclass" nil nil -4)
               ("eprinttype" nil nil 5) ("archiveprefix" nil nil -5) ("urldate"))))

  (add-to-list 'bibtex-biblatex-entry-alist
               '("Performance" "A performance entry"
                 (("author") ("title") ("date")) ; Required fields
                 nil ; Crossref fields
                 (("venue") ("location") ("note"))))
  :bind
  (:map bibtex-mode-map
        ("s-a" . bibtex-extras-set-field)
        ("s-d" . bibtex-extras-url-to-pdf-attach)
        ("s-h" . bibtex-extras-url-to-html-attach)
        ("s-i" . bibtex-extras-open-in-ebib)
        ("s-t" . bibtex-extras-move-entry-to-tlon)))
#+end_src

** bibtex-completion
:PROPERTIES:
:ID:       DCD9D75D-7814-49D8-A3E0-33846D5A08FD
:END:
:LOGBOOK:
CLOCK: [2022-05-29 Sun 15:10]--[2022-05-29 Sun 15:15] =>  0:05
CLOCK: [2021-11-08 Mon 18:40]--[2021-11-08 Mon 18:53] =>  0:13
CLOCK: [2021-08-24 Tue 12:02]--[2021-08-24 Tue 12:11] =>  0:09
CLOCK: [2021-07-14 Wed 20:44]--[2021-07-14 Wed 21:21] =>  0:37
CLOCK: [2021-07-13 Tue 22:42]--[2021-07-13 Tue 23:08] =>  0:26
CLOCK: [2021-07-13 Tue 15:32]--[2021-07-13 Tue 16:01] =>  0:29
CLOCK: [2021-07-11 Sun 15:41]--[2021-07-11 Sun 15:42] =>  0:01
CLOCK: [2021-07-10 Sat 22:16]--[2021-07-10 Sat 22:49] =>  0:33
CLOCK: [2021-07-10 Sat 22:07]--[2021-07-10 Sat 22:07] =>  0:00
:END:

/[[https://github.com/tmalsburg/helm-bibtex][bibtex-completion]] is a backend for searching and managing bibliographies in Emacs./

The package is required by [[id:EC73B84D-530E-4179-BB67-F19110A543DF][org-roam-bibtex]].

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package bibtex-completion
  :ensure (:version (lambda (_) "2.0.0")) ; github.com/progfolio/elpaca/issues/229
  :after bibtex
  :custom
  (bibtex-completion-bibliography paths-files-bibliography-all)
  (bibtex-completion-pdf-open-function 'find-file)
  (bibtex-completion-notes-path paths-dir-bibliographic-notes)
  (bibtex-completion-pdf-field "file")
  (bibtex-dialect 'biblatex)
  (bibtex-completion-library-path paths-dir-pdf-library)

  :config
  (require 'tlon)) ; see explanatory note under ‘reference & citation’
#+end_src

** bibtex-completion-extras
:PROPERTIES:
:ID:       E7420E36-9396-48A5-9FD2-6A4CA4610324
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package bibtex-completion-extras
  :after bibtex-completion)
#+end_src

** org-roam-bibtex
:PROPERTIES:
:ID:       EC73B84D-530E-4179-BB67-F19110A543DF
:END:
:LOGBOOK:
CLOCK: [2022-08-30 Tue 14:58]--[2022-08-30 Tue 15:05] =>  0:07
CLOCK: [2022-06-26 Sun 08:47]--[2022-06-26 Sun 09:08] =>  0:21
CLOCK: [2021-07-27 Tue 23:26]--[2021-07-27 Tue 23:54] =>  0:28
CLOCK: [2021-07-26 Mon 12:38]--[2021-07-26 Mon 13:16] =>  0:38
CLOCK: [2021-07-26 Mon 12:28]--[2021-07-26 Mon 12:29] =>  0:01
CLOCK: [2021-07-26 Mon 11:17]--[2021-07-26 Mon 11:26] =>  0:09
CLOCK: [2021-07-14 Wed 21:56]--[2021-07-14 Wed 22:45] =>  0:49
:END:

/[[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] integrates [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]] and [[id:42191633-D2A1-4EDB-903F-3965ECB61510][bibtex]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-roam-bibtex
  :after bibtex-completion org-roam
  :custom
  (orb-roam-ref-format 'org-cite)
  (orb-insert-interface 'citar-open-notes)
  (orb-note-actions-interface 'default)
  (orb-attached-file-extensions '("pdf"))

  :config
  (add-to-list 'org-roam-capture-templates
             `("r" "bibliography reference" plain
               (file ,paths-file-orb-noter-template)
               :if-new
               (file ,paths-file-orb-capture-template)
               :unnarrowed t :immediate-finish t :jump-to-captured t)
             t)

  (dolist (keyword '("year" "title" "url" "keywords"))
    (add-to-list 'orb-preformat-keywords keyword))
  (org-roam-bibtex-mode))
#+end_src

** citar
:PROPERTIES:
:ID:       67AB4C5F-2425-4D31-9590-9D13790B4C97
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 08:11]--[2023-07-05 Wed 08:27] =>  0:16
CLOCK: [2022-10-04 Tue 22:47]--[2022-10-05 Wed 01:01] =>  2:14
CLOCK: [2022-10-03 Mon 19:15]--[2022-10-03 Mon 19:53] =>  0:38
CLOCK: [2022-08-30 Tue 15:09]--[2022-08-30 Tue 15:15] =>  0:06
CLOCK: [2022-07-16 Sat 14:32]--[2022-07-16 Sat 14:45] =>  0:13
CLOCK: [2022-06-23 Thu 16:45]--[2022-06-23 Thu 18:15] =>  1:30
CLOCK: [2022-06-22 Wed 15:26]--[2022-06-22 Wed 15:42] =>  0:16
CLOCK: [2021-07-26 Mon 14:26]--[2021-07-26 Mon 15:14] =>  0:48
:END:

/[[https://github.com/emacs-citar/citar][citar]] is a package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents./

We defer-load the package to activate the timer that in turn updates the bibliography files when Emacs is idle, like we do with =ebib= below.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package citar
  :ensure (:host github
                 :repo "emacs-citar/citar"
                 :includes (citar-org))
  :defer 30
  :custom
  (citar-bibliography paths-files-bibliography-all)
  (citar-notes-paths `(,paths-dir-bibliographic-notes))
  (citar-at-point-function 'embark-act)
  (citar-symbol-separator "  ")
  (citar-format-reference-function 'citar-citeproc-format-reference)
  (citar-templates '((main . "${author editor:30%sn}   ${date year issued:4}   ${title:60}   ${database:10}")
                     (suffix . "   ${=key= id:25}    ${=type=:12}")
                     (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
                     (note . "Notes on ${author editor:%etal}, ${title}")))
  (citar-notes-source 'orb-citar-source)

  :config
  (require 'tlon) ; see explanatory note under ‘reference & citation’
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'citar-history))

  (require 'citar-org-roam)
  (citar-register-notes-source
   'orb-citar-source (list :name "Org-Roam Notes"
                           :category 'org-roam-node
                           :items #'citar-org-roam--get-candidates
                           :hasitems #'citar-org-roam-has-notes
                           :open #'citar-org-roam-open-note
                           :create #'orb-citar-edit-note
                           :annotate #'citar-org-roam--annotate))

  ;; allow invocation of `citar-insert-citation' in any buffer. Although it is
  ;; not possible to insert citations in some modes, it is still useful to be
  ;; able to run this command because of the `embark' integration
  (setf (alist-get 't citar-major-mode-functions)
        (cons '(insert-citation . citar-org-insert-citation)
              (alist-get 't citar-major-mode-functions)))

  :bind
  (("H-/" . citar-insert-citation)
   :map citar-map
   ("c" . embark-copy-as-kill)
   ("u" . citar-open-links)
   ("d" . ebib-extras-download-dwim)
   ("s" . ebib-extras-search-dwim)
   ("t" . citar-extras-move-entry-to-tlon)
   ("b" . citar-extras-goto-bibtex-entry)
   ("i" . citar-extras-open-in-ebib)
   :map citar-citation-map
   ("c" . embark-copy-as-kill)
   ("u" . citar-open-links)
   ("d" . ebib-extras-download-dwim)
   ("s" . ebib-extras-search-dwim)
   ("t" . citar-extras-move-entry-to-tlon)
   ("b" . citar-extras-goto-bibtex-entry)
   ("i" . citar-extras-open-in-ebib)))
#+end_src

*** TODO [#6] Tweak note creation function so that it adds a tag with the work type
:PROPERTIES:
:ID:       FB459DDE-BFDD-4740-9FFA-7AFFB74A38D1
:END:
Having headings tagged with the type of work they are notes of allows me to query the org-roam db specifically for notes of a particular type.

** citar-extras
:PROPERTIES:
:ID:       6CC7F660-F6E6-4605-AA42-B495FF090B5D
:END:

/[[file:extras/citar-extras.el][citar-extras]] collects my extensions for =citar=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package citar-extras
  :after citar
  :config
  ;; https://github.com/emacs-citar/citar/wiki/Indicators
  (setq citar-indicators
        (list citar-extras-indicator-links-icons
              citar-extras-indicator-files-icons
              citar-extras-indicator-notes-icons
              citar-extras-indicator-cited-icons)))
#+end_src

** citar-citeproc
:PROPERTIES:
:ID:       8CE6DBC7-E180-4E6D-B6E2-8D1E2756E765
:END:

/[[https://github.com/emacs-citar/citar/blob/main/citar-citeproc.el][citar-citeproc]] provides Citeproc reference support for citar./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature citar-citeproc
  :after citar citeproc citar-extras tlon
  :custom
  (citar-citeproc-csl-styles-dir paths-dir-tlon-csl-styles)
  (citar-citeproc-csl-locales-dir paths-dir-tlon-csl-locales))
#+end_src

** citar-embark
:PROPERTIES:
:ID:       846EEC59-E022-41B7-96D3-4B379F8F91D4
:END:

/[[https://github.com/emacs-citar/citar/tree/9d7088c1fe82e9cfa508ead7ef7738c732556644#embark][citar-embark]] adds contextual access actions in the minibuffer and at-point via the citar-embark-mode minor mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package citar-embark
  :after citar embark
  :config
  (citar-embark-mode))
#+end_src

** citar-org-roam
:PROPERTIES:
:ID:       894C33F7-BB88-403B-92EA-260DD73B4B23
:END:

/[[https://github.com/emacs-citar/citar-org-roam][citar-org-roam]] provides integration between [[id:67AB4C5F-2425-4D31-9590-9D13790B4C97][citar]] and [[id:2F2E4C1E-4D9B-4A28-B08F-B381E83CFE17][org-roam]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package citar-org-roam
  :ensure (:host github
           :repo "emacs-citar/citar-org-roam")
  :after citar org-roam)
#+end_src

** org-ref
:PROPERTIES:
:ID:       1FC5528A-9F5A-4A9D-B168-5A1F51110455
:END:

/[[https://github.com/jkitchin/org-ref][org-ref]] supports citations, cross-references, bibliographies in org-mode and useful bibtex tools./

I use this package only to run the cleanup function ~org-ref-clean-bibtex-entry~ after adding new entries to my bibliography and to occasionally call a few miscellaneous commands. I do not use any of its citation-related functionality, since I use ~org-cite~ for that.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-ref
  :after zotra
  :custom
  (org-ref-bibtex-pdf-download-dir paths-dir-downloads)
  (org-ref-insert-cite-function
   (lambda ()
     (org-cite-insert nil)))

  :config
  (dolist (fun '(org-ref-replace-nonascii
                 orcb-check-journal
                 orcb-download-pdf))
    (delete fun org-ref-clean-bibtex-entry-hook)))
#+end_src

** org-ref-extras
:PROPERTIES:
:ID:       D4CF6E94-9BE5-4121-88F0-C8D3251B9EFE
:END:


/[[file:extras/org-ref-extras.el][org-ref-extras]] collects my extensions for =org-ref=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-ref-extras
  :after org-ref)
#+end_src

** ebib
:PROPERTIES:
:ID:       A744824B-1FE1-4721-8318-1FDDE3758A7A
:END:
:LOGBOOK:
CLOCK: [2023-07-18 Tue 21:20]--[2023-07-18 Tue 21:39] =>  0:19
CLOCK: [2023-07-18 Tue 08:25]--[2023-07-18 Tue 08:56] =>  0:31
CLOCK: [2023-06-18 Sun 08:34]--[2023-06-18 Sun 09:19] =>  0:45
CLOCK: [2023-06-16 Fri 12:47]--[2023-06-16 Fri 13:11] =>  0:24
CLOCK: [2023-05-28 Sun 09:26]--[2023-05-28 Sun 13:21] =>  3:55
CLOCK: [2023-05-07 Sun 11:35]--[2023-05-07 Sun 12:45] =>  1:10
CLOCK: [2023-04-30 Sun 18:51]--[2023-04-30 Sun 18:57] =>  0:06
CLOCK: [2023-04-21 Fri 20:39]--[2023-04-21 Fri 20:42] =>  0:03
CLOCK: [2023-04-11 Tue 00:58]--[2023-04-11 Tue 01:55] =>  0:57
CLOCK: [2023-03-27 Mon 21:29]--[2023-03-27 Mon 21:45] =>  0:16
CLOCK: [2023-03-27 Mon 20:49]--[2023-03-27 Mon 21:14] =>  0:25
CLOCK: [2023-03-22 Wed 13:55]--[2023-03-22 Wed 14:00] =>  0:05
CLOCK: [2023-03-19 Sun 12:35]--[2023-03-19 Sun 12:58] =>  0:23
CLOCK: [2023-03-12 Sun 19:36]--[2023-03-12 Sun 20:19] =>  0:43
CLOCK: [2022-09-22 Thu 14:39]--[2022-09-22 Thu 15:15] =>  0:36
CLOCK: [2022-09-13 Tue 17:29]--[2022-09-13 Tue 17:56] =>  0:27
CLOCK: [2022-09-13 Tue 16:36]--[2022-09-13 Tue 17:05] =>  0:29
CLOCK: [2022-09-13 Tue 15:51]--[2022-09-13 Tue 16:36] =>  0:45
CLOCK: [2022-09-09 Fri 15:11]--[2022-09-09 Fri 17:18] =>  2:07
CLOCK: [2022-09-09 Fri 11:53]--[2022-09-09 Fri 12:47] =>  0:54
CLOCK: [2022-09-09 Fri 11:39]--[2022-09-09 Fri 11:50] =>  0:11
CLOCK: [2022-09-05 Mon 15:47]--[2022-09-05 Mon 16:00] =>  0:13
CLOCK: [2022-09-03 Sat 14:28]--[2022-09-03 Sat 16:15] =>  1:47
CLOCK: [2022-08-31 Wed 15:08]--[2022-08-31 Wed 16:37] =>  1:29
CLOCK: [2022-08-31 Wed 14:17]--[2022-08-31 Wed 14:30] =>  0:13
CLOCK: [2022-08-30 Tue 16:13]--[2022-08-30 Tue 21:18] =>  5:05
CLOCK: [2022-08-30 Tue 15:23]--[2022-08-30 Tue 16:10] =>  0:47
CLOCK: [2022-08-30 Tue 13:23]--[2022-08-30 Tue 14:58] =>  1:35
CLOCK: [2022-08-27 Sat 12:47]--[2022-08-27 Sat 13:55] =>  1:08
CLOCK: [2022-08-26 Fri 17:38]--[2022-08-26 Fri 20:36] =>  2:58
CLOCK: [2022-08-26 Fri 11:54]--[2022-08-26 Fri 12:33] =>  0:39
CLOCK: [2022-08-26 Fri 10:32]--[2022-08-26 Fri 11:48] =>  1:16
CLOCK: [2022-08-24 Wed 13:04]--[2022-08-24 Wed 13:18] =>  0:14
CLOCK: [2022-08-23 Tue 13:50]--[2022-08-23 Tue 13:58] =>  0:08
CLOCK: [2022-07-16 Sat 14:45]--[2022-07-16 Sat 15:17] =>  0:32
:END:

/[[https://github.com/joostkremers/ebib][ebib]] ([[http://joostkremers.github.io/ebib/][homepage]]) is a BibTeX database manager for Emacs./

We defer-load the package to activate the timer that in turn updates the bibliography files when Emacs is idle, like we do with =citar= above.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ebib
  :custom
  (ebib-preload-bib-files paths-files-bibliography-all)
  (ebib-notes-directory paths-dir-bibliographic-notes)
  (ebib-notes-use-org-capture t)
  (ebib-notes-display-max-lines 9999)
  (ebib-filename-separator ";")
  (ebib-file-associations nil) ; do not open any file types externally
  (ebib-layout 'index-only)
  (ebib-bibtex-dialect 'biblatex)
  (ebib-use-timestamp t)
  (ebib-timestamp-format "%Y-%m-%d %T (%Z)")
  (ebib-default-entry-type "online")
  (ebib-uniquify-keys t)
  (ebib-index-columns '(("Entry Key" 30 t)
                        ("Author/Editor" 25 t)
                        ("Year" 4 t)
                        ("Title" 50 t)))
  (ebib-extra-fields
   '((biblatex "abstract" "keywords" "origdate" "langid" "translation" "narrator" "file" "timestamp" "wordcount" "rating" "crossref" "=key=")
     (bibtex "crossref" "annote" "abstract" "keywords" "file" "timestamp" "url" "doi")))

  :config
  (require 'tlon) ; see explanatory note under ‘reference & citation’

  :hook
  (ebib-entry-mode-hook . visual-line-mode)

  :bind
  (:map ebib-multiline-mode-map
        ("s-c" . ebib-quit-multiline-buffer-and-save)
        :map ebib-index-mode-map
        ("<return>" . ebib-edit-entry)
        ("A" . ebib-add-entry)
        ("D" . ebib-delete-entry)
        ("f" . avy-extras-ebib-view-entry)
        ("k" . ebib-prev-entry)
        ("l" . ebib-next-entry)
        ("H-s" . ebib-save-current-database)
        ("K" . ebib-copy-key-as-kill)
        ("Q" . ebib-quit)
        ("W" . zotra-download-attachment)
        :map ebib-entry-mode-map
        ("TAB" . ebib-goto-next-set)
        ("<backtab>" . ebib-goto-prev-set)
        ("H-s" . ebib-save-current-database)
        ("H-S" . ebib-save-all-databases)
        ("!" . ebib-generate-autokey)
        ("A" . ebib-add-field)
        ("c" . ebib-copy-current-field-contents)
        ("D" . ebib-delete-current-field-contents)
        ("E" . ebib-edit-keyname)
        ("H-s" . ebib-save-current-database)
        ("K" . ebib-copy-key-as-kill)
        ("Q" . ebib-quit)
        ("W" . zotra-download-attachment)))
#+end_src

The macro below generates the commands correctly. But attempting to define key bindings results in duplicate commands. I'm not sure what's on; it seems to be related to ~use-package~.

*** TODO [#6] Modify my custom ebib formulas so that they use native uniquify
:PROPERTIES:
:ID:       BA7B5845-B148-43B6-BE50-C1CBF89478BB
:END:

*** resources
:PROPERTIES:
:ID:       A05D6298-646A-4E47-B3B2-07A14EABCEC5
:END:

[[https://juanjose.garciaripoll.com/blog/ebib-biblio-interface/index.html][eBib-Biblio interface, aka. Mendeley for Emacs]]

** ebib-utils
:PROPERTIES:
:ID:       2CB38F99-1429-40CC-AF6D-466354D8ACF2
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ebib-utils
  :after ebib
  :custom
  (ebib-hidden-fields ; unhide some fields
        (cl-remove-if
         (lambda (el)
           (member el '("edition" "isbn" "timestamp" "titleaddon" "translator")))
         ebib-hidden-fields))

  :config
  (add-to-list 'ebib-hidden-fields "year")) ; hide others
#+end_src

** ebib-extras
:PROPERTIES:
:ID:       9E86F42E-2F41-4BB7-ABC5-1C929DBD5C06
:END:

/[[file:extras/ebib-extras.el][ebib-extras]] collects my extensions for =ebib=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package ebib-extras
  :init
  (advice-add 'ebib-init :after #'ebib-extras-auto-reload-databases)

  :hook
  (ebib-add-entry . ebib-extras-create-list-of-existing-authors)

  :bind
  (("A-i" . ebib-extras-open-or-switch)
   :map ebib-index-mode-map
   ("," . ebib-extras-prev-entry)
   ("." . ebib-extras-next-entry)
   ("d" . ebib-extras-duplicate-entry)
   ("n" . ebib-extras-citar-open-notes)
   ("A-C-s-<tab>" . ebib-extras-end-of-index-buffer)
   ("s" . ebib-extras-sort)
   ("s-t" . ebib-extras-move-entry-to-tlon)
   :map ebib-entry-mode-map
   ("s-f" . ebib-extras-open-file-dwim)
   ("," . ebib-extras-prev-entry)
   ("." . ebib-extras-next-entry)
   ("d" . ebib-extras-duplicate-entry)
   ("n" . ebib-extras-citar-open-notes)
   ("SPC" . ebib-extras-open-file-dwim)
   ("/" . ebib-extras-attach-most-recent-file)
   ("?" . ebib-extras-attach-file)
   (";" . ebib-extras-process-entry)
   ("a" . ebib-extras-search-amazon)
   ("b" . ebib-extras-get-or-open-entry)
   ("g" . ebib-extras-search-library-genesis)
   ("G" . ebib-extras-search-goodreads)
   ("h" . ebib-extras-open-html-file)
   ("H" . ebib-extras-open-html-file-externally)
   ("i" . ebib-extras-download-by-identifier)
   ("I" . ebib-extras-set-id)
   ("o" . ebib-extras-search-connected-papers)
   ("p" . ebib-extras-open-pdf-file)
   ("P" . ebib-extras-open-pdf-file-externally)
   ("R" . ebib-extras-set-rating)
   ("s" . ebib-extras-search-dwim)
   ("T" . ebib-extras-no-translation-found)
   ("u" . ebib-extras-browse-url-or-doi)
   ("V" . ebib-extras-search-internet-archive)
   ("w" . ebib-extras-download-dwim)
   ("x" . ebib-extras-search-university-of-toronto)
   ("y" . ebib-extras-search-hathitrust)
   ("z" . ebib-extras-search-google-scholar)
   ("s-d" . ebib-extras-url-to-pdf-attach)
   ("s-k" . ebib-extras-fetch-keywords)
   ("s-h" . ebib-extras-url-to-html-attach)
   ("s-r" . ebib-extras-rename-files)))
#+end_src

** bib
:PROPERTIES:
:ID:       D3DE21CB-388A-48A0-A7EB-E79DD48D5E81
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package bib
  :ensure (:host github
                 :repo "benthamite/bib"
                 :depth nil) ; clone entire repo, not just last commit
  :after ebib
  :defer t
  :custom
  (bib-isbndb-key
   (auth-source-pass-get "key" (concat "tlon/babel/isbndb.com/" tlon-email-shared)))
  (bib-omdb-key
   (auth-source-pass-get 'secret "chrome/omdbapi.com"))
  (bib-tmdb-key
   (auth-source-pass-get "key" "chrome/themoviedb.org/stafforini"))

  :bind
  (:map ebib-index-mode-map
        ("t" . bib-zotra-add-entry-from-title)))
#+end_src

** zotra
:PROPERTIES:
:ID:       815B8CEA-D36D-4E47-B728-D86FEFB736DF
:END:
:LOGBOOK:
CLOCK: [2023-11-01 Wed 08:29]--[2023-11-01 Wed 08:50] =>  0:21
CLOCK: [2023-05-14 Sun 19:59]--[2023-05-14 Sun 20:02] =>  0:03
CLOCK: [2023-03-09 Thu 19:19]--[2023-03-09 Thu 19:56] =>  0:37
CLOCK: [2022-08-31 Wed 16:37]--[2022-08-31 Wed 17:37] =>  1:00
CLOCK: [2022-08-31 Wed 14:05]--[2022-08-31 Wed 14:17] =>  0:12
CLOCK: [2022-07-16 Sat 21:03]--[2022-07-16 Sat 21:15] =>  0:12
CLOCK: [2022-07-16 Sat 15:26]--[2022-07-16 Sat 15:40] =>  0:14
:END:

/[[https://github.com/mpedramfar/zotra][zotra]] provides functions to get bibliographic information from a URL via [[https://www.zotero.org/support/translators][Zotero translators]], but without relying on the Zotero client./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package zotra
  :ensure (:host github
                 :repo "mpedramfar/zotra")
  :defer t
  :custom
  (zotra-use-curl nil)
  (zotra-url-retrieve-timeout 15)
  (zotra-default-entry-format "biblatex")
  (zotra-download-attachment-default-directory paths-dir-downloads)
  (zotra-backend 'zotra-server)
  (zotra-local-server-directory (file-name-concat paths-dir-external-repos "zotra-server/")))
#+end_src

** zotra-extras
:PROPERTIES:
:ID:       29BBF8F1-FC6D-4AFE-AEE4-6C01BB4AAA5F
:END:

/[[file:extras/zotra-extras.el][zotra-extras]] collects my extensions for =zotra=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package zotra-extras
  :after ebib eww
  :custom
  (zotra-extras-use-mullvad-p t)

  :hook
  (zotra-after-get-bibtex-entry-hook . zotra-extras-after-add-process-bibtex)

  :bind
  (:map ebib-index-mode-map
        ("a" . zotra-extras-add-entry))
  (:map eww-mode-map
        ("a" . zotra-extras-add-entry)))
#+end_src

** annas-archive
:PROPERTIES:
:ID:       00D40112-A109-4F89-9540-DEDCDB358023
:END:

/[[https://github.com/benthamite/annas-archive][annas-archive]] provides rudimentary integration for Anna’s Archive, the largest existing search engine for shadow libraries./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package annas-archive
  :ensure (:host github
                 :repo "benthamite/annas-archive")
  :defer t
  :init
  (with-eval-after-load 'ebib
    (bind-keys :map ebib-entry-mode-map
               ("s-a" . annas-archive-download)))
  (with-eval-after-load 'eww
    (bind-keys :map 'eww-mode-map
               ("s-a" . annas-archive-download-file)))

  :custom
  (annas-archive-included-file-types '("pdf"))
  (annas-archive-use-fast-download-links t)
  (annas-archive-use-eww t))
#+end_src

** scihub
:PROPERTIES:
:ID:       C8F5B1DC-15F3-4D3A-9363-A32AEE1D34D4
:END:

/[[https://github.com/benthamite/scihub][scihub]] supports the downloading of files from SciHub./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package scihub
  :ensure (:host github
           :repo "benthamite/scihub")
  :defer 15)
#+end_src

* email
:PROPERTIES:
:ID:       2CF6D256-143D-4F3E-8383-36CB090FC4F2
:END:
:LOGBOOK:
CLOCK: [2021-12-11 Sat 20:05]--[2021-12-11 Sat 20:15] =>  0:10
CLOCK: [2021-07-12 Mon 18:56]--[2021-07-12 Mon 19:03] =>  0:07
CLOCK: [2021-07-10 Sat 20:11]--[2021-07-10 Sat 20:20] =>  0:09
CLOCK: [2021-04-08 Thu 10:10]--[2021-04-08 Thu 10:52] =>  0:42
CLOCK: [2021-04-05 Mon 21:03]--[2021-04-05 Mon 21:42] =>  0:39
:END:

** simple
:PROPERTIES:
:ID:       509B1DFA-E776-4BF5-8231-4A5984FD0150
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature simple
  :custom
  (mail-user-agent 'mu4e-user-agent)
  (read-mail-command 'mu4e))
#+end_src

** sendmail
:PROPERTIES:
:ID:       25BB02C1-B537-4D2F-AF95-3B1217A58E6D
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Sending.html][sendmail]] is a mode that provides mail-sending facilities from within Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature sendmail
  :after (:any mu4e org-msg)
  :custom
  (send-mail-function 'smtpmail-send-it))
#+end_src

** smtpmail
:PROPERTIES:
:ID:       F05AFA09-978B-441D-B947-0DBEA4DBC7BF
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature smtpmail
  :after (:any mu4e org-msg)
  :custom
  (smtpmail-smtp-user (getenv "PERSONAL_GMAIL"))
  (smtpmail-local-domain "gmail.com")
  (smtpmail-default-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 587))
#+end_src

** message
:PROPERTIES:
:ID:       67208BCE-6FFD-48B2-A5AD-7B72BAF31692
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/message.html][message]] is a message composition mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature message
  :after (:any mu4e org-msg)
  :demand t
  :custom
  (message-kill-buffer-on-exit t) ; make `message-send-and-exit' kill buffer, not bury it
  (message-send-mail-function 'smtpmail-send-it)
  (message-elide-ellipsis "\n> [... %l lines omitted]\n")
  (message-citation-line-function 'message-insert-formatted-citation-line)
  (message-citation-line-format (concat "> From: %f\n"
                                        "> Date: %a, %e %b %Y %T %z\n"
                                        ">")
                                message-ignored-cited-headers "")

  :config
  (faces-extras-set-and-store-face-attributes
   '((message-header-name :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
     (message-header-subject :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
     (message-header-to :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
     (message-header-other :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)
     (message-header-cc :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)))

  :hook
  (message-send-hook . buffer-disable-undo) ; required to avoid an error
  (message-sent-hook . files-extras-kill-this-buffer)

  :bind
  (:map message-mode-map
        ("s-a" . ml-attach-file)
        ("s-b" . message-goto-body)
        ("s-c" . message-send-and-exit)
        ("s-f" . message-goto-from)
        ("s-s" . message-goto-subject)
        ("s-t" . message-goto-to)
        ("s-A-b" . message-goto-bcc)
        ("s-A-c" . message-goto-cc)
        ("s-A-s" . message-send)))
#+end_src

** mml
:PROPERTIES:
:ID:       2A87061B-BE45-443B-AB2C-893A69C20003
:END:

/[[https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/Composing.html][mml]] is a library that parses a MML (MIME Meta Language) and generates MIME messages./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature mml
  :defer t)
#+end_src

** mu4e
:PROPERTIES:
:ID:       1B568415-F030-437B-921C-B4A65B370A6E
:END:
:LOGBOOK:
CLOCK: [2023-04-05 Wed 22:30]--[2023-04-05 Wed 22:53] =>  0:23
CLOCK: [2023-03-23 Thu 23:21]--[2023-03-23 Thu 23:35] =>  0:14
CLOCK: [2023-03-22 Wed 09:29]--[2023-03-22 Wed 09:36] =>  0:07
CLOCK: [2023-03-16 Thu 19:28]--[2023-03-16 Thu 20:20] =>  0:52
CLOCK: [2023-03-16 Thu 17:13]--[2023-03-16 Thu 18:24] =>  1:11
CLOCK: [2023-03-08 Wed 19:40]--[2023-03-08 Wed 19:48] =>  0:08
CLOCK: [2022-07-19 Tue 09:23]--[2022-07-19 Tue 09:48] =>  0:25
CLOCK: [2022-07-19 Tue 08:37]--[2022-07-19 Tue 09:01] =>  0:24
CLOCK: [2022-07-18 Mon 23:00]--[2022-07-18 Mon 23:54] =>  0:54
CLOCK: [2022-07-15 Fri 14:22]--[2022-07-15 Fri 14:46] =>  0:24
CLOCK: [2022-07-11 Mon 22:30]--[2022-07-12 Tue 00:07] =>  1:37
CLOCK: [2022-07-09 Sat 22:07]--[2022-07-09 Sat 23:16] =>  1:09
CLOCK: [2022-06-09 Thu 22:38]--[2022-06-09 Thu 22:55] =>  0:17
CLOCK: [2022-05-30 Mon 17:03]--[2022-05-30 Mon 17:21] =>  0:18
CLOCK: [2022-05-30 Mon 03:45]--[2022-05-30 Mon 04:19] =>  0:34
CLOCK: [2022-05-29 Sun 10:31]--[2022-05-29 Sun 10:55] =>  0:24
CLOCK: [2022-05-24 Tue 14:59]--[2022-05-24 Tue 15:16] =>  0:17
CLOCK: [2022-05-13 Fri 16:30]--[2022-05-13 Fri 17:02] =>  0:32
CLOCK: [2021-12-06 Mon 23:37]--[2021-12-07 Tue 00:24] =>  0:47
CLOCK: [2021-12-03 Fri 15:48]--[2021-12-03 Fri 16:15] =>  0:27
CLOCK: [2021-11-18 Thu 14:17]--[2021-11-18 Thu 14:22] =>  0:05
CLOCK: [2021-10-25 Mon 10:27]--[2021-10-25 Mon 10:30] =>  0:03
CLOCK: [2021-10-20 Wed 20:07]--[2021-10-20 Wed 20:15] =>  0:08
CLOCK: [2021-10-02 Sat 13:00]--[2021-10-02 Sat 13:06] =>  0:06
CLOCK: [2021-10-01 Fri 22:04]--[2021-10-01 Fri 22:28] =>  0:24
CLOCK: [2021-09-29 Wed 21:39]--[2021-09-29 Wed 22:02] =>  0:23
CLOCK: [2021-09-16 Thu 21:00]--[2021-09-16 Thu 21:11] =>  0:11
CLOCK: [2021-09-16 Thu 20:12]--[2021-09-16 Thu 20:16] =>  0:04
CLOCK: [2021-09-10 Fri 11:02]--[2021-09-10 Fri 11:12] =>  0:10
CLOCK: [2021-08-21 Sat 20:44]--[2021-08-21 Sat 21:07] =>  0:23
CLOCK: [2021-08-20 Fri 12:46]--[2021-08-20 Fri 12:50] =>  0:04
CLOCK: [2021-08-17 Tue 14:45]--[2021-08-17 Tue 14:52] =>  0:07
CLOCK: [2021-08-17 Tue 09:48]--[2021-08-17 Tue 09:59] =>  0:11
CLOCK: [2021-08-16 Mon 21:08]--[2021-08-16 Mon 21:11] =>  0:03
CLOCK: [2021-08-16 Mon 19:41]--[2021-08-16 Mon 20:05] =>  0:24
CLOCK: [2021-08-16 Mon 14:12]--[2021-08-16 Mon 17:22] =>  3:10
CLOCK: [2021-08-15 Sun 13:34]--[2021-08-15 Sun 13:46] =>  0:12
CLOCK: [2021-08-14 Sat 17:53]--[2021-08-14 Sat 18:13] =>  0:20
CLOCK: [2021-08-13 Fri 21:36]--[2021-08-13 Fri 22:05] =>  0:29
CLOCK: [2021-08-12 Thu 15:57]--[2021-08-12 Thu 16:25] =>  0:28
CLOCK: [2021-08-12 Thu 09:28]--[2021-08-12 Thu 09:54] =>  0:26
CLOCK: [2021-08-10 Tue 20:37]--[2021-08-10 Tue 20:38] =>  0:01
CLOCK: [2021-08-09 Mon 23:06]--[2021-08-09 Mon 23:45] =>  0:39
CLOCK: [2021-08-09 Mon 22:40]--[2021-08-09 Mon 23:00] =>  0:20
CLOCK: [2021-08-09 Mon 22:16]--[2021-08-09 Mon 22:30] =>  0:14
CLOCK: [2021-08-09 Mon 21:40]--[2021-08-09 Mon 22:05] =>  0:25
CLOCK: [2021-08-09 Mon 20:35]--[2021-08-09 Mon 21:28] =>  0:53
CLOCK: [2021-08-09 Mon 19:37]--[2021-08-09 Mon 20:05] =>  0:24
CLOCK: [2021-08-09 Mon 18:57]--[2021-08-09 Mon 19:21] =>  0:24
CLOCK: [2021-08-09 Mon 18:33]--[2021-08-09 Mon 18:51] =>  0:18
CLOCK: [2021-08-08 Sun 22:08]--[2021-08-08 Sun 22:36] =>  0:28
CLOCK: [2021-08-08 Sun 21:10]--[2021-08-08 Sun 21:44] =>  0:34
CLOCK: [2021-08-08 Sun 20:27]--[2021-08-08 Sun 21:02] =>  0:35
CLOCK: [2021-08-08 Sun 19:47]--[2021-08-08 Sun 20:01] =>  0:14
CLOCK: [2021-08-08 Sun 19:12]--[2021-08-08 Sun 19:42] =>  0:30
CLOCK: [2021-08-08 Sun 17:51]--[2021-08-08 Sun 18:12] =>  0:21
CLOCK: [2021-08-08 Sun 15:29]--[2021-08-08 Sun 15:45] =>  0:16
CLOCK: [2021-08-08 Sun 15:27]--[2021-08-08 Sun 15:28] =>  0:01
CLOCK: [2021-08-08 Sun 12:14]--[2021-08-08 Sun 13:04] =>  0:50
CLOCK: [2021-08-08 Sun 10:50]--[2021-08-08 Sun 10:54] =>  0:04
CLOCK: [2021-08-06 Fri 12:40]--[2021-08-06 Fri 14:16] =>  1:36
CLOCK: [2021-08-06 Fri 12:28]--[2021-08-06 Fri 12:38] =>  0:10
CLOCK: [2021-08-06 Fri 11:26]--[2021-08-06 Fri 11:31] =>  0:05
CLOCK: [2021-08-05 Thu 21:33]--[2021-08-05 Thu 21:49] =>  0:16
CLOCK: [2021-08-05 Thu 19:40]--[2021-08-05 Thu 20:00] =>  0:20
CLOCK: [2021-08-05 Thu 19:12]--[2021-08-05 Thu 19:20] =>  0:08
CLOCK: [2021-08-05 Thu 13:57]--[2021-08-05 Thu 14:50] =>  0:53
CLOCK: [2021-08-05 Thu 13:42]--[2021-08-05 Thu 13:53] =>  0:11
CLOCK: [2021-08-05 Thu 13:08]--[2021-08-05 Thu 13:16] =>  0:08
CLOCK: [2021-04-18 Sun 21:36]--[2021-04-18 Sun 22:25] =>  0:49
CLOCK: [2021-04-18 Sun 20:55]--[2021-04-18 Sun 21:27] =>  0:32
CLOCK: [2021-04-15 Thu 20:52]--[2021-04-15 Thu 21:10] =>  0:18
CLOCK: [2021-04-15 Thu 16:13]--[2021-04-15 Thu 16:31] =>  0:18
:END:

/[[https://github.com/djcb/mu][mu4e]] is an an Emacs-based e-mail client./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package mu4e
  :ensure (:host github
                 :files ("mu4e/*.el" "build/mu4e/mu4e-meta.el" "build/mu4e/mu4e-config.el" "build/mu4e/mu4e.info")
                 :repo "djcb/mu"
                 :main "mu4e/mu4e.el"
                 :pre-build (("./autogen.sh") ("ninja" "-C" "build"))
                 :build (:not elpaca--compile-info)
                 :depth nil)
  :defer 10
  :custom
  ;; uncomment thw two user options below when debugging
  ;; (mu4e-debug t)
  ;; (mu4e-index-update-error-warning )
  (mu4e-split-view 'single-window)
  (mu4e-headers-show-target nil)
  (mu4e-get-mail-command "sh $HOME/bin/mbsync-parallel")
  (mu4e-update-interval (* 5 60))
  (mu4e-drafts-folder "/Drafts")
  (mu4e-sent-folder "/Sent")
  (mu4e-refile-folder "/Refiled")
  (mu4e-trash-folder "/Trash")
  (mu4e-attachment-dir paths-dir-downloads)
  (mu4e-change-filenames-when-moving t)
  ;; see also `mu4e-extras-set-shortcuts'
  (mu4e-maildir-shortcuts
   `((:maildir ,mu4e-drafts-folder :key ?d)
     (:maildir ,mu4e-sent-folder :key ?t)
     (:maildir ,mu4e-refile-folder :key ?r)
     (:maildir ,mu4e-trash-folder :key ?x)))
  (mu4e-compose-format-flowed t)
  (mu4e-confirm-quit nil)
  (mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (mu4e-search-include-related nil)
  (mu4e-search-results-limit 1000)
  (mu4e-headers-visible-lines 25)
  (mu4e-hide-index-messages t)
  (mu4e-sent-messages-behavior 'delete) ; Gmail already keeps a copy

  ;; performance improvements (but with downsides)
  ;; groups.google.com/g/mu-discuss/c/hRRNhM5mwr0
  ;; djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html
  (mu4e-index-cleanup nil) ; nil improves performance
  (mu4e-index-lazy-check t) ; t improves performance

  (mu4e-compose-context-policy 'ask)
  (mu4e-context-policy nil)
  (mu4e-modeline-support nil)
  (mu4e-headers-fields '((:human-date . 16)
                         (:from . 30)
                         (:subject)))


  :config
  (require 'mu4e-contrib)
  (setf (alist-get 'trash mu4e-marks)
        '(:char ("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                ;; Here's the main difference to the regular trash mark, no +T
                ;; before -N so the message is not marked as IMAP-deleted:
                :action (lambda (docid msg target)
                          (mu4e--server-move docid (mu4e--mark-check-target target) "+S-u-N"))))

  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'mu4e--search-hist))

  ;; do not override native `mu4e' completion with `org-contacts' completion
  (remove-hook 'mu4e-compose-mode-hook 'org-contacts-setup-completion-at-point)
  (faces-extras-set-and-store-face-attributes
   '((mu4e-compose-separator-face :family faces-extras-fixed-pitch-font :height faces-extras-fixed-pitch-size)))

  :bind
  (("A-m" . mu4e)
   :map mu4e-main-mode-map
   ("c" . mu4e-compose-new)
   ("h" . mu4e-display-manual)
   ("j" . mu4e-search-maildir)
   ("u" . mu4e-update-mail-and-index)
   :map mu4e-headers-mode-map
   ("," . mu4e-copy-message-path)
   ("<" . mu4e-headers-split-view-shrink)
   (">" . mu4e-headers-split-view-grow)
   ("s-f" . mu4e-compose-forward)
   ("i" . mu4e-select-other-view)
   ("c" . mu4e-compose-new)
   ("*" . mu4e-headers-mark-all)
   ("A" . mu4e-headers-mark-all-unread-read)
   ("d" . mu4e-headers-mark-for-delete)
   ("f" . avy-extras-headers-view-message)
   ("k" . mu4e-headers-prev)
   ("l" . mu4e-headers-next)
   ("m" . mu4e-headers-mark-for-something)
   ("R" . mu4e-headers-mark-for-refile)
   ("V" . mu4e-headers-mark-for-move)
   :map mu4e-view-mode-map
   ("A-C-s-r" . shr-heading-previous)
   ("A-C-s-f" . shr-heading-next)
   ("," . mu4e-copy-message-path)
   ("<" . mu4e-headers-split-view-shrink)
   (">" . mu4e-headers-split-view-grow)
   ("s-f" . mu4e-compose-forward)
   ("i" . mu4e-select-other-view)
   ("c" . mu4e-compose-new)
   ("," . mu4e-view-headers-next)
   ("." . mu4e-view-headers-prev)
   ("d" . mu4e-view-mark-for-delete)
   ("f" . ace-link-extras-mu4e)
   ("L" . mu4e-view-save-attachments)
   ("m" . mu4e-view-mark-for-something)
   ("w" . mu4e-copy-message-path)
   ("A-C-s-u" . nil)
   ("A-C-s-p" . nil)
   ("s-c" . org-extras-eww-copy-for-org-mode)
   :map mu4e-compose-minor-mode-map
   ("E" . nil)
   :map mu4e-minibuffer-search-query-map
   ("M-k" . previous-history-element)
   ("M-l" . next-history-element)
   :map mu4e-search-minor-mode-map
   ("c" . nil)))
#+end_src

*** resources
:PROPERTIES:
:ID:       A7472C4E-FF72-4CBE-A9E2-E3C3F0AB0B38
:END:

- [[https://github.com/morzahavi/.emacs.d/blob/3c5dcd402f19b4b6a9c07942825de52a874e870c/modules/email/mu4e/config.el][.emacs.d/config.el at 3c5dcd402f19b4b6a9c07942825de52a874e870c · morzahavi/.emacs.d · GitHub]]. Highly elaborate config.
- https://ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html. Excellent setup instructions.
- Package to try: [[https://github.com/rougier/mu4e-thread-folding][GitHub - rougier/mu4e-thread-folding: Functions for folding threads in mu4e headers view]]
  - See also [[https://gist.github.com/rougier/98e83fb50e19fb73fe34a7ecc5fc1ccc][this]] (discussed [[https://www.reddit.com/r/emacs/comments/pvpb6d/mu4e_very_fast_thread_folding/][here]])

- [[https://www.youtube.com/watch?v=yZRyEhi4y44]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][A Complete Guide to Email in Emacs using Mu and Mu4e]]. Advanced setup, for MacOS. But uses OfflineMAP rather than isync.
- [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e for Dummies : emacs]].
- [[https://www.ict4g.net/adolfo/notes/emacs/reading-imap-mail-with-emacs.html][Reading IMAP email in Emacs]]. Very thorough and clearly explained tutorial, written in 2021. Looks like the best resource so far.
- [[https://gist.github.com/areina/3879626][Manage your email in emacs with mu4e · GitHub]]. Instructions from 2016, with updates in comments.
- [[https://www.reddit.com/r/emacs/comments/mzgsm0/mu4e_look_and_feel/][Mu4e look and feel : emacs]]. Very nice appearance/layout.

- How to set up ~offlineimap~ to retrieve password from ~pass~: https://unix.stackexchange.com/a/48355
- How to install ~mu4e~: https://emacs.stackexchange.com/questions/46156/how-to-install-mu-and-mu4e-with-gui-emacs
- https://www.sastibe.de/2021/01/setting-up-emacs-as-mail-client/

  https://emacs.readthedocs.io/en/latest/mu4e__email_client.html

To re-index the database without restarting Emacs, run =pkill -2 -u $UID mu= or ~then =mu index== from the terminal. Or try [[https://github.com/djcb/mu/issues/8#issuecomment-396649525][this script]].

If you get a ~pinentry~ problem, try running this on the termnal =gpgconf --kill gpg-agent=.

To debug "Update process returned with non-zero exit code", =(start-process-shell-command "test-mu4e" "test-mu4e" mu4e-get-mail-command)=
https://mu-discuss.narkive.com/mxM4AVIW/how-to-debug-non-zero-exit-code

If you encounter problems with mu and Straight, see [[https://github.com/raxod502/straight.el/issues/491#issuecomment-760150634][this thread]].

** mu4e-extras
:PROPERTIES:
:ID:       A131F743-C780-4D66-9F1A-D3F63F92DE0B
:END:

/[[file:extras/mu4e-extras.el][mu4e-extras]] collects my extensions for =mu4e=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package mu4e-extras
  :after mu4e
  :demand t
  :custom
  (mu4e-extras-inbox-folder "/Inbox")
  (mu4e-extras-daily-folder "/Daily")
  (mu4e-extras-wide-reply t)

  :config
  (mu4e-extras-set-shortcuts)
  (mu4e-extras-set-contexts)

  :hook
  (mu4e-mark-execute-pre-hook . mu4e-extras-gmail-fix-flags)
  (mu4e-view-mode-hook . mu4e-extras-set-face-locally)
  (mu4e-update-pre-hook . mu4e-extras-set-index-params)
  (mu4e-update-pre-hook . mu4e-extras-reapply-read-status-set-timer)
  (message-sent-hook . mu4e-extras-add-sent-to-mark-as-read-queue)

  :bind
  (:map mu4e-main-mode-map
        ("g" . mu4e-extras-compose-new-externally)
        ("r" . mu4e-extras-reindex-db)
        :map mu4e-headers-mode-map
        ("o" . mu4e-extras-view-org-capture)
        ("r" . mu4e-extras-compose-reply)
        ("$" . mu4e-extras-copy-sum)
        ("D" . mu4e-extras-headers-trash)
        ("e" . mu4e-extras-headers-refile)
        ("E" . mu4e-extras-headers-mark-read-and-refile)
        ("v" . mu4e-extras-headers-move)
        ("x" . mu4e-extras-mark-execute-all-no-confirm)
        :map mu4e-view-mode-map
        ("o" . mu4e-extras-view-org-capture)
        ("r" . mu4e-extras-compose-reply)
        ("$" . mu4e-extras-copy-sum)
        ("D" . mu4e-extras-view-trash)
        ("e" . mu4e-extras-view-refile)
        ("x" . mu4e-extras-view-in-gmail)
        ("v" . mu4e-extras-view-move)))
#+end_src

** org-msg
:PROPERTIES:
:ID:       DADEABFE-0E73-4E8F-9973-771FFEF55B60
:END:
:LOGBOOK:
CLOCK: [2022-07-22 Fri 18:14]--[2022-07-22 Fri 19:16] =>  1:02
CLOCK: [2022-07-22 Fri 10:45]--[2022-07-22 Fri 11:14] =>  0:29
CLOCK: [2021-12-18 Sat 14:19]--[2021-12-18 Sat 14:22] =>  0:03
CLOCK: [2021-08-17 Tue 21:26]--[2021-08-17 Tue 21:33] =>  0:07
CLOCK: [2021-08-05 Thu 12:49]--[2021-08-05 Thu 13:03] =>  0:14
:END:

/[[https://github.com/jeremy-compostella/org-msg][org-msg]] is a global minor mode mixing up Org mode and Message mode to compose and reply to emails in a HTML-friendly style./

I use this package to compose messages and to reply to messages composed in HTML For plain-text messages, I use ~message~ (of which see above).

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-msg
  :after mu4e-extras
  :demand t
  :custom
  (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (org-msg-startup "hidestars indent inlineimages")
  (org-msg-recipient-names `((,(getenv "PERSONAL_GMAIL") . "Pablo")))
  (org-msg-greeting-name-limit 3)
  (org-msg-default-alternatives '((new		. (text html))
                                  (reply-to-html	. (text html))))
  (org-msg-convert-citation t)
  (org-msg-enforce-css '((del nil
                              ((font-family . "\"Georgia\"")
                               (font-size . "11pt")
                               (color . "grey")
                               (border-left . "none")
                               (text-decoration . "line-through")
                               (margin-bottom . "0px")
                               (margin-top . "10px")
                               (line-height . "1.3")))
                         (a nil
                            ((color . "#4078F2")))
                         (a reply-header
                            ((color . "black")
                             (text-decoration . "none")))
                         (div reply-header
                              ((padding . "3.0pt 0in 0in 0in")
                               (border-top . "solid #d5d5d5 1.0pt")
                               (margin-bottom . "20px")))
                         (span underline
                               ((text-decoration . "underline")))
                         (li nil
                             ((font-family . "\"Georgia\"")
                              (font-size . "11pt")
                              (line-height . "1.3")
                              (margin-bottom . "0px")
                              (margin-top . "2px")))
                         (nil org-ul
                              ((list-style-type . "square")))
                         (nil org-ol
                              ((font-family . "\"Georgia\"")
                               (font-size . "11pt")
                               (line-height . "1.3")
                               (margin-bottom . "0px")
                               (margin-top . "0px")
                               (margin-left . "30px")
                               (padding-top . "0px")
                               (padding-left . "5px")))
                         (nil signature
                              ((font-family . "\"Georgia\"")
                               (font-size . "11pt")
                               (margin-bottom . "20px")))
                         (blockquote quote0
                                     ((padding-left . "5px")
                                      (font-size . "0.9")
                                      (margin-left . "10px")
                                      (margin-top . "10px")
                                      (margin-bottom . "0")
                                      (background . "#f9f9f9")
                                      (border-left . "3px solid #d5d5d5")))
                         (blockquote quote1
                                     ((padding-left . "5px")
                                      (font-size . "0.9")
                                      (margin-left . "10px")
                                      (margin-top . "10px")
                                      (margin-bottom . "0")
                                      (background . "#f9f9f9")
                                      (color . "#324e72")
                                      (border-left . "3px solid #3c5d88")))
                         (pre nil
                              ((line-height . "1.3")
                               (color . "#000000")
                               (background-color . "#f0f0f0")
                               (margin . "0px")
                               (font-size . "9pt")
                               (font-family . "monospace")))
                         (p nil
                            ((text-decoration . "none")
                             (margin-bottom . "0px")
                             (margin-top . "10px")
                             (line-height . "1.3")
                             (font-size . "11pt")
                             (font-family . "\"Georgia\"")))
                         (div nil
                              ((font-family . "\"Georgia\"")
                               (font-size . "11pt")
                               (line-height . "11pt")))))

  :config
  (org-msg-mode)
  (require 'pass)

  :hook
  (org-msg-mode-hook . (lambda () (auto-fill-mode -1)))

  :bind
  (:map org-msg-edit-mode-map
        ("s-A-b" . message-goto-bcc)
        ("s-A-c" . message-goto-cc)
        ("s-A-s" . message-send)
        ("s-a" . org-msg-attach)
        ("s-b" . org-msg-extras-begin-compose)
        ("s-c" . message-send-and-exit)
        ("s-f" . message-goto-from)
        ("s-k" . org-insert-link)
        ("s-s" . message-goto-subject)
        ("s-t" . message-goto-to)
        ("s-A-l" . org-extras-url-dwim)))
#+end_src

*** TODO [#5] Figure out how to include LaTeX/Mathjax
:PROPERTIES:
:Effort:   0:30
:ID:       E128A0A2-DA3E-4435-ADBF-472E7268678D
:END:

** org-msg-extras
:PROPERTIES:
:ID:       672D77D8-E9AA-4A66-A16A-EAB54E0238E6
:END:


/[[file:extras/org-msg-extras.el][org-msg-extras]] collects my extensions for =org-msg=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-msg-extras
  :after org-msg
  :demand t
  :bind
  (:map org-msg-edit-mode-map
        ("s-g" . org-msg-extras-open-in-grammarly)
        ("s-x" . org-msg-extras-kill-message)))
#+end_src

* messaging
:PROPERTIES:
:ID:       7DD09AFA-70A6-4E9D-AA78-C8E8421A9673
:END:
:LOGBOOK:
:END:

** telega
:PROPERTIES:
:ID:       E5B6D1B4-6225-4F69-8522-F8405127E1DE
:END:
:LOGBOOK:
CLOCK: [2022-09-30 Fri 19:27]--[2022-09-30 Fri 20:50] =>  1:23
CLOCK: [2022-09-30 Fri 19:14]--[2022-09-30 Fri 19:26] =>  0:12
CLOCK: [2022-07-15 Fri 14:46]--[2022-07-15 Fri 15:26] =>  0:40
CLOCK: [2022-07-07 Thu 14:30]--[2022-07-07 Thu 14:49] =>  0:19
CLOCK: [2022-07-07 Thu 14:25]--[2022-07-07 Thu 14:30] =>  0:05
CLOCK: [2022-07-07 Thu 03:55]--[2022-07-07 Thu 09:50] =>  5:55
CLOCK: [2022-07-06 Wed 14:43]--[2022-07-06 Wed 15:10] =>  0:27
CLOCK: [2022-07-05 Tue 11:46]--[2022-07-05 Tue 12:17] =>  0:31
CLOCK: [2022-03-02 Wed 15:00]--[2022-03-02 Wed 17:29] =>  2:29
CLOCK: [2021-12-04 Sat 13:13]--[2021-12-04 Sat 13:15] =>  0:02
CLOCK: [2021-11-27 Sat 14:46]--[2021-11-27 Sat 14:54] =>  0:08
CLOCK: [2021-11-22 Mon 13:27]--[2021-11-22 Mon 13:44] =>  0:17
CLOCK: [2021-11-19 Fri 08:24]--[2021-11-19 Fri 08:52] =>  0:28
CLOCK: [2021-11-18 Thu 21:46]--[2021-11-18 Thu 21:51] =>  0:05
CLOCK: [2021-11-18 Thu 12:05]--[2021-11-18 Thu 12:07] =>  0:02
CLOCK: [2021-11-17 Wed 17:18]--[2021-11-17 Wed 17:19] =>  0:01
CLOCK: [2021-11-16 Tue 21:37]--[2021-11-16 Tue 22:38] =>  1:01
CLOCK: [2021-10-23 Sat 12:46]--[2021-10-23 Sat 13:05] =>  0:19
CLOCK: [2021-10-22 Fri 14:39]--[2021-10-22 Fri 15:14] =>  0:35
CLOCK: [2021-10-10 Sun 11:49]--[2021-10-10 Sun 12:51] =>  1:02
CLOCK: [2021-10-09 Sat 21:02]--[2021-10-09 Sat 22:21] =>  1:19
CLOCK: [2021-10-09 Sat 20:05]--[2021-10-09 Sat 20:14] =>  0:09
CLOCK: [2021-10-09 Sat 14:30]--[2021-10-09 Sat 15:02] =>  0:32
CLOCK: [2021-10-08 Fri 23:15]--[2021-10-08 Fri 23:37] =>  0:22
CLOCK: [2021-10-08 Fri 15:38]--[2021-10-08 Fri 17:03] =>  1:25
CLOCK: [2021-10-08 Fri 13:29]--[2021-10-08 Fri 14:15] =>  0:46
CLOCK: [2021-10-08 Fri 12:30]--[2021-10-08 Fri 12:48] =>  0:18
CLOCK: [2021-10-07 Thu 15:39]--[2021-10-07 Thu 15:58] =>  0:19
CLOCK: [2021-10-05 Tue 15:50]--[2021-10-05 Tue 15:59] =>  0:09
CLOCK: [2021-10-02 Sat 23:03]--[2021-10-02 Sat 23:27] =>  0:24
CLOCK: [2021-08-14 Sat 16:05]--[2021-08-14 Sat 16:13] =>  0:08
CLOCK: [2021-08-05 Thu 11:06]--[2021-08-05 Thu 11:22] =>  0:16
CLOCK: [2021-08-04 Wed 18:19]--[2021-08-04 Wed 18:32] =>  0:13
CLOCK: [2021-08-03 Tue 23:33]--[2021-08-03 Tue 23:48] =>  0:15
CLOCK: [2021-08-03 Tue 23:13]--[2021-08-03 Tue 23:26] =>  0:13
CLOCK: [2021-05-17 Mon 11:55]--[2021-05-17 Mon 12:05] =>  0:10
CLOCK: [2021-04-06 Tue 18:05]--[2021-04-06 Tue 18:34] =>  0:29
:END:

/[[https://github.com/zevlg/telega.el][telega]] is an unofficial Emacs Telegram client./

To upgrade TDLib with homebrew, run =brew upgrade tdlib --fetch-HEAD= in a terminal, then =M-x telega-server-build=.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package telega
  :init
  (setopt telega-server-libs-prefix "/opt/homebrew")

  :custom
  (telega-chat-input-markups '("org"))
  (telega-use-images t)
  (telega-emoji-font-family 'noto-emoji)
  (telega-emoji-use-images nil)
  (telega-filters-custom '(("Main" . main)
                           ("Important" or mention
                            (and unread unmuted))
                           ("Archive" . archive)
                           ("Online" and
                            (not saved-messages) (user is-online))
                           ("Groups" type basicgroup supergroup)
                           ("Channels" type channel)))
  (telega-completing-read-function 'completing-read)
  (telega-webpage-history-max most-positive-fixnum)
  (telega-root-fill-column 110)
  (telega-chat-fill-column 90)
  (telega-webpage-fill-column 110)
  (telega-photo-size-limits `(8 3 ,(* 55 1.5) ,(* 12 1.5)))
  (telega-webpage-photo-size-limits `(55 10 ,(* 110 1.5) ,(* 20 1.5)))

  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'telega-search-history))

  (telega-mode-line-mode)

  (faces-extras-set-and-store-face-attributes
   '((telega-entity-type-code :family faces-extras-fixed-pitch-font :height
                              (face-attribute 'default :height))))

  :hook
  (telega-chat-mode-hook . (lambda () (setq default-directory paths-dir-downloads)))
  (telega-load-hook
   . (lambda ()
       "Reset the tab shortly after Telega is loaded to show its element correctly."
       (run-with-timer 1 nil #'tab-bar-extras-quick-reset)))

  :bind
  (:map telega-chat-mode-map
        ("M-p" . nil)
        ("S-<return>" . newline)
        ("A-s-r" . telega-chatbuf-next-unread-reaction)
        ("A-C-s-f" . telega-msg-next)
        ("A-C-s-r" . telega-msg-previous)
        ("<return>" . telega-extras-smart-enter)
        ;; if point is on a URL, `telega-msg-button-map' ceases to be
        ;; active and `<return>' triggers `newline' rather than
        ;; `push-button'. this seems to be a bug. as a workaround, we also
        ;; bind `push-button' to `s-<return>' in `telega-chat-mode-map'.
        ("s-," . telega-chatbuf-goto-pinned-message)
        ("s-a" . telega-chatbuf-attach)
        ("s-c" . telega-mnz-chatbuf-attach-code)
        ("s-d" . telega-chatbuf-goto-date)
        ("s-f" . telega-chatbuf-filter)
        ("s-k" . org-insert-link)
        ("s-m" . telega-chatbuf-attach-media)
        ("s-o" . telega-chatbuf-filter-by-topic)
        ("s-r" . telega-msg-add-reaction)
        ("s-s" . telega-chatbuf-filter-search)
        ("s-t" . telega-sticker-choose-favorite-or-recent)
        ("s-v" . org-extras-paste-with-conversion)
        ("M-s-v" . telega-chatbuf-attach-clipboard)
        ("s-z" . telega-mnz-chatbuf-attach-code)
        ("M-s-e" . telega-chatbuf-edit-prev)
        ("M-s-v" . telega-chatbuf-attach-clipboard)
        ("M-f" . ace-link-org)
        :map telega-msg-button-map
        ("k" . telega-button-backward)
        ("l" . telega-button-forward)
        ("<return>" . telega-extras-smart-enter)
        ("," . telega-chatbuf-goto-pinned-message)
        ("C" . telega-msg-copy-link)
        ("D" . telega-msg-delete-dwim)
        ("F" . telega-msg-forward-dwim)
        ("f" . ace-link-org)
        ("s" . telega-chatbuf-filter-search)
        ("w" . telega-browse-url)
        ("W" . telega-chatbuf-filter-cancel)
        :map telega-chat-button-map
        ("a" . nil)
        ("o" . nil)
        :map telega-root-mode-map
        ("k" . telega-button-backward)
        ("<up>" . telega-button-backward)
        ("l" . telega-button-forward)
        ("<down>" . telega-button-forward)
        ("SPC" . telega-root-next-unread)
        ("." . telega-chat-with)
        ("a" . telega-chat-toggle-archive)
        ("f" . avy-extras-telega-view-message)
        ("m" . telega-chat-toggle-muted)
        :map telega-webpage-mode-map
        ("x" . telega-webpage-browse-url)))
#+end_src

** telega-mnz
:PROPERTIES:
:ID:       473F7E47-4980-4A4A-8EC7-C008DB30BA22
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-mnz.el][telega-mnz]] displays syntax highlighting in Telega code blocks./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature telega-mnz
  :after telega
  :demand t
  :custom
  (telega-mnz-use-language-detection nil)

  :hook
  (telega-load-hook . global-telega-mnz-mode))
#+end_src

** telega-dired-dwim
:PROPERTIES:
:ID:       F38952F5-975A-4868-9E6B-BC74CA491BE2
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/telega-dired-dwim.el][telega-dired-dwim]] enables Dired file attachments in Telega chat buffers./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature telega-dired-dwim
  :after telega dired)
#+end_src

** telega-extras
:PROPERTIES:
:ID:       C7D90E9B-3503-4BFA-A736-89803A9DA664
:END:

/[[file:extras/telega-extras.el][telega-extras]] collects my extensions for =telega=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package telega-extras
  :hook
  (telega-chat-post-message-hook . telega-extras-transcribe-audio)

  :bind
  (("A-l" . telega-extras-switch-to)
   :map telega-msg-button-map
   ("o" . telega-extras-chat-org-capture)
   ("." . telega-extras-docs-change-open)
   ("b" . telega-extras-transcribe-audio)
   ("d" . telega-extras-download-file)
   ("L" . telega-extras-chat-org-capture-leo)
   :map telega-chat-mode-map
   ("M-s-t" . telega-extras-chatbuf-attach-most-recent-file)
   :map dired-mode-map
   ("M-s-a" . telega-extras-dired-attach-send)
   :map telega-root-view-map
   ("a" . telega-extras-view-archive)
   ("m" . telega-extras-view-main)
   :map telega-root-mode-map
   ("o" . telega-extras-chat-org-capture)))
#+end_src

** ol-telega
:PROPERTIES:
:ID:       E973DAC8-E1DE-4B94-80C6-CF80BD0F0836
:END:

/[[https://github.com/zevlg/telega.el/blob/master/contrib/ol-telega.el][ol-telega]] enables Org mode links to Telega chats and messages./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature ol-telega
  :after telega)
#+end_src

** ement
:PROPERTIES:
:ID:       AF0C2ADB-E9C0-4C37-8C3D-5674351ED170
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ement
  :disabled)
#+end_src

I installed ~ement~ in the hopes that I would be able to send Signal and WhatsApp messages from Emacs. I tried the [[https://github.com/alphapapa/ement.el/blob/6412c8aaae29ee79ccfb44582001c12d147cd5a6/e2ee.org#two-way-verification][two way verification]] method but calling ~panctl~ results in a ~dbus~-related error, and I was unable to make ~dubs~ work. Some discussion [[https://www.reddit.com/r/emacs/comments/1crerbh/comment/l40aszc/][here]] (see also [[https://www.reddit.com/r/emacs/comments/1crerbh/comment/l40prh2/][this comment]]).

** erc
:PROPERTIES:
:ID:       4FB5ECDA-2DB5-40F5-8BBE-6B0D4B51524D
:END:
:LOGBOOK:
CLOCK: [2021-06-03 Thu 14:18]--[2021-06-03 Thu 14:40] =>  0:22
CLOCK: [2021-06-02 Wed 12:02]--[2021-06-02 Wed 12:39] =>  0:37
:END:

/[[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][erc]] is an IRC client for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature erc
  :after auth-source-pass
  :defer t
  :custom
  (erc-server "irc.libera.chat")
  (erc-user-full-name user-full-name)
  (erc-nick (auth-source-pass-get "user" "auth-sources/erc/libera"))
  (erc-password (auth-source-pass-get 'secret "auth-sources/erc/libera"))
  (erc-prompt-for-nickserv-password nil)
  ;; erc-track-shorten-start 8 ; characters to display in modeline
  (erc-autojoin-channels-alist '(("irc.libera.chat")))
  (erc-kill-buffer-on-part nil)
  (erc-auto-query t)

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling))
#+end_src

** circe
:PROPERTIES:
:ID:       B5B892BD-A0E2-4D54-977E-58C1CF3CC248
:END:
:LOGBOOK:
CLOCK: [2021-10-07 Thu 14:31]--[2021-10-07 Thu 15:23] =>  0:52
:END:

/[[https://github.com/emacs-circe/circe][circe]] is another IRC client for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package circe
  :defer t)
#+end_src

** slack
:PROPERTIES:
:ID:       DEC2C46C-8837-4676-B495-BB2BA91D9681
:END:
:LOGBOOK:
CLOCK: [2022-07-14 Thu 10:44]--[2022-07-14 Thu 10:46] =>  0:02
CLOCK: [2022-07-12 Tue 13:32]--[2022-07-12 Tue 13:51] =>  0:19
CLOCK: [2022-07-11 Mon 14:43]--[2022-07-11 Mon 15:08] =>  0:25
CLOCK: [2022-07-09 Sat 19:16]--[2022-07-09 Sat 19:25] =>  0:09
CLOCK: [2022-07-09 Sat 15:17]--[2022-07-09 Sat 16:24] =>  1:07
CLOCK: [2022-07-08 Fri 18:57]--[2022-07-08 Fri 19:26] =>  0:29
CLOCK: [2022-07-08 Fri 17:58]--[2022-07-08 Fri 18:37] =>  0:39
CLOCK: [2022-07-08 Fri 13:56]--[2022-07-08 Fri 14:14] =>  0:18
CLOCK: [2022-07-08 Fri 13:42]--[2022-07-08 Fri 13:54] =>  0:12
CLOCK: [2022-07-02 Sat 14:13]--[2022-07-02 Sat 14:25] =>  0:12
CLOCK: [2022-06-08 Wed 16:59]--[2022-06-08 Wed 17:06] =>  0:07
CLOCK: [2021-06-25 Fri 21:41]--[2021-06-25 Fri 22:16] =>  0:35
CLOCK: [2021-05-29 Sat 14:10]--[2021-05-29 Sat 14:40] =>  0:30
CLOCK: [2021-04-18 Sun 13:08]--[2021-04-18 Sun 13:16] =>  0:08
CLOCK: [2021-04-12 Mon 19:40]--[2021-04-12 Mon 19:43] =>  0:03
CLOCK: [2021-04-11 Sun 14:18]--[2021-04-11 Sun 14:36] =>  0:18
CLOCK: [2021-04-07 Wed 12:41]--[2021-04-07 Wed 12:42] =>  0:01
CLOCK: [2021-03-29 Mon 16:52]--[2021-03-29 Mon 17:15] =>  0:23
:END:

/[[https://github.com/yuya373/emacs-slack][slack]] is a Slack client for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package slack
  :custom
  (slack-file-dir paths-dir-downloads)
  (slack-prefer-current-team t)

  :config
  (defun slack-chat-org-capture ()
    "Capture Slack message at point with `org-capture'."
    (interactive)
    (org-capture nil "s"))

  (require 'pass)
  (slack-register-team
   :name "Altruismo eficaz y racionalidad"
   :token (auth-source-pick-first-password
           :host "altruismo-eficaz^token"
           :user (concat (getenv "PERSONAL_GMAIL") "^token"))
   :cookie (auth-source-pick-first-password
            :host "altruismo-eficaz^cookie"
            :user (concat (getenv "PERSONAL_GMAIL") "^cookie")))

  (slack-register-team
   :name "EA Translations"
   :token (auth-source-pick-first-password
           :host "ea-translationa^token"
           :user (concat (getenv "PERSONAL_GMAIL") "^token"))
   :cookie (auth-source-pick-first-password
            :host "ea-translationa^cookie"
            :user (concat (getenv "PERSONAL_GMAIL") "^cookie")))

  :hook
  (slack-buffer-mode-hook . (lambda () (setopt line-spacing nil)))

  :bind
  (("A-k" . slack-channel-select)
   :map slack-mode-map
   ("s-a" . slack-all-threads)
   ("s-c" . slack-channel-select)
   ("s-g" . slack-group-select)
   ("s-m" . slack-im-select)
   ("H-s-t" . slack-change-current-team)
   ("s-u" . slack-select-rooms)
   ("H-s-u" . slack-select-unread-rooms)
   :map slack-buffer-mode-map
   ("s-a" . slack-all-threads)
   ("s-c" . slack-channel-select)
   ("s-g" . slack-group-select)
   ("s-m" . slack-im-select)
   ("H-s-t" . slack-change-current-team)
   ("s-u" . slack-select-rooms)
   ("H-s-u" . slack-select-unread-rooms) ; `slack-all-unreads' not working
   :map slack-thread-message-buffer-mode-map
   ("d" . slack-thread-show-or-create)
   ("e" . slack-message-edit)
   ("k" . slack-buffer-goto-prev-message)
   ("l" . slack-buffer-goto-next-message)
   ("o" . slack-chat-org-capture)
   ("q" . files-extras-kill-other-buffer)
   ("r" . slack-message-add-reaction)
   ("R" . slack-message-remove-reaction)
   ("z" . slack-message-write-another-buffer)
   :map slack-message-buffer-mode-map
   ("d" . slack-thread-show-or-create)
   ("e" . slack-message-edit)
   ("k" . slack-buffer-goto-prev-message)
   ("l" . slack-buffer-goto-next-message)
   ("o" . slack-chat-org-capture)
   ("r" . slack-message-add-reaction)
   ("R" . slack-message-remove-reaction)
   ("z" . slack-message-write-another-buffer)
   :map slack-message-compose-buffer-mode-map
   ("s-c" . slack-message-send-from-buffer)
   ("s-f" . slack-message-select-file)
   ("s-m" . slack-message-embed-mention)))
#+end_src

** ol-emacs-slack
:PROPERTIES:
:ID:       5F9F6EF6-55A5-4DD4-BB81-BBA16266364B
:END:

/[[https://github.com/ag91/ol-emacs-slack][ol-emacs-slack]] provides ~org-store-link~ support for [[94F76C3D-9547-431D-93AB-8814F4218AFF][slack]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ol-emacs-slack
  :ensure (:host github
             :repo "ag91/ol-emacs-slack")
  :after slack)
#+end_src

* web
:PROPERTIES:
:ID:       A1741EF4-6B22-498C-A60B-845A26AFAFE7
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 23:40]--[2021-10-21 Thu 00:05] =>  0:25
CLOCK: [2021-05-19 Wed 17:02]--[2021-05-19 Wed 17:43] =>  0:41
CLOCK: [2021-05-18 Tue 18:26]--[2021-05-18 Tue 18:54] =>  0:28
:END:

- [[http://www.howardism.org/Technical/Emacs/browsing-in-emacs.html][Emacs-focused Web Browsing]]
- [[https://protesilaos.com/codelog/2021-03-25-emacs-eww/][EWW and my extras (text-based Emacs web browser) | Protesilaos Stavrou]]

** browse-url
:PROPERTIES:
:ID:       0373B505-A028-4537-871F-3CCC2E5EADB1
:END:
:LOGBOOK:
CLOCK: [2023-04-08 Sat 17:14]--[2023-04-08 Sat 17:45] =>  0:31
:END:

/browse-url provides functions for browsing URLs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature browse-url
  :defer 3
  :custom
  (browse-url-browser-function 'eww-browse-url)
  (browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
  (browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"))
#+end_src

** browse-url-extras
:PROPERTIES:
:ID:       15B6192C-652C-47FC-8477-0B701129E89F
:END:

/[[file:extras/browse-url-extras.el][browse-url-extras]] collects my extensions for =browse-url=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package browse-url-extras
  :init
  (with-eval-after-load 'xwidget
    (bind-keys :map 'xwidget-webkit-mode-map
               ("X" . browse-extras-browse-url-externally)))
  :after browse-url)
#+end_src

** shr
:PROPERTIES:
:ID:       3E08CE1B-E73A-4440-A545-D2D3480D951B
:END:
:LOGBOOK:
CLOCK: [2021-08-11 Wed 14:04]--[2021-08-11 Wed 14:09] =>  0:05
:END:

/shr is a simple HTML renderer./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature shr
  :after faces-extras
  :defer t
  :custom
  (shr-bullet "• ")
  (shr-use-colors nil)
  (shr-use-fonts t)
  (shr-image-animate nil)
  (shr-width nil)
  (shr-max-width 100)
  (shr-discard-aria-hidden t)
  (shr-cookie-policy t)

  :config
  (faces-extras-set-and-store-face-attributes
   '((shr-text :height 0.65)
     ;; doesn’t seem to be working?
     (shr-h1 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height)
     (shr-h2 :family faces-extras-fixed-pitch-font :height faces-extras-org-level-height))))
#+end_src

** html
:PROPERTIES:
:ID:       A3D835EE-B96F-4FAE-B372-DA8687A26B2A
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature html
  :bind (:map html-mode-map
              ("s-w" . eww-extras-browse-file)))
#+end_src

** mhtml
:PROPERTIES:
:ID:       ED6F68F1-BE77-47CF-B2E7-1A5E1910E491
:END:

/mhtml is an editing mode that handles CSS and JavaScript./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature mhtml
  :bind
  (:map mhtml-mode
        ("s-x" . browse-url-of-buffer)
        ("s-w" . eww-extras-browse-file)))
#+end_src

** shr-tag-pre-highlight
:PROPERTIES:
:ID:       8956AD37-95A4-4A73-9287-9F70A406E9AF
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 12:33]--[2021-11-19 Fri 12:35] =>  0:02
:END:

/[[https://github.com/xuchunyang/shr-tag-pre-highlight.el][shr-tag-pre-highlight]] adds syntax highlighting for code blocks in HTML rendered by ~shr~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package shr-tag-pre-highlight
  :after (:any eww elfeed)
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight)))
#+end_src

** shr-heading
:PROPERTIES:
:ID:       CF3431E0-E5B0-41C3-924A-1C96AD3BB46F
:END:

/[[https://github.com/oantolin/emacs-config/blob/master/my-lisp/shr-heading.el][shr-heading]] supports heading navigation for shr-rendered buffers./

Discussion [[https://www.reddit.com/r/emacs/comments/u234pn/comment/i4i3gqg/?utm_source=share&utm_medium=web2x&context=3][here]].

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package shr-heading
  :ensure (:host github
             :repo "oantolin/emacs-config"
             :files ("my-lisp/shr-heading.el"))
  :after shr
  :hook
  (eww-mode-hook . shr-heading-setup-imenu))
#+end_src

** eww
:PROPERTIES:
:ID:       E9E3FE6F-5580-4D21-90D8-6B0E595C10F7
:END:
:LOGBOOK:
CLOCK: [2023-12-16 Sat 08:46]--[2023-12-16 Sat 09:37] =>  0:51
CLOCK: [2023-04-08 Sat 12:09]--[2023-04-08 Sat 12:21] =>  0:12
CLOCK: [2021-05-18 Tue 17:41]--[2021-05-18 Tue 18:26] =>  0:45
CLOCK: [2021-05-04 Tue 22:07]--[2021-05-04 Tue 22:25] =>  0:18
CLOCK: [2021-05-02 Sun 21:22]--[2021-05-02 Sun 21:32] =>  0:10
CLOCK: [2021-04-21 Wed 16:35]--[2021-04-21 Wed 16:40] =>  0:05
CLOCK: [2021-03-25 Thu 13:48]--[2021-03-25 Thu 14:14] =>  0:26
:END:

/eww is a text-based web browser./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature eww
  :after simple-extras
  :custom
  (eww-search-prefix "https://duckduckgo.com/?t=h_&q=")
  (eww-restore-desktop t)
  (eww-desktop-remove-duplicates t)
  (eww-header-line-format nil)
  (eww-download-directory paths-dir-downloads)
  (eww-auto-rename-buffer 'title)
  (eww-suggest-uris
   '(eww-links-at-point
     thing-at-point-url-at-point))
  (eww-history-limit most-positive-fixnum)
  (eww-browse-url-new-window-is-tab nil)
  ;; make eww respect url handlers when following links in webpages

  :config
  (dolist (cons browse-url-handlers)
    (setopt eww-use-browse-url
          (concat eww-use-browse-url "\\|" (car cons))))

  (with-eval-after-load 'savehist
    (dolist (var '(eww-history eww-prompt-history))
      (add-to-list 'savehist-additional-variables var)))

  :bind
  (("A-w" . eww)
   :map eww-mode-map
   ("<return>" . eww-follow-link)
   ("S-<return>" . eww-follow-link)
   ("A-C-s-r" . shr-heading-previous)
   ("A-C-s-f" . shr-heading-next)
   ("[" . eww-previous-url)
   ("]" . eww-next-url)
   ("j" . eww-back-url)
   (";" . eww-forward-url)
   ("e" . browse-url-extras-add-domain-to-open-externally)
   ("f" . ace-link-eww)
   ("F" . ace-link-extras-eww-new-buffer)
   ("s-f" . ace-link-extras-eww-externally)
   ("g" . nil)
   ("o" . eww-toggle-fonts)
   ("r" . eww-reload)
   ;; ":" (lambda! (eww-follow-link '(4)))
   ("X" . eww-browse-with-external-browser)
   ("s-c" . org-extras-eww-copy-for-org-mode)))
#+end_src

*** TODO [#5] Integrate eww Chrome, Firefox history
:PROPERTIES:
:ID:       2C3DB6DF-B599-49DF-AD30-41C77D2326D7
:END:

** eww-extras
:PROPERTIES:
:ID:       69B35912-79CB-4611-8E43-7C8A5BC82B55
:END:

/[[file:extras/eww-extras.el][eww-extras]] collects my extensions for =eww=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package eww-extras
  :after eww
  :demand t
  :config
  (require 'xwidget)
  (advice-add 'eww :before #'eww-extras-browse-youtube)

  :bind
  (:map eww-mode-map
        ("g e" . eww-extras-edit-current-url)
        ("g u" . eww-extras-go-up-url-hierarchy)
        ("g U" . eww-extras-go-to-root-url-hierarchy)
        ;; "p" 'eww-extras-open-with-recent-kill-ring
        ("h" . eww-extras-url-to-html)
        ("p" . eww-extras-url-to-pdf)
        ("x" . eww-extras-open-with-xwidget)
        ("s-d" . eww-extras-url-to-pdf)
        ("s-h" . eww-extras-url-to-html)
        :map xwidget-webkit-mode-map
        ("x" . eww-extras-open-with-eww)))
#+end_src

** prot-eww
:PROPERTIES:
:ID:       C83AED09-FA8C-46CE-91E0-13A7D49D7B8A
:END:

/[[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-eww.el][prot-eww]] is a set of ~eww~ extensions from Protesilaos Stavrou's personal configuration./

Note Prot's clarification:

#+begin_quote
Remember that every piece of Elisp that I write is for my own educational and recreational purposes. I am not a programmer and I do not recommend that you copy any of this if you are not certain of what it does.
#+end_quote

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package prot-eww
  :ensure (:host github
                 :repo "protesilaos/dotfiles"
                 :local-repo "prot-eww"
                 :main "emacs/.emacs.d/prot-lisp/prot-eww.el"
                 :build (:not elpaca--check-version)
                 :files ("emacs/.emacs.d/prot-lisp/prot-eww.el"))
  :after eww prot-common
  :bind
  (:map eww-mode-map
        ("M-f" . prot-eww-visit-url-on-page)
        ("A-M-f" . prot-eww-jump-to-url-on-page)))
#+end_src

** w3m
:PROPERTIES:
:ID:       986E4522-7EE1-477A-89EB-08855BCBECEE
:END:
:LOGBOOK:
CLOCK: [2021-03-29 Mon 21:25]--[2021-03-29 Mon 21:41] =>  0:16
:END:

/[[https://github.com/emacs-w3m/emacs-w3m][w3m]] is an Emacs interface to w3m./

I only use ~w3m~ to browse HTML email messages with ~mu4e~. For web browsing, I use ~eww~.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package w3m
  :after simple mu4e
  :bind
  (:map w3m-minor-mode-map
        ("<left>" . left-char)
        ("<right>" . right-char)
        ("<up>" . previous-line)
        ("<down>" . next-line)
        :map w3m-mode-map
        ("s-<return>" . w3m-view-url-with-browse-url)
        :map mu4e-view-mode-map
        ("<return>" . w3m-view-url-with-browse-url)))
#+end_src

** elfeed
:PROPERTIES:
:ID:       FF5DDBC3-ABB6-48A9-9B47-BC9A18F532D5
:END:
:LOGBOOK:
CLOCK: [2021-12-06 Mon 18:29]--[2021-12-06 Mon 18:41] =>  0:12
CLOCK: [2021-11-19 Fri 17:02]--[2021-11-19 Fri 19:27] =>  2:25
CLOCK: [2021-11-19 Fri 10:34]--[2021-11-19 Fri 10:40] =>  0:06
CLOCK: [2021-11-16 Tue 15:17]--[2021-11-16 Tue 15:27] =>  0:10
CLOCK: [2021-10-09 Sat 13:56]--[2021-10-09 Sat 14:30] =>  0:34
CLOCK: [2021-08-05 Thu 22:25]--[2021-08-05 Thu 22:27] =>  0:02
CLOCK: [2021-07-26 Mon 18:54]--[2021-07-26 Mon 19:12] =>  0:18
CLOCK: [2021-07-06 Tue 15:50]--[2021-07-06 Tue 16:16] =>  0:26
CLOCK: [2021-07-04 Sun 12:44]--[2021-07-04 Sun 13:02] =>  0:18
CLOCK: [2021-07-04 Sun 12:05]--[2021-07-04 Sun 12:37] =>  0:32
CLOCK: [2021-07-04 Sun 11:26]--[2021-07-04 Sun 11:55] =>  0:29
CLOCK: [2021-07-04 Sun 10:36]--[2021-07-04 Sun 10:53] =>  0:17
CLOCK: [2021-06-25 Fri 22:16]--[2021-06-25 Fri 22:18] =>  0:02
CLOCK: [2021-06-25 Fri 12:36]--[2021-06-25 Fri 12:58] =>  0:22
CLOCK: [2021-06-24 Thu 19:49]--[2021-06-24 Thu 19:59] =>  0:10
CLOCK: [2021-06-23 Wed 21:34]--[2021-06-23 Wed 21:46] =>  0:12
CLOCK: [2021-06-22 Tue 18:19]--[2021-06-22 Tue 18:24] =>  0:05
CLOCK: [2021-06-18 Fri 10:05]--[2021-06-18 Fri 10:05] =>  0:00
CLOCK: [2021-06-16 Wed 21:58]--[2021-06-16 Wed 22:17] =>  0:19
CLOCK: [2021-05-20 Thu 12:33]--[2021-05-20 Thu 12:43] =>  0:10
CLOCK: [2021-05-18 Tue 12:58]--[2021-05-18 Tue 13:07] =>  0:09
CLOCK: [2021-05-14 Fri 10:38]--[2021-05-14 Fri 10:40] =>  0:02
CLOCK: [2021-04-13 Tue 08:10]--[2021-04-13 Tue 08:21] =>  0:11
CLOCK: [2021-04-08 Thu 21:19]--[2021-04-08 Thu 21:50] =>  0:31
:END:

/[[https://github.com/skeeto/elfeed][elfeed]] is a web feeds client./

If the lines are breaking at the wrong places, set ~shr-width~ to the right value.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elfeed
  :custom
  (elfeed-curl-timeout 5)
  (elfeed-curl-max-connections 4)
  (elfeed-search-remain-on-entry t)

  :config
  (setq-default elfeed-search-filter "@15-days-ago +unread")

  :hook
  (elfeed-show-mode-hook . visual-line-mode)
  (elfeed-search-mode-hook . (lambda ()
                               "Disable undo in ‘*elfeed-search*’ buffer to avoid warnings."
                               (buffer-disable-undo)))

  :bind
  (("A-f" . elfeed)
   :map eww-mode-map
   ("c" . elfeed-kill-link-url-at-point)
   :map elfeed-search-mode-map
   ("d" . elfeed-update)
   ("f" . avy-extras-elfeed-search-show-entry)
   ("j" . elfeed-unjam)
   ("U" . elfeed-search-tag-all-unread)
   ("o" . elfeed-org)
   :map elfeed-show-mode-map
   ("<return>" . eww-follow-link)
   ("S-<return>" . eww-follow-link)
   ("A-C-s-r" . shr-heading-previous)
   ("A-C-s-f" . shr-heading-next)
   ("q" . nil)
   ("a" . zotra-extras-add-entry)
   ("b" . nil)
   ("f" . ace-link-eww)
   ("F" . ace-link-extras-eww-new-buffer)
   ("s-f" . ace-link-extras-eww-externally)
   ("q" . files-extras-kill-this-buffer)
   ("j" . elfeed-show-prev)
   (";" . elfeed-show-next)
   ("x" . elfeed-show-visit)))
#+end_src

*** TODO [#6] Revise key bindings
:PROPERTIES:
:ID:       2CDFD8A4-5D9B-4300-A5B2-D621146F8B3F
:END:
This is what I have, but no longer reflects my workflow:

| key   | command                              | behavior                      |
|-------+--------------------------------------+-------------------------------|
| RET   | =eww-follow-link '(4)=                 | open link at point in Chrome  |
| S-RET | =eww-follow-link=                      | open link at point in eww     |
| x     | =elfeed-show-visit=                    | open link of buffer in Chrome |
| v     | =elfeed-extras-show-visit-in-eww=      | open link of buffer in eww    |
| c     | =elfeed-kill-link-url-at-point=        | copy link at point            |
| w     | =elfeed-extras-kill-link-url-of-entry= | copy link of buffer           |
| f     | =ace-link-eww '(4)=                    | open link selected in Chrome  |
| F     | =ace-link-eww=                         | open link selected in eww     |

These key bindings produce the same behavior in eww.

** elfeed-extras
:PROPERTIES:
:ID:       57DE6F0B-9245-4E39-A747-6C2A6714B02A
:END:

/[[file:extras/elfeed-extras.el][elfeed-extras]] collects my extensions for =elfeed=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package elfeed-extras
  :after elfeed
  :demand t
  :custom
  (elfeed-show-entry-switch #'elfeed-extras-display-buffer)

  :config
  (run-with-idle-timer (* 20 60) t #'elfeed-extras-update)

  :hook
  (elfeed-search-mode-hook . elfeed-extras-disable-undo)

  :bind
  (:map elfeed-search-mode-map
        ("A" . elfeed-extras-mark-all-as-read)
        ("e" . elfeed-extras-toggle-read-entries)
        ("k" . elfeed-extras-follow-previous)
        ("l" . elfeed-extras-follow-next)
        ("w" . elfeed-extras-toggle-wiki-entries)
        :map elfeed-show-mode-map
        ("<tab>" . elfeed-extras-jump-to-next-link)
        ("i" . elfeed-extras-toggle-fixed-pitch)
        ("w" . elfeed-extras-kill-link-url-of-entry)))
#+end_src

** elfeed-org
:PROPERTIES:
:ID:       DF954E99-17CB-4698-934E-53E038C654EF
:END:

/[[https://github.com/remyhonig/elfeed-org][elfeed-org]] supports defining the feeds used by elfeed in an org-mode file./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elfeed-org
  :after elfeed
  :custom
  (rmh-elfeed-org-files (list paths-file-feeds-pablo))

  :config
  (elfeed-org))
#+end_src

** elfeed-tube
:PROPERTIES:
:ID:       410603F9-0FE3-4C31-BCB4-F85A9052263C
:END:

/[[https://github.com/karthink/elfeed-tube][elfeed-tube]] integrates ~elfeed~ with YouTube./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elfeed-tube
  :after elfeed
  :demand t

  :custom
  (elfeed-tube-auto-save-p t)

  :config
  (push '(text . shr-text) elfeed-tube-captions-faces)
  (elfeed-tube-setup)

  :bind
  (:map elfeed-show-mode-map
   ("v" . elfeed-tube-mpv)
   ("F" . elfeed-tube-mpv-follow-mode)
   ("." . elfeed-tube-mpv-where)))
#+end_src

** elfeed-tube-mpv
:PROPERTIES:
:ID:       0ADC0E03-67F8-446F-AF26-5CBBE16F2BBD
:END:

/[[https://github.com/karthink/elfeed-tube][elfeed-tube-mpv]] integrates ~elfeed-tube~ with ~mpv~./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package elfeed-tube-mpv
  :after elfeed-tube
  :custom
  (elfeed-tube-save-indicator t))
#+end_src

** engine-mode
:PROPERTIES:
:ID:       437B98FC-3667-43C4-9EF6-470E23FE7561
:END:
:LOGBOOK:
CLOCK: [2023-05-14 Sun 18:09]--[2023-05-14 Sun 19:59] =>  1:50
CLOCK: [2023-04-07 Fri 21:53]--[2023-04-07 Fri 22:38] =>  0:45
CLOCK: [2021-04-21 Wed 20:39]--[2021-04-21 Wed 20:41] =>  0:02
:END:

/[[https://github.com/hrs/engine-mode][engine-mode]] is a minor mode for defining and querying search engines through Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package engine-mode
  :defer t
  :custom
  (engine/browser-function browse-url-browser-function)

  :config
  (engine/set-keymap-prefix (kbd "H-g"))
  (defengine AllMusic
    "http://www.allmusic.com/search/all/%s"
    :keybinding "a m")
  (defengine Alignment-Forum
    "https://www.alignmentforum.org/search?query=%s"
    :keybinding "a f")
  (defengine AlternativeTo
    "http://alternativeto.net/SearchResult.aspx?profile=all&search=%s"
    :keybinding "a t")
  (defengine Amazon-DE
    "http://www.amazon.de/s?k=%s"
    :keybinding "a d")
  (defengine Amazon-ES
    "http://www.amazon.es/s?k=%s"
    :keybinding "a e")
  (defengine Amazon-FR
    "https://www.amazon.fr/s?k=%s"
    :keybinding "a f")
  (defengine TheresAnAIForThat
    "https://theresanaiforthat.com/s/%s/"
    :keybinding "a i")
  (defengine Amazon-MX
    "https://www.amazon.com.mx/s?k=%s"
    :keybinding "a x")
  (defengine Amazon-UK
    "http://www.amazon.co.uk/s?k=%s"
    :keybinding "a k")
  (defengine Amazon-US
    "http://www.amazon.com/s?k=%s"
    :keybinding "a a")
  (defengine AnkiWeb
    "https://ankiweb.net/shared/decks/%s"
    :keybinding "a w")
  (defengine AstralCodexTen
    "https://substack.com/search/%s?focusedPublicationId=89120"
    :keybinding "a c"
    ;; individual Substack posts render nicely in eww, but for other pages we need a modern browser
    :browser 'browse-url-default-browser)
  (defengine Audible
    "https://www.audible.com/search/ref=a_hp_tseft?advsearchKeywords=%s&filterby=field-keywords&x=13&y=11"
    :keybinding "a u")
  (defengine AudioBookBay
    "https://audiobookbay.lu/?s=%s&tt=1"
    :keybinding "a b")
  (defengine EABlogs
    "https://cse.google.com/cse?cx=013594344773078830993:k3igzr2se6y&q=%s"
    :keybinding "b b")
  (defengine BookFinder
    "http://www.bookfinder.com/search/?keywords=%s&st=xl&ac=qr&src=opensearch"
    :keybinding "b f")
  (defengine Bing
    "https://www.bing.com/search?q=%s&PC=U316&FORM=CHROMN"
    :keybinding "b i")
  (defengine UCBerkeleyLibrary    "https://search.library.berkeley.edu/discovery/search?query=any,contains,%s&tab=Default_UCLibrarySearch&search_scope=DN_and_CI&vid=01UCS_BER:UCB&offset=0"
             :keybinding "b l")
  (defengine MercadoLibre
    "https://listado.mercadolibre.com.ar/%s#D[A:qwer]"
    :keybinding "c c")
  (defengine CRSocietyForums
    "https://www.crsociety.org/search/?q=%s"
    :keybinding "c r")
  (defengine Calendly
    "https://calendly.com/app/login?email=%s&lang=en"
    :keybinding "c l")
  (defengine ChromeExtensions
    "https://chrome.google.com/webstore/search/%s?_category=extensions"
    :keybinding "c e")
  (defengine Crossref
    "https://search.crossref.org/?q=%s"
    :keybinding "c r")
  (defengine DOI
    "https://doi.org/%s"
    :keybinding "d o")
  (defengine DuckDuckGo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d d")
  (defengine Diccionario-Panhispánico-de-Dudas
    "https://www.rae.es/dpd/%s"
    :keybinding "d p")
  (defengine EAForum
    "https://www.google.com/search?q=%s+site:forum.effectivealtruism.org"
    :keybinding "f f")
  (defengine Ebay-UK
    "https://www.ebay.co.uk/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e k")
  (defengine Ebay-US
    "https://www.ebay.com/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e b")
  (defengine Ebay-DE
    "https://www.ebay.de/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313&_nkw=%s&_sacat=0"
    :keybinding "e d")
  (defengine Fundeu
    "https://cse.google.com/cse?cx=005053095451413799011:alg8dd3pluq&q=%s"
    :keybinding "f f")
  (defengine Flickr
    "http://www.flickr.com/search/?q=%s"
    :keybinding "f l")
  (defengine Financial-Times
    "https://www.ft.com/search?q=%s"
    :keybinding "f t")
  (defengine GitHub
    "https://github.com/search?q=%s&type=code"
    :keybinding "g h")
  (defengine Goodreads
    "http://www.goodreads.com/search/search?search_type=books&search[query]=%s"
    :keybinding "g r")
  (defengine Google
    "https://www.google.com/search?q=%s"
    :keybinding "g g")
  (defengine Google-Books
    "https://www.google.com/search?q=%s&btnG=Search+Books&tbm=bks&tbo=1&gws_rd=ssl"
    :keybinding "g k")
  (defengine Google-Custom-Search
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "g c")
  (defengine Google-Domains
    "https://domains.google.com/registrar?s=%s&hl=en"
    :keybinding "g d")
  (defengine Google-Drive
    "https://drive.google.com/drive/u/0/search?q=%s"
    :keybinding "g d")
  (defengine Google-Trends
    "http://www.google.com/trends/explore#q=%s"
    :keybinding "g e")
  (defengine Google-Images
    "https://www.google.com/search?tbm=isch&source=hp&biw=1920&bih=1006&ei=2PlgWp_OEcHF6QTo2b2ACQ&q=%s"
    :keybinding "g i")
  (defengine Google-Maps
    "https://www.google.com/maps/search/%s"
    :keybinding "g m")
  (defengine Google-News
    "https://news.google.com/search?q=%s"
    :keybinding "g n")
  (defengine Google-Podcasts
    "https://podcasts.google.com/?q=%s"
    :keybinding "g o")
  (defengine Google-Photos
    "https://photos.google.com/search/%s"
    :keybinding "g p")
  (defengine Google-Scholar
    "https://scholar.google.com/scholar?hl=en&as_sdt=1%2C5&q=%s&btnG=&lr="
    :keybinding "s s")
  (defengine Google-Translate
    "https://translate.google.com/#auto/en/%s"
    :keybinding "g t")
  (defengine Google-Video
    "https://www.google.com/search?q=%s&tbm=vid"
    :keybinding "g v")
  (defengine GiveWell
    "https://www.givewell.org/search/ss360/%s"
    :keybinding "g w")
  (defengine Google-Play
    "https://play.google.com/store/search?q=%s"
    :keybinding "g y")
  (defengine Google-Scholar-Spanish
    "https://scholar.google.com/scholar?hl=en&as_sdt=1%2C5&q=%s&btnG="
    :keybinding "s x")
  (defengine Gwern
    "https://www.google.com/search?q=%s+site:gwern.net"
    :keybinding "g w")
  (defengine IMDb
    "https://www.imdb.com/find/?q=%s"
    :keybinding "i i")
  (defengine IMDb-Actor
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i a")
  (defengine IMDb-Director
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i d")
  (defengine IMDb-Composer
    "http://www.imdb.com/filmosearch?explore=title_type&role=%s&ref_=filmo_ref_job_typ&sort=user_rating"
    :keybinding "i c")
  (defengine Internet-Archive
    "https://archive.org/search.php?query=%s"
    :keybinding "v v")
  (defengine Internet-Archive-Scholar
    "https://scholar.archive.org/search?q=%s"
    :keybinding "v s")
  (defengine JustWatch
    "https://www.justwatch.com/us/search?q=%s"
    :keybinding "j w")
  (defengine KAYAK
    "https://www.kayak.co.uk/sherlock/opensearch/search?q=%s"
    :keybinding "k k")
  (defengine Keyboard-Maestro
    "https://forum.keyboardmaestro.com/search?q=%s"
    :keybinding "k m")
  (defengine Lastfm
    "http://www.last.fm/search?q=%s"
    :keybinding "f m")
  (defengine LessWrong
    "https://www.google.com/search?q=%s+site:lesswrong.com"
    :keybinding "l w")
  (defengine LessWrongWiki
    "https://wiki.lesswrong.com/index.php?title=Special:Search&search=%s"
    :keybinding "l i")
  (defengine LibraryGenesis
    "http://libgen.li/index.php?req=%s"
    :keybinding "l l")
  (defengine Librivox
    "https://librivox.org/search?q=%s&search_form=advanced"
    :keybinding "l v")
  (defengine LinkedIn
    "http://www.linkedin.com/vsearch/f?type=all&keywords=%s&orig=GLHD&rsid=&pageKey=member-home&search=Search"
    :keybinding "i n")
  (defengine Linguee
    "https://www.linguee.com/english-spanish/search?source=auto&query=%s"
    :keybinding "l i")
  (defengine Marginal-Revolution
    "https://marginalrevolution.com/?s=%s"
    :keybinding "m r")
  (defengine MediaCenter
    "https://www.google.com/search?q=%s+site:yabb.jriver.com"
    :keybinding "m c")
  (defengine Medium
    "https://medium.com/search?q=%s&ref=opensearch"
    :keybinding "m d")
  (defengine Melpa
    "https://melpa.org/#/?q=%s"
    :keybinding "m p")
  (defengine MetaFilter
    "https://www.metafilter.com/contribute/search.mefi?site=mefi&q=%s"
    :keybinding "m f")
  (defengine Metaculus
    "https://www.metaculus.com/questions/?order_by=-activity&search=%s"
    :keybinding "m e")
  (defengine Metaforecast
    "https://metaforecast.org/?query=%s"
    :keybinding "m m")
  (defengine Movielens
    "https://movielens.org/explore?q=%s"
    :keybinding "m l")
  (defengine Netflix
    "https://www.netflix.com/search?q=%s"
    :keybinding "n n")
  (defengine New-York-Times
    "https://www.nytimes.com/search?query=%s"
    :keybinding "n y")
  (defengine Notatu-Dignum
    "http://www.stafforini.com/quotes/index.php?s=%s"
    :keybinding "q q")
  (defengine OddsChecker
    "https://www.oddschecker.com/search?query=%s"
    :keybinding "o c")
  (defengine Open-Philanthropy
    "https://www.google.com/search?q=%s+site:openphilanthropy.org"
    :keybinding "o p")
  (defengine Overcoming-Bias
    "https://substack.com/search/%s?focusedPublicationId=1245641"
    :keybinding "o b"
    :browser 'browse-url-default-browser)
  (defengine OxfordReference
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/search?btog=chap&q0=%22%s%22"
    :keybinding "o r")
  (defengine OxfordReferenceDOI
    "https://www-oxfordreference-com.myaccess.library.utoronto.ca/view/%s"
    :keybinding "o d")
  (defengine PhilPapers
    "http://philpapers.org/s/%s"
    :keybinding "p p")
  (defengine AnnasArchive
    (progn
      (require 'annas-archive)
      (concat annas-archive-home-url "search?index=&page=1&q=%s&ext=pdf&sort="))
    :keybinding "r r")
  (defengine ReducingSuffering
    "http://reducing-suffering.org/?s=%s"
    :keybinding "r s")
  (defengine Reference
    "https://cse.google.com/cse?cx=013594344773078830993:bg9mrnfwe30&q=%s"
    :keybinding "r f")
  (defengine sci-hub
    "https://sci-hub.se/%s"
    :keybinding "u u")
  (defengine ScienceDirectencyclopedias
    "https://www.sciencedirect.com/search?qs=%s&articleTypes=EN"
    :keybinding "s e")
  (defengine SlateStarCodex
    "http://slatestarcodex.com/?s=%s"
    :keybinding "s c")
  (defengine StackSnippet
    "http://www.stacksnippet.com/#gsc.tab=0&gsc.q=%s"
    :keybinding "s n")
  (defengine Stanford-Encyclopedia-of-Philosophy
    "https://plato.stanford.edu/search/searcher.py?query=%s"
    :keybinding "s p")
  (defengine Tango-DJ
    "http://www.tango-dj.at/database/?tango-db-search=%s&search=Search"
    :keybinding "d j")
  (defengine TangoDJ-Yahoo-Group
    "http://groups.yahoo.com/group/TangoDJ/msearch?query=%s&submit=Search&charset=ISO-8859-1"
    :keybinding "t y")
  (defengine TasteDive
    "https://tastedive.com/like/%s"
    :keybinding "t d")
  (defengine ThreadReader
    "https://threadreaderapp.com/search?q=%s"
    :keybinding "t r")
  (defengine Twitter
    "https://twitter.com/search?q=%s&src=typed_query"
    :keybinding "t w")
  (defengine Vimeo
    "http://vimeo.com/search?q=%s"
    :keybinding "v m")
  (defengine WaybackMachine
    "http://web.archive.org/web/*/%s"
    :keybinding "w b")
  (defengine Wikipedia-Deutsch
    "https://de.wikipedia.org/w/index.php?title=Spezial:Suche&search=%s"
    :keybinding "w d")
  (defengine Wikipedia-English
    "http://en.wikipedia.org/w/index.php?title=Special:Search&profile=default&search=%s&fulltext=Search"
    :keybinding "w w")
  (defengine Wikipedia-French
    "http://fr.wikipedia.org/w/index.php?title=Spécial:Recherche&search=%s"
    :keybinding "w f")
  (defengine Wikipedia-Italiano
    "http://it.wikipedia.org/w/index.php?title=Speciale:Ricerca&search=%s"
    :keybinding "w i")
  (defengine Wikipedia-Spanish
    "https://es.wikipedia.org/w/index.php?search=%s&title=Especial:Buscar&ns0=1&ns11=1&ns100=1"
    :keybinding "w e")
  (defengine Wikipedia-Swedish
    "http://sv.wikipedia.org/w/index.php?title=Special:S%C3%B6k&search=%s"
    :keybinding "w s")
  (defengine Wirecutter
    "https://thewirecutter.com/search/?s=%s"
    :keybinding "w t")
  (defengine WorldCat
    "http://www.worldcat.org/search?q=%s&qt=results_page"
    :keybinding "w c")
  (defengine YahooFinance
    "https://finance.yahoo.com/company/%s"
    :keybinding "y f")
  (defengine YouTube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y t")
  (defengine YouTubemovies
    "https://www.youtube.com/results?lclk=long&filters=hd%2Clong&search_query=%s"
    :keybinding "y m")

  :hook minibuffer-setup-hook)
#+end_src

** org-download
:PROPERTIES:
:ID:       A9F101D1-4130-4297-A2B3-203B15AA408B
:END:
:LOGBOOK:
CLOCK: [2021-06-23 Wed 11:43]--[2021-06-23 Wed 11:51] =>  0:08
:END:

/[[https://github.com/abo-abo/org-download][org-download]] supports drag and drop images to org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-download
  :after org
  :bind
  ("H-s-v" . org-download-clipboard))
#+end_src

** org-web-tools
:PROPERTIES:
:ID:       F139F57B-7CBB-49C9-A061-B827B25DB3DA
:END:
:LOGBOOK:
CLOCK: [2021-11-19 Fri 10:50]--[2021-11-19 Fri 12:00] =>  1:10
CLOCK: [2021-11-18 Thu 20:43]--[2021-11-18 Thu 21:30] =>  0:47
CLOCK: [2021-10-01 Fri 21:10]--[2021-10-01 Fri 21:51] =>  0:41
:END:

/[[https://github.com/alphapapa/org-web-tools][org-web-tools]] supports viewing, capturing, and archiving web pages in org-mode./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package org-web-tools
  :defer t)
#+end_src

** org-web-tools-extras
:PROPERTIES:
:ID:       544201E3-BFB5-4398-AECC-EDD45410C064
:END:


/[[file:extras/org-web-tools-extras.el][org-web-tools-extras]] collects my extensions for =org-web-tools=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package org-web-tools-extras
  :after org-web-tools)
#+end_src

** request
:PROPERTIES:
:ID:       4B7C17EE-0346-4059-AFF1-24DD7A609ADE
:END:

/[[https://github.com/tkf/emacs-request][request]] provides HTTP request for Emacs Lisp./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package request
  :defer t)
#+end_src

** deferred
:PROPERTIES:
:ID:       A19273DD-3802-4594-A700-237F4134740A
:END:

/[[https://github.com/kiwanami/emacs-deferred][deferred]] provides simple asynchronous functions for emacs lisp./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package deferred
  :defer t)
#+end_src

** graphql-mode
:PROPERTIES:
:ID:       4B9A26D9-EA9B-420B-A8B2-060AAF19D4E4
:END:

/[[https://github.com/davazp/graphql-mode][graphql-mode]] is a major mode for GraphQL./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package graphql-mode
  :defer t)
#+end_src

** mullvad
:PROPERTIES:
:ID:       F932B1C7-4BC0-45AB-A736-3E4DC4FBA09E
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 19:58]--[2023-04-09 Sun 21:23] =>  1:25
CLOCK: [2022-09-29 Thu 16:52]--[2022-09-29 Thu 18:01] =>  1:09
CLOCK: [2022-09-29 Thu 15:39]--[2022-09-29 Thu 16:26] =>  0:47
:END:

/[[https://github.com/benthamite/mullvad][mullvad]] provides a few functions for interfacing with Mullvad, a VPN service./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package mullvad
  :ensure (mullvad
           :host github
           :repo "benthamite/mullvad")
  :custom
  (mullvad-durations '(1 5 10 30 60 120))

  (mullvad-cities-and-servers
        '(("London" . "gb-lon-ovpn-005")
          ("Madrid" . "es-mad-ovpn-202")
          ("Malmö" . "se-sto-wg-005")
          ("Frankfurt" . "de-fra-wg-005")
          ("New York" . "us-nyc-ovpn-501")
          ("San José" . "us-sjc-wg-101")
          ("São Paulo" . "br-sao-wg-202")))

  (mullvad-websites-and-cities
        '(("Betfair" . "London")
          ("Criterion Channel" . "New York")
          ("Gemini" . "New York")
          ("HathiTrust" . "San José")
          ("IMDb" . "New York")
          ("Library Genesis" . "Malmö")
          ("Pirate Bay" . "Malmö")
          ("UC Berkeley" . "San José")
          ("Wise" . "Madrid")))

  :bind
  ("A-a" . mullvad))
#+end_src

* multimedia
:PROPERTIES:
:ID:       358E28B5-0274-43A0-AE9C-AA004B4775E5
:END:

** EMMS
:PROPERTIES:
:ID:       3B176388-5D13-478F-8E13-9C8C93AB9D10
:END:
:LOGBOOK:
CLOCK: [2022-09-05 Mon 12:18]--[2022-09-05 Mon 13:11] =>  0:53
CLOCK: [2022-09-05 Mon 12:09]--[2022-09-05 Mon 12:12] =>  0:03
CLOCK: [2021-05-04 Tue 21:41]--[2021-05-04 Tue 21:56] =>  0:15
:END:

/[[https://www.gnu.org/software/emms/][EMMS]] (Emacs MultiMedia System) is media player software for Emacs./

EMMS is not powerful enough for my use case (tango DJ with a collection of over 70,000 tracks). But I'm exploring whether I can use it for specific purposes, such as batch-tagging.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package emms
  :defer t
  :disabled t ; temporarily because server is down
  :custom
  (emms-player-list '(emms-player-mpv))
  (emms-source-file-default-directory paths-dir-music-tango)
  (emms-playlist-buffer-name "*Music*")
  (emms-info-functions '(emms-info-libtag)) ; make sure libtag is the only thing delivering metadata
  ;; ~1 order of magnitude fzaster; requires GNU find: `brew install findutils'
  (emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)

  :config
  (require 'emms-setup)
  (require 'emms-player-simple)
  (require 'emms-source-file)
  (require 'emms-source-playlist)
  (require 'emms-info-native)
  ;; emms-print-metadata binary must be present; see emacs.stackexchange.com/a/22431/32089
  (require 'emms-info-libtag)
  (require 'emms-mode-line)
  (require 'emms-mode-line-icon)
  (require 'emms-playing-time)

  (emms-all)
  (emms-default-players)
  (add-to-list 'emms-info-functions 'emms-info-libtag)
  (emms-mode-line-mode)
  (emms-playing-time 1))
#+end_src

*** resources
:PROPERTIES:
:ID:       C043F6EF-C922-4803-8361-E94ACE1C60F0
:END:

[[https://sqrtminusone.xyz/posts/2021-09-07-emms/][My EMMS and elfeed setup]]

** empv
:PROPERTIES:
:ID:       A26317BD-B76E-4A0A-9DA1-ED4CC9F4416F
:END:


/[[https://github.com/isamert/empv.el][empv]] is a media player based on [[https://mpv.io/][mpv]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package empv
  :ensure (:host github
                 :repo "isamert/empv.el")
  :custom
  (empv-audio-dir paths-dir-music-tango)
  (empv-invidious-instance "https://invidious.fdn.fr/api/v1")

  :config
  (add-to-list 'empv-mpv-args "--ytdl-format=best") ; github.com/isamert/empv.el#viewing-youtube-videos

  :bind-keymap
  ("A-p" . empv-map))
#+end_src

** ytdl
:PROPERTIES:
:ID:       26EEEF20-5CDC-4855-A03D-AFEBB784D637
:END:
:LOGBOOK:
CLOCK: [2023-05-07 Sun 10:53]--[2023-05-07 Sun 11:27] =>  0:34
:END:

/[[https://gitlab.com/tuedachu/ytdl][ytdl]] is an Emacs interface for [[https://youtube-dl.org/][youtube-dl]]./

Note that this package also works with [[https://github.com/yt-dlp/yt-dlp][yt-dlp]], a ~youtube-dl~ fork.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package ytdl
  :custom
  (ytdl-command "yt-dlp")
  (ytdl-video-folder paths-dir-downloads
                     ytdl-music-folder paths-dir-downloads
                     ytdl-download-folder paths-dir-downloads)
  (ytdl-video-extra-args . ("--write-sub" "--write-auto-sub" "--sub-lang" "en,es,it,fr,pt"))

  :bind
  (("A-M-y" . ytdl-download)
   :map ytdl--dl-list-mode-map
   ("RET" . ytdl--open-item-at-point)
   ("D" . ytdl--delete-item-at-point)))
#+end_src

** emacs-speech-input
:PROPERTIES:
:ID:       F4DA377D-3A7D-4DC8-A35E-A8BB684EE32D
:END:


Requires configuration. Disabled for the time being.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package emacs-speech-input
  :ensure (:host github
                 :repo "lepisma/emacs-speech-input")
  :disabled
  :config
  (require 'gptel)
  (setq llm-warn-on-nonfree nil)

  :custom
  ;; TODO: use Tlon API key
  (esi-dictate-dg-api-key (auth-source-pass-get "key" (concat "chrome/deepgram.com/" (getenv "PERSONAL_EMAIL"))))
  (esi-dictate-llm-provider (make-llm-openai :key gptel-api-key :chat-model "gpt-4o-mini"))

  :bind (:map esi-dictate-mode-map
              ("C-g" . esi-dictate-stop))
  :hook
  (esi-dictate-speech-final . esi-dictate-fix-context))
#+end_src

** read-aloud
:PROPERTIES:
:ID:       71DBC03A-D68C-4E5D-B495-55DE31F6DC2F
:END:

/[[https://github.com/gromnitsky/read-aloud.el][read-aloud]] is an Emacs interface to TTS (text-to-speech) engines./

- To give Emacs access to the microphone on MacOS, clone ~https://github.com/DocSystem/tccutil~ and from the cloned repo, run =sudo python3 tccutil.py -p /opt/homebrew/Cellar/emacs-plus@30/30.0.60/Emacs.app/ --microphone -e= (some discussion [[https://scsynth.org/t/emacs-scsynth-and-microphone-permissions/3253][here]]).
- To read with macOS directly, ~b-n~. In turn, ~b-h~ starts dictation. (These are system-wide shortcuts defined with Karabiner rather than bindings specific to Emacs. See the "b-mode" section in my Karabiner configuration.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package read-aloud
  :custom
  (read-aloud-engine "say")

  :bind
  ("C-H-r" . read-aloud-this))
#+end_src

** read-aloud-extras
:PROPERTIES:
:ID:       AA0F6FA2-2226-47C3-AE3F-7C8A1D542A17
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package read-aloud-extras
  :after read-aloud)
#+end_src

** subed
:PROPERTIES:
:ID:       2FE4816E-F6F8-452A-9417-345FE4E01014
:END:

/[[https://github.com/sachac/subed][subed]] is a subtitle editor for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package subed
  :ensure (:host github
                 :repo "sachac/subed"
                 :files ("subed/*.el"))

  :config
  (defun subed-export-transcript ()
    "Export a clean transcript of the current subtitle buffer to a file.
This function retrieves all subtitle text, strips any HTML-like tags (such
as WebVTT timing or style tags within the text lines), and then saves the
result to a user-specified file."
    (interactive)
    (let* ((subtitles (subed-subtitle-list))
           (raw-text (if subtitles
                         (subed-subtitle-list-text subtitles nil) ; nil = do not include comments
                       ""))
           (cleaned-text (if (string-empty-p raw-text)
                             ""
                           (let* ((lines (split-string raw-text "\n" t)) ; OMIT-NULLS is t
                                  (stripped-lines (mapcar #'subed--strip-tags lines))
                                  (unique-lines (seq-uniq stripped-lines)))
                             (mapconcat #'identity unique-lines "\n"))))
           (buffer-filename (buffer-file-name))
           (default-output-name (if buffer-filename
                                    (concat (file-name-sans-extension buffer-filename) ".txt")
                                  "transcript.txt"))
           (output-file (read-file-name "Export clean transcript to: " nil default-output-name t)))
      (if output-file
          (progn
            (with-temp-file output-file
              (insert cleaned-text))
            (message "Transcript exported to %s" output-file))
        (message "Transcript export cancelled")))))
#+end_src

* misc
:PROPERTIES:
:ID:       EB8682EE-77BC-4D88-AA87-5ECB804C8B53
:END:

** calc
:PROPERTIES:
:ID:       50FAD2F3-E501-408E-A9A2-8358FAA87C1C
:END:

/calc is the Emacs calculator./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature calc
  :config
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'calc-quick-calc-history))

  :bind
  (("A-c" . calc)
   ("A-M-c" . quick-calc)
   :map calc-mode-map
   ("C-k" . nil)))
#+end_src

** calc-ext
:PROPERTIES:
:ID:       34F23DCB-0B05-4CFB-95F3-F5CC392B538D
:END:

/calc-ext provides various extension functions for calc./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature calc-ext
  :after cal
  :bind (:map calc-alg-map
              ("C-k" . nil)))
#+end_src

** alert
:PROPERTIES:
:ID:       694AAC2E-669E-40D4-9794-5E352D77734C
:END:
:LOGBOOK:
CLOCK: [2022-07-28 Thu 11:50]--[2022-07-28 Thu 12:02] =>  0:12
CLOCK: [2022-03-31 Thu 18:32]--[2022-03-31 Thu 18:49] =>  0:17
CLOCK: [2022-03-31 Thu 16:33]--[2022-03-31 Thu 16:33] =>  0:00
CLOCK: [2021-04-08 Thu 18:18]--[2021-04-08 Thu 18:29] =>  0:11
CLOCK: [2021-03-27 Sat 16:50]--[2021-03-27 Sat 17:00] =>  0:10
:END:

/[[https://github.com/jwiegley/alert][alert]] is a Growl-like alerts notifier for Emacs./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package alert
  :defer t
  :custom
  ;; the settings below are not working; is it because `alert-default-style' is set to `notifier'?
  (alert-fade-time 2)
  (alert-persist-idle-time 60)
  (alert-default-style 'osx-notifier)

  :config
  ;; This function has to be loaded manually, for some reason.
  (defun alert-osx-notifier-notify (info)
    (apply #'call-process "osascript" nil nil nil "-e"
           (list (format "display notification %S with title %S"
                         (alert-encode-string (plist-get info :message))
                         (alert-encode-string (plist-get info :title)))))
    (alert-message-notify info)))
#+end_src

** midnight
:PROPERTIES:
:ID:       C6B68696-DCCC-4143-A0BC-E5EEE249AACF
:END:
:LOGBOOK:
CLOCK: [2023-07-27 Thu 09:42]--[2023-07-27 Thu 09:48] =>  0:06
CLOCK: [2022-08-29 Mon 16:53]--[2022-08-29 Mon 17:06] =>  0:13
CLOCK: [2022-07-15 Fri 10:10]--[2022-07-15 Fri 11:10] =>  1:00
CLOCK: [2022-07-13 Wed 10:43]--[2022-07-13 Wed 10:56] =>  0:13
CLOCK: [2022-05-06 Fri 08:00]--[2022-05-06 Fri 08:15] =>  0:15
CLOCK: [2022-01-05 Wed 07:59]--[2022-01-05 Wed 08:37] =>  0:38
CLOCK: [2021-12-23 Thu 08:03]--[2021-12-23 Thu 08:20] =>  0:17
CLOCK: [2021-12-15 Wed 17:44]--[2021-12-15 Wed 17:53] =>  0:09
CLOCK: [2021-11-18 Thu 22:20]--[2021-11-18 Thu 22:58] =>  0:38
CLOCK: [2021-07-10 Sat 18:47]--[2021-07-10 Sat 19:28] =>  0:41
CLOCK: [2021-07-08 Thu 10:09]--[2021-07-08 Thu 10:33] =>  0:24
CLOCK: [2021-07-07 Wed 23:25]--[2021-07-07 Wed 23:46] =>  0:21
CLOCK: [2021-05-28 Fri 14:34]--[2021-05-28 Fri 14:46] =>  0:12
:END:

/midnight runs custom processes every night./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature midnight
  :defer 5
  :custom
  (clean-buffer-list-kill-never-buffer-names
   '("*mu4e-headers*"
     " *mu4e-update*"))
  (clean-buffer-list-kill-never-regexps
   '("\\` \\*Minibuf-.*\\*\\'"
     "^untitled.*"))
  (clean-buffer-list-delay-general 2) ; kill buffers unused for more than three days

  :config
  (midnight-mode)
  ;; setting the delay causes midnight to run immediately, so we set it via a timer
  (run-with-idle-timer (* 3 60 60) nil (lambda () (midnight-delay-set 'midnight-delay "5:00am")))

  (dolist (fun (nreverse '(files-extras-save-all-buffers
                           clean-buffer-list
                           ledger-mode-extras-update-coin-prices
                           ledger-mode-extras-update-commodities
                           magit-extras-stage-commit-and-push-all-repos
                           org-roam-db-sync
                           org-extras-id-update-id-locations
                           el-patch-validate-all
                           org-extras-agenda-switch-to-agenda-current-day
                           mu4e-extras-update-all-mail-and-index
                           org-gcal-sync
                           elfeed-update)))
    (add-hook 'midnight-hook
              (apply-partially #'simple-extras-call-verbosely
                               fun "Midnight hook now calling `%s'..."))))
#+end_src

** bbdb
:PROPERTIES:
:ID:       0537BBF6-FD95-44A5-9327-1024A3D106EB
:END:
:LOGBOOK:
CLOCK: [2023-04-09 Sun 16:40]--[2023-04-09 Sun 16:48] =>  0:08
CLOCK: [2023-04-02 Sun 21:10]--[2023-04-02 Sun 21:19] =>  0:09
CLOCK: [2023-03-31 Fri 15:20]--[2023-03-31 Fri 15:23] =>  0:03
CLOCK: [2023-03-28 Tue 22:48]--[2023-03-28 Tue 23:50] =>  1:02
CLOCK: [2023-03-28 Tue 22:32]--[2023-03-28 Tue 22:47] =>  0:15
:END:

/[[https://elpa.gnu.org/packages/bbdb.html][bbdb]] is a contact management package./

A tutorial for this undocumented package may be found [[https://github.com/andycowl/bbdb3-manual/blob/master/tutorial.rst][here]].

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package bbdb
  :ensure (:host github
                 :repo "emacsmirror/bbdb"
                 :files (:defaults "lisp/*.el")
                 :pre-build (("./autogen.sh")
                             ("./configure")
                             ("make"))
                 :build (:not elpaca--compile-info))

  :custom
  (bbdb-file (file-name-concat paths-dir-bbdb "bbdn.el"))
  (bbdb-image-path (file-name-concat paths-dir-bbdb "media/"))

  :config
  (bbdb-initialize 'anniv)

  :bind
  (("A-b" . bbdb)
   :map bbdb-mode-map
   ("A-C-s-r" . bbdb-prev-record)
   ("A-C-s-f" . bbdb-next-record)
   ("c" . bbdb-copy-fields-as-kill)
   ("C-k" . nil)
   ("M-d" . nil)))
#+end_src

** bbdb-extras
:PROPERTIES:
:ID:       07EA04A6-65BE-4AF9-A945-99095D719815
:END:


/[[file:extras/bbdb-extras.el][bbdb-extras]] collects my extensions for =bbdb=./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-personal-package bbdb-extras
  :bind (:map bbdb-mode-map
              ("D" . bbdb-extras-delete-field-or-record-no-confirm)
              ("E" . bbdb-extras-export-vcard)
              ("n" . bbdb-extras-create-quick)))
#+end_src

** bbdb-vcard
:PROPERTIES:
:ID:       EB0B93F7-30F0-4C6D-A638-CD67C307CB62
:END:

/[[https://github.com/tohojo/bbdb-vcard][bbdb-vcard]] supports import and export for BBDB./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package bbdb-vcard
  :after bbdb
  :custom
  (bbdb-vcard-directory paths-dir-bbdb)
  (bbdb-vcard-media-directory "media"))
#+end_src

** macos
:PROPERTIES:
:ID:       E8C33B31-BFDD-45BF-ABDB-6F60353653CF
:END:
:LOGBOOK:
CLOCK: [2024-09-01 Sun 18:51]--[2024-09-01 Sun 19:39] =>  0:48
CLOCK: [2024-08-27 Tue 13:30]--[2024-08-27 Tue 13:44] =>  0:14
CLOCK: [2024-08-27 Tue 12:15]--[2024-08-27 Tue 12:58] =>  0:43
:END:

/[[https://github.com/benthamite/macos][macos]] is a simple package I developed that provides a few macOS-specific functions./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package macos
  :ensure (:host github
           :repo "benthamite/macos")
  :custom
  (macos-bluetooth-device-list
        '(("Sonny WH-1000XM5" . "ac-80-0a-37-41-1e")))

  :bind
  (("C-M-s-c" . macos-bluetooth-device-dwim)
   ("C-M-s-g" . macos-set-dication-language)))
#+end_src

** keycast
:PROPERTIES:
:ID:       8D51F4B0-7443-420B-919F-7AA9B0EC0CE9
:END:

/[[https://github.com/tarsius/keycast][keycast]] shows the current command and its key in the mode line./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package keycast
  :defer t
  :config
  ;; support for doom modeline (github.com/tarsius/keycast/issues/7)
  (with-eval-after-load 'keycast
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))))
#+end_src

** activity-watch-mode
:PROPERTIES:
:ID:       809139BE-A8AF-40A7-BF1A-899839313729
:END:



/[[https://github.com/wakatime/wakatime-mode][activity-watch-mode]] is an Emacs watcher for [[https://activitywatch.net/][ActivityWatch]]./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package activity-watch-mode
  :defer 5
  :config
  (require 'magit)
  (global-activity-watch-mode)

  (defun activity-watch-disable-on-remote-files ()
    "Prevent activity-watch from running on remote files."
    ;; Cancel existing timer
    (dolist (timer timer-list)
      (when (and (timerp timer)
                 (eq (timer--function timer) 'activity-watch--save))
        (cancel-timer timer)))

    ;; Replace the core function safely
    (defun activity-watch--save ()
      "Safe version that won't run on remote files."
      (let ((remote-p nil))
        ;; Check for remote file without using file-remote-p directly
        (condition-case nil
            (when (buffer-file-name)
              (setq remote-p (string-match-p "^/" (buffer-file-name))))
          (error nil))

        ;; Only run for non-remote files
        (unless remote-p
          (condition-case nil
              (when (fboundp 'activity-watch--send-heartbeat)
                (let ((file-name (buffer-file-name))
                      (project-name (if (and (boundp 'projectile-mode)
                                             projectile-mode
                                             (fboundp 'projectile-project-p)
                                             (projectile-project-p))
                                        (projectile-project-name)
                                      nil)))
                  (activity-watch--send-heartbeat file-name project-name)))
            (error nil)))))

    ;; Create new safe timer
    (when (boundp 'activity-watch-idle-timer)
      (run-with-idle-timer activity-watch-idle-timer t 'activity-watch--save)))

  (with-eval-after-load 'activity-watch
    (activity-watch-disable-on-remote-files)))
#+end_src

** custom
:PROPERTIES:
:ID:       7C328D33-DCFE-4E47-8B58-7C27E7F7C1DB
:END:

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature custom
  :custom
  (custom-safe-themes t)
  (custom-file (make-temp-file "gone-baby-gone"))  ; move unintended customizations to a garbage file

  :bind
  (:map custom-mode-map
        ("f" . ace-link-custom)))
#+end_src

** mercado-libre
:PROPERTIES:
:ID:       EE7E910B-F443-44F7-87F1-5E44137DDB9E
:END:

/[[https://github.com/benthamite/mercado-libre][mercado-libre]] is a package for querying MercadoLibre, a popular Latin American e-commerce platform./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package mercado-libre
  :ensure (:host github
                 :repo "benthamite/mercado-libre")
  :defer t
  :custom
  (mercado-libre-client-id (auth-source-pass-get "app-id" "chrome/mercadolibre.com/benthamite"))
  (mercado-libre-client-key (auth-source-pass-get "app-key" "chrome/mercadolibre.com/benthamite"))
  (mercado-libre-new-results-limit nil)
  (mercado-libre-listings-db-file
   (file-name-concat paths-dir-dropbox "Apps/Mercado Libre/mercado-libre-listings.el")))
#+end_src

** polymarket
:PROPERTIES:
:ID:       735A9793-ABDB-4251-AA0B-237D7F2D7788
:END:

/[[https://github.com/benthamite/polymarket][polymarket]]/ is a package to fetch and place trades on Polymarket, a popular prediction market.

(This package is not currently public.)

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package polymarket
  :ensure (:host github
                 :repo "benthamite/polymarket"))
#+end_src

** kelly
:PROPERTIES:
:ID:       259863E9-6C12-4C58-B959-30C27C3D6BDF
:END:

/[[https://github.com/benthamite/kelly][kelly]] is a Kelly criterion calculator./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package kelly
  :ensure (:host github
                 :repo "benthamite/kelly")
  :defer t

  :custom
  (kelly-b-parameter-type 'probability))
#+end_src

** fatebook
:PROPERTIES:
:ID:       6668B610-6BAD-40AD-823B-7E96EFBB23CB
:END:

/[[https://github.com/sonofhypnos/fatebook.el][fatebook]] is an Emacs package to create predictions on Fatebook./

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-package fatebook
  :ensure (:repo "sonofhypnos/fatebook.el"
                 :host github
                 :files ("fatebook.el"))
  :commands fatebook-create-question
  :custom
  (fatebook-api-key-function (lambda () (auth-source-pass-get "api" "chrome/fatebook.io"))))
#+end_src

** tetris
:PROPERTIES:
:ID:       F4C5A232-7788-4240-9CE2-B6761C905786
:END:

And finally, the section you've all been waiting for.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(use-feature tetris
  :bind
  (:map tetris-mode-map
   ("k" . tetris-rotate-prev)
   ("l" . tetris-move-down)
   ("j" . tetris-move-left)
   (";" . tetris-move-right)))
#+end_src

* personal
:PROPERTIES:
:ID:       9D7B5C99-2380-4159-A8C8-4021CC0482DE
:END:
:LOGBOOK:
CLOCK: [2023-03-27 Mon 22:06]--[2023-03-27 Mon 22:17] =>  0:11
:END:

** keyboard-maestro
:PROPERTIES:
:ID:       1776C0C3-CEEC-4DED-B609-4DF0DF83B0C2
:END:

These bindings allow Keyboard Maestro to trigger various Emacs processes.

Note to self: The pattern for KM shortcuts is =C-H-<capital-letter>=. This corresponds to =⇧⌘⌃<letter>= in macOS.

#+begin_src emacs-lisp :tangle (init-tangle-conditionally)
(global-set-key (kbd "C-H-Z") 'zotra-extras-add-entry)
#+end_src

* appendices
:PROPERTIES:
:CUSTOM_ID: introduction
:ID:       A7940400-DD17-4B0B-A9B2-565A207D680C
:END:
:LOGBOOK:
CLOCK: [2021-10-20 Wed 19:56]--[2021-10-20 Wed 19:59] =>  0:03
CLOCK: [2021-07-24 Sat 10:45]--[2021-07-24 Sat 10:56] =>  0:11
CLOCK: [2021-07-23 Fri 15:26]--[2021-07-23 Fri 15:58] =>  0:32
CLOCK: [2021-07-13 Tue 18:29]--[2021-07-13 Tue 18:47] =>  0:18
CLOCK: [2021-07-11 Sun 21:41]--[2021-07-11 Sun 22:14] =>  0:33
CLOCK: [2021-12-03 Fri 21:49]--[2021-12-03 Fri 21:56] =>  0:07
CLOCK: [2021-06-15 Tue 20:45]--[2021-06-15 Tue 20:52] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-01 Tue 21:00]--[2021-06-01 Tue 21:59] =>  0:59
CLOCK: [2021-05-18 Tue 09:22]--[2021-05-18 Tue 09:32] =>  0:10
CLOCK: [2021-05-14 Fri 15:45]--[2021-05-14 Fri 16:01] =>  0:00
CLOCK: [2021-04-27 Tue 22:10]--[2021-04-27 Tue 22:26] =>  0:16
CLOCK: [2021-03-31 Wed 10:10]--[2021-03-31 Wed 11:08] =>  0:58
CLOCK: [2021-03-30 Tue 15:21]--[2021-03-30 Tue 18:00] =>  2:39
CLOCK: [2021-03-30 Tue 09:43]--[2021-03-30 Tue 11:46] =>  2:03
CLOCK: [2021-03-22 Mon 21:40]--[2021-03-22 Mon 21:49] =>  0:09
CLOCK: [2021-03-20 Sat 13:16]--[2021-03-20 Sat 13:30] =>  0:14
CLOCK: [2021-03-04 Thu 10:10]--[2021-03-04 Thu 10:37] =>  0:27
CLOCK: [2021-03-02 Tue 21:12]--[2021-03-02 Tue 21:50] =>  0:38
CLOCK: [2021-03-01 Mon 10:11]--[2021-03-01 Mon 10:28] =>  0:17
CLOCK: [2021-02-23 Tue 10:45]--[2021-02-23 Tue 10:54] =>  0:09
CLOCK: [2021-02-04 Thu 19:36]--[2021-02-04 Thu 20:54] =>  1:18
CLOCK: [2021-02-04 Thu 18:40]--[2021-02-04 Thu 19:33] =>  0:53
CLOCK: [2021-02-04 Thu 16:40]--[2021-02-04 Thu 18:35] =>  1:55
CLOCK: [2021-02-04 Thu 12:27]--[2021-02-04 Thu 12:44] =>  0:17
CLOCK: [2021-02-04 Thu 12:19]--[2021-02-04 Thu 12:27] =>  0:08
CLOCK: [2021-02-04 Thu 09:30]--[2021-02-04 Thu 10:49] =>  1:19
CLOCK: [2021-02-03 Wed 22:09]--[2021-02-03 Wed 22:46] =>  0:37
CLOCK: [2021-02-03 Wed 20:24]--[2021-02-03 Wed 20:33] =>  0:09
CLOCK: [2021-02-03 Wed 18:27]--[2021-02-03 Wed 20:00] =>  1:33
CLOCK: [2021-02-03 Wed 19:43]--[2021-02-03 Wed 19:43] =>  0:00
CLOCK: [2021-04-08 Thu 13:56]--[2021-04-08 Thu 14:12] =>  0:16
CLOCK: [2021-04-03 Sat 19:06]--[2021-04-03 Sat 19:31] =>  0:25
CLOCK: [2022-05-29 Sun 09:25]--[2022-05-29 Sun 10:31] =>  1:13
CLOCK: [2021-07-24 Sat 09:51]--[2021-07-24 Sat 09:58] =>  0:07
CLOCK: [2021-07-14 Wed 22:51]--[2021-07-14 Wed 23:09] =>  0:18
CLOCK: [2021-03-07 Sun 18:52]--[2021-03-07 Sun 18:57] =>  0:05
CLOCK: [2021-03-04 Thu 09:05]--[2021-03-04 Thu 09:22] =>  0:17
CLOCK: [2021-02-03 Wed 16:32]--[2021-02-03 Wed 18:27] =>  1:55
CLOCK: [2021-02-03 Wed 16:01]--[2021-02-03 Wed 16:32] =>  0:31
CLOCK: [2021-02-03 Wed 15:40]--[2021-02-03 Wed 16:01] =>  0:21
CLOCK: [2021-02-03 Wed 13:56]--[2021-02-03 Wed 15:02] =>  1:06
CLOCK: [2021-01-31 Sun 15:22]--[2021-01-31 Sun 16:01] =>  0:39
CLOCK: [2021-01-31 Sun 10:07]--[2021-01-31 Sun 10:28] =>  0:21
CLOCK: [2021-01-24 Sun 11:41]--[2021-01-24 Sun 11:48] =>  0:07
CLOCK: [2021-01-23 Sat 08:40]--[2021-01-23 Sat 08:46] =>  0:06
CLOCK: [2021-01-22 Fri 09:29]--[2021-01-22 Fri 09:32] =>  0:03
CLOCK: [2021-01-12 Tue 19:22]--[2021-01-12 Tue 19:27] =>  0:05
CLOCK: [2021-01-12 Tue 11:41]--[2021-01-12 Tue 12:42] =>  1:01
CLOCK: [2021-01-08 Fri 13:34]--[2021-01-08 Fri 13:34] =>  0:00
CLOCK: [2021-01-06 Wed 22:04]--[2021-01-06 Wed 22:14] =>  0:10
CLOCK: [2021-01-06 Wed 13:46]--[2021-01-06 Wed 13:58] =>  0:12
CLOCK: [2021-01-06 Wed 12:30]--[2021-01-06 Wed 12:53] =>  0:23
CLOCK: [2021-01-06 Wed 11:02]--[2021-01-06 Wed 11:34] =>  0:32
CLOCK: [2021-01-03 Sun 22:11]--[2021-01-03 Sun 22:18] =>  0:07
CLOCK: [2021-01-03 Sun 22:03]--[2021-01-03 Sun 22:07] =>  0:04
CLOCK: [2021-01-02 Sat 14:00]--[2021-01-02 Sat 14:06] =>  0:06
CLOCK: [2020-12-31 Thu 13:56]--[2020-12-31 Thu 14:25] =>  0:29
CLOCK: [2020-12-31 Thu 13:46]--[2020-12-31 Thu 13:52] =>  0:06
CLOCK: [2020-12-29 Tue 15:07]--[2020-12-29 Tue 15:18] =>  0:11
CLOCK: [2020-12-22 Tue 09:57]--[2020-12-22 Tue 10:25] =>  0:28
CLOCK: [2020-12-19 Sat 12:18]--[2020-12-19 Sat 12:22] =>  0:04
CLOCK: [2020-12-14 Mon 18:39]--[2020-12-14 Mon 18:44] =>  0:05
CLOCK: [2020-12-07 Mon 18:15]--[2020-12-07 Mon 18:27] =>  0:12
CLOCK: [2020-10-20 Tue 17:48]--[2020-10-20 Tue 18:10] =>  0:22
CLOCK: [2020-10-20 Tue 17:27]--[2020-10-20 Tue 17:38] =>  0:11
CLOCK: [2020-10-20 Tue 11:30]--[2020-10-20 Tue 11:36] =>  0:06
CLOCK: [2020-10-19 Mon 20:24]--[2020-10-19 Mon 20:39] =>  0:15
CLOCK: [2020-10-15 Thu 20:37]--[2020-10-15 Thu 20:52] =>  0:15
CLOCK: [2020-10-15 Thu 18:56]--[2020-10-15 Thu 19:06] =>  0:10
CLOCK: [2020-10-15 Thu 18:11]--[2020-10-15 Thu 18:26] =>  0:15
CLOCK: [2020-10-14 Wed 07:31]--[2020-10-14 Wed 07:52] =>  0:21
CLOCK: [2020-10-12 Mon 18:15]--[2020-10-12 Mon 19:58] =>  1:43
CLOCK: [2020-10-12 Mon 15:28]--[2020-10-12 Mon 15:29] =>  0:01
CLOCK: [2020-10-11 Sun 21:10]--[2020-10-11 Sun 21:15] =>  0:05
CLOCK: [2020-10-11 Sun 10:05]--[2020-10-11 Sun 10:19] =>  0:14
CLOCK: [2020-10-10 Sat 18:21]--[2020-10-10 Sat 18:25] =>  0:04
CLOCK: [2020-10-05 Mon 18:56]--[2020-10-05 Mon 18:58] =>  0:02
CLOCK: [2020-10-04 Sun 11:27]--[2020-10-04 Sun 11:34] =>  0:07
CLOCK: [2020-10-04 Sun 10:54]--[2020-10-04 Sun 11:22] =>  0:28
CLOCK: [2020-08-19 Wed 13:52]--[2020-08-19 Wed 14:47] =>  0:55
:END:

** key bindings
:PROPERTIES:
:ID:       a47d148a-1b5e-4850-a1a7-6cd745bad696
:END:
Emacs has five native [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifier-Keys.html][modifier keys]]: ~Control~ (~C~), ~Meta~ (~M~), ~Super~ (~s~), ~Hyper~ (~H~), and ~Alt~ (~A~). (The letter abbreviation for the ~Super~ modifier is ~s~ because ~S~ is assigned to the ~Shift~ key.) I use [[https://karabiner-elements.pqrs.org/][Karabiner-Elements]], in combination with a [[https://www.zsa.io/moonlander/][Moonlander keyboard]], to generate several additional "pseudo modifiers", or mappings between individual keys and combinations of two or more Emacs modifiers:

[[file:etc/moonlander-emacs.png]]

So when you see a monstrous key binding such as ~C-H-M-s-d~, remember that everything that precedes the final key (in this case, ~d~) represents a single key press (in this case, ~l~). For details, see my [[../karabiner/modifications.org][Karabiner config file]], specifically the "Key associations" section.

I set key bindings in the following ways:
- With the =:bind= keyword of =use-package=.
  - For commands provided by the package or feature being loaded in that block.
  - For commands provided by other packages or features, when these are being set in a keymap provided by the feature being loaded in that block. This approach is appropriate when one wants to bind a key to a command in a keymap and wants this binding to be active even before the feature providing the command is loaded. Example:
- With =bind-keys= within the =:init= section of =use-package=.
  - For commands provided by the feature being loaded in that block that are bound in a keymap provided by another feature. This is appropriate when the feature providing the keymap may load after the feature providing the command. In these cases, using =:bind= is not possible since Emacs will throw an error. Example: binding the command =scroll-down-command=, which is provided by =window=, to the key =y= in =elfeed-show-mode-map=, which is provided by =elfeed=. Note that if the command is not natively autoloaded, an autoload must be set, e.g. =(autoload #'=scroll-down-command "window" nil t)=. [confirm that this is so: it’s possible =bind-keys= automatically creates autoloads, just like the =:bind= keyword does]
  - For commands provided by the feature being loaded in that block that are bound globally and should be available even before the feature is configured. (Note that I distinguish between the loading of a feature and its configuration. A key binding specified via the =:bind= keyword of =use-package= will be available before the package is loaded but only after it is configured. If, for example, the block includes the =:after= keyword, the package will only be configured after that condition is satisfied.) Example: =ebib-extras-open-or-switch=, which is provided by =ebib-extras= and will be configured after =ebib= is loaded, yet we want it to be available even before =ebib= is loaded.

** debugging                                                       :noexport:
:PROPERTIES:
:ID:       ED2955EA-3BD8-4058-A973-3CC87847D9A5
:END:
:LOGBOOK:
CLOCK: [2021-04-12 Mon 13:20]--[2021-04-12 Mon 13:46] =>  0:26
:END:
- Run =bug-hunter-init-file= (from the [[id:0C19171B-8DFA-4E06-9E17-45C1F9158C28][elisp-bug-hunter]] package) and select "automatic error detection" (~e~).
- Run =emacs -q= or =emacs --debug-init=.
- Cut suspected sections of the org file (=org-cut-subtree=), tangle immediately afterwards, then undo the changes. This will generate an init file without the code blocks included in the removed sections, while leaving the literal org file intact.
- Use =magit-log-buffer-file= or =git-timemachine= to explore previous versions of your config file.
- Set =debug-on-error= to ~t~ to see a backtrace of an error. Or call =toggle-debug-on-error= interactively.
  - To determine what function is changing the value of a variable, use =debug-on-variable-change=.
  - To determine what function is generating a particular message, use =debug-on-message=.
- Bisect the init file until you locate the culprit.
  - Run =bug-hunter-init-file= and select "bisect interactively" (~i~).
- If Emacs becomes unresponsive, run =pkill -USR2 Emacs= in a terminal. Emacs will likely trigger a backtrace, which you can inspect to diagnose the issue.
- You may want to periodically save a stable init file so that you can temporarily use Emacs with all your customizations while debugging your current init file (instead of having to use an external editor or a non-customized Emacs). Say you call this stable file ~stable.el~. Then you can tell Emacs to load this file on startup file with ~emacs -q -l ~/stable.el~.
- Use =edebug-defun=. See [[https://org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/45?u=pablo][this discussion]].
- For org-related issues (e.g. tangling the config file), use =org-lint=, which checks the current buffer for syntax mistakes.
- For more ideas, see:
  - [[https://www.emacswiki.org/emacs/DebugEmacs][EmacsWiki: Debug Emacs]]
  - [[https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/][Emacs Debugging Basics - whatacold's space]]
  - [[https://discourse.doomemacs.org/t/how-to-debug-issues/55][How to debug issues - Guides & Tutorials - Doom Emacs Discourse]].
  - [[id:94184DD8-591C-46CD-BFC3-9738113DA640][Debugging Emacs Lisp]]

** profiling
:PROPERTIES:
:ID:       60B7A58C-A79A-4EEF-A91D-EECC85CFA173
:END:
- If you use ~use-package~, the command =use-package-report= displays a table showing the impact of each package on load times.
- You may also want to try [[https://www.emacswiki.org/emacs/ProfileDotEmacs][profile-dotemacs]].

** installation
:PROPERTIES:
:ID:       6712DA4C-BA45-4E74-8AEF-C903462D9BCB
:END:
:LOGBOOK:
CLOCK: [2021-04-20 Tue 22:00]--[2021-04-20 Tue 23:28] =>  1:28
CLOCK: [2021-04-20 Tue 20:55]--[2021-04-20 Tue 21:26] =>  0:31
CLOCK: [2021-04-03 Sat 14:40]--[2021-04-03 Sat 15:07] =>  0:27
CLOCK: [2021-04-02 Fri 22:15]--[2021-04-02 Fri 22:35] =>  0:20
CLOCK: [2021-03-31 Wed 22:00]--[2021-03-31 Wed 23:00] =>  1:00
CLOCK: [2021-03-31 Wed 21:40]--[2021-03-31 Wed 21:47] =>  0:07
CLOCK: [2021-03-27 Sat 10:08]--[2021-03-27 Sat 13:05] =>  2:57
CLOCK: [2021-03-27 Sat 07:49]--[2021-03-27 Sat 09:10] =>  1:21
CLOCK: [2021-03-27 Sat 16:48]--[2021-03-27 Sat 16:50] =>  0:02
CLOCK: [2021-03-22 Mon 15:46]--[2021-03-22 Mon 15:53] =>  0:07
CLOCK: [2021-03-22 Mon 15:00]--[2021-03-22 Mon 15:20] =>  0:20
CLOCK: [2021-02-27 Sat 17:20]--[2021-02-27 Sat 18:00] =>  0:40
CLOCK: [2021-02-25 Thu 08:30]--[2021-02-25 Thu 11:54] =>  3:24
CLOCK: [2021-02-07 Sun 15:01]--[2021-02-07 Sun 15:18] =>  0:17
CLOCK: [2021-02-07 Sun 14:52]--[2021-02-07 Sun 14:54] =>  0:26
CLOCK: [2021-02-07 Sun 14:30]--[2021-02-07 Sun 14:49] =>  0:19
CLOCK: [2021-02-04 Thu 08:10]--[2021-02-04 Thu 09:25] =>  1:15
CLOCK: [2020-09-22 Tue 12:15]--[2020-09-22 Tue 13:01] =>  0:46
CLOCK: [2020-09-22 Tue 10:50]--[2020-09-22 Tue 12:15] =>  1:25
CLOCK: [2022-04-27 Wed 16:21]--[2022-04-27 Wed 16:44] =>  0:23
CLOCK: [2021-08-15 Sun 17:03]--[2021-08-15 Sun 17:06] =>  0:03
:END:

For personal reference, these are the most recent Emacs installations (in reverse chronological order).

(After installing, you may need to create a symlink to the =Emacs.app= folder in  =/opt/homebrew/Cellar/emacs-plus@30/30.1/Emacs.app=, replacing =30.1= with the actual version number.)

[2025-06-27 Fri]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2024-10-09 Wed]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2024-03-18 Mon]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@29 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

???:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-23 Thu 02:10]

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-dbus --with-no-titlebar --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

- Very slow.
- Theme broke for some reason.
- Some functions (e.g. =keymap-unset=) not available).
- Telega doesn't show profile pics

[2023-02-14 Tue 20:07]:

#+begin_src shell :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus@30 --with-dbus --with-debug --with-native-comp --with-xwidgets --with-imagemagick --with-spacemacs-icon
#+end_src

[2023-02-07 Tue 21:52]:

#+begin_src shell :tangle no
brew install emacs-mac --with-dbus --with-starter --with-natural-title-bar --with-native-comp --with-mac-metal --with-xwidgets --with-imagemagick  --with-librsvg  --with-spacemacs-icon
#+end_src

** other config files
:PROPERTIES:
:ID:       20E3D45E-D8AB-44BD-A5E2-C6DF9C20744E
:END:

:LOGBOOK:
CLOCK: [2022-06-29 Wed 18:08]--[2022-06-29 Wed 18:18] =>  0:10
CLOCK: [2022-06-17 Fri 21:20]--[2022-06-17 Fri 21:47] =>  0:27
CLOCK: [2021-08-02 Mon 21:29]--[2021-08-02 Mon 21:30] =>  0:01
CLOCK: [2021-06-30 Wed 20:43]--[2021-06-30 Wed 21:15] =>  0:32
CLOCK: [2021-06-30 Wed 19:32]--[2021-06-30 Wed 20:02] =>  0:30
CLOCK: [2021-06-05 Sat 19:34]--[2021-06-05 Sat 19:41] =>  0:07
CLOCK: [2021-06-03 Thu 16:09]--[2021-06-03 Thu 16:37] =>  0:28
CLOCK: [2021-06-03 Thu 13:47]--[2021-06-03 Thu 13:52] =>  0:05
CLOCK: [2021-06-03 Thu 07:21]--[2021-06-03 Thu 07:50] =>  0:29
CLOCK: [2021-06-02 Wed 22:00]--[2021-06-02 Wed 22:11] =>  0:11
CLOCK: [2021-06-02 Wed 21:44]--[2021-06-02 Wed 21:50] =>  0:06
CLOCK: [2021-05-26 Wed 19:32]--[2021-05-26 Wed 19:44] =>  0:12
CLOCK: [2021-05-23 Sun 19:52]--[2021-05-23 Sun 20:02] =>  0:10
CLOCK: [2021-05-22 Sat 16:36]--[2021-05-22 Sat 16:44] =>  0:08
CLOCK: [2021-04-03 Sat 18:21]--[2021-04-03 Sat 18:36] =>  0:15
CLOCK: [2021-03-27 Sat 17:00]--[2021-03-27 Sat 17:32] =>  0:32
CLOCK: [2021-03-26 Fri 13:31]--[2021-03-26 Fri 14:14] =>  0:43
CLOCK: [2021-03-26 Fri 12:47]--[2021-03-26 Fri 13:18] =>  0:00
CLOCK: [2021-03-26 Fri 10:47]--[2021-03-26 Fri 10:57] =>  0:10
CLOCK: [2021-03-23 Tue 14:30]--[2021-03-23 Tue 16:45] =>  2:15
CLOCK: [2021-03-23 Tue 14:10]--[2021-03-23 Tue 14:30] =>  0:20
CLOCK: [2021-03-21 Sun 16:23]--[2021-03-21 Sun 16:32] =>  0:09
CLOCK: [2021-02-28 Sun 10:12]--[2021-02-28 Sun 10:27] =>  0:15
CLOCK: [2021-02-04 Thu 12:49]--[2021-02-04 Thu 14:36] =>  1:47
:END:
The below is a link dump for config files and other related links I have found useful in the past or may want to check out for ideas at some point in the future.
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A list of useful Emacs packages.
- [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][How to build your own spacemacs · Samuel Barreto]]
- [[https://www.reddit.com/r/emacs/comments/3lt3c6/using_spacemacs_modeline_in_vanilla_emacs/][Using SpaceMacs mode-line in vanilla Emacs : emacs]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does Emacs Doom start so quickly?]] Might be useful for ideas on how to speed up config file.
- [[https://prelude.emacsredux.com/en/latest/][Emacs Prelude]]. I've seen this recommended. Might want to check it out.
- [[https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/][Polishing my Emacs -- who said an old tool can't look modern]]
  [[https://github.com/mbriggs/.emacs.d-oldv2/blob/master/init/init-keymaps.el][.emacs.d-oldv2/init-keymaps.el at master · mbriggs/.emacs.d-oldv2]]. Lots of key bindings.

Literate configuration
- [[https://commonplace.doubleloop.net/setting-up-a-spacemacs-literate-config-file][Setting up a spacemacs literate config file]]
- [[https://www.reddit.com/r/spacemacs/comments/atuzd9/does_anyone_have_their_dotfile_redone_in_literate/][Does anyone have their dotfile redone in literate programming with babel? : spacemacs]]
- Diego Zamboni, /[[https://leanpub.com/lit-config][Literate configuration]]/
- [[https://emacs.sJtackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][elisp - Can I use org-mode to structure my .emacs or other .el configuration file? - Emacs Stack Exchange]]

Some useful config files:
- [[https://github.com/stsquad/my-emacs-stuff][Alex Bennée]]. 
- [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Diego Zamboni]]
- [[https://jamiecollinson.com/blog/my-emacs-config/][Jamie Collinson]]
- [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][Jethro Kuan]]. Creator or ~org-roam~ and author of some great posts on note-taking. Not literal.
- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joost Diepenmat]]
- [[https://github.com/gjstein/emacs.d][Gregory Stein]]. Author of the excellent [[http://cachestocaches.com/][Caches to Caches]] blog.
- [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][Luca Cambiaghi]]
- [[https://config.phundrak.com/emacs][Lucien Cartier-Tilet]] (Spacemacs)
- [[https://github.com/isamert/dotfiles/blob/master/emacs/index.org][Isa Mert Gurbuz]]
  - Has a cool [[https://isamert.net/index.html][blog]] about org mode and other topics.
- [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Martin Foot]]
  - Has a very simple init file.
  - [[https://github.com/mfoo/dotfiles/blob/master/.emacs.d/config.org][.org file]]
- [[https://github.com/mpereira/.emacs.d][Murilo Pereira]].
  - Very well organized. The author has also written some excellent blog posts about Emacs.
- [[https://out-of-cheese-error.netlify.app/spacemacs-config][OutOfCheeseError]]
- [[https://protesilaos.com/dotemacs/][Protesilaos Stavrou]]
  - [[https://gitlab.com/protesilaos/dotfiles/-/blob/350ca3144c5ee868056619b9d6351fca0d6b131e/emacs/.emacs.d/emacs-init.org][here]] is the last commit before he abandoned ~use-package~ and ~straight~
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]. A legend in the Emacs community.
- [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit]].
  - Author of ~Memacs~, prolific blogger.
- [[https://github.com/sriramkswamy/dotemacs][Sriram Krishnaswamy]] ([[https://sriramkswamy.github.io/][website]])
  - [[https://sriramkswamy.github.io/dotemacs/][.org file]]
- [[https://github.com/sfromm/emacs.d#twitter][Stephen Fromm]]. Has an extended list of config files [[https://github.com/sfromm/emacs.d#inspiration][here]].
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]]
- [[https://www.tquelch.com/posts/emacs-config/#languages][Tim Quelch]]
- [[http://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html#orgbcdc8b2][Vianney Lebouteiller]]
- [[https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org#meta][Xuan Bi]].
- [[https://github.com/turbana/emacs-config][GitHub - turbana/emacs-config: My personal emac's configuration]]. Some potentially useful stuff on native comp, debugging, etc.
- [[https://github.com/creichert/dotfiles/blob/master/emacs/.emacs][dotfiles/.emacs at master · creichert/dotfiles · GitHub]]. Has detailed Gnus, Slack config.
- [[https://github.com/ianpan870102/yay-evil-emacs][yay-evil-emacs]]. slick design.
- [[https://github.com/rememberYou/.emacs.d][GitHub - rememberYou/.emacs.d: 🎉 Personal GNU Emacs configuration]]. Has a bunch of Reddit posts explaining how he uses the different packages.
- [[https://github.com/nkicg6/emacs-config/blob/master/config.org][emacs-config/config.org at master · nkicg6/emacs-config · GitHub]]. Found it while searching for org-ref.
- [[https://github.com/yiufung/dot-emacs/blob/master/init.el][dot-emacs/init.el at master · yiufung/dot-emacs · GitHub]]. Not literal. Lots of packages. Gnus, notmuch, Slack, etc. Author has great post on Anki.
- [[https://github.com/tshu-w/.emacs.d][GitHub - tshu-w/.emacs.d: My personal Emacs config, based on Spacemacs]]. Has nice note-taking config, with org-roam, org-ref, Zotero, etc (see [[https://github.com/tshu-w/.emacs.d/blob/master/lisp/lang-org.el][here]]).
- [[https://github.com/raxod502/radian/blob/e3aad124c8e0cc870ed09da8b3a4905d01e49769/emacs/radian.el][Radon Rosborough]]. Author of ~straight~ package manager.
- [[https://github.com/weirdNox/dotfiles/blob/master/config/.config/emacs/config.org][Gonçalo Santos]]. Author of ~org-noter~.
- [[https://github.com/tonyaldon/emacs.d/blob/master/init.el][Tony Aldon]]. Has some slick [[https://www.youtube.com/channel/UCQCrbWOFRmFYqoeou0Qv3Kg][videos]] on ~org-table~. Optimized key bindings.
- [[https://github.com/progfolio/.emacs.d/blob/master/init.org][Nicholas Vollmer]]. Maitantainer of ~elpaca~. I copied his ~org-habits~ config. Haven't yet looked at the rest but looks like there's plenty of valuable material.
- [[https://github.com/yantar92/emacs-config/blob/master/config.org][emacs-config/config.org at master · yantar92/emacs-config · GitHub]]. Focus on knowledge management with org. Lots of good stuff.
- [[https://github.com/xenodium/dotsies/blob/main/dots.org][Álvaro Ramírez]]. Also users Karabiner.
- [[https://github.com/karthink/.emacs.d][Karthik Chikmagalur]]. Has excellent blog posts on ~avy~, ~eshell~, ~re-builder~, etc.
- [[https://github.com/iqbalansari/dotEmacs][Iqbal Ansari]].
- [[https://www.danielclemente.com/emacs/confi.html][Daniel Clemente]].
- [[https://github.com/patrl][Patrick Elliott]]

* local variables
:PROPERTIES:
:ID:       4FB9C92B-B39E-4C3D-B9AE-A3342A6F1695
:END:
# Local Variables:
# eval: (run-with-timer 0.1 nil (lambda () (flycheck-mode -1)))
# eval: (files-extras-buffer-local-set-key (kbd "H-:") 'org-extras-config-dispatch)
# eval: (add-hook 'before-save-hook 'org-make-toc nil t)
# org-archive-default-command: org-archive-hierarchically
# doom-modeline-enable-word-count: nil
# End:
