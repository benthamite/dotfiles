;;; org-noter-extras.el --- Extensions for org-noter -*- lexical-binding: t -*-

;; Copyright (C) 2025

;; Author: Pablo Stafforini
;; URL: https://github.com/benthamite/dotfiles/tree/master/emacs/extras/org-noter-extras.el
;; Version: 0.2
;; Package-Requires: ((org-noter "1.1"))

;; This file is NOT part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Extensions for `org-noter'.

;;; Code:

(require 'org-noter)

;;;; Variables

(defgroup org-noter-extras ()
  "Extensions for `org-noter'."
  :group 'org-noter)

(defconst org-noter-extras-dehyphenate-hyphens '("-" "¬")
  "Hyphen to be removed by dehyphenation functions.")

(defconst org-noter-highlight-heading-regexp "Highlight on page[s]? \\(.*\\)"
  "Regexp matching the highlight heading generated by `org-noter'.")

(defconst org-noter-quote-begin "\n#+begin_quote\n"
  "Regexp matching the beginning of a quote block.")

(defconst org-noter-quote-end "\n#+end_quote\n"
  "Regexp matching the end of a quote block.")

;;;; Functions

;;;;; general

(defun org-noter-get-annotation-contents ()
  "Return cleaned-up annotation contents in subtree."
  (let ((initial-heading (org-get-heading t t t t)))
    (cond
     ((string-match org-noter-highlight-heading-regexp initial-heading)
      (org-back-to-heading)
      (org-next-visible-heading 1))
     ((string-match "Contents" initial-heading)
      (org-back-to-heading))
     (t
      (user-error "You must be either in a \"contents\" heading or in a \"highlight on page\" Heading")))
    (org-narrow-to-subtree)
    (org-end-of-meta-data t)
    (narrow-to-region (point) (point-max))
    (let ((fill-column (point-max)))
      (fill-region (point) (point-max)))
    (org-noter-extras-dehyphenate)
    (buffer-substring-no-properties (point) (point-max))))

;;;;; cleanup

(defun org-noter-extras-cleanup-annotation (&optional title)
  "Cleanup the annotation at point.
Replaces the generic \"Highlight on page X\" generated by
`org-noter-create-skeleton' with a custom TITLE and encloses the content of the
heading in a quote."
  (interactive)
  (org-noter-sync-current-note)
  (other-window 1)
  (let ((title (or title (read-string "Title: "))))
    (save-restriction
      (save-excursion
	(let ((content (org-noter-get-annotation-contents)))
	  (widen)
	  (org-cut-subtree)
	  (org-previous-visible-heading 1)
	  (let* ((highlight-heading (org-get-heading t t t t))
		 (page (progn
			 (string-match org-noter-highlight-heading-regexp highlight-heading)
			 (match-string 1 highlight-heading))))
	    (org-edit-headline (format "%s, p. %s" title page))
	    (org-narrow-to-subtree)
	    (goto-char (point-max))
	    (insert (concat org-noter-quote-begin content org-noter-quote-end))
	    (goto-char (point-min))
	    (re-search-forward (concat "\n" (regexp-quote org-noter-quote-end)) nil 'noerror)
	    (replace-match org-noter-quote-end)))
	(org-next-visible-heading 1)
	(org-fold-show-subtree)))))

;;;;; dehyphenate

;; TODO: find `org-noter' hook to run this automatically
(defun org-noter-extras-dehyphenate ()
  "Remove leftover hyphens in hyphenated text.
Operate on the current paragraph, or the region if active."
  (interactive)
  (let ((start (if (use-region-p)
		   (region-beginning)
		 (save-excursion (backward-paragraph) (point))))
	(end (if (use-region-p)
		 (region-end)
	       (save-excursion (forward-paragraph) (point))))
	(pattern "\\([[:alpha:]]\\)%s \\([[:alpha:]]\\)"))
    (save-excursion
      (dolist (hyphen org-noter-extras-dehyphenate-hyphens)
	(goto-char start)
	(while (re-search-forward (format pattern hyphen) end t)
	  (replace-match "\\1\\2"))))))

(defun org-noter-extras-set-hyphen ()
  "Set hyphen character for de-hyphenation."
  (interactive)
  (let ((hyphen (completing-read (format "Hyphen character (currently `%s'): "
					 org-noter-extras-dehyphenate-hyphens)
				 '("-" "­"))))
    (setq org-noter-extras-dehyphenate-hyphens hyphen)))

;;;;; offset

;; TODO: find `org-noter' hook to run this automatically
(defun org-noter-extras-highlight-offset (offset)
  "Fix numbering mismatch between PDF and book/article pages.
OFFSET is the page number of the PDF (displayed in the document viewer) minus
the page number in the book or article (shown on the printed page). Thus, if the
PDF’s page number is 220 and the book’s page number is 210 , OFFSET is 10. The
number will typically (but need not) be positive, since the PDF page number
tends to be higher than the book page number."
  (interactive "nOffset (PDF – book): ")
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "\\(Highlight on page \\)\\(.*$\\)" nil t)
      (let* ((num (number-to-string (- (string-to-number (match-string 2)) offset)))
	     (replacement (concat (match-string 1) num)))
	(replace-match replacement)))))

;;;;; navigate

(defun org-noter-extras-sync-next-note ()
  "Like `org-noter-sync-next-note', but do not switch focus to the PDF buffer."
  (interactive)
  (org-noter-sync-next-note)
  (other-window 1))

(defun org-noter-extras-sync-prev-note ()
  "Like `org-noter-sync-prev-note', but do not switch focus to the PDF buffer."
  (interactive)
  (org-noter-sync-prev-note)
  (other-window 1))

;;;;; merge

(defun org-noter-extras-merge-contents-with-next ()
  "Merge the Contents of the current annotation with the next one.
With point on a \"Highlight on page N\" heading, replace it with
\"Highlight on pages N–M\", append the next annotation's Contents to the
current one, then delete the next annotation subtree."
  (interactive)
  (save-excursion
    (org-back-to-heading)
    (let* ((top-title (org-get-heading t t t t))
	   (top-position (point))
	   (goto-top (lambda () (widen) (goto-char top-position))))
      (unless (string-match org-noter-highlight-heading-regexp top-title)
	(user-error "Point must be on a \"Highlight on page\" heading"))
      (let* ((page-a (match-string 1 top-title))
	     (content-a (org-noter-get-annotation-contents)))
	(funcall goto-top)
	(org-forward-heading-same-level 1 t)
	(when (= top-position (point))
	  (user-error "There is no next annotation at the same level"))
	(let* ((next-heading (org-get-heading t t t t)))
	  (unless (string-match org-noter-highlight-heading-regexp next-heading)
	    (user-error "Next heading is not a \"Highlight on page\" heading"))
	  (let* ((page-b (match-string 1 next-heading))
		 (content-b (org-noter-get-annotation-contents)))
	    (funcall goto-top)
	    (org-edit-headline (format "Highlight on pages %s–%s" page-a page-b))
	    (org-noter-extras--replace-contents-body (concat content-a " " content-b))
	    (let ((pos2 (point)))
	      (org-forward-heading-same-level 1 t)
	      (when (= pos2 (point))
		(user-error "Unexpected error locating next annotation for deletion")))
	    (org-cut-subtree)
	    (org-fold-show-subtree)))))))

(defun org-noter-extras--replace-contents-body (text)
  "Replace body of the Contents subheading under current heading with TEXT."
  (save-excursion
    (org-back-to-heading)
    (let ((this-level (org-outline-level)))
      (org-next-visible-heading 1)
      (unless (= (org-outline-level) (1+ this-level))
        (user-error "Contents subheading not found"))
      (unless (string-match-p "\\`Contents\\'" (org-get-heading t t t t))
        (user-error "Contents subheading not found"))
      (org-narrow-to-subtree)
      (org-end-of-meta-data t)
      (delete-region (point) (point-max))
      (insert text)
      (widen))))

(provide 'org-noter-extras)
;;; org-noter-extras.el ends here
